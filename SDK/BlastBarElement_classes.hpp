#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlastBarElement

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mariner_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BlastBarElement.BlastBarElement_C
// 0x00C8 (0x0378 - 0x02B0)
class UBlastBarElement_C final : public UMarinerUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       DodgeAnim;                                         // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ReceiveDamageAnim;                                 // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 BreakCanvas;                                       // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DrawCanvas;                                        // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FTimerHandle                           ReceiveDamageTimer;                                // 0x02D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ReceiveDamageTimerLoop;                            // 0x02E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ReceiveDamageAnimationLength;                      // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25A5[0x4];                                     // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BlastBarMat;                                       // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentDamageValue;                                // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayedDamageValue;                                // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           LagTick;                                           // 0x0300(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           LagEventTimer;                                     // 0x0308(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         LagTimerDelay;                                     // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHealAnim;                                        // 0x0314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25A6[0x3];                                     // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BlastExplodeMat;                                   // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MegablastTransitionAnimationlength;                // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MegablastHitAnimationlength;                       // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MegablastTimerLoop;                                // 0x0328(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MegablastTimer;                                    // 0x0330(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Main_Bar_Base_Material;                            // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Main_Bar_FriendlyNav_Material;                     // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Main_Bar_EnemyNav_Material;                        // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNavPin;                                          // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsFriendlyColoring;                                // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25A7[0x2];                                     // 0x0352(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverDamage_Percent;                                // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HealLoop;                                          // 0x0358(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HealLoopTimer;                                     // 0x0360(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         HealAnimationLength;                               // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25A8[0x4];                                     // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      CharacterReference;                                // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BlastBarElement(int32 EntryPoint);
	void OnRoundTransitionChange_Event_0(bool IsEnabled);
	void DodgeStarted(float DodgeDuration);
	void SetupCharacterRef(class AMarinerCharacter* Character);
	void HealAnimFinish();
	void AlreadyHealing(float CurrentHealth);
	void HealLoopAnim();
	void StartHealAnim(float CurrentHealth);
	void UpdateHealProgress(float CurrentHealth, bool FakeCurrent);
	void EnterMegablastState();
	void ResetMeter();
	void Construct();
	void ReceiveDamageEndAnimation();
	void ReceiveDamageUpdate();
	void AnimateMegablast();
	void EndMegablast();
	void UpdateDamageValue(float StartingDamage, float EndingDamage, class UMarinerDamageableComponent* DamageableComponent);
	void LagTickStart();
	void FakeTick();
	void SetupMats(class UMaterialInstanceDynamic** Output_Get);
	void Clear_Heal_Timers();
	void Get_Dodge_Ability(class UDodgeAbility_C** AsDodge_Ability);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BlastBarElement_C">();
	}
	static class UBlastBarElement_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlastBarElement_C>();
	}
};
static_assert(alignof(UBlastBarElement_C) == 0x000008, "Wrong alignment on UBlastBarElement_C");
static_assert(sizeof(UBlastBarElement_C) == 0x000378, "Wrong size on UBlastBarElement_C");
static_assert(offsetof(UBlastBarElement_C, UberGraphFrame) == 0x0002B0, "Member 'UBlastBarElement_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, DodgeAnim) == 0x0002B8, "Member 'UBlastBarElement_C::DodgeAnim' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, ReceiveDamageAnim) == 0x0002C0, "Member 'UBlastBarElement_C::ReceiveDamageAnim' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, BreakCanvas) == 0x0002C8, "Member 'UBlastBarElement_C::BreakCanvas' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, DrawCanvas) == 0x0002D0, "Member 'UBlastBarElement_C::DrawCanvas' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, ReceiveDamageTimer) == 0x0002D8, "Member 'UBlastBarElement_C::ReceiveDamageTimer' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, ReceiveDamageTimerLoop) == 0x0002E0, "Member 'UBlastBarElement_C::ReceiveDamageTimerLoop' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, ReceiveDamageAnimationLength) == 0x0002E8, "Member 'UBlastBarElement_C::ReceiveDamageAnimationLength' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, BlastBarMat) == 0x0002F0, "Member 'UBlastBarElement_C::BlastBarMat' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, CurrentDamageValue) == 0x0002F8, "Member 'UBlastBarElement_C::CurrentDamageValue' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, DelayedDamageValue) == 0x0002FC, "Member 'UBlastBarElement_C::DelayedDamageValue' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, LagTick) == 0x000300, "Member 'UBlastBarElement_C::LagTick' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, LagEventTimer) == 0x000308, "Member 'UBlastBarElement_C::LagEventTimer' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, LagTimerDelay) == 0x000310, "Member 'UBlastBarElement_C::LagTimerDelay' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, IsHealAnim) == 0x000314, "Member 'UBlastBarElement_C::IsHealAnim' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, BlastExplodeMat) == 0x000318, "Member 'UBlastBarElement_C::BlastExplodeMat' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, MegablastTransitionAnimationlength) == 0x000320, "Member 'UBlastBarElement_C::MegablastTransitionAnimationlength' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, MegablastHitAnimationlength) == 0x000324, "Member 'UBlastBarElement_C::MegablastHitAnimationlength' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, MegablastTimerLoop) == 0x000328, "Member 'UBlastBarElement_C::MegablastTimerLoop' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, MegablastTimer) == 0x000330, "Member 'UBlastBarElement_C::MegablastTimer' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, Main_Bar_Base_Material) == 0x000338, "Member 'UBlastBarElement_C::Main_Bar_Base_Material' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, Main_Bar_FriendlyNav_Material) == 0x000340, "Member 'UBlastBarElement_C::Main_Bar_FriendlyNav_Material' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, Main_Bar_EnemyNav_Material) == 0x000348, "Member 'UBlastBarElement_C::Main_Bar_EnemyNav_Material' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, IsNavPin) == 0x000350, "Member 'UBlastBarElement_C::IsNavPin' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, IsFriendlyColoring) == 0x000351, "Member 'UBlastBarElement_C::IsFriendlyColoring' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, OverDamage_Percent) == 0x000354, "Member 'UBlastBarElement_C::OverDamage_Percent' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, HealLoop) == 0x000358, "Member 'UBlastBarElement_C::HealLoop' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, HealLoopTimer) == 0x000360, "Member 'UBlastBarElement_C::HealLoopTimer' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, HealAnimationLength) == 0x000368, "Member 'UBlastBarElement_C::HealAnimationLength' has a wrong offset!");
static_assert(offsetof(UBlastBarElement_C, CharacterReference) == 0x000370, "Member 'UBlastBarElement_C::CharacterReference' has a wrong offset!");

}

