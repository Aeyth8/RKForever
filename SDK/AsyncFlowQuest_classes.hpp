#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AsyncFlowQuest

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "MangoClient_structs.hpp"
#include "Mariner_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AsyncFlowQuest.AsyncFlowQuest_C
// 0x00E0 (0x0110 - 0x0030)
class UAsyncFlowQuest_C final : public UMarinerAsyncUIFlowHandler
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0030(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FMangoQuestReward                      PendingQuestReward;                                // 0x0038(0x00C8)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          PendingQuestRewardIsOwned;                         // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2031[0x3];                                     // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClaimRewardID;                                     // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMangoQuestSlot                               PendingQuestSlot;                                  // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AsyncFlowQuest(int32 EntryPoint);
	void ClaimCompleted(bool bWasSuccessful, const EMangoQuestSlot SlotId, const struct FMangoQuestDescription& NewQuest);
	void OnConstruct();
	void ClaimStarted(const EMangoQuestSlot SlotId);
	void DummyCallback(struct FKey& KeyPressed);
	void OnClaimRewardStarted(EMangoQuestSlot& SlotId);
	void EvalPendingQuestRewardIsOwned();
	void OnClaimRewardCompleted(bool& WasSuccessful, EMangoQuestSlot& SlotId);
	void ClaimFailedRetry(struct FKey& KeyPressed);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AsyncFlowQuest_C">();
	}
	static class UAsyncFlowQuest_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncFlowQuest_C>();
	}
};
static_assert(alignof(UAsyncFlowQuest_C) == 0x000008, "Wrong alignment on UAsyncFlowQuest_C");
static_assert(sizeof(UAsyncFlowQuest_C) == 0x000110, "Wrong size on UAsyncFlowQuest_C");
static_assert(offsetof(UAsyncFlowQuest_C, UberGraphFrame) == 0x000030, "Member 'UAsyncFlowQuest_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAsyncFlowQuest_C, PendingQuestReward) == 0x000038, "Member 'UAsyncFlowQuest_C::PendingQuestReward' has a wrong offset!");
static_assert(offsetof(UAsyncFlowQuest_C, PendingQuestRewardIsOwned) == 0x000100, "Member 'UAsyncFlowQuest_C::PendingQuestRewardIsOwned' has a wrong offset!");
static_assert(offsetof(UAsyncFlowQuest_C, ClaimRewardID) == 0x000104, "Member 'UAsyncFlowQuest_C::ClaimRewardID' has a wrong offset!");
static_assert(offsetof(UAsyncFlowQuest_C, PendingQuestSlot) == 0x000108, "Member 'UAsyncFlowQuest_C::PendingQuestSlot' has a wrong offset!");

}

