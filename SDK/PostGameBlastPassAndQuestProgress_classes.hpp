#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PostGameBlastPassAndQuestProgress

#include "Basic.hpp"

#include "MangoClient_structs.hpp"
#include "Engine_structs.hpp"
#include "Mariner_structs.hpp"
#include "Mariner_classes.hpp"
#include "UMG_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C
// 0x0110 (0x05F0 - 0x04E0)
class UPostGameBlastPassAndQuestProgress_C final : public UMarinerMenu
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       TransitionBlastPassToRewards;                      // 0x04E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HideReward;                                        // 0x04F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       PresentReward;                                     // 0x04F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       TransitionQuestsToRewards;                         // 0x0500(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       PresentBlastPass;                                  // 0x0508(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       TransitionBlastPassToQuests;                       // 0x0510(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBlastPassProgressBar_C*                BlastPassBar;                                      // 0x0518(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           BlastPassPanel;                                    // 0x0520(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             BlastPassUpsell;                                   // 0x0528(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChallengeGroup_C*                      DailyChallengeGroup;                               // 0x0530(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarinerVerticalBox*                    QuestPanel;                                        // 0x0538(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDefaultRewardButton_C*                 RewardButton;                                      // 0x0540(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              RewardPanel;                                       // 0x0548(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBlastPassTierWidget_C*                 TierWidget;                                        // 0x0550(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChallengeGroup_C*                      WeeklyChallengeGroup;                              // 0x0558(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<struct FMarinerQuestProgress>          QuestsWithProgress;                                // 0x0560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FMangoReward>                   RewardList;                                        // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         RewardTimer;                                       // 0x0580(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2295[0x4];                                     // 0x0584(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoBattlePassResult                 PlayerBlastPassResult;                             // 0x0588(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_PostGameBlastPassAndQuestProgress(int32 EntryPoint);
	void BlastPassQuestProgressComplete();
	void BP_OnEntered(bool bFromSubMenu);
	void OnBlastPassBarLevelUp(int32 Level);
	void AllPresentationsComplete();
	void WidgetAnimationEvt_HideReward_K2Node_WidgetAnimationEvent_5();
	void QuestProgressComplete(const struct FMangoQuestDescription& Quest);
	void WidgetAnimationEvt_PresentReward_K2Node_WidgetAnimationEvent_4();
	void WidgetAnimationEvt_TransitionBlastPassToQuests_K2Node_WidgetAnimationEvent_0();
	void AllRewardsPresented();
	void WidgetAnimationEvt_TransitionQuestsToRewards_K2Node_WidgetAnimationEvent_3();
	void WidgetAnimationEvt_TransitionBlastPassToRewards_K2Node_WidgetAnimationEvent_2();
	void AllQuestProgressComplete();
	void BlastPassProgressComplete();
	void WidgetAnimationEvt_PresentBlastPass_K2Node_WidgetAnimationEvent_1();
	void InitQuests();
	void PresentNextQuest(bool* QuestConsumed);
	void HasBlastPassProgress(bool* HasProgress);
	void InitBlastPass();
	void PresentBlastPassMatchProgress();
	void HasQuestProgress(bool* HasProgress);
	void HasRewards(bool* Param_HasRewards);
	void InitRewards(bool FromQuests);
	void PresentNextReward(bool* RewardConsumed);
	void UpdateVisibility(bool ShowBlastPass, bool ShowQuests, bool ShowRewards);
	void InitData();
	void PresentBlastPassQuestProgress(const struct FMangoQuestDescription& Quest);
	void UpdateTitle(const class FText& Title);
	void UpdateSoftCurrency(const struct FMangoQuestDescription& Quest);
	void GetBlastPassProgressPreQuestRewards(int32* LevelStart, int32* LevelEnd, float* ProgressStart, float* ProgressEnd);
	void AddLevelPercent(int32 Level, float Progress, float OffsetPercent, int32* OutLevel, float* OutProgress);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PostGameBlastPassAndQuestProgress_C">();
	}
	static class UPostGameBlastPassAndQuestProgress_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPostGameBlastPassAndQuestProgress_C>();
	}
};
static_assert(alignof(UPostGameBlastPassAndQuestProgress_C) == 0x000008, "Wrong alignment on UPostGameBlastPassAndQuestProgress_C");
static_assert(sizeof(UPostGameBlastPassAndQuestProgress_C) == 0x0005F0, "Wrong size on UPostGameBlastPassAndQuestProgress_C");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, UberGraphFrame) == 0x0004E0, "Member 'UPostGameBlastPassAndQuestProgress_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, TransitionBlastPassToRewards) == 0x0004E8, "Member 'UPostGameBlastPassAndQuestProgress_C::TransitionBlastPassToRewards' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, HideReward) == 0x0004F0, "Member 'UPostGameBlastPassAndQuestProgress_C::HideReward' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, PresentReward) == 0x0004F8, "Member 'UPostGameBlastPassAndQuestProgress_C::PresentReward' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, TransitionQuestsToRewards) == 0x000500, "Member 'UPostGameBlastPassAndQuestProgress_C::TransitionQuestsToRewards' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, PresentBlastPass) == 0x000508, "Member 'UPostGameBlastPassAndQuestProgress_C::PresentBlastPass' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, TransitionBlastPassToQuests) == 0x000510, "Member 'UPostGameBlastPassAndQuestProgress_C::TransitionBlastPassToQuests' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, BlastPassBar) == 0x000518, "Member 'UPostGameBlastPassAndQuestProgress_C::BlastPassBar' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, BlastPassPanel) == 0x000520, "Member 'UPostGameBlastPassAndQuestProgress_C::BlastPassPanel' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, BlastPassUpsell) == 0x000528, "Member 'UPostGameBlastPassAndQuestProgress_C::BlastPassUpsell' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, DailyChallengeGroup) == 0x000530, "Member 'UPostGameBlastPassAndQuestProgress_C::DailyChallengeGroup' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, QuestPanel) == 0x000538, "Member 'UPostGameBlastPassAndQuestProgress_C::QuestPanel' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, RewardButton) == 0x000540, "Member 'UPostGameBlastPassAndQuestProgress_C::RewardButton' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, RewardPanel) == 0x000548, "Member 'UPostGameBlastPassAndQuestProgress_C::RewardPanel' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, TierWidget) == 0x000550, "Member 'UPostGameBlastPassAndQuestProgress_C::TierWidget' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, WeeklyChallengeGroup) == 0x000558, "Member 'UPostGameBlastPassAndQuestProgress_C::WeeklyChallengeGroup' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, QuestsWithProgress) == 0x000560, "Member 'UPostGameBlastPassAndQuestProgress_C::QuestsWithProgress' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, RewardList) == 0x000570, "Member 'UPostGameBlastPassAndQuestProgress_C::RewardList' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, RewardTimer) == 0x000580, "Member 'UPostGameBlastPassAndQuestProgress_C::RewardTimer' has a wrong offset!");
static_assert(offsetof(UPostGameBlastPassAndQuestProgress_C, PlayerBlastPassResult) == 0x000588, "Member 'UPostGameBlastPassAndQuestProgress_C::PlayerBlastPassResult' has a wrong offset!");

}

