#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BaseImpulseHandler

#include "Basic.hpp"

#include "BaseImpulseHandler_classes.hpp"
#include "BaseImpulseHandler_parameters.hpp"


namespace SDK
{

// Function BaseImpulseHandler.BaseImpulseHandler_C.GetMinimumLaunchAngleVector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UBaseImpulseHandler_C::GetMinimumLaunchAngleVector(const struct FVector& Direction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseImpulseHandler_C", "GetMinimumLaunchAngleVector");

	Params::BaseImpulseHandler_C_GetMinimumLaunchAngleVector Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BaseImpulseHandler.BaseImpulseHandler_C.IsDirectionBelowMinimumAngle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBaseImpulseHandler_C::IsDirectionBelowMinimumAngle(const struct FVector& Direction, bool* Return) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseImpulseHandler_C", "IsDirectionBelowMinimumAngle");

	Params::BaseImpulseHandler_C_IsDirectionBelowMinimumAngle Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BaseImpulseHandler.BaseImpulseHandler_C.BP_OverrideDamageImpulseOrigin
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AActor*                           DamagedActor                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          DamageOrigin                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          DamageHitPoint                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsAOEDamage                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AController*                      DamageInstigator                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageSourceActor                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UBaseImpulseHandler_C::BP_OverrideDamageImpulseOrigin(const class AActor* DamagedActor, const struct FVector& DamageOrigin, const struct FVector& DamageHitPoint, const bool bIsAOEDamage, const class AController* DamageInstigator, const class AActor* DamageSourceActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseImpulseHandler_C", "BP_OverrideDamageImpulseOrigin");

	Params::BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageOrigin = std::move(DamageOrigin);
	Parms.DamageHitPoint = std::move(DamageHitPoint);
	Parms.bIsAOEDamage = bIsAOEDamage;
	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageSourceActor = DamageSourceActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BaseImpulseHandler.BaseImpulseHandler_C.BP_CalculateDamageImpulseVector
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AActor*                           DamagedActor                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DamageImpulse                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          DamageOrigin                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          DamageDirection                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsAOEDamage                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AController*                      DamageInstigator                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageSourceActor                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UBaseImpulseHandler_C::BP_CalculateDamageImpulseVector(const class AActor* DamagedActor, const float DamageImpulse, const struct FVector& DamageOrigin, const struct FVector& DamageDirection, const bool bIsAOEDamage, const class AController* DamageInstigator, const class AActor* DamageSourceActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseImpulseHandler_C", "BP_CalculateDamageImpulseVector");

	Params::BaseImpulseHandler_C_BP_CalculateDamageImpulseVector Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageImpulse = DamageImpulse;
	Parms.DamageOrigin = std::move(DamageOrigin);
	Parms.DamageDirection = std::move(DamageDirection);
	Parms.bIsAOEDamage = bIsAOEDamage;
	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageSourceActor = DamageSourceActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BaseImpulseHandler.BaseImpulseHandler_C.GetRocketJumpDirectionAdjusted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OriginalDirection                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NewDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AdjustedPitchRatio                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBaseImpulseHandler_C::GetRocketJumpDirectionAdjusted(class APawn* Pawn, const struct FVector& OriginalDirection, struct FVector* NewDirection, float* AdjustedPitchRatio) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseImpulseHandler_C", "GetRocketJumpDirectionAdjusted");

	Params::BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted Parms{};

	Parms.Pawn = Pawn;
	Parms.OriginalDirection = std::move(OriginalDirection);

	UObject::ProcessEvent(Func, &Parms);

	if (NewDirection != nullptr)
		*NewDirection = std::move(Parms.NewDirection);

	if (AdjustedPitchRatio != nullptr)
		*AdjustedPitchRatio = Parms.AdjustedPitchRatio;
}


// Function BaseImpulseHandler.BaseImpulseHandler_C.GetRocketJumpCurveToUse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBaseImpulseHandler_C::GetRocketJumpCurveToUse(class APawn* Pawn, class UCurveFloat** Curve) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseImpulseHandler_C", "GetRocketJumpCurveToUse");

	Params::BaseImpulseHandler_C_GetRocketJumpCurveToUse Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);

	if (Curve != nullptr)
		*Curve = Parms.Curve;
}

}

