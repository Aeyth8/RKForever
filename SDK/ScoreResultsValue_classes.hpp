#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ScoreResultsValue

#include "Basic.hpp"

#include "Mariner_classes.hpp"
#include "GameModeEnums_structs.hpp"
#include "MangoClient_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ScoreResultsValue.ScoreResultsValue_C
// 0x0088 (0x0338 - 0x02B0)
class UScoreResultsValue_C final : public UMarinerPostGameResultsScore
{
public:
	class UTextBlock*                             EnemyScoreText;                                    // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             FriendScoreText;                                   // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LosingScoreFrameOpponent;                          // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LosingScoreFrameTeam;                              // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        ScoreFrameSwitcher;                                // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        ScoreTextSwitcher;                                 // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WinningKnockoutOpponent;                           // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WinningKnockoutTeam;                               // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WinningMegaRocketOpponent;                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WinningMegaRocketTeam;                             // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WinningRocketballOpponent;                         // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WinningRocketballTeam;                             // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WinningScoreFrameOpponent;                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WinningScoreFrameTeam;                             // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WinningTrophyHuntOpponent;                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WinningTrophyHuntTeam;                             // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         TeamIndex;                                         // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void PopulateFromData(int32 Score, bool IsPlayerTeam, EMarinerGameOutcome TeamOutcome);
	void PopulateFromMatchEnd(const struct FMatchEnd& MatchEnd, int32 TeamIndex_0, bool IsPlayerTeam, EMarinerGameOutcome TeamOutcome);
	void SetModeImage(bool bWin, bool bPlayerTeam);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ScoreResultsValue_C">();
	}
	static class UScoreResultsValue_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreResultsValue_C>();
	}
};
static_assert(alignof(UScoreResultsValue_C) == 0x000008, "Wrong alignment on UScoreResultsValue_C");
static_assert(sizeof(UScoreResultsValue_C) == 0x000338, "Wrong size on UScoreResultsValue_C");
static_assert(offsetof(UScoreResultsValue_C, EnemyScoreText) == 0x0002B0, "Member 'UScoreResultsValue_C::EnemyScoreText' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, FriendScoreText) == 0x0002B8, "Member 'UScoreResultsValue_C::FriendScoreText' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, LosingScoreFrameOpponent) == 0x0002C0, "Member 'UScoreResultsValue_C::LosingScoreFrameOpponent' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, LosingScoreFrameTeam) == 0x0002C8, "Member 'UScoreResultsValue_C::LosingScoreFrameTeam' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, ScoreFrameSwitcher) == 0x0002D0, "Member 'UScoreResultsValue_C::ScoreFrameSwitcher' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, ScoreTextSwitcher) == 0x0002D8, "Member 'UScoreResultsValue_C::ScoreTextSwitcher' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, WinningKnockoutOpponent) == 0x0002E0, "Member 'UScoreResultsValue_C::WinningKnockoutOpponent' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, WinningKnockoutTeam) == 0x0002E8, "Member 'UScoreResultsValue_C::WinningKnockoutTeam' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, WinningMegaRocketOpponent) == 0x0002F0, "Member 'UScoreResultsValue_C::WinningMegaRocketOpponent' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, WinningMegaRocketTeam) == 0x0002F8, "Member 'UScoreResultsValue_C::WinningMegaRocketTeam' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, WinningRocketballOpponent) == 0x000300, "Member 'UScoreResultsValue_C::WinningRocketballOpponent' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, WinningRocketballTeam) == 0x000308, "Member 'UScoreResultsValue_C::WinningRocketballTeam' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, WinningScoreFrameOpponent) == 0x000310, "Member 'UScoreResultsValue_C::WinningScoreFrameOpponent' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, WinningScoreFrameTeam) == 0x000318, "Member 'UScoreResultsValue_C::WinningScoreFrameTeam' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, WinningTrophyHuntOpponent) == 0x000320, "Member 'UScoreResultsValue_C::WinningTrophyHuntOpponent' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, WinningTrophyHuntTeam) == 0x000328, "Member 'UScoreResultsValue_C::WinningTrophyHuntTeam' has a wrong offset!");
static_assert(offsetof(UScoreResultsValue_C, TeamIndex) == 0x000330, "Member 'UScoreResultsValue_C::TeamIndex' has a wrong offset!");

}

