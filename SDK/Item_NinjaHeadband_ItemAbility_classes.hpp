#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Item_NinjaHeadband_ItemAbility

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ItemAbility_Base_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Item_NinjaHeadband_ItemAbility.Item_NinjaHeadband_ItemAbility_C
// 0x0098 (0x0788 - 0x06F0)
class UItem_NinjaHeadband_ItemAbility_C final : public UItemAbility_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Item_NinjaHeadband_ItemAbility_C;   // 0x06F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         DodgeStrength;                                     // 0x06F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DodgeMinLaunchAngle;                               // 0x06FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DodgeCooldown;                                     // 0x0700(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DodgeDuration;                                     // 0x0704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlowDownStrength;                                  // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlowDownDelay;                                     // 0x070C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<TSoftClassPtr<class UClass>, struct FTransform> CharacterTransformMap;                             // 0x0710(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class AItem_NinjaHeadband_AttachmentActor_C*  NinjaHeadbandActor;                                // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 NinjaHeadbandActorType;                            // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 NinjaHeadbandEffect;                               // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NinjaHeadbandDuration;                             // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastTimeActivated;                                 // 0x077C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPendingNextNinjaEffectWaiting;                    // 0x0780(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Item_NinjaHeadband_ItemAbility(int32 EntryPoint);
	void OnCharacterDisabledDelegate_Event_0(class AMarinerCharacter* Character);
	void OnMoveAffectingGameplayEffectAppliedDelegate_Event_0(class UClass* GameplayEffect, class AMarinerCharacter* Character, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel);
	void BP_OnAbilityActivated(const struct FGameplayAbilityActorInfo& ActorInfo);
	void BP_OnAbilityActivated_Authority(const struct FGameplayAbilityActorInfo& ActorInfo);
	void OnMoveAffectingGameplayEffectRemovedDelegate_Event_0(class UClass* GameplayEffect, class AMarinerCharacter* Character, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel);
	void OnKnockedOutAuthorityDelegate_Event_0();
	void BP_OnOwningControllerSet();
	void GetHeadbandTransformPerCharacter(struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale);
	void InitializeHeadbandActor();
	void ApplyNinjaHeadbandEffect_MoveAffecting();
	void RemoveNinjaHeadbandEffect();
	void HideNinjaHeadband();
	void UnhideNinjaHeadband();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Item_NinjaHeadband_ItemAbility_C">();
	}
	static class UItem_NinjaHeadband_ItemAbility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItem_NinjaHeadband_ItemAbility_C>();
	}
};
static_assert(alignof(UItem_NinjaHeadband_ItemAbility_C) == 0x000008, "Wrong alignment on UItem_NinjaHeadband_ItemAbility_C");
static_assert(sizeof(UItem_NinjaHeadband_ItemAbility_C) == 0x000788, "Wrong size on UItem_NinjaHeadband_ItemAbility_C");
static_assert(offsetof(UItem_NinjaHeadband_ItemAbility_C, UberGraphFrame_Item_NinjaHeadband_ItemAbility_C) == 0x0006F0, "Member 'UItem_NinjaHeadband_ItemAbility_C::UberGraphFrame_Item_NinjaHeadband_ItemAbility_C' has a wrong offset!");
static_assert(offsetof(UItem_NinjaHeadband_ItemAbility_C, DodgeStrength) == 0x0006F8, "Member 'UItem_NinjaHeadband_ItemAbility_C::DodgeStrength' has a wrong offset!");
static_assert(offsetof(UItem_NinjaHeadband_ItemAbility_C, DodgeMinLaunchAngle) == 0x0006FC, "Member 'UItem_NinjaHeadband_ItemAbility_C::DodgeMinLaunchAngle' has a wrong offset!");
static_assert(offsetof(UItem_NinjaHeadband_ItemAbility_C, DodgeCooldown) == 0x000700, "Member 'UItem_NinjaHeadband_ItemAbility_C::DodgeCooldown' has a wrong offset!");
static_assert(offsetof(UItem_NinjaHeadband_ItemAbility_C, DodgeDuration) == 0x000704, "Member 'UItem_NinjaHeadband_ItemAbility_C::DodgeDuration' has a wrong offset!");
static_assert(offsetof(UItem_NinjaHeadband_ItemAbility_C, SlowDownStrength) == 0x000708, "Member 'UItem_NinjaHeadband_ItemAbility_C::SlowDownStrength' has a wrong offset!");
static_assert(offsetof(UItem_NinjaHeadband_ItemAbility_C, SlowDownDelay) == 0x00070C, "Member 'UItem_NinjaHeadband_ItemAbility_C::SlowDownDelay' has a wrong offset!");
static_assert(offsetof(UItem_NinjaHeadband_ItemAbility_C, CharacterTransformMap) == 0x000710, "Member 'UItem_NinjaHeadband_ItemAbility_C::CharacterTransformMap' has a wrong offset!");
static_assert(offsetof(UItem_NinjaHeadband_ItemAbility_C, NinjaHeadbandActor) == 0x000760, "Member 'UItem_NinjaHeadband_ItemAbility_C::NinjaHeadbandActor' has a wrong offset!");
static_assert(offsetof(UItem_NinjaHeadband_ItemAbility_C, NinjaHeadbandActorType) == 0x000768, "Member 'UItem_NinjaHeadband_ItemAbility_C::NinjaHeadbandActorType' has a wrong offset!");
static_assert(offsetof(UItem_NinjaHeadband_ItemAbility_C, NinjaHeadbandEffect) == 0x000770, "Member 'UItem_NinjaHeadband_ItemAbility_C::NinjaHeadbandEffect' has a wrong offset!");
static_assert(offsetof(UItem_NinjaHeadband_ItemAbility_C, NinjaHeadbandDuration) == 0x000778, "Member 'UItem_NinjaHeadband_ItemAbility_C::NinjaHeadbandDuration' has a wrong offset!");
static_assert(offsetof(UItem_NinjaHeadband_ItemAbility_C, LastTimeActivated) == 0x00077C, "Member 'UItem_NinjaHeadband_ItemAbility_C::LastTimeActivated' has a wrong offset!");
static_assert(offsetof(UItem_NinjaHeadband_ItemAbility_C, bPendingNextNinjaEffectWaiting) == 0x000780, "Member 'UItem_NinjaHeadband_ItemAbility_C::bPendingNextNinjaEffectWaiting' has a wrong offset!");

}

