#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeProgress

#include "Basic.hpp"

#include "MangoClient_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ChallengeProgress.ChallengeProgress_C
// 0x02E8 (0x0518 - 0x0230)
class UChallengeProgress_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ActiveProgressLoop;                                // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           CompletedRoot;                                     // 0x0240(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Leftline;                                          // 0x0248(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTimerWidget_C*                         NewTimer;                                          // 0x0250(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar;                                       // 0x0258(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           ProgressRoot;                                      // 0x0260(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ProgressText;                                      // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         ResetPanel;                                        // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ResetPrefix;                                       // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTimerWidget_C*                         ResetTimer;                                        // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             RewardText;                                        // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Rightline;                                         // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        RootSwitcher;                                      // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           TimerRoot;                                         // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          Highlighted;                                       // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_215B[0x7];                                     // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoQuestDescription                 QuestDesc;                                         // 0x02B0(0x0118)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMangoQuestDescription                 GoalDesc;                                          // 0x03C8(0x0118)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           AnimTimerHandle;                                   // 0x04E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         AnimationDuration;                                 // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_215C[0x4];                                     // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             AnimationCompleteEvent;                            // 0x04F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         FinalDelayDuration;                                // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AnimationActive;                                   // 0x0504(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_215D[0x3];                                     // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             ChallengeCompleteEvent;                            // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AnimationCompleteEvent__DelegateSignature(const struct FMangoQuestDescription& Quest);
	void ChallengeCompleteEvent__DelegateSignature(const struct FMangoQuestDescription& Quest);
	void ExecuteUbergraph_ChallengeProgress(int32 EntryPoint);
	void Destruct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetProgress(int32 CurrentProgress, int32 MaxProgress);
	void Init(struct FMangoQuestDescription& Param_QuestDesc, bool AllowInput);
	void OnHighlight();
	void OnUnhighlight();
	void UpdateResetPanelVisibility();
	void AnimateToGoal(const struct FMangoQuestDescription& QuestGoal, const TDelegate<void(const struct FMangoQuestDescription& Quest)>& AnimationCompleteEvent1, const TDelegate<void(const struct FMangoQuestDescription& Quest)>& AnimationCompleteEvent2, const TDelegate<void(const struct FMangoQuestDescription& Quest)>& Param_ChallengeCompleteEvent);
	void AnimationComplete();
	void SetProgressFromAnimation(float CurrentProgress, float MaxProgress);
	void FinalDelayComplete();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ChallengeProgress_C">();
	}
	static class UChallengeProgress_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeProgress_C>();
	}
};
static_assert(alignof(UChallengeProgress_C) == 0x000008, "Wrong alignment on UChallengeProgress_C");
static_assert(sizeof(UChallengeProgress_C) == 0x000518, "Wrong size on UChallengeProgress_C");
static_assert(offsetof(UChallengeProgress_C, UberGraphFrame) == 0x000230, "Member 'UChallengeProgress_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, ActiveProgressLoop) == 0x000238, "Member 'UChallengeProgress_C::ActiveProgressLoop' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, CompletedRoot) == 0x000240, "Member 'UChallengeProgress_C::CompletedRoot' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, Leftline) == 0x000248, "Member 'UChallengeProgress_C::Leftline' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, NewTimer) == 0x000250, "Member 'UChallengeProgress_C::NewTimer' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, ProgressBar) == 0x000258, "Member 'UChallengeProgress_C::ProgressBar' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, ProgressRoot) == 0x000260, "Member 'UChallengeProgress_C::ProgressRoot' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, ProgressText) == 0x000268, "Member 'UChallengeProgress_C::ProgressText' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, ResetPanel) == 0x000270, "Member 'UChallengeProgress_C::ResetPanel' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, ResetPrefix) == 0x000278, "Member 'UChallengeProgress_C::ResetPrefix' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, ResetTimer) == 0x000280, "Member 'UChallengeProgress_C::ResetTimer' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, RewardText) == 0x000288, "Member 'UChallengeProgress_C::RewardText' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, Rightline) == 0x000290, "Member 'UChallengeProgress_C::Rightline' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, RootSwitcher) == 0x000298, "Member 'UChallengeProgress_C::RootSwitcher' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, TimerRoot) == 0x0002A0, "Member 'UChallengeProgress_C::TimerRoot' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, Highlighted) == 0x0002A8, "Member 'UChallengeProgress_C::Highlighted' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, QuestDesc) == 0x0002B0, "Member 'UChallengeProgress_C::QuestDesc' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, GoalDesc) == 0x0003C8, "Member 'UChallengeProgress_C::GoalDesc' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, AnimTimerHandle) == 0x0004E0, "Member 'UChallengeProgress_C::AnimTimerHandle' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, AnimationDuration) == 0x0004E8, "Member 'UChallengeProgress_C::AnimationDuration' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, AnimationCompleteEvent) == 0x0004F0, "Member 'UChallengeProgress_C::AnimationCompleteEvent' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, FinalDelayDuration) == 0x000500, "Member 'UChallengeProgress_C::FinalDelayDuration' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, AnimationActive) == 0x000504, "Member 'UChallengeProgress_C::AnimationActive' has a wrong offset!");
static_assert(offsetof(UChallengeProgress_C, ChallengeCompleteEvent) == 0x000508, "Member 'UChallengeProgress_C::ChallengeCompleteEvent' has a wrong offset!");

}

