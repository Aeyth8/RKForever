#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterFunctionLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "ECardinalDirection_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CharacterFunctionLibrary.CharacterFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UCharacterFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void SetAimPitchYaw(class AMarinerCharacter* MarinerCharacter, float& AimPitch, float& AimYaw, class UObject* __WorldContext);
	static void SetFalling(class APawn* MarinerCharacter, bool& IsFalling, class UObject* __WorldContext);
	static void Calculate2DRelativeSpeed(class APawn* Pawn, float& RelativeXSpeed, float& RelativeYSpeed, class USceneComponent* SceneComponent, class UObject* __WorldContext);
	static void GetCardinalDirection(const struct FRotator& FacingDirection, const struct FVector& Velocity, class UObject* __WorldContext, ECardinalDirection* Cardinal, float* Direction, float* NorthRotation, float* SouthRotation, float* EastRotation, float* WestRotation);
	static void GetWeaponSocketLocation(class AMarinerCharacter*& MarinerCharacter, class USkeletalMeshComponent*& SkeletalMesh, struct FVector& Location, class FName Socket, class UObject* __WorldContext);
	static void CalculateRootOffset(float MaxRootOffset, struct FVector& RootOffsetRef, float& Right_Foot_Alpha_Ref, float& Left_Foot_Alpha_Ref, float Root_Interp_Speed, float Delta, float Left_Foot_Offset, float Right_Foot_Offset, class UObject* __WorldContext);
	static void MarinerBaseAnimation(class AMarinerCharacter*& MarinerCharacter, bool& IsMoving, bool& IsReturningToArena, bool& IsStunned, bool& IsFalling, float& RelativeXSpeed, float& RelativeYSpeed, class USceneComponent* SkeletalMesh, float& AimPitch, float& AimYaw, struct FVector& Velocity, struct FRotator& SkeletalRotation, float& DeltaTimeX, ECardinalDirection& CardinalDirection, float& Direction, bool EnableTurnInPlace, float& North, float& South, float& East, float& West, float& Speed, float& YawOffset, class UObject* __WorldContext);
	static void AnimCheckGameModeForMainMenu(class UObject* __WorldContext, bool* IsMainMenu);
	static void GetAngleFromVectors(struct FVector& A, struct FVector& B, class UObject* __WorldContext, float* Angle);
	static void CalculateAirLean(float RelativeX, float RelativeY, struct FRotator& Lean, float& AimPitch, bool& IsFalling, class UObject* __WorldContext);
	static void MarinerFirstPersonBaseAnimation(class AMarinerCharacter*& MarinerCharacter, bool& IsMoving, bool& IsFalling, bool& IsStunned, float& RelativeXSpeed, float& RelativeYSpeed, struct FVector& Velocity, float& Speed, class UObject* __WorldContext);
	static void MarinerAnim_MovementState(class AMarinerCharacter*& MarinerCharacter, struct FVector& Velocity, float& Speed, bool& IsMoving, bool& IsFalling, class UObject* __WorldContext);
	static void Deprecated_MaskAnimDynamicsBySpeed(class UCurveFloat*& ResponseCurve, class AMarinerCharacter*& MarinerCharacter, float& Alpha, class UObject* __WorldContext);
	static void CalculateArenaReturnRotation(class USkeletalMeshComponent*& OwningComponent, struct FVector& Velocity, struct FRotator& Rotation, float& ReturningAlpha, float DeltaTimeX, float MaxRotation, float AlphaSpeed, float RotationSpeed, class UObject* __WorldContext);
	static void FirstPersonTurningAnim(class APawn*& Pawn, struct FRotator& PreviousRotation, struct FRotator& SwizzledRotation, class UObject* __WorldContext);
	static void SwizzledRotationInterpolation(struct FRotator& Rotator, const struct FRotator& SwizzledRotation, float DeltaTimeX, float Speed, float X, float Y, float Z, const struct FVector2D& ClampX, const struct FVector2D& ClampY, const struct FVector2D& ClampZ, class UObject* __WorldContext);
	static void MarinerAnimationOnDamage(float IncomingDamage, float& DamageStack, float& DamageScale, class UCurveFloat*& DamageCurve, float& DamageAlpha, class UObject* __WorldContext);
	static void MarinerAnimationDamageUpdate(float& DamageStack, float DeltaTimeX, class UObject* __WorldContext);
	static void MaskLocomotionByVelocity(float VelocityLength, float& North, float& South, float& East, float& West, class UObject* __WorldContext);
	static void AdjustLocomotionSpeedByVelocity(float& LocomotionSpeed, float VelocityLength, float ReferenceSpeed, float Min, float Max, float CharacterScale, class UObject* __WorldContext);
	static void Temporary_FixCardinalAndAim(uint8& Direction, float& AimYaw, bool IsFalling, class UObject* __WorldContext);
	static void AnimVelocityAndAcceleration(class UCharacterMovementComponent*& MovementComponent, const struct FTransform& WorldTransform, const struct FVector& Velocity, struct FVector& Acceleration, struct FVector& AccelerationNormal, struct FVector& AccelerationNormalRelative, struct FVector& VelocityNormal, float& VelocityLength, class UObject* __WorldContext);
	static void CalcLaunchRotation(struct FRotator& LaunchRotation, float DeltaTime, class AActor* Target, const struct FVector& Direction, class UObject* __WorldContext);
	static void CalcFirstPresonFallingRotation(struct FRotator& FallingRotator, const struct FVector& Velocity, class AMarinerCharacter*& Character, float DeltaTime, float Speed, class UObject* __WorldContext);
	static void GetDefaultSkinForCharacter(TSoftClassPtr<class UClass> Character, class UObject* __WorldContext, class UMarinerSkinCollectionDataAsset** SkinCollection);
	static void GetCharacterNameForPlayerState(class AMarinerPlayerState* MarinerPlayerState, class UObject* __WorldContext, class FText* CharacterName);
	static void GetSelectedCharacterNameForPlayerState(class AMarinerPlayerState* MarinerPlayerState, class UObject* __WorldContext, class FText* CharacterName);
	static void CalcTurnInPlace(bool& IsMoving, class UObject* __WorldContext);
	static void GetAnimStanceTuning(float& DefaultStance, float& StaggerStance, float& TumbleStance, float& SmashedStance, float& LaunchedStance, class UObject* __WorldContext);

	static void GetFastestExpectedProjectileSpeed(class UObject* __WorldContext, float* Speed);
	static void GetWidestExpectedProjectileSphereRadius(class UObject* __WorldContext, float* Radius);
	static void GetFurthestExpectedProjectileDistance(float Time, class UObject* __WorldContext, float* Distance);
	static void GetFurthestExpectedProjectileDistance_ServerFrame(class UObject* __WorldContext, float* Distance);
	static void GetProjectileFurthest1ServerFrameDistPlusMaxRadius(class UObject* __WorldContext, float* Distance);
	static void GetSimplePredictedPawnLocationInTime(class APawn* PawnToPredict, float TimeToPredictAhead, class UObject* __WorldContext, struct FVector* PredictedLocation);
	static void GetSimplePredictedProjectileLocationInTime(class AMarinerProjectile* ProjectileToPredict, float TimeToPredictAhead, class UObject* __WorldContext, struct FVector* PredictedLocation);
	static void IsHitStunned(class AMarinerCharacter* Character, class UObject* __WorldContext, bool* HitStunned);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CharacterFunctionLibrary_C">();
	}
	static class UCharacterFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterFunctionLibrary_C>();
	}
};
static_assert(alignof(UCharacterFunctionLibrary_C) == 0x000008, "Wrong alignment on UCharacterFunctionLibrary_C");
static_assert(sizeof(UCharacterFunctionLibrary_C) == 0x000028, "Wrong size on UCharacterFunctionLibrary_C");

}

