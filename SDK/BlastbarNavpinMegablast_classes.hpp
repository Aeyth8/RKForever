#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlastbarNavpinMegablast

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mariner_structs.hpp"
#include "Mariner_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BlastbarNavpinMegablast.BlastbarNavpinMegablast_C
// 0x00A8 (0x0498 - 0x03F0)
class UBlastbarNavpinMegablast_C final : public UMarinerBasePinWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       SmallExplosionAnim;                                // 0x03F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       BigExplosionAnim;                                  // 0x0400(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 ExplosionEffect;                                   // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Shrapnel0;                                         // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Shrapnel1;                                         // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Shrapnel2;                                         // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Shrapnel3;                                         // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Shrapnel4;                                         // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Shrapnel5;                                         // 0x0438(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     FriendlyMat;                                       // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     EnemyMat;                                          // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OldIsEnemeny;                                      // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEnemy;                                           // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259E[0x6];                                     // 0x0452(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTexture2D*>                     ShrapnelMeterTextures;                             // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UTexture2D*>                     ShrapnelMaskTextures;                              // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UImage*>                         ShrapnelSprites;                                   // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference)
	class UMaterialInterface*                     EnemyShrapnelMat;                                  // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     FriendlyShrapnelMat;                               // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BlastbarNavpinMegablast(int32 EntryPoint);
	void Animation_Finished();
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void Explode(const struct FVector2D& Position, bool bMegablastInstigator);
	void Show();
	void Set_Position(const struct FVector2D& Position);
	void SetupMats(bool Force);
	void PopulateTeam(class AMarinerCharacter* Character);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BlastbarNavpinMegablast_C">();
	}
	static class UBlastbarNavpinMegablast_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlastbarNavpinMegablast_C>();
	}
};
static_assert(alignof(UBlastbarNavpinMegablast_C) == 0x000008, "Wrong alignment on UBlastbarNavpinMegablast_C");
static_assert(sizeof(UBlastbarNavpinMegablast_C) == 0x000498, "Wrong size on UBlastbarNavpinMegablast_C");
static_assert(offsetof(UBlastbarNavpinMegablast_C, UberGraphFrame) == 0x0003F0, "Member 'UBlastbarNavpinMegablast_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, SmallExplosionAnim) == 0x0003F8, "Member 'UBlastbarNavpinMegablast_C::SmallExplosionAnim' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, BigExplosionAnim) == 0x000400, "Member 'UBlastbarNavpinMegablast_C::BigExplosionAnim' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, ExplosionEffect) == 0x000408, "Member 'UBlastbarNavpinMegablast_C::ExplosionEffect' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, Shrapnel0) == 0x000410, "Member 'UBlastbarNavpinMegablast_C::Shrapnel0' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, Shrapnel1) == 0x000418, "Member 'UBlastbarNavpinMegablast_C::Shrapnel1' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, Shrapnel2) == 0x000420, "Member 'UBlastbarNavpinMegablast_C::Shrapnel2' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, Shrapnel3) == 0x000428, "Member 'UBlastbarNavpinMegablast_C::Shrapnel3' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, Shrapnel4) == 0x000430, "Member 'UBlastbarNavpinMegablast_C::Shrapnel4' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, Shrapnel5) == 0x000438, "Member 'UBlastbarNavpinMegablast_C::Shrapnel5' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, FriendlyMat) == 0x000440, "Member 'UBlastbarNavpinMegablast_C::FriendlyMat' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, EnemyMat) == 0x000448, "Member 'UBlastbarNavpinMegablast_C::EnemyMat' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, OldIsEnemeny) == 0x000450, "Member 'UBlastbarNavpinMegablast_C::OldIsEnemeny' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, IsEnemy) == 0x000451, "Member 'UBlastbarNavpinMegablast_C::IsEnemy' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, ShrapnelMeterTextures) == 0x000458, "Member 'UBlastbarNavpinMegablast_C::ShrapnelMeterTextures' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, ShrapnelMaskTextures) == 0x000468, "Member 'UBlastbarNavpinMegablast_C::ShrapnelMaskTextures' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, ShrapnelSprites) == 0x000478, "Member 'UBlastbarNavpinMegablast_C::ShrapnelSprites' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, EnemyShrapnelMat) == 0x000488, "Member 'UBlastbarNavpinMegablast_C::EnemyShrapnelMat' has a wrong offset!");
static_assert(offsetof(UBlastbarNavpinMegablast_C, FriendlyShrapnelMat) == 0x000490, "Member 'UBlastbarNavpinMegablast_C::FriendlyShrapnelMat' has a wrong offset!");

}

