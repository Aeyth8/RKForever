#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MapDataSmall

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass MapDataSmall.MapDataSmall_C
// 0x0028 (0x0258 - 0x0230)
class UMapDataSmall_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextBlock*                             ArenaName;                                         // 0x0238(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             GameModeName;                                      // 0x0240(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_0;                                           // 0x0248(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LabelBreak;                                        // 0x0250(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_MapDataSmall(int32 EntryPoint);
	void Construct();
	class FText GetGameModeText();
	class FText GetArenaNameText();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MapDataSmall_C">();
	}
	static class UMapDataSmall_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMapDataSmall_C>();
	}
};
static_assert(alignof(UMapDataSmall_C) == 0x000008, "Wrong alignment on UMapDataSmall_C");
static_assert(sizeof(UMapDataSmall_C) == 0x000258, "Wrong size on UMapDataSmall_C");
static_assert(offsetof(UMapDataSmall_C, UberGraphFrame) == 0x000230, "Member 'UMapDataSmall_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMapDataSmall_C, ArenaName) == 0x000238, "Member 'UMapDataSmall_C::ArenaName' has a wrong offset!");
static_assert(offsetof(UMapDataSmall_C, GameModeName) == 0x000240, "Member 'UMapDataSmall_C::GameModeName' has a wrong offset!");
static_assert(offsetof(UMapDataSmall_C, Image_0) == 0x000248, "Member 'UMapDataSmall_C::Image_0' has a wrong offset!");
static_assert(offsetof(UMapDataSmall_C, LabelBreak) == 0x000250, "Member 'UMapDataSmall_C::LabelBreak' has a wrong offset!");

}

