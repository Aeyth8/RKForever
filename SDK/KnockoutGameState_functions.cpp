#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KnockoutGameState

#include "Basic.hpp"

#include "KnockoutGameState_classes.hpp"
#include "KnockoutGameState_parameters.hpp"


namespace SDK
{

// Function KnockoutGameState.KnockoutGameState_C.OnStockRemovalAnimation__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      KilledPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StockCountBeforeKnockout                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::OnStockRemovalAnimation__DelegateSignature(class AController* KilledPlayer, int32 StockCountBeforeKnockout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "OnStockRemovalAnimation__DelegateSignature");

	Params::KnockoutGameState_C_OnStockRemovalAnimation__DelegateSignature Parms{};

	Parms.KilledPlayer = KilledPlayer;
	Parms.StockCountBeforeKnockout = StockCountBeforeKnockout;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnockoutGameState.KnockoutGameState_C.Overtime__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::Overtime__DelegateSignature(float NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "Overtime__DelegateSignature");

	Params::KnockoutGameState_C_Overtime__DelegateSignature Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnockoutGameState.KnockoutGameState_C.OvertimeUIChanges__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AKnockoutGameState_C::OvertimeUIChanges__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "OvertimeUIChanges__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KnockoutGameState.KnockoutGameState_C.OnePlayerWithStockOnTeam__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OnePlayerWithStockTeamIndex                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::OnePlayerWithStockOnTeam__DelegateSignature(int32 OnePlayerWithStockTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "OnePlayerWithStockOnTeam__DelegateSignature");

	Params::KnockoutGameState_C_OnePlayerWithStockOnTeam__DelegateSignature Parms{};

	Parms.OnePlayerWithStockTeamIndex = OnePlayerWithStockTeamIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnockoutGameState.KnockoutGameState_C.SetPlayerPinNavpoint__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AKnockoutGameState_C::SetPlayerPinNavpoint__DelegateSignature(class APlayerState* PlayerState, bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "SetPlayerPinNavpoint__DelegateSignature");

	Params::KnockoutGameState_C_SetPlayerPinNavpoint__DelegateSignature Parms{};

	Parms.PlayerState = PlayerState;
	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnockoutGameState.KnockoutGameState_C.ExecuteUbergraph_KnockoutGameState
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::ExecuteUbergraph_KnockoutGameState(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "ExecuteUbergraph_KnockoutGameState");

	Params::KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnockoutGameState.KnockoutGameState_C.MulticastSetPlayerPinNavpoint
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AKnockoutGameState_C::MulticastSetPlayerPinNavpoint(class APlayerState* PlayerState, bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "MulticastSetPlayerPinNavpoint");

	Params::KnockoutGameState_C_MulticastSetPlayerPinNavpoint Parms{};

	Parms.PlayerState = PlayerState;
	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnockoutGameState.KnockoutGameState_C.OnPlayerWithStockLeft
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OnePlayerWithStockTeamIndex                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::OnPlayerWithStockLeft(int32 OnePlayerWithStockTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "OnPlayerWithStockLeft");

	Params::KnockoutGameState_C_OnPlayerWithStockLeft Parms{};

	Parms.OnePlayerWithStockTeamIndex = OnePlayerWithStockTeamIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnockoutGameState.KnockoutGameState_C.MulticastOnePlayerOnTeamWithStock
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OnePlayerWithStockTeamIndex                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMarinerKnockoutPlayerState_C*    LastPlayerWithStock                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::MulticastOnePlayerOnTeamWithStock(int32 OnePlayerWithStockTeamIndex, class AMarinerKnockoutPlayerState_C* LastPlayerWithStock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "MulticastOnePlayerOnTeamWithStock");

	Params::KnockoutGameState_C_MulticastOnePlayerOnTeamWithStock Parms{};

	Parms.OnePlayerWithStockTeamIndex = OnePlayerWithStockTeamIndex;
	Parms.LastPlayerWithStock = LastPlayerWithStock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnockoutGameState.KnockoutGameState_C.OvertimeUILogic
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AKnockoutGameState_C::OvertimeUILogic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "OvertimeUILogic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KnockoutGameState.KnockoutGameState_C.Event Overtime
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Seconds_to_Reset                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::Event_Overtime(float Seconds_to_Reset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "Event Overtime");

	Params::KnockoutGameState_C_Event_Overtime Parms{};

	Parms.Seconds_to_Reset = Seconds_to_Reset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnockoutGameState.KnockoutGameState_C.MulticastStockRemovalAnimation
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      KillerPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StockCountBeforeKnockout                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::MulticastStockRemovalAnimation(class AController* KillerPlayer, int32 StockCountBeforeKnockout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "MulticastStockRemovalAnimation");

	Params::KnockoutGameState_C_MulticastStockRemovalAnimation Parms{};

	Parms.KillerPlayer = KillerPlayer;
	Parms.StockCountBeforeKnockout = StockCountBeforeKnockout;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnockoutGameState.KnockoutGameState_C.AuthorityStockRemovalAnimation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      KilledPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StockCountBeforeKnockout                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::AuthorityStockRemovalAnimation(class AController* KilledPlayer, int32 StockCountBeforeKnockout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "AuthorityStockRemovalAnimation");

	Params::KnockoutGameState_C_AuthorityStockRemovalAnimation Parms{};

	Parms.KilledPlayer = KilledPlayer;
	Parms.StockCountBeforeKnockout = StockCountBeforeKnockout;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnockoutGameState.KnockoutGameState_C.GetPlayersOnTeamWithStock
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayersWithStock                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::GetPlayersOnTeamWithStock(int32 Team, int32* PlayersWithStock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "GetPlayersOnTeamWithStock");

	Params::KnockoutGameState_C_GetPlayersOnTeamWithStock Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (PlayersWithStock != nullptr)
		*PlayersWithStock = Parms.PlayersWithStock;
}


// Function KnockoutGameState.KnockoutGameState_C.DecrementTeamStocksLeftByPlayerState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              PlayerWhoLostStock                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StocksLeftAfterDecrementing                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::DecrementTeamStocksLeftByPlayerState(class AMarinerPlayerState* PlayerWhoLostStock, int32* StocksLeftAfterDecrementing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "DecrementTeamStocksLeftByPlayerState");

	Params::KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState Parms{};

	Parms.PlayerWhoLostStock = PlayerWhoLostStock;

	UObject::ProcessEvent(Func, &Parms);

	if (StocksLeftAfterDecrementing != nullptr)
		*StocksLeftAfterDecrementing = Parms.StocksLeftAfterDecrementing;
}


// Function KnockoutGameState.KnockoutGameState_C.IncrementTeamTotalStocksLeft
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Stocks                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::IncrementTeamTotalStocksLeft(int32 Stocks, int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "IncrementTeamTotalStocksLeft");

	Params::KnockoutGameState_C_IncrementTeamTotalStocksLeft Parms{};

	Parms.Stocks = Stocks;
	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnockoutGameState.KnockoutGameState_C.DecrementTeamStocksLeftByTeamIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TeamIndexOfPlayerWhoLostStock                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StocksLeftAfterDecrementing                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::DecrementTeamStocksLeftByTeamIndex(int32 TeamIndexOfPlayerWhoLostStock, int32* StocksLeftAfterDecrementing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "DecrementTeamStocksLeftByTeamIndex");

	Params::KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex Parms{};

	Parms.TeamIndexOfPlayerWhoLostStock = TeamIndexOfPlayerWhoLostStock;

	UObject::ProcessEvent(Func, &Parms);

	if (StocksLeftAfterDecrementing != nullptr)
		*StocksLeftAfterDecrementing = Parms.StocksLeftAfterDecrementing;
}


// Function KnockoutGameState.KnockoutGameState_C.SetShouldUsePoolOfLives
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldUsePoolOfLives                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::SetShouldUsePoolOfLives(bool ShouldUsePoolOfLives, int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "SetShouldUsePoolOfLives");

	Params::KnockoutGameState_C_SetShouldUsePoolOfLives Parms{};

	Parms.ShouldUsePoolOfLives = ShouldUsePoolOfLives;
	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnockoutGameState.KnockoutGameState_C.IncrementPlayersWithStock
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   UpdatedPlayersWithStockOnTeam                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::IncrementPlayersWithStock(int32 TeamIndex, int32* UpdatedPlayersWithStockOnTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "IncrementPlayersWithStock");

	Params::KnockoutGameState_C_IncrementPlayersWithStock Parms{};

	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (UpdatedPlayersWithStockOnTeam != nullptr)
		*UpdatedPlayersWithStockOnTeam = Parms.UpdatedPlayersWithStockOnTeam;
}


// Function KnockoutGameState.KnockoutGameState_C.DecrementPlayersWithStock
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   UpdatedPlayersWithStockOnTeam                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::DecrementPlayersWithStock(int32 TeamIndex, int32* UpdatedPlayersWithStockOnTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "DecrementPlayersWithStock");

	Params::KnockoutGameState_C_DecrementPlayersWithStock Parms{};

	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (UpdatedPlayersWithStockOnTeam != nullptr)
		*UpdatedPlayersWithStockOnTeam = Parms.UpdatedPlayersWithStockOnTeam;
}


// Function KnockoutGameState.KnockoutGameState_C.GetIsUsingPoolOfLives
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TeamIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUsingPoolOfLives                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AKnockoutGameState_C::GetIsUsingPoolOfLives(int32 TeamIndex, bool* IsUsingPoolOfLives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "GetIsUsingPoolOfLives");

	Params::KnockoutGameState_C_GetIsUsingPoolOfLives Parms{};

	Parms.TeamIndex = TeamIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (IsUsingPoolOfLives != nullptr)
		*IsUsingPoolOfLives = Parms.IsUsingPoolOfLives;
}


// Function KnockoutGameState.KnockoutGameState_C.OnPlayerWithStockLeftImplementation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OnePlayerWithStockTeamIndex                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AKnockoutGameState_C::OnPlayerWithStockLeftImplementation(int32 OnePlayerWithStockTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "OnPlayerWithStockLeftImplementation");

	Params::KnockoutGameState_C_OnPlayerWithStockLeftImplementation Parms{};

	Parms.OnePlayerWithStockTeamIndex = OnePlayerWithStockTeamIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function KnockoutGameState.KnockoutGameState_C.OnRep_CurrentCaptureState
// (BlueprintCallable, BlueprintEvent)

void AKnockoutGameState_C::OnRep_CurrentCaptureState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "OnRep_CurrentCaptureState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KnockoutGameState.KnockoutGameState_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AKnockoutGameState_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function KnockoutGameState.KnockoutGameState_C.GetHealthToRecoverOnKnockout
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AMarinerPlayerState*              PlayerStateOfReturningCharacter                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float AKnockoutGameState_C::GetHealthToRecoverOnKnockout(class AMarinerPlayerState* PlayerStateOfReturningCharacter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KnockoutGameState_C", "GetHealthToRecoverOnKnockout");

	Params::KnockoutGameState_C_GetHealthToRecoverOnKnockout Parms{};

	Parms.PlayerStateOfReturningCharacter = PlayerStateOfReturningCharacter;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

