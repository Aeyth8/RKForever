#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NewsDefaultStackBase

#include "Basic.hpp"

#include "NewsDefaultStackBase_classes.hpp"
#include "NewsDefaultStackBase_parameters.hpp"


namespace SDK
{

// Function NewsDefaultStackBase.NewsDefaultStackBase_C.ExecuteUbergraph_NewsDefaultStackBase
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UNewsDefaultStackBase_C::ExecuteUbergraph_NewsDefaultStackBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NewsDefaultStackBase_C", "ExecuteUbergraph_NewsDefaultStackBase");

	Params::NewsDefaultStackBase_C_ExecuteUbergraph_NewsDefaultStackBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NewsDefaultStackBase.NewsDefaultStackBase_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UNewsDefaultStackBase_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NewsDefaultStackBase_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NewsDefaultStackBase.NewsDefaultStackBase_C.GetWidgetSetup
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FMarinerMenuStackBaseWidgetSetup ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference)

struct FMarinerMenuStackBaseWidgetSetup UNewsDefaultStackBase_C::GetWidgetSetup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NewsDefaultStackBase_C", "GetWidgetSetup");

	Params::NewsDefaultStackBase_C_GetWidgetSetup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

