#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameOver

#include "Basic.hpp"

#include "Mariner_structs.hpp"
#include "AkAudio_structs.hpp"
#include "MangoClient_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GameOver.GameOver_C.ExecuteUbergraph_GameOver
// 0x0088 (0x0088 - 0x0000)
struct GameOver_C_ExecuteUbergraph_GameOver final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22CE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMusicManager_C*                        CallFunc_GetMusicManager_MusicManager;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerGameState*                      K2Node_DynamicCast_AsMariner_Game_State;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22CF[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerPlayerState*                    K2Node_DynamicCast_AsMariner_Player_State;         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMarinerGameOutcome                           CallFunc_GetGameOutcome_ReturnValue;               // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22D0[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TArray<EMarinerGameOutcome>& GameOutcomesByTeam)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0054(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_22D1[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EMarinerGameOutcome>                   K2Node_CustomEvent_GameOutcomesByTeam;             // 0x0068(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateGameOutcome_GameOutcomeValid;       // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22D2[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameOver_C_ExecuteUbergraph_GameOver) == 0x000008, "Wrong alignment on GameOver_C_ExecuteUbergraph_GameOver");
static_assert(sizeof(GameOver_C_ExecuteUbergraph_GameOver) == 0x000088, "Wrong size on GameOver_C_ExecuteUbergraph_GameOver");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, EntryPoint) == 0x000000, "Member 'GameOver_C_ExecuteUbergraph_GameOver::EntryPoint' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'GameOver_C_ExecuteUbergraph_GameOver::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, CallFunc_GetMusicManager_MusicManager) == 0x000010, "Member 'GameOver_C_ExecuteUbergraph_GameOver::CallFunc_GetMusicManager_MusicManager' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'GameOver_C_ExecuteUbergraph_GameOver::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, CallFunc_GetGameState_ReturnValue) == 0x000028, "Member 'GameOver_C_ExecuteUbergraph_GameOver::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, CallFunc_GetOwningPlayer_ReturnValue) == 0x000030, "Member 'GameOver_C_ExecuteUbergraph_GameOver::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, K2Node_DynamicCast_AsMariner_Game_State) == 0x000038, "Member 'GameOver_C_ExecuteUbergraph_GameOver::K2Node_DynamicCast_AsMariner_Game_State' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'GameOver_C_ExecuteUbergraph_GameOver::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'GameOver_C_ExecuteUbergraph_GameOver::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, K2Node_DynamicCast_AsMariner_Player_State) == 0x000048, "Member 'GameOver_C_ExecuteUbergraph_GameOver::K2Node_DynamicCast_AsMariner_Player_State' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'GameOver_C_ExecuteUbergraph_GameOver::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, CallFunc_GetGameOutcome_ReturnValue) == 0x000051, "Member 'GameOver_C_ExecuteUbergraph_GameOver::CallFunc_GetGameOutcome_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, K2Node_CreateDelegate_OutputDelegate_1) == 0x000054, "Member 'GameOver_C_ExecuteUbergraph_GameOver::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, K2Node_CustomEvent_GameOutcomesByTeam) == 0x000068, "Member 'GameOver_C_ExecuteUbergraph_GameOver::K2Node_CustomEvent_GameOutcomesByTeam' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, K2Node_SwitchEnum_CmpSuccess) == 0x000078, "Member 'GameOver_C_ExecuteUbergraph_GameOver::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, CallFunc_UpdateGameOutcome_GameOutcomeValid) == 0x000079, "Member 'GameOver_C_ExecuteUbergraph_GameOver::CallFunc_UpdateGameOutcome_GameOutcomeValid' has a wrong offset!");
static_assert(offsetof(GameOver_C_ExecuteUbergraph_GameOver, CallFunc_PlayAnimation_ReturnValue) == 0x000080, "Member 'GameOver_C_ExecuteUbergraph_GameOver::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function GameOver.GameOver_C.OnGameOutcomeChanged
// 0x0010 (0x0010 - 0x0000)
struct GameOver_C_OnGameOutcomeChanged final
{
public:
	TArray<EMarinerGameOutcome>                   GameOutcomesByTeam;                                // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
};
static_assert(alignof(GameOver_C_OnGameOutcomeChanged) == 0x000008, "Wrong alignment on GameOver_C_OnGameOutcomeChanged");
static_assert(sizeof(GameOver_C_OnGameOutcomeChanged) == 0x000010, "Wrong size on GameOver_C_OnGameOutcomeChanged");
static_assert(offsetof(GameOver_C_OnGameOutcomeChanged, GameOutcomesByTeam) == 0x000000, "Member 'GameOver_C_OnGameOutcomeChanged::GameOutcomesByTeam' has a wrong offset!");

// Function GameOver.GameOver_C.DisplayValidGameOutcome
// 0x0020 (0x0020 - 0x0000)
struct GameOver_C_DisplayValidGameOutcome final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EExecutionPins                                CallFunc_IsEqualSoftReference_Branches;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22D3[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EExecutionPins                                CallFunc_IsChildOfSoftReference_Branches;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameOver_C_DisplayValidGameOutcome) == 0x000008, "Wrong alignment on GameOver_C_DisplayValidGameOutcome");
static_assert(sizeof(GameOver_C_DisplayValidGameOutcome) == 0x000020, "Wrong size on GameOver_C_DisplayValidGameOutcome");
static_assert(offsetof(GameOver_C_DisplayValidGameOutcome, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'GameOver_C_DisplayValidGameOutcome::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_DisplayValidGameOutcome, CallFunc_IsEqualSoftReference_Branches) == 0x000008, "Member 'GameOver_C_DisplayValidGameOutcome::CallFunc_IsEqualSoftReference_Branches' has a wrong offset!");
static_assert(offsetof(GameOver_C_DisplayValidGameOutcome, CallFunc_GetGameState_ReturnValue_1) == 0x000010, "Member 'GameOver_C_DisplayValidGameOutcome::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameOver_C_DisplayValidGameOutcome, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'GameOver_C_DisplayValidGameOutcome::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GameOver_C_DisplayValidGameOutcome, CallFunc_IsChildOfSoftReference_Branches) == 0x000019, "Member 'GameOver_C_DisplayValidGameOutcome::CallFunc_IsChildOfSoftReference_Branches' has a wrong offset!");
static_assert(offsetof(GameOver_C_DisplayValidGameOutcome, K2Node_SwitchEnum_CmpSuccess_1) == 0x00001A, "Member 'GameOver_C_DisplayValidGameOutcome::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(GameOver_C_DisplayValidGameOutcome, K2Node_SwitchEnum_CmpSuccess_2) == 0x00001B, "Member 'GameOver_C_DisplayValidGameOutcome::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");

// Function GameOver.GameOver_C.UpdateGameOutcome
// 0x0050 (0x0050 - 0x0000)
struct GameOver_C_UpdateGameOutcome final
{
public:
	TArray<EMarinerGameOutcome>                   GameOutcomesByTeam;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          GameOutcomeValid;                                  // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22D4[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22D5[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x001C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22D6[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerPlayerState*                    K2Node_DynamicCast_AsMariner_Player_State;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22D7[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTeamIndex_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMarinerGameOutcome                           CallFunc_Array_Get_Item;                           // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameOver_C_UpdateGameOutcome) == 0x000008, "Wrong alignment on GameOver_C_UpdateGameOutcome");
static_assert(sizeof(GameOver_C_UpdateGameOutcome) == 0x000050, "Wrong size on GameOver_C_UpdateGameOutcome");
static_assert(offsetof(GameOver_C_UpdateGameOutcome, GameOutcomesByTeam) == 0x000000, "Member 'GameOver_C_UpdateGameOutcome::GameOutcomesByTeam' has a wrong offset!");
static_assert(offsetof(GameOver_C_UpdateGameOutcome, GameOutcomeValid) == 0x000010, "Member 'GameOver_C_UpdateGameOutcome::GameOutcomeValid' has a wrong offset!");
static_assert(offsetof(GameOver_C_UpdateGameOutcome, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'GameOver_C_UpdateGameOutcome::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_UpdateGameOutcome, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000018, "Member 'GameOver_C_UpdateGameOutcome::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_UpdateGameOutcome, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'GameOver_C_UpdateGameOutcome::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GameOver_C_UpdateGameOutcome, K2Node_SwitchEnum_CmpSuccess) == 0x00002C, "Member 'GameOver_C_UpdateGameOutcome::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GameOver_C_UpdateGameOutcome, CallFunc_GetOwningPlayer_ReturnValue) == 0x000030, "Member 'GameOver_C_UpdateGameOutcome::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_UpdateGameOutcome, K2Node_DynamicCast_AsMariner_Player_State) == 0x000038, "Member 'GameOver_C_UpdateGameOutcome::K2Node_DynamicCast_AsMariner_Player_State' has a wrong offset!");
static_assert(offsetof(GameOver_C_UpdateGameOutcome, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'GameOver_C_UpdateGameOutcome::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GameOver_C_UpdateGameOutcome, CallFunc_GetTeamIndex_ReturnValue) == 0x000044, "Member 'GameOver_C_UpdateGameOutcome::CallFunc_GetTeamIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_UpdateGameOutcome, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000048, "Member 'GameOver_C_UpdateGameOutcome::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_UpdateGameOutcome, CallFunc_Array_Get_Item) == 0x000049, "Member 'GameOver_C_UpdateGameOutcome::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GameOver_C_UpdateGameOutcome, CallFunc_Less_IntInt_ReturnValue) == 0x00004A, "Member 'GameOver_C_UpdateGameOutcome::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_UpdateGameOutcome, CallFunc_BooleanAND_ReturnValue) == 0x00004B, "Member 'GameOver_C_UpdateGameOutcome::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function GameOver.GameOver_C.AnimateOut
// 0x0018 (0x0018 - 0x0000)
struct GameOver_C_AnimateOut final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameOver_C_AnimateOut) == 0x000008, "Wrong alignment on GameOver_C_AnimateOut");
static_assert(sizeof(GameOver_C_AnimateOut) == 0x000018, "Wrong size on GameOver_C_AnimateOut");
static_assert(offsetof(GameOver_C_AnimateOut, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'GameOver_C_AnimateOut::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GameOver_C_AnimateOut, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'GameOver_C_AnimateOut::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function GameOver.GameOver_C.OnAnimateOutFinished
// 0x0018 (0x0018 - 0x0000)
struct GameOver_C_OnAnimateOutFinished final
{
public:
	bool                                          CallFunc_RemoveSelf_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22D8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMusicManager_C*                        CallFunc_GetMusicManager_MusicManager;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameOver_C_OnAnimateOutFinished) == 0x000008, "Wrong alignment on GameOver_C_OnAnimateOutFinished");
static_assert(sizeof(GameOver_C_OnAnimateOutFinished) == 0x000018, "Wrong size on GameOver_C_OnAnimateOutFinished");
static_assert(offsetof(GameOver_C_OnAnimateOutFinished, CallFunc_RemoveSelf_ReturnValue) == 0x000000, "Member 'GameOver_C_OnAnimateOutFinished::CallFunc_RemoveSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_OnAnimateOutFinished, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'GameOver_C_OnAnimateOutFinished::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_OnAnimateOutFinished, CallFunc_GetMusicManager_MusicManager) == 0x000010, "Member 'GameOver_C_OnAnimateOutFinished::CallFunc_GetMusicManager_MusicManager' has a wrong offset!");

// Function GameOver.GameOver_C.Get_GameOutcomeText_ColorAndOpacity_0
// 0x0098 (0x0098 - 0x0000)
struct GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0 final
{
public:
	struct FSlateColor                            ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm)
	int32                                         Temp_int_Variable;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22D9[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMarinerHostility                             CallFunc_TryAndGetHostilityRelativeToLocalPlayer_ReturnValue; // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22DA[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMarinerTeamAffiliatedObjectInterface> K2Node_DynamicCast_AsMariner_Team_Affiliated_Object_Interface; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetMarinerTeamColorbyHostility_bIsValid;  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22DB[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 CallFunc_GetMarinerTeamColorbyHostility_ReturnValue; // 0x0054(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTeamIndex_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22DC[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0070(0x0028)()
};
static_assert(alignof(GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0) == 0x000008, "Wrong alignment on GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0");
static_assert(sizeof(GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0) == 0x000098, "Wrong size on GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0");
static_assert(offsetof(GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0, ReturnValue) == 0x000000, "Member 'GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0, Temp_int_Variable) == 0x000028, "Member 'GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0, CallFunc_GetOwningPlayer_ReturnValue) == 0x000030, "Member 'GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0, CallFunc_TryAndGetHostilityRelativeToLocalPlayer_ReturnValue) == 0x000038, "Member 'GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0::CallFunc_TryAndGetHostilityRelativeToLocalPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0, K2Node_DynamicCast_AsMariner_Team_Affiliated_Object_Interface) == 0x000040, "Member 'GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0::K2Node_DynamicCast_AsMariner_Team_Affiliated_Object_Interface' has a wrong offset!");
static_assert(offsetof(GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0, CallFunc_GetMarinerTeamColorbyHostility_bIsValid) == 0x000051, "Member 'GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0::CallFunc_GetMarinerTeamColorbyHostility_bIsValid' has a wrong offset!");
static_assert(offsetof(GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0, CallFunc_GetMarinerTeamColorbyHostility_ReturnValue) == 0x000054, "Member 'GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0::CallFunc_GetMarinerTeamColorbyHostility_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0, CallFunc_GetTeamIndex_ReturnValue) == 0x000058, "Member 'GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0::CallFunc_GetTeamIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x00005C, "Member 'GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0, K2Node_MakeStruct_SlateColor) == 0x000070, "Member 'GameOver_C_Get_GameOutcomeText_ColorAndOpacity_0::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function GameOver.GameOver_C.PlayGameOverAudio
// 0x00A8 (0x00A8 - 0x0000)
struct GameOver_C_PlayGameOverAudio final
{
public:
	class UAkComponent*                           CharacterAKRef;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0008(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0018(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0028(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_1;                            // 0x0038(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22DD[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2;                          // 0x0058(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22DE[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_2;                            // 0x0070(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	class AMarinerBasePlayerController*           CallFunc_TryAndGetLocalPlayerController_ReturnValue; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22DF[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      K2Node_DynamicCast_AsMariner_Character;            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameOver_C_PlayGameOverAudio) == 0x000008, "Wrong alignment on GameOver_C_PlayGameOverAudio");
static_assert(sizeof(GameOver_C_PlayGameOverAudio) == 0x0000A8, "Wrong size on GameOver_C_PlayGameOverAudio");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, CharacterAKRef) == 0x000000, "Member 'GameOver_C_PlayGameOverAudio::CharacterAKRef' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, Temp_delegate_Variable) == 0x000008, "Member 'GameOver_C_PlayGameOverAudio::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, Temp_struct_Variable) == 0x000018, "Member 'GameOver_C_PlayGameOverAudio::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, Temp_delegate_Variable_1) == 0x000028, "Member 'GameOver_C_PlayGameOverAudio::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, Temp_struct_Variable_1) == 0x000038, "Member 'GameOver_C_PlayGameOverAudio::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, CallFunc_PostAkEvent_ReturnValue) == 0x000048, "Member 'GameOver_C_PlayGameOverAudio::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, CallFunc_GetOwningPlayer_ReturnValue) == 0x000050, "Member 'GameOver_C_PlayGameOverAudio::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, Temp_delegate_Variable_2) == 0x000058, "Member 'GameOver_C_PlayGameOverAudio::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, CallFunc_PostEvent_ReturnValue) == 0x000068, "Member 'GameOver_C_PlayGameOverAudio::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, Temp_struct_Variable_2) == 0x000070, "Member 'GameOver_C_PlayGameOverAudio::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, CallFunc_TryAndGetLocalPlayerController_ReturnValue) == 0x000080, "Member 'GameOver_C_PlayGameOverAudio::CallFunc_TryAndGetLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, CallFunc_PostAkEvent_ReturnValue_1) == 0x000088, "Member 'GameOver_C_PlayGameOverAudio::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, CallFunc_K2_GetPawn_ReturnValue) == 0x000090, "Member 'GameOver_C_PlayGameOverAudio::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, K2Node_DynamicCast_AsMariner_Character) == 0x000098, "Member 'GameOver_C_PlayGameOverAudio::K2Node_DynamicCast_AsMariner_Character' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'GameOver_C_PlayGameOverAudio::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayGameOverAudio, K2Node_SwitchEnum_CmpSuccess) == 0x0000A1, "Member 'GameOver_C_PlayGameOverAudio::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function GameOver.GameOver_C.CheckAndSetTrialsFX
// 0x0020 (0x0020 - 0x0000)
struct GameOver_C_CheckAndSetTrialsFX final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22E0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MarinerTrialsGameState_C*           K2Node_DynamicCast_AsBP_Mariner_Trials_Game_State; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameOver_C_CheckAndSetTrialsFX) == 0x000008, "Wrong alignment on GameOver_C_CheckAndSetTrialsFX");
static_assert(sizeof(GameOver_C_CheckAndSetTrialsFX) == 0x000020, "Wrong size on GameOver_C_CheckAndSetTrialsFX");
static_assert(offsetof(GameOver_C_CheckAndSetTrialsFX, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'GameOver_C_CheckAndSetTrialsFX::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GameOver_C_CheckAndSetTrialsFX, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'GameOver_C_CheckAndSetTrialsFX::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_CheckAndSetTrialsFX, K2Node_DynamicCast_AsBP_Mariner_Trials_Game_State) == 0x000010, "Member 'GameOver_C_CheckAndSetTrialsFX::K2Node_DynamicCast_AsBP_Mariner_Trials_Game_State' has a wrong offset!");
static_assert(offsetof(GameOver_C_CheckAndSetTrialsFX, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GameOver_C_CheckAndSetTrialsFX::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GameOver.GameOver_C.PlayTrialsGameOverAudio
// 0x0138 (0x0138 - 0x0000)
struct GameOver_C_PlayTrialsGameOverAudio final
{
public:
	class UAkComponent*                           CharacterAKRef;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0008(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0018(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0028(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_1;                            // 0x0038(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2;                          // 0x0048(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_2;                            // 0x0058(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_3;                          // 0x0068(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_3;                            // 0x0078(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_4;                          // 0x0088(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMusicManager_C*                        CallFunc_GetMusicManager_MusicManager;             // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMusicManager_C*                        CallFunc_GetMusicManager_MusicManager_1;           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMusicManager_C*                        CallFunc_GetMusicManager_MusicManager_2;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_4;                            // 0x00D0(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_PostAkEvent_ReturnValue_2;                // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_3;                // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_5;                          // 0x00E8(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue_4;                // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22E1[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_5;                            // 0x0100(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	class AMarinerBasePlayerController*           CallFunc_TryAndGetLocalPlayerController_ReturnValue; // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_5;                // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22E2[0x4];                                     // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      K2Node_DynamicCast_AsMariner_Character;            // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameOver_C_PlayTrialsGameOverAudio) == 0x000008, "Wrong alignment on GameOver_C_PlayTrialsGameOverAudio");
static_assert(sizeof(GameOver_C_PlayTrialsGameOverAudio) == 0x000138, "Wrong size on GameOver_C_PlayTrialsGameOverAudio");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, CharacterAKRef) == 0x000000, "Member 'GameOver_C_PlayTrialsGameOverAudio::CharacterAKRef' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, Temp_delegate_Variable) == 0x000008, "Member 'GameOver_C_PlayTrialsGameOverAudio::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, Temp_struct_Variable) == 0x000018, "Member 'GameOver_C_PlayTrialsGameOverAudio::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, Temp_delegate_Variable_1) == 0x000028, "Member 'GameOver_C_PlayTrialsGameOverAudio::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, Temp_struct_Variable_1) == 0x000038, "Member 'GameOver_C_PlayTrialsGameOverAudio::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, Temp_delegate_Variable_2) == 0x000048, "Member 'GameOver_C_PlayTrialsGameOverAudio::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, Temp_struct_Variable_2) == 0x000058, "Member 'GameOver_C_PlayTrialsGameOverAudio::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, Temp_delegate_Variable_3) == 0x000068, "Member 'GameOver_C_PlayTrialsGameOverAudio::Temp_delegate_Variable_3' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, Temp_struct_Variable_3) == 0x000078, "Member 'GameOver_C_PlayTrialsGameOverAudio::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, Temp_delegate_Variable_4) == 0x000088, "Member 'GameOver_C_PlayTrialsGameOverAudio::Temp_delegate_Variable_4' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, CallFunc_GetGameInstance_ReturnValue) == 0x000098, "Member 'GameOver_C_PlayTrialsGameOverAudio::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, CallFunc_GetGameInstance_ReturnValue_1) == 0x0000A0, "Member 'GameOver_C_PlayTrialsGameOverAudio::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, CallFunc_GetMusicManager_MusicManager) == 0x0000A8, "Member 'GameOver_C_PlayTrialsGameOverAudio::CallFunc_GetMusicManager_MusicManager' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, CallFunc_GetMusicManager_MusicManager_1) == 0x0000B0, "Member 'GameOver_C_PlayTrialsGameOverAudio::CallFunc_GetMusicManager_MusicManager_1' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, CallFunc_GetGameInstance_ReturnValue_2) == 0x0000B8, "Member 'GameOver_C_PlayTrialsGameOverAudio::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, CallFunc_GetMusicManager_MusicManager_2) == 0x0000C0, "Member 'GameOver_C_PlayTrialsGameOverAudio::CallFunc_GetMusicManager_MusicManager_2' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, CallFunc_PostAkEvent_ReturnValue) == 0x0000C8, "Member 'GameOver_C_PlayTrialsGameOverAudio::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, CallFunc_PostAkEvent_ReturnValue_1) == 0x0000CC, "Member 'GameOver_C_PlayTrialsGameOverAudio::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, Temp_struct_Variable_4) == 0x0000D0, "Member 'GameOver_C_PlayTrialsGameOverAudio::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, CallFunc_PostAkEvent_ReturnValue_2) == 0x0000E0, "Member 'GameOver_C_PlayTrialsGameOverAudio::CallFunc_PostAkEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, CallFunc_PostAkEvent_ReturnValue_3) == 0x0000E4, "Member 'GameOver_C_PlayTrialsGameOverAudio::CallFunc_PostAkEvent_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, Temp_delegate_Variable_5) == 0x0000E8, "Member 'GameOver_C_PlayTrialsGameOverAudio::Temp_delegate_Variable_5' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, CallFunc_PostAkEvent_ReturnValue_4) == 0x0000F8, "Member 'GameOver_C_PlayTrialsGameOverAudio::CallFunc_PostAkEvent_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, Temp_struct_Variable_5) == 0x000100, "Member 'GameOver_C_PlayTrialsGameOverAudio::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, CallFunc_TryAndGetLocalPlayerController_ReturnValue) == 0x000110, "Member 'GameOver_C_PlayTrialsGameOverAudio::CallFunc_TryAndGetLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, CallFunc_PostAkEvent_ReturnValue_5) == 0x000118, "Member 'GameOver_C_PlayTrialsGameOverAudio::CallFunc_PostAkEvent_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, CallFunc_K2_GetPawn_ReturnValue) == 0x000120, "Member 'GameOver_C_PlayTrialsGameOverAudio::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, K2Node_DynamicCast_AsMariner_Character) == 0x000128, "Member 'GameOver_C_PlayTrialsGameOverAudio::K2Node_DynamicCast_AsMariner_Character' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, K2Node_DynamicCast_bSuccess) == 0x000130, "Member 'GameOver_C_PlayTrialsGameOverAudio::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GameOver_C_PlayTrialsGameOverAudio, K2Node_SwitchEnum_CmpSuccess) == 0x000131, "Member 'GameOver_C_PlayTrialsGameOverAudio::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function GameOver.GameOver_C.PlayTrialsExit
// 0x0001 (0x0001 - 0x0000)
struct GameOver_C_PlayTrialsExit final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameOver_C_PlayTrialsExit) == 0x000001, "Wrong alignment on GameOver_C_PlayTrialsExit");
static_assert(sizeof(GameOver_C_PlayTrialsExit) == 0x000001, "Wrong size on GameOver_C_PlayTrialsExit");
static_assert(offsetof(GameOver_C_PlayTrialsExit, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'GameOver_C_PlayTrialsExit::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function GameOver.GameOver_C.SetInAnimation
// 0x0020 (0x0020 - 0x0000)
struct GameOver_C_SetInAnimation final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EExecutionPins                                CallFunc_IsEqualSoftReference_Branches;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22E3[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EExecutionPins                                CallFunc_IsChildOfSoftReference_Branches;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameOver_C_SetInAnimation) == 0x000008, "Wrong alignment on GameOver_C_SetInAnimation");
static_assert(sizeof(GameOver_C_SetInAnimation) == 0x000020, "Wrong size on GameOver_C_SetInAnimation");
static_assert(offsetof(GameOver_C_SetInAnimation, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'GameOver_C_SetInAnimation::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameOver_C_SetInAnimation, CallFunc_IsEqualSoftReference_Branches) == 0x000008, "Member 'GameOver_C_SetInAnimation::CallFunc_IsEqualSoftReference_Branches' has a wrong offset!");
static_assert(offsetof(GameOver_C_SetInAnimation, K2Node_SwitchEnum_CmpSuccess) == 0x000009, "Member 'GameOver_C_SetInAnimation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GameOver_C_SetInAnimation, CallFunc_GetGameState_ReturnValue_1) == 0x000010, "Member 'GameOver_C_SetInAnimation::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameOver_C_SetInAnimation, CallFunc_IsChildOfSoftReference_Branches) == 0x000018, "Member 'GameOver_C_SetInAnimation::CallFunc_IsChildOfSoftReference_Branches' has a wrong offset!");
static_assert(offsetof(GameOver_C_SetInAnimation, K2Node_SwitchEnum_CmpSuccess_1) == 0x000019, "Member 'GameOver_C_SetInAnimation::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

}

