#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ArtifactLibrary

#include "Basic.hpp"


namespace SDK::Params
{

// Function ArtifactLibrary.ArtifactLibrary_C.ApplySpecialUseArtifactEffect
// 0x0028 (0x0028 - 0x0000)
struct ArtifactLibrary_C_ApplySpecialUseArtifactEffect final
{
public:
	class AActor*                                 CharacterActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SharedSpecialUseEffect;                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      K2Node_DynamicCast_AsMariner_Character;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArtifactLibrary_C_ApplySpecialUseArtifactEffect) == 0x000008, "Wrong alignment on ArtifactLibrary_C_ApplySpecialUseArtifactEffect");
static_assert(sizeof(ArtifactLibrary_C_ApplySpecialUseArtifactEffect) == 0x000028, "Wrong size on ArtifactLibrary_C_ApplySpecialUseArtifactEffect");
static_assert(offsetof(ArtifactLibrary_C_ApplySpecialUseArtifactEffect, CharacterActor) == 0x000000, "Member 'ArtifactLibrary_C_ApplySpecialUseArtifactEffect::CharacterActor' has a wrong offset!");
static_assert(offsetof(ArtifactLibrary_C_ApplySpecialUseArtifactEffect, __WorldContext) == 0x000008, "Member 'ArtifactLibrary_C_ApplySpecialUseArtifactEffect::__WorldContext' has a wrong offset!");
static_assert(offsetof(ArtifactLibrary_C_ApplySpecialUseArtifactEffect, SharedSpecialUseEffect) == 0x000010, "Member 'ArtifactLibrary_C_ApplySpecialUseArtifactEffect::SharedSpecialUseEffect' has a wrong offset!");
static_assert(offsetof(ArtifactLibrary_C_ApplySpecialUseArtifactEffect, K2Node_DynamicCast_AsMariner_Character) == 0x000018, "Member 'ArtifactLibrary_C_ApplySpecialUseArtifactEffect::K2Node_DynamicCast_AsMariner_Character' has a wrong offset!");
static_assert(offsetof(ArtifactLibrary_C_ApplySpecialUseArtifactEffect, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'ArtifactLibrary_C_ApplySpecialUseArtifactEffect::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ArtifactLibrary.ArtifactLibrary_C.IsPrimaryMontage
// 0x0048 (0x0048 - 0x0000)
struct ArtifactLibrary_C_IsPrimaryMontage final
{
public:
	bool                                          CheckFirstPerson;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           MontageToCheck;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MontageFound;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   ThirdPersonPrimaryMontages;                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UAnimMontage*>                   K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArtifactLibrary_C_IsPrimaryMontage) == 0x000008, "Wrong alignment on ArtifactLibrary_C_IsPrimaryMontage");
static_assert(sizeof(ArtifactLibrary_C_IsPrimaryMontage) == 0x000048, "Wrong size on ArtifactLibrary_C_IsPrimaryMontage");
static_assert(offsetof(ArtifactLibrary_C_IsPrimaryMontage, CheckFirstPerson) == 0x000000, "Member 'ArtifactLibrary_C_IsPrimaryMontage::CheckFirstPerson' has a wrong offset!");
static_assert(offsetof(ArtifactLibrary_C_IsPrimaryMontage, MontageToCheck) == 0x000008, "Member 'ArtifactLibrary_C_IsPrimaryMontage::MontageToCheck' has a wrong offset!");
static_assert(offsetof(ArtifactLibrary_C_IsPrimaryMontage, __WorldContext) == 0x000010, "Member 'ArtifactLibrary_C_IsPrimaryMontage::__WorldContext' has a wrong offset!");
static_assert(offsetof(ArtifactLibrary_C_IsPrimaryMontage, MontageFound) == 0x000018, "Member 'ArtifactLibrary_C_IsPrimaryMontage::MontageFound' has a wrong offset!");
static_assert(offsetof(ArtifactLibrary_C_IsPrimaryMontage, ThirdPersonPrimaryMontages) == 0x000020, "Member 'ArtifactLibrary_C_IsPrimaryMontage::ThirdPersonPrimaryMontages' has a wrong offset!");
static_assert(offsetof(ArtifactLibrary_C_IsPrimaryMontage, K2Node_MakeArray_Array) == 0x000030, "Member 'ArtifactLibrary_C_IsPrimaryMontage::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ArtifactLibrary_C_IsPrimaryMontage, CallFunc_Array_Contains_ReturnValue) == 0x000040, "Member 'ArtifactLibrary_C_IsPrimaryMontage::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

}

