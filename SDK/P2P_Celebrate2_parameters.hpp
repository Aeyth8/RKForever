#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: P2P_Celebrate2

#include "Basic.hpp"

#include "Mariner_structs.hpp"


namespace SDK::Params
{

// Function P2P_Celebrate2.P2P_Celebrate2_C.ResolveMessage
// 0x00B0 (0x00B0 - 0x0000)
struct P2P_Celebrate2_C_ResolveMessage final
{
public:
	class APlayerController*                      LocalPC;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           RelatedPlayerState_1;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           RelatedPlayerState_2;                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                OptionalObject;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMarinerMessageText                    ReturnValue;                                       // 0x0020(0x0048)(Parm, OutParm, ReturnParm)
	struct FMarinerMessageText                    CallFunc_ResolveMessage_ReturnValue;               // 0x0068(0x0048)()
};
static_assert(alignof(P2P_Celebrate2_C_ResolveMessage) == 0x000008, "Wrong alignment on P2P_Celebrate2_C_ResolveMessage");
static_assert(sizeof(P2P_Celebrate2_C_ResolveMessage) == 0x0000B0, "Wrong size on P2P_Celebrate2_C_ResolveMessage");
static_assert(offsetof(P2P_Celebrate2_C_ResolveMessage, LocalPC) == 0x000000, "Member 'P2P_Celebrate2_C_ResolveMessage::LocalPC' has a wrong offset!");
static_assert(offsetof(P2P_Celebrate2_C_ResolveMessage, RelatedPlayerState_1) == 0x000008, "Member 'P2P_Celebrate2_C_ResolveMessage::RelatedPlayerState_1' has a wrong offset!");
static_assert(offsetof(P2P_Celebrate2_C_ResolveMessage, RelatedPlayerState_2) == 0x000010, "Member 'P2P_Celebrate2_C_ResolveMessage::RelatedPlayerState_2' has a wrong offset!");
static_assert(offsetof(P2P_Celebrate2_C_ResolveMessage, OptionalObject) == 0x000018, "Member 'P2P_Celebrate2_C_ResolveMessage::OptionalObject' has a wrong offset!");
static_assert(offsetof(P2P_Celebrate2_C_ResolveMessage, ReturnValue) == 0x000020, "Member 'P2P_Celebrate2_C_ResolveMessage::ReturnValue' has a wrong offset!");
static_assert(offsetof(P2P_Celebrate2_C_ResolveMessage, CallFunc_ResolveMessage_ReturnValue) == 0x000068, "Member 'P2P_Celebrate2_C_ResolveMessage::CallFunc_ResolveMessage_ReturnValue' has a wrong offset!");

}

