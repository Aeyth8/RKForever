#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MiniRewardsPreview

#include "Basic.hpp"

#include "MiniRewardsPreview_classes.hpp"
#include "MiniRewardsPreview_parameters.hpp"


namespace SDK
{

// Function MiniRewardsPreview.MiniRewardsPreview_C.PopulateRewards
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMangoQuestReward                QuestReward                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FMangoQuest                      Quest                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UMiniRewardsPreview_C::PopulateRewards(const struct FMangoQuestReward& QuestReward, const struct FMangoQuest& Quest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniRewardsPreview_C", "PopulateRewards");

	Params::MiniRewardsPreview_C_PopulateRewards Parms{};

	Parms.QuestReward = std::move(QuestReward);
	Parms.Quest = std::move(Quest);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniRewardsPreview.MiniRewardsPreview_C.Populate Blast Pass Reward
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMangoQuest                      Quest                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UMiniRewardsPreview_C::Populate_Blast_Pass_Reward(const struct FMangoQuest& Quest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniRewardsPreview_C", "Populate Blast Pass Reward");

	Params::MiniRewardsPreview_C_Populate_Blast_Pass_Reward Parms{};

	Parms.Quest = std::move(Quest);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniRewardsPreview.MiniRewardsPreview_C.PopulateRocketFuelReward
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMangoQuestReward                QuestReward                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UMiniRewardsPreview_C::PopulateRocketFuelReward(const struct FMangoQuestReward& QuestReward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniRewardsPreview_C", "PopulateRocketFuelReward");

	Params::MiniRewardsPreview_C_PopulateRocketFuelReward Parms{};

	Parms.QuestReward = std::move(QuestReward);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniRewardsPreview.MiniRewardsPreview_C.Populate Rocket Parts Reward
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMangoQuestReward                QuestRewards                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void UMiniRewardsPreview_C::Populate_Rocket_Parts_Reward(const struct FMangoQuestReward& QuestRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniRewardsPreview_C", "Populate Rocket Parts Reward");

	Params::MiniRewardsPreview_C_Populate_Rocket_Parts_Reward Parms{};

	Parms.QuestRewards = std::move(QuestRewards);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniRewardsPreview.MiniRewardsPreview_C.PopulateItemReward
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMangoQuestReward                QuestReward                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UMiniRewardsPreview_C::PopulateItemReward(const struct FMangoQuestReward& QuestReward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniRewardsPreview_C", "PopulateItemReward");

	Params::MiniRewardsPreview_C_PopulateItemReward Parms{};

	Parms.QuestReward = std::move(QuestReward);

	UObject::ProcessEvent(Func, &Parms);
}

}

