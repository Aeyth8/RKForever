#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PostGameBlastPassAndQuestProgress

#include "Basic.hpp"

#include "PostGameBlastPassAndQuestProgress_classes.hpp"
#include "PostGameBlastPassAndQuestProgress_parameters.hpp"


namespace SDK
{

// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.ExecuteUbergraph_PostGameBlastPassAndQuestProgress
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPostGameBlastPassAndQuestProgress_C::ExecuteUbergraph_PostGameBlastPassAndQuestProgress(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "ExecuteUbergraph_PostGameBlastPassAndQuestProgress");

	Params::PostGameBlastPassAndQuestProgress_C_ExecuteUbergraph_PostGameBlastPassAndQuestProgress Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.BlastPassQuestProgressComplete
// (BlueprintCallable, BlueprintEvent)

void UPostGameBlastPassAndQuestProgress_C::BlastPassQuestProgressComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "BlastPassQuestProgressComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.BP_OnEntered
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bFromSubMenu                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPostGameBlastPassAndQuestProgress_C::BP_OnEntered(bool bFromSubMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "BP_OnEntered");

	Params::PostGameBlastPassAndQuestProgress_C_BP_OnEntered Parms{};

	Parms.bFromSubMenu = bFromSubMenu;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.OnBlastPassBarLevelUp
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPostGameBlastPassAndQuestProgress_C::OnBlastPassBarLevelUp(int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "OnBlastPassBarLevelUp");

	Params::PostGameBlastPassAndQuestProgress_C_OnBlastPassBarLevelUp Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.AllPresentationsComplete
// (BlueprintCallable, BlueprintEvent)

void UPostGameBlastPassAndQuestProgress_C::AllPresentationsComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "AllPresentationsComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.WidgetAnimationEvt_HideReward_K2Node_WidgetAnimationEvent_5
// (BlueprintEvent)

void UPostGameBlastPassAndQuestProgress_C::WidgetAnimationEvt_HideReward_K2Node_WidgetAnimationEvent_5()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "WidgetAnimationEvt_HideReward_K2Node_WidgetAnimationEvent_5");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.QuestProgressComplete
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMangoQuestDescription           Quest                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UPostGameBlastPassAndQuestProgress_C::QuestProgressComplete(const struct FMangoQuestDescription& Quest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "QuestProgressComplete");

	Params::PostGameBlastPassAndQuestProgress_C_QuestProgressComplete Parms{};

	Parms.Quest = std::move(Quest);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.WidgetAnimationEvt_PresentReward_K2Node_WidgetAnimationEvent_4
// (BlueprintEvent)

void UPostGameBlastPassAndQuestProgress_C::WidgetAnimationEvt_PresentReward_K2Node_WidgetAnimationEvent_4()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "WidgetAnimationEvt_PresentReward_K2Node_WidgetAnimationEvent_4");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.WidgetAnimationEvt_TransitionBlastPassToQuests_K2Node_WidgetAnimationEvent_0
// (BlueprintEvent)

void UPostGameBlastPassAndQuestProgress_C::WidgetAnimationEvt_TransitionBlastPassToQuests_K2Node_WidgetAnimationEvent_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "WidgetAnimationEvt_TransitionBlastPassToQuests_K2Node_WidgetAnimationEvent_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.AllRewardsPresented
// (BlueprintCallable, BlueprintEvent)

void UPostGameBlastPassAndQuestProgress_C::AllRewardsPresented()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "AllRewardsPresented");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.WidgetAnimationEvt_TransitionQuestsToRewards_K2Node_WidgetAnimationEvent_3
// (BlueprintEvent)

void UPostGameBlastPassAndQuestProgress_C::WidgetAnimationEvt_TransitionQuestsToRewards_K2Node_WidgetAnimationEvent_3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "WidgetAnimationEvt_TransitionQuestsToRewards_K2Node_WidgetAnimationEvent_3");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.WidgetAnimationEvt_TransitionBlastPassToRewards_K2Node_WidgetAnimationEvent_2
// (BlueprintEvent)

void UPostGameBlastPassAndQuestProgress_C::WidgetAnimationEvt_TransitionBlastPassToRewards_K2Node_WidgetAnimationEvent_2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "WidgetAnimationEvt_TransitionBlastPassToRewards_K2Node_WidgetAnimationEvent_2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.AllQuestProgressComplete
// (BlueprintCallable, BlueprintEvent)

void UPostGameBlastPassAndQuestProgress_C::AllQuestProgressComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "AllQuestProgressComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.BlastPassProgressComplete
// (BlueprintCallable, BlueprintEvent)

void UPostGameBlastPassAndQuestProgress_C::BlastPassProgressComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "BlastPassProgressComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.WidgetAnimationEvt_PresentBlastPass_K2Node_WidgetAnimationEvent_1
// (BlueprintEvent)

void UPostGameBlastPassAndQuestProgress_C::WidgetAnimationEvt_PresentBlastPass_K2Node_WidgetAnimationEvent_1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "WidgetAnimationEvt_PresentBlastPass_K2Node_WidgetAnimationEvent_1");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.InitQuests
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UPostGameBlastPassAndQuestProgress_C::InitQuests()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "InitQuests");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.PresentNextQuest
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    QuestConsumed                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPostGameBlastPassAndQuestProgress_C::PresentNextQuest(bool* QuestConsumed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "PresentNextQuest");

	Params::PostGameBlastPassAndQuestProgress_C_PresentNextQuest Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (QuestConsumed != nullptr)
		*QuestConsumed = Parms.QuestConsumed;
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.HasBlastPassProgress
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    HasProgress                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPostGameBlastPassAndQuestProgress_C::HasBlastPassProgress(bool* HasProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "HasBlastPassProgress");

	Params::PostGameBlastPassAndQuestProgress_C_HasBlastPassProgress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasProgress != nullptr)
		*HasProgress = Parms.HasProgress;
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.InitBlastPass
// (Public, BlueprintCallable, BlueprintEvent)

void UPostGameBlastPassAndQuestProgress_C::InitBlastPass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "InitBlastPass");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.PresentBlastPassMatchProgress
// (Public, BlueprintCallable, BlueprintEvent)

void UPostGameBlastPassAndQuestProgress_C::PresentBlastPassMatchProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "PresentBlastPassMatchProgress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.HasQuestProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    HasProgress                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPostGameBlastPassAndQuestProgress_C::HasQuestProgress(bool* HasProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "HasQuestProgress");

	Params::PostGameBlastPassAndQuestProgress_C_HasQuestProgress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasProgress != nullptr)
		*HasProgress = Parms.HasProgress;
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.HasRewards
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    HasRewards_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPostGameBlastPassAndQuestProgress_C::HasRewards(bool* HasRewards_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "HasRewards");

	Params::PostGameBlastPassAndQuestProgress_C_HasRewards Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasRewards_0 != nullptr)
		*HasRewards_0 = Parms.HasRewards_0;
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.InitRewards
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FromQuests                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPostGameBlastPassAndQuestProgress_C::InitRewards(bool FromQuests)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "InitRewards");

	Params::PostGameBlastPassAndQuestProgress_C_InitRewards Parms{};

	Parms.FromQuests = FromQuests;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.PresentNextReward
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RewardConsumed                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPostGameBlastPassAndQuestProgress_C::PresentNextReward(bool* RewardConsumed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "PresentNextReward");

	Params::PostGameBlastPassAndQuestProgress_C_PresentNextReward Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RewardConsumed != nullptr)
		*RewardConsumed = Parms.RewardConsumed;
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.UpdateVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShowBlastPass                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ShowQuests                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ShowRewards                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPostGameBlastPassAndQuestProgress_C::UpdateVisibility(bool ShowBlastPass, bool ShowQuests, bool ShowRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "UpdateVisibility");

	Params::PostGameBlastPassAndQuestProgress_C_UpdateVisibility Parms{};

	Parms.ShowBlastPass = ShowBlastPass;
	Parms.ShowQuests = ShowQuests;
	Parms.ShowRewards = ShowRewards;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.InitData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UPostGameBlastPassAndQuestProgress_C::InitData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "InitData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.PresentBlastPassQuestProgress
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMangoQuestDescription           Quest                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UPostGameBlastPassAndQuestProgress_C::PresentBlastPassQuestProgress(const struct FMangoQuestDescription& Quest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "PresentBlastPassQuestProgress");

	Params::PostGameBlastPassAndQuestProgress_C_PresentBlastPassQuestProgress Parms{};

	Parms.Quest = std::move(Quest);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.UpdateTitle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Title                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UPostGameBlastPassAndQuestProgress_C::UpdateTitle(const class FText& Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "UpdateTitle");

	Params::PostGameBlastPassAndQuestProgress_C_UpdateTitle Parms{};

	Parms.Title = std::move(Title);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.UpdateSoftCurrency
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMangoQuestDescription           Quest                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UPostGameBlastPassAndQuestProgress_C::UpdateSoftCurrency(const struct FMangoQuestDescription& Quest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "UpdateSoftCurrency");

	Params::PostGameBlastPassAndQuestProgress_C_UpdateSoftCurrency Parms{};

	Parms.Quest = std::move(Quest);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.GetBlastPassProgressPreQuestRewards
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   LevelStart                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LevelEnd                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ProgressStart                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ProgressEnd                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPostGameBlastPassAndQuestProgress_C::GetBlastPassProgressPreQuestRewards(int32* LevelStart, int32* LevelEnd, float* ProgressStart, float* ProgressEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "GetBlastPassProgressPreQuestRewards");

	Params::PostGameBlastPassAndQuestProgress_C_GetBlastPassProgressPreQuestRewards Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LevelStart != nullptr)
		*LevelStart = Parms.LevelStart;

	if (LevelEnd != nullptr)
		*LevelEnd = Parms.LevelEnd;

	if (ProgressStart != nullptr)
		*ProgressStart = Parms.ProgressStart;

	if (ProgressEnd != nullptr)
		*ProgressEnd = Parms.ProgressEnd;
}


// Function PostGameBlastPassAndQuestProgress.PostGameBlastPassAndQuestProgress_C.AddLevelPercent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OffsetPercent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OutLevel                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutProgress                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPostGameBlastPassAndQuestProgress_C::AddLevelPercent(int32 Level, float Progress, float OffsetPercent, int32* OutLevel, float* OutProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PostGameBlastPassAndQuestProgress_C", "AddLevelPercent");

	Params::PostGameBlastPassAndQuestProgress_C_AddLevelPercent Parms{};

	Parms.Level = Level;
	Parms.Progress = Progress;
	Parms.OffsetPercent = OffsetPercent;

	UObject::ProcessEvent(Func, &Parms);

	if (OutLevel != nullptr)
		*OutLevel = Parms.OutLevel;

	if (OutProgress != nullptr)
		*OutProgress = Parms.OutProgress;
}

}

