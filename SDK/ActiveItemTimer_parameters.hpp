#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ActiveItemTimer

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ActiveItemTimer.ActiveItemTimer_C.ExecuteUbergraph_ActiveItemTimer
// 0x0118 (0x0118 - 0x0000)
struct ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      K2Node_DynamicCast_AsMariner_Character;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x001C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_TimerExistsHandle_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue; // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AMarinerCharacter* KnockOutInstigator, bool bWasMegablast)> K2Node_CreateDelegate_OutputDelegate;              // 0x0064(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_Event_Icon;                                 // 0x0078(0x0088)(ConstParm)
	float                                         K2Node_Event_Duration;                             // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AMarinerCharacter*                K2Node_CustomEvent_KnockoutInstigator;             // 0x0108(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bWasMegablast;                  // 0x0110(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer) == 0x000008, "Wrong alignment on ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer");
static_assert(sizeof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer) == 0x000118, "Wrong size on ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, EntryPoint) == 0x000000, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::EntryPoint' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000008, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, K2Node_DynamicCast_AsMariner_Character) == 0x000010, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::K2Node_DynamicCast_AsMariner_Character' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, CallFunc_IsValid_ReturnValue_1) == 0x00001A, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, CallFunc_HasAuthority_ReturnValue) == 0x00001B, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, K2Node_Event_MyGeometry) == 0x00001C, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, K2Node_Event_InDeltaTime) == 0x000054, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, CallFunc_K2_TimerExistsHandle_ReturnValue) == 0x000058, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::CallFunc_K2_TimerExistsHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue) == 0x00005C, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000060, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, K2Node_CreateDelegate_OutputDelegate) == 0x000064, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, K2Node_Event_Icon) == 0x000078, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::K2Node_Event_Icon' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, K2Node_Event_Duration) == 0x000100, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::K2Node_Event_Duration' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, K2Node_CustomEvent_KnockoutInstigator) == 0x000108, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::K2Node_CustomEvent_KnockoutInstigator' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer, K2Node_CustomEvent_bWasMegablast) == 0x000110, "Member 'ActiveItemTimer_C_ExecuteUbergraph_ActiveItemTimer::K2Node_CustomEvent_bWasMegablast' has a wrong offset!");

// Function ActiveItemTimer.ActiveItemTimer_C.CustomEvent_0
// 0x0010 (0x0010 - 0x0000)
struct ActiveItemTimer_C_CustomEvent_0 final
{
public:
	const class AMarinerCharacter*                KnockOutInstigator;                                // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWasMegablast;                                     // 0x0008(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ActiveItemTimer_C_CustomEvent_0) == 0x000008, "Wrong alignment on ActiveItemTimer_C_CustomEvent_0");
static_assert(sizeof(ActiveItemTimer_C_CustomEvent_0) == 0x000010, "Wrong size on ActiveItemTimer_C_CustomEvent_0");
static_assert(offsetof(ActiveItemTimer_C_CustomEvent_0, KnockOutInstigator) == 0x000000, "Member 'ActiveItemTimer_C_CustomEvent_0::KnockOutInstigator' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_CustomEvent_0, bWasMegablast) == 0x000008, "Member 'ActiveItemTimer_C_CustomEvent_0::bWasMegablast' has a wrong offset!");

// Function ActiveItemTimer.ActiveItemTimer_C.OnItemSet
// 0x0090 (0x0090 - 0x0000)
struct ActiveItemTimer_C_OnItemSet final
{
public:
	struct FSlateBrush                            Icon;                                              // 0x0000(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         Duration;                                          // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActiveItemTimer_C_OnItemSet) == 0x000008, "Wrong alignment on ActiveItemTimer_C_OnItemSet");
static_assert(sizeof(ActiveItemTimer_C_OnItemSet) == 0x000090, "Wrong size on ActiveItemTimer_C_OnItemSet");
static_assert(offsetof(ActiveItemTimer_C_OnItemSet, Icon) == 0x000000, "Member 'ActiveItemTimer_C_OnItemSet::Icon' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_OnItemSet, Duration) == 0x000088, "Member 'ActiveItemTimer_C_OnItemSet::Duration' has a wrong offset!");

// Function ActiveItemTimer.ActiveItemTimer_C.Tick
// 0x003C (0x003C - 0x0000)
struct ActiveItemTimer_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActiveItemTimer_C_Tick) == 0x000004, "Wrong alignment on ActiveItemTimer_C_Tick");
static_assert(sizeof(ActiveItemTimer_C_Tick) == 0x00003C, "Wrong size on ActiveItemTimer_C_Tick");
static_assert(offsetof(ActiveItemTimer_C_Tick, MyGeometry) == 0x000000, "Member 'ActiveItemTimer_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_Tick, InDeltaTime) == 0x000038, "Member 'ActiveItemTimer_C_Tick::InDeltaTime' has a wrong offset!");

// Function ActiveItemTimer.ActiveItemTimer_C.SetActiveTimer
// 0x0010 (0x0010 - 0x0000)
struct ActiveItemTimer_C_SetActiveTimer final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActiveItemTimer_C_SetActiveTimer) == 0x000008, "Wrong alignment on ActiveItemTimer_C_SetActiveTimer");
static_assert(sizeof(ActiveItemTimer_C_SetActiveTimer) == 0x000010, "Wrong size on ActiveItemTimer_C_SetActiveTimer");
static_assert(offsetof(ActiveItemTimer_C_SetActiveTimer, Duration) == 0x000000, "Member 'ActiveItemTimer_C_SetActiveTimer::Duration' has a wrong offset!");
static_assert(offsetof(ActiveItemTimer_C_SetActiveTimer, CallFunc_K2_SetTimer_ReturnValue) == 0x000008, "Member 'ActiveItemTimer_C_SetActiveTimer::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");

}

