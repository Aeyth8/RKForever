#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mariner

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayAbilities_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Mariner_structs.hpp"
#include "SlateCore_structs.hpp"
#include "MangoClient_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Slate_structs.hpp"
#include "Slate_classes.hpp"
#include "GenericGraphRuntime_classes.hpp"
#include "Gauntlet_classes.hpp"
#include "NavigationSystem_classes.hpp"
#include "InputCore_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// Class Mariner.MarinerMainMenuGameState
// 0x0000 (0x0258 - 0x0258)
class AMarinerMainMenuGameState final : public AGameStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMainMenuGameState">();
	}
	static class AMarinerMainMenuGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerMainMenuGameState>();
	}
};
static_assert(alignof(AMarinerMainMenuGameState) == 0x000008, "Wrong alignment on AMarinerMainMenuGameState");
static_assert(sizeof(AMarinerMainMenuGameState) == 0x000258, "Wrong size on AMarinerMainMenuGameState");

// Class Mariner.MangoBaseManager
// 0x0018 (0x0040 - 0x0028)
class UMangoBaseManager : public UObject
{
public:
	TWeakObjectPtr<class UMarinerGameInstance>    OwningMarinerGameInstance;                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_140E[0x10];                                    // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoBaseManager">();
	}
	static class UMangoBaseManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoBaseManager>();
	}
};
static_assert(alignof(UMangoBaseManager) == 0x000008, "Wrong alignment on UMangoBaseManager");
static_assert(sizeof(UMangoBaseManager) == 0x000040, "Wrong size on UMangoBaseManager");
static_assert(offsetof(UMangoBaseManager, OwningMarinerGameInstance) == 0x000028, "Member 'UMangoBaseManager::OwningMarinerGameInstance' has a wrong offset!");

// Class Mariner.MangoPlayerManager
// 0x0748 (0x0788 - 0x0040)
class UMangoPlayerManager final : public UMangoBaseManager
{
public:
	UMulticastInlineDelegateProperty_             OnOnboardingActiveStateChanged;                    // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_140F[0x18];                                    // 0x0050(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             MangoProfileUpdated;                               // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             MangoProfileUpdateFailed;                          // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMangoProfileDeleted;                             // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1410[0x6F0];                                   // 0x0098(0x06F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMangoPlayerManager* Get(const class UObject* WorldContextObject);

	void DeleteProfile();
	void SetActiveBlastPassSplashViewed();
	void SetLocalProfileAdvertStateActive(bool bActive);
	bool SetNewsViewed(const struct FGuid& NewsCmsId);

	const class FString GetActiveAccountName() const;
	bool GetActiveBlastPassProgression(struct FMangoBlastPassProgression* OutProgression) const;
	bool GetAllEquippedEmotesByType(const TSoftClassPtr<class UClass> CharacterClass, const struct FMangoProfile& Profile, EMangoItemType ItemType, TArray<struct FMangoItem>* OutItems) const;
	bool GetBlastPassProgression(const struct FMangoBlastPassDefinition& Definition, struct FMangoBlastPassProgression* OutProgression) const;
	bool GetCharacterProgressionForLocalProfile(const TSoftClassPtr<class UClass> CharacterClass, struct FMangoCharacterProgression* OutProgression) const;
	bool GetCharacterProgressionForProfile(const TSoftClassPtr<class UClass> CharacterClass, const struct FMangoProfile& Profile, struct FMangoCharacterProgression* OutProgression) const;
	const class FText GetCMSNameForSkinCollection(TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> SkinCollection) const;
	bool GetEquippedCharacterItemForLocalProfile(const TSoftClassPtr<class UClass> CharacterClass, EMangoItemType ItemType, bool bRanked, struct FMangoItem* OutItem) const;
	bool GetEquippedCharacterItemForProfile(const TSoftClassPtr<class UClass> CharacterClass, const struct FMangoProfile& Profile, EMangoItemType ItemType, bool bRanked, struct FMangoItem* OutItem) const;
	bool GetEquippedProfileItem(const struct FMangoProfile& Profile, EMangoItemType ItemType, struct FMangoItem* OutItem) const;
	bool GetEquippedProfileItemForLocalProfile(EMangoItemType ItemType, struct FMangoItem* OutItem) const;
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> GetEquippedSkinForLocalProfile(const TSoftClassPtr<class UClass> CharacterClass) const;
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> GetEquippedSkinForProfile(const struct FMangoProfile& InProfile, const TSoftClassPtr<class UClass> CharacterClass) const;
	int32 GetItemCurrentLevel(const struct FMangoItem& InItem) const;
	int32 GetItemCurrentLevelForProfile(const struct FMangoItem& OutItem, const struct FMangoProfile& Profile) const;
	float GetItemCurrentProgress(const struct FMangoItem& InItem) const;
	const class FString GetLinkedOriginAccountName() const;
	int32 GetLocalProfileOnboardingState() const;
	bool GetLocalProfilePlaylistRank(const struct FGuid& InPlaylistId, struct FPlaylistRank* OutPlaylistRank) const;
	const struct FMangoId GetMangoId() const;
	const struct FMangoProfile GetMangoProfile() const;
	bool GetMangoProfileLastMatch(struct FMatchEnd* OutMatchEnd) const;
	void GetNewsViewed(TArray<struct FGuid>* OutNewsIds) const;
	bool IsActiveBlastPassAtMaxTier() const;
	bool IsActiveBlastPassSplashViewed() const;
	bool IsLocalProfileAdvertStateActive() const;
	bool IsLocalProfileOnboardingActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoPlayerManager">();
	}
	static class UMangoPlayerManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoPlayerManager>();
	}
};
static_assert(alignof(UMangoPlayerManager) == 0x000008, "Wrong alignment on UMangoPlayerManager");
static_assert(sizeof(UMangoPlayerManager) == 0x000788, "Wrong size on UMangoPlayerManager");
static_assert(offsetof(UMangoPlayerManager, OnOnboardingActiveStateChanged) == 0x000040, "Member 'UMangoPlayerManager::OnOnboardingActiveStateChanged' has a wrong offset!");
static_assert(offsetof(UMangoPlayerManager, MangoProfileUpdated) == 0x000068, "Member 'UMangoPlayerManager::MangoProfileUpdated' has a wrong offset!");
static_assert(offsetof(UMangoPlayerManager, MangoProfileUpdateFailed) == 0x000078, "Member 'UMangoPlayerManager::MangoProfileUpdateFailed' has a wrong offset!");
static_assert(offsetof(UMangoPlayerManager, OnMangoProfileDeleted) == 0x000088, "Member 'UMangoPlayerManager::OnMangoProfileDeleted' has a wrong offset!");

// Class Mariner.BTDecorator_ItemSpawnerHasItem
// 0x0028 (0x0090 - 0x0068)
class UBTDecorator_ItemSpawnerHasItem final : public UBTDecorator
{
public:
	struct FBlackboardKeySelector                 ItemSpawnerKey;                                    // 0x0068(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTDecorator_ItemSpawnerHasItem">();
	}
	static class UBTDecorator_ItemSpawnerHasItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTDecorator_ItemSpawnerHasItem>();
	}
};
static_assert(alignof(UBTDecorator_ItemSpawnerHasItem) == 0x000008, "Wrong alignment on UBTDecorator_ItemSpawnerHasItem");
static_assert(sizeof(UBTDecorator_ItemSpawnerHasItem) == 0x000090, "Wrong size on UBTDecorator_ItemSpawnerHasItem");
static_assert(offsetof(UBTDecorator_ItemSpawnerHasItem, ItemSpawnerKey) == 0x000068, "Member 'UBTDecorator_ItemSpawnerHasItem::ItemSpawnerKey' has a wrong offset!");

// Class Mariner.MarinerProjectileCollisionComponent
// 0x00E0 (0x04E0 - 0x0400)
class UMarinerProjectileCollisionComponent final : public USphereComponent
{
public:
	ECollisionChannel                             EnvironmentAndDynamicTestChannel;                  // 0x03F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseSweepForEnvironmentTest;                       // 0x03F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1425[0x2];                                     // 0x03FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnvironmentSweepSphereRadius;                      // 0x03FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvironmentTraceAngleThreshold;                    // 0x0400(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIgnoreDamageableHitsBehind;                       // 0x0404(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldForceEnableSweeps;                          // 0x0405(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMaskTeamCollision;                                // 0x0406(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1426[0x99];                                    // 0x0407(0x0099)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerFastSphereComponent*            ChildFastSweepSphereComponent;                     // 0x04A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1427[0x38];                                    // 0x04A8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerProjectileCollisionComponent">();
	}
	static class UMarinerProjectileCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerProjectileCollisionComponent>();
	}
};
static_assert(alignof(UMarinerProjectileCollisionComponent) == 0x000010, "Wrong alignment on UMarinerProjectileCollisionComponent");
static_assert(sizeof(UMarinerProjectileCollisionComponent) == 0x0004E0, "Wrong size on UMarinerProjectileCollisionComponent");
static_assert(offsetof(UMarinerProjectileCollisionComponent, EnvironmentAndDynamicTestChannel) == 0x0003F8, "Member 'UMarinerProjectileCollisionComponent::EnvironmentAndDynamicTestChannel' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileCollisionComponent, bUseSweepForEnvironmentTest) == 0x0003F9, "Member 'UMarinerProjectileCollisionComponent::bUseSweepForEnvironmentTest' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileCollisionComponent, EnvironmentSweepSphereRadius) == 0x0003FC, "Member 'UMarinerProjectileCollisionComponent::EnvironmentSweepSphereRadius' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileCollisionComponent, EnvironmentTraceAngleThreshold) == 0x000400, "Member 'UMarinerProjectileCollisionComponent::EnvironmentTraceAngleThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileCollisionComponent, bIgnoreDamageableHitsBehind) == 0x000404, "Member 'UMarinerProjectileCollisionComponent::bIgnoreDamageableHitsBehind' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileCollisionComponent, bShouldForceEnableSweeps) == 0x000405, "Member 'UMarinerProjectileCollisionComponent::bShouldForceEnableSweeps' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileCollisionComponent, bMaskTeamCollision) == 0x000406, "Member 'UMarinerProjectileCollisionComponent::bMaskTeamCollision' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileCollisionComponent, ChildFastSweepSphereComponent) == 0x0004A0, "Member 'UMarinerProjectileCollisionComponent::ChildFastSweepSphereComponent' has a wrong offset!");

// Class Mariner.MarinerUserWidget
// 0x0080 (0x02B0 - 0x0230)
class UMarinerUserWidget : public UUserWidget
{
public:
	uint8                                         Pad_1428[0x8];                                     // 0x0230(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMarinerInputInterface> ActiveInputWidget;                                 // 0x0238(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_1429[0x18];                                    // 0x0248(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UUMGSequencePlayer*, float>        ManagedSequencePlayers;                            // 0x0260(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void PlayAudio(class UAkAudioEvent* Event);
	class UUMGSequencePlayer* PlayManagedAnimation(class UWidgetAnimation* InAnimation, float StartAtTime, int32 NumLoopsToPlay, EUMGSequencePlayMode PlayMode, float PlaybackSpeed);
	void ScrollIntoView(bool bAnimate);
	void SetActiveInputWidget(TScriptInterface<class IMarinerInputInterface> InputWidget, bool bGiveInputFocus);
	void SetManagedVisibility(EManagedVisibilityState InState, ESlateVisibility InVisibility);

	EPlayerInputType GetActiveInputType() const;
	class UMarinerGameInstance* GetMarinerGameInstance() const;
	class UMarinerMenuManager* GetMenuManager() const;
	class UMarinerMenuStackLayer* GetOwningLayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerUserWidget">();
	}
	static class UMarinerUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerUserWidget>();
	}
};
static_assert(alignof(UMarinerUserWidget) == 0x000008, "Wrong alignment on UMarinerUserWidget");
static_assert(sizeof(UMarinerUserWidget) == 0x0002B0, "Wrong size on UMarinerUserWidget");
static_assert(offsetof(UMarinerUserWidget, ActiveInputWidget) == 0x000238, "Member 'UMarinerUserWidget::ActiveInputWidget' has a wrong offset!");
static_assert(offsetof(UMarinerUserWidget, ManagedSequencePlayers) == 0x000260, "Member 'UMarinerUserWidget::ManagedSequencePlayers' has a wrong offset!");

// Class Mariner.MarinerSettingBase
// 0x01F0 (0x04A0 - 0x02B0)
class UMarinerSettingBase : public UMarinerUserWidget
{
public:
	UMulticastInlineDelegateProperty_             OnHighlighted;                                     // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnUnhighlighted;                                   // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bCanBeSelected;                                    // 0x02D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142C[0x7];                                     // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerPlatformText                   SettingLabel;                                      // 0x02D8(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	EMarinerInputActions                          MouseSelectionInput;                               // 0x0350(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_142D[0x7];                                     // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerPlatformText                   MenuStackTooltip;                                  // 0x0358(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPlatformText                   AdditionalDesc;                                    // 0x03D0(0x0078)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                          bButtonInteractable;                               // 0x0448(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabledOnPC;                                      // 0x0449(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabledOnX1;                                      // 0x044A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabledOnPS4;                                     // 0x044B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabledOnSwitch;                                  // 0x044C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabledOnStadia;                                  // 0x044D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabledForE3_18;                                  // 0x044E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabledForBeta;                                   // 0x044F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          HighlightSFX;                                      // 0x0450(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          UnhighlightSFX;                                    // 0x0458(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_142E[0x40];                                    // 0x0460(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPOnHighlight();
	void BPOnUnhighlight();
	bool GetBackgroundColor(struct FLinearColor* OutColor);
	bool GetLabelColor(struct FLinearColor* OutColor);
	void OnDefaultRestored();
	void OnMouseHovered();
	void OnMouseSelected();
	void OnMouseUnhovered();
	void SetIsInteractable(bool bInIsInteractable);
	void SetLabel(const class FText& LabelIn);
	void SetLabelPlatform(const struct FMarinerPlatformText& LabelIn);
	void SetUnviewed(bool bUnviewed);

	const class FText GetAdditionalDescription() const;
	bool IsEnabled() const;
	bool IsHighlighted() const;
	bool IsUnviewed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSettingBase">();
	}
	static class UMarinerSettingBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSettingBase>();
	}
};
static_assert(alignof(UMarinerSettingBase) == 0x000008, "Wrong alignment on UMarinerSettingBase");
static_assert(sizeof(UMarinerSettingBase) == 0x0004A0, "Wrong size on UMarinerSettingBase");
static_assert(offsetof(UMarinerSettingBase, OnHighlighted) == 0x0002B0, "Member 'UMarinerSettingBase::OnHighlighted' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, OnUnhighlighted) == 0x0002C0, "Member 'UMarinerSettingBase::OnUnhighlighted' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, bCanBeSelected) == 0x0002D0, "Member 'UMarinerSettingBase::bCanBeSelected' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, SettingLabel) == 0x0002D8, "Member 'UMarinerSettingBase::SettingLabel' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, MouseSelectionInput) == 0x000350, "Member 'UMarinerSettingBase::MouseSelectionInput' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, MenuStackTooltip) == 0x000358, "Member 'UMarinerSettingBase::MenuStackTooltip' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, AdditionalDesc) == 0x0003D0, "Member 'UMarinerSettingBase::AdditionalDesc' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, bButtonInteractable) == 0x000448, "Member 'UMarinerSettingBase::bButtonInteractable' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, bEnabledOnPC) == 0x000449, "Member 'UMarinerSettingBase::bEnabledOnPC' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, bEnabledOnX1) == 0x00044A, "Member 'UMarinerSettingBase::bEnabledOnX1' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, bEnabledOnPS4) == 0x00044B, "Member 'UMarinerSettingBase::bEnabledOnPS4' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, bEnabledOnSwitch) == 0x00044C, "Member 'UMarinerSettingBase::bEnabledOnSwitch' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, bEnabledOnStadia) == 0x00044D, "Member 'UMarinerSettingBase::bEnabledOnStadia' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, bEnabledForE3_18) == 0x00044E, "Member 'UMarinerSettingBase::bEnabledForE3_18' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, bEnabledForBeta) == 0x00044F, "Member 'UMarinerSettingBase::bEnabledForBeta' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, HighlightSFX) == 0x000450, "Member 'UMarinerSettingBase::HighlightSFX' has a wrong offset!");
static_assert(offsetof(UMarinerSettingBase, UnhighlightSFX) == 0x000458, "Member 'UMarinerSettingBase::UnhighlightSFX' has a wrong offset!");

// Class Mariner.MarinerSettingComboBox
// 0x0250 (0x06F0 - 0x04A0)
class UMarinerSettingComboBox : public UMarinerSettingBase
{
public:
	TArray<class FText>                           Options;                                           // 0x04A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	TArray<TDelegate<void()>>                     Callbacks;                                         // 0x04B0(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bTreatSelectionAsButton;                           // 0x04C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHideComboBoxWhileUnhighlighted;                   // 0x04C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1431[0x6];                                     // 0x04C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnComboBoxIndexInit;                               // 0x04C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnSelectionIndexChanged;                           // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnComboBoxOpened;                                  // 0x04E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	struct FMarinerCustomDropdownEditConfirmation EditConfirmationData;                              // 0x04F8(0x01C8)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerCustomDropdownSFX              DropdownSFX;                                       // 0x06C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1432[0x8];                                     // 0x06E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddOption(const class FText& OptionText);
	void AddOptionWithCallback(const class FText& OptionText, const TDelegate<void()>& SelectedCallback);
	void ClearOptions();
	void OnComboBoxOutOfScope();
	void OnSelectionIndexChangedCallback(int32 SelectedIndex);
	void OnSettingDropdownOpened(const bool bOpen);
	void SetSelectedIndex(int32 Value, bool bBroadcast, bool bAnimate);

	struct FMarinerSettingComboBoxAssets GetAssets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSettingComboBox">();
	}
	static class UMarinerSettingComboBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSettingComboBox>();
	}
};
static_assert(alignof(UMarinerSettingComboBox) == 0x000008, "Wrong alignment on UMarinerSettingComboBox");
static_assert(sizeof(UMarinerSettingComboBox) == 0x0006F0, "Wrong size on UMarinerSettingComboBox");
static_assert(offsetof(UMarinerSettingComboBox, Options) == 0x0004A0, "Member 'UMarinerSettingComboBox::Options' has a wrong offset!");
static_assert(offsetof(UMarinerSettingComboBox, Callbacks) == 0x0004B0, "Member 'UMarinerSettingComboBox::Callbacks' has a wrong offset!");
static_assert(offsetof(UMarinerSettingComboBox, bTreatSelectionAsButton) == 0x0004C0, "Member 'UMarinerSettingComboBox::bTreatSelectionAsButton' has a wrong offset!");
static_assert(offsetof(UMarinerSettingComboBox, bHideComboBoxWhileUnhighlighted) == 0x0004C1, "Member 'UMarinerSettingComboBox::bHideComboBoxWhileUnhighlighted' has a wrong offset!");
static_assert(offsetof(UMarinerSettingComboBox, OnComboBoxIndexInit) == 0x0004C8, "Member 'UMarinerSettingComboBox::OnComboBoxIndexInit' has a wrong offset!");
static_assert(offsetof(UMarinerSettingComboBox, OnSelectionIndexChanged) == 0x0004D8, "Member 'UMarinerSettingComboBox::OnSelectionIndexChanged' has a wrong offset!");
static_assert(offsetof(UMarinerSettingComboBox, OnComboBoxOpened) == 0x0004E8, "Member 'UMarinerSettingComboBox::OnComboBoxOpened' has a wrong offset!");
static_assert(offsetof(UMarinerSettingComboBox, EditConfirmationData) == 0x0004F8, "Member 'UMarinerSettingComboBox::EditConfirmationData' has a wrong offset!");
static_assert(offsetof(UMarinerSettingComboBox, DropdownSFX) == 0x0006C0, "Member 'UMarinerSettingComboBox::DropdownSFX' has a wrong offset!");

// Class Mariner.MangoConnectionManager
// 0x01B8 (0x01F8 - 0x0040)
class UMangoConnectionManager final : public UMangoBaseManager
{
public:
	uint8                                         Pad_1434[0x90];                                    // 0x0040(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnGameVersionChanged;                              // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1435[0x118];                                   // 0x00E0(0x0118)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMangoConnectionManager* Get(const class UObject* WorldContextObject);

	void OnUserSettingsChanged();

	EMarinerGameVersion GetGameVersion() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoConnectionManager">();
	}
	static class UMangoConnectionManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoConnectionManager>();
	}
};
static_assert(alignof(UMangoConnectionManager) == 0x000008, "Wrong alignment on UMangoConnectionManager");
static_assert(sizeof(UMangoConnectionManager) == 0x0001F8, "Wrong size on UMangoConnectionManager");
static_assert(offsetof(UMangoConnectionManager, OnGameVersionChanged) == 0x0000D0, "Member 'UMangoConnectionManager::OnGameVersionChanged' has a wrong offset!");

// Class Mariner.AIDataProvider_BotManagerQueryParams
// 0x0000 (0x0040 - 0x0040)
class UAIDataProvider_BotManagerQueryParams final : public UAIDataProvider_QueryParams
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AIDataProvider_BotManagerQueryParams">();
	}
	static class UAIDataProvider_BotManagerQueryParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIDataProvider_BotManagerQueryParams>();
	}
};
static_assert(alignof(UAIDataProvider_BotManagerQueryParams) == 0x000008, "Wrong alignment on UAIDataProvider_BotManagerQueryParams");
static_assert(sizeof(UAIDataProvider_BotManagerQueryParams) == 0x000040, "Wrong size on UAIDataProvider_BotManagerQueryParams");

// Class Mariner.MarinerPregameStateMachine
// 0x0040 (0x0068 - 0x0028)
class UMarinerPregameStateMachine final : public UObject
{
public:
	uint8                                         Pad_1436[0x20];                                    // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPregameState>                  PregameStates;                                     // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1437[0x10];                                    // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FName GetFirstState();
	class FName GetLastState();
	void OnMachineBegin();
	void OnMachineUpdate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPregameStateMachine">();
	}
	static class UMarinerPregameStateMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPregameStateMachine>();
	}
};
static_assert(alignof(UMarinerPregameStateMachine) == 0x000008, "Wrong alignment on UMarinerPregameStateMachine");
static_assert(sizeof(UMarinerPregameStateMachine) == 0x000068, "Wrong size on UMarinerPregameStateMachine");
static_assert(offsetof(UMarinerPregameStateMachine, PregameStates) == 0x000048, "Member 'UMarinerPregameStateMachine::PregameStates' has a wrong offset!");

// Class Mariner.BTTask_FindRandomPointOnNavMesh
// 0x0008 (0x00A0 - 0x0098)
class UBTTask_FindRandomPointOnNavMesh final : public UBTTask_BlackboardBase
{
public:
	float                                         SearchRadius;                                      // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1438[0x4];                                     // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_FindRandomPointOnNavMesh">();
	}
	static class UBTTask_FindRandomPointOnNavMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_FindRandomPointOnNavMesh>();
	}
};
static_assert(alignof(UBTTask_FindRandomPointOnNavMesh) == 0x000008, "Wrong alignment on UBTTask_FindRandomPointOnNavMesh");
static_assert(sizeof(UBTTask_FindRandomPointOnNavMesh) == 0x0000A0, "Wrong size on UBTTask_FindRandomPointOnNavMesh");
static_assert(offsetof(UBTTask_FindRandomPointOnNavMesh, SearchRadius) == 0x000098, "Member 'UBTTask_FindRandomPointOnNavMesh::SearchRadius' has a wrong offset!");

// Class Mariner.BTDecorator_HasItem
// 0x0000 (0x0068 - 0x0068)
class UBTDecorator_HasItem final : public UBTDecorator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTDecorator_HasItem">();
	}
	static class UBTDecorator_HasItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTDecorator_HasItem>();
	}
};
static_assert(alignof(UBTDecorator_HasItem) == 0x000008, "Wrong alignment on UBTDecorator_HasItem");
static_assert(sizeof(UBTDecorator_HasItem) == 0x000068, "Wrong size on UBTDecorator_HasItem");

// Class Mariner.MarinerAbilityIcon
// 0x0130 (0x0360 - 0x0230)
class UMarinerAbilityIcon final : public UUserWidget
{
public:
	TSubclassOf<class UMarinerAbility>            AbilityClass;                                      // 0x0230(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_Icon;                                        // 0x0238(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_InfinityImage;                               // 0x0240(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_RechargeFlash;                               // 0x0248(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_FrameBorder;                                 // 0x0250(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_ReloadText;                                  // 0x0258(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_CountdownText;                               // 0x0260(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_AbilityActiveCountdownText;                  // 0x0268(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_PriorityItemText;                            // 0x0270(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_CurrentAmmoText;                             // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_MaxAmmoText;                                 // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPrompt*                         Bound_AbilityPrompt;                               // 0x0288(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                               BlackTexture;                                      // 0x0290(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            BallCarrierEffect;                                 // 0x0298(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           PrimaryFireFailIgnoreTag;                          // 0x02A0(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EMarinerInputActions, struct FGameplayTag> HideWidgetTagMap;                                  // 0x02A8(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnCooldownCompleteSFX;                             // 0x02F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               IconMaterial;                                      // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               RechargeFlashMaterial;                             // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerAbilitySystemComponent*         AbilitySystemComponent;                            // 0x0310(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerWeaponAttributes*               WeaponAttributes;                                  // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UHUDAbilityUIData>          HUDBarIconData;                                    // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UMarinerItemInteractionComponent> ItemInteractionComponent;                          // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1439[0x30];                                    // 0x0330(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindToBPEvents();
	void BP_OnAbilityActivated();
	void BP_OnGameplayTagApplied(const struct FGameplayTag& GameplayTag);
	void BP_OnGameplayTagRemoved(const struct FGameplayTag& GameplayTag);
	void OnAbilityActivated();
	void OnAbilityEnded(bool bWasCancelled);
	void OnAbilityFailed(class UGameplayAbility* Ability, const struct FGameplayTagContainer& FailTags);
	void OnAbilityUIActivated();
	void OnAlternateAbilityIconUpdated(bool bInUseAlternateIcon, TSubclassOf<class UMarinerAbility> InAbilityClass);
	void OnArenaCurrentStateChanged(EMarinerArenaReturnState PrevState, EMarinerArenaReturnState NewState);
	void OnCharacterGameplayTagApplied(class AMarinerCharacter* Character, const struct FGameplayTag& GameplayTag);
	void OnCharacterGameplayTagRemoved(class AMarinerCharacter* Character, const struct FGameplayTag& GameplayTag);
	void OnCooldownEnded();
	void OnCooldownTimeChanged(float TimeRemaining, float Duration);
	void OnDropOrThrowRelease(class AMarinerCharacter* DroppingCharacter, EMarinerItemSlot ItemSlot);
	void OnLocalAmmoChanged(float NewAmount);
	void OnPriorityItemDropped(const class AMarinerCharacter* KnockOutInstigator, const bool bWasMegablast);
	void OnPriorityItemPickedUp(class AMarinerCharacter* CatchingCharacter, EMarinerItemSlot ItemSlot);
	void OnReloadActivated();
	void OnReloadEnded(bool bWasCancelled);
	void OnRepCurrentAmmo(float InCurrentAmmo, float MaxAmmo);
	void SetAbility(class UMarinerAbilitySystemComponent* InAbilitySystem, TSubclassOf<class UMarinerAbility> InAbilityClass, EMarinerInputActions InInputAction);
	void SetHUDBarIconData(const TSubclassOf<class UHUDAbilityUIData>& IconData);
	void SetIconType(EMarinerHudAbilityIconType InIconType);
	void UpdatePrompt();

	struct FMarinerAbilityIconAnimations GetAnimations() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbilityIcon">();
	}
	static class UMarinerAbilityIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbilityIcon>();
	}
};
static_assert(alignof(UMarinerAbilityIcon) == 0x000008, "Wrong alignment on UMarinerAbilityIcon");
static_assert(sizeof(UMarinerAbilityIcon) == 0x000360, "Wrong size on UMarinerAbilityIcon");
static_assert(offsetof(UMarinerAbilityIcon, AbilityClass) == 0x000230, "Member 'UMarinerAbilityIcon::AbilityClass' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, Bound_Icon) == 0x000238, "Member 'UMarinerAbilityIcon::Bound_Icon' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, Bound_InfinityImage) == 0x000240, "Member 'UMarinerAbilityIcon::Bound_InfinityImage' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, Bound_RechargeFlash) == 0x000248, "Member 'UMarinerAbilityIcon::Bound_RechargeFlash' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, Bound_FrameBorder) == 0x000250, "Member 'UMarinerAbilityIcon::Bound_FrameBorder' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, Bound_ReloadText) == 0x000258, "Member 'UMarinerAbilityIcon::Bound_ReloadText' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, Bound_CountdownText) == 0x000260, "Member 'UMarinerAbilityIcon::Bound_CountdownText' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, Bound_AbilityActiveCountdownText) == 0x000268, "Member 'UMarinerAbilityIcon::Bound_AbilityActiveCountdownText' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, Bound_PriorityItemText) == 0x000270, "Member 'UMarinerAbilityIcon::Bound_PriorityItemText' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, Bound_CurrentAmmoText) == 0x000278, "Member 'UMarinerAbilityIcon::Bound_CurrentAmmoText' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, Bound_MaxAmmoText) == 0x000280, "Member 'UMarinerAbilityIcon::Bound_MaxAmmoText' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, Bound_AbilityPrompt) == 0x000288, "Member 'UMarinerAbilityIcon::Bound_AbilityPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, BlackTexture) == 0x000290, "Member 'UMarinerAbilityIcon::BlackTexture' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, BallCarrierEffect) == 0x000298, "Member 'UMarinerAbilityIcon::BallCarrierEffect' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, PrimaryFireFailIgnoreTag) == 0x0002A0, "Member 'UMarinerAbilityIcon::PrimaryFireFailIgnoreTag' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, HideWidgetTagMap) == 0x0002A8, "Member 'UMarinerAbilityIcon::HideWidgetTagMap' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, OnCooldownCompleteSFX) == 0x0002F8, "Member 'UMarinerAbilityIcon::OnCooldownCompleteSFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, IconMaterial) == 0x000300, "Member 'UMarinerAbilityIcon::IconMaterial' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, RechargeFlashMaterial) == 0x000308, "Member 'UMarinerAbilityIcon::RechargeFlashMaterial' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, AbilitySystemComponent) == 0x000310, "Member 'UMarinerAbilityIcon::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, WeaponAttributes) == 0x000318, "Member 'UMarinerAbilityIcon::WeaponAttributes' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, HUDBarIconData) == 0x000320, "Member 'UMarinerAbilityIcon::HUDBarIconData' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityIcon, ItemInteractionComponent) == 0x000328, "Member 'UMarinerAbilityIcon::ItemInteractionComponent' has a wrong offset!");

// Class Mariner.MarinerMaterialsSwapManagerComponent
// 0x0030 (0x00E0 - 0x00B0)
class UMarinerMaterialsSwapManagerComponent final : public UActorComponent
{
public:
	int32                                         MaterialToAlterFlagForBP;                          // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_143F[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerMeshSwapReplicationData_Apply  AuthoritativeMeshSwapApplyRepData;                 // 0x00B8(0x0010)(Net, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMeshSwapReplicationData_Apply  ClientPredictiveMeshSwapApplyData;                 // 0x00C8(0x0010)(NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMeshSwapReplicationData_Revert AuthoritativeMeshSwapRevertRepData;                // 0x00D8(0x0002)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMeshSwapReplicationData_Revert ClientPredictiveMeshSwapRevertData;                // 0x00DA(0x0002)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1440[0x4];                                     // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_MeshSwapApplyData();
	void OnRep_MeshSwapRevertData();
	void RevertMaterials(int32 Param_Flags);
	void RevertMaterialsMulticast(int32 Param_Flags);
	void SwapMaterials(int32 Param_Flags, class UMaterialInterface* NewMaterial);
	void SwapMaterialsMulticast(int32 Param_Flags, class UMaterialInterface* NewMaterial);

	bool HasPendingMeshSwapForMeshType(EMarinerChangeMeshEnum MeshType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMaterialsSwapManagerComponent">();
	}
	static class UMarinerMaterialsSwapManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMaterialsSwapManagerComponent>();
	}
};
static_assert(alignof(UMarinerMaterialsSwapManagerComponent) == 0x000008, "Wrong alignment on UMarinerMaterialsSwapManagerComponent");
static_assert(sizeof(UMarinerMaterialsSwapManagerComponent) == 0x0000E0, "Wrong size on UMarinerMaterialsSwapManagerComponent");
static_assert(offsetof(UMarinerMaterialsSwapManagerComponent, MaterialToAlterFlagForBP) == 0x0000B0, "Member 'UMarinerMaterialsSwapManagerComponent::MaterialToAlterFlagForBP' has a wrong offset!");
static_assert(offsetof(UMarinerMaterialsSwapManagerComponent, AuthoritativeMeshSwapApplyRepData) == 0x0000B8, "Member 'UMarinerMaterialsSwapManagerComponent::AuthoritativeMeshSwapApplyRepData' has a wrong offset!");
static_assert(offsetof(UMarinerMaterialsSwapManagerComponent, ClientPredictiveMeshSwapApplyData) == 0x0000C8, "Member 'UMarinerMaterialsSwapManagerComponent::ClientPredictiveMeshSwapApplyData' has a wrong offset!");
static_assert(offsetof(UMarinerMaterialsSwapManagerComponent, AuthoritativeMeshSwapRevertRepData) == 0x0000D8, "Member 'UMarinerMaterialsSwapManagerComponent::AuthoritativeMeshSwapRevertRepData' has a wrong offset!");
static_assert(offsetof(UMarinerMaterialsSwapManagerComponent, ClientPredictiveMeshSwapRevertData) == 0x0000DA, "Member 'UMarinerMaterialsSwapManagerComponent::ClientPredictiveMeshSwapRevertData' has a wrong offset!");

// Class Mariner.MangoManagers
// 0x00A0 (0x00E0 - 0x0040)
class UMangoManagers final : public UMangoBaseManager
{
public:
	uint8                                         Pad_1443[0x18];                                    // 0x0040(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UMangoAchievementsManager*              MangoAchievementManager;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoBlastPassManager*                 MangoBlastPassManager;                             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoCMSManager*                       MangoCMSManager;                                   // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoConnectionManager*                MangoConnectionManager;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoDedicatedServerManager*           MangoDedicatedServerManager;                       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoPresenceManager*                  MangoPresenceManager;                              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoFriendsManager*                   MangoFriendsManager;                               // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoInventoryManager*                 MangoInventoryManager;                             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoMatchmakingManager*               MangoMatchmakingManager;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoPartyManager*                     MangoPartyManager;                                 // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoPlayerManager*                    MangoPlayerManager;                                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoPrivateMatchManager*              MangoPrivateMatchManager;                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoQOSManager*                       MangoQOSManager;                                   // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoQuestManager*                     MangoQuestManager;                                 // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoStoreManager*                     MangoStoreManager;                                 // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoTxnManager*                       MangoTxnManager;                                   // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMangoVoiceChatManager*                 MangoVoiceChatManager;                             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoManagers">();
	}
	static class UMangoManagers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoManagers>();
	}
};
static_assert(alignof(UMangoManagers) == 0x000008, "Wrong alignment on UMangoManagers");
static_assert(sizeof(UMangoManagers) == 0x0000E0, "Wrong size on UMangoManagers");
static_assert(offsetof(UMangoManagers, MangoAchievementManager) == 0x000058, "Member 'UMangoManagers::MangoAchievementManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoBlastPassManager) == 0x000060, "Member 'UMangoManagers::MangoBlastPassManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoCMSManager) == 0x000068, "Member 'UMangoManagers::MangoCMSManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoConnectionManager) == 0x000070, "Member 'UMangoManagers::MangoConnectionManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoDedicatedServerManager) == 0x000078, "Member 'UMangoManagers::MangoDedicatedServerManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoPresenceManager) == 0x000080, "Member 'UMangoManagers::MangoPresenceManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoFriendsManager) == 0x000088, "Member 'UMangoManagers::MangoFriendsManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoInventoryManager) == 0x000090, "Member 'UMangoManagers::MangoInventoryManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoMatchmakingManager) == 0x000098, "Member 'UMangoManagers::MangoMatchmakingManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoPartyManager) == 0x0000A0, "Member 'UMangoManagers::MangoPartyManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoPlayerManager) == 0x0000A8, "Member 'UMangoManagers::MangoPlayerManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoPrivateMatchManager) == 0x0000B0, "Member 'UMangoManagers::MangoPrivateMatchManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoQOSManager) == 0x0000B8, "Member 'UMangoManagers::MangoQOSManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoQuestManager) == 0x0000C0, "Member 'UMangoManagers::MangoQuestManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoStoreManager) == 0x0000C8, "Member 'UMangoManagers::MangoStoreManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoTxnManager) == 0x0000D0, "Member 'UMangoManagers::MangoTxnManager' has a wrong offset!");
static_assert(offsetof(UMangoManagers, MangoVoiceChatManager) == 0x0000D8, "Member 'UMangoManagers::MangoVoiceChatManager' has a wrong offset!");

// Class Mariner.MarinerActivationDeviceTarget
// 0x0040 (0x0268 - 0x0228)
class AMarinerActivationDeviceTarget : public AStaticMeshActor
{
public:
	UMulticastInlineDelegateProperty_             OnStateChanged;                                    // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         CoolDown;                                          // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Time;                                              // 0x023C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerActivationTargetState                 State;                                             // 0x0240(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1444[0x7];                                     // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      ActivationInstigator;                              // 0x0248(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerActivateDevicePayload          ActivationPayload;                                 // 0x0250(0x0010)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         DeactivationReplicationByte;                       // 0x0260(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1445[0x7];                                     // 0x0261(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Activate(class AMarinerCharacter* InInstigator);
	void Deactivate();
	void OnEventCooldownStart();
	void OnEventReady();
	void OnEventTriggered(class AMarinerCharacter* InActivationInstigator);
	void OnRep_ActivationPayload();
	void OnRep_DeactivationReplicationByte();
	void OnRep_State();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerActivationDeviceTarget">();
	}
	static class AMarinerActivationDeviceTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerActivationDeviceTarget>();
	}
};
static_assert(alignof(AMarinerActivationDeviceTarget) == 0x000008, "Wrong alignment on AMarinerActivationDeviceTarget");
static_assert(sizeof(AMarinerActivationDeviceTarget) == 0x000268, "Wrong size on AMarinerActivationDeviceTarget");
static_assert(offsetof(AMarinerActivationDeviceTarget, OnStateChanged) == 0x000228, "Member 'AMarinerActivationDeviceTarget::OnStateChanged' has a wrong offset!");
static_assert(offsetof(AMarinerActivationDeviceTarget, CoolDown) == 0x000238, "Member 'AMarinerActivationDeviceTarget::CoolDown' has a wrong offset!");
static_assert(offsetof(AMarinerActivationDeviceTarget, Time) == 0x00023C, "Member 'AMarinerActivationDeviceTarget::Time' has a wrong offset!");
static_assert(offsetof(AMarinerActivationDeviceTarget, State) == 0x000240, "Member 'AMarinerActivationDeviceTarget::State' has a wrong offset!");
static_assert(offsetof(AMarinerActivationDeviceTarget, ActivationInstigator) == 0x000248, "Member 'AMarinerActivationDeviceTarget::ActivationInstigator' has a wrong offset!");
static_assert(offsetof(AMarinerActivationDeviceTarget, ActivationPayload) == 0x000250, "Member 'AMarinerActivationDeviceTarget::ActivationPayload' has a wrong offset!");
static_assert(offsetof(AMarinerActivationDeviceTarget, DeactivationReplicationByte) == 0x000260, "Member 'AMarinerActivationDeviceTarget::DeactivationReplicationByte' has a wrong offset!");

// Class Mariner.MarinerSequencedProjectileSpawner
// 0x00D8 (0x0340 - 0x0268)
class alignas(0x10) AMarinerSequencedProjectileSpawner final : public AMarinerActivationDeviceTarget
{
public:
	TSubclassOf<class AMarinerLevelEventTargetLocation> LocationClass;                                     // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AMarinerProjectile>         ProjectileClass;                                   // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DelayBeforeFiring;                                 // 0x0278(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DelayTargetToFire;                                 // 0x027C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RocketsPerLocation;                                // 0x0280(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DelayBetweenConsecutiveShots;                      // 0x0284(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DelayBetweenTargetLocations;                       // 0x0288(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerSpawnPointMode                        SpawnPointMode;                                    // 0x028C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLookAtTargetLocation;                             // 0x028D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1446[0x2];                                     // 0x028E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationTimeToReset;                               // 0x0290(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1447[0x4];                                     // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          FireZone;                                          // 0x0298(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1448[0x8];                                     // 0x02A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarinerProjectileTarget>       Targets;                                           // 0x02A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           FiringSockets;                                     // 0x02B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1449[0x28];                                    // 0x02C8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMarinerLevelEventTargetLocation*> SpawnedLocations;                                  // 0x02F0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AMarinerLevelEventTargetLocation*> ShownLocations;                                    // 0x0300(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               ToRotator;                                         // 0x0310(0x000C)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_144A[0x24];                                    // 0x031C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MulticastProjectileFired(const struct FTransform& FiringLocation);
	void OnProjectileFired(const struct FTransform& FiringLocation);
	void OnRep_ToRotator();

	float GetTotalFiringTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSequencedProjectileSpawner">();
	}
	static class AMarinerSequencedProjectileSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerSequencedProjectileSpawner>();
	}
};
static_assert(alignof(AMarinerSequencedProjectileSpawner) == 0x000010, "Wrong alignment on AMarinerSequencedProjectileSpawner");
static_assert(sizeof(AMarinerSequencedProjectileSpawner) == 0x000340, "Wrong size on AMarinerSequencedProjectileSpawner");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, LocationClass) == 0x000268, "Member 'AMarinerSequencedProjectileSpawner::LocationClass' has a wrong offset!");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, ProjectileClass) == 0x000270, "Member 'AMarinerSequencedProjectileSpawner::ProjectileClass' has a wrong offset!");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, DelayBeforeFiring) == 0x000278, "Member 'AMarinerSequencedProjectileSpawner::DelayBeforeFiring' has a wrong offset!");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, DelayTargetToFire) == 0x00027C, "Member 'AMarinerSequencedProjectileSpawner::DelayTargetToFire' has a wrong offset!");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, RocketsPerLocation) == 0x000280, "Member 'AMarinerSequencedProjectileSpawner::RocketsPerLocation' has a wrong offset!");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, DelayBetweenConsecutiveShots) == 0x000284, "Member 'AMarinerSequencedProjectileSpawner::DelayBetweenConsecutiveShots' has a wrong offset!");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, DelayBetweenTargetLocations) == 0x000288, "Member 'AMarinerSequencedProjectileSpawner::DelayBetweenTargetLocations' has a wrong offset!");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, SpawnPointMode) == 0x00028C, "Member 'AMarinerSequencedProjectileSpawner::SpawnPointMode' has a wrong offset!");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, bLookAtTargetLocation) == 0x00028D, "Member 'AMarinerSequencedProjectileSpawner::bLookAtTargetLocation' has a wrong offset!");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, RotationTimeToReset) == 0x000290, "Member 'AMarinerSequencedProjectileSpawner::RotationTimeToReset' has a wrong offset!");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, FireZone) == 0x000298, "Member 'AMarinerSequencedProjectileSpawner::FireZone' has a wrong offset!");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, Targets) == 0x0002A8, "Member 'AMarinerSequencedProjectileSpawner::Targets' has a wrong offset!");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, FiringSockets) == 0x0002B8, "Member 'AMarinerSequencedProjectileSpawner::FiringSockets' has a wrong offset!");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, SpawnedLocations) == 0x0002F0, "Member 'AMarinerSequencedProjectileSpawner::SpawnedLocations' has a wrong offset!");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, ShownLocations) == 0x000300, "Member 'AMarinerSequencedProjectileSpawner::ShownLocations' has a wrong offset!");
static_assert(offsetof(AMarinerSequencedProjectileSpawner, ToRotator) == 0x000310, "Member 'AMarinerSequencedProjectileSpawner::ToRotator' has a wrong offset!");

// Class Mariner.BTDecorator_HasItemWithAbilityTags
// 0x0028 (0x0090 - 0x0068)
class UBTDecorator_HasItemWithAbilityTags final : public UBTDecorator
{
public:
	bool                                          MatchAllTags;                                      // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_144B[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AbilityTags;                                       // 0x0070(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTDecorator_HasItemWithAbilityTags">();
	}
	static class UBTDecorator_HasItemWithAbilityTags* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTDecorator_HasItemWithAbilityTags>();
	}
};
static_assert(alignof(UBTDecorator_HasItemWithAbilityTags) == 0x000008, "Wrong alignment on UBTDecorator_HasItemWithAbilityTags");
static_assert(sizeof(UBTDecorator_HasItemWithAbilityTags) == 0x000090, "Wrong size on UBTDecorator_HasItemWithAbilityTags");
static_assert(offsetof(UBTDecorator_HasItemWithAbilityTags, MatchAllTags) == 0x000068, "Member 'UBTDecorator_HasItemWithAbilityTags::MatchAllTags' has a wrong offset!");
static_assert(offsetof(UBTDecorator_HasItemWithAbilityTags, AbilityTags) == 0x000070, "Member 'UBTDecorator_HasItemWithAbilityTags::AbilityTags' has a wrong offset!");

// Class Mariner.MarinerLayeredButton
// 0x2CC8 (0x2F78 - 0x02B0)
class UMarinerLayeredButton : public UMarinerUserWidget
{
public:
	uint8                                         Pad_144C[0x8];                                     // 0x02B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnSelected;                                        // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPressed;                                         // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnReleased;                                        // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnHovered;                                         // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnUnhovered;                                       // 0x02F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnViewedFlagSet;                                   // 0x0308(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnDoubleClicked;                                   // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EButtonInputState                             EditorPreviewState;                                // 0x0328(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bButtonSelected;                                   // 0x0329(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bButtonEnabled;                                    // 0x032A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsEnabledForBeta;                                 // 0x032B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EButtonContentState                           ContentState;                                      // 0x032C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bButtonInteractable;                               // 0x032D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableGamepadAutoSelect;                          // 0x032E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bClearViewedFlagOnSelection;                       // 0x032F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanReselect;                                      // 0x0330(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanHighlightWhileDisabled;                        // 0x0331(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanSelectWhileDisabled;                           // 0x0332(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerInputActions                          DoubleClickInput;                                  // 0x0333(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_144D[0x4];                                     // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ButtonText;                                        // 0x0338(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	ETextJustify                                  TextJustification;                                 // 0x0350(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_144E[0x7];                                     // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerLayeredButtonTextStates        TextColorStates;                                   // 0x0358(0x0200)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMarinerLayeredButtonTextStates        TextOutlineStates;                                 // 0x0558(0x0200)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   AuxText;                                           // 0x0758(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMarinerLayeredButtonTextStates        AuxTextColorStates;                                // 0x0770(0x0200)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMarinerLayeredButtonTextStates        AuxTextOutlineStates;                              // 0x0970(0x0200)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMarinerLayeredButtonImageStates       BackgroundStates;                                  // 0x0B70(0x0748)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMarinerLayeredButtonImageStates       MaterialStates;                                    // 0x12B8(0x0748)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMarinerLayeredButtonImageStates       IconStates;                                        // 0x1A00(0x0748)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            NormalBrush;                                       // 0x2148(0x0088)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            LockedBrush;                                       // 0x21D0(0x0088)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            EquippedBrush;                                     // 0x2258(0x0088)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            Custom1Brush;                                      // 0x22E0(0x0088)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            Custom2Brush;                                      // 0x2368(0x0088)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            Custom3Brush;                                      // 0x23F0(0x0088)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FMarinerLayeredButtonImageStates       BorderStates;                                      // 0x2478(0x0748)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         bEnableWidthOverride : 1;                          // 0x2BC0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bEnableHeightOverride : 1;                         // 0x2BC0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_144F[0x3];                                     // 0x2BC1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WidthOverride;                                     // 0x2BC4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeightOverride;                                    // 0x2BC8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1450[0x4];                                     // 0x2BCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          OnHoveredSFX;                                      // 0x2BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnUnhoveredSFX;                                    // 0x2BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnClickedSFX;                                      // 0x2BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   MenuStackDescription;                              // 0x2BE8(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   MenuStackDescriptionDisabled;                      // 0x2C00(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1451[0x360];                                   // 0x2C18(0x0360)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CB_Clicked();
	void CB_Hovered(bool bFromKeyboard, bool bFromMouse);
	void CB_HoveredNoParam();
	void CB_Pressed();
	void CB_Released();
	void CB_Selected();
	void CB_Unhovered();
	void ClearHeightOverride();
	void ClearWidthOverride();
	bool GetHeightOverride(float* OutHeight);
	bool GetWidthOverride(float* OutWidth);
	void ResetBackgroundToDefault();
	void ResetBorderToDefault();
	void ResetIconToDefault();
	void ResetMaterialToDefault();
	void ResetToDefaults();
	void SetAuxText(const class FText& Text);
	void SetAuxTextOutlineProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonTextProperties& Properties);
	void SetAuxTextProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonTextProperties& Properties);
	void SetBackgroundAllowed(bool bAllowed);
	void SetBackgroundImageAll(const struct FSlateBrush& Image);
	void SetBackgroundProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonImageProperties& Properties);
	void SetBorderAllowed(bool bAllowed);
	void SetBorderImageAll(const struct FSlateBrush& Image);
	void SetBorderProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonImageProperties& Properties);
	void SetCanHighlightWhileDisabled(bool bInCanHighlight);
	void SetCanSelectWhileDisabled(bool bInCanSelect);
	void SetContentState(EButtonContentState InContentState);
	void SetContentStateBrush(EButtonContentState InContentState, const struct FSlateBrush& InBrush);
	void SetHeightOverride(float Height);
	void SetIconAllowed(bool bAllowed);
	void SetIconImageAll(const struct FSlateBrush& Image);
	void SetIconProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonImageProperties& Properties);
	void SetIsInteractable(bool bInIsInteractable);
	void SetIsSelected(bool bInIsSelected);
	void SetIsViewed(bool bInIsViewed);
	void SetMaterialAllowed(bool bAllowed);
	void SetMaterialImageAll(const struct FSlateBrush& Image);
	void SetMaterialProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonImageProperties& Properties);
	void SetOnHoveredSFX(class UAkAudioEvent* HoveredSFX);
	void SetOnSelectedSFX(class UAkAudioEvent* SelectedSFX);
	void SetOnUnhoveredSFX(class UAkAudioEvent* UnhoveredSFX);
	void SetText(const class FText& Text);
	void SetTextOutlineProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonTextProperties& Properties);
	void SetTextProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonTextProperties& Properties);
	void SetWidthOverride(float Width);

	struct FMarinerLayeredButtonAssets GetAssets() const;
	EButtonContentState GetContentState() const;
	const class FText GetCurrentTooltip() const;
	bool GetIsSelected() const;
	bool GetIsViewed() const;
	class UAkAudioEvent* GetOnClickedSFX() const;
	class UMarinerPromptBanner* GetPromptBanner() const;
	const class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLayeredButton">();
	}
	static class UMarinerLayeredButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLayeredButton>();
	}
};
static_assert(alignof(UMarinerLayeredButton) == 0x000008, "Wrong alignment on UMarinerLayeredButton");
static_assert(sizeof(UMarinerLayeredButton) == 0x002F78, "Wrong size on UMarinerLayeredButton");
static_assert(offsetof(UMarinerLayeredButton, OnSelected) == 0x0002B8, "Member 'UMarinerLayeredButton::OnSelected' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, OnPressed) == 0x0002C8, "Member 'UMarinerLayeredButton::OnPressed' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, OnReleased) == 0x0002D8, "Member 'UMarinerLayeredButton::OnReleased' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, OnHovered) == 0x0002E8, "Member 'UMarinerLayeredButton::OnHovered' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, OnUnhovered) == 0x0002F8, "Member 'UMarinerLayeredButton::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, OnViewedFlagSet) == 0x000308, "Member 'UMarinerLayeredButton::OnViewedFlagSet' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, OnDoubleClicked) == 0x000318, "Member 'UMarinerLayeredButton::OnDoubleClicked' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, EditorPreviewState) == 0x000328, "Member 'UMarinerLayeredButton::EditorPreviewState' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, bButtonSelected) == 0x000329, "Member 'UMarinerLayeredButton::bButtonSelected' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, bButtonEnabled) == 0x00032A, "Member 'UMarinerLayeredButton::bButtonEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, bIsEnabledForBeta) == 0x00032B, "Member 'UMarinerLayeredButton::bIsEnabledForBeta' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, ContentState) == 0x00032C, "Member 'UMarinerLayeredButton::ContentState' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, bButtonInteractable) == 0x00032D, "Member 'UMarinerLayeredButton::bButtonInteractable' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, bEnableGamepadAutoSelect) == 0x00032E, "Member 'UMarinerLayeredButton::bEnableGamepadAutoSelect' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, bClearViewedFlagOnSelection) == 0x00032F, "Member 'UMarinerLayeredButton::bClearViewedFlagOnSelection' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, bCanReselect) == 0x000330, "Member 'UMarinerLayeredButton::bCanReselect' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, bCanHighlightWhileDisabled) == 0x000331, "Member 'UMarinerLayeredButton::bCanHighlightWhileDisabled' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, bCanSelectWhileDisabled) == 0x000332, "Member 'UMarinerLayeredButton::bCanSelectWhileDisabled' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, DoubleClickInput) == 0x000333, "Member 'UMarinerLayeredButton::DoubleClickInput' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, ButtonText) == 0x000338, "Member 'UMarinerLayeredButton::ButtonText' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, TextJustification) == 0x000350, "Member 'UMarinerLayeredButton::TextJustification' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, TextColorStates) == 0x000358, "Member 'UMarinerLayeredButton::TextColorStates' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, TextOutlineStates) == 0x000558, "Member 'UMarinerLayeredButton::TextOutlineStates' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, AuxText) == 0x000758, "Member 'UMarinerLayeredButton::AuxText' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, AuxTextColorStates) == 0x000770, "Member 'UMarinerLayeredButton::AuxTextColorStates' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, AuxTextOutlineStates) == 0x000970, "Member 'UMarinerLayeredButton::AuxTextOutlineStates' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, BackgroundStates) == 0x000B70, "Member 'UMarinerLayeredButton::BackgroundStates' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, MaterialStates) == 0x0012B8, "Member 'UMarinerLayeredButton::MaterialStates' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, IconStates) == 0x001A00, "Member 'UMarinerLayeredButton::IconStates' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, NormalBrush) == 0x002148, "Member 'UMarinerLayeredButton::NormalBrush' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, LockedBrush) == 0x0021D0, "Member 'UMarinerLayeredButton::LockedBrush' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, EquippedBrush) == 0x002258, "Member 'UMarinerLayeredButton::EquippedBrush' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, Custom1Brush) == 0x0022E0, "Member 'UMarinerLayeredButton::Custom1Brush' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, Custom2Brush) == 0x002368, "Member 'UMarinerLayeredButton::Custom2Brush' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, Custom3Brush) == 0x0023F0, "Member 'UMarinerLayeredButton::Custom3Brush' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, BorderStates) == 0x002478, "Member 'UMarinerLayeredButton::BorderStates' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, WidthOverride) == 0x002BC4, "Member 'UMarinerLayeredButton::WidthOverride' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, HeightOverride) == 0x002BC8, "Member 'UMarinerLayeredButton::HeightOverride' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, OnHoveredSFX) == 0x002BD0, "Member 'UMarinerLayeredButton::OnHoveredSFX' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, OnUnhoveredSFX) == 0x002BD8, "Member 'UMarinerLayeredButton::OnUnhoveredSFX' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, OnClickedSFX) == 0x002BE0, "Member 'UMarinerLayeredButton::OnClickedSFX' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, MenuStackDescription) == 0x002BE8, "Member 'UMarinerLayeredButton::MenuStackDescription' has a wrong offset!");
static_assert(offsetof(UMarinerLayeredButton, MenuStackDescriptionDisabled) == 0x002C00, "Member 'UMarinerLayeredButton::MenuStackDescriptionDisabled' has a wrong offset!");

// Class Mariner.MarinerItemLoadResponseButton
// 0x0340 (0x32B8 - 0x2F78)
class UMarinerItemLoadResponseButton : public UMarinerLayeredButton
{
public:
	struct FSlateBrush                            LockBlastPassFreeBrush;                            // 0x2F78(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            LockBlastPassPaidBrush;                            // 0x3000(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            LockRocketBucksBrush;                              // 0x3088(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            LockRocketPartsBrush;                              // 0x3110(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            LockRocketBucksAndPartsBrush;                      // 0x3198(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            LockGenericBrush;                                  // 0x3220(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UItemLoadResponse*                      ItemLoadResponse;                                  // 0x32A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_145D[0x8];                                     // 0x32B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPopulate(class UItemLoadResponse* LoadResponse, class UMarinerCMSItemDataAsset* CMSItem);
	void SetItemData(class UItemLoadResponse* InItemData, bool bInIsEquipped, bool bRanked);

	struct FSlateBrush GetIconBrush(class UItemLoadResponse* LoadResponse, class UMarinerCMSItemDataAsset* CMSItem) const;
	class UItemLoadResponse* GetItemLoadResponse() const;
	struct FMarinerItemLoadResponseAssets GetItemLoadResponseAssets() const;
	class UMarinerCMSItemDataAsset* GetLoadedCMSItemDataAsset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerItemLoadResponseButton">();
	}
	static class UMarinerItemLoadResponseButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerItemLoadResponseButton>();
	}
};
static_assert(alignof(UMarinerItemLoadResponseButton) == 0x000008, "Wrong alignment on UMarinerItemLoadResponseButton");
static_assert(sizeof(UMarinerItemLoadResponseButton) == 0x0032B8, "Wrong size on UMarinerItemLoadResponseButton");
static_assert(offsetof(UMarinerItemLoadResponseButton, LockBlastPassFreeBrush) == 0x002F78, "Member 'UMarinerItemLoadResponseButton::LockBlastPassFreeBrush' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoadResponseButton, LockBlastPassPaidBrush) == 0x003000, "Member 'UMarinerItemLoadResponseButton::LockBlastPassPaidBrush' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoadResponseButton, LockRocketBucksBrush) == 0x003088, "Member 'UMarinerItemLoadResponseButton::LockRocketBucksBrush' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoadResponseButton, LockRocketPartsBrush) == 0x003110, "Member 'UMarinerItemLoadResponseButton::LockRocketPartsBrush' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoadResponseButton, LockRocketBucksAndPartsBrush) == 0x003198, "Member 'UMarinerItemLoadResponseButton::LockRocketBucksAndPartsBrush' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoadResponseButton, LockGenericBrush) == 0x003220, "Member 'UMarinerItemLoadResponseButton::LockGenericBrush' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoadResponseButton, ItemLoadResponse) == 0x0032A8, "Member 'UMarinerItemLoadResponseButton::ItemLoadResponse' has a wrong offset!");

// Class Mariner.MarinerArtifactInfoWidget
// 0x0080 (0x3338 - 0x32B8)
class UMarinerArtifactInfoWidget : public UMarinerItemLoadResponseButton
{
public:
	class UMarinerArtifactImage*                  Bound_ArtifactImage;                               // 0x32B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_ArtifactLockedImage;                         // 0x32C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UProgressBar*                           Bound_ProgressBarArtifactLevel1;                   // 0x32C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UProgressBar*                           Bound_ProgressBarArtifactLevel2;                   // 0x32D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UProgressBar*                           Bound_ProgressBarArtifactLevel3;                   // 0x32D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextArtifactName;                            // 0x32E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextDescription;                             // 0x32E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextLabelRanked;                             // 0x32F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextLabelLevel;                              // 0x32F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextArtifactLevel;                           // 0x3300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_ArtifactLockedText;                          // 0x3308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_ImageRanked;                                 // 0x3310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_DividerImage;                                // 0x3318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerArtifactDataAsset*              LoadedArtifact;                                    // 0x3320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_145F[0x10];                                    // 0x3328(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerArtifactInfoWidget">();
	}
	static class UMarinerArtifactInfoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerArtifactInfoWidget>();
	}
};
static_assert(alignof(UMarinerArtifactInfoWidget) == 0x000008, "Wrong alignment on UMarinerArtifactInfoWidget");
static_assert(sizeof(UMarinerArtifactInfoWidget) == 0x003338, "Wrong size on UMarinerArtifactInfoWidget");
static_assert(offsetof(UMarinerArtifactInfoWidget, Bound_ArtifactImage) == 0x0032B8, "Member 'UMarinerArtifactInfoWidget::Bound_ArtifactImage' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoWidget, Bound_ArtifactLockedImage) == 0x0032C0, "Member 'UMarinerArtifactInfoWidget::Bound_ArtifactLockedImage' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoWidget, Bound_ProgressBarArtifactLevel1) == 0x0032C8, "Member 'UMarinerArtifactInfoWidget::Bound_ProgressBarArtifactLevel1' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoWidget, Bound_ProgressBarArtifactLevel2) == 0x0032D0, "Member 'UMarinerArtifactInfoWidget::Bound_ProgressBarArtifactLevel2' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoWidget, Bound_ProgressBarArtifactLevel3) == 0x0032D8, "Member 'UMarinerArtifactInfoWidget::Bound_ProgressBarArtifactLevel3' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoWidget, Bound_TextArtifactName) == 0x0032E0, "Member 'UMarinerArtifactInfoWidget::Bound_TextArtifactName' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoWidget, Bound_TextDescription) == 0x0032E8, "Member 'UMarinerArtifactInfoWidget::Bound_TextDescription' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoWidget, Bound_TextLabelRanked) == 0x0032F0, "Member 'UMarinerArtifactInfoWidget::Bound_TextLabelRanked' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoWidget, Bound_TextLabelLevel) == 0x0032F8, "Member 'UMarinerArtifactInfoWidget::Bound_TextLabelLevel' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoWidget, Bound_TextArtifactLevel) == 0x003300, "Member 'UMarinerArtifactInfoWidget::Bound_TextArtifactLevel' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoWidget, Bound_ArtifactLockedText) == 0x003308, "Member 'UMarinerArtifactInfoWidget::Bound_ArtifactLockedText' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoWidget, Bound_ImageRanked) == 0x003310, "Member 'UMarinerArtifactInfoWidget::Bound_ImageRanked' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoWidget, Bound_DividerImage) == 0x003318, "Member 'UMarinerArtifactInfoWidget::Bound_DividerImage' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoWidget, LoadedArtifact) == 0x003320, "Member 'UMarinerArtifactInfoWidget::LoadedArtifact' has a wrong offset!");

// Class Mariner.BTDecorator_HasLoSTo
// 0x0028 (0x0090 - 0x0068)
class UBTDecorator_HasLoSTo final : public UBTDecorator
{
public:
	struct FBlackboardKeySelector                 EnemyKey;                                          // 0x0068(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTDecorator_HasLoSTo">();
	}
	static class UBTDecorator_HasLoSTo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTDecorator_HasLoSTo>();
	}
};
static_assert(alignof(UBTDecorator_HasLoSTo) == 0x000008, "Wrong alignment on UBTDecorator_HasLoSTo");
static_assert(sizeof(UBTDecorator_HasLoSTo) == 0x000090, "Wrong size on UBTDecorator_HasLoSTo");
static_assert(offsetof(UBTDecorator_HasLoSTo, EnemyKey) == 0x000068, "Member 'UBTDecorator_HasLoSTo::EnemyKey' has a wrong offset!");

// Class Mariner.BTDecorator_IsInAir
// 0x0000 (0x0068 - 0x0068)
class UBTDecorator_IsInAir final : public UBTDecorator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTDecorator_IsInAir">();
	}
	static class UBTDecorator_IsInAir* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTDecorator_IsInAir>();
	}
};
static_assert(alignof(UBTDecorator_IsInAir) == 0x000008, "Wrong alignment on UBTDecorator_IsInAir");
static_assert(sizeof(UBTDecorator_IsInAir) == 0x000068, "Wrong size on UBTDecorator_IsInAir");

// Class Mariner.MarinerBasePrompt
// 0x0128 (0x03D8 - 0x02B0)
class UMarinerBasePrompt : public UMarinerUserWidget
{
public:
	uint8                                         Pad_1460[0x118];                                   // 0x02B0(0x0118)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          HighlightSFX;                                      // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          SelectSFX;                                         // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBasePrompt">();
	}
	static class UMarinerBasePrompt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerBasePrompt>();
	}
};
static_assert(alignof(UMarinerBasePrompt) == 0x000008, "Wrong alignment on UMarinerBasePrompt");
static_assert(sizeof(UMarinerBasePrompt) == 0x0003D8, "Wrong size on UMarinerBasePrompt");
static_assert(offsetof(UMarinerBasePrompt, HighlightSFX) == 0x0003C8, "Member 'UMarinerBasePrompt::HighlightSFX' has a wrong offset!");
static_assert(offsetof(UMarinerBasePrompt, SelectSFX) == 0x0003D0, "Member 'UMarinerBasePrompt::SelectSFX' has a wrong offset!");

// Class Mariner.MarinerGamepadPrompt
// 0x0000 (0x03D8 - 0x03D8)
class UMarinerGamepadPrompt : public UMarinerBasePrompt
{
public:
	struct FMarinerGamepadPromptAssets GetPromptAssets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGamepadPrompt">();
	}
	static class UMarinerGamepadPrompt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGamepadPrompt>();
	}
};
static_assert(alignof(UMarinerGamepadPrompt) == 0x000008, "Wrong alignment on UMarinerGamepadPrompt");
static_assert(sizeof(UMarinerGamepadPrompt) == 0x0003D8, "Wrong size on UMarinerGamepadPrompt");

// Class Mariner.BTTask_MarinerRunEQSQuery
// 0x0008 (0x0158 - 0x0150)
class UBTTask_MarinerRunEQSQuery final : public UBTTask_RunEQSQuery
{
public:
	bool                                          bClearBlackboardKeyOnFail;                         // 0x0150(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1461[0x7];                                     // 0x0151(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_MarinerRunEQSQuery">();
	}
	static class UBTTask_MarinerRunEQSQuery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_MarinerRunEQSQuery>();
	}
};
static_assert(alignof(UBTTask_MarinerRunEQSQuery) == 0x000008, "Wrong alignment on UBTTask_MarinerRunEQSQuery");
static_assert(sizeof(UBTTask_MarinerRunEQSQuery) == 0x000158, "Wrong size on UBTTask_MarinerRunEQSQuery");
static_assert(offsetof(UBTTask_MarinerRunEQSQuery, bClearBlackboardKeyOnFail) == 0x000150, "Member 'UBTTask_MarinerRunEQSQuery::bClearBlackboardKeyOnFail' has a wrong offset!");

// Class Mariner.BTDecorator_IsOnNavmesh
// 0x0000 (0x0068 - 0x0068)
class UBTDecorator_IsOnNavmesh final : public UBTDecorator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTDecorator_IsOnNavmesh">();
	}
	static class UBTDecorator_IsOnNavmesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTDecorator_IsOnNavmesh>();
	}
};
static_assert(alignof(UBTDecorator_IsOnNavmesh) == 0x000008, "Wrong alignment on UBTDecorator_IsOnNavmesh");
static_assert(sizeof(UBTDecorator_IsOnNavmesh) == 0x000068, "Wrong size on UBTDecorator_IsOnNavmesh");

// Class Mariner.MarinerAbilitySkinData_Base
// 0x0000 (0x0030 - 0x0030)
class UMarinerAbilitySkinData_Base : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbilitySkinData_Base">();
	}
	static class UMarinerAbilitySkinData_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbilitySkinData_Base>();
	}
};
static_assert(alignof(UMarinerAbilitySkinData_Base) == 0x000008, "Wrong alignment on UMarinerAbilitySkinData_Base");
static_assert(sizeof(UMarinerAbilitySkinData_Base) == 0x000030, "Wrong size on UMarinerAbilitySkinData_Base");

// Class Mariner.MarinerAbilitySkinData_ProjectileBase
// 0x0000 (0x0030 - 0x0030)
class UMarinerAbilitySkinData_ProjectileBase : public UMarinerAbilitySkinData_Base
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbilitySkinData_ProjectileBase">();
	}
	static class UMarinerAbilitySkinData_ProjectileBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbilitySkinData_ProjectileBase>();
	}
};
static_assert(alignof(UMarinerAbilitySkinData_ProjectileBase) == 0x000008, "Wrong alignment on UMarinerAbilitySkinData_ProjectileBase");
static_assert(sizeof(UMarinerAbilitySkinData_ProjectileBase) == 0x000030, "Wrong size on UMarinerAbilitySkinData_ProjectileBase");

// Class Mariner.MangoVoiceChatManager
// 0x0148 (0x0188 - 0x0040)
class UMangoVoiceChatManager final : public UMangoBaseManager
{
public:
	uint8                                         Pad_1462[0x148];                                   // 0x0040(0x0148)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCanCommunicateOnlineUpdated();
	void OnUserSettingsChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoVoiceChatManager">();
	}
	static class UMangoVoiceChatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoVoiceChatManager>();
	}
};
static_assert(alignof(UMangoVoiceChatManager) == 0x000008, "Wrong alignment on UMangoVoiceChatManager");
static_assert(sizeof(UMangoVoiceChatManager) == 0x000188, "Wrong size on UMangoVoiceChatManager");

// Class Mariner.MarinerArenaReturnTarget
// 0x0070 (0x0288 - 0x0218)
class AMarinerArenaReturnTarget final : public AActor
{
public:
	TSet<class AMarinerArenaReturnZone*>          AssociatedReturnZones;                             // 0x0218(0x0050)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AMarinerCharacter>       CharacterCurrentlyReturningHere;                   // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ReturnTargetFlags;                                 // 0x0270(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1463[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       CollisionSphere;                                   // 0x0278(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBillboardComponent*                    EditorSpriteComponent;                             // 0x0280(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex);

	class AMarinerCharacter* GetClosestCharacterOnTeam(int32 TeamIndex) const;
	struct FRotator GetReturnOrientation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerArenaReturnTarget">();
	}
	static class AMarinerArenaReturnTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerArenaReturnTarget>();
	}
};
static_assert(alignof(AMarinerArenaReturnTarget) == 0x000008, "Wrong alignment on AMarinerArenaReturnTarget");
static_assert(sizeof(AMarinerArenaReturnTarget) == 0x000288, "Wrong size on AMarinerArenaReturnTarget");
static_assert(offsetof(AMarinerArenaReturnTarget, AssociatedReturnZones) == 0x000218, "Member 'AMarinerArenaReturnTarget::AssociatedReturnZones' has a wrong offset!");
static_assert(offsetof(AMarinerArenaReturnTarget, CharacterCurrentlyReturningHere) == 0x000268, "Member 'AMarinerArenaReturnTarget::CharacterCurrentlyReturningHere' has a wrong offset!");
static_assert(offsetof(AMarinerArenaReturnTarget, ReturnTargetFlags) == 0x000270, "Member 'AMarinerArenaReturnTarget::ReturnTargetFlags' has a wrong offset!");
static_assert(offsetof(AMarinerArenaReturnTarget, CollisionSphere) == 0x000278, "Member 'AMarinerArenaReturnTarget::CollisionSphere' has a wrong offset!");
static_assert(offsetof(AMarinerArenaReturnTarget, EditorSpriteComponent) == 0x000280, "Member 'AMarinerArenaReturnTarget::EditorSpriteComponent' has a wrong offset!");

// Class Mariner.BTDecorator_MarinerCheckGameplayTagsOnActor
// 0x00B0 (0x0118 - 0x0068)
class UBTDecorator_MarinerCheckGameplayTagsOnActor final : public UBTDecorator
{
public:
	struct FBlackboardKeySelector                 ActorToCheck;                                      // 0x0068(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	EGameplayContainerMatchType                   TagsToMatch;                                       // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1467[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0098(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	class FString                                 CachedDescription;                                 // 0x00B8(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UBehaviorTreeComponent*, struct FTagBindingCollection> GameplayTagListenMap;                              // 0x00C8(0x0050)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void OnGameplayTagCountChanged(const struct FGameplayTag& GameplayTag, int32 Count, class UBehaviorTreeComponent* OwnerComp);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTDecorator_MarinerCheckGameplayTagsOnActor">();
	}
	static class UBTDecorator_MarinerCheckGameplayTagsOnActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTDecorator_MarinerCheckGameplayTagsOnActor>();
	}
};
static_assert(alignof(UBTDecorator_MarinerCheckGameplayTagsOnActor) == 0x000008, "Wrong alignment on UBTDecorator_MarinerCheckGameplayTagsOnActor");
static_assert(sizeof(UBTDecorator_MarinerCheckGameplayTagsOnActor) == 0x000118, "Wrong size on UBTDecorator_MarinerCheckGameplayTagsOnActor");
static_assert(offsetof(UBTDecorator_MarinerCheckGameplayTagsOnActor, ActorToCheck) == 0x000068, "Member 'UBTDecorator_MarinerCheckGameplayTagsOnActor::ActorToCheck' has a wrong offset!");
static_assert(offsetof(UBTDecorator_MarinerCheckGameplayTagsOnActor, TagsToMatch) == 0x000090, "Member 'UBTDecorator_MarinerCheckGameplayTagsOnActor::TagsToMatch' has a wrong offset!");
static_assert(offsetof(UBTDecorator_MarinerCheckGameplayTagsOnActor, GameplayTags) == 0x000098, "Member 'UBTDecorator_MarinerCheckGameplayTagsOnActor::GameplayTags' has a wrong offset!");
static_assert(offsetof(UBTDecorator_MarinerCheckGameplayTagsOnActor, CachedDescription) == 0x0000B8, "Member 'UBTDecorator_MarinerCheckGameplayTagsOnActor::CachedDescription' has a wrong offset!");
static_assert(offsetof(UBTDecorator_MarinerCheckGameplayTagsOnActor, GameplayTagListenMap) == 0x0000C8, "Member 'UBTDecorator_MarinerCheckGameplayTagsOnActor::GameplayTagListenMap' has a wrong offset!");

// Class Mariner.BTTask_RocketJump
// 0x0000 (0x0070 - 0x0070)
class UBTTask_RocketJump final : public UBTTaskNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_RocketJump">();
	}
	static class UBTTask_RocketJump* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_RocketJump>();
	}
};
static_assert(alignof(UBTTask_RocketJump) == 0x000008, "Wrong alignment on UBTTask_RocketJump");
static_assert(sizeof(UBTTask_RocketJump) == 0x000070, "Wrong size on UBTTask_RocketJump");

// Class Mariner.BTService_DodgeIncomingProjectiles
// 0x0048 (0x00B8 - 0x0070)
class UBTService_DodgeIncomingProjectiles final : public UBTService
{
public:
	struct FGameplayTagContainer                  SuppressionTags;                                   // 0x0070(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<EMarinerInputActions>                  DodgeActions;                                      // 0x0090(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         SearchLerpTowardsEnemy;                            // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SearchRadius;                                      // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaximumIncomingAngle;                              // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             ChannelToQuery;                                    // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         FastCollectionToQuery;                             // 0x00AD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1469[0xA];                                     // 0x00AE(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTService_DodgeIncomingProjectiles">();
	}
	static class UBTService_DodgeIncomingProjectiles* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTService_DodgeIncomingProjectiles>();
	}
};
static_assert(alignof(UBTService_DodgeIncomingProjectiles) == 0x000008, "Wrong alignment on UBTService_DodgeIncomingProjectiles");
static_assert(sizeof(UBTService_DodgeIncomingProjectiles) == 0x0000B8, "Wrong size on UBTService_DodgeIncomingProjectiles");
static_assert(offsetof(UBTService_DodgeIncomingProjectiles, SuppressionTags) == 0x000070, "Member 'UBTService_DodgeIncomingProjectiles::SuppressionTags' has a wrong offset!");
static_assert(offsetof(UBTService_DodgeIncomingProjectiles, DodgeActions) == 0x000090, "Member 'UBTService_DodgeIncomingProjectiles::DodgeActions' has a wrong offset!");
static_assert(offsetof(UBTService_DodgeIncomingProjectiles, SearchLerpTowardsEnemy) == 0x0000A0, "Member 'UBTService_DodgeIncomingProjectiles::SearchLerpTowardsEnemy' has a wrong offset!");
static_assert(offsetof(UBTService_DodgeIncomingProjectiles, SearchRadius) == 0x0000A4, "Member 'UBTService_DodgeIncomingProjectiles::SearchRadius' has a wrong offset!");
static_assert(offsetof(UBTService_DodgeIncomingProjectiles, MaximumIncomingAngle) == 0x0000A8, "Member 'UBTService_DodgeIncomingProjectiles::MaximumIncomingAngle' has a wrong offset!");
static_assert(offsetof(UBTService_DodgeIncomingProjectiles, ChannelToQuery) == 0x0000AC, "Member 'UBTService_DodgeIncomingProjectiles::ChannelToQuery' has a wrong offset!");
static_assert(offsetof(UBTService_DodgeIncomingProjectiles, FastCollectionToQuery) == 0x0000AD, "Member 'UBTService_DodgeIncomingProjectiles::FastCollectionToQuery' has a wrong offset!");

// Class Mariner.MarinerAbilitySkinData_ProjectileGeneral
// 0x0040 (0x0070 - 0x0030)
class UMarinerAbilitySkinData_ProjectileGeneral : public UMarinerAbilitySkinData_ProjectileBase
{
public:
	class UStaticMesh*                            ProjectileMesh;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMaterialOverride>              MeshMaterialOverrides;                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UParticleSystem*                        TrailVFX;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        DirectHitVFX;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        AreaHitVFX;                                        // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AreaHitSFX;                                        // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          DirectHitSFX;                                      // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbilitySkinData_ProjectileGeneral">();
	}
	static class UMarinerAbilitySkinData_ProjectileGeneral* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbilitySkinData_ProjectileGeneral>();
	}
};
static_assert(alignof(UMarinerAbilitySkinData_ProjectileGeneral) == 0x000008, "Wrong alignment on UMarinerAbilitySkinData_ProjectileGeneral");
static_assert(sizeof(UMarinerAbilitySkinData_ProjectileGeneral) == 0x000070, "Wrong size on UMarinerAbilitySkinData_ProjectileGeneral");
static_assert(offsetof(UMarinerAbilitySkinData_ProjectileGeneral, ProjectileMesh) == 0x000030, "Member 'UMarinerAbilitySkinData_ProjectileGeneral::ProjectileMesh' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_ProjectileGeneral, MeshMaterialOverrides) == 0x000038, "Member 'UMarinerAbilitySkinData_ProjectileGeneral::MeshMaterialOverrides' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_ProjectileGeneral, TrailVFX) == 0x000048, "Member 'UMarinerAbilitySkinData_ProjectileGeneral::TrailVFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_ProjectileGeneral, DirectHitVFX) == 0x000050, "Member 'UMarinerAbilitySkinData_ProjectileGeneral::DirectHitVFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_ProjectileGeneral, AreaHitVFX) == 0x000058, "Member 'UMarinerAbilitySkinData_ProjectileGeneral::AreaHitVFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_ProjectileGeneral, AreaHitSFX) == 0x000060, "Member 'UMarinerAbilitySkinData_ProjectileGeneral::AreaHitSFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_ProjectileGeneral, DirectHitSFX) == 0x000068, "Member 'UMarinerAbilitySkinData_ProjectileGeneral::DirectHitSFX' has a wrong offset!");

// Class Mariner.MarinerAbilitySkinData_ProjectileHoming
// 0x0008 (0x0078 - 0x0070)
class UMarinerAbilitySkinData_ProjectileHoming final : public UMarinerAbilitySkinData_ProjectileGeneral
{
public:
	class UParticleSystem*                        HomingTrailVFX;                                    // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbilitySkinData_ProjectileHoming">();
	}
	static class UMarinerAbilitySkinData_ProjectileHoming* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbilitySkinData_ProjectileHoming>();
	}
};
static_assert(alignof(UMarinerAbilitySkinData_ProjectileHoming) == 0x000008, "Wrong alignment on UMarinerAbilitySkinData_ProjectileHoming");
static_assert(sizeof(UMarinerAbilitySkinData_ProjectileHoming) == 0x000078, "Wrong size on UMarinerAbilitySkinData_ProjectileHoming");
static_assert(offsetof(UMarinerAbilitySkinData_ProjectileHoming, HomingTrailVFX) == 0x000070, "Member 'UMarinerAbilitySkinData_ProjectileHoming::HomingTrailVFX' has a wrong offset!");

// Class Mariner.MarinerMegaBlastDirectorVolumeManager
// 0x0010 (0x0038 - 0x0028)
class UMarinerMegaBlastDirectorVolumeManager final : public UObject
{
public:
	TArray<class AMarinerMegaBlastDirectorVolume*> MegaBlastDirectorVolumes;                          // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMegaBlastDirectorVolumeManager">();
	}
	static class UMarinerMegaBlastDirectorVolumeManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMegaBlastDirectorVolumeManager>();
	}
};
static_assert(alignof(UMarinerMegaBlastDirectorVolumeManager) == 0x000008, "Wrong alignment on UMarinerMegaBlastDirectorVolumeManager");
static_assert(sizeof(UMarinerMegaBlastDirectorVolumeManager) == 0x000038, "Wrong size on UMarinerMegaBlastDirectorVolumeManager");
static_assert(offsetof(UMarinerMegaBlastDirectorVolumeManager, MegaBlastDirectorVolumes) == 0x000028, "Member 'UMarinerMegaBlastDirectorVolumeManager::MegaBlastDirectorVolumes' has a wrong offset!");

// Class Mariner.MangoQuestManager
// 0x0158 (0x0198 - 0x0040)
class UMangoQuestManager final : public UMangoBaseManager
{
public:
	UMulticastInlineDelegateProperty_             OnGetQuestsCompleted_BP;                           // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnDeleteQuests_BP;                                 // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnQuestLoginSetRewardCompleted_BP;                 // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnQuestDismissStarted_BP;                          // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnQuestDismissCompleted_BP;                        // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnQuestClaimStarted_BP;                            // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnQuestClaimCompleted_BP;                          // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnUnclaimedQuestRewardsUpdated_BP;                 // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_146A[0xD8];                                    // 0x00C0(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMangoQuestManager* Get(const class UObject* WorldContextObject);

	void ClaimQuestReward(const EMangoQuestSlot SlotId);
	void DeleteQuests();
	void DismissQuestSlot(const EMangoQuestSlot SlotId);
	bool GetLoginQuestSelectedReward(struct FMangoLoginReward* OutLoginReward);
	struct FMangoQuestDescription GetQuestDescriptionBySlotId(const EMangoQuestSlot SlotId);
	bool GetQuestReward(const EMangoQuestSlot SlotId, struct FMangoQuestReward* OutReward);
	void SetLoginQuestSelectedReward(const class FName& RewardId);
	void SetNeedsRefresh();

	const TArray<struct FMangoQuestDescription> GetQuests() const;
	bool HasUnclaimedQuestRewards() const;
	bool IsQuestSlotBeingDismissed(const EMangoQuestSlot SlotId) const;
	bool IsQuestSlotRewardBeingClaimed(const EMangoQuestSlot SlotId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoQuestManager">();
	}
	static class UMangoQuestManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoQuestManager>();
	}
};
static_assert(alignof(UMangoQuestManager) == 0x000008, "Wrong alignment on UMangoQuestManager");
static_assert(sizeof(UMangoQuestManager) == 0x000198, "Wrong size on UMangoQuestManager");
static_assert(offsetof(UMangoQuestManager, OnGetQuestsCompleted_BP) == 0x000040, "Member 'UMangoQuestManager::OnGetQuestsCompleted_BP' has a wrong offset!");
static_assert(offsetof(UMangoQuestManager, OnDeleteQuests_BP) == 0x000050, "Member 'UMangoQuestManager::OnDeleteQuests_BP' has a wrong offset!");
static_assert(offsetof(UMangoQuestManager, OnQuestLoginSetRewardCompleted_BP) == 0x000060, "Member 'UMangoQuestManager::OnQuestLoginSetRewardCompleted_BP' has a wrong offset!");
static_assert(offsetof(UMangoQuestManager, OnQuestDismissStarted_BP) == 0x000070, "Member 'UMangoQuestManager::OnQuestDismissStarted_BP' has a wrong offset!");
static_assert(offsetof(UMangoQuestManager, OnQuestDismissCompleted_BP) == 0x000080, "Member 'UMangoQuestManager::OnQuestDismissCompleted_BP' has a wrong offset!");
static_assert(offsetof(UMangoQuestManager, OnQuestClaimStarted_BP) == 0x000090, "Member 'UMangoQuestManager::OnQuestClaimStarted_BP' has a wrong offset!");
static_assert(offsetof(UMangoQuestManager, OnQuestClaimCompleted_BP) == 0x0000A0, "Member 'UMangoQuestManager::OnQuestClaimCompleted_BP' has a wrong offset!");
static_assert(offsetof(UMangoQuestManager, OnUnclaimedQuestRewardsUpdated_BP) == 0x0000B0, "Member 'UMangoQuestManager::OnUnclaimedQuestRewardsUpdated_BP' has a wrong offset!");

// Class Mariner.MarinerAnimatedWidget
// 0x0168 (0x0418 - 0x02B0)
class UMarinerAnimatedWidget : public UMarinerUserWidget
{
public:
	UMulticastInlineDelegateProperty_             OnInterpolationProgress;                           // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAnimationStateChange;                            // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bStartOn;                                          // 0x02D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_146F[0x1];                                     // 0x02D1(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAutomaticVisibility;                              // 0x02D2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMustPopulateWhileOff;                             // 0x02D3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnimationInDelay;                                  // 0x02D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnimationInDuration;                               // 0x02D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnimationOnDuration;                               // 0x02DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnimationOutDelay;                                 // 0x02E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnimationOutDuration;                              // 0x02E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FInterpolationParameters               AnimationOnParameters;                             // 0x02E8(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FInterpolationParameters               AnimationOffParameters;                            // 0x0314(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OffAudioEvent;                                     // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          AnimatingInAudioEvent;                             // 0x0348(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnAudioEvent;                                      // 0x0350(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          AnimatingOutAudioEvent;                            // 0x0358(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDebugPrintToLog;                                  // 0x0360(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1470[0xB7];                                    // 0x0361(0x00B7)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearActiveOrNextAnimateOutDelay(bool bClear);
	bool Populate();
	void SetAnimationOffParameters(const struct FInterpolationParameters& OffParameters);
	void SetAnimationOnParameters(const struct FInterpolationParameters& OnParameters);
	void SetForcedOn(bool bEnabled);
	bool SetOnTimerCompleted(float OutDurationOverride);
	void SetWidgetAnimationDirty(float OnDurationOverride, float OutDurationOverride);

	bool GetWidgetActive() const;
	EWidgetAnimationState GetWidgetAnimationState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAnimatedWidget">();
	}
	static class UMarinerAnimatedWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAnimatedWidget>();
	}
};
static_assert(alignof(UMarinerAnimatedWidget) == 0x000008, "Wrong alignment on UMarinerAnimatedWidget");
static_assert(sizeof(UMarinerAnimatedWidget) == 0x000418, "Wrong size on UMarinerAnimatedWidget");
static_assert(offsetof(UMarinerAnimatedWidget, OnInterpolationProgress) == 0x0002B0, "Member 'UMarinerAnimatedWidget::OnInterpolationProgress' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, OnAnimationStateChange) == 0x0002C0, "Member 'UMarinerAnimatedWidget::OnAnimationStateChange' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, bStartOn) == 0x0002D0, "Member 'UMarinerAnimatedWidget::bStartOn' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, bAutomaticVisibility) == 0x0002D2, "Member 'UMarinerAnimatedWidget::bAutomaticVisibility' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, bMustPopulateWhileOff) == 0x0002D3, "Member 'UMarinerAnimatedWidget::bMustPopulateWhileOff' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, AnimationInDelay) == 0x0002D4, "Member 'UMarinerAnimatedWidget::AnimationInDelay' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, AnimationInDuration) == 0x0002D8, "Member 'UMarinerAnimatedWidget::AnimationInDuration' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, AnimationOnDuration) == 0x0002DC, "Member 'UMarinerAnimatedWidget::AnimationOnDuration' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, AnimationOutDelay) == 0x0002E0, "Member 'UMarinerAnimatedWidget::AnimationOutDelay' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, AnimationOutDuration) == 0x0002E4, "Member 'UMarinerAnimatedWidget::AnimationOutDuration' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, AnimationOnParameters) == 0x0002E8, "Member 'UMarinerAnimatedWidget::AnimationOnParameters' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, AnimationOffParameters) == 0x000314, "Member 'UMarinerAnimatedWidget::AnimationOffParameters' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, OffAudioEvent) == 0x000340, "Member 'UMarinerAnimatedWidget::OffAudioEvent' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, AnimatingInAudioEvent) == 0x000348, "Member 'UMarinerAnimatedWidget::AnimatingInAudioEvent' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, OnAudioEvent) == 0x000350, "Member 'UMarinerAnimatedWidget::OnAudioEvent' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, AnimatingOutAudioEvent) == 0x000358, "Member 'UMarinerAnimatedWidget::AnimatingOutAudioEvent' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedWidget, bDebugPrintToLog) == 0x000360, "Member 'UMarinerAnimatedWidget::bDebugPrintToLog' has a wrong offset!");

// Class Mariner.MarinerMenuStackLayer
// 0x00A8 (0x04C0 - 0x0418)
class UMarinerMenuStackLayer : public UMarinerAnimatedWidget
{
public:
	class FName                                   LayerName;                                         // 0x0418(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   LayerDescription;                                  // 0x0420(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMarinerPromptData>             LayerPrompts;                                      // 0x0438(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bRequiresCursor;                                   // 0x0448(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowBack;                                        // 0x0449(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOverlay;                                        // 0x044A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowMenuBackground;                              // 0x044B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1472[0x4];                                     // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                CustomBackground;                                  // 0x0450(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bAllowInGameMenuBackgroundEnabled : 1;             // 0x0458(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1473[0x3];                                     // 0x0459(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAllowInGameMenuBackground;                        // 0x045C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowPlayerHeader;                                // 0x045D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowSkipInSequence;                              // 0x045E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1474[0x1];                                     // 0x045F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerMenuStackBaseWidget> StackBaseWidgetOverride;                           // 0x0460(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMenuStackBaseWidget> InGameStackBaseWidgetOverride;                     // 0x0468(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ACameraActor>               DesiredCameraType;                                 // 0x0470(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FViewTargetTransitionParams            BlendParams;                                       // 0x0478(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bCameraBlendOutEnabled;                            // 0x0488(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1475[0x7];                                     // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          LayerEnteredSFX;                                   // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          LayerExitedSFX;                                    // 0x0498(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          LayerMusicSFX;                                     // 0x04A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1476[0x18];                                    // 0x04A8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddHostPrompt(const struct FMarinerPromptData& PromptData);
	bool ApplyLayerCamera();
	void BP_OnBeginExit();
	void BP_OnEntered(bool bFromSubMenu);
	void BP_OnExited(bool bToSubLayer);
	void ClearHostCustomTooltip();
	bool ClearHostPrompts();
	class UMarinerStackHeader* GetHostStackHeader();
	void OnChildHighlightChanged();
	void OnCMSLoaded();
	bool RemoveSelf();
	void ScrollHostToStart();
	void SetHostCustomTooltip(const class FText& ToolTip);
	void SetLayerTooltip(const class FText& ToolTip);
	void SetMenuBackgroundAllowed(bool bAllowed);

	bool IsActive() const;
	bool ShouldShowPrompts() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMenuStackLayer">();
	}
	static class UMarinerMenuStackLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMenuStackLayer>();
	}
};
static_assert(alignof(UMarinerMenuStackLayer) == 0x000008, "Wrong alignment on UMarinerMenuStackLayer");
static_assert(sizeof(UMarinerMenuStackLayer) == 0x0004C0, "Wrong size on UMarinerMenuStackLayer");
static_assert(offsetof(UMarinerMenuStackLayer, LayerName) == 0x000418, "Member 'UMarinerMenuStackLayer::LayerName' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, LayerDescription) == 0x000420, "Member 'UMarinerMenuStackLayer::LayerDescription' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, LayerPrompts) == 0x000438, "Member 'UMarinerMenuStackLayer::LayerPrompts' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, bRequiresCursor) == 0x000448, "Member 'UMarinerMenuStackLayer::bRequiresCursor' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, bAllowBack) == 0x000449, "Member 'UMarinerMenuStackLayer::bAllowBack' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, bIsOverlay) == 0x00044A, "Member 'UMarinerMenuStackLayer::bIsOverlay' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, bAllowMenuBackground) == 0x00044B, "Member 'UMarinerMenuStackLayer::bAllowMenuBackground' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, CustomBackground) == 0x000450, "Member 'UMarinerMenuStackLayer::CustomBackground' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, bAllowInGameMenuBackground) == 0x00045C, "Member 'UMarinerMenuStackLayer::bAllowInGameMenuBackground' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, bAllowPlayerHeader) == 0x00045D, "Member 'UMarinerMenuStackLayer::bAllowPlayerHeader' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, bAllowSkipInSequence) == 0x00045E, "Member 'UMarinerMenuStackLayer::bAllowSkipInSequence' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, StackBaseWidgetOverride) == 0x000460, "Member 'UMarinerMenuStackLayer::StackBaseWidgetOverride' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, InGameStackBaseWidgetOverride) == 0x000468, "Member 'UMarinerMenuStackLayer::InGameStackBaseWidgetOverride' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, DesiredCameraType) == 0x000470, "Member 'UMarinerMenuStackLayer::DesiredCameraType' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, BlendParams) == 0x000478, "Member 'UMarinerMenuStackLayer::BlendParams' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, bCameraBlendOutEnabled) == 0x000488, "Member 'UMarinerMenuStackLayer::bCameraBlendOutEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, LayerEnteredSFX) == 0x000490, "Member 'UMarinerMenuStackLayer::LayerEnteredSFX' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, LayerExitedSFX) == 0x000498, "Member 'UMarinerMenuStackLayer::LayerExitedSFX' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackLayer, LayerMusicSFX) == 0x0004A0, "Member 'UMarinerMenuStackLayer::LayerMusicSFX' has a wrong offset!");

// Class Mariner.MarinerMenu
// 0x0020 (0x04E0 - 0x04C0)
class UMarinerMenu : public UMarinerMenuStackLayer
{
public:
	uint8                                         Pad_1478[0x20];                                    // 0x04C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMenu">();
	}
	static class UMarinerMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMenu>();
	}
};
static_assert(alignof(UMarinerMenu) == 0x000008, "Wrong alignment on UMarinerMenu");
static_assert(sizeof(UMarinerMenu) == 0x0004E0, "Wrong size on UMarinerMenu");

// Class Mariner.MarinerSettingMenuBase
// 0x0018 (0x04F8 - 0x04E0)
class UMarinerSettingMenuBase : public UMarinerMenu
{
public:
	bool                                          bAddRestoreDefaultsPrompt;                         // 0x04E0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1479[0x17];                                    // 0x04E1(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCanUserCrossPlayUpdated();
	void OnFullScreenToggled(bool bFullScreen);
	void UpdatePrompts();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSettingMenuBase">();
	}
	static class UMarinerSettingMenuBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSettingMenuBase>();
	}
};
static_assert(alignof(UMarinerSettingMenuBase) == 0x000008, "Wrong alignment on UMarinerSettingMenuBase");
static_assert(sizeof(UMarinerSettingMenuBase) == 0x0004F8, "Wrong size on UMarinerSettingMenuBase");
static_assert(offsetof(UMarinerSettingMenuBase, bAddRestoreDefaultsPrompt) == 0x0004E0, "Member 'UMarinerSettingMenuBase::bAddRestoreDefaultsPrompt' has a wrong offset!");

// Class Mariner.BTService_SearchForEnemy
// 0x0008 (0x0078 - 0x0070)
class UBTService_SearchForEnemy final : public UBTService
{
public:
	float                                         HighPrioritySearchRadius;                          // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRequireLOS;                                       // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_147A[0x3];                                     // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTService_SearchForEnemy">();
	}
	static class UBTService_SearchForEnemy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTService_SearchForEnemy>();
	}
};
static_assert(alignof(UBTService_SearchForEnemy) == 0x000008, "Wrong alignment on UBTService_SearchForEnemy");
static_assert(sizeof(UBTService_SearchForEnemy) == 0x000078, "Wrong size on UBTService_SearchForEnemy");
static_assert(offsetof(UBTService_SearchForEnemy, HighPrioritySearchRadius) == 0x000070, "Member 'UBTService_SearchForEnemy::HighPrioritySearchRadius' has a wrong offset!");
static_assert(offsetof(UBTService_SearchForEnemy, bRequireLOS) == 0x000074, "Member 'UBTService_SearchForEnemy::bRequireLOS' has a wrong offset!");

// Class Mariner.MarinerAsyncUIFlowHandler
// 0x0008 (0x0030 - 0x0028)
class UMarinerAsyncUIFlowHandler : public UObject
{
public:
	class UMarinerGameInstance*                   GameInstance;                                      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UMarinerAsyncUIFlowHandler* Get(const class UObject* WorldContextObject, TSubclassOf<class UMarinerAsyncUIFlowHandler> ObjectType);
	static class UMarinerAsyncUIFlowHandler* GetWithContext(const class UObject* WorldContextObject, TSubclassOf<class UMarinerAsyncUIFlowHandler> ObjectType);

	void OnConstruct();

	class UMarinerGameInstance* GetMarinerGameInstance() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAsyncUIFlowHandler">();
	}
	static class UMarinerAsyncUIFlowHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAsyncUIFlowHandler>();
	}
};
static_assert(alignof(UMarinerAsyncUIFlowHandler) == 0x000008, "Wrong alignment on UMarinerAsyncUIFlowHandler");
static_assert(sizeof(UMarinerAsyncUIFlowHandler) == 0x000030, "Wrong size on UMarinerAsyncUIFlowHandler");
static_assert(offsetof(UMarinerAsyncUIFlowHandler, GameInstance) == 0x000028, "Member 'UMarinerAsyncUIFlowHandler::GameInstance' has a wrong offset!");

// Class Mariner.MarinerAsyncFlowInGameStore
// 0x0008 (0x0038 - 0x0030)
class UMarinerAsyncFlowInGameStore : public UMarinerAsyncUIFlowHandler
{
public:
	uint8                                         Pad_147B[0x8];                                     // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetInGameStoreActive(bool bInActive);
	void SetInGameStorePurchaseActive(bool bInActive);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAsyncFlowInGameStore">();
	}
	static class UMarinerAsyncFlowInGameStore* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAsyncFlowInGameStore>();
	}
};
static_assert(alignof(UMarinerAsyncFlowInGameStore) == 0x000008, "Wrong alignment on UMarinerAsyncFlowInGameStore");
static_assert(sizeof(UMarinerAsyncFlowInGameStore) == 0x000038, "Wrong size on UMarinerAsyncFlowInGameStore");

// Class Mariner.BTService_ShootTarget
// 0x0030 (0x00A0 - 0x0070)
class UBTService_ShootTarget final : public UBTService
{
public:
	struct FGameplayTagContainer                  SuppressionTags;                                   // 0x0070(0x0020)(Edit, NativeAccessSpecifierPublic)
	bool                                          bTryToUseSecondary;                                // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldBurstFire;                                  // 0x0091(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_147C[0x2];                                     // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumBurstDuration;                              // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumBurstDuration;                              // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_147D[0x4];                                     // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTService_ShootTarget">();
	}
	static class UBTService_ShootTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTService_ShootTarget>();
	}
};
static_assert(alignof(UBTService_ShootTarget) == 0x000008, "Wrong alignment on UBTService_ShootTarget");
static_assert(sizeof(UBTService_ShootTarget) == 0x0000A0, "Wrong size on UBTService_ShootTarget");
static_assert(offsetof(UBTService_ShootTarget, SuppressionTags) == 0x000070, "Member 'UBTService_ShootTarget::SuppressionTags' has a wrong offset!");
static_assert(offsetof(UBTService_ShootTarget, bTryToUseSecondary) == 0x000090, "Member 'UBTService_ShootTarget::bTryToUseSecondary' has a wrong offset!");
static_assert(offsetof(UBTService_ShootTarget, bShouldBurstFire) == 0x000091, "Member 'UBTService_ShootTarget::bShouldBurstFire' has a wrong offset!");
static_assert(offsetof(UBTService_ShootTarget, MinimumBurstDuration) == 0x000094, "Member 'UBTService_ShootTarget::MinimumBurstDuration' has a wrong offset!");
static_assert(offsetof(UBTService_ShootTarget, MaximumBurstDuration) == 0x000098, "Member 'UBTService_ShootTarget::MaximumBurstDuration' has a wrong offset!");

// Class Mariner.MarinerLoadCMSItemData
// 0x0048 (0x0078 - 0x0030)
class UMarinerLoadCMSItemData final : public UBlueprintAsyncActionBase
{
public:
	UMulticastInlineDelegateProperty_             LoadFinished;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             LoadFailed;                                        // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FMangoItem>                     CMSItemsInput;                                     // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UItemLoadResponse*>              ItemsToLoad;                                       // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UMarinerLoadCMSItemData* LoadItemData(const class UObject* Param_WorldContextObject, const TArray<struct FMangoItem>& ItemData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLoadCMSItemData">();
	}
	static class UMarinerLoadCMSItemData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLoadCMSItemData>();
	}
};
static_assert(alignof(UMarinerLoadCMSItemData) == 0x000008, "Wrong alignment on UMarinerLoadCMSItemData");
static_assert(sizeof(UMarinerLoadCMSItemData) == 0x000078, "Wrong size on UMarinerLoadCMSItemData");
static_assert(offsetof(UMarinerLoadCMSItemData, LoadFinished) == 0x000030, "Member 'UMarinerLoadCMSItemData::LoadFinished' has a wrong offset!");
static_assert(offsetof(UMarinerLoadCMSItemData, LoadFailed) == 0x000040, "Member 'UMarinerLoadCMSItemData::LoadFailed' has a wrong offset!");
static_assert(offsetof(UMarinerLoadCMSItemData, WorldContextObject) == 0x000050, "Member 'UMarinerLoadCMSItemData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UMarinerLoadCMSItemData, CMSItemsInput) == 0x000058, "Member 'UMarinerLoadCMSItemData::CMSItemsInput' has a wrong offset!");
static_assert(offsetof(UMarinerLoadCMSItemData, ItemsToLoad) == 0x000068, "Member 'UMarinerLoadCMSItemData::ItemsToLoad' has a wrong offset!");

// Class Mariner.BTTask_MarinerSimulateInput
// 0x0008 (0x0078 - 0x0070)
class UBTTask_MarinerSimulateInput final : public UBTTaskNode
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_147E[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_MarinerSimulateInput">();
	}
	static class UBTTask_MarinerSimulateInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_MarinerSimulateInput>();
	}
};
static_assert(alignof(UBTTask_MarinerSimulateInput) == 0x000008, "Wrong alignment on UBTTask_MarinerSimulateInput");
static_assert(sizeof(UBTTask_MarinerSimulateInput) == 0x000078, "Wrong size on UBTTask_MarinerSimulateInput");
static_assert(offsetof(UBTTask_MarinerSimulateInput, InputAction) == 0x000070, "Member 'UBTTask_MarinerSimulateInput::InputAction' has a wrong offset!");

// Class Mariner.MarinerSocialMenu
// 0x04B0 (0x0990 - 0x04E0)
class UMarinerSocialMenu : public UMarinerMenu
{
public:
	int32                                         NumFriendsForPage;                                 // 0x04E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_147F[0x4];                                     // 0x04E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerPromptData                     SelectPrompt;                                      // 0x04E8(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     ConfirmGroupInvitePrompt;                          // 0x0600(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     BackPrompt;                                        // 0x0718(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     RefreshPrompt;                                     // 0x0830(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UMarinerHorizontalBox*                  Bound_RootHorizontalBox;                           // 0x0948(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerFriendsPagedVerticalBox*        Bound_PagedFriendsVericalBox;                      // 0x0950(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPartyWidget*                    Bound_PartyWidget;                                 // 0x0958(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1480[0x30];                                    // 0x0960(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActivateGroupInvite(const struct FKey& KeyPressed);
	void OnCancelGroupInvite(const struct FKey& KeyPressed);
	void OnConfirmGroupInvite(const struct FKey& KeyPressed);
	void OnDropdownOnPageOpened(const bool bOpen);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSocialMenu">();
	}
	static class UMarinerSocialMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSocialMenu>();
	}
};
static_assert(alignof(UMarinerSocialMenu) == 0x000008, "Wrong alignment on UMarinerSocialMenu");
static_assert(sizeof(UMarinerSocialMenu) == 0x000990, "Wrong size on UMarinerSocialMenu");
static_assert(offsetof(UMarinerSocialMenu, NumFriendsForPage) == 0x0004E0, "Member 'UMarinerSocialMenu::NumFriendsForPage' has a wrong offset!");
static_assert(offsetof(UMarinerSocialMenu, SelectPrompt) == 0x0004E8, "Member 'UMarinerSocialMenu::SelectPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerSocialMenu, ConfirmGroupInvitePrompt) == 0x000600, "Member 'UMarinerSocialMenu::ConfirmGroupInvitePrompt' has a wrong offset!");
static_assert(offsetof(UMarinerSocialMenu, BackPrompt) == 0x000718, "Member 'UMarinerSocialMenu::BackPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerSocialMenu, RefreshPrompt) == 0x000830, "Member 'UMarinerSocialMenu::RefreshPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerSocialMenu, Bound_RootHorizontalBox) == 0x000948, "Member 'UMarinerSocialMenu::Bound_RootHorizontalBox' has a wrong offset!");
static_assert(offsetof(UMarinerSocialMenu, Bound_PagedFriendsVericalBox) == 0x000950, "Member 'UMarinerSocialMenu::Bound_PagedFriendsVericalBox' has a wrong offset!");
static_assert(offsetof(UMarinerSocialMenu, Bound_PartyWidget) == 0x000958, "Member 'UMarinerSocialMenu::Bound_PartyWidget' has a wrong offset!");

// Class Mariner.BTTask_FindDodgeIncomingProjectileLocation
// 0x0060 (0x00D0 - 0x0070)
class UBTTask_FindDodgeIncomingProjectileLocation final : public UBTTaskNode
{
public:
	float                                         DodgeDistance;                                     // 0x0070(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1481[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 DestinationKey;                                    // 0x0078(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FBlackboardKeySelector                 ProjectileKey;                                     // 0x00A0(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          ChanceOfJumping;                                   // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1482[0x7];                                     // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_FindDodgeIncomingProjectileLocation">();
	}
	static class UBTTask_FindDodgeIncomingProjectileLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_FindDodgeIncomingProjectileLocation>();
	}
};
static_assert(alignof(UBTTask_FindDodgeIncomingProjectileLocation) == 0x000008, "Wrong alignment on UBTTask_FindDodgeIncomingProjectileLocation");
static_assert(sizeof(UBTTask_FindDodgeIncomingProjectileLocation) == 0x0000D0, "Wrong size on UBTTask_FindDodgeIncomingProjectileLocation");
static_assert(offsetof(UBTTask_FindDodgeIncomingProjectileLocation, DodgeDistance) == 0x000070, "Member 'UBTTask_FindDodgeIncomingProjectileLocation::DodgeDistance' has a wrong offset!");
static_assert(offsetof(UBTTask_FindDodgeIncomingProjectileLocation, DestinationKey) == 0x000078, "Member 'UBTTask_FindDodgeIncomingProjectileLocation::DestinationKey' has a wrong offset!");
static_assert(offsetof(UBTTask_FindDodgeIncomingProjectileLocation, ProjectileKey) == 0x0000A0, "Member 'UBTTask_FindDodgeIncomingProjectileLocation::ProjectileKey' has a wrong offset!");
static_assert(offsetof(UBTTask_FindDodgeIncomingProjectileLocation, ChanceOfJumping) == 0x0000C8, "Member 'UBTTask_FindDodgeIncomingProjectileLocation::ChanceOfJumping' has a wrong offset!");

// Class Mariner.MarinerMapGlobals
// 0x0078 (0x00A0 - 0x0028)
class UMarinerMapGlobals : public UObject
{
public:
	TArray<class UMarinerMapDataAsset*>           Maps;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, TSoftObjectPtr<class UTexture2D>> MapImages;                                         // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        MainMenuLevel;                                     // 0x0088(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	const TSoftObjectPtr<class UTexture2D> GetSoftImage(const class FName ImageLookupId) const;
	bool IsMapValid(const class UObject* WorldContextObject, const struct FGuid& CmsId) const;
	const struct FMangoMap TryAndGetMangoMapFromCurrentMap(const class UObject* WorldContextObject, bool* bIsValid) const;
	const struct FMangoMap TryAndGetMangoMapFromLoadName(const class UObject* WorldContextObject, const class FString& LoadName, bool* bIsValid) const;
	class UMarinerMapDataAsset* TryAndGetMapDataFromLoadName(const class FString& LoadName) const;
	class UMarinerMapDataAsset* TryAndGetMapDataFromMapName(const class FString& MapName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMapGlobals">();
	}
	static class UMarinerMapGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMapGlobals>();
	}
};
static_assert(alignof(UMarinerMapGlobals) == 0x000008, "Wrong alignment on UMarinerMapGlobals");
static_assert(sizeof(UMarinerMapGlobals) == 0x0000A0, "Wrong size on UMarinerMapGlobals");
static_assert(offsetof(UMarinerMapGlobals, Maps) == 0x000028, "Member 'UMarinerMapGlobals::Maps' has a wrong offset!");
static_assert(offsetof(UMarinerMapGlobals, MapImages) == 0x000038, "Member 'UMarinerMapGlobals::MapImages' has a wrong offset!");
static_assert(offsetof(UMarinerMapGlobals, MainMenuLevel) == 0x000088, "Member 'UMarinerMapGlobals::MainMenuLevel' has a wrong offset!");

// Class Mariner.MarinerAbility
// 0x02D8 (0x06D8 - 0x0400)
class UMarinerAbility : public UGameplayAbility
{
public:
	UMulticastInlineDelegateProperty_             OnCooldownTimeChanged;                             // 0x0400(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCooldownEndedDelegate;                           // 0x0410(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAbilityActivated;                                // 0x0420(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAbilityUIActivated;                              // 0x0430(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAbilityEnded;                                    // 0x0440(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnInputPressed;                                    // 0x0450(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnInputReleased;                                   // 0x0460(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<class FName, struct FMarinerGameplayTaskPooledComponentArrayContainer> PooledComponentsForGameplayTasks;                  // 0x0470(0x0050)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UMarinerCharacterMontage*               PreActivationMontage;                              // 0x04C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerTask_PlayMontageAndWait*        ActivationMontageTask;                             // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class AMarinerCharacter>, class UMarinerCharacterMontage*> PreActivationMontageOverrides;                     // 0x04D0(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  BlockAbilitiesWithTagDuringPreActivationMontage;   // 0x0520(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1486[0x40];                                    // 0x0540(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseInputQueuing;                                  // 0x0580(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanInputQueueOnEndAbility;                        // 0x0581(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1487[0x6];                                     // 0x0582(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerCharacterMontage*               ActivationMontage;                                 // 0x0588(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCameraShake>               AbilityActiveShake;                                // 0x0590(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAbilityTargetDataHandle       ActivationAimData;                                 // 0x0598(0x0028)(Protected, NativeAccessSpecifierProtected)
	uint8                                         TargetingData;                                     // 0x05C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bApplyCooldownOnAbilityCommit;                     // 0x05C1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCooldownAutomaticallyApplied;                     // 0x05C2(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisplayAmmo;                                      // 0x05C3(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowPrompt;                                      // 0x05C4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPredictClientCooldown;                            // 0x05C5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1488[0x2];                                     // 0x05C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerAbility>            ReloadAndAmmoSetup;                                // 0x05C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SubstantialCooldownThreshold;                      // 0x05D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1489[0x4];                                     // 0x05D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  OnActivateGameplayCueTags;                         // 0x05D8(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>    EffectsToApplyOnAbilityActivated;                  // 0x05F8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>    EffectsToApplyOnAbilityEnd;                        // 0x0608(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>    EffectsToApplyOnAbilityInputPress;                 // 0x0618(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>    EffectsToApplyOnAbilityInputRelease;               // 0x0628(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>    EffectsToRemoveOnAbilityEnded;                     // 0x0638(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bShouldListenForPriorityItemPickups;               // 0x0648(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBroadcastCooldownTimeChanged;                     // 0x0649(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsLocallyPredictedNetExecutionPolicy;             // 0x064A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseLocalClientPredictiveCooldown;                 // 0x064B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_148A[0x4];                                     // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CooldownTimerHandle;                               // 0x0650(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_148B[0x8];                                     // 0x0658(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerAbilitySkinData_Base*           SkinData;                                          // 0x0660(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UMarinerAbility>>    ExtraGrantedAbilities;                             // 0x0668(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UMarinerAbility>>    ChainReactionAbilities;                            // 0x0678(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>    PredictiveMoveAffectingEffects;                    // 0x0688(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_148C[0x40];                                    // 0x0698(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyMoveAffectingGameplayEffectToOwningCharacter(TSubclassOf<class UGameplayEffect> GameplayEffectClass, int32 Level);
	void ApplyPredictiveGameplayEffect(TSubclassOf<class UGameplayEffect> GameplayEffect);
	void ApplySkin(class UMarinerAbilitySkinData_Base* AbilitySkinData);
	TArray<TSubclassOf<class UGameplayEffect>> BP_AddEffectsToDefaultApplyOnAbilityActivation();
	void BP_AuthorityOnOwnerKnockout();
	float BP_GetEventMagnitude();
	TArray<TSubclassOf<class UGameplayEffect>> BP_GetExtraEffectsToApplyOnAbilityEnd();
	TArray<TSubclassOf<class UGameplayEffect>> BP_GetExtraEffectsToApplyOnAbilityInputPress();
	TArray<TSubclassOf<class UGameplayEffect>> BP_GetExtraEffectsToApplyOnAbilityInputRelease();
	struct FVector BP_GetLaunchVector();
	void BP_OnAbilityActivated(const struct FGameplayAbilityActorInfo& ActorInfo);
	void BP_OnAbilityActivated_Authority(const struct FGameplayAbilityActorInfo& ActorInfo);
	void BP_OnAbilityEnded(const struct FGameplayAbilityActorInfo& ActorInfo, bool WasCancelled);
	void BP_OnAbilityEnded_Authority(const struct FGameplayAbilityActorInfo& ActorInfo, bool WasCancelled);
	void BP_OnActivationRejectedByServer();
	void BP_OnAnyInputReceived(EMarinerInputActions InputType, EInputEvent EventType);
	void BP_OnGiveAbility();
	void BP_OnOwningControllerSet();
	void BP_OnPriorityItemPickup(class AMarinerCharacter* CatchingCharacter, EMarinerItemSlot ItemSlot);
	const struct FMarinerGameplayAbilityTargetData_Aim GetAimData();
	bool ManuallyApplyCooldownIfAble();
	void OnActivationMontageCompleted();
	void OnActivationMontageInterrupted();
	void OnActiveGameplayEffectAdded(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayEffectSpec& GameplayEffectSpec, const struct FActiveGameplayEffectHandle& ActiveGameplayHandle);
	void OnControllerSet();
	void OnImpendingMegablast(const class UMarinerDamageableComponent* RelevantDamageableComponent, const class AMarinerCharacter* CharacterExpectingMegablast);
	void OnItemCatchDelegateCompleted(class AMarinerCharacter* CatchingCharacter, EMarinerItemSlot ItemSlot);
	void OnMegablastAppliedLocal(class AMarinerPlayerState* MegablastInstigatorPlayerState);
	void OnPreActivationMontageCancelled();
	void OnPreActivationMontageCompleted();
	void OnPreActivationMontageInterrupted();
	bool PlayFireAndForgetMarinerMontage(class UMarinerCharacterMontage* MontageToPlay);
	void ProcessArtifactData(const TMap<class FName, float>& Map);
	void UpdateCooldownTimeChanged();

	bool BP_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo) const;
	struct FVector BP_GenerateAIInputVector(class AMarinerAIController* RequestingController, class AMarinerCharacter* RequestingPawn) const;
	float BP_GetCustomTargetingFloat() const;
	int32 BP_GetCustomTargetingInt() const;
	struct FVector BP_GetCustomTargetingVectorNormal() const;
	struct FVector BP_GetCustomTargetingVectorQuantized() const;
	float BP_GetLocalPredictiveCooldownTime() const;
	bool BP_HasAuthority() const;
	bool BP_IsForRemoteClient() const;
	bool BP_IsLocallyControlled() const;
	class UMarinerAbility* GetAbilityInstanceForAbilityClass(TSubclassOf<class UMarinerAbility> MarinerAbilityClass) const;
	const struct FGameplayTagContainer GetAbilityTags() const;
	float GetAbilityUIDuration(bool* bForceActiveDisplay) const;
	bool GetAllowPrompt() const;
	class AMarinerCharacter* GetAvatarCharacterFromActorInfo() const;
	float GetCooldownDuration() const;
	const TSubclassOf<class UGameplayEffect> GetCooldownGameplayEffectType() const;
	bool GetDisplayAmmo() const;
	class UMarinerAbilitySystemComponent* GetOwningAbilitySystemComponent() const;
	class AMarinerCharacter* GetOwningCharacterFromActorInfo() const;
	class UMarinerCharacterMovement* GetOwningMovementComponent() const;
	const TSubclassOf<class UMarinerAbility> GetReloadAndAmmoSetup() const;
	bool HasAuthority() const;
	bool HasInfiniteAmmo() const;
	bool IsActive() const;
	bool IsOnNetExecutionPolicyRole() const;
	bool ShouldNotifyUIOnActivate() const;
	bool UsesInputQueuing() const;
	bool UsesInputQueuingOnEndAbility() const;
	bool UsesLocallyControlledNetExecutionPolicy() const;
	bool UsesServerNetExecutionPolicy() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbility">();
	}
	static class UMarinerAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbility>();
	}
};
static_assert(alignof(UMarinerAbility) == 0x000008, "Wrong alignment on UMarinerAbility");
static_assert(sizeof(UMarinerAbility) == 0x0006D8, "Wrong size on UMarinerAbility");
static_assert(offsetof(UMarinerAbility, OnCooldownTimeChanged) == 0x000400, "Member 'UMarinerAbility::OnCooldownTimeChanged' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, OnCooldownEndedDelegate) == 0x000410, "Member 'UMarinerAbility::OnCooldownEndedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, OnAbilityActivated) == 0x000420, "Member 'UMarinerAbility::OnAbilityActivated' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, OnAbilityUIActivated) == 0x000430, "Member 'UMarinerAbility::OnAbilityUIActivated' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, OnAbilityEnded) == 0x000440, "Member 'UMarinerAbility::OnAbilityEnded' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, OnInputPressed) == 0x000450, "Member 'UMarinerAbility::OnInputPressed' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, OnInputReleased) == 0x000460, "Member 'UMarinerAbility::OnInputReleased' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, PooledComponentsForGameplayTasks) == 0x000470, "Member 'UMarinerAbility::PooledComponentsForGameplayTasks' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, PreActivationMontage) == 0x0004C0, "Member 'UMarinerAbility::PreActivationMontage' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, ActivationMontageTask) == 0x0004C8, "Member 'UMarinerAbility::ActivationMontageTask' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, PreActivationMontageOverrides) == 0x0004D0, "Member 'UMarinerAbility::PreActivationMontageOverrides' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, BlockAbilitiesWithTagDuringPreActivationMontage) == 0x000520, "Member 'UMarinerAbility::BlockAbilitiesWithTagDuringPreActivationMontage' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, bUseInputQueuing) == 0x000580, "Member 'UMarinerAbility::bUseInputQueuing' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, bCanInputQueueOnEndAbility) == 0x000581, "Member 'UMarinerAbility::bCanInputQueueOnEndAbility' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, ActivationMontage) == 0x000588, "Member 'UMarinerAbility::ActivationMontage' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, AbilityActiveShake) == 0x000590, "Member 'UMarinerAbility::AbilityActiveShake' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, ActivationAimData) == 0x000598, "Member 'UMarinerAbility::ActivationAimData' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, TargetingData) == 0x0005C0, "Member 'UMarinerAbility::TargetingData' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, bApplyCooldownOnAbilityCommit) == 0x0005C1, "Member 'UMarinerAbility::bApplyCooldownOnAbilityCommit' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, bCooldownAutomaticallyApplied) == 0x0005C2, "Member 'UMarinerAbility::bCooldownAutomaticallyApplied' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, bDisplayAmmo) == 0x0005C3, "Member 'UMarinerAbility::bDisplayAmmo' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, bAllowPrompt) == 0x0005C4, "Member 'UMarinerAbility::bAllowPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, bPredictClientCooldown) == 0x0005C5, "Member 'UMarinerAbility::bPredictClientCooldown' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, ReloadAndAmmoSetup) == 0x0005C8, "Member 'UMarinerAbility::ReloadAndAmmoSetup' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, SubstantialCooldownThreshold) == 0x0005D0, "Member 'UMarinerAbility::SubstantialCooldownThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, OnActivateGameplayCueTags) == 0x0005D8, "Member 'UMarinerAbility::OnActivateGameplayCueTags' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, EffectsToApplyOnAbilityActivated) == 0x0005F8, "Member 'UMarinerAbility::EffectsToApplyOnAbilityActivated' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, EffectsToApplyOnAbilityEnd) == 0x000608, "Member 'UMarinerAbility::EffectsToApplyOnAbilityEnd' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, EffectsToApplyOnAbilityInputPress) == 0x000618, "Member 'UMarinerAbility::EffectsToApplyOnAbilityInputPress' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, EffectsToApplyOnAbilityInputRelease) == 0x000628, "Member 'UMarinerAbility::EffectsToApplyOnAbilityInputRelease' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, EffectsToRemoveOnAbilityEnded) == 0x000638, "Member 'UMarinerAbility::EffectsToRemoveOnAbilityEnded' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, bShouldListenForPriorityItemPickups) == 0x000648, "Member 'UMarinerAbility::bShouldListenForPriorityItemPickups' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, bBroadcastCooldownTimeChanged) == 0x000649, "Member 'UMarinerAbility::bBroadcastCooldownTimeChanged' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, bIsLocallyPredictedNetExecutionPolicy) == 0x00064A, "Member 'UMarinerAbility::bIsLocallyPredictedNetExecutionPolicy' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, bUseLocalClientPredictiveCooldown) == 0x00064B, "Member 'UMarinerAbility::bUseLocalClientPredictiveCooldown' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, CooldownTimerHandle) == 0x000650, "Member 'UMarinerAbility::CooldownTimerHandle' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, SkinData) == 0x000660, "Member 'UMarinerAbility::SkinData' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, ExtraGrantedAbilities) == 0x000668, "Member 'UMarinerAbility::ExtraGrantedAbilities' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, ChainReactionAbilities) == 0x000678, "Member 'UMarinerAbility::ChainReactionAbilities' has a wrong offset!");
static_assert(offsetof(UMarinerAbility, PredictiveMoveAffectingEffects) == 0x000688, "Member 'UMarinerAbility::PredictiveMoveAffectingEffects' has a wrong offset!");

// Class Mariner.BTTask_FindHealth
// 0x0000 (0x0098 - 0x0098)
class UBTTask_FindHealth final : public UBTTask_BlackboardBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_FindHealth">();
	}
	static class UBTTask_FindHealth* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_FindHealth>();
	}
};
static_assert(alignof(UBTTask_FindHealth) == 0x000008, "Wrong alignment on UBTTask_FindHealth");
static_assert(sizeof(UBTTask_FindHealth) == 0x000098, "Wrong size on UBTTask_FindHealth");

// Class Mariner.MarinerKeyboardPrompt
// 0x0010 (0x03E8 - 0x03D8)
class UMarinerKeyboardPrompt : public UMarinerBasePrompt
{
public:
	float                                         KeySmallSize;                                      // 0x03D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KeyMediumSize;                                     // 0x03DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KeyLargeSize;                                      // 0x03E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1496[0x4];                                     // 0x03E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FMarinerKeyboardPromptAssets GetPromptAssets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerKeyboardPrompt">();
	}
	static class UMarinerKeyboardPrompt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerKeyboardPrompt>();
	}
};
static_assert(alignof(UMarinerKeyboardPrompt) == 0x000008, "Wrong alignment on UMarinerKeyboardPrompt");
static_assert(sizeof(UMarinerKeyboardPrompt) == 0x0003E8, "Wrong size on UMarinerKeyboardPrompt");
static_assert(offsetof(UMarinerKeyboardPrompt, KeySmallSize) == 0x0003D8, "Member 'UMarinerKeyboardPrompt::KeySmallSize' has a wrong offset!");
static_assert(offsetof(UMarinerKeyboardPrompt, KeyMediumSize) == 0x0003DC, "Member 'UMarinerKeyboardPrompt::KeyMediumSize' has a wrong offset!");
static_assert(offsetof(UMarinerKeyboardPrompt, KeyLargeSize) == 0x0003E0, "Member 'UMarinerKeyboardPrompt::KeyLargeSize' has a wrong offset!");

// Class Mariner.MarinerAbility_Toggle
// 0x0008 (0x06E0 - 0x06D8)
class UMarinerAbility_Toggle : public UMarinerAbility
{
public:
	EMarinerAbilityToggleMethod                   ToggleMethod;                                      // 0x06D8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1497[0x3];                                     // 0x06D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivationTimestamp;                               // 0x06DC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool BP_CanToggleAbility(const struct FGameplayAbilityActorInfo& ActorInfo);
	void BP_OnToggleOff(const struct FGameplayAbilityActorInfo& ActorInfo);
	void BP_OnToggleOff_Authority(const struct FGameplayAbilityActorInfo& ActorInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbility_Toggle">();
	}
	static class UMarinerAbility_Toggle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbility_Toggle>();
	}
};
static_assert(alignof(UMarinerAbility_Toggle) == 0x000008, "Wrong alignment on UMarinerAbility_Toggle");
static_assert(sizeof(UMarinerAbility_Toggle) == 0x0006E0, "Wrong size on UMarinerAbility_Toggle");
static_assert(offsetof(UMarinerAbility_Toggle, ToggleMethod) == 0x0006D8, "Member 'UMarinerAbility_Toggle::ToggleMethod' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Toggle, ActivationTimestamp) == 0x0006DC, "Member 'UMarinerAbility_Toggle::ActivationTimestamp' has a wrong offset!");

// Class Mariner.MarinerAbility_EnergyToggle
// 0x00D0 (0x07B0 - 0x06E0)
class UMarinerAbility_EnergyToggle final : public UMarinerAbility_Toggle
{
public:
	uint8                                         Pad_1499[0x8];                                     // 0x06E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerCharacterMontage*               EnergyDrainStoppedMontage;                         // 0x06E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>    EffectsToApplyOnEnergyEmpty;                       // 0x06F0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  TagsToBlockEnergyDrain;                            // 0x0700(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  TagsToBlockEnergyRecovery;                         // 0x0720(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         MaximumEnergy;                                     // 0x0740(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentEnergy;                                     // 0x0744(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumEnergy;                                     // 0x0748(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumEnergyRequiredToActivate;                   // 0x074C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumDrainTime;                                  // 0x0750(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnergyDrainedPerSecond;                            // 0x0754(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnergyDrainMultiplier;                             // 0x0758(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnergyRecoveredPerSecond;                          // 0x075C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnergyRecoveryMultiplier;                          // 0x0760(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnergyInitiateRecoveryTimeDelay;                   // 0x0764(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnergyInitiateRecoveryTimeDelayWhenEmpty;          // 0x0768(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowActivationBeforeEnergyRecovery;              // 0x076C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerEnergyMode                            EnergyMode;                                        // 0x076D(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_149A[0x2];                                     // 0x076E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DelayRecoveryTimer;                                // 0x0770(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           DrainExtensionTimer;                               // 0x0778(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PreviousEnergyCheckTimeStamp;                      // 0x0780(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PreviousActivationTimeStamp;                       // 0x0784(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_149B[0x28];                                    // 0x0788(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddEnergy_Authority(float EnergyAdditionAmount, bool bShouldApplyMultiplier);
	TArray<TSubclassOf<class UGameplayEffect>> BP_AddEffectsToDefaultApplyOnEnergyEmpty();
	float BP_GetEnergyDrainMultiplier();
	float BP_GetEnergyRecoveryMultiplier();
	void BP_OnAllEnergyDrained();
	void BP_OnAllEnergyRecovered();
	void BP_OnCurrentEnergyChanged(float Energy);
	void BP_OnStartedDrain();
	void BP_OnStartedRecovery();
	void BP_OnStoppedDrain();
	float GetCurrentEnergy();
	TArray<TSubclassOf<class UGameplayEffect>> GetEffectsToApplyOnEnergyEmpty();
	float GetEnergyRatio();
	void OnEnergyDrainStoppedMontageCompleted();
	void OnEnergyDrainStoppedMontageInterrupted();
	void OnRep_CurrentEnergy(float PreviousEnergy);
	void ReduceEnergy_Authority(float EnergyReductionAmount, bool bShouldApplyMultiplier);

	bool BP_CanUseEnergy() const;
	bool IsDrainEnergyBlockedByTag() const;
	bool IsRecoverEnergyBlockedByTag() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbility_EnergyToggle">();
	}
	static class UMarinerAbility_EnergyToggle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbility_EnergyToggle>();
	}
};
static_assert(alignof(UMarinerAbility_EnergyToggle) == 0x000008, "Wrong alignment on UMarinerAbility_EnergyToggle");
static_assert(sizeof(UMarinerAbility_EnergyToggle) == 0x0007B0, "Wrong size on UMarinerAbility_EnergyToggle");
static_assert(offsetof(UMarinerAbility_EnergyToggle, EnergyDrainStoppedMontage) == 0x0006E8, "Member 'UMarinerAbility_EnergyToggle::EnergyDrainStoppedMontage' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, EffectsToApplyOnEnergyEmpty) == 0x0006F0, "Member 'UMarinerAbility_EnergyToggle::EffectsToApplyOnEnergyEmpty' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, TagsToBlockEnergyDrain) == 0x000700, "Member 'UMarinerAbility_EnergyToggle::TagsToBlockEnergyDrain' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, TagsToBlockEnergyRecovery) == 0x000720, "Member 'UMarinerAbility_EnergyToggle::TagsToBlockEnergyRecovery' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, MaximumEnergy) == 0x000740, "Member 'UMarinerAbility_EnergyToggle::MaximumEnergy' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, CurrentEnergy) == 0x000744, "Member 'UMarinerAbility_EnergyToggle::CurrentEnergy' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, MinimumEnergy) == 0x000748, "Member 'UMarinerAbility_EnergyToggle::MinimumEnergy' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, MinimumEnergyRequiredToActivate) == 0x00074C, "Member 'UMarinerAbility_EnergyToggle::MinimumEnergyRequiredToActivate' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, MinimumDrainTime) == 0x000750, "Member 'UMarinerAbility_EnergyToggle::MinimumDrainTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, EnergyDrainedPerSecond) == 0x000754, "Member 'UMarinerAbility_EnergyToggle::EnergyDrainedPerSecond' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, EnergyDrainMultiplier) == 0x000758, "Member 'UMarinerAbility_EnergyToggle::EnergyDrainMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, EnergyRecoveredPerSecond) == 0x00075C, "Member 'UMarinerAbility_EnergyToggle::EnergyRecoveredPerSecond' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, EnergyRecoveryMultiplier) == 0x000760, "Member 'UMarinerAbility_EnergyToggle::EnergyRecoveryMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, EnergyInitiateRecoveryTimeDelay) == 0x000764, "Member 'UMarinerAbility_EnergyToggle::EnergyInitiateRecoveryTimeDelay' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, EnergyInitiateRecoveryTimeDelayWhenEmpty) == 0x000768, "Member 'UMarinerAbility_EnergyToggle::EnergyInitiateRecoveryTimeDelayWhenEmpty' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, bAllowActivationBeforeEnergyRecovery) == 0x00076C, "Member 'UMarinerAbility_EnergyToggle::bAllowActivationBeforeEnergyRecovery' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, EnergyMode) == 0x00076D, "Member 'UMarinerAbility_EnergyToggle::EnergyMode' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, DelayRecoveryTimer) == 0x000770, "Member 'UMarinerAbility_EnergyToggle::DelayRecoveryTimer' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, DrainExtensionTimer) == 0x000778, "Member 'UMarinerAbility_EnergyToggle::DrainExtensionTimer' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, PreviousEnergyCheckTimeStamp) == 0x000780, "Member 'UMarinerAbility_EnergyToggle::PreviousEnergyCheckTimeStamp' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_EnergyToggle, PreviousActivationTimeStamp) == 0x000784, "Member 'UMarinerAbility_EnergyToggle::PreviousActivationTimeStamp' has a wrong offset!");

// Class Mariner.MarinerArtifactImage
// 0x0058 (0x0308 - 0x02B0)
class UMarinerArtifactImage : public UMarinerUserWidget
{
public:
	class UMarinerAsyncImage*                     Bound_AsyncImageArtifactIcon;                      // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_ImageArtifactLocked;                         // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_ImageArtifactBackground;                     // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextArtifactLevel;                           // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_ImageArtifactLevelBackground;                // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_ImageRankedIcon;                             // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            Bound_UnviewedItemWidget;                          // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   UnownedArtifactSymbol;                             // 0x02E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_149E[0x8];                                     // 0x0300(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitArtifactImage(const EArtifactImageWidgetType InWidgetType, const EMarinerArtifactGameplayEffectType ArtifactGameplayType, const TSoftObjectPtr<class UTexture2D> ArtifactIconSoftTexture, const int32 ArtifactLevel, const bool bInInventory, const bool bInViewed);
	void InitArtifactImageOwned(const EArtifactImageWidgetType InWidgetType, const EMarinerArtifactGameplayEffectType ArtifactGameplayType, const TSoftObjectPtr<class UTexture2D> ArtifactIconSoftTexture, const int32 ArtifactLevel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerArtifactImage">();
	}
	static class UMarinerArtifactImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerArtifactImage>();
	}
};
static_assert(alignof(UMarinerArtifactImage) == 0x000008, "Wrong alignment on UMarinerArtifactImage");
static_assert(sizeof(UMarinerArtifactImage) == 0x000308, "Wrong size on UMarinerArtifactImage");
static_assert(offsetof(UMarinerArtifactImage, Bound_AsyncImageArtifactIcon) == 0x0002B0, "Member 'UMarinerArtifactImage::Bound_AsyncImageArtifactIcon' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactImage, Bound_ImageArtifactLocked) == 0x0002B8, "Member 'UMarinerArtifactImage::Bound_ImageArtifactLocked' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactImage, Bound_ImageArtifactBackground) == 0x0002C0, "Member 'UMarinerArtifactImage::Bound_ImageArtifactBackground' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactImage, Bound_TextArtifactLevel) == 0x0002C8, "Member 'UMarinerArtifactImage::Bound_TextArtifactLevel' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactImage, Bound_ImageArtifactLevelBackground) == 0x0002D0, "Member 'UMarinerArtifactImage::Bound_ImageArtifactLevelBackground' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactImage, Bound_ImageRankedIcon) == 0x0002D8, "Member 'UMarinerArtifactImage::Bound_ImageRankedIcon' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactImage, Bound_UnviewedItemWidget) == 0x0002E0, "Member 'UMarinerArtifactImage::Bound_UnviewedItemWidget' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactImage, UnownedArtifactSymbol) == 0x0002E8, "Member 'UMarinerArtifactImage::UnownedArtifactSymbol' has a wrong offset!");

// Class Mariner.BTTask_FindNearestNavmesh
// 0x0030 (0x00C8 - 0x0098)
class UBTTask_FindNearestNavmesh final : public UBTTask_BlackboardBase
{
public:
	struct FBlackboardKeySelector                 SourceKey;                                         // 0x0098(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	float                                         SearchRange;                                       // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SearchHeight;                                      // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_FindNearestNavmesh">();
	}
	static class UBTTask_FindNearestNavmesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_FindNearestNavmesh>();
	}
};
static_assert(alignof(UBTTask_FindNearestNavmesh) == 0x000008, "Wrong alignment on UBTTask_FindNearestNavmesh");
static_assert(sizeof(UBTTask_FindNearestNavmesh) == 0x0000C8, "Wrong size on UBTTask_FindNearestNavmesh");
static_assert(offsetof(UBTTask_FindNearestNavmesh, SourceKey) == 0x000098, "Member 'UBTTask_FindNearestNavmesh::SourceKey' has a wrong offset!");
static_assert(offsetof(UBTTask_FindNearestNavmesh, SearchRange) == 0x0000C0, "Member 'UBTTask_FindNearestNavmesh::SearchRange' has a wrong offset!");
static_assert(offsetof(UBTTask_FindNearestNavmesh, SearchHeight) == 0x0000C4, "Member 'UBTTask_FindNearestNavmesh::SearchHeight' has a wrong offset!");

// Class Mariner.MarinerSettingEditableTextBox
// 0x0038 (0x04D8 - 0x04A0)
class UMarinerSettingEditableTextBox final : public UMarinerSettingBase
{
public:
	bool                                          bClearTextOnCommit;                                // 0x04A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14A3[0x7];                                     // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          CommittedSFX;                                      // 0x04A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnEditableTextBoxInit;                             // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnEditableTextBoxCommitted;                        // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_14A4[0x8];                                     // 0x04D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetText(const class FString& Text);

	struct FMarinerSettingEditableTextBoxAssets GetAssets() const;
	class FString GetText() const;
	bool GetTextBoxHasFocus() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSettingEditableTextBox">();
	}
	static class UMarinerSettingEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSettingEditableTextBox>();
	}
};
static_assert(alignof(UMarinerSettingEditableTextBox) == 0x000008, "Wrong alignment on UMarinerSettingEditableTextBox");
static_assert(sizeof(UMarinerSettingEditableTextBox) == 0x0004D8, "Wrong size on UMarinerSettingEditableTextBox");
static_assert(offsetof(UMarinerSettingEditableTextBox, bClearTextOnCommit) == 0x0004A0, "Member 'UMarinerSettingEditableTextBox::bClearTextOnCommit' has a wrong offset!");
static_assert(offsetof(UMarinerSettingEditableTextBox, CommittedSFX) == 0x0004A8, "Member 'UMarinerSettingEditableTextBox::CommittedSFX' has a wrong offset!");
static_assert(offsetof(UMarinerSettingEditableTextBox, OnEditableTextBoxInit) == 0x0004B0, "Member 'UMarinerSettingEditableTextBox::OnEditableTextBoxInit' has a wrong offset!");
static_assert(offsetof(UMarinerSettingEditableTextBox, OnEditableTextBoxCommitted) == 0x0004C0, "Member 'UMarinerSettingEditableTextBox::OnEditableTextBoxCommitted' has a wrong offset!");

// Class Mariner.BTTask_FindPickup
// 0x0000 (0x0098 - 0x0098)
class UBTTask_FindPickup final : public UBTTask_BlackboardBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_FindPickup">();
	}
	static class UBTTask_FindPickup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_FindPickup>();
	}
};
static_assert(alignof(UBTTask_FindPickup) == 0x000008, "Wrong alignment on UBTTask_FindPickup");
static_assert(sizeof(UBTTask_FindPickup) == 0x000098, "Wrong size on UBTTask_FindPickup");

// Class Mariner.MarinerLoadEmotesForCharacter
// 0x0048 (0x0078 - 0x0030)
class UMarinerLoadEmotesForCharacter final : public UBlueprintAsyncActionBase
{
public:
	UMulticastInlineDelegateProperty_             LoadFinished;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             LoadFailed;                                        // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerPlayableCharacter*              CharacterDataInput;                                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UItemLoadResponse*>              ItemsToLoad;                                       // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	EMangoItemType                                ItemTypeLookup;                                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14A5[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerLoadEmotesForCharacter* LoadEmotesForCharacter(const class UObject* Param_WorldContextObject, const class UMarinerPlayableCharacter* CharacterData, const EMangoItemType ItemType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLoadEmotesForCharacter">();
	}
	static class UMarinerLoadEmotesForCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLoadEmotesForCharacter>();
	}
};
static_assert(alignof(UMarinerLoadEmotesForCharacter) == 0x000008, "Wrong alignment on UMarinerLoadEmotesForCharacter");
static_assert(sizeof(UMarinerLoadEmotesForCharacter) == 0x000078, "Wrong size on UMarinerLoadEmotesForCharacter");
static_assert(offsetof(UMarinerLoadEmotesForCharacter, LoadFinished) == 0x000030, "Member 'UMarinerLoadEmotesForCharacter::LoadFinished' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEmotesForCharacter, LoadFailed) == 0x000040, "Member 'UMarinerLoadEmotesForCharacter::LoadFailed' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEmotesForCharacter, WorldContextObject) == 0x000050, "Member 'UMarinerLoadEmotesForCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEmotesForCharacter, CharacterDataInput) == 0x000058, "Member 'UMarinerLoadEmotesForCharacter::CharacterDataInput' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEmotesForCharacter, ItemsToLoad) == 0x000060, "Member 'UMarinerLoadEmotesForCharacter::ItemsToLoad' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEmotesForCharacter, ItemTypeLookup) == 0x000070, "Member 'UMarinerLoadEmotesForCharacter::ItemTypeLookup' has a wrong offset!");

// Class Mariner.BTTask_FindPointNearEnemy
// 0x0008 (0x00A0 - 0x0098)
class UBTTask_FindPointNearEnemy final : public UBTTask_BlackboardBase
{
public:
	float                                         SearchRadius;                                      // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DistanceOriginIsShortOfEnemy;                      // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_FindPointNearEnemy">();
	}
	static class UBTTask_FindPointNearEnemy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_FindPointNearEnemy>();
	}
};
static_assert(alignof(UBTTask_FindPointNearEnemy) == 0x000008, "Wrong alignment on UBTTask_FindPointNearEnemy");
static_assert(sizeof(UBTTask_FindPointNearEnemy) == 0x0000A0, "Wrong size on UBTTask_FindPointNearEnemy");
static_assert(offsetof(UBTTask_FindPointNearEnemy, SearchRadius) == 0x000098, "Member 'UBTTask_FindPointNearEnemy::SearchRadius' has a wrong offset!");
static_assert(offsetof(UBTTask_FindPointNearEnemy, DistanceOriginIsShortOfEnemy) == 0x00009C, "Member 'UBTTask_FindPointNearEnemy::DistanceOriginIsShortOfEnemy' has a wrong offset!");

// Class Mariner.MarinerLevelEventTargetLocation
// 0x0028 (0x0240 - 0x0218)
class AMarinerLevelEventTargetLocation final : public AActor
{
public:
	uint8                                         Pad_14A7[0x8];                                     // 0x0218(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamIndex;                                         // 0x0220(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                HitNormal;                                         // 0x0224(0x000C)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14A8[0x10];                                    // 0x0230(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisableTarget();
	void EnableTarget();
	void OnOwningProjectileExploded(class AMarinerProjectile* Projectile, const struct FHitResult& Impact);
	void OnRep_TeamIndex();
	void OnUpdateHitNormal();
	void SetTeamIndex(int32 InTeamIndex);
	void UpdateTeamColors();

	int32 GetTeamIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLevelEventTargetLocation">();
	}
	static class AMarinerLevelEventTargetLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerLevelEventTargetLocation>();
	}
};
static_assert(alignof(AMarinerLevelEventTargetLocation) == 0x000008, "Wrong alignment on AMarinerLevelEventTargetLocation");
static_assert(sizeof(AMarinerLevelEventTargetLocation) == 0x000240, "Wrong size on AMarinerLevelEventTargetLocation");
static_assert(offsetof(AMarinerLevelEventTargetLocation, TeamIndex) == 0x000220, "Member 'AMarinerLevelEventTargetLocation::TeamIndex' has a wrong offset!");
static_assert(offsetof(AMarinerLevelEventTargetLocation, HitNormal) == 0x000224, "Member 'AMarinerLevelEventTargetLocation::HitNormal' has a wrong offset!");

// Class Mariner.BTTask_FindRandomWanderPoint
// 0x0000 (0x0098 - 0x0098)
class UBTTask_FindRandomWanderPoint final : public UBTTask_BlackboardBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_FindRandomWanderPoint">();
	}
	static class UBTTask_FindRandomWanderPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_FindRandomWanderPoint>();
	}
};
static_assert(alignof(UBTTask_FindRandomWanderPoint) == 0x000008, "Wrong alignment on UBTTask_FindRandomWanderPoint");
static_assert(sizeof(UBTTask_FindRandomWanderPoint) == 0x000098, "Wrong size on UBTTask_FindRandomWanderPoint");

// Class Mariner.BTTask_Jump
// 0x0000 (0x0070 - 0x0070)
class UBTTask_Jump final : public UBTTaskNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_Jump">();
	}
	static class UBTTask_Jump* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_Jump>();
	}
};
static_assert(alignof(UBTTask_Jump) == 0x000008, "Wrong alignment on UBTTask_Jump");
static_assert(sizeof(UBTTask_Jump) == 0x000070, "Wrong size on UBTTask_Jump");

// Class Mariner.BTTask_MultiJump
// 0x0008 (0x0078 - 0x0070)
class UBTTask_MultiJump final : public UBTTaskNode
{
public:
	uint8                                         NumberOfJumpsToAttempt;                            // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14A9[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_MultiJump">();
	}
	static class UBTTask_MultiJump* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_MultiJump>();
	}
};
static_assert(alignof(UBTTask_MultiJump) == 0x000008, "Wrong alignment on UBTTask_MultiJump");
static_assert(sizeof(UBTTask_MultiJump) == 0x000078, "Wrong size on UBTTask_MultiJump");
static_assert(offsetof(UBTTask_MultiJump, NumberOfJumpsToAttempt) == 0x000070, "Member 'UBTTask_MultiJump::NumberOfJumpsToAttempt' has a wrong offset!");

// Class Mariner.MarinerLoadingSkipWidget
// 0x0050 (0x0280 - 0x0230)
class UMarinerLoadingSkipWidget : public UUserWidget
{
public:
	uint8                                         Pad_14AA[0x10];                                    // 0x0230(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkipInputDuration;                                 // 0x0240(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WrongInputDuration;                                // 0x0244(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        Bound_ContentSwitcher;                             // 0x0248(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_LoadingPanel;                                // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_WrongInputPanel;                             // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_SkipPanel;                                   // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerCircleProgress*                 Bound_Progress;                                    // 0x0268(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14AB[0x10];                                    // 0x0270(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLoadingSkipWidget">();
	}
	static class UMarinerLoadingSkipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLoadingSkipWidget>();
	}
};
static_assert(alignof(UMarinerLoadingSkipWidget) == 0x000008, "Wrong alignment on UMarinerLoadingSkipWidget");
static_assert(sizeof(UMarinerLoadingSkipWidget) == 0x000280, "Wrong size on UMarinerLoadingSkipWidget");
static_assert(offsetof(UMarinerLoadingSkipWidget, SkipInputDuration) == 0x000240, "Member 'UMarinerLoadingSkipWidget::SkipInputDuration' has a wrong offset!");
static_assert(offsetof(UMarinerLoadingSkipWidget, WrongInputDuration) == 0x000244, "Member 'UMarinerLoadingSkipWidget::WrongInputDuration' has a wrong offset!");
static_assert(offsetof(UMarinerLoadingSkipWidget, Bound_ContentSwitcher) == 0x000248, "Member 'UMarinerLoadingSkipWidget::Bound_ContentSwitcher' has a wrong offset!");
static_assert(offsetof(UMarinerLoadingSkipWidget, Bound_LoadingPanel) == 0x000250, "Member 'UMarinerLoadingSkipWidget::Bound_LoadingPanel' has a wrong offset!");
static_assert(offsetof(UMarinerLoadingSkipWidget, Bound_WrongInputPanel) == 0x000258, "Member 'UMarinerLoadingSkipWidget::Bound_WrongInputPanel' has a wrong offset!");
static_assert(offsetof(UMarinerLoadingSkipWidget, Bound_SkipPanel) == 0x000260, "Member 'UMarinerLoadingSkipWidget::Bound_SkipPanel' has a wrong offset!");
static_assert(offsetof(UMarinerLoadingSkipWidget, Bound_Progress) == 0x000268, "Member 'UMarinerLoadingSkipWidget::Bound_Progress' has a wrong offset!");

// Class Mariner.BTTask_ReloadWeapon
// 0x0000 (0x0070 - 0x0070)
class UBTTask_ReloadWeapon final : public UBTTaskNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_ReloadWeapon">();
	}
	static class UBTTask_ReloadWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_ReloadWeapon>();
	}
};
static_assert(alignof(UBTTask_ReloadWeapon) == 0x000008, "Wrong alignment on UBTTask_ReloadWeapon");
static_assert(sizeof(UBTTask_ReloadWeapon) == 0x000070, "Wrong size on UBTTask_ReloadWeapon");

// Class Mariner.MarinerLoadEngineAsset
// 0x0048 (0x0078 - 0x0030)
class UMarinerLoadEngineAsset final : public UBlueprintAsyncActionBase
{
public:
	UMulticastInlineDelegateProperty_             LoadFinished;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             LoadFailed;                                        // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14AC[0x10];                                    // 0x0058(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAssetLoadResponse*>             AssetsToLoad;                                      // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UMarinerLoadEngineAsset* LoadEngineAssets(const class UObject* Param_WorldContextObject, const TArray<class FString>& AssetPaths);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLoadEngineAsset">();
	}
	static class UMarinerLoadEngineAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLoadEngineAsset>();
	}
};
static_assert(alignof(UMarinerLoadEngineAsset) == 0x000008, "Wrong alignment on UMarinerLoadEngineAsset");
static_assert(sizeof(UMarinerLoadEngineAsset) == 0x000078, "Wrong size on UMarinerLoadEngineAsset");
static_assert(offsetof(UMarinerLoadEngineAsset, LoadFinished) == 0x000030, "Member 'UMarinerLoadEngineAsset::LoadFinished' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEngineAsset, LoadFailed) == 0x000040, "Member 'UMarinerLoadEngineAsset::LoadFailed' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEngineAsset, WorldContextObject) == 0x000050, "Member 'UMarinerLoadEngineAsset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEngineAsset, AssetsToLoad) == 0x000068, "Member 'UMarinerLoadEngineAsset::AssetsToLoad' has a wrong offset!");

// Class Mariner.BTTask_SetBotState
// 0x0008 (0x0078 - 0x0070)
class UBTTask_SetBotState final : public UBTTaskNode
{
public:
	EMarinerBotState                              NewBotState;                                       // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14AD[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_SetBotState">();
	}
	static class UBTTask_SetBotState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_SetBotState>();
	}
};
static_assert(alignof(UBTTask_SetBotState) == 0x000008, "Wrong alignment on UBTTask_SetBotState");
static_assert(sizeof(UBTTask_SetBotState) == 0x000078, "Wrong size on UBTTask_SetBotState");
static_assert(offsetof(UBTTask_SetBotState, NewBotState) == 0x000070, "Member 'UBTTask_SetBotState::NewBotState' has a wrong offset!");

// Class Mariner.BTTask_UseItem
// 0x0000 (0x0070 - 0x0070)
class UBTTask_UseItem final : public UBTTaskNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_UseItem">();
	}
	static class UBTTask_UseItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_UseItem>();
	}
};
static_assert(alignof(UBTTask_UseItem) == 0x000008, "Wrong alignment on UBTTask_UseItem");
static_assert(sizeof(UBTTask_UseItem) == 0x000070, "Wrong size on UBTTask_UseItem");

// Class Mariner.MarinerLoadAllItemsFromCMSByType
// 0x0078 (0x00A8 - 0x0030)
class UMarinerLoadAllItemsFromCMSByType final : public UBlueprintAsyncActionBase
{
public:
	UMulticastInlineDelegateProperty_             LoadFinished;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             LoadFinishedWithGameInstance;                      // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             LoadFailed;                                        // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMarinerGameInstance>    GameInstance;                                      // 0x0068(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMangoItemType                                ItemTypeLookup;                                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14AE[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UItemLoadResponse*>              ItemsToLoad;                                       // 0x0098(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UMarinerLoadAllItemsFromCMSByType* LoadAllCMSItemsOfType(const class UObject* Param_WorldContextObject, const EMangoItemType ItemType, bool bOwnedItems, bool bUnownedItems, bool bProgressionItems, bool bBlastPassItems, bool bOfferItems, bool bCollectionItems);
	static class UMarinerLoadAllItemsFromCMSByType* LoadAllCMSItemsOfTypeWithGameInstance(TSoftObjectPtr<class UMarinerGameInstance> MarinerGameInstance, const EMangoItemType ItemType, bool bOwnedItems, bool bUnownedItems, bool bProgressionItems, bool bBlastPassItems, bool bOfferItems, bool bCollectionItems);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLoadAllItemsFromCMSByType">();
	}
	static class UMarinerLoadAllItemsFromCMSByType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLoadAllItemsFromCMSByType>();
	}
};
static_assert(alignof(UMarinerLoadAllItemsFromCMSByType) == 0x000008, "Wrong alignment on UMarinerLoadAllItemsFromCMSByType");
static_assert(sizeof(UMarinerLoadAllItemsFromCMSByType) == 0x0000A8, "Wrong size on UMarinerLoadAllItemsFromCMSByType");
static_assert(offsetof(UMarinerLoadAllItemsFromCMSByType, LoadFinished) == 0x000030, "Member 'UMarinerLoadAllItemsFromCMSByType::LoadFinished' has a wrong offset!");
static_assert(offsetof(UMarinerLoadAllItemsFromCMSByType, LoadFinishedWithGameInstance) == 0x000040, "Member 'UMarinerLoadAllItemsFromCMSByType::LoadFinishedWithGameInstance' has a wrong offset!");
static_assert(offsetof(UMarinerLoadAllItemsFromCMSByType, LoadFailed) == 0x000050, "Member 'UMarinerLoadAllItemsFromCMSByType::LoadFailed' has a wrong offset!");
static_assert(offsetof(UMarinerLoadAllItemsFromCMSByType, WorldContextObject) == 0x000060, "Member 'UMarinerLoadAllItemsFromCMSByType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UMarinerLoadAllItemsFromCMSByType, GameInstance) == 0x000068, "Member 'UMarinerLoadAllItemsFromCMSByType::GameInstance' has a wrong offset!");
static_assert(offsetof(UMarinerLoadAllItemsFromCMSByType, ItemTypeLookup) == 0x000090, "Member 'UMarinerLoadAllItemsFromCMSByType::ItemTypeLookup' has a wrong offset!");
static_assert(offsetof(UMarinerLoadAllItemsFromCMSByType, ItemsToLoad) == 0x000098, "Member 'UMarinerLoadAllItemsFromCMSByType::ItemsToLoad' has a wrong offset!");

// Class Mariner.BTTask_UseSpecialAbility
// 0x0000 (0x0070 - 0x0070)
class UBTTask_UseSpecialAbility final : public UBTTaskNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_UseSpecialAbility">();
	}
	static class UBTTask_UseSpecialAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_UseSpecialAbility>();
	}
};
static_assert(alignof(UBTTask_UseSpecialAbility) == 0x000008, "Wrong alignment on UBTTask_UseSpecialAbility");
static_assert(sizeof(UBTTask_UseSpecialAbility) == 0x000070, "Wrong size on UBTTask_UseSpecialAbility");

// Class Mariner.CollectionMode
// 0x0130 (0x01E0 - 0x00B0)
class UCollectionMode final : public UActorComponent
{
public:
	bool                                          bPreventSpawningTrophies;                          // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14B1[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULocalMessage>              RocketTrophyFeedPickupMessage;                     // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULocalMessage>              PlayerTrophyFeedPickupMessage;                     // 0x00C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULocalMessage>              RocketTrophyMedalPickupMessage;                    // 0x00C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULocalMessage>              PlayerTrophyMedalPickupMessage;                    // 0x00D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULocalMessage>              RocketObjectivePickupMessage;                      // 0x00D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULocalMessage>              PlayerObjectivePickupMessage;                      // 0x00E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AMarinerCollectableObject>  PlayerTrophyClass;                                 // 0x00E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AMarinerCollectableObject>  RocketTrophyClass;                                 // 0x00F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RocketTrophyPointValue;                            // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FriendlyTrophyPointValue;                          // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         EnemyTrophyPointValue;                             // 0x0100(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RocketTrophySpawnTime;                             // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RocketTrophyQuickSpawnTime;                        // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PlayerTrophyDamageThreshold;                       // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RocketTrophyNoPickupTime;                          // 0x0110(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PlayerTrophyFriendlyNoPickupTime;                  // 0x0114(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PlayerTrophyBlastability;                          // 0x0118(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PlayerTrophyBounceDirectionOverride;               // 0x011C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PlayerTrophyDefaultDropDirection;                  // 0x0128(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PlayerTrophyBounceOrigin;                          // 0x0134(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMarinerRocketTrophySpawnerData> RocketTrophySpawnerData;                           // 0x0140(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<TWeakObjectPtr<class AMarinerCharacter>, int32> TrophyDroppedCountMap;                             // 0x0150(0x0050)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AMarinerRocketTrophySpawner>> AvailableRocketTrophySpawners;                     // 0x01A0(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	EPlayerTrophyBounceDirectionMode              PlayerTrophyBounceDirectionMode;                   // 0x01B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14B2[0x3];                                     // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerTrophyBouncePitch;                           // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14B3[0x28];                                    // 0x01B8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AccelerateExistingRocketTrophySpawn();
	void GetTrophyType(const class AMarinerCollectableObject* CollectableObject, EMarinerTrophyType* OutTrophyType);
	void IncrementsCharacterTrophyPointsAndCount(const class AMarinerCharacter* PickedUpBy, int32 PointsToAward);
	void IncrementsTeamTrophyPoints(int32 TeamIndex, int32 PointsToAward);
	void OnAccumulatedDamageChange(const class UMarinerDamageableComponent* DamageableComponent, float NewAccumulatedDamage, float OldAccumulatedDamage);
	void OnCollectableObjectOutOfBounds(const class AMarinerCollectableObject* CollectableObject);
	void OnCollectableObjectPickedUp(const class AMarinerCharacter* PickedUpBy, class AMarinerCollectableObject* CollectableObject);
	void OnRoundBegin();
	void OnRoundReset();
	void PostInitController(class APlayerController* NewPlayer);
	void SetPlayerTrophyBlastability(float InPlayerTrophyBlastability);
	void SetPlayerTrophyBounceDirectionMode(const EPlayerTrophyBounceDirectionMode& InPlayerTrophyBounceDirectionMode);
	void SetPlayerTrophyBounceDirectionOverride(const struct FVector& InPlayerTrophyBounceDirectionOverride);
	void SetPlayerTrophyBounceOrigin(const struct FVector& InPlayerTrophyBounceOrigin);
	void SetPlayerTrophyBouncePitch(float InPitch);
	void SetTrophyHuntMaxScore(int32 InTrophyHuntMaxScore);
	void SpawnPlayerTrophy(class AMarinerCharacter* DamagedCharacter, const struct FVector& DropDirection);
	void SpawnRocketTrophy(float TimeToSpawn, class AMarinerCollectableObject* SourceTrophy, int32 SpawnerID);

	bool AreAvailableSpawners() const;
	int32 GetActiveRocketTrophySpawnerCount() const;
	int32 GetEnemyPlayerTrophyValue() const;
	int32 GetFriendPlayerTrophyValue() const;
	int32 GetQueuedRocketTrophySpawnCount() const;
	int32 GetRocketTrophiesInCirculation() const;
	int32 GetRocketTrophyValue() const;
	int32 GetTrophyRewardPoints(const class AMarinerCharacter* PickedUpBy, class AMarinerCollectableObject* CollectableObject) const;
	int32 GetTrophySpawnersCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CollectionMode">();
	}
	static class UCollectionMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCollectionMode>();
	}
};
static_assert(alignof(UCollectionMode) == 0x000008, "Wrong alignment on UCollectionMode");
static_assert(sizeof(UCollectionMode) == 0x0001E0, "Wrong size on UCollectionMode");
static_assert(offsetof(UCollectionMode, bPreventSpawningTrophies) == 0x0000B0, "Member 'UCollectionMode::bPreventSpawningTrophies' has a wrong offset!");
static_assert(offsetof(UCollectionMode, RocketTrophyFeedPickupMessage) == 0x0000B8, "Member 'UCollectionMode::RocketTrophyFeedPickupMessage' has a wrong offset!");
static_assert(offsetof(UCollectionMode, PlayerTrophyFeedPickupMessage) == 0x0000C0, "Member 'UCollectionMode::PlayerTrophyFeedPickupMessage' has a wrong offset!");
static_assert(offsetof(UCollectionMode, RocketTrophyMedalPickupMessage) == 0x0000C8, "Member 'UCollectionMode::RocketTrophyMedalPickupMessage' has a wrong offset!");
static_assert(offsetof(UCollectionMode, PlayerTrophyMedalPickupMessage) == 0x0000D0, "Member 'UCollectionMode::PlayerTrophyMedalPickupMessage' has a wrong offset!");
static_assert(offsetof(UCollectionMode, RocketObjectivePickupMessage) == 0x0000D8, "Member 'UCollectionMode::RocketObjectivePickupMessage' has a wrong offset!");
static_assert(offsetof(UCollectionMode, PlayerObjectivePickupMessage) == 0x0000E0, "Member 'UCollectionMode::PlayerObjectivePickupMessage' has a wrong offset!");
static_assert(offsetof(UCollectionMode, PlayerTrophyClass) == 0x0000E8, "Member 'UCollectionMode::PlayerTrophyClass' has a wrong offset!");
static_assert(offsetof(UCollectionMode, RocketTrophyClass) == 0x0000F0, "Member 'UCollectionMode::RocketTrophyClass' has a wrong offset!");
static_assert(offsetof(UCollectionMode, RocketTrophyPointValue) == 0x0000F8, "Member 'UCollectionMode::RocketTrophyPointValue' has a wrong offset!");
static_assert(offsetof(UCollectionMode, FriendlyTrophyPointValue) == 0x0000FC, "Member 'UCollectionMode::FriendlyTrophyPointValue' has a wrong offset!");
static_assert(offsetof(UCollectionMode, EnemyTrophyPointValue) == 0x000100, "Member 'UCollectionMode::EnemyTrophyPointValue' has a wrong offset!");
static_assert(offsetof(UCollectionMode, RocketTrophySpawnTime) == 0x000104, "Member 'UCollectionMode::RocketTrophySpawnTime' has a wrong offset!");
static_assert(offsetof(UCollectionMode, RocketTrophyQuickSpawnTime) == 0x000108, "Member 'UCollectionMode::RocketTrophyQuickSpawnTime' has a wrong offset!");
static_assert(offsetof(UCollectionMode, PlayerTrophyDamageThreshold) == 0x00010C, "Member 'UCollectionMode::PlayerTrophyDamageThreshold' has a wrong offset!");
static_assert(offsetof(UCollectionMode, RocketTrophyNoPickupTime) == 0x000110, "Member 'UCollectionMode::RocketTrophyNoPickupTime' has a wrong offset!");
static_assert(offsetof(UCollectionMode, PlayerTrophyFriendlyNoPickupTime) == 0x000114, "Member 'UCollectionMode::PlayerTrophyFriendlyNoPickupTime' has a wrong offset!");
static_assert(offsetof(UCollectionMode, PlayerTrophyBlastability) == 0x000118, "Member 'UCollectionMode::PlayerTrophyBlastability' has a wrong offset!");
static_assert(offsetof(UCollectionMode, PlayerTrophyBounceDirectionOverride) == 0x00011C, "Member 'UCollectionMode::PlayerTrophyBounceDirectionOverride' has a wrong offset!");
static_assert(offsetof(UCollectionMode, PlayerTrophyDefaultDropDirection) == 0x000128, "Member 'UCollectionMode::PlayerTrophyDefaultDropDirection' has a wrong offset!");
static_assert(offsetof(UCollectionMode, PlayerTrophyBounceOrigin) == 0x000134, "Member 'UCollectionMode::PlayerTrophyBounceOrigin' has a wrong offset!");
static_assert(offsetof(UCollectionMode, RocketTrophySpawnerData) == 0x000140, "Member 'UCollectionMode::RocketTrophySpawnerData' has a wrong offset!");
static_assert(offsetof(UCollectionMode, TrophyDroppedCountMap) == 0x000150, "Member 'UCollectionMode::TrophyDroppedCountMap' has a wrong offset!");
static_assert(offsetof(UCollectionMode, AvailableRocketTrophySpawners) == 0x0001A0, "Member 'UCollectionMode::AvailableRocketTrophySpawners' has a wrong offset!");
static_assert(offsetof(UCollectionMode, PlayerTrophyBounceDirectionMode) == 0x0001B0, "Member 'UCollectionMode::PlayerTrophyBounceDirectionMode' has a wrong offset!");
static_assert(offsetof(UCollectionMode, PlayerTrophyBouncePitch) == 0x0001B4, "Member 'UCollectionMode::PlayerTrophyBouncePitch' has a wrong offset!");

// Class Mariner.EnvQueryGenerator_ActivationDevice
// 0x0000 (0x00C0 - 0x00C0)
class UEnvQueryGenerator_ActivationDevice final : public UEnvQueryGenerator_ActorsOfClass
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryGenerator_ActivationDevice">();
	}
	static class UEnvQueryGenerator_ActivationDevice* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryGenerator_ActivationDevice>();
	}
};
static_assert(alignof(UEnvQueryGenerator_ActivationDevice) == 0x000008, "Wrong alignment on UEnvQueryGenerator_ActivationDevice");
static_assert(sizeof(UEnvQueryGenerator_ActivationDevice) == 0x0000C0, "Wrong size on UEnvQueryGenerator_ActivationDevice");

// Class Mariner.MarinerLoadTransitionWidget
// 0x0060 (0x0290 - 0x0230)
class UMarinerLoadTransitionWidget : public UUserWidget
{
public:
	uint8                                         Pad_14BA[0x60];                                    // 0x0230(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTransitionInComplete();
	void OnTransitionOutComplete();

	class UWidgetAnimation* GetTransitionInAnimation() const;
	class UWidgetAnimation* GetTransitionOutAnimation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLoadTransitionWidget">();
	}
	static class UMarinerLoadTransitionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLoadTransitionWidget>();
	}
};
static_assert(alignof(UMarinerLoadTransitionWidget) == 0x000008, "Wrong alignment on UMarinerLoadTransitionWidget");
static_assert(sizeof(UMarinerLoadTransitionWidget) == 0x000290, "Wrong size on UMarinerLoadTransitionWidget");

// Class Mariner.EnvQueryGenerator_Characters
// 0x0008 (0x00C8 - 0x00C0)
class UEnvQueryGenerator_Characters final : public UEnvQueryGenerator_ActorsOfClass
{
public:
	bool                                          bIncludeOwner;                                     // 0x00C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeOwnerTeam;                                 // 0x00C1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14BB[0x6];                                     // 0x00C2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryGenerator_Characters">();
	}
	static class UEnvQueryGenerator_Characters* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryGenerator_Characters>();
	}
};
static_assert(alignof(UEnvQueryGenerator_Characters) == 0x000008, "Wrong alignment on UEnvQueryGenerator_Characters");
static_assert(sizeof(UEnvQueryGenerator_Characters) == 0x0000C8, "Wrong size on UEnvQueryGenerator_Characters");
static_assert(offsetof(UEnvQueryGenerator_Characters, bIncludeOwner) == 0x0000C0, "Member 'UEnvQueryGenerator_Characters::bIncludeOwner' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_Characters, bIncludeOwnerTeam) == 0x0000C1, "Member 'UEnvQueryGenerator_Characters::bIncludeOwnerTeam' has a wrong offset!");

// Class Mariner.EnvQueryGenerator_Items
// 0x0000 (0x00C0 - 0x00C0)
class UEnvQueryGenerator_Items final : public UEnvQueryGenerator_ActorsOfClass
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryGenerator_Items">();
	}
	static class UEnvQueryGenerator_Items* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryGenerator_Items>();
	}
};
static_assert(alignof(UEnvQueryGenerator_Items) == 0x000008, "Wrong alignment on UEnvQueryGenerator_Items");
static_assert(sizeof(UEnvQueryGenerator_Items) == 0x0000C0, "Wrong size on UEnvQueryGenerator_Items");

// Class Mariner.MarinerLoadEquippedDataForLocalProfile
// 0x0038 (0x0068 - 0x0030)
class UMarinerLoadEquippedDataForLocalProfile final : public UBlueprintAsyncActionBase
{
public:
	UMulticastInlineDelegateProperty_             LoadFinished;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             LoadFailed;                                        // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UItemLoadResponse*>              ItemsToLoad;                                       // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UMarinerLoadEquippedDataForLocalProfile* LoadEquippedDataForLocalProfile(const class UObject* Param_WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLoadEquippedDataForLocalProfile">();
	}
	static class UMarinerLoadEquippedDataForLocalProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLoadEquippedDataForLocalProfile>();
	}
};
static_assert(alignof(UMarinerLoadEquippedDataForLocalProfile) == 0x000008, "Wrong alignment on UMarinerLoadEquippedDataForLocalProfile");
static_assert(sizeof(UMarinerLoadEquippedDataForLocalProfile) == 0x000068, "Wrong size on UMarinerLoadEquippedDataForLocalProfile");
static_assert(offsetof(UMarinerLoadEquippedDataForLocalProfile, LoadFinished) == 0x000030, "Member 'UMarinerLoadEquippedDataForLocalProfile::LoadFinished' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEquippedDataForLocalProfile, LoadFailed) == 0x000040, "Member 'UMarinerLoadEquippedDataForLocalProfile::LoadFailed' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEquippedDataForLocalProfile, WorldContextObject) == 0x000050, "Member 'UMarinerLoadEquippedDataForLocalProfile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEquippedDataForLocalProfile, ItemsToLoad) == 0x000058, "Member 'UMarinerLoadEquippedDataForLocalProfile::ItemsToLoad' has a wrong offset!");

// Class Mariner.EnvQueryGenerator_Projectiles
// 0x0008 (0x00C8 - 0x00C0)
class UEnvQueryGenerator_Projectiles final : public UEnvQueryGenerator_ActorsOfClass
{
public:
	bool                                          bIncludeOwner;                                     // 0x00C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeOwnerTeam;                                 // 0x00C1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14BC[0x6];                                     // 0x00C2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryGenerator_Projectiles">();
	}
	static class UEnvQueryGenerator_Projectiles* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryGenerator_Projectiles>();
	}
};
static_assert(alignof(UEnvQueryGenerator_Projectiles) == 0x000008, "Wrong alignment on UEnvQueryGenerator_Projectiles");
static_assert(sizeof(UEnvQueryGenerator_Projectiles) == 0x0000C8, "Wrong size on UEnvQueryGenerator_Projectiles");
static_assert(offsetof(UEnvQueryGenerator_Projectiles, bIncludeOwner) == 0x0000C0, "Member 'UEnvQueryGenerator_Projectiles::bIncludeOwner' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_Projectiles, bIncludeOwnerTeam) == 0x0000C1, "Member 'UEnvQueryGenerator_Projectiles::bIncludeOwnerTeam' has a wrong offset!");

// Class Mariner.EnvQueryTest_PlayerStat
// 0x0008 (0x01C8 - 0x01C0)
class UEnvQueryTest_PlayerStat final : public UEnvQueryTest
{
public:
	class FName                                   StatToQuery;                                       // 0x01C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_PlayerStat">();
	}
	static class UEnvQueryTest_PlayerStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_PlayerStat>();
	}
};
static_assert(alignof(UEnvQueryTest_PlayerStat) == 0x000008, "Wrong alignment on UEnvQueryTest_PlayerStat");
static_assert(sizeof(UEnvQueryTest_PlayerStat) == 0x0001C8, "Wrong size on UEnvQueryTest_PlayerStat");
static_assert(offsetof(UEnvQueryTest_PlayerStat, StatToQuery) == 0x0001C0, "Member 'UEnvQueryTest_PlayerStat::StatToQuery' has a wrong offset!");

// Class Mariner.FSGBuildInformation
// 0x0060 (0x0088 - 0x0028)
class UFSGBuildInformation final : public UObject
{
public:
	class FString                                 BuildDate;                                         // 0x0028(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 P4Changelist;                                      // 0x0038(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 P4Branch;                                          // 0x0048(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 BuilderName;                                       // 0x0058(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 BuildWorkerName;                                   // 0x0068(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 BuildNumber;                                       // 0x0078(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class FString GetBuildConfig();
	static class FString GetBuildDate();
	static class FString GetBuilderName();
	static class FString GetBuildNumber();
	static class FString GetBuildWorkerName();
	static class FString GetP4Branch();
	static class FString GetP4Changelist();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FSGBuildInformation">();
	}
	static class UFSGBuildInformation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFSGBuildInformation>();
	}
};
static_assert(alignof(UFSGBuildInformation) == 0x000008, "Wrong alignment on UFSGBuildInformation");
static_assert(sizeof(UFSGBuildInformation) == 0x000088, "Wrong size on UFSGBuildInformation");
static_assert(offsetof(UFSGBuildInformation, BuildDate) == 0x000028, "Member 'UFSGBuildInformation::BuildDate' has a wrong offset!");
static_assert(offsetof(UFSGBuildInformation, P4Changelist) == 0x000038, "Member 'UFSGBuildInformation::P4Changelist' has a wrong offset!");
static_assert(offsetof(UFSGBuildInformation, P4Branch) == 0x000048, "Member 'UFSGBuildInformation::P4Branch' has a wrong offset!");
static_assert(offsetof(UFSGBuildInformation, BuilderName) == 0x000058, "Member 'UFSGBuildInformation::BuilderName' has a wrong offset!");
static_assert(offsetof(UFSGBuildInformation, BuildWorkerName) == 0x000068, "Member 'UFSGBuildInformation::BuildWorkerName' has a wrong offset!");
static_assert(offsetof(UFSGBuildInformation, BuildNumber) == 0x000078, "Member 'UFSGBuildInformation::BuildNumber' has a wrong offset!");

// Class Mariner.MarinerParticleSystemComponent
// 0x0030 (0x0670 - 0x0640)
#pragma pack(push, 0x1)
class alignas(0x10) UMarinerParticleSystemComponent : public UParticleSystemComponent
{
public:
	struct FProjectionParameters                  CustomProjection;                                  // 0x0640(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14BD[0x10];                                    // 0x0658(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerParticleSystemComponent">();
	}
	static class UMarinerParticleSystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerParticleSystemComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UMarinerParticleSystemComponent) == 0x000010, "Wrong alignment on UMarinerParticleSystemComponent");
static_assert(sizeof(UMarinerParticleSystemComponent) == 0x000670, "Wrong size on UMarinerParticleSystemComponent");
static_assert(offsetof(UMarinerParticleSystemComponent, CustomProjection) == 0x000640, "Member 'UMarinerParticleSystemComponent::CustomProjection' has a wrong offset!");

// Class Mariner.MangoAchievementsManager
// 0x0058 (0x0098 - 0x0040)
class UMangoAchievementsManager final : public UMangoBaseManager
{
public:
	uint8                                         Pad_14BE[0x8];                                     // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarinerAchievement*>            Achievements;                                      // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14BF[0x40];                                    // 0x0058(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMangoAchievementsManager* Get(const class UObject* WorldContextObject);

	void CheckIfMultiStatAchievementUnlocked(EMarinerAchievement Achivement);
	void HandleProfileAchievements();
	void IncrementStatForAchievement(EMarinerAchievement EAchivement, int32 Value);
	void ReplaceStatForAchievement(EMarinerAchievement EAchivement, int32 Value);
	void SyncAchievements();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoAchievementsManager">();
	}
	static class UMangoAchievementsManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoAchievementsManager>();
	}
};
static_assert(alignof(UMangoAchievementsManager) == 0x000008, "Wrong alignment on UMangoAchievementsManager");
static_assert(sizeof(UMangoAchievementsManager) == 0x000098, "Wrong size on UMangoAchievementsManager");
static_assert(offsetof(UMangoAchievementsManager, Achievements) == 0x000048, "Member 'UMangoAchievementsManager::Achievements' has a wrong offset!");

// Class Mariner.MangoBlastPassManager
// 0x0108 (0x0148 - 0x0040)
class UMangoBlastPassManager final : public UMangoBaseManager
{
public:
	UMulticastInlineDelegateProperty_             OnSeasonStarted;                                   // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnSeasonEnded;                                     // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C2[0xE8];                                    // 0x0060(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMangoBlastPassManager* Get(const class UObject* WorldContextObject);

	void OnCMSLoaded();
	void SeasonEndedCallback();
	void SeasonStartedCallback();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoBlastPassManager">();
	}
	static class UMangoBlastPassManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoBlastPassManager>();
	}
};
static_assert(alignof(UMangoBlastPassManager) == 0x000008, "Wrong alignment on UMangoBlastPassManager");
static_assert(sizeof(UMangoBlastPassManager) == 0x000148, "Wrong size on UMangoBlastPassManager");
static_assert(offsetof(UMangoBlastPassManager, OnSeasonStarted) == 0x000040, "Member 'UMangoBlastPassManager::OnSeasonStarted' has a wrong offset!");
static_assert(offsetof(UMangoBlastPassManager, OnSeasonEnded) == 0x000050, "Member 'UMangoBlastPassManager::OnSeasonEnded' has a wrong offset!");

// Class Mariner.MangoCMSManager
// 0x0508 (0x0548 - 0x0040)
class UMangoCMSManager final : public UMangoBaseManager
{
public:
	UMulticastInlineDelegateProperty_             OnNewsLoaded;                                      // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C3[0x4F8];                                   // 0x0050(0x04F8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMangoCMSManager* Get(const class UObject* WorldContextObject);

	void GetSortedBlastPassOffers(const struct FMangoBlastPassDefinition& Definition, TArray<class FString>* OutOffers);
	bool IsPlaylistRanked(const struct FGuid& PlaylistUniqueId);

	struct FMangoPlaylist FindPlaylist(const struct FGuid& PlaylistGuid) const;
	const TArray<struct FMangoFeaturedOffer> GetAllFeaturedOffersPrimary() const;
	const TArray<struct FMangoFeaturedOffer> GetAllFeaturedOffersSecondary() const;
	const TArray<struct FMangoNativeOffer> GetAllNativeOffers() const;
	void GetAllNativeOffersByType(EMangoNativeOfferType Type, TArray<struct FMangoNativeOffer>* OutNativeOffers) const;
	void GetAllOffersOfType(EMangoOfferType OfferType, TArray<struct FMangoPurchaseOffer>* OutOffers) const;
	const TArray<struct FMangoPurchaseOffer> GetAllPurchaseOffers() const;
	int32 GetArtifactUnlockOrder(const class FString& ArtifactId) const;
	bool GetBlastPassItemTier(const class FString& ItemID, int32* OutTier, bool* OutIsPaid) const;
	bool GetBlastPassMaxTier(const class FString& DefinitionId, int32* OutMaxTier) const;
	int32 GetBlastPassTierPurchaseCost(const struct FMangoBlastPassDefinition& Definition, int32 MinTier, int32 MaxTier) const;
	class FString GetCMSVersion() const;
	bool GetFirstOfferContainingItem(const class FString& ItemID, struct FMangoPurchaseOffer* OutOffer) const;
	bool GetIsCrossplayKillSwitchEnabled() const;
	bool GetLoginReward(const class FName& LookupId, struct FMangoLoginReward* OutLoginReward) const;
	const TMap<class FName, struct FMangoLoginReward> GetLoginRewards() const;
	const TMap<struct FGuid, struct FMangoMap> GetMaps() const;
	const struct FMangoMatchmakingConfig GetMatchmakingConfig() const;
	const TMap<struct FGuid, struct FMangoMode> GetModes() const;
	const TArray<struct FMangoNews> GetNews() const;
	const struct FMangoNews GetNewsAtIndex(const int32 Param_Index) const;
	int32 GetNewsCount() const;
	bool GetNextArtifactUnlock(int32 CurrentArtifactLevel, struct FMangoItem* OutItem) const;
	class FText GetOfferName(const struct FMangoPurchaseOffer& Offer) const;
	class FString GetPlaylistEventId(const struct FGuid& PlaylistUniqueId) const;
	const TArray<struct FMangoPlaylist> GetPlaylists() const;
	const TArray<struct FGuid> GetPrivateMatchMaps() const;
	const TArray<struct FGuid> GetPrivateMatchModes() const;
	bool GetProgressionCharacter(const class FString& CharacterId, struct FMangoProgressionCharacterReward* OutCharacterReward) const;
	int32 GetProgressionCharacterMaxLevel(const class FString& CharacterId) const;
	bool GetProgressionItemUnlock(const class FString& ItemID, struct FMangoProgressionCharacterItemUnlock* OutItemUnlock) const;
	bool GetPurchasableCharacter(const TSoftClassPtr<class UClass>& Character, struct FMangoPurchasableCharacter* OutPurchaseCharacter) const;
	bool GetPurchaseOfferById(const class FString& LookupId, struct FMangoPurchaseOffer* OutPurchaseOffer) const;
	bool GetQuest(const class FName& LookupId, struct FMangoQuest* OutQuest) const;
	bool GetQuestReward(const class FName& LookupId, struct FMangoQuestReward* OutQuestReward) const;
	const TMap<class FName, struct FMangoQuestReward> GetQuestRewards() const;
	const TMap<class FName, struct FMangoQuest> GetQuests() const;
	bool GetQuickPlayPlaylist(struct FMangoPlaylist* OutPlaylist) const;
	bool IsFeaturedOffer(const class FString& OfferId) const;
	bool IsNewsLoaded() const;
	bool IsOfferActive(const struct FMangoPurchaseOffer& Offer) const;
	bool IsOnboardingPlaylist(const struct FGuid& PlaylistGuid) const;
	bool IsPlaylistPvEOnly(const struct FGuid& PlaylistUniqueId) const;
	const bool IsRankedPlaylistAvaliable() const;
	const bool TryGetActiveBlastPassDefinition(struct FMangoBlastPassDefinition* OutDefinition) const;
	const bool TryGetBlastPassDefinition(const class FString& DefinitionId, struct FMangoBlastPassDefinition* OutDefinition) const;
	const bool TryGetCMSItemByAssetPath(const class FString& AssetPath, EMangoItemType ItemType, struct FMangoItem* OutItem) const;
	const bool TryGetItemByCMSID(const class FString& ID, EMangoItemType Type, struct FMangoItem* OutItem) const;
	bool TryGetNativeOfferById(const class FString& ID, struct FMangoNativeOffer* OutNativeOffer) const;
	bool TryGetNativeOfferByLookupIdentifier(const class FString& LookupIdentifer, struct FMangoNativeOffer* OutNativeOffer) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoCMSManager">();
	}
	static class UMangoCMSManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoCMSManager>();
	}
};
static_assert(alignof(UMangoCMSManager) == 0x000008, "Wrong alignment on UMangoCMSManager");
static_assert(sizeof(UMangoCMSManager) == 0x000548, "Wrong size on UMangoCMSManager");
static_assert(offsetof(UMangoCMSManager, OnNewsLoaded) == 0x000040, "Member 'UMangoCMSManager::OnNewsLoaded' has a wrong offset!");

// Class Mariner.MangoDedicatedServerManager
// 0x0268 (0x02A8 - 0x0040)
class UMangoDedicatedServerManager final : public UMangoBaseManager
{
public:
	uint8                                         Pad_14E4[0x268];                                   // 0x0040(0x0268)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoDedicatedServerManager">();
	}
	static class UMangoDedicatedServerManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoDedicatedServerManager>();
	}
};
static_assert(alignof(UMangoDedicatedServerManager) == 0x000008, "Wrong alignment on UMangoDedicatedServerManager");
static_assert(sizeof(UMangoDedicatedServerManager) == 0x0002A8, "Wrong size on UMangoDedicatedServerManager");

// Class Mariner.MangoFriendsManager
// 0x0398 (0x03D8 - 0x0040)
class UMangoFriendsManager final : public UMangoBaseManager
{
public:
	uint8                                         Pad_14E5[0x398];                                   // 0x0040(0x0398)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMangoFriendsManager* Get(const class UObject* WorldContextObject);

	const bool DoesPlatformSupportFriendManagement() const;
	const bool DoesPlatformSupportViewingFriends() const;
	const bool DoesPlatformSupportViewingProfile() const;
	bool GetUserPrivilegeCanCommunicateOnline() const;
	bool GetUserPrivilegeCanCrossplay() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoFriendsManager">();
	}
	static class UMangoFriendsManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoFriendsManager>();
	}
};
static_assert(alignof(UMangoFriendsManager) == 0x000008, "Wrong alignment on UMangoFriendsManager");
static_assert(sizeof(UMangoFriendsManager) == 0x0003D8, "Wrong size on UMangoFriendsManager");

// Class Mariner.MangoInventoryManager
// 0x0778 (0x07B8 - 0x0040)
class UMangoInventoryManager final : public UMangoBaseManager
{
public:
	UMulticastInlineDelegateProperty_             OnInventoryChanged;                                // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnInventoryDeleted;                                // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnStorePurchaseComplete;                           // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnBlastPassTierPurchaseComplete;                   // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnTreasureBoxOpened;                               // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnRocketBucksValueChanged;                         // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnRocketPartsValueChanged;                         // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnNativeOfferPollCompleted;                        // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnUnviewedItemsCalculated;                         // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnItemPopupsGranted;                               // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnRewardsGranted;                                  // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E6[0x6C8];                                   // 0x00F0(0x06C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMangoInventoryManager* Get(const class UObject* WorldContextObject);

	void DeleteInventory();
	void PurchaseBlastPassTiers(const struct FMangoBlastPassDefinition& blastpass, int32 MaxTierToPurchase);
	void PurchaseOffer(const class FString& OfferId, const bool bPremium);
	void SetItemViewed(EMangoItemType ItemType, const class FString& CmsId);
	void StartNativeOfferCompletionPoll(const class FString& OrderId);

	const TMap<class FString, struct FMangoItemInventory> GetCharactersInventory() const;
	bool GetInventorySkin(const class FString& CmsId, struct FMangoItemInventory* OutSkinInventory) const;
	const TMap<class FString, struct FMangoItemInventory> GetMegaBlastsInventory() const;
	int32 GetNumOfUnviewedCharacterItems() const;
	int32 GetNumOfUnviewedTotemItems() const;
	const TMap<class FString, struct FMangoItemInventory> GetReturnTrailsInventory() const;
	int32 GetRocketBucks() const;
	int32 GetRocketParts() const;
	struct FMangoOrderDetails GetUnviewedItemPopups() const;
	bool HasUnviewedCharacterEmotes(const class UMarinerPlayableCharacter* PlayableCharacter) const;
	bool HasUnviewedCharacterEmotesOfType(const class UMarinerPlayableCharacter* PlayableCharacter, EMangoItemType ItemType) const;
	bool HasUnviewedCharacterSkins(const class UMarinerPlayableCharacter* PlayableCharacter) const;
	bool HasUnviewedItems(EMangoItemType ItemType) const;
	bool HasUnviewedSharedArtifacts() const;
	bool IsActiveBlastPassSeasonOwned() const;
	bool IsBlastPassOwned(const class FString& BlastPassId) const;
	bool IsCharacterOwned(const class UMarinerPlayableCharacter* PlayableCharacter) const;
	bool IsItemOwned(const class FString& CmsId, const EMangoItemType OwnedItemType) const;
	bool IsItemViewed(const class FString& CmsId, const EMangoItemType ViewedItemType) const;
	bool IsNativeOfferOwned(const class FString& NativeOfferId) const;
	bool IsOfferOwned(const class FString& OfferId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoInventoryManager">();
	}
	static class UMangoInventoryManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoInventoryManager>();
	}
};
static_assert(alignof(UMangoInventoryManager) == 0x000008, "Wrong alignment on UMangoInventoryManager");
static_assert(sizeof(UMangoInventoryManager) == 0x0007B8, "Wrong size on UMangoInventoryManager");
static_assert(offsetof(UMangoInventoryManager, OnInventoryChanged) == 0x000040, "Member 'UMangoInventoryManager::OnInventoryChanged' has a wrong offset!");
static_assert(offsetof(UMangoInventoryManager, OnInventoryDeleted) == 0x000050, "Member 'UMangoInventoryManager::OnInventoryDeleted' has a wrong offset!");
static_assert(offsetof(UMangoInventoryManager, OnStorePurchaseComplete) == 0x000060, "Member 'UMangoInventoryManager::OnStorePurchaseComplete' has a wrong offset!");
static_assert(offsetof(UMangoInventoryManager, OnBlastPassTierPurchaseComplete) == 0x000070, "Member 'UMangoInventoryManager::OnBlastPassTierPurchaseComplete' has a wrong offset!");
static_assert(offsetof(UMangoInventoryManager, OnTreasureBoxOpened) == 0x000080, "Member 'UMangoInventoryManager::OnTreasureBoxOpened' has a wrong offset!");
static_assert(offsetof(UMangoInventoryManager, OnRocketBucksValueChanged) == 0x000090, "Member 'UMangoInventoryManager::OnRocketBucksValueChanged' has a wrong offset!");
static_assert(offsetof(UMangoInventoryManager, OnRocketPartsValueChanged) == 0x0000A0, "Member 'UMangoInventoryManager::OnRocketPartsValueChanged' has a wrong offset!");
static_assert(offsetof(UMangoInventoryManager, OnNativeOfferPollCompleted) == 0x0000B0, "Member 'UMangoInventoryManager::OnNativeOfferPollCompleted' has a wrong offset!");
static_assert(offsetof(UMangoInventoryManager, OnUnviewedItemsCalculated) == 0x0000C0, "Member 'UMangoInventoryManager::OnUnviewedItemsCalculated' has a wrong offset!");
static_assert(offsetof(UMangoInventoryManager, OnItemPopupsGranted) == 0x0000D0, "Member 'UMangoInventoryManager::OnItemPopupsGranted' has a wrong offset!");
static_assert(offsetof(UMangoInventoryManager, OnRewardsGranted) == 0x0000E0, "Member 'UMangoInventoryManager::OnRewardsGranted' has a wrong offset!");

// Class Mariner.MangoMatchmakingManager
// 0x02C0 (0x0300 - 0x0040)
class UMangoMatchmakingManager final : public UMangoBaseManager
{
public:
	uint8                                         Pad_14F4[0x90];                                    // 0x0040(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             BP_OnMatchmakingStarted;                           // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             BP_OnMatchmakingStopped;                           // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             BP_OnMatchmakingCancelStarted;                     // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMatchmakingDescribeUpdate;                       // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             BP_OnIntermissionStarted;                          // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             BP_OnIntermissionEnded;                            // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             BP_OnAbandonmentPenaltyExpired;                    // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F5[0x1C0];                                   // 0x0140(0x01C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMangoMatchmakingManager* Get(const class UObject* WorldContextObject);

	void CancelIntermission();
	void CancelMatchmaking();
	void OnMangoProfileUpdated();
	void StartMatchmaking(const struct FGuid& PlaylistGuid);

	bool CanCancel() const;
	struct FDateTime GetAbandonmentPenaltyExpirationTime() const;
	int32 GetAbandonmentPenaltyWarningLevel() const;
	const struct FGuid GetActiveMatchmakingGuid() const;
	class FString GetActiveMatchmakingRegion() const;
	EMarinerCrossplayState GetCrossplayState() const;
	int32 GetFilterCurrentVetoes(const struct FGuid& PlaylistGuid) const;
	int32 GetFilterMaxVetoes(const struct FGuid& PlaylistGuid) const;
	float GetIntermissionTimeRemaining() const;
	int32 GetPlaylistMaxPartySize(const struct FGuid& PlaylistGuid) const;
	void InvokeOnMatchDescribeUpdate() const;
	bool IsAbandonmentPenaltyActive() const;
	bool IsIntermissionActive() const;
	bool IsLastEndedReasonFoundMatch() const;
	bool IsSearching() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoMatchmakingManager">();
	}
	static class UMangoMatchmakingManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoMatchmakingManager>();
	}
};
static_assert(alignof(UMangoMatchmakingManager) == 0x000008, "Wrong alignment on UMangoMatchmakingManager");
static_assert(sizeof(UMangoMatchmakingManager) == 0x000300, "Wrong size on UMangoMatchmakingManager");
static_assert(offsetof(UMangoMatchmakingManager, BP_OnMatchmakingStarted) == 0x0000D0, "Member 'UMangoMatchmakingManager::BP_OnMatchmakingStarted' has a wrong offset!");
static_assert(offsetof(UMangoMatchmakingManager, BP_OnMatchmakingStopped) == 0x0000E0, "Member 'UMangoMatchmakingManager::BP_OnMatchmakingStopped' has a wrong offset!");
static_assert(offsetof(UMangoMatchmakingManager, BP_OnMatchmakingCancelStarted) == 0x0000F0, "Member 'UMangoMatchmakingManager::BP_OnMatchmakingCancelStarted' has a wrong offset!");
static_assert(offsetof(UMangoMatchmakingManager, OnMatchmakingDescribeUpdate) == 0x000100, "Member 'UMangoMatchmakingManager::OnMatchmakingDescribeUpdate' has a wrong offset!");
static_assert(offsetof(UMangoMatchmakingManager, BP_OnIntermissionStarted) == 0x000110, "Member 'UMangoMatchmakingManager::BP_OnIntermissionStarted' has a wrong offset!");
static_assert(offsetof(UMangoMatchmakingManager, BP_OnIntermissionEnded) == 0x000120, "Member 'UMangoMatchmakingManager::BP_OnIntermissionEnded' has a wrong offset!");
static_assert(offsetof(UMangoMatchmakingManager, BP_OnAbandonmentPenaltyExpired) == 0x000130, "Member 'UMangoMatchmakingManager::BP_OnAbandonmentPenaltyExpired' has a wrong offset!");

// Class Mariner.MarinerMainMenuVignettesManager
// 0x00A0 (0x02B8 - 0x0218)
class AMarinerMainMenuVignettesManager final : public AActor
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0218(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class ULevelSequence>>  MenuVignettes;                                     // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class ULevelSequence>          VignetteToPlay;                                    // 0x0230(0x0028)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x0258(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULevelSequencePlayer*                   LevelSequencePlayer;                               // 0x0260(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULevelSequencePlayer*                   SequencePlayer;                                    // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           TimerHandle;                                       // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           DelayHandle;                                       // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLoop;                                             // 0x0280(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasBegunPlay;                                     // 0x0281(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsWaitingOnSequencePlayerCreation;                // 0x0282(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14F6[0x5];                                     // 0x0283(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UVignettePlaylistDataAsset*             Playlist;                                          // 0x0288(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14F7[0x28];                                    // 0x0290(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFinished();
	void OnHomeEnter();
	void OnHomeExit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMainMenuVignettesManager">();
	}
	static class AMarinerMainMenuVignettesManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerMainMenuVignettesManager>();
	}
};
static_assert(alignof(AMarinerMainMenuVignettesManager) == 0x000008, "Wrong alignment on AMarinerMainMenuVignettesManager");
static_assert(sizeof(AMarinerMainMenuVignettesManager) == 0x0002B8, "Wrong size on AMarinerMainMenuVignettesManager");
static_assert(offsetof(AMarinerMainMenuVignettesManager, DefaultSceneRoot) == 0x000218, "Member 'AMarinerMainMenuVignettesManager::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMarinerMainMenuVignettesManager, MenuVignettes) == 0x000220, "Member 'AMarinerMainMenuVignettesManager::MenuVignettes' has a wrong offset!");
static_assert(offsetof(AMarinerMainMenuVignettesManager, VignetteToPlay) == 0x000230, "Member 'AMarinerMainMenuVignettesManager::VignetteToPlay' has a wrong offset!");
static_assert(offsetof(AMarinerMainMenuVignettesManager, LevelSequenceActor) == 0x000258, "Member 'AMarinerMainMenuVignettesManager::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(AMarinerMainMenuVignettesManager, LevelSequencePlayer) == 0x000260, "Member 'AMarinerMainMenuVignettesManager::LevelSequencePlayer' has a wrong offset!");
static_assert(offsetof(AMarinerMainMenuVignettesManager, SequencePlayer) == 0x000268, "Member 'AMarinerMainMenuVignettesManager::SequencePlayer' has a wrong offset!");
static_assert(offsetof(AMarinerMainMenuVignettesManager, TimerHandle) == 0x000270, "Member 'AMarinerMainMenuVignettesManager::TimerHandle' has a wrong offset!");
static_assert(offsetof(AMarinerMainMenuVignettesManager, DelayHandle) == 0x000278, "Member 'AMarinerMainMenuVignettesManager::DelayHandle' has a wrong offset!");
static_assert(offsetof(AMarinerMainMenuVignettesManager, bLoop) == 0x000280, "Member 'AMarinerMainMenuVignettesManager::bLoop' has a wrong offset!");
static_assert(offsetof(AMarinerMainMenuVignettesManager, bHasBegunPlay) == 0x000281, "Member 'AMarinerMainMenuVignettesManager::bHasBegunPlay' has a wrong offset!");
static_assert(offsetof(AMarinerMainMenuVignettesManager, bIsWaitingOnSequencePlayerCreation) == 0x000282, "Member 'AMarinerMainMenuVignettesManager::bIsWaitingOnSequencePlayerCreation' has a wrong offset!");
static_assert(offsetof(AMarinerMainMenuVignettesManager, Playlist) == 0x000288, "Member 'AMarinerMainMenuVignettesManager::Playlist' has a wrong offset!");

// Class Mariner.MangoPartyInvitationDialog
// 0x0208 (0x0230 - 0x0028)
class UMangoPartyInvitationDialog final : public UObject
{
public:
	uint8                                         Pad_14F8[0x208];                                   // 0x0028(0x0208)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAcceptInviteButton(const struct FKey& KeyPressed);
	void OnRejectInviteButton(const struct FKey& KeyPressed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoPartyInvitationDialog">();
	}
	static class UMangoPartyInvitationDialog* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoPartyInvitationDialog>();
	}
};
static_assert(alignof(UMangoPartyInvitationDialog) == 0x000008, "Wrong alignment on UMangoPartyInvitationDialog");
static_assert(sizeof(UMangoPartyInvitationDialog) == 0x000230, "Wrong size on UMangoPartyInvitationDialog");

// Class Mariner.MangoPartyManager
// 0x0180 (0x01C0 - 0x0040)
class UMangoPartyManager final : public UMangoBaseManager
{
public:
	uint8                                         Pad_14F9[0x18];                                    // 0x0040(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             UpdatePartyBusyState;                              // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             UpdatePartyAlertUI;                                // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             UpdatePresence;                                    // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_14FA[0x120];                                   // 0x0088(0x0120)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMangoPartyInvitationDialog*>    PendingReceivedInvites;                            // 0x01A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14FB[0x8];                                     // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMangoPartyManager* Get(const class UObject* WorldContextObject);

	bool LeaveParty();
	void OnCancelJoinParty(const struct FKey& KeyPressed);
	void OnConfirmJoinParty(const struct FKey& KeyPressed);
	void OnUserSettingsChanged();

	const bool AreWePartyLeader() const;
	const EMangoPartyBusyState GetBusyState() const;
	const int32 GetPartySize() const;
	const bool IsInParty() const;
	const bool IsOurPartyCrossPlatfrom() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoPartyManager">();
	}
	static class UMangoPartyManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoPartyManager>();
	}
};
static_assert(alignof(UMangoPartyManager) == 0x000008, "Wrong alignment on UMangoPartyManager");
static_assert(sizeof(UMangoPartyManager) == 0x0001C0, "Wrong size on UMangoPartyManager");
static_assert(offsetof(UMangoPartyManager, UpdatePartyBusyState) == 0x000058, "Member 'UMangoPartyManager::UpdatePartyBusyState' has a wrong offset!");
static_assert(offsetof(UMangoPartyManager, UpdatePartyAlertUI) == 0x000068, "Member 'UMangoPartyManager::UpdatePartyAlertUI' has a wrong offset!");
static_assert(offsetof(UMangoPartyManager, UpdatePresence) == 0x000078, "Member 'UMangoPartyManager::UpdatePresence' has a wrong offset!");
static_assert(offsetof(UMangoPartyManager, PendingReceivedInvites) == 0x0001A8, "Member 'UMangoPartyManager::PendingReceivedInvites' has a wrong offset!");

// Class Mariner.MarinerWrapBoxSlot
// 0x0028 (0x0060 - 0x0038)
class UMarinerWrapBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFillEmptySpace;                                   // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14FC[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FillSpanWhenLessThan;                              // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14FD[0xE];                                     // 0x0052(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFillEmptySpace(bool InbFillEmptySpace);
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerWrapBoxSlot">();
	}
	static class UMarinerWrapBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerWrapBoxSlot>();
	}
};
static_assert(alignof(UMarinerWrapBoxSlot) == 0x000008, "Wrong alignment on UMarinerWrapBoxSlot");
static_assert(sizeof(UMarinerWrapBoxSlot) == 0x000060, "Wrong size on UMarinerWrapBoxSlot");
static_assert(offsetof(UMarinerWrapBoxSlot, Padding) == 0x000038, "Member 'UMarinerWrapBoxSlot::Padding' has a wrong offset!");
static_assert(offsetof(UMarinerWrapBoxSlot, bFillEmptySpace) == 0x000048, "Member 'UMarinerWrapBoxSlot::bFillEmptySpace' has a wrong offset!");
static_assert(offsetof(UMarinerWrapBoxSlot, FillSpanWhenLessThan) == 0x00004C, "Member 'UMarinerWrapBoxSlot::FillSpanWhenLessThan' has a wrong offset!");
static_assert(offsetof(UMarinerWrapBoxSlot, HorizontalAlignment) == 0x000050, "Member 'UMarinerWrapBoxSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UMarinerWrapBoxSlot, VerticalAlignment) == 0x000051, "Member 'UMarinerWrapBoxSlot::VerticalAlignment' has a wrong offset!");

// Class Mariner.MangoPresenceManager
// 0x0138 (0x0178 - 0x0040)
class UMangoPresenceManager final : public UMangoBaseManager
{
public:
	uint8                                         Pad_14FE[0x138];                                   // 0x0040(0x0138)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoPresenceManager">();
	}
	static class UMangoPresenceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoPresenceManager>();
	}
};
static_assert(alignof(UMangoPresenceManager) == 0x000008, "Wrong alignment on UMangoPresenceManager");
static_assert(sizeof(UMangoPresenceManager) == 0x000178, "Wrong size on UMangoPresenceManager");

// Class Mariner.MarinerMapSelectMenu
// 0x0010 (0x04F0 - 0x04E0)
class UMarinerMapSelectMenu : public UMarinerMenu
{
public:
	uint8                                         Pad_14FF[0x10];                                    // 0x04E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMapSelectMenu">();
	}
	static class UMarinerMapSelectMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMapSelectMenu>();
	}
};
static_assert(alignof(UMarinerMapSelectMenu) == 0x000008, "Wrong alignment on UMarinerMapSelectMenu");
static_assert(sizeof(UMarinerMapSelectMenu) == 0x0004F0, "Wrong size on UMarinerMapSelectMenu");

// Class Mariner.MarinerWeaponAttributes
// 0x0068 (0x0098 - 0x0030)
class UMarinerWeaponAttributes final : public UAttributeSet
{
public:
	struct FMarinerGameplayAttributeData          CurrentAmmo;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerGameplayAttributeData          MaxAmmo;                                           // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerGameplayAttributeData          FireRateMultiplier;                                // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerGameplayAttributeData          DamageDealtMultiplier;                             // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerGameplayAttributeData          ImpulseDealtMultiplier;                            // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnRepCurrentAmmo;                                  // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AMarinerCharacter*                      OwnerCharacter;                                    // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnOwnerKnockedOut();
	void OnRep_CurrentAmmo();
	void OnRep_DamageDealtMultiplier();
	void OnRep_FireRate();
	void OnRep_ImpulseDealtMultiplier();
	void OnRep_MaxAmmo();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerWeaponAttributes">();
	}
	static class UMarinerWeaponAttributes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerWeaponAttributes>();
	}
};
static_assert(alignof(UMarinerWeaponAttributes) == 0x000008, "Wrong alignment on UMarinerWeaponAttributes");
static_assert(sizeof(UMarinerWeaponAttributes) == 0x000098, "Wrong size on UMarinerWeaponAttributes");
static_assert(offsetof(UMarinerWeaponAttributes, CurrentAmmo) == 0x000030, "Member 'UMarinerWeaponAttributes::CurrentAmmo' has a wrong offset!");
static_assert(offsetof(UMarinerWeaponAttributes, MaxAmmo) == 0x000040, "Member 'UMarinerWeaponAttributes::MaxAmmo' has a wrong offset!");
static_assert(offsetof(UMarinerWeaponAttributes, FireRateMultiplier) == 0x000050, "Member 'UMarinerWeaponAttributes::FireRateMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerWeaponAttributes, DamageDealtMultiplier) == 0x000060, "Member 'UMarinerWeaponAttributes::DamageDealtMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerWeaponAttributes, ImpulseDealtMultiplier) == 0x000070, "Member 'UMarinerWeaponAttributes::ImpulseDealtMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerWeaponAttributes, OnRepCurrentAmmo) == 0x000080, "Member 'UMarinerWeaponAttributes::OnRepCurrentAmmo' has a wrong offset!");
static_assert(offsetof(UMarinerWeaponAttributes, OwnerCharacter) == 0x000090, "Member 'UMarinerWeaponAttributes::OwnerCharacter' has a wrong offset!");

// Class Mariner.MangoPrivateMatchManager
// 0x0208 (0x0248 - 0x0040)
class UMangoPrivateMatchManager final : public UMangoBaseManager
{
public:
	uint8                                         Pad_1500[0xC0];                                    // 0x0040(0x00C0)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             BP_OnPrivateMatchStarted;                          // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             BP_OnPrivateMatchStopped;                          // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1501[0x128];                                   // 0x0120(0x0128)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMangoPrivateMatchManager* Get(const class UObject* WorldContextObject);

	void OnPartyBusyStateChanged(EMangoPartyBusyState State);
	void SetPrivateMatchLobbyMap(const struct FGuid& MapId);
	void SetPrivateMatchLobbyMode(const struct FGuid& ModeID);
	void StartPrivateMatch();

	const struct FGuid GetPrivateMatchLobbyMap() const;
	const struct FGuid GetPrivateMatchLobbyMode() const;
	bool IsAllocationInProgress() const;
	bool IsPrivateMatchSession() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoPrivateMatchManager">();
	}
	static class UMangoPrivateMatchManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoPrivateMatchManager>();
	}
};
static_assert(alignof(UMangoPrivateMatchManager) == 0x000008, "Wrong alignment on UMangoPrivateMatchManager");
static_assert(sizeof(UMangoPrivateMatchManager) == 0x000248, "Wrong size on UMangoPrivateMatchManager");
static_assert(offsetof(UMangoPrivateMatchManager, BP_OnPrivateMatchStarted) == 0x000100, "Member 'UMangoPrivateMatchManager::BP_OnPrivateMatchStarted' has a wrong offset!");
static_assert(offsetof(UMangoPrivateMatchManager, BP_OnPrivateMatchStopped) == 0x000110, "Member 'UMangoPrivateMatchManager::BP_OnPrivateMatchStopped' has a wrong offset!");

// Class Mariner.MangoQOSManager
// 0x0170 (0x01B0 - 0x0040)
class UMangoQOSManager final : public UMangoBaseManager
{
public:
	uint8                                         Pad_1502[0x110];                                   // 0x0040(0x0110)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultNumTestsPerRegion;                          // 0x0150(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DefaultTimeout;                                    // 0x0154(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PollTimeSeconds;                                   // 0x0158(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1503[0x54];                                    // 0x015C(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMangoQOSManager* Get(const class UObject* WorldContextObject);

	class FString GetRecommendedMatchmakingRegion() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoQOSManager">();
	}
	static class UMangoQOSManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoQOSManager>();
	}
};
static_assert(alignof(UMangoQOSManager) == 0x000008, "Wrong alignment on UMangoQOSManager");
static_assert(sizeof(UMangoQOSManager) == 0x0001B0, "Wrong size on UMangoQOSManager");
static_assert(offsetof(UMangoQOSManager, DefaultNumTestsPerRegion) == 0x000150, "Member 'UMangoQOSManager::DefaultNumTestsPerRegion' has a wrong offset!");
static_assert(offsetof(UMangoQOSManager, DefaultTimeout) == 0x000154, "Member 'UMangoQOSManager::DefaultTimeout' has a wrong offset!");
static_assert(offsetof(UMangoQOSManager, PollTimeSeconds) == 0x000158, "Member 'UMangoQOSManager::PollTimeSeconds' has a wrong offset!");

// Class Mariner.MangoStoreManager
// 0x0030 (0x0070 - 0x0040)
class UMangoStoreManager final : public UMangoBaseManager
{
public:
	UMulticastInlineDelegateProperty_             OnOfferStateChanged;                               // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1504[0x20];                                    // 0x0050(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMangoStoreManager* Get(const class UObject* WorldContextObject);

	void OfferTimerCallback();
	void OnCMSLoaded();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoStoreManager">();
	}
	static class UMangoStoreManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoStoreManager>();
	}
};
static_assert(alignof(UMangoStoreManager) == 0x000008, "Wrong alignment on UMangoStoreManager");
static_assert(sizeof(UMangoStoreManager) == 0x000070, "Wrong size on UMangoStoreManager");
static_assert(offsetof(UMangoStoreManager, OnOfferStateChanged) == 0x000040, "Member 'UMangoStoreManager::OnOfferStateChanged' has a wrong offset!");

// Class Mariner.MarinerHUDWidget
// 0x0048 (0x0460 - 0x0418)
class UMarinerHUDWidget : public UMarinerAnimatedWidget
{
public:
	TArray<TSubclassOf<class UMarinerHUDState>>   AllowedStateList;                                  // 0x0418(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UMarinerHUDState>>   ExcludedStateList;                                 // 0x0428(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bExternalWidgetAllowed;                            // 0x0438(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInternalWidgetAllowed;                            // 0x0439(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1505[0x16];                                    // 0x043A(0x0016)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarinerHUDWidget*>              ChildHUDWidgets;                                   // 0x0450(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void AddAllowedState(TSubclassOf<class UMarinerHUDState> State);
	void AddExcludedState(TSubclassOf<class UMarinerHUDState> State);
	void BPOnCharacterPossessed(class AMarinerCharacter* Character);
	void BPOnCharacterUnpossessed(class AMarinerCharacter* Character);
	void OnPossessPawn(class AMarinerPlayerController* PossessingController, class APawn* PossessedPawn);
	void OnUnpossessPawn(class AMarinerPlayerController* UnpossessingController, class APawn* UnpossessedPawn);
	void RemoveAllowedState(TSubclassOf<class UMarinerHUDState> State);
	void RemoveExcludedState(TSubclassOf<class UMarinerHUDState> State);
	void SetExternalWidgetAllowed(bool bAllowed);
	void SetInternalWidgetAllowed(bool bAllowed);

	class AMarinerHUD* GetMarinerHUD() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerHUDWidget">();
	}
	static class UMarinerHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerHUDWidget>();
	}
};
static_assert(alignof(UMarinerHUDWidget) == 0x000008, "Wrong alignment on UMarinerHUDWidget");
static_assert(sizeof(UMarinerHUDWidget) == 0x000460, "Wrong size on UMarinerHUDWidget");
static_assert(offsetof(UMarinerHUDWidget, AllowedStateList) == 0x000418, "Member 'UMarinerHUDWidget::AllowedStateList' has a wrong offset!");
static_assert(offsetof(UMarinerHUDWidget, ExcludedStateList) == 0x000428, "Member 'UMarinerHUDWidget::ExcludedStateList' has a wrong offset!");
static_assert(offsetof(UMarinerHUDWidget, bExternalWidgetAllowed) == 0x000438, "Member 'UMarinerHUDWidget::bExternalWidgetAllowed' has a wrong offset!");
static_assert(offsetof(UMarinerHUDWidget, bInternalWidgetAllowed) == 0x000439, "Member 'UMarinerHUDWidget::bInternalWidgetAllowed' has a wrong offset!");
static_assert(offsetof(UMarinerHUDWidget, ChildHUDWidgets) == 0x000450, "Member 'UMarinerHUDWidget::ChildHUDWidgets' has a wrong offset!");

// Class Mariner.MarinerMessageWidget
// 0x00A0 (0x0500 - 0x0460)
#pragma pack(push, 0x1)
class alignas(0x10) UMarinerMessageWidget : public UMarinerHUDWidget
{
public:
	class FName                                   MessageType;                                       // 0x0460(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldQueueMessages;                              // 0x0468(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1506[0x3];                                     // 0x0469(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultMessageDuration;                            // 0x046C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           Bound_MessagePanel;                                // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMessageWidgetPoolData>         MessageWidgetsPoolData;                            // 0x0478(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class UUserWidget>, struct FMessageWidgetPool> MessageWidgetsMap;                                 // 0x0488(0x0050)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1507[0x20];                                    // 0x04D8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UUserWidget* AddWidgetFromPool(TSubclassOf<class UUserWidget> WidgetClassToAdd);
	void AddWidgetToPanel(class UUserWidget* Widget, bool bFeedFromTop);
	void OnDiscardedMessage(class UMarinerLocalMessage* MessageCDO, class APlayerState* RelatedPlayerState1, class APlayerState* RelatedPlayerState2, class UObject* OptionalObject);
	void OnEnqueuedMessage(class UMarinerLocalMessage* MessageCDO, class APlayerState* RelatedPlayerState1, class APlayerState* RelatedPlayerState2, class UObject* OptionalObject);
	void OnReceiveMessage(class UMarinerLocalMessage* MessageCDO, class APlayerState* RelatedPlayerState1, class APlayerState* RelatedPlayerState2, class UObject* OptionalObject);
	void ReleaseWidgetToPool(class UUserWidget* MessageWidget);

	bool ShouldEnqueueMessage(class UMarinerLocalMessage* MessageCDO, class APlayerState* RelatedPlayerState1, class APlayerState* RelatedPlayerState2, class UObject* OptionalObject) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMessageWidget">();
	}
	static class UMarinerMessageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMessageWidget>();
	}
};
#pragma pack(pop)
static_assert(alignof(UMarinerMessageWidget) == 0x000010, "Wrong alignment on UMarinerMessageWidget");
static_assert(sizeof(UMarinerMessageWidget) == 0x000500, "Wrong size on UMarinerMessageWidget");
static_assert(offsetof(UMarinerMessageWidget, MessageType) == 0x000460, "Member 'UMarinerMessageWidget::MessageType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageWidget, bShouldQueueMessages) == 0x000468, "Member 'UMarinerMessageWidget::bShouldQueueMessages' has a wrong offset!");
static_assert(offsetof(UMarinerMessageWidget, DefaultMessageDuration) == 0x00046C, "Member 'UMarinerMessageWidget::DefaultMessageDuration' has a wrong offset!");
static_assert(offsetof(UMarinerMessageWidget, Bound_MessagePanel) == 0x000470, "Member 'UMarinerMessageWidget::Bound_MessagePanel' has a wrong offset!");
static_assert(offsetof(UMarinerMessageWidget, MessageWidgetsPoolData) == 0x000478, "Member 'UMarinerMessageWidget::MessageWidgetsPoolData' has a wrong offset!");
static_assert(offsetof(UMarinerMessageWidget, MessageWidgetsMap) == 0x000488, "Member 'UMarinerMessageWidget::MessageWidgetsMap' has a wrong offset!");

// Class Mariner.MangoTxnManager
// 0x0120 (0x0160 - 0x0040)
class UMangoTxnManager final : public UMangoBaseManager
{
public:
	uint8                                         Pad_150A[0x120];                                   // 0x0040(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMangoTxnManager* Get(const class UObject* WorldContextObject);

	void InitPurchase(const class FString& NativeOfferId, TDelegate<void(EMangoNativePurchaseCompleteReason CompleteReason, const class FString& OrderId, struct FMangoOrderDetails& OrderDetails)> OnNativePurchaseComplete);

	class FText GetDisplayPriceForNativeOfferId(const class FString& NativeOfferId) const;
	bool GetOriginAccessDiscountActive(float* OutDiscountPercent) const;
	bool GetPricingInformationForNativeOfferId(const class FString& NativeOfferId, class FText* OutDisplayPrice, class FText* OutRegularPrice, bool* OutIsOnSale) const;
	bool GetStringsForNativeOfferId(const class FString& NativeOfferId, class FText* OutTitle, class FText* OutDescription, class FText* OutLongDescription) const;
	bool IsAllowedToPurchase() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MangoTxnManager">();
	}
	static class UMangoTxnManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMangoTxnManager>();
	}
};
static_assert(alignof(UMangoTxnManager) == 0x000008, "Wrong alignment on UMangoTxnManager");
static_assert(sizeof(UMangoTxnManager) == 0x000160, "Wrong size on UMangoTxnManager");

// Class Mariner.MarinerAbility_ApplyEffectsToItemHolder
// 0x0020 (0x0420 - 0x0400)
class UMarinerAbility_ApplyEffectsToItemHolder final : public UGameplayAbility
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    GameplayEffectsToApply;                            // 0x0400(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bApplyEffectsToOwningCharacter;                    // 0x0410(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyEffectsInAOE;                                // 0x0411(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_150E[0x2];                                     // 0x0412(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AreaOfEffectRange;                                 // 0x0414(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamToApplyTo                                TeamToApplyTo;                                     // 0x0418(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_150F[0x4];                                     // 0x041C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbility_ApplyEffectsToItemHolder">();
	}
	static class UMarinerAbility_ApplyEffectsToItemHolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbility_ApplyEffectsToItemHolder>();
	}
};
static_assert(alignof(UMarinerAbility_ApplyEffectsToItemHolder) == 0x000008, "Wrong alignment on UMarinerAbility_ApplyEffectsToItemHolder");
static_assert(sizeof(UMarinerAbility_ApplyEffectsToItemHolder) == 0x000420, "Wrong size on UMarinerAbility_ApplyEffectsToItemHolder");
static_assert(offsetof(UMarinerAbility_ApplyEffectsToItemHolder, GameplayEffectsToApply) == 0x000400, "Member 'UMarinerAbility_ApplyEffectsToItemHolder::GameplayEffectsToApply' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyEffectsToItemHolder, bApplyEffectsToOwningCharacter) == 0x000410, "Member 'UMarinerAbility_ApplyEffectsToItemHolder::bApplyEffectsToOwningCharacter' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyEffectsToItemHolder, bApplyEffectsInAOE) == 0x000411, "Member 'UMarinerAbility_ApplyEffectsToItemHolder::bApplyEffectsInAOE' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyEffectsToItemHolder, AreaOfEffectRange) == 0x000414, "Member 'UMarinerAbility_ApplyEffectsToItemHolder::AreaOfEffectRange' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyEffectsToItemHolder, TeamToApplyTo) == 0x000418, "Member 'UMarinerAbility_ApplyEffectsToItemHolder::TeamToApplyTo' has a wrong offset!");

// Class Mariner.MarinerCMSItemDataAsset
// 0x0038 (0x0068 - 0x0030)
class UMarinerCMSItemDataAsset : public UDataAsset
{
public:
	TSoftObjectPtr<class UMarinerLootCardDataAsset> LootCard;                                          // 0x0030(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerRarityDataAsset*                Rarity;                                            // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1510[0x4];                                     // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EMangoItemType GetItemType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCMSItemDataAsset">();
	}
	static class UMarinerCMSItemDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCMSItemDataAsset>();
	}
};
static_assert(alignof(UMarinerCMSItemDataAsset) == 0x000008, "Wrong alignment on UMarinerCMSItemDataAsset");
static_assert(sizeof(UMarinerCMSItemDataAsset) == 0x000068, "Wrong size on UMarinerCMSItemDataAsset");
static_assert(offsetof(UMarinerCMSItemDataAsset, LootCard) == 0x000030, "Member 'UMarinerCMSItemDataAsset::LootCard' has a wrong offset!");
static_assert(offsetof(UMarinerCMSItemDataAsset, Rarity) == 0x000058, "Member 'UMarinerCMSItemDataAsset::Rarity' has a wrong offset!");
static_assert(offsetof(UMarinerCMSItemDataAsset, SortID) == 0x000060, "Member 'UMarinerCMSItemDataAsset::SortID' has a wrong offset!");

// Class Mariner.MarinerCMSItemWithIcon
// 0x0008 (0x0070 - 0x0068)
class UMarinerCMSItemWithIcon : public UMarinerCMSItemDataAsset
{
public:
	class UTexture2D*                             ButtonIcon;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	const struct FSlateBrush GetBrushFromCMSItem();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCMSItemWithIcon">();
	}
	static class UMarinerCMSItemWithIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCMSItemWithIcon>();
	}
};
static_assert(alignof(UMarinerCMSItemWithIcon) == 0x000008, "Wrong alignment on UMarinerCMSItemWithIcon");
static_assert(sizeof(UMarinerCMSItemWithIcon) == 0x000070, "Wrong size on UMarinerCMSItemWithIcon");
static_assert(offsetof(UMarinerCMSItemWithIcon, ButtonIcon) == 0x000068, "Member 'UMarinerCMSItemWithIcon::ButtonIcon' has a wrong offset!");

// Class Mariner.MarinerMegaBlastDataAsset
// 0x0040 (0x00B0 - 0x0070)
class UMarinerMegaBlastDataAsset final : public UMarinerCMSItemWithIcon
{
public:
	class UParticleSystem*                        MegaBlastFX;                                       // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UParticleSystem>         MegaBlastFrontendVisualizerFX;                     // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          MegaBlastAudio;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerWeaponMontage*                  Animation;                                         // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMegaBlastDataAsset">();
	}
	static class UMarinerMegaBlastDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMegaBlastDataAsset>();
	}
};
static_assert(alignof(UMarinerMegaBlastDataAsset) == 0x000008, "Wrong alignment on UMarinerMegaBlastDataAsset");
static_assert(sizeof(UMarinerMegaBlastDataAsset) == 0x0000B0, "Wrong size on UMarinerMegaBlastDataAsset");
static_assert(offsetof(UMarinerMegaBlastDataAsset, MegaBlastFX) == 0x000070, "Member 'UMarinerMegaBlastDataAsset::MegaBlastFX' has a wrong offset!");
static_assert(offsetof(UMarinerMegaBlastDataAsset, MegaBlastFrontendVisualizerFX) == 0x000078, "Member 'UMarinerMegaBlastDataAsset::MegaBlastFrontendVisualizerFX' has a wrong offset!");
static_assert(offsetof(UMarinerMegaBlastDataAsset, MegaBlastAudio) == 0x0000A0, "Member 'UMarinerMegaBlastDataAsset::MegaBlastAudio' has a wrong offset!");
static_assert(offsetof(UMarinerMegaBlastDataAsset, Animation) == 0x0000A8, "Member 'UMarinerMegaBlastDataAsset::Animation' has a wrong offset!");

// Class Mariner.MarinerAbility_ApplyRootMotion
// 0x00A0 (0x0778 - 0x06D8)
class UMarinerAbility_ApplyRootMotion final : public UMarinerAbility
{
public:
	EMarinerAbilityMoveStartPolicy                StartPolicy;                                       // 0x06D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1511[0x3];                                     // 0x06D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartDelaySeconds;                                 // 0x06DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackDamageAccrual;                               // 0x06E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1512[0x3];                                     // 0x06E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageHistoryMaxTime;                              // 0x06E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InterruptDamageThreshold;                          // 0x06E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1513[0x4];                                     // 0x06EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            HorizontalMoveCurve;                               // 0x06F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            VerticalMoveCurve;                                 // 0x06F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveVector*                           PathOffsetCurve;                                   // 0x0700(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            TimeMappingCurve;                                  // 0x0708(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TargetLocationOffset;                              // 0x0710(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveSpeed;                                         // 0x071C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumTargetDistanceToMove;                       // 0x0720(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClampVelocityOnEndMove;                            // 0x0724(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ForceName;                                         // 0x0728(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>    EffectsToApplyOnStartMove;                         // 0x0730(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_1514[0x18];                                    // 0x0740(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0758(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1515[0x18];                                    // 0x0760(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<TSubclassOf<class UGameplayEffect>> BP_AddEffectsToDefaultApplyOnStartMove();
	void BP_OnAbilityInputPressedAgainWhileMoving();
	void BP_OnAbilityInputReleasedWhileMoving();
	void BP_OnExceededDamageTolerance(float Damage);
	void BP_OnMoveStarted();
	TArray<TSubclassOf<class UGameplayEffect>> GetEffectsToApplyOnStartMove();
	void OnExceededDamageTolerance(class AActor* DamagedActor, float Damage);
	void SetRetainMomentum(bool bNewRetainMomentum);
	void SetTargetActor(class AActor* NewTarget);
	void StartMove();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbility_ApplyRootMotion">();
	}
	static class UMarinerAbility_ApplyRootMotion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbility_ApplyRootMotion>();
	}
};
static_assert(alignof(UMarinerAbility_ApplyRootMotion) == 0x000008, "Wrong alignment on UMarinerAbility_ApplyRootMotion");
static_assert(sizeof(UMarinerAbility_ApplyRootMotion) == 0x000778, "Wrong size on UMarinerAbility_ApplyRootMotion");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, StartPolicy) == 0x0006D8, "Member 'UMarinerAbility_ApplyRootMotion::StartPolicy' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, StartDelaySeconds) == 0x0006DC, "Member 'UMarinerAbility_ApplyRootMotion::StartDelaySeconds' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, bTrackDamageAccrual) == 0x0006E0, "Member 'UMarinerAbility_ApplyRootMotion::bTrackDamageAccrual' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, DamageHistoryMaxTime) == 0x0006E4, "Member 'UMarinerAbility_ApplyRootMotion::DamageHistoryMaxTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, InterruptDamageThreshold) == 0x0006E8, "Member 'UMarinerAbility_ApplyRootMotion::InterruptDamageThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, HorizontalMoveCurve) == 0x0006F0, "Member 'UMarinerAbility_ApplyRootMotion::HorizontalMoveCurve' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, VerticalMoveCurve) == 0x0006F8, "Member 'UMarinerAbility_ApplyRootMotion::VerticalMoveCurve' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, PathOffsetCurve) == 0x000700, "Member 'UMarinerAbility_ApplyRootMotion::PathOffsetCurve' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, TimeMappingCurve) == 0x000708, "Member 'UMarinerAbility_ApplyRootMotion::TimeMappingCurve' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, TargetLocationOffset) == 0x000710, "Member 'UMarinerAbility_ApplyRootMotion::TargetLocationOffset' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, MoveSpeed) == 0x00071C, "Member 'UMarinerAbility_ApplyRootMotion::MoveSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, MinimumTargetDistanceToMove) == 0x000720, "Member 'UMarinerAbility_ApplyRootMotion::MinimumTargetDistanceToMove' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, ClampVelocityOnEndMove) == 0x000724, "Member 'UMarinerAbility_ApplyRootMotion::ClampVelocityOnEndMove' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, ForceName) == 0x000728, "Member 'UMarinerAbility_ApplyRootMotion::ForceName' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, EffectsToApplyOnStartMove) == 0x000730, "Member 'UMarinerAbility_ApplyRootMotion::EffectsToApplyOnStartMove' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ApplyRootMotion, TargetActor) == 0x000758, "Member 'UMarinerAbility_ApplyRootMotion::TargetActor' has a wrong offset!");

// Class Mariner.MarinerAbility_Projectile_Base
// 0x0188 (0x0860 - 0x06D8)
class UMarinerAbility_Projectile_Base : public UMarinerAbility
{
public:
	UMulticastInlineDelegateProperty_             OnProjectileSpawned;                               // 0x06D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnProjectileSpawnDelayExpiredDelegate;             // 0x06E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPreReleaseToSpawn;                               // 0x06F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             HeldTimeThreshold;                                 // 0x0708(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarinerProjectile>         DefaultProjectileType;                             // 0x0718(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerSpawnSocketSource                     ProjectileFireSocketSource;                        // 0x0720(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerProjectileAbilitySpawnPolicy          SpawnPolicy;                                       // 0x0721(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerProjectileAbilityEndPolicy            EndPolicy;                                         // 0x0722(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1517[0x1];                                     // 0x0723(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProjectileFireSocketName;                          // 0x0724(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpawnDelayTime;                                    // 0x072C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           SpawnDelayTimer;                                   // 0x0730(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1518[0x30];                                    // 0x0738(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerTask_SpawnProjectile_Base*      SpawnProjectileTask;                               // 0x0768(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FProjectileType>                ProjectilePoolMapping;                             // 0x0770(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bRestrictActivationFX;                             // 0x0780(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1519[0x7];                                     // 0x0781(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PooledProjectileSpawnZRelativeToKillZ;             // 0x0788(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_151A[0x4];                                     // 0x078C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, float>                            InputHeldThresholdNotifies;                        // 0x0790(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_151B[0x50];                                    // 0x07E0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputHeldThresholdTimeDilation;                    // 0x0830(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LocallyControlledInputPressTimestamp;              // 0x0834(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerInputPressTimestamp;                         // 0x0838(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LocallyControlledInputHeldTime;                    // 0x083C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InputHeldTime;                                     // 0x0840(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerInputHeldTime;                               // 0x0844(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LocallyControlledInputReleaseTimestamp;            // 0x0848(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerInputReleaseTimestamp;                       // 0x084C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_151C[0x10];                                    // 0x0850(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyLocalMuzzleFlashFX();
	void BP_OnInputHeldThresholdExpired(float ThresholdTime, int32 ThresholdID);
	void BP_OnProjectileDestroyed(const struct FGameplayAbilityActorInfo& ActorInfo);
	void BP_OnProjectileSpawned(const struct FGameplayAbilityActorInfo& ActorInfo, class AMarinerProjectile* SpawnedProjectile);
	void BP_OnProjectileSpawned_Authority(const struct FGameplayAbilityActorInfo& ActorInfo, class AMarinerProjectile* SpawnedProjectile);
	float GetInputHeldThresholdCompletionRatio(int32 ID);
	struct FTransform GetProjectileSpawnTransformOverride();
	void InitProjectile(class AActor* ProjectileActor);
	void InputHeldThresholdExpired(float ThresholdTime, int32 ThresholdID);
	class FName ModifyProjectileFireSocketName(class FName OrigSocketName);
	void OnProjectileDestroyed(class AActor* DestroyedActor);
	void OnProjectileDestroyed_All();
	void OnProjectileDestroyed_Authority();
	void OnProjectileDestroyed_AuthorityWrapper();
	void OnProjectileFailedToSpawn();
	void OnProjectileFinishedSpawning(class AMarinerProjectile* SpawnedProjectile);
	void OnSpawnDelayExpired();
	void PauseAllLocalThresholdEventTimers();
	void ServerInputReleased(float ClientTimeReleased, const struct FGameplayAbilityTargetDataHandle& ReleaseAimData);
	void SetLocalInputHeldTimeDilation(float NewTimeDilation);
	void TryAndGetProjectilePool(const TSubclassOf<class AMarinerProjectile>& ProjectileClass, TArray<class AMarinerProjectile*>* OutProjectilePool, bool* bIsValid);
	void TryAndSpawnProjectile();

	TSubclassOf<class AMarinerProjectile> GetProjectileType() const;
	bool IsTryingToSpawnProjectile() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbility_Projectile_Base">();
	}
	static class UMarinerAbility_Projectile_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbility_Projectile_Base>();
	}
};
static_assert(alignof(UMarinerAbility_Projectile_Base) == 0x000008, "Wrong alignment on UMarinerAbility_Projectile_Base");
static_assert(sizeof(UMarinerAbility_Projectile_Base) == 0x000860, "Wrong size on UMarinerAbility_Projectile_Base");
static_assert(offsetof(UMarinerAbility_Projectile_Base, OnProjectileSpawned) == 0x0006D8, "Member 'UMarinerAbility_Projectile_Base::OnProjectileSpawned' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, OnProjectileSpawnDelayExpiredDelegate) == 0x0006E8, "Member 'UMarinerAbility_Projectile_Base::OnProjectileSpawnDelayExpiredDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, OnPreReleaseToSpawn) == 0x0006F8, "Member 'UMarinerAbility_Projectile_Base::OnPreReleaseToSpawn' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, HeldTimeThreshold) == 0x000708, "Member 'UMarinerAbility_Projectile_Base::HeldTimeThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, DefaultProjectileType) == 0x000718, "Member 'UMarinerAbility_Projectile_Base::DefaultProjectileType' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, ProjectileFireSocketSource) == 0x000720, "Member 'UMarinerAbility_Projectile_Base::ProjectileFireSocketSource' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, SpawnPolicy) == 0x000721, "Member 'UMarinerAbility_Projectile_Base::SpawnPolicy' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, EndPolicy) == 0x000722, "Member 'UMarinerAbility_Projectile_Base::EndPolicy' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, ProjectileFireSocketName) == 0x000724, "Member 'UMarinerAbility_Projectile_Base::ProjectileFireSocketName' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, SpawnDelayTime) == 0x00072C, "Member 'UMarinerAbility_Projectile_Base::SpawnDelayTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, SpawnDelayTimer) == 0x000730, "Member 'UMarinerAbility_Projectile_Base::SpawnDelayTimer' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, SpawnProjectileTask) == 0x000768, "Member 'UMarinerAbility_Projectile_Base::SpawnProjectileTask' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, ProjectilePoolMapping) == 0x000770, "Member 'UMarinerAbility_Projectile_Base::ProjectilePoolMapping' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, bRestrictActivationFX) == 0x000780, "Member 'UMarinerAbility_Projectile_Base::bRestrictActivationFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, PooledProjectileSpawnZRelativeToKillZ) == 0x000788, "Member 'UMarinerAbility_Projectile_Base::PooledProjectileSpawnZRelativeToKillZ' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, InputHeldThresholdNotifies) == 0x000790, "Member 'UMarinerAbility_Projectile_Base::InputHeldThresholdNotifies' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, InputHeldThresholdTimeDilation) == 0x000830, "Member 'UMarinerAbility_Projectile_Base::InputHeldThresholdTimeDilation' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, LocallyControlledInputPressTimestamp) == 0x000834, "Member 'UMarinerAbility_Projectile_Base::LocallyControlledInputPressTimestamp' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, ServerInputPressTimestamp) == 0x000838, "Member 'UMarinerAbility_Projectile_Base::ServerInputPressTimestamp' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, LocallyControlledInputHeldTime) == 0x00083C, "Member 'UMarinerAbility_Projectile_Base::LocallyControlledInputHeldTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, InputHeldTime) == 0x000840, "Member 'UMarinerAbility_Projectile_Base::InputHeldTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, ServerInputHeldTime) == 0x000844, "Member 'UMarinerAbility_Projectile_Base::ServerInputHeldTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, LocallyControlledInputReleaseTimestamp) == 0x000848, "Member 'UMarinerAbility_Projectile_Base::LocallyControlledInputReleaseTimestamp' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile_Base, ServerInputReleaseTimestamp) == 0x00084C, "Member 'UMarinerAbility_Projectile_Base::ServerInputReleaseTimestamp' has a wrong offset!");

// Class Mariner.MarinerArenaBoundary
// 0x0070 (0x0288 - 0x0218)
class AMarinerArenaBoundary : public AActor
{
public:
	class UPrimitiveComponent*                    KnockoutVolume;                                    // 0x0218(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPrimitiveComponent*                    SafeVolume;                                        // 0x0220(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBillboardComponent*                    EditorSpriteComponent;                             // 0x0228(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCollisionResponseContainer            KnockoutVolumeCollision;                           // 0x0230(0x0020)(Edit, DisableEditOnTemplate, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FCollisionResponseContainer            SafeVolumeCollision;                               // 0x0250(0x0020)(Edit, DisableEditOnTemplate, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         DangerZoneSizeRatio;                               // 0x0270(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EArenaBoundaryBlockedArea                     BlockedArea;                                       // 0x0274(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_151F[0x3];                                     // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              KnockoutVolumeMaterial;                            // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterial*                              SafeVolumeMaterial;                                // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	EArenaBoundaryBlockedArea GetBlockedArea();
	void OnKnockoutVolumeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnKnockoutVolumeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex);
	void OnSafeVolumeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnSafeVolumeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerArenaBoundary">();
	}
	static class AMarinerArenaBoundary* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerArenaBoundary>();
	}
};
static_assert(alignof(AMarinerArenaBoundary) == 0x000008, "Wrong alignment on AMarinerArenaBoundary");
static_assert(sizeof(AMarinerArenaBoundary) == 0x000288, "Wrong size on AMarinerArenaBoundary");
static_assert(offsetof(AMarinerArenaBoundary, KnockoutVolume) == 0x000218, "Member 'AMarinerArenaBoundary::KnockoutVolume' has a wrong offset!");
static_assert(offsetof(AMarinerArenaBoundary, SafeVolume) == 0x000220, "Member 'AMarinerArenaBoundary::SafeVolume' has a wrong offset!");
static_assert(offsetof(AMarinerArenaBoundary, EditorSpriteComponent) == 0x000228, "Member 'AMarinerArenaBoundary::EditorSpriteComponent' has a wrong offset!");
static_assert(offsetof(AMarinerArenaBoundary, KnockoutVolumeCollision) == 0x000230, "Member 'AMarinerArenaBoundary::KnockoutVolumeCollision' has a wrong offset!");
static_assert(offsetof(AMarinerArenaBoundary, SafeVolumeCollision) == 0x000250, "Member 'AMarinerArenaBoundary::SafeVolumeCollision' has a wrong offset!");
static_assert(offsetof(AMarinerArenaBoundary, DangerZoneSizeRatio) == 0x000270, "Member 'AMarinerArenaBoundary::DangerZoneSizeRatio' has a wrong offset!");
static_assert(offsetof(AMarinerArenaBoundary, BlockedArea) == 0x000274, "Member 'AMarinerArenaBoundary::BlockedArea' has a wrong offset!");
static_assert(offsetof(AMarinerArenaBoundary, KnockoutVolumeMaterial) == 0x000278, "Member 'AMarinerArenaBoundary::KnockoutVolumeMaterial' has a wrong offset!");
static_assert(offsetof(AMarinerArenaBoundary, SafeVolumeMaterial) == 0x000280, "Member 'AMarinerArenaBoundary::SafeVolumeMaterial' has a wrong offset!");

// Class Mariner.MarinerMeshArenaBoundary
// 0x0010 (0x0298 - 0x0288)
class AMarinerMeshArenaBoundary final : public AMarinerArenaBoundary
{
public:
	class UStaticMesh*                            SafeVolumeMesh;                                    // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                            KnockoutVolumeMesh;                                // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMeshArenaBoundary">();
	}
	static class AMarinerMeshArenaBoundary* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerMeshArenaBoundary>();
	}
};
static_assert(alignof(AMarinerMeshArenaBoundary) == 0x000008, "Wrong alignment on AMarinerMeshArenaBoundary");
static_assert(sizeof(AMarinerMeshArenaBoundary) == 0x000298, "Wrong size on AMarinerMeshArenaBoundary");
static_assert(offsetof(AMarinerMeshArenaBoundary, SafeVolumeMesh) == 0x000288, "Member 'AMarinerMeshArenaBoundary::SafeVolumeMesh' has a wrong offset!");
static_assert(offsetof(AMarinerMeshArenaBoundary, KnockoutVolumeMesh) == 0x000290, "Member 'AMarinerMeshArenaBoundary::KnockoutVolumeMesh' has a wrong offset!");

// Class Mariner.MarinerAbility_Projectile
// 0x0018 (0x0878 - 0x0860)
class UMarinerAbility_Projectile : public UMarinerAbility_Projectile_Base
{
public:
	struct FVector                                SpawnOffset;                                       // 0x0860(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1524[0x4];                                     // 0x086C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerProjectile*                     ActiveProjectile;                                  // 0x0870(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_OnProjectileDestroyed_Authority(const struct FGameplayAbilityActorInfo& ActorInfo, class AMarinerProjectile* SpawnedProjectile);
	void OnRep_ActiveProjectile(class AMarinerProjectile* PrevActiveProjectile);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbility_Projectile">();
	}
	static class UMarinerAbility_Projectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbility_Projectile>();
	}
};
static_assert(alignof(UMarinerAbility_Projectile) == 0x000008, "Wrong alignment on UMarinerAbility_Projectile");
static_assert(sizeof(UMarinerAbility_Projectile) == 0x000878, "Wrong size on UMarinerAbility_Projectile");
static_assert(offsetof(UMarinerAbility_Projectile, SpawnOffset) == 0x000860, "Member 'UMarinerAbility_Projectile::SpawnOffset' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Projectile, ActiveProjectile) == 0x000870, "Member 'UMarinerAbility_Projectile::ActiveProjectile' has a wrong offset!");

// Class Mariner.MarinerAbility_ChargeProjectile
// 0x0058 (0x08D0 - 0x0878)
class UMarinerAbility_ChargeProjectile final : public UMarinerAbility_Projectile
{
public:
	float                                         ChargeTime;                                        // 0x0878(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ChargeHoldTime;                                    // 0x087C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>    EffectsToApplyOnChargeShotFired;                   // 0x0880(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>    EffectsToApplyOnChargeStashed;                     // 0x0890(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	float                                         MaxChargeRatio_ClientOnly;                         // 0x08A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxChargeRatio_ServerClientLerp;                   // 0x08A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClientChargeStartTime;                             // 0x08A8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerChargeProjectileAuthState      AuthoritativeChargeState;                          // 0x08AC(0x000C)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         StashedChargeRatio;                                // 0x08B8(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1525[0xC];                                     // 0x08BC(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bPreventClear_TempHack;                            // 0x08C8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1526[0x7];                                     // 0x08C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientInitiateProjectileSpawn();
	struct FMarinerChargeProjectileAuthState ModifyAuthChargeState(const struct FMarinerChargeProjectileAuthState& BaseChargeState);
	TArray<TSubclassOf<class UGameplayEffect>> ModifyEffectsToPlayOnChargeShotFired(const TArray<TSubclassOf<class UGameplayEffect>>& OrigEffectsToApplyOnChargeShotFired);
	TArray<TSubclassOf<class UGameplayEffect>> ModifyEffectsToPlayOnChargeShotStashed(const TArray<TSubclassOf<class UGameplayEffect>>& OrigEffectsToApplyOnChargeShotStashed);
	void OnRep_ChargeState();
	void RecalculateAuthProjectileState();
	void ServerTryAndSpawnProjectile(const struct FGameplayEventData& Payload);
	void StashCharge();

	float GetChargeRatio() const;
	float GetCurrentChargeMultiplier() const;
	float GetMaxChargeTime() const;
	bool HasStashedCharge() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbility_ChargeProjectile">();
	}
	static class UMarinerAbility_ChargeProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbility_ChargeProjectile>();
	}
};
static_assert(alignof(UMarinerAbility_ChargeProjectile) == 0x000008, "Wrong alignment on UMarinerAbility_ChargeProjectile");
static_assert(sizeof(UMarinerAbility_ChargeProjectile) == 0x0008D0, "Wrong size on UMarinerAbility_ChargeProjectile");
static_assert(offsetof(UMarinerAbility_ChargeProjectile, ChargeTime) == 0x000878, "Member 'UMarinerAbility_ChargeProjectile::ChargeTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ChargeProjectile, ChargeHoldTime) == 0x00087C, "Member 'UMarinerAbility_ChargeProjectile::ChargeHoldTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ChargeProjectile, EffectsToApplyOnChargeShotFired) == 0x000880, "Member 'UMarinerAbility_ChargeProjectile::EffectsToApplyOnChargeShotFired' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ChargeProjectile, EffectsToApplyOnChargeStashed) == 0x000890, "Member 'UMarinerAbility_ChargeProjectile::EffectsToApplyOnChargeStashed' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ChargeProjectile, MaxChargeRatio_ClientOnly) == 0x0008A0, "Member 'UMarinerAbility_ChargeProjectile::MaxChargeRatio_ClientOnly' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ChargeProjectile, MaxChargeRatio_ServerClientLerp) == 0x0008A4, "Member 'UMarinerAbility_ChargeProjectile::MaxChargeRatio_ServerClientLerp' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ChargeProjectile, ClientChargeStartTime) == 0x0008A8, "Member 'UMarinerAbility_ChargeProjectile::ClientChargeStartTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ChargeProjectile, AuthoritativeChargeState) == 0x0008AC, "Member 'UMarinerAbility_ChargeProjectile::AuthoritativeChargeState' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ChargeProjectile, StashedChargeRatio) == 0x0008B8, "Member 'UMarinerAbility_ChargeProjectile::StashedChargeRatio' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ChargeProjectile, bPreventClear_TempHack) == 0x0008C8, "Member 'UMarinerAbility_ChargeProjectile::bPreventClear_TempHack' has a wrong offset!");

// Class Mariner.MarinerMenuManager
// 0x00B0 (0x00D8 - 0x0028)
class UMarinerMenuManager final : public UObject
{
public:
	uint8                                         Pad_1527[0x10];                                    // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnRootLayerChanged;                                // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnLayerChanged;                                    // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UMarinerMenuStackLayer*>         LayerInstances;                                    // 0x0058(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UMarinerMenuStackLayer*                 ActiveRootLayer;                                   // 0x0068(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerMenuStackLayer*                 PendingRootLayer;                                  // 0x0070(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUserWidget*                            MenuBackground;                                    // 0x0078(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUserWidget*                            CustomBackground;                                  // 0x0080(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerPlayerHeader*                   PlayerHeader;                                      // 0x0088(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMarinerMenuSequence*>           MenuSequenceInstances;                             // 0x0090(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  LastCamera;                                        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1528[0x8];                                     // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerWidgetPool*                     WidgetPool;                                        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerGameInstance*                   MarinerGameInstance;                               // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1529[0x18];                                    // 0x00C0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMarinerMenuSequence* ActivateMenuSequence(TSubclassOf<class UMarinerMenuSequence> MenuSequence);
	bool ActivateRootLayer(const TSubclassOf<class UMarinerMenuStackLayer> Layer);
	bool ActivateStackManager(const TSubclassOf<class UMarinerMenuStackManager> StackManager, const TSubclassOf<class UMarinerIDTag> StackIDTag, bool bInitBehavior);
	void DeactivateMenuSequence();
	bool DeactivateRootLayer();
	bool DeactivateStackManager(const TSubclassOf<class UMarinerMenuStackManager> StackManager);
	class UMarinerMenuStackLayer* GetActiveOrPendingRootLayer();
	class UMarinerMenuStackLayer* GetActiveRootLayer();
	class UMarinerMenuStackLayer* GetPendingRootLayer();
	class UMarinerWidgetPool* GetWidgetPool();
	bool JumpToEndOnMenuSequence();
	bool JumpToStepOnMenuSequence(TSubclassOf<class UMarinerMenuStackLayer>* Layer);
	bool OnPopulateRootLayer(class UMarinerAnimatedWidget* Widget);
	class UMarinerMenuStackLayer* PopLayerFromActiveStack();
	bool PopToLayerOnActiveStack(const TSubclassOf<class UMarinerMenuStackLayer> Layer);
	class UMarinerMenuStackLayer* PushLayerToActiveStack(TSubclassOf<class UMarinerMenuStackLayer> Layer);
	void SetPlayerHeaderIsOnGameTabs(bool bGameTabs);
	void ShowStackManagerStack(const TSubclassOf<class UMarinerMenuStackManager> StackManager, const TSubclassOf<class UMarinerIDTag> IDTag, bool bVisible);
	void ShowStackManagerStackGlobal(const TSubclassOf<class UMarinerIDTag> IDTag, bool bVisible);
	bool SwitchToStackManagerStack(const TSubclassOf<class UMarinerMenuStackManager> StackManager, const TSubclassOf<class UMarinerIDTag> IDTag, bool bSetAsRootLayer);
	bool SwitchToStackManagerStackAndPush(const TSubclassOf<class UMarinerMenuStackManager> StackManager, const TSubclassOf<class UMarinerIDTag> IDTag, const TArray<TSubclassOf<class UMarinerMenuStackLayer>>& LayerStack, bool bSetAsRootLayer, bool bUseInitBehavior);
	void UpdateMenuBackground();
	void UpdatePlayerHeader();

	EPlayerInputType GetActiveInputType() const;
	class UMarinerMenuSequence* GetActiveSequence() const;
	class UUserWidget* GetCustomBackground() const;
	class UMarinerMenuStackLayer* GetLayer(class FName LayerName) const;
	class UMarinerMenuStackLayer* GetLayerByClass(TSubclassOf<class UMarinerMenuStackLayer> Layer) const;
	bool HasActiveOrPendingRootLayer() const;
	bool IsGamepadConnected() const;
	bool IsLayerPushed(const TSubclassOf<class UMarinerMenuStackManager> StackManager, const TSubclassOf<class UMarinerMenuStackLayer> Layer) const;
	bool IsStackManagerActive(const TSubclassOf<class UMarinerMenuStackManager> StackManager) const;
	bool IsStackManagerStackDisplaying(const TSubclassOf<class UMarinerMenuStackManager> StackManager, const TSubclassOf<class UMarinerIDTag> IDTag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMenuManager">();
	}
	static class UMarinerMenuManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMenuManager>();
	}
};
static_assert(alignof(UMarinerMenuManager) == 0x000008, "Wrong alignment on UMarinerMenuManager");
static_assert(sizeof(UMarinerMenuManager) == 0x0000D8, "Wrong size on UMarinerMenuManager");
static_assert(offsetof(UMarinerMenuManager, OnRootLayerChanged) == 0x000038, "Member 'UMarinerMenuManager::OnRootLayerChanged' has a wrong offset!");
static_assert(offsetof(UMarinerMenuManager, OnLayerChanged) == 0x000048, "Member 'UMarinerMenuManager::OnLayerChanged' has a wrong offset!");
static_assert(offsetof(UMarinerMenuManager, LayerInstances) == 0x000058, "Member 'UMarinerMenuManager::LayerInstances' has a wrong offset!");
static_assert(offsetof(UMarinerMenuManager, ActiveRootLayer) == 0x000068, "Member 'UMarinerMenuManager::ActiveRootLayer' has a wrong offset!");
static_assert(offsetof(UMarinerMenuManager, PendingRootLayer) == 0x000070, "Member 'UMarinerMenuManager::PendingRootLayer' has a wrong offset!");
static_assert(offsetof(UMarinerMenuManager, MenuBackground) == 0x000078, "Member 'UMarinerMenuManager::MenuBackground' has a wrong offset!");
static_assert(offsetof(UMarinerMenuManager, CustomBackground) == 0x000080, "Member 'UMarinerMenuManager::CustomBackground' has a wrong offset!");
static_assert(offsetof(UMarinerMenuManager, PlayerHeader) == 0x000088, "Member 'UMarinerMenuManager::PlayerHeader' has a wrong offset!");
static_assert(offsetof(UMarinerMenuManager, MenuSequenceInstances) == 0x000090, "Member 'UMarinerMenuManager::MenuSequenceInstances' has a wrong offset!");
static_assert(offsetof(UMarinerMenuManager, LastCamera) == 0x0000A0, "Member 'UMarinerMenuManager::LastCamera' has a wrong offset!");
static_assert(offsetof(UMarinerMenuManager, WidgetPool) == 0x0000B0, "Member 'UMarinerMenuManager::WidgetPool' has a wrong offset!");
static_assert(offsetof(UMarinerMenuManager, MarinerGameInstance) == 0x0000B8, "Member 'UMarinerMenuManager::MarinerGameInstance' has a wrong offset!");

// Class Mariner.MarinerMedalWidget
// 0x0038 (0x0268 - 0x0230)
class UMarinerMedalWidget final : public UUserWidget
{
public:
	class UImage*                                 Bound_MedalImage;                                  // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_MedalText;                                   // 0x0238(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1537[0x10];                                    // 0x0240(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CanvasPanelSlot;                                   // 0x0250(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1538[0x10];                                    // 0x0258(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayEnterAnimation();
	void PlayExitAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMedalWidget">();
	}
	static class UMarinerMedalWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMedalWidget>();
	}
};
static_assert(alignof(UMarinerMedalWidget) == 0x000008, "Wrong alignment on UMarinerMedalWidget");
static_assert(sizeof(UMarinerMedalWidget) == 0x000268, "Wrong size on UMarinerMedalWidget");
static_assert(offsetof(UMarinerMedalWidget, Bound_MedalImage) == 0x000230, "Member 'UMarinerMedalWidget::Bound_MedalImage' has a wrong offset!");
static_assert(offsetof(UMarinerMedalWidget, Bound_MedalText) == 0x000238, "Member 'UMarinerMedalWidget::Bound_MedalText' has a wrong offset!");
static_assert(offsetof(UMarinerMedalWidget, CanvasPanelSlot) == 0x000250, "Member 'UMarinerMedalWidget::CanvasPanelSlot' has a wrong offset!");

// Class Mariner.MarinerAbility_FireAndForget
// 0x0000 (0x06D8 - 0x06D8)
class UMarinerAbility_FireAndForget final : public UMarinerAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbility_FireAndForget">();
	}
	static class UMarinerAbility_FireAndForget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbility_FireAndForget>();
	}
};
static_assert(alignof(UMarinerAbility_FireAndForget) == 0x000008, "Wrong alignment on UMarinerAbility_FireAndForget");
static_assert(sizeof(UMarinerAbility_FireAndForget) == 0x0006D8, "Wrong size on UMarinerAbility_FireAndForget");

// Class Mariner.MarinerAbility_MultiProjectile
// 0x0040 (0x08A0 - 0x0860)
class UMarinerAbility_MultiProjectile final : public UMarinerAbility_Projectile_Base
{
public:
	TArray<TSubclassOf<class UMarinerProjectileSpread>> ProjectileSpreads;                                 // 0x0860(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	float                                         SpawnPathBatchingTimeTolerance;                    // 0x0870(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ProjectilesSpawnedCount;                           // 0x0874(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AMarinerProjectile*>             ProjectilesSpawned;                                // 0x0878(0x0010)(Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<class AMarinerProjectile*>             PrevProjectilesSpawned;                            // 0x0888(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1539[0x8];                                     // 0x0898(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnAllProjectilesFinishedSpawning(const struct FGameplayAbilityActorInfo& ActorInfo, TArray<class AMarinerProjectile*>* SpawnedProjectile);
	void BP_OnAllProjectilesFinishedSpawning_Authority(const struct FGameplayAbilityActorInfo& ActorInfo, TArray<class AMarinerProjectile*>* SpawnedProjectile);
	void BP_OnProjectileDestroyed_Authority(const struct FGameplayAbilityActorInfo& ActorInfo);
	void FinalizeAbility();
	TArray<TSubclassOf<class UMarinerProjectileSpread>> GetAllProjectileSpreads();
	void OnAllProjectilesFinishedSpawning();
	void OnRep_ProjectilesSpawned();

	int32 BP_GetMaximumProjectilesSpawned() const;
	TArray<TSubclassOf<class UMarinerProjectileSpread>> GetProjectileSpreads() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbility_MultiProjectile">();
	}
	static class UMarinerAbility_MultiProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbility_MultiProjectile>();
	}
};
static_assert(alignof(UMarinerAbility_MultiProjectile) == 0x000008, "Wrong alignment on UMarinerAbility_MultiProjectile");
static_assert(sizeof(UMarinerAbility_MultiProjectile) == 0x0008A0, "Wrong size on UMarinerAbility_MultiProjectile");
static_assert(offsetof(UMarinerAbility_MultiProjectile, ProjectileSpreads) == 0x000860, "Member 'UMarinerAbility_MultiProjectile::ProjectileSpreads' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_MultiProjectile, SpawnPathBatchingTimeTolerance) == 0x000870, "Member 'UMarinerAbility_MultiProjectile::SpawnPathBatchingTimeTolerance' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_MultiProjectile, ProjectilesSpawnedCount) == 0x000874, "Member 'UMarinerAbility_MultiProjectile::ProjectilesSpawnedCount' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_MultiProjectile, ProjectilesSpawned) == 0x000878, "Member 'UMarinerAbility_MultiProjectile::ProjectilesSpawned' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_MultiProjectile, PrevProjectilesSpawned) == 0x000888, "Member 'UMarinerAbility_MultiProjectile::PrevProjectilesSpawned' has a wrong offset!");

// Class Mariner.MarinerMenuStackManager
// 0x01D8 (0x0698 - 0x04C0)
class UMarinerMenuStackManager : public UMarinerMenuStackLayer
{
public:
	uint8                                         Pad_153A[0x8];                                     // 0x04C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnStackDisplayed;                                  // 0x04C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnStackHidden;                                     // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnStackSwitchedTo;                                 // 0x04E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnStackSwitchedFrom;                               // 0x04F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnStackLayerPushed;                                // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnStackLayerPopped;                                // 0x0518(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	EMarinerMenuStackEmptyBehavior                EmptyStackBehavior;                                // 0x0528(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_153B[0x7];                                     // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerIDTag>              HomeStack;                                         // 0x0530(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPushStartingLayerOnEnter;                         // 0x0538(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseInputCaptureToggling;                          // 0x0539(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_153C[0x2];                                     // 0x053A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           InputCaptureDisabledColor;                         // 0x053C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bClearStacksOnDeactivate;                          // 0x054C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanClickActiveStackToClose;                       // 0x054D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_153D[0x2];                                     // 0x054E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerIDTag>              FirstLaunchIDTag;                                  // 0x0550(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UMarinerIDTag>>      DefaultStartingIDTags;                             // 0x0558(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bAlwaysShowBackPrompt;                             // 0x0568(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_153E[0x7];                                     // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarinerPromptData>             RootPrompts;                                       // 0x0570(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	EMarinerInputActions                          SwapStackPreviousInput;                            // 0x0580(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerInputActions                          SwapStackNextInput;                                // 0x0581(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerInputActions                          SwapStackPreviousInputWithFocus;                   // 0x0582(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerInputActions                          SwapStackNextInputWithFocus;                       // 0x0583(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_153F[0x4];                                     // 0x0584(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerMenuStackLayer>     DefaultStartingLayer;                              // 0x0588(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1540[0x20];                                    // 0x0590(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerIDTag>              StartingIDTagOverride;                             // 0x05B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class UMarinerMenuStackLayer>> StartingLayersOverride;                            // 0x05B8(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1541[0x8];                                     // 0x05C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerMenuStackBaseWidget*            DefaultBaseWidget;                                 // 0x05D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerMenuStackBaseWidget*            ActiveBaseWidget;                                  // 0x05D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1542[0x20];                                    // 0x05E0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UMarinerStackHeader>     LastStackHeaderWidget;                             // 0x0600(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerMenuStackLayer*                 PendingContentLayer;                               // 0x0608(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMarinerMenuStackManagerSetup          Setup;                                             // 0x0610(0x0028)(NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FMarinerPromptData>             CustomPrompts;                                     // 0x0638(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1543[0x50];                                    // 0x0648(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMarinerMenuStackButton* AddStack(TSubclassOf<class UMarinerMenuStackButton> SourceButton, const class FText& ButtonText, TSubclassOf<class UMarinerMenuStackLayer> StartingLayer, bool bInitiallyVisible, EHorizontalAlignment HorizAlign, EVerticalAlignment VertAlign);
	void BP_OnFirstLaunch();
	void BP_OnInit();
	void Init(const struct FMarinerMenuStackManagerSetup& StackManagerSetup);
	bool IsVisibleFromIDTag(const TSubclassOf<class UMarinerIDTag> IDTag);
	bool IsVisibleFromInstance(const class UMarinerMenuStackButton* SourceButton);
	void OnContentAnimationStateChanged(class UMarinerAnimatedWidget* Instance, EWidgetAnimationState NewState);
	void OnContentLayerStateChange(class UMarinerAnimatedWidget* Widget, EWidgetAnimationState NewState);
	void OnOverlayLayerStateChange(class UMarinerAnimatedWidget* Widget, EWidgetAnimationState NewState);
	bool OnPopulateContentLayer(class UMarinerAnimatedWidget* Widget);
	bool OnPopulateOverlayLayer(class UMarinerAnimatedWidget* Widget);
	bool PopAllFromActiveStack();
	class UMarinerMenuStackLayer* PopFromActiveStack();
	bool PopToLayerOnActiveStack(class UMarinerMenuStackLayer* Layer);
	bool PopToRootFromActiveStack();
	bool PushToActiveStack(class UMarinerMenuStackLayer* Layer);
	void RefreshPrompts();
	void RemoveAllStacks();
	bool RemoveStackFromIDTag(TSubclassOf<class UMarinerIDTag> IDTag);
	bool RemoveStackFromInstance(class UMarinerMenuStackButton* SourceButton);
	void ShowStackFromIDTag(const TSubclassOf<class UMarinerIDTag> IDTag, bool bVisible);
	void ShowStackFromInstance(const class UMarinerMenuStackButton* SourceButton, bool bVisible);
	bool SwapStackNext(bool bActivateStack);
	bool SwapStackPrevious(bool bActivateStack);
	bool SwitchToHomeStack();
	bool SwitchToStackFromIDTag(const TSubclassOf<class UMarinerIDTag> IDTag);
	void SwitchToStackFromInstance(const class UMarinerMenuStackButton* SourceButton);

	int32 GetActiveStackCount() const;
	class UMarinerMenuStackLayer* GetActiveStackTop() const;
	int32 GetStackCountFromIDTag(TSubclassOf<class UMarinerIDTag> IDTag) const;
	int32 GetStackCountFromInstance(class UMarinerMenuStackButton* SourceButton) const;
	int32 GetStackIndexFromInstance(const class UMarinerMenuStackButton* SourceButton) const;
	bool HasPrompts() const;
	bool IsActiveStackDisplaying() const;
	bool IsActiveStackFromIDTag(TSubclassOf<class UMarinerIDTag> IDTag) const;
	bool IsActiveStackFromInstance(class UMarinerMenuStackButton* SourceButton) const;
	bool IsCapturingInput() const;
	bool IsStackDisplayingFromIDTag(TSubclassOf<class UMarinerIDTag> IDTag) const;
	bool IsStackDisplayingFromInstance(class UMarinerMenuStackButton* SourceButton) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMenuStackManager">();
	}
	static class UMarinerMenuStackManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMenuStackManager>();
	}
};
static_assert(alignof(UMarinerMenuStackManager) == 0x000008, "Wrong alignment on UMarinerMenuStackManager");
static_assert(sizeof(UMarinerMenuStackManager) == 0x000698, "Wrong size on UMarinerMenuStackManager");
static_assert(offsetof(UMarinerMenuStackManager, OnStackDisplayed) == 0x0004C8, "Member 'UMarinerMenuStackManager::OnStackDisplayed' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, OnStackHidden) == 0x0004D8, "Member 'UMarinerMenuStackManager::OnStackHidden' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, OnStackSwitchedTo) == 0x0004E8, "Member 'UMarinerMenuStackManager::OnStackSwitchedTo' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, OnStackSwitchedFrom) == 0x0004F8, "Member 'UMarinerMenuStackManager::OnStackSwitchedFrom' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, OnStackLayerPushed) == 0x000508, "Member 'UMarinerMenuStackManager::OnStackLayerPushed' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, OnStackLayerPopped) == 0x000518, "Member 'UMarinerMenuStackManager::OnStackLayerPopped' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, EmptyStackBehavior) == 0x000528, "Member 'UMarinerMenuStackManager::EmptyStackBehavior' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, HomeStack) == 0x000530, "Member 'UMarinerMenuStackManager::HomeStack' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, bPushStartingLayerOnEnter) == 0x000538, "Member 'UMarinerMenuStackManager::bPushStartingLayerOnEnter' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, bUseInputCaptureToggling) == 0x000539, "Member 'UMarinerMenuStackManager::bUseInputCaptureToggling' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, InputCaptureDisabledColor) == 0x00053C, "Member 'UMarinerMenuStackManager::InputCaptureDisabledColor' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, bClearStacksOnDeactivate) == 0x00054C, "Member 'UMarinerMenuStackManager::bClearStacksOnDeactivate' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, bCanClickActiveStackToClose) == 0x00054D, "Member 'UMarinerMenuStackManager::bCanClickActiveStackToClose' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, FirstLaunchIDTag) == 0x000550, "Member 'UMarinerMenuStackManager::FirstLaunchIDTag' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, DefaultStartingIDTags) == 0x000558, "Member 'UMarinerMenuStackManager::DefaultStartingIDTags' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, bAlwaysShowBackPrompt) == 0x000568, "Member 'UMarinerMenuStackManager::bAlwaysShowBackPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, RootPrompts) == 0x000570, "Member 'UMarinerMenuStackManager::RootPrompts' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, SwapStackPreviousInput) == 0x000580, "Member 'UMarinerMenuStackManager::SwapStackPreviousInput' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, SwapStackNextInput) == 0x000581, "Member 'UMarinerMenuStackManager::SwapStackNextInput' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, SwapStackPreviousInputWithFocus) == 0x000582, "Member 'UMarinerMenuStackManager::SwapStackPreviousInputWithFocus' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, SwapStackNextInputWithFocus) == 0x000583, "Member 'UMarinerMenuStackManager::SwapStackNextInputWithFocus' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, DefaultStartingLayer) == 0x000588, "Member 'UMarinerMenuStackManager::DefaultStartingLayer' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, StartingIDTagOverride) == 0x0005B0, "Member 'UMarinerMenuStackManager::StartingIDTagOverride' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, StartingLayersOverride) == 0x0005B8, "Member 'UMarinerMenuStackManager::StartingLayersOverride' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, DefaultBaseWidget) == 0x0005D0, "Member 'UMarinerMenuStackManager::DefaultBaseWidget' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, ActiveBaseWidget) == 0x0005D8, "Member 'UMarinerMenuStackManager::ActiveBaseWidget' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, LastStackHeaderWidget) == 0x000600, "Member 'UMarinerMenuStackManager::LastStackHeaderWidget' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, PendingContentLayer) == 0x000608, "Member 'UMarinerMenuStackManager::PendingContentLayer' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, Setup) == 0x000610, "Member 'UMarinerMenuStackManager::Setup' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackManager, CustomPrompts) == 0x000638, "Member 'UMarinerMenuStackManager::CustomPrompts' has a wrong offset!");

// Class Mariner.MarinerAbility_ProjectileBloomingSpread
// 0x00B0 (0x0928 - 0x0878)
class UMarinerAbility_ProjectileBloomingSpread final : public UMarinerAbility_Projectile
{
public:
	UMulticastInlineDelegateProperty_             OnSpreadUpdatedDelegate;                           // 0x0878(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnSpreadExpansionStartedDelegate;                  // 0x0888(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnSpreadRecoveryStartedDelegate;                   // 0x0898(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMaxSpreadExpansionReachedDelegate;               // 0x08A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnSpreadRecoveryFinishedDelegate;                  // 0x08B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         MinHalfConeSpreadDegrees;                          // 0x08C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpreadExpansionTime;                               // 0x08CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            SpreadExpansionCurve;                              // 0x08D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxHalfConeSpreadDegrees;                          // 0x08D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpreadRecoveryTime;                                // 0x08DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            SpreadRecoveryCurve;                               // 0x08E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpreadRecoveryDelayTime;                           // 0x08E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpreadUpdateFrequency;                             // 0x08EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerSpreadState                           SpreadState;                                       // 0x08F0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_155A[0x3];                                     // 0x08F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviousShotHalfConeSpreadAngle;                   // 0x08F4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentHalfConeSpreadAngle;                        // 0x08F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_155B[0x4];                                     // 0x08FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SpreadExpansionTimer;                              // 0x0900(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           SpreadRecoveryTimer;                               // 0x0908(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           SpreadDelayRecoveryTimer;                          // 0x0910(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_155C[0x10];                                    // 0x0918(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetSpread();

	float GetCurrentHalfConeSpreadDegrees() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbility_ProjectileBloomingSpread">();
	}
	static class UMarinerAbility_ProjectileBloomingSpread* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbility_ProjectileBloomingSpread>();
	}
};
static_assert(alignof(UMarinerAbility_ProjectileBloomingSpread) == 0x000008, "Wrong alignment on UMarinerAbility_ProjectileBloomingSpread");
static_assert(sizeof(UMarinerAbility_ProjectileBloomingSpread) == 0x000928, "Wrong size on UMarinerAbility_ProjectileBloomingSpread");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, OnSpreadUpdatedDelegate) == 0x000878, "Member 'UMarinerAbility_ProjectileBloomingSpread::OnSpreadUpdatedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, OnSpreadExpansionStartedDelegate) == 0x000888, "Member 'UMarinerAbility_ProjectileBloomingSpread::OnSpreadExpansionStartedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, OnSpreadRecoveryStartedDelegate) == 0x000898, "Member 'UMarinerAbility_ProjectileBloomingSpread::OnSpreadRecoveryStartedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, OnMaxSpreadExpansionReachedDelegate) == 0x0008A8, "Member 'UMarinerAbility_ProjectileBloomingSpread::OnMaxSpreadExpansionReachedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, OnSpreadRecoveryFinishedDelegate) == 0x0008B8, "Member 'UMarinerAbility_ProjectileBloomingSpread::OnSpreadRecoveryFinishedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, MinHalfConeSpreadDegrees) == 0x0008C8, "Member 'UMarinerAbility_ProjectileBloomingSpread::MinHalfConeSpreadDegrees' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, SpreadExpansionTime) == 0x0008CC, "Member 'UMarinerAbility_ProjectileBloomingSpread::SpreadExpansionTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, SpreadExpansionCurve) == 0x0008D0, "Member 'UMarinerAbility_ProjectileBloomingSpread::SpreadExpansionCurve' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, MaxHalfConeSpreadDegrees) == 0x0008D8, "Member 'UMarinerAbility_ProjectileBloomingSpread::MaxHalfConeSpreadDegrees' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, SpreadRecoveryTime) == 0x0008DC, "Member 'UMarinerAbility_ProjectileBloomingSpread::SpreadRecoveryTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, SpreadRecoveryCurve) == 0x0008E0, "Member 'UMarinerAbility_ProjectileBloomingSpread::SpreadRecoveryCurve' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, SpreadRecoveryDelayTime) == 0x0008E8, "Member 'UMarinerAbility_ProjectileBloomingSpread::SpreadRecoveryDelayTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, SpreadUpdateFrequency) == 0x0008EC, "Member 'UMarinerAbility_ProjectileBloomingSpread::SpreadUpdateFrequency' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, SpreadState) == 0x0008F0, "Member 'UMarinerAbility_ProjectileBloomingSpread::SpreadState' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, PreviousShotHalfConeSpreadAngle) == 0x0008F4, "Member 'UMarinerAbility_ProjectileBloomingSpread::PreviousShotHalfConeSpreadAngle' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, CurrentHalfConeSpreadAngle) == 0x0008F8, "Member 'UMarinerAbility_ProjectileBloomingSpread::CurrentHalfConeSpreadAngle' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, SpreadExpansionTimer) == 0x000900, "Member 'UMarinerAbility_ProjectileBloomingSpread::SpreadExpansionTimer' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, SpreadRecoveryTimer) == 0x000908, "Member 'UMarinerAbility_ProjectileBloomingSpread::SpreadRecoveryTimer' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ProjectileBloomingSpread, SpreadDelayRecoveryTimer) == 0x000910, "Member 'UMarinerAbility_ProjectileBloomingSpread::SpreadDelayRecoveryTimer' has a wrong offset!");

// Class Mariner.MarinerAbility_ReloadWeapon
// 0x0048 (0x0720 - 0x06D8)
class UMarinerAbility_ReloadWeapon final : public UMarinerAbility
{
public:
	UMulticastInlineDelegateProperty_             OnLocalAmmoUpdateDelegate;                         // 0x06D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         DefaultReloadTime;                                 // 0x06E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentReloadTime;                                 // 0x06EC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxAmmo;                                           // 0x06F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_155D[0x4];                                     // 0x06F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerAbility_Weapon*                 WeaponAbilityInstance;                             // 0x06F8(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_155E[0x20];                                    // 0x0700(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AuthorityModifyCurrentAmmo(int32 AmmoDelta);
	void AuthorityRefillAmmo();
	void OnAmmoRep(float CurrentAmmo, float InMaxAmmo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbility_ReloadWeapon">();
	}
	static class UMarinerAbility_ReloadWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbility_ReloadWeapon>();
	}
};
static_assert(alignof(UMarinerAbility_ReloadWeapon) == 0x000008, "Wrong alignment on UMarinerAbility_ReloadWeapon");
static_assert(sizeof(UMarinerAbility_ReloadWeapon) == 0x000720, "Wrong size on UMarinerAbility_ReloadWeapon");
static_assert(offsetof(UMarinerAbility_ReloadWeapon, OnLocalAmmoUpdateDelegate) == 0x0006D8, "Member 'UMarinerAbility_ReloadWeapon::OnLocalAmmoUpdateDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ReloadWeapon, DefaultReloadTime) == 0x0006E8, "Member 'UMarinerAbility_ReloadWeapon::DefaultReloadTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ReloadWeapon, CurrentReloadTime) == 0x0006EC, "Member 'UMarinerAbility_ReloadWeapon::CurrentReloadTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ReloadWeapon, MaxAmmo) == 0x0006F0, "Member 'UMarinerAbility_ReloadWeapon::MaxAmmo' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_ReloadWeapon, WeaponAbilityInstance) == 0x0006F8, "Member 'UMarinerAbility_ReloadWeapon::WeaponAbilityInstance' has a wrong offset!");

// Class Mariner.MarinerLawnDart
// 0x0138 (0x0360 - 0x0228)
class AMarinerLawnDart final : public AStaticMeshActor
{
public:
	uint8                                         Pad_155F[0x8];                                     // 0x0228(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasLanded;                                        // 0x0230(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1560[0x7];                                     // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           AkAudioComponent;                                  // 0x0238(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerFollowSplineMovement*           SplineMovementComponent;                           // 0x0240(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarinerLawnDartSplineContainer*        SplineContainer;                                   // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseExitSpline;                                    // 0x0250(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1561[0x3];                                     // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LandedToOpenHatchDelay;                            // 0x0254(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OpenedHatchToLaunchMissilesDelay;                  // 0x0258(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MissilesLaunchedToCloseHatchDelay;                 // 0x025C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClosedHatchToPrepForTakeOffDelay;                  // 0x0260(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PrepForTakeOffToExitDelay;                         // 0x0264(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EntrySplineDuration;                               // 0x0268(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ExitSplineDuration;                                // 0x026C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerDamageType>         DartLandedDamage;                                  // 0x0270(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerDamageType>         DartHitDamage;                                     // 0x0278(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          FlyingLoopStartAudioEvent;                         // 0x0280(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          FlyingLoopStopAudioEvent;                          // 0x0288(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        OnSpawnedEffect;                                   // 0x0290(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnSpawnedAudioEvent;                               // 0x0298(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        OnLandedEffect;                                    // 0x02A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnLandedAudioEvent;                                // 0x02A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        OnOpeningEffect;                                   // 0x02B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnOpeningAudioEvent;                               // 0x02B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        OnRocketLaunchEffect;                              // 0x02C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnRocketLaunchAudioEvent;                          // 0x02C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        OnLiftOffEffect;                                   // 0x02D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnLiftOffAudioEvent;                               // 0x02D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        OnExitEffect;                                      // 0x02E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerLawnDartState                         CurrentState;                                      // 0x02E8(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1562[0x7];                                     // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       MeshMIDs;                                          // 0x02F0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           RocketSockets;                                     // 0x0300(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMarinerLawnDartRocketSpawningInfo> RocketSpawningPattern;                             // 0x0310(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         RocketInstances;                                   // 0x0320(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         DamagedActorsOnImpact;                             // 0x0330(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         AbsoluteTeamIndex;                                 // 0x0340(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1563[0x4];                                     // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0348(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1564[0x10];                                    // 0x0350(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class AMarinerLawnDart* BP_SpawnLawnDart(class AMarinerLawnDartSplineContainer* LawnDartSplineContainer, TSubclassOf<class AMarinerLawnDart> LawnDartTemplate, class AMarinerPlayerState* CapturingPlayerState);

	void AddRocketsToSpawningPattern(const TArray<int32>& SocketIndices, TSubclassOf<class AActor> RocketTemplate);
	void AddRocketToSpawningPattern(int32 SocketIndex, TSubclassOf<class AActor> RocketTemplate);
	void BeginDartEntrySequence(bool bAutoFireMissilesOnLand);
	void BeginDartExitSequence();
	bool BeginFiringMissilesSequence(bool bCloseRackWhenDone);
	void BeginTakeOffSequenceWhenReady();
	void BP_OnDartStateChanged(EMarinerLawnDartState NewState);
	void ClearRocketSpawningPattern();
	class AActor* DetachRocket();
	void MulticastPlayRocketLaunchEffects(const class AActor* LaunchedRocket);
	void MulticastSpawnEffect(class UParticleSystem* Effect, const struct FTransform& SpawnTransform);
	void OnAuthorityStoppedDueToCollision(class AActor* MovingActor, float ProgressRatioAtTimeOfCollision, const struct FHitResult& BlockingHit);
	void OnAuthorityStoppedMovingOnEntrySpline(class AActor* MovingActor, EMarinerFollowSplineDirection MovementDirection);
	void OnAuthorityStoppedMovingOnExitSpline(class AActor* MovingActor, EMarinerFollowSplineDirection MovementDirection);
	void OnLawnDartDestroyed(class AActor* DestroyedLawnDart);
	void OnRep_CurrentStateChanged();
	void OnRep_TeamIndexChanged();
	void OnUpdateTeamColors();
	void SetTeamIndex(int32 InTeamIndex);
	void UpdateTeamColors();

	int32 GetTeamIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLawnDart">();
	}
	static class AMarinerLawnDart* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerLawnDart>();
	}
};
static_assert(alignof(AMarinerLawnDart) == 0x000008, "Wrong alignment on AMarinerLawnDart");
static_assert(sizeof(AMarinerLawnDart) == 0x000360, "Wrong size on AMarinerLawnDart");
static_assert(offsetof(AMarinerLawnDart, bHasLanded) == 0x000230, "Member 'AMarinerLawnDart::bHasLanded' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, AkAudioComponent) == 0x000238, "Member 'AMarinerLawnDart::AkAudioComponent' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, SplineMovementComponent) == 0x000240, "Member 'AMarinerLawnDart::SplineMovementComponent' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, SplineContainer) == 0x000248, "Member 'AMarinerLawnDart::SplineContainer' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, bUseExitSpline) == 0x000250, "Member 'AMarinerLawnDart::bUseExitSpline' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, LandedToOpenHatchDelay) == 0x000254, "Member 'AMarinerLawnDart::LandedToOpenHatchDelay' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, OpenedHatchToLaunchMissilesDelay) == 0x000258, "Member 'AMarinerLawnDart::OpenedHatchToLaunchMissilesDelay' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, MissilesLaunchedToCloseHatchDelay) == 0x00025C, "Member 'AMarinerLawnDart::MissilesLaunchedToCloseHatchDelay' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, ClosedHatchToPrepForTakeOffDelay) == 0x000260, "Member 'AMarinerLawnDart::ClosedHatchToPrepForTakeOffDelay' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, PrepForTakeOffToExitDelay) == 0x000264, "Member 'AMarinerLawnDart::PrepForTakeOffToExitDelay' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, EntrySplineDuration) == 0x000268, "Member 'AMarinerLawnDart::EntrySplineDuration' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, ExitSplineDuration) == 0x00026C, "Member 'AMarinerLawnDart::ExitSplineDuration' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, DartLandedDamage) == 0x000270, "Member 'AMarinerLawnDart::DartLandedDamage' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, DartHitDamage) == 0x000278, "Member 'AMarinerLawnDart::DartHitDamage' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, FlyingLoopStartAudioEvent) == 0x000280, "Member 'AMarinerLawnDart::FlyingLoopStartAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, FlyingLoopStopAudioEvent) == 0x000288, "Member 'AMarinerLawnDart::FlyingLoopStopAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, OnSpawnedEffect) == 0x000290, "Member 'AMarinerLawnDart::OnSpawnedEffect' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, OnSpawnedAudioEvent) == 0x000298, "Member 'AMarinerLawnDart::OnSpawnedAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, OnLandedEffect) == 0x0002A0, "Member 'AMarinerLawnDart::OnLandedEffect' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, OnLandedAudioEvent) == 0x0002A8, "Member 'AMarinerLawnDart::OnLandedAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, OnOpeningEffect) == 0x0002B0, "Member 'AMarinerLawnDart::OnOpeningEffect' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, OnOpeningAudioEvent) == 0x0002B8, "Member 'AMarinerLawnDart::OnOpeningAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, OnRocketLaunchEffect) == 0x0002C0, "Member 'AMarinerLawnDart::OnRocketLaunchEffect' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, OnRocketLaunchAudioEvent) == 0x0002C8, "Member 'AMarinerLawnDart::OnRocketLaunchAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, OnLiftOffEffect) == 0x0002D0, "Member 'AMarinerLawnDart::OnLiftOffEffect' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, OnLiftOffAudioEvent) == 0x0002D8, "Member 'AMarinerLawnDart::OnLiftOffAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, OnExitEffect) == 0x0002E0, "Member 'AMarinerLawnDart::OnExitEffect' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, CurrentState) == 0x0002E8, "Member 'AMarinerLawnDart::CurrentState' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, MeshMIDs) == 0x0002F0, "Member 'AMarinerLawnDart::MeshMIDs' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, RocketSockets) == 0x000300, "Member 'AMarinerLawnDart::RocketSockets' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, RocketSpawningPattern) == 0x000310, "Member 'AMarinerLawnDart::RocketSpawningPattern' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, RocketInstances) == 0x000320, "Member 'AMarinerLawnDart::RocketInstances' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, DamagedActorsOnImpact) == 0x000330, "Member 'AMarinerLawnDart::DamagedActorsOnImpact' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, AbsoluteTeamIndex) == 0x000340, "Member 'AMarinerLawnDart::AbsoluteTeamIndex' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDart, SkeletalMeshComponent) == 0x000348, "Member 'AMarinerLawnDart::SkeletalMeshComponent' has a wrong offset!");

// Class Mariner.MarinerAbility_StateProjectile
// 0x0028 (0x08A0 - 0x0878)
class UMarinerAbility_StateProjectile final : public UMarinerAbility_Projectile
{
public:
	struct FGameplayTagContainer                  TagsToBlockProjectileCallback;                     // 0x0878(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	EMarinerCallbackTriggerPolicy                 CallbackType;                                      // 0x0898(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowExtraInputWhenActiveProjectileIsNull;        // 0x0899(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_156A[0x6];                                     // 0x089A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnProjectileCallback(const struct FGameplayAbilityActorInfo& ActorInfo, class AMarinerProjectile* SpawnedProjectile);
	void BP_OnProjectileCallback_Authority(const struct FGameplayAbilityActorInfo& ActorInfo, class AMarinerProjectile* SpawnedProjectile);

	bool BP_CanCallbackOnProjectile(const struct FGameplayAbilityActorInfo& ActorInfo) const;
	bool BP_CanCallbackOnProjectile_Authority(const struct FGameplayAbilityActorInfo& ActorInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbility_StateProjectile">();
	}
	static class UMarinerAbility_StateProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbility_StateProjectile>();
	}
};
static_assert(alignof(UMarinerAbility_StateProjectile) == 0x000008, "Wrong alignment on UMarinerAbility_StateProjectile");
static_assert(sizeof(UMarinerAbility_StateProjectile) == 0x0008A0, "Wrong size on UMarinerAbility_StateProjectile");
static_assert(offsetof(UMarinerAbility_StateProjectile, TagsToBlockProjectileCallback) == 0x000878, "Member 'UMarinerAbility_StateProjectile::TagsToBlockProjectileCallback' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_StateProjectile, CallbackType) == 0x000898, "Member 'UMarinerAbility_StateProjectile::CallbackType' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_StateProjectile, bAllowExtraInputWhenActiveProjectileIsNull) == 0x000899, "Member 'UMarinerAbility_StateProjectile::bAllowExtraInputWhenActiveProjectileIsNull' has a wrong offset!");

// Class Mariner.MarinerAbility_Weapon
// 0x00A0 (0x0780 - 0x06E0)
class UMarinerAbility_Weapon final : public UMarinerAbility_Toggle
{
public:
	UMulticastInlineDelegateProperty_             LocalWeaponFiredSignature;                         // 0x06E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             AuthorityWeaponFiredDelegate;                      // 0x06F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_156D[0x4];                                     // 0x0700(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivationAimDataLifetime;                         // 0x0704(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerAbility_Projectile_Base> ProjectileAbilityClass;                            // 0x0708(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAbilitySpecHandle             GivenProjectileAbility;                            // 0x0710(0x0004)(Net, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_156E[0x4];                                     // 0x0714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerAbility_ReloadWeapon> ReloadAbilityClass;                                // 0x0718(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAbilitySpecHandle             GivenReloadAbility;                                // 0x0720(0x0004)(Net, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ReloadDelayTime;                                   // 0x0724(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RefireAfterReloadDelayTime;                        // 0x0728(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_156F[0x4];                                     // 0x072C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CancelAbilitiesWithTagIfCanFire;                   // 0x0730(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1570[0x18];                                    // 0x0750(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumTimeActivated;                              // 0x0768(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1571[0x14];                                    // 0x076C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGameplayEffectRemoved(TSubclassOf<class UGameplayEffect> RemovedEffect);
	void OnReloadAbilityEnded(const struct FAbilityEndedData& AbilityEndedData);

	class UMarinerAbility* GetProjectileAbility() const;
	class UMarinerAbility* GetReloadAbility() const;
	bool IsReloading() const;
	bool IsWeaponOutOfAmmo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbility_Weapon">();
	}
	static class UMarinerAbility_Weapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbility_Weapon>();
	}
};
static_assert(alignof(UMarinerAbility_Weapon) == 0x000008, "Wrong alignment on UMarinerAbility_Weapon");
static_assert(sizeof(UMarinerAbility_Weapon) == 0x000780, "Wrong size on UMarinerAbility_Weapon");
static_assert(offsetof(UMarinerAbility_Weapon, LocalWeaponFiredSignature) == 0x0006E0, "Member 'UMarinerAbility_Weapon::LocalWeaponFiredSignature' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Weapon, AuthorityWeaponFiredDelegate) == 0x0006F0, "Member 'UMarinerAbility_Weapon::AuthorityWeaponFiredDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Weapon, ActivationAimDataLifetime) == 0x000704, "Member 'UMarinerAbility_Weapon::ActivationAimDataLifetime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Weapon, ProjectileAbilityClass) == 0x000708, "Member 'UMarinerAbility_Weapon::ProjectileAbilityClass' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Weapon, GivenProjectileAbility) == 0x000710, "Member 'UMarinerAbility_Weapon::GivenProjectileAbility' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Weapon, ReloadAbilityClass) == 0x000718, "Member 'UMarinerAbility_Weapon::ReloadAbilityClass' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Weapon, GivenReloadAbility) == 0x000720, "Member 'UMarinerAbility_Weapon::GivenReloadAbility' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Weapon, ReloadDelayTime) == 0x000724, "Member 'UMarinerAbility_Weapon::ReloadDelayTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Weapon, RefireAfterReloadDelayTime) == 0x000728, "Member 'UMarinerAbility_Weapon::RefireAfterReloadDelayTime' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Weapon, CancelAbilitiesWithTagIfCanFire) == 0x000730, "Member 'UMarinerAbility_Weapon::CancelAbilitiesWithTagIfCanFire' has a wrong offset!");
static_assert(offsetof(UMarinerAbility_Weapon, MinimumTimeActivated) == 0x000768, "Member 'UMarinerAbility_Weapon::MinimumTimeActivated' has a wrong offset!");

// Class Mariner.MarinerAbilityBarData
// 0x0030 (0x0060 - 0x0030)
class UMarinerAbilityBarData final : public UDataAsset
{
public:
	class UTexture*                               AbilityBarActiveTexture;                           // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               AbilityBarCooldownBackgroundImage;                 // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               AbilityBarCooldownForegroundImage;                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               AbilityBarStunnedImage;                            // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               AbilityBarReadyImage;                              // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDisplayPercentage;                              // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDisplayPercentage;                              // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbilityBarData">();
	}
	static class UMarinerAbilityBarData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbilityBarData>();
	}
};
static_assert(alignof(UMarinerAbilityBarData) == 0x000008, "Wrong alignment on UMarinerAbilityBarData");
static_assert(sizeof(UMarinerAbilityBarData) == 0x000060, "Wrong size on UMarinerAbilityBarData");
static_assert(offsetof(UMarinerAbilityBarData, AbilityBarActiveTexture) == 0x000030, "Member 'UMarinerAbilityBarData::AbilityBarActiveTexture' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityBarData, AbilityBarCooldownBackgroundImage) == 0x000038, "Member 'UMarinerAbilityBarData::AbilityBarCooldownBackgroundImage' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityBarData, AbilityBarCooldownForegroundImage) == 0x000040, "Member 'UMarinerAbilityBarData::AbilityBarCooldownForegroundImage' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityBarData, AbilityBarStunnedImage) == 0x000048, "Member 'UMarinerAbilityBarData::AbilityBarStunnedImage' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityBarData, AbilityBarReadyImage) == 0x000050, "Member 'UMarinerAbilityBarData::AbilityBarReadyImage' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityBarData, MinDisplayPercentage) == 0x000058, "Member 'UMarinerAbilityBarData::MinDisplayPercentage' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityBarData, MaxDisplayPercentage) == 0x00005C, "Member 'UMarinerAbilityBarData::MaxDisplayPercentage' has a wrong offset!");

// Class Mariner.MarinerMenuStackButton
// 0x0348 (0x05F8 - 0x02B0)
class UMarinerMenuStackButton : public UMarinerUserWidget
{
public:
	TSubclassOf<class UMarinerMenuStackLayer>     StackStartingLayer;                                // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitiallyVisible;                                 // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1572[0x7];                                     // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerIDTag>              IDTag;                                             // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerMenuStackButtonState           IdleState;                                         // 0x02C8(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMenuStackButtonState           HighlightState;                                    // 0x0360(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMenuStackButtonState           ActiveState;                                       // 0x03F8(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMenuStackButtonState           ActiveHighlightState;                              // 0x0490(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPlatformText                   DisplayText;                                       // 0x0528(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnHighlightedAudioEvent;                           // 0x05A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnSelectedAudioEvent;                              // 0x05A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerStackHeader>        StackHeaderClass;                                  // 0x05B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAnchorData                            StackHeaderLayout;                                 // 0x05B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bResetStackOnExit;                                 // 0x05E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabledOnPC;                                      // 0x05E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabledOnX1;                                      // 0x05E2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabledOnPS4;                                     // 0x05E3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabledOnSwitch;                                  // 0x05E4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabledOnStadia;                                  // 0x05E5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabledForE3_18;                                  // 0x05E6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabledForBeta;                                   // 0x05E7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerMenuStackManager*               StackManager;                                      // 0x05E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1573[0x8];                                     // 0x05F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnableWidgetSlot(bool bEnabled);
	void OnHitAreaClicked();
	void OnHitAreaHovered();
	void OnHitAreaUnhovered();
	void OnLayerChanged(class UMarinerMenuStackLayer* NewRootLayer);
	void SetText(const class FText& Text);

	struct FMarinerMenuStackButtonAssets GetAssets() const;
	int32 GetMenuStackIndex() const;
	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMenuStackButton">();
	}
	static class UMarinerMenuStackButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMenuStackButton>();
	}
};
static_assert(alignof(UMarinerMenuStackButton) == 0x000008, "Wrong alignment on UMarinerMenuStackButton");
static_assert(sizeof(UMarinerMenuStackButton) == 0x0005F8, "Wrong size on UMarinerMenuStackButton");
static_assert(offsetof(UMarinerMenuStackButton, StackStartingLayer) == 0x0002B0, "Member 'UMarinerMenuStackButton::StackStartingLayer' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, bInitiallyVisible) == 0x0002B8, "Member 'UMarinerMenuStackButton::bInitiallyVisible' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, IDTag) == 0x0002C0, "Member 'UMarinerMenuStackButton::IDTag' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, IdleState) == 0x0002C8, "Member 'UMarinerMenuStackButton::IdleState' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, HighlightState) == 0x000360, "Member 'UMarinerMenuStackButton::HighlightState' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, ActiveState) == 0x0003F8, "Member 'UMarinerMenuStackButton::ActiveState' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, ActiveHighlightState) == 0x000490, "Member 'UMarinerMenuStackButton::ActiveHighlightState' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, DisplayText) == 0x000528, "Member 'UMarinerMenuStackButton::DisplayText' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, OnHighlightedAudioEvent) == 0x0005A0, "Member 'UMarinerMenuStackButton::OnHighlightedAudioEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, OnSelectedAudioEvent) == 0x0005A8, "Member 'UMarinerMenuStackButton::OnSelectedAudioEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, StackHeaderClass) == 0x0005B0, "Member 'UMarinerMenuStackButton::StackHeaderClass' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, StackHeaderLayout) == 0x0005B8, "Member 'UMarinerMenuStackButton::StackHeaderLayout' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, bResetStackOnExit) == 0x0005E0, "Member 'UMarinerMenuStackButton::bResetStackOnExit' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, bEnabledOnPC) == 0x0005E1, "Member 'UMarinerMenuStackButton::bEnabledOnPC' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, bEnabledOnX1) == 0x0005E2, "Member 'UMarinerMenuStackButton::bEnabledOnX1' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, bEnabledOnPS4) == 0x0005E3, "Member 'UMarinerMenuStackButton::bEnabledOnPS4' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, bEnabledOnSwitch) == 0x0005E4, "Member 'UMarinerMenuStackButton::bEnabledOnSwitch' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, bEnabledOnStadia) == 0x0005E5, "Member 'UMarinerMenuStackButton::bEnabledOnStadia' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, bEnabledForE3_18) == 0x0005E6, "Member 'UMarinerMenuStackButton::bEnabledForE3_18' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, bEnabledForBeta) == 0x0005E7, "Member 'UMarinerMenuStackButton::bEnabledForBeta' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackButton, StackManager) == 0x0005E8, "Member 'UMarinerMenuStackButton::StackManager' has a wrong offset!");

// Class Mariner.MarinerCustomComboBox
// 0x0278 (0x31F0 - 0x2F78)
class UMarinerCustomComboBox : public UMarinerLayeredButton
{
public:
	UMulticastInlineDelegateProperty_             OnSelectionIndexChanged;                           // 0x2F78(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1574[0x10];                                    // 0x2F88(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerCustomDropdown>     DropdownType;                                      // 0x2F98(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UUserWidget>                DropdownHeaderType;                                // 0x2FA0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerCustomDropdownClickGuard> ClickGuardType;                                    // 0x2FA8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerInputActions                          OpenInput;                                         // 0x2FB0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1575[0x7];                                     // 0x2FB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           OptionList;                                        // 0x2FB8(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	struct FMarinerCustomDropdownEditConfirmation EditConfirmationData;                              // 0x2FC8(0x01C8)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerCustomDropdownSFX              DropdownSFX;                                       // 0x3190(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<TDelegate<void()>>                     CallbackList;                                      // 0x31B8(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1576[0x8];                                     // 0x31C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerCustomDropdown*                 DropdownInstance;                                  // 0x31D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            HeaderInstance;                                    // 0x31D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerCustomDropdownClickGuard*       ClickGuardInstance;                                // 0x31E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1577[0x8];                                     // 0x31E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddOption(const class FText& OptionText);
	int32 AddOptionWithCallback(const class FText& OptionText, const TDelegate<void()>& SelectedCallback);
	void ClearOptions();
	void ClearSelection();
	void SetEditConfirmationData(const struct FMarinerCustomDropdownEditConfirmation& InEditConfirmationData);
	bool SetIsOpen(bool bOpen);
	void SetOpenInput(EMarinerInputActions Input);
	void SetSelectedOptionViaIndex(int32 Param_Index, bool bBroadcast, bool bAnimate);
	void SetSFXEvents(const struct FMarinerCustomDropdownSFX& InDropdownSFX);
	void UpdateOptionText(const class FText& NewOptionText, int32 OptionIndex);

	int32 GetOptionCount() const;
	bool IsOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCustomComboBox">();
	}
	static class UMarinerCustomComboBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCustomComboBox>();
	}
};
static_assert(alignof(UMarinerCustomComboBox) == 0x000008, "Wrong alignment on UMarinerCustomComboBox");
static_assert(sizeof(UMarinerCustomComboBox) == 0x0031F0, "Wrong size on UMarinerCustomComboBox");
static_assert(offsetof(UMarinerCustomComboBox, OnSelectionIndexChanged) == 0x002F78, "Member 'UMarinerCustomComboBox::OnSelectionIndexChanged' has a wrong offset!");
static_assert(offsetof(UMarinerCustomComboBox, DropdownType) == 0x002F98, "Member 'UMarinerCustomComboBox::DropdownType' has a wrong offset!");
static_assert(offsetof(UMarinerCustomComboBox, DropdownHeaderType) == 0x002FA0, "Member 'UMarinerCustomComboBox::DropdownHeaderType' has a wrong offset!");
static_assert(offsetof(UMarinerCustomComboBox, ClickGuardType) == 0x002FA8, "Member 'UMarinerCustomComboBox::ClickGuardType' has a wrong offset!");
static_assert(offsetof(UMarinerCustomComboBox, OpenInput) == 0x002FB0, "Member 'UMarinerCustomComboBox::OpenInput' has a wrong offset!");
static_assert(offsetof(UMarinerCustomComboBox, OptionList) == 0x002FB8, "Member 'UMarinerCustomComboBox::OptionList' has a wrong offset!");
static_assert(offsetof(UMarinerCustomComboBox, EditConfirmationData) == 0x002FC8, "Member 'UMarinerCustomComboBox::EditConfirmationData' has a wrong offset!");
static_assert(offsetof(UMarinerCustomComboBox, DropdownSFX) == 0x003190, "Member 'UMarinerCustomComboBox::DropdownSFX' has a wrong offset!");
static_assert(offsetof(UMarinerCustomComboBox, CallbackList) == 0x0031B8, "Member 'UMarinerCustomComboBox::CallbackList' has a wrong offset!");
static_assert(offsetof(UMarinerCustomComboBox, DropdownInstance) == 0x0031D0, "Member 'UMarinerCustomComboBox::DropdownInstance' has a wrong offset!");
static_assert(offsetof(UMarinerCustomComboBox, HeaderInstance) == 0x0031D8, "Member 'UMarinerCustomComboBox::HeaderInstance' has a wrong offset!");
static_assert(offsetof(UMarinerCustomComboBox, ClickGuardInstance) == 0x0031E0, "Member 'UMarinerCustomComboBox::ClickGuardInstance' has a wrong offset!");

// Class Mariner.MarinerSocialWidget
// 0x04F8 (0x36E8 - 0x31F0)
class UMarinerSocialWidget : public UMarinerCustomComboBox
{
public:
	uint8                                         Pad_157B[0x10];                                    // 0x31F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerAvatarWidget*                   Bound_AvatarWidget;                                // 0x3200(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextPlayerName;                              // 0x3208(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextPlayerStatus;                            // 0x3210(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_PlatformImage;                               // 0x3218(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   AddFriendText;                                     // 0x3220(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   RemoveFriendText;                                  // 0x3238(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   InviteToPartyText;                                 // 0x3250(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   PromoteToPartyLeaderText;                          // 0x3268(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   RemoveFromPartyText;                               // 0x3280(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPlatformText                   ViewProfileText;                                   // 0x3298(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ReportInappropriateText;                           // 0x3310(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ReportGriefingText;                                // 0x3328(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ReportOffensiveText;                               // 0x3340(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ReportCheatsText;                                  // 0x3358(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   PlayerReportedMBHeaderText;                        // 0x3370(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   PlayerReportedMBBodyText;                          // 0x3388(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ChangeBlockStatusMBHeaderText;                     // 0x33A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ChangeBlockStatusMBBodyText;                       // 0x33B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ConfirmBlockStatusMBHeaderText;                    // 0x33D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   ConfirmBlockStatusMBBodyTextFmt;                   // 0x33E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   MuteText;                                          // 0x3400(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   UnmuteText;                                        // 0x3418(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   BlockText;                                         // 0x3430(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   UnblockText;                                       // 0x3448(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   SendInviteText;                                    // 0x3460(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   CancelInviteText;                                  // 0x3478(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   AcceptInviteText;                                  // 0x3490(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   RejectInviteText;                                  // 0x34A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          JoinPartySFX;                                      // 0x34C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          InviteToPartySFX;                                  // 0x34C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          PromoteToPartyLeaderSFX;                           // 0x34D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          RemoveFromPartySFX;                                // 0x34D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ViewProfileSFX;                                    // 0x34E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          AddFriendSFX;                                      // 0x34E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          RemoveFriendSFX;                                   // 0x34F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnSendRequestSFX;                                  // 0x34F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnCancelRequestSFX;                                // 0x3500(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnAcceptRequestSFX;                                // 0x3508(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnRejectRequestSFX;                                // 0x3510(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   StatusInOurParty;                                  // 0x3518(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   StatusPlaying;                                     // 0x3530(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   StatusOnline;                                      // 0x3548(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   StatusAway;                                        // 0x3560(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   StatusOffline;                                     // 0x3578(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   StatusUnknown;                                     // 0x3590(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bAllowPlatformImage;                               // 0x35A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_157C[0x13F];                                   // 0x35A9(0x013F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAcceptFriendRequestSelected();
	void OnAddFriend();
	void OnCancelFriendRequestSelected();
	void OnChangeBlockStatus();
	void OnChangeVoiceStatus();
	void OnInviteToParty();
	void OnJoinParty();
	void OnLocalUserNumChanged(int32 LocalUser);
	void OnMangoShutdown(const bool bIsResetting);
	void OnPromoteToPartyLeader();
	void OnRejectFriendRequestSelected();
	void OnRemoveFriend();
	void OnRemoveFromParty();
	void OnReportPlayerCheatsSelected();
	void OnReportPlayerGriefingSelected();
	void OnReportPlayerInappropriateSelected();
	void OnReportPlayerOffensiveSelected();
	void OnSendFriendRequestSelected();
	void OnViewProfile();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSocialWidget">();
	}
	static class UMarinerSocialWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSocialWidget>();
	}
};
static_assert(alignof(UMarinerSocialWidget) == 0x000008, "Wrong alignment on UMarinerSocialWidget");
static_assert(sizeof(UMarinerSocialWidget) == 0x0036E8, "Wrong size on UMarinerSocialWidget");
static_assert(offsetof(UMarinerSocialWidget, Bound_AvatarWidget) == 0x003200, "Member 'UMarinerSocialWidget::Bound_AvatarWidget' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, Bound_TextPlayerName) == 0x003208, "Member 'UMarinerSocialWidget::Bound_TextPlayerName' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, Bound_TextPlayerStatus) == 0x003210, "Member 'UMarinerSocialWidget::Bound_TextPlayerStatus' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, Bound_PlatformImage) == 0x003218, "Member 'UMarinerSocialWidget::Bound_PlatformImage' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, AddFriendText) == 0x003220, "Member 'UMarinerSocialWidget::AddFriendText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, RemoveFriendText) == 0x003238, "Member 'UMarinerSocialWidget::RemoveFriendText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, InviteToPartyText) == 0x003250, "Member 'UMarinerSocialWidget::InviteToPartyText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, PromoteToPartyLeaderText) == 0x003268, "Member 'UMarinerSocialWidget::PromoteToPartyLeaderText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, RemoveFromPartyText) == 0x003280, "Member 'UMarinerSocialWidget::RemoveFromPartyText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, ViewProfileText) == 0x003298, "Member 'UMarinerSocialWidget::ViewProfileText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, ReportInappropriateText) == 0x003310, "Member 'UMarinerSocialWidget::ReportInappropriateText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, ReportGriefingText) == 0x003328, "Member 'UMarinerSocialWidget::ReportGriefingText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, ReportOffensiveText) == 0x003340, "Member 'UMarinerSocialWidget::ReportOffensiveText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, ReportCheatsText) == 0x003358, "Member 'UMarinerSocialWidget::ReportCheatsText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, PlayerReportedMBHeaderText) == 0x003370, "Member 'UMarinerSocialWidget::PlayerReportedMBHeaderText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, PlayerReportedMBBodyText) == 0x003388, "Member 'UMarinerSocialWidget::PlayerReportedMBBodyText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, ChangeBlockStatusMBHeaderText) == 0x0033A0, "Member 'UMarinerSocialWidget::ChangeBlockStatusMBHeaderText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, ChangeBlockStatusMBBodyText) == 0x0033B8, "Member 'UMarinerSocialWidget::ChangeBlockStatusMBBodyText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, ConfirmBlockStatusMBHeaderText) == 0x0033D0, "Member 'UMarinerSocialWidget::ConfirmBlockStatusMBHeaderText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, ConfirmBlockStatusMBBodyTextFmt) == 0x0033E8, "Member 'UMarinerSocialWidget::ConfirmBlockStatusMBBodyTextFmt' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, MuteText) == 0x003400, "Member 'UMarinerSocialWidget::MuteText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, UnmuteText) == 0x003418, "Member 'UMarinerSocialWidget::UnmuteText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, BlockText) == 0x003430, "Member 'UMarinerSocialWidget::BlockText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, UnblockText) == 0x003448, "Member 'UMarinerSocialWidget::UnblockText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, SendInviteText) == 0x003460, "Member 'UMarinerSocialWidget::SendInviteText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, CancelInviteText) == 0x003478, "Member 'UMarinerSocialWidget::CancelInviteText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, AcceptInviteText) == 0x003490, "Member 'UMarinerSocialWidget::AcceptInviteText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, RejectInviteText) == 0x0034A8, "Member 'UMarinerSocialWidget::RejectInviteText' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, JoinPartySFX) == 0x0034C0, "Member 'UMarinerSocialWidget::JoinPartySFX' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, InviteToPartySFX) == 0x0034C8, "Member 'UMarinerSocialWidget::InviteToPartySFX' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, PromoteToPartyLeaderSFX) == 0x0034D0, "Member 'UMarinerSocialWidget::PromoteToPartyLeaderSFX' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, RemoveFromPartySFX) == 0x0034D8, "Member 'UMarinerSocialWidget::RemoveFromPartySFX' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, ViewProfileSFX) == 0x0034E0, "Member 'UMarinerSocialWidget::ViewProfileSFX' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, AddFriendSFX) == 0x0034E8, "Member 'UMarinerSocialWidget::AddFriendSFX' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, RemoveFriendSFX) == 0x0034F0, "Member 'UMarinerSocialWidget::RemoveFriendSFX' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, OnSendRequestSFX) == 0x0034F8, "Member 'UMarinerSocialWidget::OnSendRequestSFX' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, OnCancelRequestSFX) == 0x003500, "Member 'UMarinerSocialWidget::OnCancelRequestSFX' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, OnAcceptRequestSFX) == 0x003508, "Member 'UMarinerSocialWidget::OnAcceptRequestSFX' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, OnRejectRequestSFX) == 0x003510, "Member 'UMarinerSocialWidget::OnRejectRequestSFX' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, StatusInOurParty) == 0x003518, "Member 'UMarinerSocialWidget::StatusInOurParty' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, StatusPlaying) == 0x003530, "Member 'UMarinerSocialWidget::StatusPlaying' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, StatusOnline) == 0x003548, "Member 'UMarinerSocialWidget::StatusOnline' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, StatusAway) == 0x003560, "Member 'UMarinerSocialWidget::StatusAway' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, StatusOffline) == 0x003578, "Member 'UMarinerSocialWidget::StatusOffline' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, StatusUnknown) == 0x003590, "Member 'UMarinerSocialWidget::StatusUnknown' has a wrong offset!");
static_assert(offsetof(UMarinerSocialWidget, bAllowPlatformImage) == 0x0035A8, "Member 'UMarinerSocialWidget::bAllowPlatformImage' has a wrong offset!");

// Class Mariner.MarinerAbilityFeedbackWidget
// 0x0128 (0x0588 - 0x0460)
class UMarinerAbilityFeedbackWidget final : public UMarinerHUDWidget
{
public:
	TMap<EMarinerInputActions, class FText>       InputActionsToWatch;                               // 0x0460(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, class FText>        GameplayTagsToWatch;                               // 0x04B0(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UImage*                                 Bound_AbilityIcon;                                 // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_CooldownText;                                // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerInputActions                          CurrentInputAction;                                // 0x0510(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReadyToPlayAnimation;                             // 0x0511(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_157D[0x6E];                                    // 0x0512(0x006E)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      OwningCharacter;                                   // 0x0580(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void PlayCooldownAnimation(EMarinerInputActions InputAction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbilityFeedbackWidget">();
	}
	static class UMarinerAbilityFeedbackWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbilityFeedbackWidget>();
	}
};
static_assert(alignof(UMarinerAbilityFeedbackWidget) == 0x000008, "Wrong alignment on UMarinerAbilityFeedbackWidget");
static_assert(sizeof(UMarinerAbilityFeedbackWidget) == 0x000588, "Wrong size on UMarinerAbilityFeedbackWidget");
static_assert(offsetof(UMarinerAbilityFeedbackWidget, InputActionsToWatch) == 0x000460, "Member 'UMarinerAbilityFeedbackWidget::InputActionsToWatch' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityFeedbackWidget, GameplayTagsToWatch) == 0x0004B0, "Member 'UMarinerAbilityFeedbackWidget::GameplayTagsToWatch' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityFeedbackWidget, Bound_AbilityIcon) == 0x000500, "Member 'UMarinerAbilityFeedbackWidget::Bound_AbilityIcon' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityFeedbackWidget, Bound_CooldownText) == 0x000508, "Member 'UMarinerAbilityFeedbackWidget::Bound_CooldownText' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityFeedbackWidget, CurrentInputAction) == 0x000510, "Member 'UMarinerAbilityFeedbackWidget::CurrentInputAction' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityFeedbackWidget, bReadyToPlayAnimation) == 0x000511, "Member 'UMarinerAbilityFeedbackWidget::bReadyToPlayAnimation' has a wrong offset!");
static_assert(offsetof(UMarinerAbilityFeedbackWidget, OwningCharacter) == 0x000580, "Member 'UMarinerAbilityFeedbackWidget::OwningCharacter' has a wrong offset!");

// Class Mariner.MarinerMusicManager
// 0x0190 (0x01B8 - 0x0028)
class UMarinerMusicManager : public UObject
{
public:
	TArray<class UAkAudioBank*>                   ManuallyLoadedBanks;                               // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          StartMusicEvent;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ShutdownMusicEvent;                                // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          TreasureSequenceIncomingEvent;                     // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          TreasureSequenceEndEvent;                          // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          MainMenuMusicEvent;                                // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          LobbyMusicEvent;                                   // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          CharacterMusicEvent;                               // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          IntroMusicEvent;                                   // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          MatchStartEvent;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          DrawMusicEvent;                                    // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          WrapUpMusicEvent;                                  // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          LastStandMusicEvent;                               // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OneMinuteMusicEvent;                               // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ExtraTimeMusicEvent;                               // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          DefeatMusicEvent;                                  // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          VictoryMusicEvent;                                 // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          SetSilenceStateEvent;                              // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          PlaySilentEvent;                                   // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          MixStateMenuEvent;                                 // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          MixStateStandardEvent;                             // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, struct FTrackData>          TrackMap;                                          // 0x00D8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FString, class FName>              TrackMapInternal;                                  // 0x0128(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_157E[0x8];                                     // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerGameInstance*                   MarinerGameInstance;                               // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_157F[0x30];                                    // 0x0188(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_HandleMenuMusicSFX(class UAkAudioEvent* EventPlayed);
	void BP_OnEnterMenuState();
	void BP_OnExitMenuState();
	void BP_OnExtraTimeMusicPlayed();
	void BP_OnLastStandMusicPlayed();
	void BP_OnMatchPlayingIntro();
	void BP_OnMatchPlayingOutro();
	void BP_OnMatchStarted();
	void BP_OnMatchStateChanged(class FName MatchState);
	void BP_OnOneMinuteMusicPlayed();
	void EnableDefaultState();
	void HandleLeavingMenuState();
	void HandleMenuMusicSFX(class UAkAudioEvent* EventToPlay);
	void OnExtraTimeStarted();
	void OnMatchInProgress();
	void OnMatchPlayingIntro();
	void OnMatchPlayingOutro();
	void OnOvertimeStarted();
	void OnStartMatch();
	void OnTimeRemainingChanged(int32 TimeRemaining);
	void OnTreasureSequenceEnd();
	void OnTreasureSequenceIncoming();
	void PlayCharacterCustomizationMusic(const class FString& SkinName);
	void PlayDefeatMusic();
	void PlayDrawMusic();
	void PlayExtraTimeMusic();
	void PlayLastStandMusic();
	void PlayLobbyMusic();
	void PlayMenuMusic(class UAkAudioEvent* EventToPlay);
	void PlayOneMinuteMusic();
	void PlayPriorityMusic(class UAkAudioEvent* PriorityEvent, class FName SetStateGroup, class FName SetState);
	void PlayVictoryMusic();
	void PlayWrapUpMusic();
	int32 PostEvent(class UAkAudioEvent* AkEvent);
	int32 PostTrackEvent(class FName TrackID);
	void ReactToNewBallOwner(const class AMarinerCharacter* Character);
	void SetSilentState();
	void StartMusic();
	void StopPriorityMusic();

	bool IsCurrentlyInGameplayMap() const;
	bool IsPriorityMusicPlaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMusicManager">();
	}
	static class UMarinerMusicManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMusicManager>();
	}
};
static_assert(alignof(UMarinerMusicManager) == 0x000008, "Wrong alignment on UMarinerMusicManager");
static_assert(sizeof(UMarinerMusicManager) == 0x0001B8, "Wrong size on UMarinerMusicManager");
static_assert(offsetof(UMarinerMusicManager, ManuallyLoadedBanks) == 0x000028, "Member 'UMarinerMusicManager::ManuallyLoadedBanks' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, StartMusicEvent) == 0x000038, "Member 'UMarinerMusicManager::StartMusicEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, ShutdownMusicEvent) == 0x000040, "Member 'UMarinerMusicManager::ShutdownMusicEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, TreasureSequenceIncomingEvent) == 0x000048, "Member 'UMarinerMusicManager::TreasureSequenceIncomingEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, TreasureSequenceEndEvent) == 0x000050, "Member 'UMarinerMusicManager::TreasureSequenceEndEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, MainMenuMusicEvent) == 0x000058, "Member 'UMarinerMusicManager::MainMenuMusicEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, LobbyMusicEvent) == 0x000060, "Member 'UMarinerMusicManager::LobbyMusicEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, CharacterMusicEvent) == 0x000068, "Member 'UMarinerMusicManager::CharacterMusicEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, IntroMusicEvent) == 0x000070, "Member 'UMarinerMusicManager::IntroMusicEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, MatchStartEvent) == 0x000078, "Member 'UMarinerMusicManager::MatchStartEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, DrawMusicEvent) == 0x000080, "Member 'UMarinerMusicManager::DrawMusicEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, WrapUpMusicEvent) == 0x000088, "Member 'UMarinerMusicManager::WrapUpMusicEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, LastStandMusicEvent) == 0x000090, "Member 'UMarinerMusicManager::LastStandMusicEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, OneMinuteMusicEvent) == 0x000098, "Member 'UMarinerMusicManager::OneMinuteMusicEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, ExtraTimeMusicEvent) == 0x0000A0, "Member 'UMarinerMusicManager::ExtraTimeMusicEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, DefeatMusicEvent) == 0x0000A8, "Member 'UMarinerMusicManager::DefeatMusicEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, VictoryMusicEvent) == 0x0000B0, "Member 'UMarinerMusicManager::VictoryMusicEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, SetSilenceStateEvent) == 0x0000B8, "Member 'UMarinerMusicManager::SetSilenceStateEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, PlaySilentEvent) == 0x0000C0, "Member 'UMarinerMusicManager::PlaySilentEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, MixStateMenuEvent) == 0x0000C8, "Member 'UMarinerMusicManager::MixStateMenuEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, MixStateStandardEvent) == 0x0000D0, "Member 'UMarinerMusicManager::MixStateStandardEvent' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, TrackMap) == 0x0000D8, "Member 'UMarinerMusicManager::TrackMap' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, TrackMapInternal) == 0x000128, "Member 'UMarinerMusicManager::TrackMapInternal' has a wrong offset!");
static_assert(offsetof(UMarinerMusicManager, MarinerGameInstance) == 0x000180, "Member 'UMarinerMusicManager::MarinerGameInstance' has a wrong offset!");

// Class Mariner.HUDAbilityUIData
// 0x0230 (0x0258 - 0x0028)
class UHUDAbilityUIData : public UObject
{
public:
	class FText                                   AbilityName;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   AbilityDescription;                                // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UMediaSource*                           AbilityVideo;                                      // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                BackgroundImageMargin;                             // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              BackgroundImageScale;                              // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                GlowBehindImageMargin;                             // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              GlowBehindImageScale;                              // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                IconImageMargin;                                   // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              IconImageScale;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                GlowInFrontImageMargin;                            // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              GlowInFrontImageScale;                             // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHUDBarIconState                       IdleIcon;                                          // 0x00C0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FHUDBarIconState                       ActiveIcon;                                        // 0x0110(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FHUDBarIconState                       CooldownIcon_Background;                           // 0x0160(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FHUDBarIconState                       CooldownIcon_Foreground;                           // 0x01B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FHUDBarIconState                       StunnedIcon;                                       // 0x0200(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CooldownMinDisplayPercentage;                      // 0x0250(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownMaxDisplayPercentage;                      // 0x0254(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDAbilityUIData">();
	}
	static class UHUDAbilityUIData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDAbilityUIData>();
	}
};
static_assert(alignof(UHUDAbilityUIData) == 0x000008, "Wrong alignment on UHUDAbilityUIData");
static_assert(sizeof(UHUDAbilityUIData) == 0x000258, "Wrong size on UHUDAbilityUIData");
static_assert(offsetof(UHUDAbilityUIData, AbilityName) == 0x000028, "Member 'UHUDAbilityUIData::AbilityName' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, AbilityDescription) == 0x000040, "Member 'UHUDAbilityUIData::AbilityDescription' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, AbilityVideo) == 0x000058, "Member 'UHUDAbilityUIData::AbilityVideo' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, BackgroundImageMargin) == 0x000060, "Member 'UHUDAbilityUIData::BackgroundImageMargin' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, BackgroundImageScale) == 0x000070, "Member 'UHUDAbilityUIData::BackgroundImageScale' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, GlowBehindImageMargin) == 0x000078, "Member 'UHUDAbilityUIData::GlowBehindImageMargin' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, GlowBehindImageScale) == 0x000088, "Member 'UHUDAbilityUIData::GlowBehindImageScale' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, IconImageMargin) == 0x000090, "Member 'UHUDAbilityUIData::IconImageMargin' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, IconImageScale) == 0x0000A0, "Member 'UHUDAbilityUIData::IconImageScale' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, GlowInFrontImageMargin) == 0x0000A8, "Member 'UHUDAbilityUIData::GlowInFrontImageMargin' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, GlowInFrontImageScale) == 0x0000B8, "Member 'UHUDAbilityUIData::GlowInFrontImageScale' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, IdleIcon) == 0x0000C0, "Member 'UHUDAbilityUIData::IdleIcon' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, ActiveIcon) == 0x000110, "Member 'UHUDAbilityUIData::ActiveIcon' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, CooldownIcon_Background) == 0x000160, "Member 'UHUDAbilityUIData::CooldownIcon_Background' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, CooldownIcon_Foreground) == 0x0001B0, "Member 'UHUDAbilityUIData::CooldownIcon_Foreground' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, StunnedIcon) == 0x000200, "Member 'UHUDAbilityUIData::StunnedIcon' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, CooldownMinDisplayPercentage) == 0x000250, "Member 'UHUDAbilityUIData::CooldownMinDisplayPercentage' has a wrong offset!");
static_assert(offsetof(UHUDAbilityUIData, CooldownMaxDisplayPercentage) == 0x000254, "Member 'UHUDAbilityUIData::CooldownMaxDisplayPercentage' has a wrong offset!");

// Class Mariner.MarinerMoveUpdateDefaults
// 0x0008 (0x0038 - 0x0030)
class UMarinerMoveUpdateDefaults : public UDataAsset
{
public:
	bool                                          bCanUseWhileReturningToArena;                      // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanUseWhileMegablasting;                          // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1581[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMoveUpdateDefaults">();
	}
	static class UMarinerMoveUpdateDefaults* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMoveUpdateDefaults>();
	}
};
static_assert(alignof(UMarinerMoveUpdateDefaults) == 0x000008, "Wrong alignment on UMarinerMoveUpdateDefaults");
static_assert(sizeof(UMarinerMoveUpdateDefaults) == 0x000038, "Wrong size on UMarinerMoveUpdateDefaults");
static_assert(offsetof(UMarinerMoveUpdateDefaults, bCanUseWhileReturningToArena) == 0x000030, "Member 'UMarinerMoveUpdateDefaults::bCanUseWhileReturningToArena' has a wrong offset!");
static_assert(offsetof(UMarinerMoveUpdateDefaults, bCanUseWhileMegablasting) == 0x000031, "Member 'UMarinerMoveUpdateDefaults::bCanUseWhileMegablasting' has a wrong offset!");

// Class Mariner.MarinerAbilitySkinData_BlastbeardShockwave
// 0x0010 (0x0040 - 0x0030)
class UMarinerAbilitySkinData_BlastbeardShockwave final : public UMarinerAbilitySkinData_Base
{
public:
	class UAkAudioEvent*                          ShockwaveSFX;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ShockwaveFX;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbilitySkinData_BlastbeardShockwave">();
	}
	static class UMarinerAbilitySkinData_BlastbeardShockwave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbilitySkinData_BlastbeardShockwave>();
	}
};
static_assert(alignof(UMarinerAbilitySkinData_BlastbeardShockwave) == 0x000008, "Wrong alignment on UMarinerAbilitySkinData_BlastbeardShockwave");
static_assert(sizeof(UMarinerAbilitySkinData_BlastbeardShockwave) == 0x000040, "Wrong size on UMarinerAbilitySkinData_BlastbeardShockwave");
static_assert(offsetof(UMarinerAbilitySkinData_BlastbeardShockwave, ShockwaveSFX) == 0x000030, "Member 'UMarinerAbilitySkinData_BlastbeardShockwave::ShockwaveSFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_BlastbeardShockwave, ShockwaveFX) == 0x000038, "Member 'UMarinerAbilitySkinData_BlastbeardShockwave::ShockwaveFX' has a wrong offset!");

// Class Mariner.MarinerMiniRewardPreview
// 0x0010 (0x02C0 - 0x02B0)
class UMarinerMiniRewardPreview : public UMarinerUserWidget
{
public:
	class UImage*                                 Bound_ItemRarityImage;                             // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAssetLoadResponse*                     AssetToLoad;                                       // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void LoadItemData(const struct FMangoItem& Item);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMiniRewardPreview">();
	}
	static class UMarinerMiniRewardPreview* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMiniRewardPreview>();
	}
};
static_assert(alignof(UMarinerMiniRewardPreview) == 0x000008, "Wrong alignment on UMarinerMiniRewardPreview");
static_assert(sizeof(UMarinerMiniRewardPreview) == 0x0002C0, "Wrong size on UMarinerMiniRewardPreview");
static_assert(offsetof(UMarinerMiniRewardPreview, Bound_ItemRarityImage) == 0x0002B0, "Member 'UMarinerMiniRewardPreview::Bound_ItemRarityImage' has a wrong offset!");
static_assert(offsetof(UMarinerMiniRewardPreview, AssetToLoad) == 0x0002B8, "Member 'UMarinerMiniRewardPreview::AssetToLoad' has a wrong offset!");

// Class Mariner.MarinerAbilitySkinData_CometCharge
// 0x0090 (0x00C0 - 0x0030)
class UMarinerAbilitySkinData_CometCharge final : public UMarinerAbilitySkinData_Base
{
public:
	class UParticleSystem*                        DashingFX;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ChargeUpFX;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        HitFX;                                             // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        HitWallFX;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ChargeDamagedOutFX;                                // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            AimingReticleMesh;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerCharacterMontage*               HitWallAnim;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerCharacterMontage*               HitSurfaceAnim;                                    // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerCharacterMontage*               HitEnemyAnim;                                      // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerCharacterMontage*               HitNothingAnim;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerCharacterMontage*               ChargingAnim;                                      // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerCharacterMontage*               DashingAnim;                                       // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ChargingSFX;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          DashingSFX;                                        // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          HitEnemySFX;                                       // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          HitWallSFX;                                        // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          HitNothingSFX;                                     // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ChargingDamagedOutSFX;                             // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbilitySkinData_CometCharge">();
	}
	static class UMarinerAbilitySkinData_CometCharge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbilitySkinData_CometCharge>();
	}
};
static_assert(alignof(UMarinerAbilitySkinData_CometCharge) == 0x000008, "Wrong alignment on UMarinerAbilitySkinData_CometCharge");
static_assert(sizeof(UMarinerAbilitySkinData_CometCharge) == 0x0000C0, "Wrong size on UMarinerAbilitySkinData_CometCharge");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, DashingFX) == 0x000030, "Member 'UMarinerAbilitySkinData_CometCharge::DashingFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, ChargeUpFX) == 0x000038, "Member 'UMarinerAbilitySkinData_CometCharge::ChargeUpFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, HitFX) == 0x000040, "Member 'UMarinerAbilitySkinData_CometCharge::HitFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, HitWallFX) == 0x000048, "Member 'UMarinerAbilitySkinData_CometCharge::HitWallFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, ChargeDamagedOutFX) == 0x000050, "Member 'UMarinerAbilitySkinData_CometCharge::ChargeDamagedOutFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, AimingReticleMesh) == 0x000058, "Member 'UMarinerAbilitySkinData_CometCharge::AimingReticleMesh' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, HitWallAnim) == 0x000060, "Member 'UMarinerAbilitySkinData_CometCharge::HitWallAnim' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, HitSurfaceAnim) == 0x000068, "Member 'UMarinerAbilitySkinData_CometCharge::HitSurfaceAnim' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, HitEnemyAnim) == 0x000070, "Member 'UMarinerAbilitySkinData_CometCharge::HitEnemyAnim' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, HitNothingAnim) == 0x000078, "Member 'UMarinerAbilitySkinData_CometCharge::HitNothingAnim' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, ChargingAnim) == 0x000080, "Member 'UMarinerAbilitySkinData_CometCharge::ChargingAnim' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, DashingAnim) == 0x000088, "Member 'UMarinerAbilitySkinData_CometCharge::DashingAnim' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, ChargingSFX) == 0x000090, "Member 'UMarinerAbilitySkinData_CometCharge::ChargingSFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, DashingSFX) == 0x000098, "Member 'UMarinerAbilitySkinData_CometCharge::DashingSFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, HitEnemySFX) == 0x0000A0, "Member 'UMarinerAbilitySkinData_CometCharge::HitEnemySFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, HitWallSFX) == 0x0000A8, "Member 'UMarinerAbilitySkinData_CometCharge::HitWallSFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, HitNothingSFX) == 0x0000B0, "Member 'UMarinerAbilitySkinData_CometCharge::HitNothingSFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_CometCharge, ChargingDamagedOutSFX) == 0x0000B8, "Member 'UMarinerAbilitySkinData_CometCharge::ChargingDamagedOutSFX' has a wrong offset!");

// Class Mariner.MarinerCaptureVolumeBase
// 0x0170 (0x0220 - 0x00B0)
class UMarinerCaptureVolumeBase : public UActorComponent
{
public:
	UMulticastInlineDelegateProperty_             OnCaptured;                                        // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCaptureLost;                                     // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCapturingTeamChanged;                            // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnContestedChangedDelegate;                        // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPlayCaptureProgressEffects;                      // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnNewConstestingCharacter;                         // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCharacterNoLongerContesting;                     // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<int32, bool>                             TeamsBlockedFromCapture;                           // 0x0120(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0170(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIgnoreAIBots;                                     // 0x0171(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bListenForActorOverlaps;                           // 0x0172(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1582[0x1];                                     // 0x0173(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CapturingTeam;                                     // 0x0174(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CaptureTime;                                       // 0x0178(0x0004)(Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DecayCaptureAssistFactor;                          // 0x017C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxPlayersAbleToCaptureAtOnce;                     // 0x0180(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1583[0x4];                                     // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CaptureRateOverTime;                               // 0x0188(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          CaptureProgressAudioEvent;                         // 0x0190(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          StopCaptureProgressAudioEvent;                     // 0x0198(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          BecameContestedAudioEvent;                         // 0x01A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldPlayCaptureProgressEffects;                 // 0x01A8(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1584[0x7];                                     // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOverlappingCharacterInfo>      OverlappingCharactersInfo;                         // 0x01B0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UCurveFloat*                            PlayerCountCaptureMultiplierCurve;                 // 0x01C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1585[0x51];                                    // 0x01C8(0x0051)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsContested;                                      // 0x0219(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1586[0x6];                                     // 0x021A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AllowTeamToCapture(int32 TeamIndex);
	void BlockTeamFromCapturing(int32 TeamIndex);
	void OnLocalCharacterChangedReality(EMarinerRealityState OldReality, EMarinerRealityState NewReality);
	void OnRep_bShouldPlayCaptureProgressEffects();
	void OnRep_CapturingTeam();
	void OnRep_IsContested();
	void OverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
	void OverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
	void ResetCaptureState();
	void SetCaptureTime(float NewCaptureTime);
	void SetIsEnabled(bool bEnabled);
	void UpdateFastOverlaps(const TArray<class UMarinerFastCollisionComponent*>& CurrentFastOverlaps);

	float GetCaptureTime() const;
	int32 GetCapturingTeamIndex() const;
	class AMarinerCharacter* GetFirstOverlappingCharacterOnTeam(int32 TeamIndex) const;
	bool GetIsContested() const;
	bool GetIsEnabled() const;
	int32 GetNumberOfCapturingCharactersOnTeam(int32 TeamIndex) const;
	bool IsAllowedToCapture(int32 Team) const;
	bool IsCharacterCurrentlyCapturing(const class AMarinerCharacter* TestCharacter) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCaptureVolumeBase">();
	}
	static class UMarinerCaptureVolumeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCaptureVolumeBase>();
	}
};
static_assert(alignof(UMarinerCaptureVolumeBase) == 0x000008, "Wrong alignment on UMarinerCaptureVolumeBase");
static_assert(sizeof(UMarinerCaptureVolumeBase) == 0x000220, "Wrong size on UMarinerCaptureVolumeBase");
static_assert(offsetof(UMarinerCaptureVolumeBase, OnCaptured) == 0x0000B0, "Member 'UMarinerCaptureVolumeBase::OnCaptured' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, OnCaptureLost) == 0x0000C0, "Member 'UMarinerCaptureVolumeBase::OnCaptureLost' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, OnCapturingTeamChanged) == 0x0000D0, "Member 'UMarinerCaptureVolumeBase::OnCapturingTeamChanged' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, OnContestedChangedDelegate) == 0x0000E0, "Member 'UMarinerCaptureVolumeBase::OnContestedChangedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, OnPlayCaptureProgressEffects) == 0x0000F0, "Member 'UMarinerCaptureVolumeBase::OnPlayCaptureProgressEffects' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, OnNewConstestingCharacter) == 0x000100, "Member 'UMarinerCaptureVolumeBase::OnNewConstestingCharacter' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, OnCharacterNoLongerContesting) == 0x000110, "Member 'UMarinerCaptureVolumeBase::OnCharacterNoLongerContesting' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, TeamsBlockedFromCapture) == 0x000120, "Member 'UMarinerCaptureVolumeBase::TeamsBlockedFromCapture' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, bIsEnabled) == 0x000170, "Member 'UMarinerCaptureVolumeBase::bIsEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, bIgnoreAIBots) == 0x000171, "Member 'UMarinerCaptureVolumeBase::bIgnoreAIBots' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, bListenForActorOverlaps) == 0x000172, "Member 'UMarinerCaptureVolumeBase::bListenForActorOverlaps' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, CapturingTeam) == 0x000174, "Member 'UMarinerCaptureVolumeBase::CapturingTeam' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, CaptureTime) == 0x000178, "Member 'UMarinerCaptureVolumeBase::CaptureTime' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, DecayCaptureAssistFactor) == 0x00017C, "Member 'UMarinerCaptureVolumeBase::DecayCaptureAssistFactor' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, MaxPlayersAbleToCaptureAtOnce) == 0x000180, "Member 'UMarinerCaptureVolumeBase::MaxPlayersAbleToCaptureAtOnce' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, CaptureRateOverTime) == 0x000188, "Member 'UMarinerCaptureVolumeBase::CaptureRateOverTime' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, CaptureProgressAudioEvent) == 0x000190, "Member 'UMarinerCaptureVolumeBase::CaptureProgressAudioEvent' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, StopCaptureProgressAudioEvent) == 0x000198, "Member 'UMarinerCaptureVolumeBase::StopCaptureProgressAudioEvent' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, BecameContestedAudioEvent) == 0x0001A0, "Member 'UMarinerCaptureVolumeBase::BecameContestedAudioEvent' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, bShouldPlayCaptureProgressEffects) == 0x0001A8, "Member 'UMarinerCaptureVolumeBase::bShouldPlayCaptureProgressEffects' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, OverlappingCharactersInfo) == 0x0001B0, "Member 'UMarinerCaptureVolumeBase::OverlappingCharactersInfo' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, PlayerCountCaptureMultiplierCurve) == 0x0001C0, "Member 'UMarinerCaptureVolumeBase::PlayerCountCaptureMultiplierCurve' has a wrong offset!");
static_assert(offsetof(UMarinerCaptureVolumeBase, bIsContested) == 0x000219, "Member 'UMarinerCaptureVolumeBase::bIsContested' has a wrong offset!");

// Class Mariner.MarinerMultiTeamCaptureVolume
// 0x0018 (0x0238 - 0x0220)
class UMarinerMultiTeamCaptureVolume final : public UMarinerCaptureVolumeBase
{
public:
	TArray<float>                                 CapturePercentageArray;                            // 0x0220(0x0010)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	bool                                          bDecayCaptureProgressOverTime;                     // 0x0230(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_158A[0x7];                                     // 0x0231(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_CapturePercentageArray();

	float GetCapturePercentage(int32 TeamIndex) const;
	bool IsCaptured() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMultiTeamCaptureVolume">();
	}
	static class UMarinerMultiTeamCaptureVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMultiTeamCaptureVolume>();
	}
};
static_assert(alignof(UMarinerMultiTeamCaptureVolume) == 0x000008, "Wrong alignment on UMarinerMultiTeamCaptureVolume");
static_assert(sizeof(UMarinerMultiTeamCaptureVolume) == 0x000238, "Wrong size on UMarinerMultiTeamCaptureVolume");
static_assert(offsetof(UMarinerMultiTeamCaptureVolume, CapturePercentageArray) == 0x000220, "Member 'UMarinerMultiTeamCaptureVolume::CapturePercentageArray' has a wrong offset!");
static_assert(offsetof(UMarinerMultiTeamCaptureVolume, bDecayCaptureProgressOverTime) == 0x000230, "Member 'UMarinerMultiTeamCaptureVolume::bDecayCaptureProgressOverTime' has a wrong offset!");

// Class Mariner.MarinerAbilitySkinData_DashSecondary
// 0x0020 (0x0090 - 0x0070)
class UMarinerAbilitySkinData_DashSecondary final : public UMarinerAbilitySkinData_ProjectileGeneral
{
public:
	class UParticleSystem*                        SpinnerVFX;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        BoomerangRicochetVFX;                              // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          BoomerangRicochetSFX;                              // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ReturnCatchSFX;                                    // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbilitySkinData_DashSecondary">();
	}
	static class UMarinerAbilitySkinData_DashSecondary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbilitySkinData_DashSecondary>();
	}
};
static_assert(alignof(UMarinerAbilitySkinData_DashSecondary) == 0x000008, "Wrong alignment on UMarinerAbilitySkinData_DashSecondary");
static_assert(sizeof(UMarinerAbilitySkinData_DashSecondary) == 0x000090, "Wrong size on UMarinerAbilitySkinData_DashSecondary");
static_assert(offsetof(UMarinerAbilitySkinData_DashSecondary, SpinnerVFX) == 0x000070, "Member 'UMarinerAbilitySkinData_DashSecondary::SpinnerVFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_DashSecondary, BoomerangRicochetVFX) == 0x000078, "Member 'UMarinerAbilitySkinData_DashSecondary::BoomerangRicochetVFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_DashSecondary, BoomerangRicochetSFX) == 0x000080, "Member 'UMarinerAbilitySkinData_DashSecondary::BoomerangRicochetSFX' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_DashSecondary, ReturnCatchSFX) == 0x000088, "Member 'UMarinerAbilitySkinData_DashSecondary::ReturnCatchSFX' has a wrong offset!");

// Class Mariner.MarinerNumberedProgressBar
// 0x0018 (0x0248 - 0x0230)
class UMarinerNumberedProgressBar final : public UUserWidget
{
public:
	float                                         TimeForBarFill;                                    // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FillAmountToPerform;                               // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             MyNumberTextBlock;                                 // 0x0238(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UProgressBar*                           MyProgressBar;                                     // 0x0240(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetBarPercentage(int32 NValue);
	void SetNumberValue(int32 NValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerNumberedProgressBar">();
	}
	static class UMarinerNumberedProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerNumberedProgressBar>();
	}
};
static_assert(alignof(UMarinerNumberedProgressBar) == 0x000008, "Wrong alignment on UMarinerNumberedProgressBar");
static_assert(sizeof(UMarinerNumberedProgressBar) == 0x000248, "Wrong size on UMarinerNumberedProgressBar");
static_assert(offsetof(UMarinerNumberedProgressBar, TimeForBarFill) == 0x000230, "Member 'UMarinerNumberedProgressBar::TimeForBarFill' has a wrong offset!");
static_assert(offsetof(UMarinerNumberedProgressBar, FillAmountToPerform) == 0x000234, "Member 'UMarinerNumberedProgressBar::FillAmountToPerform' has a wrong offset!");
static_assert(offsetof(UMarinerNumberedProgressBar, MyNumberTextBlock) == 0x000238, "Member 'UMarinerNumberedProgressBar::MyNumberTextBlock' has a wrong offset!");
static_assert(offsetof(UMarinerNumberedProgressBar, MyProgressBar) == 0x000240, "Member 'UMarinerNumberedProgressBar::MyProgressBar' has a wrong offset!");

// Class Mariner.MarinerAbilitySkinData_DashSpecial
// 0x0018 (0x0048 - 0x0030)
class UMarinerAbilitySkinData_DashSpecial final : public UMarinerAbilitySkinData_ProjectileBase
{
public:
	class USkeletalMesh*                          TeleporterMesh;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMaterialOverride>              MaterialOverrides;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbilitySkinData_DashSpecial">();
	}
	static class UMarinerAbilitySkinData_DashSpecial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbilitySkinData_DashSpecial>();
	}
};
static_assert(alignof(UMarinerAbilitySkinData_DashSpecial) == 0x000008, "Wrong alignment on UMarinerAbilitySkinData_DashSpecial");
static_assert(sizeof(UMarinerAbilitySkinData_DashSpecial) == 0x000048, "Wrong size on UMarinerAbilitySkinData_DashSpecial");
static_assert(offsetof(UMarinerAbilitySkinData_DashSpecial, TeleporterMesh) == 0x000030, "Member 'UMarinerAbilitySkinData_DashSpecial::TeleporterMesh' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinData_DashSpecial, MaterialOverrides) == 0x000038, "Member 'UMarinerAbilitySkinData_DashSpecial::MaterialOverrides' has a wrong offset!");

// Class Mariner.MarinerNarrationManager
// 0x0038 (0x0060 - 0x0028)
class UMarinerNarrationManager final : public UObject
{
public:
	uint8                                         Pad_158B[0x18];                                    // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UMarinerGameInstance>    OwningMarinerGameInstance;                         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_158C[0x18];                                    // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void QueueNarration(const class FText& NarrationText, bool bSelected);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerNarrationManager">();
	}
	static class UMarinerNarrationManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerNarrationManager>();
	}
};
static_assert(alignof(UMarinerNarrationManager) == 0x000008, "Wrong alignment on UMarinerNarrationManager");
static_assert(sizeof(UMarinerNarrationManager) == 0x000060, "Wrong size on UMarinerNarrationManager");
static_assert(offsetof(UMarinerNarrationManager, OwningMarinerGameInstance) == 0x000040, "Member 'UMarinerNarrationManager::OwningMarinerGameInstance' has a wrong offset!");

// Class Mariner.MarinerAbilitySkinData_ProjectileMap
// 0x0050 (0x0080 - 0x0030)
class UMarinerAbilitySkinData_ProjectileMap final : public UMarinerAbilitySkinData_Base
{
public:
	TMap<TSubclassOf<class AMarinerProjectile>, class UMarinerAbilitySkinData_ProjectileBase*> ProjectileSkinMapping;                             // 0x0030(0x0050)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbilitySkinData_ProjectileMap">();
	}
	static class UMarinerAbilitySkinData_ProjectileMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbilitySkinData_ProjectileMap>();
	}
};
static_assert(alignof(UMarinerAbilitySkinData_ProjectileMap) == 0x000008, "Wrong alignment on UMarinerAbilitySkinData_ProjectileMap");
static_assert(sizeof(UMarinerAbilitySkinData_ProjectileMap) == 0x000080, "Wrong size on UMarinerAbilitySkinData_ProjectileMap");
static_assert(offsetof(UMarinerAbilitySkinData_ProjectileMap, ProjectileSkinMapping) == 0x000030, "Member 'UMarinerAbilitySkinData_ProjectileMap::ProjectileSkinMapping' has a wrong offset!");

// Class Mariner.MarinerAbilitySkinMap
// 0x00A0 (0x00D0 - 0x0030)
class UMarinerAbilitySkinMap final : public UDataAsset
{
public:
	TMap<TSoftClassPtr<class UClass>, class UMarinerAbilitySkinData_Base*> AbilitySkinComponents;                             // 0x0030(0x0050)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class AMarinerProjectile>, class UMarinerAbilitySkinData_ProjectileBase*> ProjectileSkinMapping;                             // 0x0080(0x0050)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbilitySkinMap">();
	}
	static class UMarinerAbilitySkinMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbilitySkinMap>();
	}
};
static_assert(alignof(UMarinerAbilitySkinMap) == 0x000008, "Wrong alignment on UMarinerAbilitySkinMap");
static_assert(sizeof(UMarinerAbilitySkinMap) == 0x0000D0, "Wrong size on UMarinerAbilitySkinMap");
static_assert(offsetof(UMarinerAbilitySkinMap, AbilitySkinComponents) == 0x000030, "Member 'UMarinerAbilitySkinMap::AbilitySkinComponents' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySkinMap, ProjectileSkinMapping) == 0x000080, "Member 'UMarinerAbilitySkinMap::ProjectileSkinMapping' has a wrong offset!");

// Class Mariner.MarinerMoveUpdate_ApplyRecoveryDefaults
// 0x0008 (0x0040 - 0x0038)
class UMarinerMoveUpdate_ApplyRecoveryDefaults : public UMarinerMoveUpdateDefaults
{
public:
	float                                         DefaultMaxSpeedClamp;                              // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultResetJumps;                                // 0x003C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158E[0x3];                                     // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void RequestApplyRecovery(class UMarinerCharacterMovement* OwningMovementComponent, TSubclassOf<class UMarinerMoveUpdate_ApplyRecoveryDefaults> Defaults, float OverrideMaxSpeedClamp, bool bOverrideResetJumps);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMoveUpdate_ApplyRecoveryDefaults">();
	}
	static class UMarinerMoveUpdate_ApplyRecoveryDefaults* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMoveUpdate_ApplyRecoveryDefaults>();
	}
};
static_assert(alignof(UMarinerMoveUpdate_ApplyRecoveryDefaults) == 0x000008, "Wrong alignment on UMarinerMoveUpdate_ApplyRecoveryDefaults");
static_assert(sizeof(UMarinerMoveUpdate_ApplyRecoveryDefaults) == 0x000040, "Wrong size on UMarinerMoveUpdate_ApplyRecoveryDefaults");
static_assert(offsetof(UMarinerMoveUpdate_ApplyRecoveryDefaults, DefaultMaxSpeedClamp) == 0x000038, "Member 'UMarinerMoveUpdate_ApplyRecoveryDefaults::DefaultMaxSpeedClamp' has a wrong offset!");
static_assert(offsetof(UMarinerMoveUpdate_ApplyRecoveryDefaults, bDefaultResetJumps) == 0x00003C, "Member 'UMarinerMoveUpdate_ApplyRecoveryDefaults::bDefaultResetJumps' has a wrong offset!");

// Class Mariner.MarinerAbilitySystemComponent
// 0x0238 (0x1530 - 0x12F8)
class alignas(0x10) UMarinerAbilitySystemComponent final : public UAbilitySystemComponent
{
public:
	UMulticastInlineDelegateProperty_             OnAbilityFailedDelegate;                           // 0x12F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAbilityGivenDelegate;                            // 0x1308(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnGameplayEffectRemovedSafeDelegate;               // 0x1318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnControllerSetDelegate;                           // 0x1328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAbilityInputPressDelegate;                       // 0x1338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAbilityInputReleaseDelegate;                     // 0x1348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1590[0x168];                                   // 0x1358(0x0168)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InitialTags;                                       // 0x14C0(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            OnTakeDamageEffect;                                // 0x14E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ForceGameplayEffectRemovalDurationBuffer;          // 0x14E8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1591[0x44];                                    // 0x14EC(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyMoveAffectingGameplayEffectToSelf(TSubclassOf<class UGameplayEffect> GameplayEffectClass, int32 Level);
	bool AuthorityTryActivateAbilityByClassWithAimData(TSubclassOf<class UMarinerAbility> AbilityClassToGiveAndActivate);
	void BP_TryActivateAbilityByClass(TSubclassOf<class UMarinerAbility> AbilityClass, bool bSendAimData);
	struct FGameplayAbilitySpecHandle FindOrGiveAbility(TSubclassOf<class UMarinerAbility> GameplayAbilityClass, int32 AbilityLevel);
	void ForceCustomInputQueuingEvent(class UMarinerAbility* AbilityInstance);
	class UGameplayAbility* GetAbilityInstanceForAbilityClass(TSubclassOf<class UMarinerAbility> GameplayAbilityClass);
	TArray<struct FGameplayAbilitySpec> GetAllActivatableAbilitiesWithOwnedTag(const struct FGameplayTag& OwnedTag);
	void GetPredictedGameplayEffectCount(TSubclassOf<class UGameplayEffect> SourceGameplayEffect, class UAbilitySystemComponent* OptionalInstigatorFilterComponent, int32* OutBaseCount, int32* OutPendingApply, int32* OutPendingRemove, bool bEnforceOnGoingCheck);
	bool LocalTryActivateAbilityByClassWithAimData(TSubclassOf<class UMarinerAbility> AbilityClassToGiveAndActivate);
	void ModifyActiveGameplayEffectDuration(TSubclassOf<class UGameplayEffect> Effect, float ChangeInDuration);
	void OnAnyGameplayEffectRemoved(const struct FActiveGameplayEffect& RemovedEffect);
	void OnAnyGameplayTagChanged(const struct FGameplayTag& Tag, int32 NewCount);
	void OnOwnerDamageChanged(const class UMarinerDamageableComponent* RelevantDamageableComponent, float NewAccumulatedDamage, float OldAccumulatedDamage);
	void OnOwnerKnockedOut();
	void RemoveLocalGameplayEffect(TSubclassOf<class UGameplayEffect> GameplayEffect, class UAbilitySystemComponent* InstigatorAbilitySystemComponent, int32 StacksToRemove);
	void RemoveMoveAffectingGameplayEffectFromSelf(TSubclassOf<class UGameplayEffect> GameplayEffectClass);
	bool TryActivateAbilityByGameplayTag(const struct FGameplayTag& GamplayAbilityTag);

	void GetAbilityInstancesOfType(TSubclassOf<class UMarinerAbility> MarinerAbilityClass, TArray<class UMarinerAbility*>* OutAbilityInstances) const;
	struct FGameplayAbilitySpecHandle GetAbilitySpecHandleForAbilityClass(TSubclassOf<class UMarinerAbility> GameplayAbilityClass) const;
	int32 GetGameplayEffectLevel(TSubclassOf<class UGameplayEffect> GameplayEffect) const;
	class UMarinerCharacterMovement* GetMarinerCharacterMovement() const;
	class AMarinerCharacter* GetMarinerCharacterOwner() const;
	bool HasAbilityOfType(TSubclassOf<class UMarinerAbility> GameplayAbilityClass) const;
	bool HasOwnerAuthority() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbilitySystemComponent">();
	}
	static class UMarinerAbilitySystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAbilitySystemComponent>();
	}
};
static_assert(alignof(UMarinerAbilitySystemComponent) == 0x000010, "Wrong alignment on UMarinerAbilitySystemComponent");
static_assert(sizeof(UMarinerAbilitySystemComponent) == 0x001530, "Wrong size on UMarinerAbilitySystemComponent");
static_assert(offsetof(UMarinerAbilitySystemComponent, OnAbilityFailedDelegate) == 0x0012F8, "Member 'UMarinerAbilitySystemComponent::OnAbilityFailedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySystemComponent, OnAbilityGivenDelegate) == 0x001308, "Member 'UMarinerAbilitySystemComponent::OnAbilityGivenDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySystemComponent, OnGameplayEffectRemovedSafeDelegate) == 0x001318, "Member 'UMarinerAbilitySystemComponent::OnGameplayEffectRemovedSafeDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySystemComponent, OnControllerSetDelegate) == 0x001328, "Member 'UMarinerAbilitySystemComponent::OnControllerSetDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySystemComponent, OnAbilityInputPressDelegate) == 0x001338, "Member 'UMarinerAbilitySystemComponent::OnAbilityInputPressDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySystemComponent, OnAbilityInputReleaseDelegate) == 0x001348, "Member 'UMarinerAbilitySystemComponent::OnAbilityInputReleaseDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySystemComponent, InitialTags) == 0x0014C0, "Member 'UMarinerAbilitySystemComponent::InitialTags' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySystemComponent, OnTakeDamageEffect) == 0x0014E0, "Member 'UMarinerAbilitySystemComponent::OnTakeDamageEffect' has a wrong offset!");
static_assert(offsetof(UMarinerAbilitySystemComponent, ForceGameplayEffectRemovalDurationBuffer) == 0x0014E8, "Member 'UMarinerAbilitySystemComponent::ForceGameplayEffectRemovalDurationBuffer' has a wrong offset!");

// Class Mariner.MarinerNetworkInformationWidget
// 0x0098 (0x04F8 - 0x0460)
class UMarinerNetworkInformationWidget final : public UMarinerHUDWidget
{
public:
	class UTextBlock*                             Bound_FPS;                                         // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_Ping;                                        // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_InBandwidth;                                 // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_InPackets;                                   // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_InPacketsLoss;                               // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_OutBandwidth;                                // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_OutPackets;                                  // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_OutPacketsLoss;                              // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159D[0x58];                                    // 0x04A0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnShowNetworkInformationChanged(bool bStatus);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerNetworkInformationWidget">();
	}
	static class UMarinerNetworkInformationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerNetworkInformationWidget>();
	}
};
static_assert(alignof(UMarinerNetworkInformationWidget) == 0x000008, "Wrong alignment on UMarinerNetworkInformationWidget");
static_assert(sizeof(UMarinerNetworkInformationWidget) == 0x0004F8, "Wrong size on UMarinerNetworkInformationWidget");
static_assert(offsetof(UMarinerNetworkInformationWidget, Bound_FPS) == 0x000460, "Member 'UMarinerNetworkInformationWidget::Bound_FPS' has a wrong offset!");
static_assert(offsetof(UMarinerNetworkInformationWidget, Bound_Ping) == 0x000468, "Member 'UMarinerNetworkInformationWidget::Bound_Ping' has a wrong offset!");
static_assert(offsetof(UMarinerNetworkInformationWidget, Bound_InBandwidth) == 0x000470, "Member 'UMarinerNetworkInformationWidget::Bound_InBandwidth' has a wrong offset!");
static_assert(offsetof(UMarinerNetworkInformationWidget, Bound_InPackets) == 0x000478, "Member 'UMarinerNetworkInformationWidget::Bound_InPackets' has a wrong offset!");
static_assert(offsetof(UMarinerNetworkInformationWidget, Bound_InPacketsLoss) == 0x000480, "Member 'UMarinerNetworkInformationWidget::Bound_InPacketsLoss' has a wrong offset!");
static_assert(offsetof(UMarinerNetworkInformationWidget, Bound_OutBandwidth) == 0x000488, "Member 'UMarinerNetworkInformationWidget::Bound_OutBandwidth' has a wrong offset!");
static_assert(offsetof(UMarinerNetworkInformationWidget, Bound_OutPackets) == 0x000490, "Member 'UMarinerNetworkInformationWidget::Bound_OutPackets' has a wrong offset!");
static_assert(offsetof(UMarinerNetworkInformationWidget, Bound_OutPacketsLoss) == 0x000498, "Member 'UMarinerNetworkInformationWidget::Bound_OutPacketsLoss' has a wrong offset!");

// Class Mariner.MarinerStaticMeshActor
// 0x0008 (0x0230 - 0x0228)
class AMarinerStaticMeshActor : public AStaticMeshActor
{
public:
	class UNavLinkComponent*                      NavLinkComp;                                       // 0x0228(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerStaticMeshActor">();
	}
	static class AMarinerStaticMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerStaticMeshActor>();
	}
};
static_assert(alignof(AMarinerStaticMeshActor) == 0x000008, "Wrong alignment on AMarinerStaticMeshActor");
static_assert(sizeof(AMarinerStaticMeshActor) == 0x000230, "Wrong size on AMarinerStaticMeshActor");
static_assert(offsetof(AMarinerStaticMeshActor, NavLinkComp) == 0x000228, "Member 'AMarinerStaticMeshActor::NavLinkComp' has a wrong offset!");

// Class Mariner.MarinerStaticMeshProp
// 0x0048 (0x0278 - 0x0230)
class AMarinerStaticMeshProp : public AMarinerStaticMeshActor
{
public:
	uint8                                         Pad_159E[0x10];                                    // 0x0230(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             FellOutOfWorldEvent;                               // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	int32                                         TeamIndex;                                         // 0x0250(0x0004)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_159F[0x4];                                     // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerDamageableComponent*            DamageableComponent;                               // 0x0258(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldIgnoreImpulses;                             // 0x0260(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15A0[0x7];                                     // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          ImpactSound;                                       // 0x0268(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15A1[0x8];                                     // 0x0270(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AuthoritySetShouldIgnoreImpulses(bool bInShouldIgnoreImpulses);
	void OnFellOutOfWorld();
	void OnRep_TeamIndex();
	void OnTeamChange();
	void SetTeamIndex(int32 InTeamIndex);
	void UpdateTeamColors();

	class UMarinerDamageableComponent* BP_GetDamageableComponent() const;
	int32 GetTeamIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerStaticMeshProp">();
	}
	static class AMarinerStaticMeshProp* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerStaticMeshProp>();
	}
};
static_assert(alignof(AMarinerStaticMeshProp) == 0x000008, "Wrong alignment on AMarinerStaticMeshProp");
static_assert(sizeof(AMarinerStaticMeshProp) == 0x000278, "Wrong size on AMarinerStaticMeshProp");
static_assert(offsetof(AMarinerStaticMeshProp, FellOutOfWorldEvent) == 0x000240, "Member 'AMarinerStaticMeshProp::FellOutOfWorldEvent' has a wrong offset!");
static_assert(offsetof(AMarinerStaticMeshProp, TeamIndex) == 0x000250, "Member 'AMarinerStaticMeshProp::TeamIndex' has a wrong offset!");
static_assert(offsetof(AMarinerStaticMeshProp, DamageableComponent) == 0x000258, "Member 'AMarinerStaticMeshProp::DamageableComponent' has a wrong offset!");
static_assert(offsetof(AMarinerStaticMeshProp, bShouldIgnoreImpulses) == 0x000260, "Member 'AMarinerStaticMeshProp::bShouldIgnoreImpulses' has a wrong offset!");
static_assert(offsetof(AMarinerStaticMeshProp, ImpactSound) == 0x000268, "Member 'AMarinerStaticMeshProp::ImpactSound' has a wrong offset!");

// Class Mariner.MarinerPageNavigationWidget
// 0x0020 (0x02D0 - 0x02B0)
class UMarinerPageNavigationWidget : public UMarinerUserWidget
{
public:
	class UMarinerPrompt*                         Bound_PromptActionRight;                           // 0x02B0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPrompt*                         Bound_PromptActionLeft;                            // 0x02B8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_PagesInformation;                            // 0x02C0(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15A2[0x8];                                     // 0x02C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPageNavigationWidget">();
	}
	static class UMarinerPageNavigationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPageNavigationWidget>();
	}
};
static_assert(alignof(UMarinerPageNavigationWidget) == 0x000008, "Wrong alignment on UMarinerPageNavigationWidget");
static_assert(sizeof(UMarinerPageNavigationWidget) == 0x0002D0, "Wrong size on UMarinerPageNavigationWidget");
static_assert(offsetof(UMarinerPageNavigationWidget, Bound_PromptActionRight) == 0x0002B0, "Member 'UMarinerPageNavigationWidget::Bound_PromptActionRight' has a wrong offset!");
static_assert(offsetof(UMarinerPageNavigationWidget, Bound_PromptActionLeft) == 0x0002B8, "Member 'UMarinerPageNavigationWidget::Bound_PromptActionLeft' has a wrong offset!");
static_assert(offsetof(UMarinerPageNavigationWidget, Bound_PagesInformation) == 0x0002C0, "Member 'UMarinerPageNavigationWidget::Bound_PagesInformation' has a wrong offset!");

// Class Mariner.MarinerAbilitySystemProp
// 0x0010 (0x0288 - 0x0278)
class AMarinerAbilitySystemProp : public AMarinerStaticMeshProp
{
public:
	uint8                                         Pad_15A3[0x8];                                     // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerAbilitySystemComponent*         AbilitySystemComponent;                            // 0x0280(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbilitySystemProp">();
	}
	static class AMarinerAbilitySystemProp* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerAbilitySystemProp>();
	}
};
static_assert(alignof(AMarinerAbilitySystemProp) == 0x000008, "Wrong alignment on AMarinerAbilitySystemProp");
static_assert(sizeof(AMarinerAbilitySystemProp) == 0x000288, "Wrong size on AMarinerAbilitySystemProp");
static_assert(offsetof(AMarinerAbilitySystemProp, AbilitySystemComponent) == 0x000280, "Member 'AMarinerAbilitySystemProp::AbilitySystemComponent' has a wrong offset!");

// Class Mariner.MarinerAbsorbExplosionInterface
// 0x0000 (0x0028 - 0x0028)
class IMarinerAbsorbExplosionInterface final : public IInterface
{
public:
	void RespondToExplosionAbsorbed(class AActor* ExplodeInstigator, const struct FHitResult& ExplosionHit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAbsorbExplosionInterface">();
	}
	static class IMarinerAbsorbExplosionInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarinerAbsorbExplosionInterface>();
	}
};
static_assert(alignof(IMarinerAbsorbExplosionInterface) == 0x000008, "Wrong alignment on IMarinerAbsorbExplosionInterface");
static_assert(sizeof(IMarinerAbsorbExplosionInterface) == 0x000028, "Wrong size on IMarinerAbsorbExplosionInterface");

// Class Mariner.MarinerMessageBoxBase
// 0x0040 (0x0458 - 0x0418)
class UMarinerMessageBoxBase : public UMarinerAnimatedWidget
{
public:
	float                                         InputSuppressionTime;                              // 0x0418(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15A4[0x4];                                     // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerPromptBanner*                   Bound_PromptBanner;                                // 0x0420(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          MessageBoxDisplayedSFX;                            // 0x0428(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15A5[0x28];                                    // 0x0430(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_Populate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMessageBoxBase">();
	}
	static class UMarinerMessageBoxBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMessageBoxBase>();
	}
};
static_assert(alignof(UMarinerMessageBoxBase) == 0x000008, "Wrong alignment on UMarinerMessageBoxBase");
static_assert(sizeof(UMarinerMessageBoxBase) == 0x000458, "Wrong size on UMarinerMessageBoxBase");
static_assert(offsetof(UMarinerMessageBoxBase, InputSuppressionTime) == 0x000418, "Member 'UMarinerMessageBoxBase::InputSuppressionTime' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxBase, Bound_PromptBanner) == 0x000420, "Member 'UMarinerMessageBoxBase::Bound_PromptBanner' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxBase, MessageBoxDisplayedSFX) == 0x000428, "Member 'UMarinerMessageBoxBase::MessageBoxDisplayedSFX' has a wrong offset!");

// Class Mariner.MarinerOfferListMessageBox
// 0x0028 (0x0480 - 0x0458)
class UMarinerOfferListMessageBox : public UMarinerMessageBoxBase
{
public:
	TSubclassOf<class UMarinerLayeredButton>      ButtonType;                                        // 0x0458(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerLayeredButton>      NativeButtonType;                                  // 0x0460(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_Header;                                      // 0x0468(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_Description;                                 // 0x0470(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerHorizontalBox*                  Bound_ButtonPanel;                                 // 0x0478(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ButtonCallback(class UMarinerLayeredButton* Button);
	void PopulateNativeOffer(class UMarinerLayeredButton* ButtonInstance, const class FString& OfferId);
	void PopulateOffer(class UMarinerLayeredButton* ButtonInstance, const class FString& OfferId);

	const struct FMarinerMessageBoxOfferListData GetData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerOfferListMessageBox">();
	}
	static class UMarinerOfferListMessageBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerOfferListMessageBox>();
	}
};
static_assert(alignof(UMarinerOfferListMessageBox) == 0x000008, "Wrong alignment on UMarinerOfferListMessageBox");
static_assert(sizeof(UMarinerOfferListMessageBox) == 0x000480, "Wrong size on UMarinerOfferListMessageBox");
static_assert(offsetof(UMarinerOfferListMessageBox, ButtonType) == 0x000458, "Member 'UMarinerOfferListMessageBox::ButtonType' has a wrong offset!");
static_assert(offsetof(UMarinerOfferListMessageBox, NativeButtonType) == 0x000460, "Member 'UMarinerOfferListMessageBox::NativeButtonType' has a wrong offset!");
static_assert(offsetof(UMarinerOfferListMessageBox, Bound_Header) == 0x000468, "Member 'UMarinerOfferListMessageBox::Bound_Header' has a wrong offset!");
static_assert(offsetof(UMarinerOfferListMessageBox, Bound_Description) == 0x000470, "Member 'UMarinerOfferListMessageBox::Bound_Description' has a wrong offset!");
static_assert(offsetof(UMarinerOfferListMessageBox, Bound_ButtonPanel) == 0x000478, "Member 'UMarinerOfferListMessageBox::Bound_ButtonPanel' has a wrong offset!");

// Class Mariner.MarinerAchievement
// 0x0060 (0x0088 - 0x0028)
class UMarinerAchievement final : public UObject
{
public:
	uint8                                         Pad_15A6[0x30];                                    // 0x0028(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerGameInstance*                   MarinerGameInstance;                               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15A7[0x28];                                    // 0x0060(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAchievement">();
	}
	static class UMarinerAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAchievement>();
	}
};
static_assert(alignof(UMarinerAchievement) == 0x000008, "Wrong alignment on UMarinerAchievement");
static_assert(sizeof(UMarinerAchievement) == 0x000088, "Wrong size on UMarinerAchievement");
static_assert(offsetof(UMarinerAchievement, MarinerGameInstance) == 0x000058, "Member 'UMarinerAchievement::MarinerGameInstance' has a wrong offset!");

// Class Mariner.MarinerAchievementsGlobals
// 0x0070 (0x00A0 - 0x0030)
class UMarinerAchievementsGlobals final : public UDataAsset
{
public:
	TArray<struct FMarinerAchievementSetData>     AchievementSets;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, EMarinerAchievement>        AchievementReleventGameplayStats;                  // 0x0040(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FRetroactiveProfileAchievementData> RetroactiveProfileAchievements;                    // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAchievementsGlobals">();
	}
	static class UMarinerAchievementsGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAchievementsGlobals>();
	}
};
static_assert(alignof(UMarinerAchievementsGlobals) == 0x000008, "Wrong alignment on UMarinerAchievementsGlobals");
static_assert(sizeof(UMarinerAchievementsGlobals) == 0x0000A0, "Wrong size on UMarinerAchievementsGlobals");
static_assert(offsetof(UMarinerAchievementsGlobals, AchievementSets) == 0x000030, "Member 'UMarinerAchievementsGlobals::AchievementSets' has a wrong offset!");
static_assert(offsetof(UMarinerAchievementsGlobals, AchievementReleventGameplayStats) == 0x000040, "Member 'UMarinerAchievementsGlobals::AchievementReleventGameplayStats' has a wrong offset!");
static_assert(offsetof(UMarinerAchievementsGlobals, RetroactiveProfileAchievements) == 0x000090, "Member 'UMarinerAchievementsGlobals::RetroactiveProfileAchievements' has a wrong offset!");

// Class Mariner.MarinerNetworkGameplayCueActor
// 0x0000 (0x0218 - 0x0218)
class AMarinerNetworkGameplayCueActor final : public AActor
{
public:
	void NetMulticast_HandleGameplayCue_AddAndWhileActive(class AActor* TargetActor, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters);
	void NetMulticast_HandleGameplayCue_Remove(class AActor* TargetActor, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerNetworkGameplayCueActor">();
	}
	static class AMarinerNetworkGameplayCueActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerNetworkGameplayCueActor>();
	}
};
static_assert(alignof(AMarinerNetworkGameplayCueActor) == 0x000008, "Wrong alignment on AMarinerNetworkGameplayCueActor");
static_assert(sizeof(AMarinerNetworkGameplayCueActor) == 0x000218, "Wrong size on AMarinerNetworkGameplayCueActor");

// Class Mariner.MarinerActivationDevice
// 0x0038 (0x0250 - 0x0218)
class AMarinerActivationDevice final : public AActor
{
public:
	uint8                                         Pad_15A8[0x8];                                     // 0x0218(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          ActivationVolume;                                  // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                       SphereActivationVolume;                            // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarinerActivationDeviceTarget*         Target;                                            // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        SceneComponent;                                    // 0x0238(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerDamageableComponent*            DamageableComponent;                               // 0x0240(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAkAudioEvent*                          ImpactSound;                                       // 0x0248(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AuthorityActivate(class AMarinerCharacter* InInstigator);
	void EventPointDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& ShotFromDirection, const class UDamageType* DamageType, class AActor* DamageCauser);
	bool IsDeviceReadyToReset();
	void OnActivationComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnStateChanged(EMarinerActivationTargetState InNewState);

	class UMarinerDamageableComponent* BP_GetDamageableComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerActivationDevice">();
	}
	static class AMarinerActivationDevice* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerActivationDevice>();
	}
};
static_assert(alignof(AMarinerActivationDevice) == 0x000008, "Wrong alignment on AMarinerActivationDevice");
static_assert(sizeof(AMarinerActivationDevice) == 0x000250, "Wrong size on AMarinerActivationDevice");
static_assert(offsetof(AMarinerActivationDevice, ActivationVolume) == 0x000220, "Member 'AMarinerActivationDevice::ActivationVolume' has a wrong offset!");
static_assert(offsetof(AMarinerActivationDevice, SphereActivationVolume) == 0x000228, "Member 'AMarinerActivationDevice::SphereActivationVolume' has a wrong offset!");
static_assert(offsetof(AMarinerActivationDevice, Target) == 0x000230, "Member 'AMarinerActivationDevice::Target' has a wrong offset!");
static_assert(offsetof(AMarinerActivationDevice, SceneComponent) == 0x000238, "Member 'AMarinerActivationDevice::SceneComponent' has a wrong offset!");
static_assert(offsetof(AMarinerActivationDevice, DamageableComponent) == 0x000240, "Member 'AMarinerActivationDevice::DamageableComponent' has a wrong offset!");
static_assert(offsetof(AMarinerActivationDevice, ImpactSound) == 0x000248, "Member 'AMarinerActivationDevice::ImpactSound' has a wrong offset!");

// Class Mariner.MarinerActiveItemWidget
// 0x0008 (0x0238 - 0x0230)
class UMarinerActiveItemWidget : public UUserWidget
{
public:
	class UObject*                                OwningObject;                                      // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnItemSet(const struct FSlateBrush& Icon, float Duration);
	void SetItemWithDuration(class UObject* InOwningObject, const struct FSlateBrush& Icon, float Duration);

	bool IsOwningObject(class UObject* InObject) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerActiveItemWidget">();
	}
	static class UMarinerActiveItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerActiveItemWidget>();
	}
};
static_assert(alignof(UMarinerActiveItemWidget) == 0x000008, "Wrong alignment on UMarinerActiveItemWidget");
static_assert(sizeof(UMarinerActiveItemWidget) == 0x000238, "Wrong size on UMarinerActiveItemWidget");
static_assert(offsetof(UMarinerActiveItemWidget, OwningObject) == 0x000230, "Member 'UMarinerActiveItemWidget::OwningObject' has a wrong offset!");

// Class Mariner.MarinerActorPool
// 0x0010 (0x0038 - 0x0028)
class UMarinerActorPool final : public UObject
{
public:
	TArray<struct FMarinerActorTypePool>          ActorPools;                                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerActorPool">();
	}
	static class UMarinerActorPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerActorPool>();
	}
};
static_assert(alignof(UMarinerActorPool) == 0x000008, "Wrong alignment on UMarinerActorPool");
static_assert(sizeof(UMarinerActorPool) == 0x000038, "Wrong size on UMarinerActorPool");
static_assert(offsetof(UMarinerActorPool, ActorPools) == 0x000028, "Member 'UMarinerActorPool::ActorPools' has a wrong offset!");

// Class Mariner.MarinerAIController
// 0x0100 (0x0420 - 0x0320)
class AMarinerAIController final : public AAIController
{
public:
	UMulticastInlineDelegateProperty_             OnPossessPawn;                                     // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnUnpossessPawn;                                   // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPlayerStateInitiated;                            // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UBlackboardComponent*                   BlackboardComp;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBehaviorTreeComponent*                 BehaviorComp;                                      // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FaceRotationBlendFactor;                           // 0x0360(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RandomAimOffestUpdateFrequency;                    // 0x0364(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerBotDifficultyData*              DifficultyData;                                    // 0x0368(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBotDifficultyLevel                           DifficultyLevel;                                   // 0x0370(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDormant;                                        // 0x0371(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15B0[0x9E];                                    // 0x0372(0x009E)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsAllowedToRocketJump;                            // 0x0410(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15B1[0xF];                                     // 0x0411(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ActivateAbilityByAction(EMarinerInputActions InputAction);
	bool ActivateAbilityByActionWithAimOverride(EMarinerInputActions InputAction, const struct FVector& AimTargetOverride);
	bool ActivateAbilityByGameplayTag(const struct FGameplayTag& GamplayAbilityTag);
	void FindClosestEnemy();
	bool FindClosestEnemyInLOS(float LineOfSightRange, bool bRequireLOS);
	void GenerateNewRandomRotationAimOffsets();
	void GenerateNextRandomRotationAimOffset();
	void OnOwnerDamageChanged(const class UMarinerDamageableComponent* RelevantDamageableComponent, float NewAccumulatedDamage, float OldAccumulatedDamage);
	void OnPlayerStateInitEvent();
	bool PressAbilityInput(EMarinerInputActions InputAction, bool bShouldInstantRelease);
	void ReleaseAbilityInput(EMarinerInputActions InputAction);
	void SetCanRespawn(bool bNewCanRespawn);
	void SetDormancy(bool bNewDormancy);
	void SetIsIndependent(bool bNewIsIndependent);
	void SetObjectiveEnemy(class APawn* InPawn);
	void ShootTarget(float BurstDuration, bool bTryToUseSecondary);

	class AMarinerActivationDevice* GetActivationDevice() const;
	class FString GetCurrentObjective() const;
	const EBotDifficultyLevel GetDifficultyLevel() const;
	class AMarinerItem* GetItemToGrab() const;
	class AMarinerCharacter* GetLocalEnemy() const;
	class UEnvQuery* GetObjectiveDestinationQuery() const;
	class AMarinerCharacter* GetObjectiveEnemy() const;
	class UEnvQuery* GetObjectiveEnemyQuery() const;
	bool IsCurrentlyBurstFiring() const;
	bool IsIndependent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAIController">();
	}
	static class AMarinerAIController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerAIController>();
	}
};
static_assert(alignof(AMarinerAIController) == 0x000008, "Wrong alignment on AMarinerAIController");
static_assert(sizeof(AMarinerAIController) == 0x000420, "Wrong size on AMarinerAIController");
static_assert(offsetof(AMarinerAIController, OnPossessPawn) == 0x000320, "Member 'AMarinerAIController::OnPossessPawn' has a wrong offset!");
static_assert(offsetof(AMarinerAIController, OnUnpossessPawn) == 0x000330, "Member 'AMarinerAIController::OnUnpossessPawn' has a wrong offset!");
static_assert(offsetof(AMarinerAIController, OnPlayerStateInitiated) == 0x000340, "Member 'AMarinerAIController::OnPlayerStateInitiated' has a wrong offset!");
static_assert(offsetof(AMarinerAIController, BlackboardComp) == 0x000350, "Member 'AMarinerAIController::BlackboardComp' has a wrong offset!");
static_assert(offsetof(AMarinerAIController, BehaviorComp) == 0x000358, "Member 'AMarinerAIController::BehaviorComp' has a wrong offset!");
static_assert(offsetof(AMarinerAIController, FaceRotationBlendFactor) == 0x000360, "Member 'AMarinerAIController::FaceRotationBlendFactor' has a wrong offset!");
static_assert(offsetof(AMarinerAIController, RandomAimOffestUpdateFrequency) == 0x000364, "Member 'AMarinerAIController::RandomAimOffestUpdateFrequency' has a wrong offset!");
static_assert(offsetof(AMarinerAIController, DifficultyData) == 0x000368, "Member 'AMarinerAIController::DifficultyData' has a wrong offset!");
static_assert(offsetof(AMarinerAIController, DifficultyLevel) == 0x000370, "Member 'AMarinerAIController::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(AMarinerAIController, bIsDormant) == 0x000371, "Member 'AMarinerAIController::bIsDormant' has a wrong offset!");
static_assert(offsetof(AMarinerAIController, bIsAllowedToRocketJump) == 0x000410, "Member 'AMarinerAIController::bIsAllowedToRocketJump' has a wrong offset!");

// Class Mariner.MarinerAimAssistDataAsset
// 0x0068 (0x0098 - 0x0030)
class UMarinerAimAssistDataAsset final : public UDataAsset
{
public:
	struct FMarinerAimingCone                     RedReticleCone;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarinerAimingCone                     FrictionCone;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LookFrictionEaseOutDuration;                       // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyApplyLookFrictionWhenTurningAwayFromTarget;   // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15B7[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerAimingCone                     BulletBendingCone;                                 // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PreferCloserAimAssistTargetDistanceMarginAsRangeRatio; // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlwaysPreferCloserAimAssistTargetRangeRatio;       // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlwaysPreferAimAssistTargetsWithinAngleOfConeCenter; // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15B8[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           MagnetismAngularSpeedCurve;                        // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMagnetismOnUpDownMovement;                   // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15B9[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BreakMagnetismNearDistance;                        // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AimMagnetismAfterStoppingHysteresisTimeCurve;      // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PredictMagnetismBasedOnVelocityWeight;             // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15BA[0x4];                                     // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAimAssistDataAsset">();
	}
	static class UMarinerAimAssistDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAimAssistDataAsset>();
	}
};
static_assert(alignof(UMarinerAimAssistDataAsset) == 0x000008, "Wrong alignment on UMarinerAimAssistDataAsset");
static_assert(sizeof(UMarinerAimAssistDataAsset) == 0x000098, "Wrong size on UMarinerAimAssistDataAsset");
static_assert(offsetof(UMarinerAimAssistDataAsset, RedReticleCone) == 0x000030, "Member 'UMarinerAimAssistDataAsset::RedReticleCone' has a wrong offset!");
static_assert(offsetof(UMarinerAimAssistDataAsset, FrictionCone) == 0x000040, "Member 'UMarinerAimAssistDataAsset::FrictionCone' has a wrong offset!");
static_assert(offsetof(UMarinerAimAssistDataAsset, LookFrictionEaseOutDuration) == 0x000050, "Member 'UMarinerAimAssistDataAsset::LookFrictionEaseOutDuration' has a wrong offset!");
static_assert(offsetof(UMarinerAimAssistDataAsset, bOnlyApplyLookFrictionWhenTurningAwayFromTarget) == 0x000054, "Member 'UMarinerAimAssistDataAsset::bOnlyApplyLookFrictionWhenTurningAwayFromTarget' has a wrong offset!");
static_assert(offsetof(UMarinerAimAssistDataAsset, BulletBendingCone) == 0x000058, "Member 'UMarinerAimAssistDataAsset::BulletBendingCone' has a wrong offset!");
static_assert(offsetof(UMarinerAimAssistDataAsset, PreferCloserAimAssistTargetDistanceMarginAsRangeRatio) == 0x000068, "Member 'UMarinerAimAssistDataAsset::PreferCloserAimAssistTargetDistanceMarginAsRangeRatio' has a wrong offset!");
static_assert(offsetof(UMarinerAimAssistDataAsset, AlwaysPreferCloserAimAssistTargetRangeRatio) == 0x00006C, "Member 'UMarinerAimAssistDataAsset::AlwaysPreferCloserAimAssistTargetRangeRatio' has a wrong offset!");
static_assert(offsetof(UMarinerAimAssistDataAsset, AlwaysPreferAimAssistTargetsWithinAngleOfConeCenter) == 0x000070, "Member 'UMarinerAimAssistDataAsset::AlwaysPreferAimAssistTargetsWithinAngleOfConeCenter' has a wrong offset!");
static_assert(offsetof(UMarinerAimAssistDataAsset, MagnetismAngularSpeedCurve) == 0x000078, "Member 'UMarinerAimAssistDataAsset::MagnetismAngularSpeedCurve' has a wrong offset!");
static_assert(offsetof(UMarinerAimAssistDataAsset, bAllowMagnetismOnUpDownMovement) == 0x000080, "Member 'UMarinerAimAssistDataAsset::bAllowMagnetismOnUpDownMovement' has a wrong offset!");
static_assert(offsetof(UMarinerAimAssistDataAsset, BreakMagnetismNearDistance) == 0x000084, "Member 'UMarinerAimAssistDataAsset::BreakMagnetismNearDistance' has a wrong offset!");
static_assert(offsetof(UMarinerAimAssistDataAsset, AimMagnetismAfterStoppingHysteresisTimeCurve) == 0x000088, "Member 'UMarinerAimAssistDataAsset::AimMagnetismAfterStoppingHysteresisTimeCurve' has a wrong offset!");
static_assert(offsetof(UMarinerAimAssistDataAsset, PredictMagnetismBasedOnVelocityWeight) == 0x000090, "Member 'UMarinerAimAssistDataAsset::PredictMagnetismBasedOnVelocityWeight' has a wrong offset!");

// Class Mariner.MarinerAIPathFollowingComponent
// 0x0070 (0x02C8 - 0x0258)
class UMarinerAIPathFollowingComponent final : public UPathFollowingComponent
{
public:
	float                                         NearbyNavmeshSearchRadius;                         // 0x0258(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NearbyNavmeshSearchHeight;                         // 0x025C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NearbyNavmeshSearchVelocityMultiplier;             // 0x0260(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IsOnNavmeshAgentRaduisMultiplier;                  // 0x0264(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IsOnNavmeshAgentHeightMultiplier;                  // 0x0268(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IsAboveNavmeshAgentRadiusMultiplier;               // 0x026C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IsAboveNavmeshSearchHeight;                        // 0x0270(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RocketJumpRecoveryThreshold;                       // 0x0274(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RocketJumpCooldownWhileOnNullNavMesh;              // 0x0278(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LastKnownNavLocation;                              // 0x027C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MidairPredictiveVelocityFactor;                    // 0x0288(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15BB[0x4];                                     // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerCharacterMovement*              CharacterMoveComp;                                 // 0x0290(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15BC[0x30];                                    // 0x0298(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AbortMoveByOwner();
	void NotifyExternalLaunch();
	void OnAnyLaunch(const struct FVector& PostLaunchVelocity, bool bLaunchContainedHostileImpulse, bool bLaunchWasCritical);
	void OnMovementSuppressionTagCountChanged(const struct FGameplayTag& GameplayTag, int32 Count);
	void OnOwnerCharacterDestroyed(class AActor* DestroyedActor);
	void OnOwnerCharacterRecoveredAuthority(class AMarinerCharacter* RecoveredCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAIPathFollowingComponent">();
	}
	static class UMarinerAIPathFollowingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAIPathFollowingComponent>();
	}
};
static_assert(alignof(UMarinerAIPathFollowingComponent) == 0x000008, "Wrong alignment on UMarinerAIPathFollowingComponent");
static_assert(sizeof(UMarinerAIPathFollowingComponent) == 0x0002C8, "Wrong size on UMarinerAIPathFollowingComponent");
static_assert(offsetof(UMarinerAIPathFollowingComponent, NearbyNavmeshSearchRadius) == 0x000258, "Member 'UMarinerAIPathFollowingComponent::NearbyNavmeshSearchRadius' has a wrong offset!");
static_assert(offsetof(UMarinerAIPathFollowingComponent, NearbyNavmeshSearchHeight) == 0x00025C, "Member 'UMarinerAIPathFollowingComponent::NearbyNavmeshSearchHeight' has a wrong offset!");
static_assert(offsetof(UMarinerAIPathFollowingComponent, NearbyNavmeshSearchVelocityMultiplier) == 0x000260, "Member 'UMarinerAIPathFollowingComponent::NearbyNavmeshSearchVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerAIPathFollowingComponent, IsOnNavmeshAgentRaduisMultiplier) == 0x000264, "Member 'UMarinerAIPathFollowingComponent::IsOnNavmeshAgentRaduisMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerAIPathFollowingComponent, IsOnNavmeshAgentHeightMultiplier) == 0x000268, "Member 'UMarinerAIPathFollowingComponent::IsOnNavmeshAgentHeightMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerAIPathFollowingComponent, IsAboveNavmeshAgentRadiusMultiplier) == 0x00026C, "Member 'UMarinerAIPathFollowingComponent::IsAboveNavmeshAgentRadiusMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerAIPathFollowingComponent, IsAboveNavmeshSearchHeight) == 0x000270, "Member 'UMarinerAIPathFollowingComponent::IsAboveNavmeshSearchHeight' has a wrong offset!");
static_assert(offsetof(UMarinerAIPathFollowingComponent, RocketJumpRecoveryThreshold) == 0x000274, "Member 'UMarinerAIPathFollowingComponent::RocketJumpRecoveryThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerAIPathFollowingComponent, RocketJumpCooldownWhileOnNullNavMesh) == 0x000278, "Member 'UMarinerAIPathFollowingComponent::RocketJumpCooldownWhileOnNullNavMesh' has a wrong offset!");
static_assert(offsetof(UMarinerAIPathFollowingComponent, LastKnownNavLocation) == 0x00027C, "Member 'UMarinerAIPathFollowingComponent::LastKnownNavLocation' has a wrong offset!");
static_assert(offsetof(UMarinerAIPathFollowingComponent, MidairPredictiveVelocityFactor) == 0x000288, "Member 'UMarinerAIPathFollowingComponent::MidairPredictiveVelocityFactor' has a wrong offset!");
static_assert(offsetof(UMarinerAIPathFollowingComponent, CharacterMoveComp) == 0x000290, "Member 'UMarinerAIPathFollowingComponent::CharacterMoveComp' has a wrong offset!");

// Class Mariner.MarinerAIWanderPoint
// 0x0000 (0x0218 - 0x0218)
class AMarinerAIWanderPoint final : public ATargetPoint
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAIWanderPoint">();
	}
	static class AMarinerAIWanderPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerAIWanderPoint>();
	}
};
static_assert(alignof(AMarinerAIWanderPoint) == 0x000008, "Wrong alignment on AMarinerAIWanderPoint");
static_assert(sizeof(AMarinerAIWanderPoint) == 0x000218, "Wrong size on AMarinerAIWanderPoint");

// Class Mariner.MarinerAnimatedProgressWidget
// 0x00C8 (0x02F8 - 0x0230)
class UMarinerAnimatedProgressWidget : public UUserWidget
{
public:
	UMulticastInlineDelegateProperty_             OnLevelChangeStarted;                              // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnLevelChangeEnded;                                // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAnimationComplete;                               // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         MinTimeScalar;                                     // 0x0260(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15BE[0x4];                                     // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            StartCurve;                                        // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            EndCurve;                                          // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            FastCurve;                                         // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            FullCurve;                                         // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     ProgressMaterial;                                  // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          LevelUpSFX;                                        // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          LevelDownSFX;                                      // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          AnimationCompleteSFX;                              // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_MaterialProgressBar;                         // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_LevelMaxMessage;                             // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               ProgressMaterialInstance;                          // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15BF[0x38];                                    // 0x02C0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnimateAdditional(int32 InLevelDelta, float InPercentDelta, float InDurationPerLevelSeconds, float InLevelDelaySeconds, float InFinalDelaySeconds);
	void BPOnLevelDelayStarted(int32 CurrentLevel, float CurrentLevelPercent, float Duration);
	void BPOnLevelSet(bool bIsInit, int32 CurrentLevel, float CurrentLevelPercent);
	void Init(int32 InLevel, float InPercent, int32 InLevelMax);
	void InitAndAnimate(int32 InLevelStart, float InLevelStartPercent, int32 InLevelEnd, float InLevelEndPercent, float InDurationPerLevelSeconds, float InLevelDelaySeconds, float InFinalDelaySeconds, int32 InLevelMax);

	struct FMarinerAnimatedProgressWidgetAnimations GetAnimations() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAnimatedProgressWidget">();
	}
	static class UMarinerAnimatedProgressWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAnimatedProgressWidget>();
	}
};
static_assert(alignof(UMarinerAnimatedProgressWidget) == 0x000008, "Wrong alignment on UMarinerAnimatedProgressWidget");
static_assert(sizeof(UMarinerAnimatedProgressWidget) == 0x0002F8, "Wrong size on UMarinerAnimatedProgressWidget");
static_assert(offsetof(UMarinerAnimatedProgressWidget, OnLevelChangeStarted) == 0x000230, "Member 'UMarinerAnimatedProgressWidget::OnLevelChangeStarted' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedProgressWidget, OnLevelChangeEnded) == 0x000240, "Member 'UMarinerAnimatedProgressWidget::OnLevelChangeEnded' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedProgressWidget, OnAnimationComplete) == 0x000250, "Member 'UMarinerAnimatedProgressWidget::OnAnimationComplete' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedProgressWidget, MinTimeScalar) == 0x000260, "Member 'UMarinerAnimatedProgressWidget::MinTimeScalar' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedProgressWidget, StartCurve) == 0x000268, "Member 'UMarinerAnimatedProgressWidget::StartCurve' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedProgressWidget, EndCurve) == 0x000270, "Member 'UMarinerAnimatedProgressWidget::EndCurve' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedProgressWidget, FastCurve) == 0x000278, "Member 'UMarinerAnimatedProgressWidget::FastCurve' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedProgressWidget, FullCurve) == 0x000280, "Member 'UMarinerAnimatedProgressWidget::FullCurve' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedProgressWidget, ProgressMaterial) == 0x000288, "Member 'UMarinerAnimatedProgressWidget::ProgressMaterial' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedProgressWidget, LevelUpSFX) == 0x000290, "Member 'UMarinerAnimatedProgressWidget::LevelUpSFX' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedProgressWidget, LevelDownSFX) == 0x000298, "Member 'UMarinerAnimatedProgressWidget::LevelDownSFX' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedProgressWidget, AnimationCompleteSFX) == 0x0002A0, "Member 'UMarinerAnimatedProgressWidget::AnimationCompleteSFX' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedProgressWidget, Bound_MaterialProgressBar) == 0x0002A8, "Member 'UMarinerAnimatedProgressWidget::Bound_MaterialProgressBar' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedProgressWidget, Bound_LevelMaxMessage) == 0x0002B0, "Member 'UMarinerAnimatedProgressWidget::Bound_LevelMaxMessage' has a wrong offset!");
static_assert(offsetof(UMarinerAnimatedProgressWidget, ProgressMaterialInstance) == 0x0002B8, "Member 'UMarinerAnimatedProgressWidget::ProgressMaterialInstance' has a wrong offset!");

// Class Mariner.MarinerAnimInstance
// 0x0000 (0x0270 - 0x0270)
#pragma pack(push, 0x1)
class alignas(0x10) UMarinerAnimInstance : public UAnimInstance
{
public:
	void CalculateAnimation(const class AMarinerCharacter* Character, const class USkeletalMeshComponent* SkeletalMesh, const float DeltaTime, const float YawInterpTime, bool& bIsMoving, bool& bIsFalling, bool& bIsStunned, bool& bIsReturningToArena, struct FVector2D& HorizontalRelativeSpeed, float& AimPitch, float& AimYaw, struct FVector& Velocity, struct FRotator& SkeletonRotation, EMarinerCardinalDirection& CardinalDirection, float& NorthOffset, float& SouthOffset, float& EastOffset, float& WestOffset, float& YawOffset);
	void DoLegIKTrace(bool bFootRotates, float FootWidth, float FootLength, bool& bOutDidFootHit, struct FVector& OutEffectorLocation, struct FRotator& OutEffectorRotation, float& OutFootAlpha, const class USkeletalMeshComponent* SkeletalMesh, class FName HeelSocket, class FName ToeSocket, float ForwardOffset, const struct FVector& EffectorOffset, float FootTraceZOffset, float FootTraceLength, float ToeTraceLength, float FKFootMaxHeight, class UCurveFloat* FootLiftCurve, bool bEnableIKTraceDebug);

	void CalculateLocomotionOffsets(const class AMarinerCharacter* Character, const struct FVector& Velocity, const struct FVector2D& HorizontalRelativeVelocity, const float DeltaTime, struct FRotator& SkeletonRotation, bool& bIsFalling, EMarinerCardinalDirection* CardinalDirection, float* NorthOffset, float* SouthOffset, float* EastOffset, float* WestOffset) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAnimInstance">();
	}
	static class UMarinerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAnimInstance>();
	}
};
#pragma pack(pop)
static_assert(alignof(UMarinerAnimInstance) == 0x000010, "Wrong alignment on UMarinerAnimInstance");
static_assert(sizeof(UMarinerAnimInstance) == 0x000270, "Wrong size on UMarinerAnimInstance");

// Class Mariner.MarinerPhysicsLibrary
// 0x0000 (0x0028 - 0x0028)
class UMarinerPhysicsLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool FindItemDropLocation(class UObject* WorldContextObject, const class AMarinerCharacter* DroppingCharacter, class AActor* DroppedItemActor, const struct FVector& SuggestedDropLocation, const struct FRotator& DropRotation, struct FVector* OutBestDropLocation);
	static TArray<class AMarinerCharacter*> FindVisibleCharacters(class UObject* WorldContextObject, class AMarinerCharacter* LookingCharacter, int32 RelativeTeam, float MaxLookAngle, ECollisionChannel CollisionChannel, int32 TargetingTypes, bool bDebugDraw);
	static float GetWorldGravityZ(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPhysicsLibrary">();
	}
	static class UMarinerPhysicsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPhysicsLibrary>();
	}
};
static_assert(alignof(UMarinerPhysicsLibrary) == 0x000008, "Wrong alignment on UMarinerPhysicsLibrary");
static_assert(sizeof(UMarinerPhysicsLibrary) == 0x000028, "Wrong size on UMarinerPhysicsLibrary");

// Class Mariner.MarinerAnimInstance3rdPerson
// 0x0150 (0x03C0 - 0x0270)
class UMarinerAnimInstance3rdPerson final : public UMarinerAnimInstance
{
public:
	float                                         AirLeanRollMultiplier;                             // 0x0268(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AirLeanPitchMultiplier;                            // 0x026C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AimOffsetSmoothing;                                // 0x0270(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VelocityLengthTumbleThreshold;                     // 0x0274(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LocomotionMaskDivisor;                             // 0x0278(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RunReferenceSpeed;                                 // 0x027C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RunSpeedMin;                                       // 0x0280(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RunSpeedMax;                                       // 0x0284(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkReferenceSpeed;                                // 0x0288(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkSpeedMin;                                      // 0x028C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkSpeedMax;                                      // 0x0290(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurnInPlaceFrames;                                 // 0x0294(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkRunTransitionSpeed;                            // 0x0298(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15CC[0x4];                                     // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      Character;                                         // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerCharacterMovement*              MovementComponent;                                 // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerAbilitySystemComponent*         AbilitySystem;                                     // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  TumbleTag;                                         // 0x02C0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsMoving;                                         // 0x02E0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFalling;                                        // 0x02E1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsStunned;                                        // 0x02E2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsReturningToArena;                               // 0x02E3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              HorizontalRelativeSpeed;                           // 0x02E4(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                VelocityRelative;                                  // 0x02EC(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AimPitch;                                          // 0x02F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurnInPlaceRotation;                               // 0x02FC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastFrameTurnInPlaceRotation;                      // 0x0300(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsTurning;                                        // 0x0304(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15CD[0x3];                                     // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CharacterForwardVector;                            // 0x0308(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Velocity;                                          // 0x0314(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               SkeletonRotation;                                  // 0x0320(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EMarinerCardinalDirection                     CardinalDirection;                                 // 0x032C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerCardinalDirection                     PreviousDirection;                                 // 0x032D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDoPivot;                                          // 0x032E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15CE[0x1];                                     // 0x032F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NorthOffset;                                       // 0x0330(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SouthOffset;                                       // 0x0334(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EastOffset;                                        // 0x0338(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WestOffset;                                        // 0x033C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         YawOffset;                                         // 0x0340(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Acceleration;                                      // 0x0344(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                AccelerationNormal;                                // 0x0350(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                AccelerationNormalRelative;                        // 0x035C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                VelocityNormal;                                    // 0x0368(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VelocityLength;                                    // 0x0374(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RunSpeed;                                          // 0x0378(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkSpeed;                                         // 0x037C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsTumbling;                                       // 0x0380(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsWalking;                                        // 0x0381(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15CF[0x2];                                     // 0x0382(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TumbleSpeed;                                       // 0x0384(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanTumble;                                        // 0x0388(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15D0[0x3];                                     // 0x0389(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageTime;                                        // 0x038C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               AirLean;                                           // 0x0390(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         LegIK;                                             // 0x039C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsKnockback;                                      // 0x03A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15D1[0x3];                                     // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PivotRotation;                                     // 0x03A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDoJump;                                           // 0x03A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15D2[0x3];                                     // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         JumpCount;                                         // 0x03AC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRecentlyDamaged;                                  // 0x03B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15D3[0xF];                                     // 0x03B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CalculateAirLean(float* RelativeX, float* RelativeY, struct FRotator* Rotation);
	EMarinerCardinalDirection GetCardinalDirectionFromVector(const struct FVector& InVector);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAnimInstance3rdPerson">();
	}
	static class UMarinerAnimInstance3rdPerson* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAnimInstance3rdPerson>();
	}
};
static_assert(alignof(UMarinerAnimInstance3rdPerson) == 0x000010, "Wrong alignment on UMarinerAnimInstance3rdPerson");
static_assert(sizeof(UMarinerAnimInstance3rdPerson) == 0x0003C0, "Wrong size on UMarinerAnimInstance3rdPerson");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, AirLeanRollMultiplier) == 0x000268, "Member 'UMarinerAnimInstance3rdPerson::AirLeanRollMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, AirLeanPitchMultiplier) == 0x00026C, "Member 'UMarinerAnimInstance3rdPerson::AirLeanPitchMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, AimOffsetSmoothing) == 0x000270, "Member 'UMarinerAnimInstance3rdPerson::AimOffsetSmoothing' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, VelocityLengthTumbleThreshold) == 0x000274, "Member 'UMarinerAnimInstance3rdPerson::VelocityLengthTumbleThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, LocomotionMaskDivisor) == 0x000278, "Member 'UMarinerAnimInstance3rdPerson::LocomotionMaskDivisor' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, RunReferenceSpeed) == 0x00027C, "Member 'UMarinerAnimInstance3rdPerson::RunReferenceSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, RunSpeedMin) == 0x000280, "Member 'UMarinerAnimInstance3rdPerson::RunSpeedMin' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, RunSpeedMax) == 0x000284, "Member 'UMarinerAnimInstance3rdPerson::RunSpeedMax' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, WalkReferenceSpeed) == 0x000288, "Member 'UMarinerAnimInstance3rdPerson::WalkReferenceSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, WalkSpeedMin) == 0x00028C, "Member 'UMarinerAnimInstance3rdPerson::WalkSpeedMin' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, WalkSpeedMax) == 0x000290, "Member 'UMarinerAnimInstance3rdPerson::WalkSpeedMax' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, TurnInPlaceFrames) == 0x000294, "Member 'UMarinerAnimInstance3rdPerson::TurnInPlaceFrames' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, WalkRunTransitionSpeed) == 0x000298, "Member 'UMarinerAnimInstance3rdPerson::WalkRunTransitionSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, Character) == 0x0002A0, "Member 'UMarinerAnimInstance3rdPerson::Character' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, SkeletalMesh) == 0x0002A8, "Member 'UMarinerAnimInstance3rdPerson::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, MovementComponent) == 0x0002B0, "Member 'UMarinerAnimInstance3rdPerson::MovementComponent' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, AbilitySystem) == 0x0002B8, "Member 'UMarinerAnimInstance3rdPerson::AbilitySystem' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, TumbleTag) == 0x0002C0, "Member 'UMarinerAnimInstance3rdPerson::TumbleTag' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, bIsMoving) == 0x0002E0, "Member 'UMarinerAnimInstance3rdPerson::bIsMoving' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, bIsFalling) == 0x0002E1, "Member 'UMarinerAnimInstance3rdPerson::bIsFalling' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, bIsStunned) == 0x0002E2, "Member 'UMarinerAnimInstance3rdPerson::bIsStunned' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, bIsReturningToArena) == 0x0002E3, "Member 'UMarinerAnimInstance3rdPerson::bIsReturningToArena' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, HorizontalRelativeSpeed) == 0x0002E4, "Member 'UMarinerAnimInstance3rdPerson::HorizontalRelativeSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, VelocityRelative) == 0x0002EC, "Member 'UMarinerAnimInstance3rdPerson::VelocityRelative' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, AimPitch) == 0x0002F8, "Member 'UMarinerAnimInstance3rdPerson::AimPitch' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, TurnInPlaceRotation) == 0x0002FC, "Member 'UMarinerAnimInstance3rdPerson::TurnInPlaceRotation' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, LastFrameTurnInPlaceRotation) == 0x000300, "Member 'UMarinerAnimInstance3rdPerson::LastFrameTurnInPlaceRotation' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, bIsTurning) == 0x000304, "Member 'UMarinerAnimInstance3rdPerson::bIsTurning' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, CharacterForwardVector) == 0x000308, "Member 'UMarinerAnimInstance3rdPerson::CharacterForwardVector' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, Velocity) == 0x000314, "Member 'UMarinerAnimInstance3rdPerson::Velocity' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, SkeletonRotation) == 0x000320, "Member 'UMarinerAnimInstance3rdPerson::SkeletonRotation' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, CardinalDirection) == 0x00032C, "Member 'UMarinerAnimInstance3rdPerson::CardinalDirection' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, PreviousDirection) == 0x00032D, "Member 'UMarinerAnimInstance3rdPerson::PreviousDirection' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, bDoPivot) == 0x00032E, "Member 'UMarinerAnimInstance3rdPerson::bDoPivot' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, NorthOffset) == 0x000330, "Member 'UMarinerAnimInstance3rdPerson::NorthOffset' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, SouthOffset) == 0x000334, "Member 'UMarinerAnimInstance3rdPerson::SouthOffset' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, EastOffset) == 0x000338, "Member 'UMarinerAnimInstance3rdPerson::EastOffset' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, WestOffset) == 0x00033C, "Member 'UMarinerAnimInstance3rdPerson::WestOffset' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, YawOffset) == 0x000340, "Member 'UMarinerAnimInstance3rdPerson::YawOffset' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, Acceleration) == 0x000344, "Member 'UMarinerAnimInstance3rdPerson::Acceleration' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, AccelerationNormal) == 0x000350, "Member 'UMarinerAnimInstance3rdPerson::AccelerationNormal' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, AccelerationNormalRelative) == 0x00035C, "Member 'UMarinerAnimInstance3rdPerson::AccelerationNormalRelative' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, VelocityNormal) == 0x000368, "Member 'UMarinerAnimInstance3rdPerson::VelocityNormal' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, VelocityLength) == 0x000374, "Member 'UMarinerAnimInstance3rdPerson::VelocityLength' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, RunSpeed) == 0x000378, "Member 'UMarinerAnimInstance3rdPerson::RunSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, WalkSpeed) == 0x00037C, "Member 'UMarinerAnimInstance3rdPerson::WalkSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, bIsTumbling) == 0x000380, "Member 'UMarinerAnimInstance3rdPerson::bIsTumbling' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, bIsWalking) == 0x000381, "Member 'UMarinerAnimInstance3rdPerson::bIsWalking' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, TumbleSpeed) == 0x000384, "Member 'UMarinerAnimInstance3rdPerson::TumbleSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, bCanTumble) == 0x000388, "Member 'UMarinerAnimInstance3rdPerson::bCanTumble' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, DamageTime) == 0x00038C, "Member 'UMarinerAnimInstance3rdPerson::DamageTime' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, AirLean) == 0x000390, "Member 'UMarinerAnimInstance3rdPerson::AirLean' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, LegIK) == 0x00039C, "Member 'UMarinerAnimInstance3rdPerson::LegIK' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, bIsKnockback) == 0x0003A0, "Member 'UMarinerAnimInstance3rdPerson::bIsKnockback' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, PivotRotation) == 0x0003A4, "Member 'UMarinerAnimInstance3rdPerson::PivotRotation' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, bDoJump) == 0x0003A8, "Member 'UMarinerAnimInstance3rdPerson::bDoJump' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, JumpCount) == 0x0003AC, "Member 'UMarinerAnimInstance3rdPerson::JumpCount' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstance3rdPerson, bRecentlyDamaged) == 0x0003B0, "Member 'UMarinerAnimInstance3rdPerson::bRecentlyDamaged' has a wrong offset!");

// Class Mariner.MarinerAnimInstanceLite
// 0x0050 (0x02C0 - 0x0270)
class UMarinerAnimInstanceLite : public UMarinerAnimInstance
{
public:
	EMarinerAnimInstanceState                     AnimState;                                         // 0x0268(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15D5[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CharacterCustomization_Idle;                       // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          PreGame_Intro;                                     // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          PreGame_Idle;                                      // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          PreGame_Showdown;                                  // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          PreGame_Showdown_Idle;                             // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          PostGame_Idle;                                     // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          PostGame_Victory;                                  // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          PostGame_Victory_Idle;                             // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBlendFromGreetingToEmoteAnims;                    // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15D6[0xF];                                     // 0x02B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MatchResultsDetermined();
	void OnCharacterLockedIn();
	void OnCharacterSelectInMenu();
	void OnGameOutcomeDetermined(bool bHasWonOrDraw);
	void OnMenuExit();
	void OnPreviewAnimationRequested(bool bIsReplayingLastAnimation);
	void PregameStateChange(class FName NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAnimInstanceLite">();
	}
	static class UMarinerAnimInstanceLite* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAnimInstanceLite>();
	}
};
static_assert(alignof(UMarinerAnimInstanceLite) == 0x000010, "Wrong alignment on UMarinerAnimInstanceLite");
static_assert(sizeof(UMarinerAnimInstanceLite) == 0x0002C0, "Wrong size on UMarinerAnimInstanceLite");
static_assert(offsetof(UMarinerAnimInstanceLite, AnimState) == 0x000268, "Member 'UMarinerAnimInstanceLite::AnimState' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstanceLite, CharacterCustomization_Idle) == 0x000270, "Member 'UMarinerAnimInstanceLite::CharacterCustomization_Idle' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstanceLite, PreGame_Intro) == 0x000278, "Member 'UMarinerAnimInstanceLite::PreGame_Intro' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstanceLite, PreGame_Idle) == 0x000280, "Member 'UMarinerAnimInstanceLite::PreGame_Idle' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstanceLite, PreGame_Showdown) == 0x000288, "Member 'UMarinerAnimInstanceLite::PreGame_Showdown' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstanceLite, PreGame_Showdown_Idle) == 0x000290, "Member 'UMarinerAnimInstanceLite::PreGame_Showdown_Idle' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstanceLite, PostGame_Idle) == 0x000298, "Member 'UMarinerAnimInstanceLite::PostGame_Idle' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstanceLite, PostGame_Victory) == 0x0002A0, "Member 'UMarinerAnimInstanceLite::PostGame_Victory' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstanceLite, PostGame_Victory_Idle) == 0x0002A8, "Member 'UMarinerAnimInstanceLite::PostGame_Victory_Idle' has a wrong offset!");
static_assert(offsetof(UMarinerAnimInstanceLite, bBlendFromGreetingToEmoteAnims) == 0x0002B0, "Member 'UMarinerAnimInstanceLite::bBlendFromGreetingToEmoteAnims' has a wrong offset!");

// Class Mariner.MarinerAnimNotify_PlayParticleEffect
// 0x0048 (0x0080 - 0x0038)
class alignas(0x10) UMarinerAnimNotify_PlayParticleEffect final : public UAnimNotify
{
public:
	class UParticleSystem*                        PSTemplate;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0040(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x004C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0058(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Attached : 1;                                      // 0x0064(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15D7[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15D8[0x10];                                    // 0x0070(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAnimNotify_PlayParticleEffect">();
	}
	static class UMarinerAnimNotify_PlayParticleEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAnimNotify_PlayParticleEffect>();
	}
};
static_assert(alignof(UMarinerAnimNotify_PlayParticleEffect) == 0x000010, "Wrong alignment on UMarinerAnimNotify_PlayParticleEffect");
static_assert(sizeof(UMarinerAnimNotify_PlayParticleEffect) == 0x000080, "Wrong size on UMarinerAnimNotify_PlayParticleEffect");
static_assert(offsetof(UMarinerAnimNotify_PlayParticleEffect, PSTemplate) == 0x000038, "Member 'UMarinerAnimNotify_PlayParticleEffect::PSTemplate' has a wrong offset!");
static_assert(offsetof(UMarinerAnimNotify_PlayParticleEffect, LocationOffset) == 0x000040, "Member 'UMarinerAnimNotify_PlayParticleEffect::LocationOffset' has a wrong offset!");
static_assert(offsetof(UMarinerAnimNotify_PlayParticleEffect, RotationOffset) == 0x00004C, "Member 'UMarinerAnimNotify_PlayParticleEffect::RotationOffset' has a wrong offset!");
static_assert(offsetof(UMarinerAnimNotify_PlayParticleEffect, Scale) == 0x000058, "Member 'UMarinerAnimNotify_PlayParticleEffect::Scale' has a wrong offset!");
static_assert(offsetof(UMarinerAnimNotify_PlayParticleEffect, SocketName) == 0x000068, "Member 'UMarinerAnimNotify_PlayParticleEffect::SocketName' has a wrong offset!");

// Class Mariner.MarinerPinGameModeWidget
// 0x0008 (0x02B8 - 0x02B0)
class UMarinerPinGameModeWidget final : public UMarinerUserWidget
{
public:
	bool                                          bDisplaysWhileGuttered;                            // 0x02B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15D9[0x7];                                     // 0x02B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOwningPlayerChangedTeams(class AMarinerPlayerState* OwningPlayer);
	void SetTrackedPlayer(class AMarinerPlayerState* PlayerState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPinGameModeWidget">();
	}
	static class UMarinerPinGameModeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPinGameModeWidget>();
	}
};
static_assert(alignof(UMarinerPinGameModeWidget) == 0x000008, "Wrong alignment on UMarinerPinGameModeWidget");
static_assert(sizeof(UMarinerPinGameModeWidget) == 0x0002B8, "Wrong size on UMarinerPinGameModeWidget");
static_assert(offsetof(UMarinerPinGameModeWidget, bDisplaysWhileGuttered) == 0x0002B0, "Member 'UMarinerPinGameModeWidget::bDisplaysWhileGuttered' has a wrong offset!");

// Class Mariner.MarinerAnimNotifyCharacterEvent
// 0x0008 (0x0040 - 0x0038)
class UMarinerAnimNotifyCharacterEvent final : public UAnimNotify
{
public:
	EAnimNotifyCharacterEventType                 CharacterEventType;                                // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15DA[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAnimNotifyCharacterEvent">();
	}
	static class UMarinerAnimNotifyCharacterEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAnimNotifyCharacterEvent>();
	}
};
static_assert(alignof(UMarinerAnimNotifyCharacterEvent) == 0x000008, "Wrong alignment on UMarinerAnimNotifyCharacterEvent");
static_assert(sizeof(UMarinerAnimNotifyCharacterEvent) == 0x000040, "Wrong size on UMarinerAnimNotifyCharacterEvent");
static_assert(offsetof(UMarinerAnimNotifyCharacterEvent, CharacterEventType) == 0x000038, "Member 'UMarinerAnimNotifyCharacterEvent::CharacterEventType' has a wrong offset!");

// Class Mariner.MarinerOnboardingButton
// 0x0038 (0x2FB0 - 0x2F78)
class UMarinerOnboardingButton : public UMarinerLayeredButton
{
public:
	TArray<EMatchmakingInteractionState>          AllowedMatchmakingStates;                          // 0x2F78(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bOnboardingUnlockRequired;                         // 0x2F88(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerPlaylistType                          UnlockForType;                                     // 0x2F89(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPremiumVersionRequired;                           // 0x2F8A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15DB[0x5];                                     // 0x2F8B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerSingleAnimationWidget*          Bound_OnboardingLockWidget;                        // 0x2F90(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            Bound_PremiumLockWidget;                           // 0x2F98(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_DisabledReason;                              // 0x2FA0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15DC[0x8];                                     // 0x2FA8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGameVersionChanged(EMarinerGameVersion NewVersion);
	void OnLockWidgetAnimationCompleted(class UMarinerSingleAnimationWidget* Instance);
	void SetOnboardingState(EMarinerOnboardingPlaylistState OnboardingPlaylistState);

	bool GetUnlockForType(EMarinerPlaylistType* OutType) const;
	bool ShouldBeEnabled(class FText* OutDisabledText) const;
	bool ShouldBeForceEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerOnboardingButton">();
	}
	static class UMarinerOnboardingButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerOnboardingButton>();
	}
};
static_assert(alignof(UMarinerOnboardingButton) == 0x000008, "Wrong alignment on UMarinerOnboardingButton");
static_assert(sizeof(UMarinerOnboardingButton) == 0x002FB0, "Wrong size on UMarinerOnboardingButton");
static_assert(offsetof(UMarinerOnboardingButton, AllowedMatchmakingStates) == 0x002F78, "Member 'UMarinerOnboardingButton::AllowedMatchmakingStates' has a wrong offset!");
static_assert(offsetof(UMarinerOnboardingButton, bOnboardingUnlockRequired) == 0x002F88, "Member 'UMarinerOnboardingButton::bOnboardingUnlockRequired' has a wrong offset!");
static_assert(offsetof(UMarinerOnboardingButton, UnlockForType) == 0x002F89, "Member 'UMarinerOnboardingButton::UnlockForType' has a wrong offset!");
static_assert(offsetof(UMarinerOnboardingButton, bPremiumVersionRequired) == 0x002F8A, "Member 'UMarinerOnboardingButton::bPremiumVersionRequired' has a wrong offset!");
static_assert(offsetof(UMarinerOnboardingButton, Bound_OnboardingLockWidget) == 0x002F90, "Member 'UMarinerOnboardingButton::Bound_OnboardingLockWidget' has a wrong offset!");
static_assert(offsetof(UMarinerOnboardingButton, Bound_PremiumLockWidget) == 0x002F98, "Member 'UMarinerOnboardingButton::Bound_PremiumLockWidget' has a wrong offset!");
static_assert(offsetof(UMarinerOnboardingButton, Bound_DisabledReason) == 0x002FA0, "Member 'UMarinerOnboardingButton::Bound_DisabledReason' has a wrong offset!");

// Class Mariner.MarinerPlaylistGroupButton
// 0x0048 (0x2FF8 - 0x2FB0)
class UMarinerPlaylistGroupButton : public UMarinerOnboardingButton
{
public:
	TSubclassOf<class UMarinerMenuStackLayer>     LayerToPush;                                       // 0x2FB0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   DisabledPartySize;                                 // 0x2FB8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UMarinerPlaylistLockedWidget*           Bound_PlaylistLockedWidget;                        // 0x2FD0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15DE[0x20];                                    // 0x2FD8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleSelected(class UMarinerLayeredButton* Instance);
	void OnAbandonmentPenaltyExpired();
	void OnPartyChanged();

	bool HasLayerPresetButtons() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPlaylistGroupButton">();
	}
	static class UMarinerPlaylistGroupButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPlaylistGroupButton>();
	}
};
static_assert(alignof(UMarinerPlaylistGroupButton) == 0x000008, "Wrong alignment on UMarinerPlaylistGroupButton");
static_assert(sizeof(UMarinerPlaylistGroupButton) == 0x002FF8, "Wrong size on UMarinerPlaylistGroupButton");
static_assert(offsetof(UMarinerPlaylistGroupButton, LayerToPush) == 0x002FB0, "Member 'UMarinerPlaylistGroupButton::LayerToPush' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistGroupButton, DisabledPartySize) == 0x002FB8, "Member 'UMarinerPlaylistGroupButton::DisabledPartySize' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistGroupButton, Bound_PlaylistLockedWidget) == 0x002FD0, "Member 'UMarinerPlaylistGroupButton::Bound_PlaylistLockedWidget' has a wrong offset!");

// Class Mariner.MarinerAnimNotifyState_TimedParticleEffect
// 0x0030 (0x0060 - 0x0030)
class UMarinerAnimNotifyState_TimedParticleEffect final : public UAnimNotifyState
{
public:
	class UParticleSystem*                        PSTemplate;                                        // 0x0030(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0038(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0040(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x004C(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDestroyAtEnd;                                     // 0x0058(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15DF[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAnimNotifyState_TimedParticleEffect">();
	}
	static class UMarinerAnimNotifyState_TimedParticleEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAnimNotifyState_TimedParticleEffect>();
	}
};
static_assert(alignof(UMarinerAnimNotifyState_TimedParticleEffect) == 0x000008, "Wrong alignment on UMarinerAnimNotifyState_TimedParticleEffect");
static_assert(sizeof(UMarinerAnimNotifyState_TimedParticleEffect) == 0x000060, "Wrong size on UMarinerAnimNotifyState_TimedParticleEffect");
static_assert(offsetof(UMarinerAnimNotifyState_TimedParticleEffect, PSTemplate) == 0x000030, "Member 'UMarinerAnimNotifyState_TimedParticleEffect::PSTemplate' has a wrong offset!");
static_assert(offsetof(UMarinerAnimNotifyState_TimedParticleEffect, SocketName) == 0x000038, "Member 'UMarinerAnimNotifyState_TimedParticleEffect::SocketName' has a wrong offset!");
static_assert(offsetof(UMarinerAnimNotifyState_TimedParticleEffect, LocationOffset) == 0x000040, "Member 'UMarinerAnimNotifyState_TimedParticleEffect::LocationOffset' has a wrong offset!");
static_assert(offsetof(UMarinerAnimNotifyState_TimedParticleEffect, RotationOffset) == 0x00004C, "Member 'UMarinerAnimNotifyState_TimedParticleEffect::RotationOffset' has a wrong offset!");
static_assert(offsetof(UMarinerAnimNotifyState_TimedParticleEffect, bDestroyAtEnd) == 0x000058, "Member 'UMarinerAnimNotifyState_TimedParticleEffect::bDestroyAtEnd' has a wrong offset!");

// Class Mariner.MarinerAOEDamageParameters
// 0x0018 (0x0048 - 0x0030)
class UMarinerAOEDamageParameters final : public UDataAsset
{
public:
	float                                         BaseDamage;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDamage;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageOuterRadius;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageFalloffExponent;                             // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAOEDamageParameters">();
	}
	static class UMarinerAOEDamageParameters* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAOEDamageParameters>();
	}
};
static_assert(alignof(UMarinerAOEDamageParameters) == 0x000008, "Wrong alignment on UMarinerAOEDamageParameters");
static_assert(sizeof(UMarinerAOEDamageParameters) == 0x000048, "Wrong size on UMarinerAOEDamageParameters");
static_assert(offsetof(UMarinerAOEDamageParameters, BaseDamage) == 0x000030, "Member 'UMarinerAOEDamageParameters::BaseDamage' has a wrong offset!");
static_assert(offsetof(UMarinerAOEDamageParameters, MinimumDamage) == 0x000034, "Member 'UMarinerAOEDamageParameters::MinimumDamage' has a wrong offset!");
static_assert(offsetof(UMarinerAOEDamageParameters, DamageOuterRadius) == 0x000038, "Member 'UMarinerAOEDamageParameters::DamageOuterRadius' has a wrong offset!");
static_assert(offsetof(UMarinerAOEDamageParameters, DamageFalloffExponent) == 0x00003C, "Member 'UMarinerAOEDamageParameters::DamageFalloffExponent' has a wrong offset!");
static_assert(offsetof(UMarinerAOEDamageParameters, DamageType) == 0x000040, "Member 'UMarinerAOEDamageParameters::DamageType' has a wrong offset!");

// Class Mariner.MarinerBasePlayerController
// 0x0018 (0x0580 - 0x0568)
class AMarinerBasePlayerController : public APlayerController
{
public:
	UMulticastInlineDelegateProperty_             OnPawnSet;                                         // 0x0568(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         ClientRestartMinimumRetryTime;                     // 0x0578(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerAcknowledgePossessionMinimumRetryTime;       // 0x057C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ClientLoadMapRequest(const class FString& MapLoadName);
	void PlayCameraShakeLocal(TSubclassOf<class UCameraShake> CameraShake, float Scale, ECameraAnimPlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void PlayForceFeedbackLocal(class UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, class FName Tag);
	void StopCameraShakeLocal(TSubclassOf<class UCameraShake> Shake, bool bImmediately);
	void StopForceFeedbackLocal(class UForceFeedbackEffect* ForceFeedbackEffect, class FName Tag);

	EPlayerInputType GetActiveInputType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBasePlayerController">();
	}
	static class AMarinerBasePlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerBasePlayerController>();
	}
};
static_assert(alignof(AMarinerBasePlayerController) == 0x000008, "Wrong alignment on AMarinerBasePlayerController");
static_assert(sizeof(AMarinerBasePlayerController) == 0x000580, "Wrong size on AMarinerBasePlayerController");
static_assert(offsetof(AMarinerBasePlayerController, OnPawnSet) == 0x000568, "Member 'AMarinerBasePlayerController::OnPawnSet' has a wrong offset!");
static_assert(offsetof(AMarinerBasePlayerController, ClientRestartMinimumRetryTime) == 0x000578, "Member 'AMarinerBasePlayerController::ClientRestartMinimumRetryTime' has a wrong offset!");
static_assert(offsetof(AMarinerBasePlayerController, ServerAcknowledgePossessionMinimumRetryTime) == 0x00057C, "Member 'AMarinerBasePlayerController::ServerAcknowledgePossessionMinimumRetryTime' has a wrong offset!");

// Class Mariner.MarinerPlayerController
// 0x0190 (0x0710 - 0x0580)
class alignas(0x10) AMarinerPlayerController final : public AMarinerBasePlayerController
{
public:
	UMulticastInlineDelegateProperty_             OnPossessPawn;                                     // 0x0580(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnUnpossessPawn;                                   // 0x0590(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPlayerStateReplicated;                           // 0x05A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPerspectiveChanged;                              // 0x05B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnEnteredDangerZone;                               // 0x05C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnLeftDangerZone;                                  // 0x05D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPlayerStateInitiated;                            // 0x05E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnChatLockEndTimestampChanged;                     // 0x05F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	int32                                         DamageComboCounter;                                // 0x0600(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15E5[0x4];                                     // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DamageComboTimeoutTimerHandle;                     // 0x0608(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnDamageComboCounterUpdated;                       // 0x0610(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnInGameMenuToggled;                               // 0x0620(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         bInfiniteAmmo : 1;                                 // 0x0630(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bNoAbilityCooldown : 1;                            // 0x0630(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Net, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bInvincibleMode : 1;                               // 0x0630(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsIdleBootDebuggingEnabled : 1;                   // 0x0630(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bTurboMode : 1;                                    // 0x0630(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bForceLoopPrimaryMode : 1;                         // 0x0630(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_15E6[0x27];                                    // 0x0631(0x0027)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerArtifactComponent*              ArtifactComponent;                                 // 0x0658(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AuthoritativeEndChatLockTimestamp;                 // 0x0660(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15E7[0x88];                                    // 0x0664(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ResetIdleBootSpamGuardDuration;                    // 0x06EC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 VoiceChatTeamChannel;                              // 0x06F0(0x0010)(Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15E8[0x10];                                    // 0x0700(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyPerspective(const class FName PerspectiveName, const struct FMarinerCameraPerspective& Perspective);
	bool BroadcastSpamMessageIfAppropriate();
	void ChangePerspective(const class FName PerspectiveName);
	void ClearAllSuppressionTags();
	void ClearSuppressionForTags(const struct FGameplayTagContainer& SuppressionTagsToClear);
	void ClientAddCameraEffect(TSubclassOf<class AEmitterCameraLensEffectBase> CameraEffect);
	void ClientClearAllSuppressionTags();
	void ClientDisconnectAndLoadMainMenu(bool bShowLoadingScreen);
	void ClientGameStarted();
	void ClientNotifyCausedDamage(const TArray<struct FDamageNotificationPayload>& DamageNotifications);
	void ClientSetAllSuppressionTags(bool bIsSuppressed);
	void ClientSetSpectatorCamera(const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
	void ClientUpdateIdleBootTimeRemaining(float IdleBootTimeRemaining);
	struct FMarinerCameraPerspective FindPerspective(const class FName PerspectiveName);
	void ForceDangerZoneState(bool bForced);
	void IdleBootTimeRemainingClientUpdate();
	bool IsInGameMenuEnabled();
	void OnChatWheelDown();
	void OnChatWheelLeft();
	void OnChatWheelRight();
	void OnChatWheelUp();
	void OnPawnRocketJump();
	void OnRep_AuthoritativeEndChatLockTimestamp(float OldAuthEndChatLockTimestamp);
	void OnRep_VoiceChatTeamChannel();
	void ReactToPlayerChangedTeam(class AMarinerPlayerState* PlayerChangedTeam);
	void Server_NotifyDoneLoadingCharacters();
	void Server_NotifyLocalPawnReplicated();
	void ServerBroadcastPlayerToPlayerMessage(TSubclassOf<class UMarinerLocalMessage> Message, class APlayerState* RelatedPlayerState, class UObject* OptionalObject);
	void ServerCheat(const class FString& Msg);
	void ServerFinishMatch();
	void ServerResetIdleBootTimer();
	void ServerSetActiveInputType(EPlayerInputType NewClientActiveInputType);
	void ServerSuicide();
	void SetAllSuppressionTags(bool bIsSuppressed);
	void SetSuppressionTags(const struct FGameplayTagContainer& SuppressionTagToSet, bool bIsSuppressed);
	void SimulateInputKey(const struct FKey& Key, bool bPressed);
	void Suicide();
	bool TryToBroadcastTeamChatMessage(TSubclassOf<class UMarinerLocalMessage> Message, class APlayerState* RelatedPlayerState, class UObject* OptionalObject);

	bool CanFinishMatch() const;
	void ClientSetHUDState(TSubclassOf<class UMarinerHUDState> HUDState, bool bEnabled) const;
	bool GetAllowUseChatWheel() const;
	class UMarinerArtifactComponent* GetArtifactComponent() const;
	struct FMarinerCameraPerspective GetDefaultPerspective(EMarinerCameraPerspectiveType CameraType) const;
	bool HasAnyGivenSuppressionTags(const struct FGameplayTagContainer& SuppressionTagsToCheck) const;
	void SetHUDState(TSubclassOf<class UMarinerHUDState> HUDState, bool bEnabled) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPlayerController">();
	}
	static class AMarinerPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerPlayerController>();
	}
};
static_assert(alignof(AMarinerPlayerController) == 0x000010, "Wrong alignment on AMarinerPlayerController");
static_assert(sizeof(AMarinerPlayerController) == 0x000710, "Wrong size on AMarinerPlayerController");
static_assert(offsetof(AMarinerPlayerController, OnPossessPawn) == 0x000580, "Member 'AMarinerPlayerController::OnPossessPawn' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerController, OnUnpossessPawn) == 0x000590, "Member 'AMarinerPlayerController::OnUnpossessPawn' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerController, OnPlayerStateReplicated) == 0x0005A0, "Member 'AMarinerPlayerController::OnPlayerStateReplicated' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerController, OnPerspectiveChanged) == 0x0005B0, "Member 'AMarinerPlayerController::OnPerspectiveChanged' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerController, OnEnteredDangerZone) == 0x0005C0, "Member 'AMarinerPlayerController::OnEnteredDangerZone' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerController, OnLeftDangerZone) == 0x0005D0, "Member 'AMarinerPlayerController::OnLeftDangerZone' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerController, OnPlayerStateInitiated) == 0x0005E0, "Member 'AMarinerPlayerController::OnPlayerStateInitiated' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerController, OnChatLockEndTimestampChanged) == 0x0005F0, "Member 'AMarinerPlayerController::OnChatLockEndTimestampChanged' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerController, DamageComboCounter) == 0x000600, "Member 'AMarinerPlayerController::DamageComboCounter' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerController, DamageComboTimeoutTimerHandle) == 0x000608, "Member 'AMarinerPlayerController::DamageComboTimeoutTimerHandle' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerController, OnDamageComboCounterUpdated) == 0x000610, "Member 'AMarinerPlayerController::OnDamageComboCounterUpdated' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerController, OnInGameMenuToggled) == 0x000620, "Member 'AMarinerPlayerController::OnInGameMenuToggled' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerController, ArtifactComponent) == 0x000658, "Member 'AMarinerPlayerController::ArtifactComponent' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerController, AuthoritativeEndChatLockTimestamp) == 0x000660, "Member 'AMarinerPlayerController::AuthoritativeEndChatLockTimestamp' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerController, ResetIdleBootSpamGuardDuration) == 0x0006EC, "Member 'AMarinerPlayerController::ResetIdleBootSpamGuardDuration' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerController, VoiceChatTeamChannel) == 0x0006F0, "Member 'AMarinerPlayerController::VoiceChatTeamChannel' has a wrong offset!");

// Class Mariner.MarinerPickup
// 0x0048 (0x0260 - 0x0218)
class AMarinerPickup : public AActor
{
public:
	class UParticleSystemComponent*               PickupPSC;                                         // 0x0218(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPrimitiveComponent*                    PickupCollision;                                   // 0x0220(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        ActiveFX;                                          // 0x0228(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        RespawningFX;                                      // 0x0230(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          PickupAudioEvent;                                  // 0x0238(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          RespawnAudioEvent;                                 // 0x0240(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RespawnTime;                                       // 0x0248(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bIsActive : 1;                                     // 0x024C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_15F0[0x3];                                     // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      PickedUpBy;                                        // 0x0250(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15F1[0x8];                                     // 0x0258(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPickedUpEvent();
	void OnRep_IsActive();
	void OnRespawnEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPickup">();
	}
	static class AMarinerPickup* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerPickup>();
	}
};
static_assert(alignof(AMarinerPickup) == 0x000008, "Wrong alignment on AMarinerPickup");
static_assert(sizeof(AMarinerPickup) == 0x000260, "Wrong size on AMarinerPickup");
static_assert(offsetof(AMarinerPickup, PickupPSC) == 0x000218, "Member 'AMarinerPickup::PickupPSC' has a wrong offset!");
static_assert(offsetof(AMarinerPickup, PickupCollision) == 0x000220, "Member 'AMarinerPickup::PickupCollision' has a wrong offset!");
static_assert(offsetof(AMarinerPickup, ActiveFX) == 0x000228, "Member 'AMarinerPickup::ActiveFX' has a wrong offset!");
static_assert(offsetof(AMarinerPickup, RespawningFX) == 0x000230, "Member 'AMarinerPickup::RespawningFX' has a wrong offset!");
static_assert(offsetof(AMarinerPickup, PickupAudioEvent) == 0x000238, "Member 'AMarinerPickup::PickupAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerPickup, RespawnAudioEvent) == 0x000240, "Member 'AMarinerPickup::RespawnAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerPickup, RespawnTime) == 0x000248, "Member 'AMarinerPickup::RespawnTime' has a wrong offset!");
static_assert(offsetof(AMarinerPickup, PickedUpBy) == 0x000250, "Member 'AMarinerPickup::PickedUpBy' has a wrong offset!");

// Class Mariner.MarinerPickup_Health
// 0x0008 (0x0268 - 0x0260)
class AMarinerPickup_Health final : public AMarinerPickup
{
public:
	int32                                         Health;                                            // 0x0260(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15F2[0x4];                                     // 0x0264(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPickup_Health">();
	}
	static class AMarinerPickup_Health* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerPickup_Health>();
	}
};
static_assert(alignof(AMarinerPickup_Health) == 0x000008, "Wrong alignment on AMarinerPickup_Health");
static_assert(sizeof(AMarinerPickup_Health) == 0x000268, "Wrong size on AMarinerPickup_Health");
static_assert(offsetof(AMarinerPickup_Health, Health) == 0x000260, "Member 'AMarinerPickup_Health::Health' has a wrong offset!");

// Class Mariner.MarinerArenaReturnTargetComparer
// 0x0040 (0x0068 - 0x0028)
class UMarinerArenaReturnTargetComparer final : public UObject
{
public:
	bool                                          ConsiderReturnTargetsWithoutZones;                 // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrintDebugInfo;                                    // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15F3[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ReturnTargetDistanceFitnessCurve;                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ReturnTargetDeltaYawFitnessCurve;                  // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyDistanceTargetRejectionThreshold;             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EligibleReturnTargetSelectionCount;                // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AMarinerArenaReturnZone*>        AllReturnZones;                                    // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AMarinerArenaReturnTarget*>      AllReturnTargets;                                  // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	struct FVector CalcReturnOrigin(const class AMarinerCharacter* Character) const;
	int32 CalcReturnTargetFitnessScore(const struct FVector& ReturnLocation, const int32 ReturningCharacterTeamIndex, const class AMarinerArenaReturnTarget* Target) const;
	int32 CalcReturnZoneFitnessScore(const struct FVector& ReturnLocation, const int32 ReturningCharacterTeamIndex, const class AMarinerArenaReturnZone* Zone) const;
	bool ShouldDiscardReturnTarget(const struct FVector& ReturnLocation, const int32 ReturningCharacterTeamIndex, const class AMarinerArenaReturnTarget* Target) const;
	bool ShouldDiscardReturnZone(const struct FVector& ReturnLocation, const int32 ReturningCharacterTeamIndex, const class AMarinerArenaReturnZone* Zone) const;
	bool ShouldPrioritizeReturnTarget(const struct FVector& ReturnLocation, const int32 ReturningCharacterTeamIndex, const class AMarinerArenaReturnTarget* Target) const;
	bool ShouldPrioritizeReturnZone(const struct FVector& ReturnLocation, const int32 ReturningCharacterTeamIndex, const class AMarinerArenaReturnZone* Zone) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerArenaReturnTargetComparer">();
	}
	static class UMarinerArenaReturnTargetComparer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerArenaReturnTargetComparer>();
	}
};
static_assert(alignof(UMarinerArenaReturnTargetComparer) == 0x000008, "Wrong alignment on UMarinerArenaReturnTargetComparer");
static_assert(sizeof(UMarinerArenaReturnTargetComparer) == 0x000068, "Wrong size on UMarinerArenaReturnTargetComparer");
static_assert(offsetof(UMarinerArenaReturnTargetComparer, ConsiderReturnTargetsWithoutZones) == 0x000028, "Member 'UMarinerArenaReturnTargetComparer::ConsiderReturnTargetsWithoutZones' has a wrong offset!");
static_assert(offsetof(UMarinerArenaReturnTargetComparer, PrintDebugInfo) == 0x000029, "Member 'UMarinerArenaReturnTargetComparer::PrintDebugInfo' has a wrong offset!");
static_assert(offsetof(UMarinerArenaReturnTargetComparer, ReturnTargetDistanceFitnessCurve) == 0x000030, "Member 'UMarinerArenaReturnTargetComparer::ReturnTargetDistanceFitnessCurve' has a wrong offset!");
static_assert(offsetof(UMarinerArenaReturnTargetComparer, ReturnTargetDeltaYawFitnessCurve) == 0x000038, "Member 'UMarinerArenaReturnTargetComparer::ReturnTargetDeltaYawFitnessCurve' has a wrong offset!");
static_assert(offsetof(UMarinerArenaReturnTargetComparer, EnemyDistanceTargetRejectionThreshold) == 0x000040, "Member 'UMarinerArenaReturnTargetComparer::EnemyDistanceTargetRejectionThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerArenaReturnTargetComparer, EligibleReturnTargetSelectionCount) == 0x000044, "Member 'UMarinerArenaReturnTargetComparer::EligibleReturnTargetSelectionCount' has a wrong offset!");
static_assert(offsetof(UMarinerArenaReturnTargetComparer, AllReturnZones) == 0x000048, "Member 'UMarinerArenaReturnTargetComparer::AllReturnZones' has a wrong offset!");
static_assert(offsetof(UMarinerArenaReturnTargetComparer, AllReturnTargets) == 0x000058, "Member 'UMarinerArenaReturnTargetComparer::AllReturnTargets' has a wrong offset!");

// Class Mariner.MarinerArenaReturnZone
// 0x0148 (0x0360 - 0x0218)
class AMarinerArenaReturnZone final : public AActor
{
public:
	TSet<class AMarinerArenaReturnTarget*>        ReturnTargetsInZone;                               // 0x0218(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         ReturnZoneFlags;                                   // 0x0268(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ZoneOrder;                                         // 0x026C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSet<class UShapeComponent*>                  AssociatedVolumes;                                 // 0x0270(0x0050)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSet<class AMarinerCharacter*>                CharactersInZone;                                  // 0x02C0(0x0050)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TSet<TWeakObjectPtr<class AMarinerCharacter>> CharactersPendingReturnInZone;                     // 0x0310(0x0050)(Edit, ZeroConstructor, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnCharacterPendingReturnDestroyed(class AActor* DestroyedActor);
	void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex);

	int32 GetPlayerCountNotOnTeamInZone(int32 TeamIndex) const;
	int32 GetPlayerCountOnTeamInZone(int32 TeamIndex) const;
	int32 GetTotalPlayerCountInZone() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerArenaReturnZone">();
	}
	static class AMarinerArenaReturnZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerArenaReturnZone>();
	}
};
static_assert(alignof(AMarinerArenaReturnZone) == 0x000008, "Wrong alignment on AMarinerArenaReturnZone");
static_assert(sizeof(AMarinerArenaReturnZone) == 0x000360, "Wrong size on AMarinerArenaReturnZone");
static_assert(offsetof(AMarinerArenaReturnZone, ReturnTargetsInZone) == 0x000218, "Member 'AMarinerArenaReturnZone::ReturnTargetsInZone' has a wrong offset!");
static_assert(offsetof(AMarinerArenaReturnZone, ReturnZoneFlags) == 0x000268, "Member 'AMarinerArenaReturnZone::ReturnZoneFlags' has a wrong offset!");
static_assert(offsetof(AMarinerArenaReturnZone, ZoneOrder) == 0x00026C, "Member 'AMarinerArenaReturnZone::ZoneOrder' has a wrong offset!");
static_assert(offsetof(AMarinerArenaReturnZone, AssociatedVolumes) == 0x000270, "Member 'AMarinerArenaReturnZone::AssociatedVolumes' has a wrong offset!");
static_assert(offsetof(AMarinerArenaReturnZone, CharactersInZone) == 0x0002C0, "Member 'AMarinerArenaReturnZone::CharactersInZone' has a wrong offset!");
static_assert(offsetof(AMarinerArenaReturnZone, CharactersPendingReturnInZone) == 0x000310, "Member 'AMarinerArenaReturnZone::CharactersPendingReturnInZone' has a wrong offset!");

// Class Mariner.MarinerPlaylistButton
// 0x0360 (0x3310 - 0x2FB0)
class UMarinerPlaylistButton : public UMarinerOnboardingButton
{
public:
	struct FMarinerLayeredButtonImageProperties   RankedBorderOverride;                              // 0x2FB0(0x01D0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   DisabledPartySizeFmt;                              // 0x3180(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   XPMultiplerTextFmt;                                // 0x3198(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FLinearColor                           RankWidgetDisabledColor;                           // 0x31B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerRankWidget*                     Bound_RankWidget;                                  // 0x31C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPlaylistLockedWidget*           Bound_PlaylistLockedWidget;                        // 0x31C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_GamesPlayed;                                 // 0x31D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_XpBoostFrame;                                // 0x31D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_XpMultiplier;                                // 0x31E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerButtonTimerWidget*              Bound_Timer;                                       // 0x31E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Bound_OnboardingAnim;                              // 0x31F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15FD[0x118];                                   // 0x31F8(0x0118)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleSelected(class UMarinerLayeredButton* Instance);
	void OnAbandonmentPenaltyExpired();
	void OnPartyChanged();
	void OnPlaylistExpired();
	void OnProfileUpdated();
	void SetPlaylist(const struct FMangoPlaylist& InPlaylist, EMarinerOnboardingPlaylistState OnboardingPlaylistState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPlaylistButton">();
	}
	static class UMarinerPlaylistButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPlaylistButton>();
	}
};
static_assert(alignof(UMarinerPlaylistButton) == 0x000008, "Wrong alignment on UMarinerPlaylistButton");
static_assert(sizeof(UMarinerPlaylistButton) == 0x003310, "Wrong size on UMarinerPlaylistButton");
static_assert(offsetof(UMarinerPlaylistButton, RankedBorderOverride) == 0x002FB0, "Member 'UMarinerPlaylistButton::RankedBorderOverride' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistButton, DisabledPartySizeFmt) == 0x003180, "Member 'UMarinerPlaylistButton::DisabledPartySizeFmt' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistButton, XPMultiplerTextFmt) == 0x003198, "Member 'UMarinerPlaylistButton::XPMultiplerTextFmt' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistButton, RankWidgetDisabledColor) == 0x0031B0, "Member 'UMarinerPlaylistButton::RankWidgetDisabledColor' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistButton, Bound_RankWidget) == 0x0031C0, "Member 'UMarinerPlaylistButton::Bound_RankWidget' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistButton, Bound_PlaylistLockedWidget) == 0x0031C8, "Member 'UMarinerPlaylistButton::Bound_PlaylistLockedWidget' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistButton, Bound_GamesPlayed) == 0x0031D0, "Member 'UMarinerPlaylistButton::Bound_GamesPlayed' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistButton, Bound_XpBoostFrame) == 0x0031D8, "Member 'UMarinerPlaylistButton::Bound_XpBoostFrame' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistButton, Bound_XpMultiplier) == 0x0031E0, "Member 'UMarinerPlaylistButton::Bound_XpMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistButton, Bound_Timer) == 0x0031E8, "Member 'UMarinerPlaylistButton::Bound_Timer' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistButton, Bound_OnboardingAnim) == 0x0031F0, "Member 'UMarinerPlaylistButton::Bound_OnboardingAnim' has a wrong offset!");

// Class Mariner.MarinerArtifactComponent
// 0x0118 (0x01C8 - 0x00B0)
class UMarinerArtifactComponent final : public UActorComponent
{
public:
	UMulticastInlineDelegateProperty_             OnArtifactDataAssetLoadedEvent;                    // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnArtifactEventProcessed;                          // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             ArtifactEffectAppliedByTagDelegate;                // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             ArtifactEffectRemovedByTagDelegate;                // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_15FF[0x28];                                    // 0x00F0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      AccumulatedAbilityModifiers;                       // 0x0118(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<class UGameplayEffect*, struct FGameplayTag> TagToEffectMap;                                    // 0x0168(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AMarinerPlayerController*               OwningPlayerController;                            // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AMarinerPlayerState*                    OwningPlayerState;                                 // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ApplyArtifactEffectAndAbility(const class UMarinerArtifactDataAsset* ArtifactDataAsset);
	void ClientNotifyArtifactEventProcessed(const class UMarinerArtifactDataAsset* ArtifactData, const EArtifactEventTypes EventType, const class UGameplayEffect* AppliedEffect, const EGameplayEffectDurationType DurationType, const float DurationMagnitude);
	void ClientNotifyArtifactsLoaded();
	void DebugDisplayArtifacts();
	void DebugSetArtifactLevel(int32 ArtifactLevel);
	void OnArtifactDataLoaded();
	void OnOwnerDamageAttributeChange(const class UMarinerDamageableComponent* RelevantDamageableComponent, float NewAmount, float OldAmount);
	void OnOwnerEnteredMegablastDanger();
	void OnOwnerPlayerStateInitiated();
	void OnOwnerPossessPawn(class AMarinerPlayerController* PossessingController, class APawn* PossessedPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerArtifactComponent">();
	}
	static class UMarinerArtifactComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerArtifactComponent>();
	}
};
static_assert(alignof(UMarinerArtifactComponent) == 0x000008, "Wrong alignment on UMarinerArtifactComponent");
static_assert(sizeof(UMarinerArtifactComponent) == 0x0001C8, "Wrong size on UMarinerArtifactComponent");
static_assert(offsetof(UMarinerArtifactComponent, OnArtifactDataAssetLoadedEvent) == 0x0000B0, "Member 'UMarinerArtifactComponent::OnArtifactDataAssetLoadedEvent' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactComponent, OnArtifactEventProcessed) == 0x0000C0, "Member 'UMarinerArtifactComponent::OnArtifactEventProcessed' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactComponent, ArtifactEffectAppliedByTagDelegate) == 0x0000D0, "Member 'UMarinerArtifactComponent::ArtifactEffectAppliedByTagDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactComponent, ArtifactEffectRemovedByTagDelegate) == 0x0000E0, "Member 'UMarinerArtifactComponent::ArtifactEffectRemovedByTagDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactComponent, AccumulatedAbilityModifiers) == 0x000118, "Member 'UMarinerArtifactComponent::AccumulatedAbilityModifiers' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactComponent, TagToEffectMap) == 0x000168, "Member 'UMarinerArtifactComponent::TagToEffectMap' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactComponent, OwningPlayerController) == 0x0001B8, "Member 'UMarinerArtifactComponent::OwningPlayerController' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactComponent, OwningPlayerState) == 0x0001C0, "Member 'UMarinerArtifactComponent::OwningPlayerState' has a wrong offset!");

// Class Mariner.MarinerPostGameMenuStack
// 0x0000 (0x0698 - 0x0698)
class UMarinerPostGameMenuStack : public UMarinerMenuStackManager
{
public:
	void OnIntermissionEnded();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPostGameMenuStack">();
	}
	static class UMarinerPostGameMenuStack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPostGameMenuStack>();
	}
};
static_assert(alignof(UMarinerPostGameMenuStack) == 0x000008, "Wrong alignment on UMarinerPostGameMenuStack");
static_assert(sizeof(UMarinerPostGameMenuStack) == 0x000698, "Wrong size on UMarinerPostGameMenuStack");

// Class Mariner.MarinerArtifactDataAsset
// 0x00F8 (0x0168 - 0x0070)
class UMarinerArtifactDataAsset final : public UMarinerCMSItemWithIcon
{
public:
	TMap<EArtifactEventTypes, struct FArtifactEventEffects> ArtifactEffects;                                   // 0x0070(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	EMangoItemType                                ArtifactType;                                      // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerArtifactGameplayEffectType            ArtifactGameplayEffectType;                        // 0x00C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1602[0x6];                                     // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   OwningCharacter;                                   // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerAbility>            GrantedAbility;                                    // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            GrantedEffect;                                     // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<int32, struct FDataTableRowHandle>       ArtifactLevelUIData;                               // 0x0100(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1603[0x8];                                     // 0x0150(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCurveTableRowHandle>           AbilityModifiers;                                  // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void LoadArtifactIconForLevelAsync(const int32 Level, const TDelegate<void(int32 Level, class UTexture2D* ArtifactUIData)>& Callback);

	const TArray<struct FCurveTableRowHandle> GetAbilityModifiers() const;
	TSoftObjectPtr<class UTexture2D> GetArtifactImage(int32 Level) const;
	const TSoftClassPtr<class UClass> GetOwningCharacter() const;
	struct FMarinerArtifactUIData GetUIDataForLevel(int32 Level) const;
	struct FMarinerArtifactUIData GetUIDataForRanked() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerArtifactDataAsset">();
	}
	static class UMarinerArtifactDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerArtifactDataAsset>();
	}
};
static_assert(alignof(UMarinerArtifactDataAsset) == 0x000008, "Wrong alignment on UMarinerArtifactDataAsset");
static_assert(sizeof(UMarinerArtifactDataAsset) == 0x000168, "Wrong size on UMarinerArtifactDataAsset");
static_assert(offsetof(UMarinerArtifactDataAsset, ArtifactEffects) == 0x000070, "Member 'UMarinerArtifactDataAsset::ArtifactEffects' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactDataAsset, ArtifactType) == 0x0000C0, "Member 'UMarinerArtifactDataAsset::ArtifactType' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactDataAsset, ArtifactGameplayEffectType) == 0x0000C1, "Member 'UMarinerArtifactDataAsset::ArtifactGameplayEffectType' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactDataAsset, OwningCharacter) == 0x0000C8, "Member 'UMarinerArtifactDataAsset::OwningCharacter' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactDataAsset, GrantedAbility) == 0x0000F0, "Member 'UMarinerArtifactDataAsset::GrantedAbility' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactDataAsset, GrantedEffect) == 0x0000F8, "Member 'UMarinerArtifactDataAsset::GrantedEffect' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactDataAsset, ArtifactLevelUIData) == 0x000100, "Member 'UMarinerArtifactDataAsset::ArtifactLevelUIData' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactDataAsset, AbilityModifiers) == 0x000158, "Member 'UMarinerArtifactDataAsset::AbilityModifiers' has a wrong offset!");

// Class Mariner.MarinerDummyPlaylistWidget
// 0x0000 (0x0230 - 0x0230)
class UMarinerDummyPlaylistWidget : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDummyPlaylistWidget">();
	}
	static class UMarinerDummyPlaylistWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDummyPlaylistWidget>();
	}
};
static_assert(alignof(UMarinerDummyPlaylistWidget) == 0x000008, "Wrong alignment on UMarinerDummyPlaylistWidget");
static_assert(sizeof(UMarinerDummyPlaylistWidget) == 0x000230, "Wrong size on UMarinerDummyPlaylistWidget");

// Class Mariner.MarinerArtifactDetailsWidget
// 0x0048 (0x02F8 - 0x02B0)
class UMarinerArtifactDetailsWidget : public UMarinerUserWidget
{
public:
	class URichTextBlock*                         Bound_TextArtifactDescription;                     // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerArtifactImage*                  Bound_ImageArtifact;                               // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextArtifactName;                            // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextArtifactLore;                            // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextUnlockOrder;                             // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UProgressBar*                           Bound_ProgressBarArtifactLevel;                    // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         Bound_HorizionalBoxEquipped;                       // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1606[0x10];                                    // 0x02E8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerArtifactDetailsWidget">();
	}
	static class UMarinerArtifactDetailsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerArtifactDetailsWidget>();
	}
};
static_assert(alignof(UMarinerArtifactDetailsWidget) == 0x000008, "Wrong alignment on UMarinerArtifactDetailsWidget");
static_assert(sizeof(UMarinerArtifactDetailsWidget) == 0x0002F8, "Wrong size on UMarinerArtifactDetailsWidget");
static_assert(offsetof(UMarinerArtifactDetailsWidget, Bound_TextArtifactDescription) == 0x0002B0, "Member 'UMarinerArtifactDetailsWidget::Bound_TextArtifactDescription' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactDetailsWidget, Bound_ImageArtifact) == 0x0002B8, "Member 'UMarinerArtifactDetailsWidget::Bound_ImageArtifact' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactDetailsWidget, Bound_TextArtifactName) == 0x0002C0, "Member 'UMarinerArtifactDetailsWidget::Bound_TextArtifactName' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactDetailsWidget, Bound_TextArtifactLore) == 0x0002C8, "Member 'UMarinerArtifactDetailsWidget::Bound_TextArtifactLore' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactDetailsWidget, Bound_TextUnlockOrder) == 0x0002D0, "Member 'UMarinerArtifactDetailsWidget::Bound_TextUnlockOrder' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactDetailsWidget, Bound_ProgressBarArtifactLevel) == 0x0002D8, "Member 'UMarinerArtifactDetailsWidget::Bound_ProgressBarArtifactLevel' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactDetailsWidget, Bound_HorizionalBoxEquipped) == 0x0002E0, "Member 'UMarinerArtifactDetailsWidget::Bound_HorizionalBoxEquipped' has a wrong offset!");

// Class Mariner.MarinerPlayerPostGameWidget
// 0x0150 (0x0840 - 0x06F0)
class UMarinerPlayerPostGameWidget : public UMarinerSettingComboBox
{
public:
	class UAkAudioEvent*                          OnViewProfileSFX;                                  // 0x06F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnAddFriendSFX;                                    // 0x06F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnPlayerMutedFriendSFX;                            // 0x0700(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnPlayerUnMutedFriendSFX;                          // 0x0708(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1607[0x130];                                   // 0x0710(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAddFriendSelected();
	void OnInviteToPartySelected();
	void OnPlayerMuted();
	void OnPlayerUnMuted();
	void OnReportPlayerCheatsSelected();
	void OnReportPlayerGriefingSelected();
	void OnReportPlayerInappropriateSelected();
	void OnReportPlayerOffensiveSelected();
	void OnViewProfileSelected();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPlayerPostGameWidget">();
	}
	static class UMarinerPlayerPostGameWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPlayerPostGameWidget>();
	}
};
static_assert(alignof(UMarinerPlayerPostGameWidget) == 0x000008, "Wrong alignment on UMarinerPlayerPostGameWidget");
static_assert(sizeof(UMarinerPlayerPostGameWidget) == 0x000840, "Wrong size on UMarinerPlayerPostGameWidget");
static_assert(offsetof(UMarinerPlayerPostGameWidget, OnViewProfileSFX) == 0x0006F0, "Member 'UMarinerPlayerPostGameWidget::OnViewProfileSFX' has a wrong offset!");
static_assert(offsetof(UMarinerPlayerPostGameWidget, OnAddFriendSFX) == 0x0006F8, "Member 'UMarinerPlayerPostGameWidget::OnAddFriendSFX' has a wrong offset!");
static_assert(offsetof(UMarinerPlayerPostGameWidget, OnPlayerMutedFriendSFX) == 0x000700, "Member 'UMarinerPlayerPostGameWidget::OnPlayerMutedFriendSFX' has a wrong offset!");
static_assert(offsetof(UMarinerPlayerPostGameWidget, OnPlayerUnMutedFriendSFX) == 0x000708, "Member 'UMarinerPlayerPostGameWidget::OnPlayerUnMutedFriendSFX' has a wrong offset!");

// Class Mariner.MarinerPostGameGameOverMenu
// 0x0000 (0x04E0 - 0x04E0)
class UMarinerPostGameGameOverMenu : public UMarinerMenu
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPostGameGameOverMenu">();
	}
	static class UMarinerPostGameGameOverMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPostGameGameOverMenu>();
	}
};
static_assert(alignof(UMarinerPostGameGameOverMenu) == 0x000008, "Wrong alignment on UMarinerPostGameGameOverMenu");
static_assert(sizeof(UMarinerPostGameGameOverMenu) == 0x0004E0, "Wrong size on UMarinerPostGameGameOverMenu");

// Class Mariner.MarinerArtifactInfoSmallWidget
// 0x0030 (0x32E8 - 0x32B8)
class UMarinerArtifactInfoSmallWidget : public UMarinerItemLoadResponseButton
{
public:
	class UMarinerArtifactImage*                  Bound_ImageArtifact;                               // 0x32B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_ImageEquipped;                               // 0x32C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerArtifactDataAsset*              LoadedArtifactData;                                // 0x32C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerPlayableCharacter*              CurrentCharacter;                                  // 0x32D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1608[0x10];                                    // 0x32D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerArtifactInfoSmallWidget">();
	}
	static class UMarinerArtifactInfoSmallWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerArtifactInfoSmallWidget>();
	}
};
static_assert(alignof(UMarinerArtifactInfoSmallWidget) == 0x000008, "Wrong alignment on UMarinerArtifactInfoSmallWidget");
static_assert(sizeof(UMarinerArtifactInfoSmallWidget) == 0x0032E8, "Wrong size on UMarinerArtifactInfoSmallWidget");
static_assert(offsetof(UMarinerArtifactInfoSmallWidget, Bound_ImageArtifact) == 0x0032B8, "Member 'UMarinerArtifactInfoSmallWidget::Bound_ImageArtifact' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoSmallWidget, Bound_ImageEquipped) == 0x0032C0, "Member 'UMarinerArtifactInfoSmallWidget::Bound_ImageEquipped' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoSmallWidget, LoadedArtifactData) == 0x0032C8, "Member 'UMarinerArtifactInfoSmallWidget::LoadedArtifactData' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactInfoSmallWidget, CurrentCharacter) == 0x0032D0, "Member 'UMarinerArtifactInfoSmallWidget::CurrentCharacter' has a wrong offset!");

// Class Mariner.MarinerModeSelectMenu
// 0x0030 (0x0510 - 0x04E0)
class UMarinerModeSelectMenu : public UMarinerMenu
{
public:
	uint8                                         Pad_1609[0x10];                                    // 0x04E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerModeSelectButton>   ModeSelectButtonWidget;                            // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerModeSelectButton*               SelectedModeButton;                                // 0x04F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerGridPanel*                      Bound_ModeGrid;                                    // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerHighlightedModeWidget*          Bound_HighlightedModeWidget;                       // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnModeHighlighted(class UMarinerLayeredButton* Instance, bool bFromKeyboard, bool bFromMouse);
	void OnModeSelected(class UMarinerLayeredButton* Instance);
	void OnModeUnhighlighted(class UMarinerLayeredButton* Instance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerModeSelectMenu">();
	}
	static class UMarinerModeSelectMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerModeSelectMenu>();
	}
};
static_assert(alignof(UMarinerModeSelectMenu) == 0x000008, "Wrong alignment on UMarinerModeSelectMenu");
static_assert(sizeof(UMarinerModeSelectMenu) == 0x000510, "Wrong size on UMarinerModeSelectMenu");
static_assert(offsetof(UMarinerModeSelectMenu, ModeSelectButtonWidget) == 0x0004F0, "Member 'UMarinerModeSelectMenu::ModeSelectButtonWidget' has a wrong offset!");
static_assert(offsetof(UMarinerModeSelectMenu, SelectedModeButton) == 0x0004F8, "Member 'UMarinerModeSelectMenu::SelectedModeButton' has a wrong offset!");
static_assert(offsetof(UMarinerModeSelectMenu, Bound_ModeGrid) == 0x000500, "Member 'UMarinerModeSelectMenu::Bound_ModeGrid' has a wrong offset!");
static_assert(offsetof(UMarinerModeSelectMenu, Bound_HighlightedModeWidget) == 0x000508, "Member 'UMarinerModeSelectMenu::Bound_HighlightedModeWidget' has a wrong offset!");

// Class Mariner.MarinerArtifactPostGameWidget
// 0x0010 (0x02C0 - 0x02B0)
class UMarinerArtifactPostGameWidget : public UMarinerUserWidget
{
public:
	class UVerticalBox*                           Bound_RootVerticalBox;                             // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerArtifactProgressWidget> ArtifactProgressWidgetSubclass;                    // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Init(const TArray<struct FMangoItemResult>& ItemResults);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerArtifactPostGameWidget">();
	}
	static class UMarinerArtifactPostGameWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerArtifactPostGameWidget>();
	}
};
static_assert(alignof(UMarinerArtifactPostGameWidget) == 0x000008, "Wrong alignment on UMarinerArtifactPostGameWidget");
static_assert(sizeof(UMarinerArtifactPostGameWidget) == 0x0002C0, "Wrong size on UMarinerArtifactPostGameWidget");
static_assert(offsetof(UMarinerArtifactPostGameWidget, Bound_RootVerticalBox) == 0x0002B0, "Member 'UMarinerArtifactPostGameWidget::Bound_RootVerticalBox' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactPostGameWidget, ArtifactProgressWidgetSubclass) == 0x0002B8, "Member 'UMarinerArtifactPostGameWidget::ArtifactProgressWidgetSubclass' has a wrong offset!");

// Class Mariner.MarinerArtifactPreviewWidget
// 0x0038 (0x2FB0 - 0x2F78)
class UMarinerArtifactPreviewWidget : public UMarinerLayeredButton
{
public:
	class UMarinerArtifactImage*                  Bound_ArtifactImage;                               // 0x2F78(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextArtifactUnlockLevel;                     // 0x2F80(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_ArtifactNameText;                            // 0x2F88(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerSubArtifactsMenu>   ArtifactsSubMenu;                                  // 0x2F90(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPlayableCharacter*              CurrentCharacter;                                  // 0x2F98(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerArtifactDataAsset*              ArtifactDataAsset;                                 // 0x2FA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_160B[0x8];                                     // 0x2FA8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerArtifactPreviewWidget">();
	}
	static class UMarinerArtifactPreviewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerArtifactPreviewWidget>();
	}
};
static_assert(alignof(UMarinerArtifactPreviewWidget) == 0x000008, "Wrong alignment on UMarinerArtifactPreviewWidget");
static_assert(sizeof(UMarinerArtifactPreviewWidget) == 0x002FB0, "Wrong size on UMarinerArtifactPreviewWidget");
static_assert(offsetof(UMarinerArtifactPreviewWidget, Bound_ArtifactImage) == 0x002F78, "Member 'UMarinerArtifactPreviewWidget::Bound_ArtifactImage' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactPreviewWidget, Bound_TextArtifactUnlockLevel) == 0x002F80, "Member 'UMarinerArtifactPreviewWidget::Bound_TextArtifactUnlockLevel' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactPreviewWidget, Bound_ArtifactNameText) == 0x002F88, "Member 'UMarinerArtifactPreviewWidget::Bound_ArtifactNameText' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactPreviewWidget, ArtifactsSubMenu) == 0x002F90, "Member 'UMarinerArtifactPreviewWidget::ArtifactsSubMenu' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactPreviewWidget, CurrentCharacter) == 0x002F98, "Member 'UMarinerArtifactPreviewWidget::CurrentCharacter' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactPreviewWidget, ArtifactDataAsset) == 0x002FA0, "Member 'UMarinerArtifactPreviewWidget::ArtifactDataAsset' has a wrong offset!");

// Class Mariner.MarinerMessageBoxManager
// 0x00B8 (0x00E0 - 0x0028)
class UMarinerMessageBoxManager : public UObject
{
public:
	uint8                                         Pad_160C[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerAnimatedWidget>     BackgroundType;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMessageBox>         MessageBoxType;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerPurchaseMessageBox> PurchaseMessageBoxType;                            // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerQuestRewardMessageBox> QuestRewardMessageBoxType;                         // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerOrderDetailsMessageBox> OrderDetailsMessageBoxType;                        // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerNativePurchaseMessageBox> NativePurchaseMessageBoxType;                      // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerOptionListMessageBox> OptionListMessageBoxType;                          // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerOfferListMessageBox> OfferListMessageBoxType;                           // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerBlastPassOfferMessageBox> BlastPassOfferMessageBoxType;                      // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerBlastPassTierPurchaseMessageBox> BlastPassTierPurchaseMessageBoxType;               // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMessageBoxPrompts>  YesNoPromptType;                                   // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMessageBoxPrompts>  AcceptDeclinePromptType;                           // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMessageBoxPrompts>  OkayPromptType;                                    // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMessageBoxPrompts>  AnyKeyPromptType;                                  // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMessageBoxPrompts>  PlatformBlockPromptType;                           // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMessageBoxPrompts>  RejoinPromptType;                                  // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerGameInstance*                   GameInstance;                                      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerMessageBoxBase*                 ActiveMessageBox;                                  // 0x00B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerAnimatedWidget*                 ActiveBackground;                                  // 0x00C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_160D[0x18];                                    // 0x00C8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool BackgroundAnimatedOut(class UMarinerAnimatedWidget* Instance);
	bool MessageBoxAnimatedOut(class UMarinerAnimatedWidget* Instance);
	bool RemoveMessageBox(int32 MessageId);
	int32 ShowBlastPassOfferMessageBox(const struct FMarinerMessageBoxBlastPassOfferData& MessageBoxData);
	int32 ShowBlastPassTierPurchaseMessageBox(const struct FMarinerMessageBoxBlastPassTierPurchaseData& MessageBoxData);
	int32 ShowMessageBox(const struct FMarinerMessageBoxData& MessageBoxData);
	int32 ShowNativePurchaseMessageBox(const struct FMarinerMessageBoxNativePurchaseData& MessageBoxData);
	int32 ShowOfferListMessageBox(const struct FMarinerMessageBoxOfferListData& MessageBoxData);
	int32 ShowOptionListMessageBox(const struct FMarinerMessageBoxOptionListData& MessageBoxData);
	int32 ShowOrderDetailsMessageBox(const struct FMarinerMessageBoxOrderDetailsData& MessageBoxData);
	int32 ShowPurchaseMessageBox(const struct FMarinerMessageBoxPurchaseData& MessageBoxData);
	int32 ShowQuestRewardMessageBox(const struct FMarinerMessageBoxQuestRewardData& MessageBoxData);

	bool IsMessageBoxIdActiveOrPending(int32 MessageId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMessageBoxManager">();
	}
	static class UMarinerMessageBoxManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMessageBoxManager>();
	}
};
static_assert(alignof(UMarinerMessageBoxManager) == 0x000008, "Wrong alignment on UMarinerMessageBoxManager");
static_assert(sizeof(UMarinerMessageBoxManager) == 0x0000E0, "Wrong size on UMarinerMessageBoxManager");
static_assert(offsetof(UMarinerMessageBoxManager, BackgroundType) == 0x000030, "Member 'UMarinerMessageBoxManager::BackgroundType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, MessageBoxType) == 0x000038, "Member 'UMarinerMessageBoxManager::MessageBoxType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, PurchaseMessageBoxType) == 0x000040, "Member 'UMarinerMessageBoxManager::PurchaseMessageBoxType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, QuestRewardMessageBoxType) == 0x000048, "Member 'UMarinerMessageBoxManager::QuestRewardMessageBoxType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, OrderDetailsMessageBoxType) == 0x000050, "Member 'UMarinerMessageBoxManager::OrderDetailsMessageBoxType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, NativePurchaseMessageBoxType) == 0x000058, "Member 'UMarinerMessageBoxManager::NativePurchaseMessageBoxType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, OptionListMessageBoxType) == 0x000060, "Member 'UMarinerMessageBoxManager::OptionListMessageBoxType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, OfferListMessageBoxType) == 0x000068, "Member 'UMarinerMessageBoxManager::OfferListMessageBoxType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, BlastPassOfferMessageBoxType) == 0x000070, "Member 'UMarinerMessageBoxManager::BlastPassOfferMessageBoxType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, BlastPassTierPurchaseMessageBoxType) == 0x000078, "Member 'UMarinerMessageBoxManager::BlastPassTierPurchaseMessageBoxType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, YesNoPromptType) == 0x000080, "Member 'UMarinerMessageBoxManager::YesNoPromptType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, AcceptDeclinePromptType) == 0x000088, "Member 'UMarinerMessageBoxManager::AcceptDeclinePromptType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, OkayPromptType) == 0x000090, "Member 'UMarinerMessageBoxManager::OkayPromptType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, AnyKeyPromptType) == 0x000098, "Member 'UMarinerMessageBoxManager::AnyKeyPromptType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, PlatformBlockPromptType) == 0x0000A0, "Member 'UMarinerMessageBoxManager::PlatformBlockPromptType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, RejoinPromptType) == 0x0000A8, "Member 'UMarinerMessageBoxManager::RejoinPromptType' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, GameInstance) == 0x0000B0, "Member 'UMarinerMessageBoxManager::GameInstance' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, ActiveMessageBox) == 0x0000B8, "Member 'UMarinerMessageBoxManager::ActiveMessageBox' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxManager, ActiveBackground) == 0x0000C0, "Member 'UMarinerMessageBoxManager::ActiveBackground' has a wrong offset!");

// Class Mariner.MarinerArtifactProgressWidget
// 0x0020 (0x02D0 - 0x02B0)
class UMarinerArtifactProgressWidget : public UMarinerUserWidget
{
public:
	class UMarinerArtifactImage*                  Bound_ArtifactImage;                               // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UProgressBar*                           Bound_ArtifactProgressBar;                         // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextArtifactName;                            // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextArtifactLevel;                           // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerArtifactProgressWidget">();
	}
	static class UMarinerArtifactProgressWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerArtifactProgressWidget>();
	}
};
static_assert(alignof(UMarinerArtifactProgressWidget) == 0x000008, "Wrong alignment on UMarinerArtifactProgressWidget");
static_assert(sizeof(UMarinerArtifactProgressWidget) == 0x0002D0, "Wrong size on UMarinerArtifactProgressWidget");
static_assert(offsetof(UMarinerArtifactProgressWidget, Bound_ArtifactImage) == 0x0002B0, "Member 'UMarinerArtifactProgressWidget::Bound_ArtifactImage' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactProgressWidget, Bound_ArtifactProgressBar) == 0x0002B8, "Member 'UMarinerArtifactProgressWidget::Bound_ArtifactProgressBar' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactProgressWidget, Bound_TextArtifactName) == 0x0002C0, "Member 'UMarinerArtifactProgressWidget::Bound_TextArtifactName' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactProgressWidget, Bound_TextArtifactLevel) == 0x0002C8, "Member 'UMarinerArtifactProgressWidget::Bound_TextArtifactLevel' has a wrong offset!");

// Class Mariner.MarinerArtifactsSubMenuButton
// 0x0058 (0x2FD0 - 0x2F78)
class UMarinerArtifactsSubMenuButton : public UMarinerLayeredButton
{
public:
	class UTextBlock*                             Bound_TextArtifactType;                            // 0x2F78(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextArtifactName;                            // 0x2F80(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextArtifactDescription;                     // 0x2F88(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerArtifactImage*                  Bound_ArtifactImage;                               // 0x2F90(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerSubArtifactsMenu>   ArtifactsSubMenu;                                  // 0x2F98(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_161B[0x8];                                     // 0x2FA0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerPlayableCharacter*              CurrentCharacter;                                  // 0x2FA8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerArtifactDataAsset*              CurrentArtifactData;                               // 0x2FB0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_161C[0x18];                                    // 0x2FB8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnArtifactPresetChanged(bool bRanked);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerArtifactsSubMenuButton">();
	}
	static class UMarinerArtifactsSubMenuButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerArtifactsSubMenuButton>();
	}
};
static_assert(alignof(UMarinerArtifactsSubMenuButton) == 0x000008, "Wrong alignment on UMarinerArtifactsSubMenuButton");
static_assert(sizeof(UMarinerArtifactsSubMenuButton) == 0x002FD0, "Wrong size on UMarinerArtifactsSubMenuButton");
static_assert(offsetof(UMarinerArtifactsSubMenuButton, Bound_TextArtifactType) == 0x002F78, "Member 'UMarinerArtifactsSubMenuButton::Bound_TextArtifactType' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactsSubMenuButton, Bound_TextArtifactName) == 0x002F80, "Member 'UMarinerArtifactsSubMenuButton::Bound_TextArtifactName' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactsSubMenuButton, Bound_TextArtifactDescription) == 0x002F88, "Member 'UMarinerArtifactsSubMenuButton::Bound_TextArtifactDescription' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactsSubMenuButton, Bound_ArtifactImage) == 0x002F90, "Member 'UMarinerArtifactsSubMenuButton::Bound_ArtifactImage' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactsSubMenuButton, ArtifactsSubMenu) == 0x002F98, "Member 'UMarinerArtifactsSubMenuButton::ArtifactsSubMenu' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactsSubMenuButton, CurrentCharacter) == 0x002FA8, "Member 'UMarinerArtifactsSubMenuButton::CurrentCharacter' has a wrong offset!");
static_assert(offsetof(UMarinerArtifactsSubMenuButton, CurrentArtifactData) == 0x002FB0, "Member 'UMarinerArtifactsSubMenuButton::CurrentArtifactData' has a wrong offset!");

// Class Mariner.MarinerAssetManager
// 0x0000 (0x0438 - 0x0438)
class UMarinerAssetManager final : public UAssetManager
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAssetManager">();
	}
	static class UMarinerAssetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAssetManager>();
	}
};
static_assert(alignof(UMarinerAssetManager) == 0x000008, "Wrong alignment on UMarinerAssetManager");
static_assert(sizeof(UMarinerAssetManager) == 0x000438, "Wrong size on UMarinerAssetManager");

// Class Mariner.MarinerModeGlobals
// 0x0050 (0x0080 - 0x0030)
class UMarinerModeGlobals final : public UDataAsset
{
public:
	TMap<class FString, class UMarinerModeDataAsset*> ModeData;                                          // 0x0030(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	class UMarinerModeDataAsset* GetCurrentModeData(const class UObject* WorldContextObject, bool* bIsValid);
	const class FText GetCurrentModeDescription(const class UObject* WorldContextObject);
	const class FText GetCurrentModeName(const class UObject* WorldContextObject);

	bool IsModeValid(const class UObject* WorldContextObject, const struct FGuid& CmsId) const;
	const struct FMangoMode TryAndGetMangoModeFromCurrentMode(const class UObject* WorldContextObject, bool* bIsValid) const;
	const struct FMangoMode TryAndGetMangoModeFromLoadName(const class UObject* WorldContextObject, const class FString& LoadName, bool* bIsValid) const;
	class UMarinerModeDataAsset* TryAndGetModeDataByClass(class UClass* Param_Class) const;
	class UMarinerModeDataAsset* TryAndGetModeDataFromLoadName(const class FString& LoadName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerModeGlobals">();
	}
	static class UMarinerModeGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerModeGlobals>();
	}
};
static_assert(alignof(UMarinerModeGlobals) == 0x000008, "Wrong alignment on UMarinerModeGlobals");
static_assert(sizeof(UMarinerModeGlobals) == 0x000080, "Wrong size on UMarinerModeGlobals");
static_assert(offsetof(UMarinerModeGlobals, ModeData) == 0x000030, "Member 'UMarinerModeGlobals::ModeData' has a wrong offset!");

// Class Mariner.MarinerAsyncFlowItemPopups
// 0x0008 (0x0038 - 0x0030)
class UMarinerAsyncFlowItemPopups : public UMarinerAsyncUIFlowHandler
{
public:
	uint8                                         Pad_1621[0x8];                                     // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindAndDisplayItemPopups();
	void OnItemPopupsGranted(const struct FMangoOrderDetails& OrderDetails);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAsyncFlowItemPopups">();
	}
	static class UMarinerAsyncFlowItemPopups* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAsyncFlowItemPopups>();
	}
};
static_assert(alignof(UMarinerAsyncFlowItemPopups) == 0x000008, "Wrong alignment on UMarinerAsyncFlowItemPopups");
static_assert(sizeof(UMarinerAsyncFlowItemPopups) == 0x000038, "Wrong size on UMarinerAsyncFlowItemPopups");

// Class Mariner.MarinerGameMapLoader
// 0x0038 (0x0060 - 0x0028)
class UMarinerGameMapLoader final : public UObject
{
public:
	uint8                                         Pad_1622[0x10];                                    // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWorld*>                         LoadedMaps;                                        // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1623[0x18];                                    // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameMapLoader">();
	}
	static class UMarinerGameMapLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGameMapLoader>();
	}
};
static_assert(alignof(UMarinerGameMapLoader) == 0x000008, "Wrong alignment on UMarinerGameMapLoader");
static_assert(sizeof(UMarinerGameMapLoader) == 0x000060, "Wrong size on UMarinerGameMapLoader");
static_assert(offsetof(UMarinerGameMapLoader, LoadedMaps) == 0x000038, "Member 'UMarinerGameMapLoader::LoadedMaps' has a wrong offset!");

// Class Mariner.MarinerAsyncFlowNews
// 0x0220 (0x0250 - 0x0030)
class UMarinerAsyncFlowNews : public UMarinerAsyncUIFlowHandler
{
public:
	struct FMarinerMessageBoxData                 NewsMessageBoxData;                                // 0x0030(0x0170)(Edit, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1624[0x60];                                    // 0x01A0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGuid, class UTexture2D*>         LoadedTextures;                                    // 0x0200(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void BindAndDisplayNews();
	void OnNewsImageLoaded(const class FName& ImageId, class UTexture2D* Texture);
	void ShowAllUnviewedNews();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAsyncFlowNews">();
	}
	static class UMarinerAsyncFlowNews* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAsyncFlowNews>();
	}
};
static_assert(alignof(UMarinerAsyncFlowNews) == 0x000008, "Wrong alignment on UMarinerAsyncFlowNews");
static_assert(sizeof(UMarinerAsyncFlowNews) == 0x000250, "Wrong size on UMarinerAsyncFlowNews");
static_assert(offsetof(UMarinerAsyncFlowNews, NewsMessageBoxData) == 0x000030, "Member 'UMarinerAsyncFlowNews::NewsMessageBoxData' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowNews, LoadedTextures) == 0x000200, "Member 'UMarinerAsyncFlowNews::LoadedTextures' has a wrong offset!");

// Class Mariner.MarinerAsyncFlowOffers
// 0x0F60 (0x0F90 - 0x0030)
class UMarinerAsyncFlowOffers : public UMarinerAsyncUIFlowHandler
{
public:
	UMulticastInlineDelegateProperty_             OnPurchaseEquipped;                                // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPurchaseClosed;                                  // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPurchaseProfileRefreshComplete;                  // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPurchaseFlowComplete;                            // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FMarinerMessageBoxData                 BlockingPurchaseDialog;                            // 0x0070(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 InsufficientRocketbucksDialog;                     // 0x01E0(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 InsufficientRocketpartsDialog;                     // 0x0350(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 PurchaseFailedWithRetryDialog;                     // 0x04C0(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 PurchaseFailedDialog;                              // 0x0630(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 PurchaseFailedOfflineDialog;                       // 0x07A0(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 PurchaseFailedOverlayDisabledDialog;               // 0x0910(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 PurchaseFailedOriginOverlayDisabledDialog;         // 0x0A80(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 BlockingEquipDialog;                               // 0x0BF0(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class FText                                   BlastPassOfferHeaderFmt;                           // 0x0D60(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   BlastPassOfferBody;                                // 0x0D78(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerSettingButton>      HardCurrencyButtonType;                            // 0x0D90(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerSettingButton>      SoftCurrencyButtonType;                            // 0x0D98(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMenuStackManager>   StoreStackManager;                                 // 0x0DA0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerIDTag>              StoreTab;                                          // 0x0DA8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UMarinerMenuStackLayer>> StoreLayers;                                       // 0x0DB0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMessageBoxPrompts>  YesCancelPromptType;                               // 0x0DC0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMessageBoxPrompts>  CancelPromptType;                                  // 0x0DC8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMessageBoxPrompts>  OptionListPromptType;                              // 0x0DD0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMessageBoxPrompts>  ActivateClosePromptType;                           // 0x0DD8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMessageBoxPrompts>  EquipAndEquipToAllClosePromptType;                 // 0x0DE0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMessageBoxPrompts>  EquipClosePromptType;                              // 0x0DE8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMessageBoxPrompts>  EquipToAllClosePromptType;                         // 0x0DF0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerAsyncUIFlowHandler> InGameStoreFlowHandlerType;                        // 0x0DF8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          PurchaseSFX;                                       // 0x0E00(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1625[0xE0];                                    // 0x0E08(0x00E0)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerPlayableCharacter*              EquipToCharacter;                                  // 0x0EE8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1626[0x80];                                    // 0x0EF0(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerLoadCMSItemData*                LoadItemDataObject;                                // 0x0F70(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerEquipItemToProfile*             EquipObject;                                       // 0x0F78(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerEquipEmotesToProfile*           EquipEmotesObject;                                 // 0x0F80(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerEquipItemToAllCharacters*       EquipAllObject;                                    // 0x0F88(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BeginBlastPassPurchase(const struct FMangoBlastPassDefinition& InBlastPassDefinition);
	void BeginBlastPassTierPurchase(const struct FMangoBlastPassDefinition& InBlastPassDefinition, int32 InMinTier, int32 InMaxTier);
	void BeginNativeOfferPurchase(const struct FMangoNativeOffer& InNativeOffer);
	void BeginOfferListPurchase(const class FText& Header, const class FText& Body, const TArray<class FString>& OfferIds, const TArray<class FString>& NativeOfferLookupIdentifiers);
	void BeginOfferPurchase(const struct FMangoPurchaseOffer& InOffer, bool bInPremiumRequested, class UMarinerPlayableCharacter* InEquipToCharacter);
	void BeginOfferPurchaseWithCurrencySelection(const struct FMangoPurchaseOffer& InOffer, class UMarinerPlayableCharacter* InEquipToCharacter);
	void BeginPurchase(const struct FKey& KeyPressed);
	void CancelPurchase(const struct FKey& KeyPressed);
	void CancelPurchaseWithCheck(const struct FKey& KeyPressed);
	void CompletePurchase(const struct FKey& KeyPressed);
	void ConfirmGoToStore(const struct FKey& KeyPressed);
	void HandleEmotesEquip(const TArray<class UItemLoadResponse*>& LoadedDataResponse, const EMangoItemType ItemType);
	void OfferListCallback(const class FString& OfferId, bool bStandardOffer);
	void OnBlastPassTierPurchaseComplete(bool bWasSuccessful, int32 MaxTierPurchased, const struct FMangoOrderDetails& OrderDetails);
	void OnEquipFailed();
	void OnEquipLoadFinished(const TArray<class UItemLoadResponse*>& LoadedDataResponse);
	void OnEquipRequestComplete();
	void OnNativeOfferPurchaseComplete(EMangoNativePurchaseCompleteReason CompleteReason, const class FString& NativeOfferId, const struct FMangoOrderDetails& OrderDetails);
	void OnOfferPurchaseCompleteClose(const struct FKey& KeyPressed);
	void OnOfferPurchaseCompleteEquip(const struct FKey& KeyPressed);
	void OnOfferPurchaseCompleteEquipAll(const struct FKey& KeyPressed);
	void OnProfileRefreshComplete();
	void OnStorePurchaseComplete(const bool bWasSuccessful, const class FString& OfferId, const struct FMangoOrderDetails& OrderDetails);
	void PurchaseBlastPassTiers(const struct FKey& KeyPressed);
	void PurchaseWithRocketbucks();
	void PurchaseWithRocketparts();

	bool IsOfferPurchaseFlowActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAsyncFlowOffers">();
	}
	static class UMarinerAsyncFlowOffers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAsyncFlowOffers>();
	}
};
static_assert(alignof(UMarinerAsyncFlowOffers) == 0x000008, "Wrong alignment on UMarinerAsyncFlowOffers");
static_assert(sizeof(UMarinerAsyncFlowOffers) == 0x000F90, "Wrong size on UMarinerAsyncFlowOffers");
static_assert(offsetof(UMarinerAsyncFlowOffers, OnPurchaseEquipped) == 0x000030, "Member 'UMarinerAsyncFlowOffers::OnPurchaseEquipped' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, OnPurchaseClosed) == 0x000040, "Member 'UMarinerAsyncFlowOffers::OnPurchaseClosed' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, OnPurchaseProfileRefreshComplete) == 0x000050, "Member 'UMarinerAsyncFlowOffers::OnPurchaseProfileRefreshComplete' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, OnPurchaseFlowComplete) == 0x000060, "Member 'UMarinerAsyncFlowOffers::OnPurchaseFlowComplete' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, BlockingPurchaseDialog) == 0x000070, "Member 'UMarinerAsyncFlowOffers::BlockingPurchaseDialog' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, InsufficientRocketbucksDialog) == 0x0001E0, "Member 'UMarinerAsyncFlowOffers::InsufficientRocketbucksDialog' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, InsufficientRocketpartsDialog) == 0x000350, "Member 'UMarinerAsyncFlowOffers::InsufficientRocketpartsDialog' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, PurchaseFailedWithRetryDialog) == 0x0004C0, "Member 'UMarinerAsyncFlowOffers::PurchaseFailedWithRetryDialog' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, PurchaseFailedDialog) == 0x000630, "Member 'UMarinerAsyncFlowOffers::PurchaseFailedDialog' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, PurchaseFailedOfflineDialog) == 0x0007A0, "Member 'UMarinerAsyncFlowOffers::PurchaseFailedOfflineDialog' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, PurchaseFailedOverlayDisabledDialog) == 0x000910, "Member 'UMarinerAsyncFlowOffers::PurchaseFailedOverlayDisabledDialog' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, PurchaseFailedOriginOverlayDisabledDialog) == 0x000A80, "Member 'UMarinerAsyncFlowOffers::PurchaseFailedOriginOverlayDisabledDialog' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, BlockingEquipDialog) == 0x000BF0, "Member 'UMarinerAsyncFlowOffers::BlockingEquipDialog' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, BlastPassOfferHeaderFmt) == 0x000D60, "Member 'UMarinerAsyncFlowOffers::BlastPassOfferHeaderFmt' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, BlastPassOfferBody) == 0x000D78, "Member 'UMarinerAsyncFlowOffers::BlastPassOfferBody' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, HardCurrencyButtonType) == 0x000D90, "Member 'UMarinerAsyncFlowOffers::HardCurrencyButtonType' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, SoftCurrencyButtonType) == 0x000D98, "Member 'UMarinerAsyncFlowOffers::SoftCurrencyButtonType' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, StoreStackManager) == 0x000DA0, "Member 'UMarinerAsyncFlowOffers::StoreStackManager' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, StoreTab) == 0x000DA8, "Member 'UMarinerAsyncFlowOffers::StoreTab' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, StoreLayers) == 0x000DB0, "Member 'UMarinerAsyncFlowOffers::StoreLayers' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, YesCancelPromptType) == 0x000DC0, "Member 'UMarinerAsyncFlowOffers::YesCancelPromptType' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, CancelPromptType) == 0x000DC8, "Member 'UMarinerAsyncFlowOffers::CancelPromptType' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, OptionListPromptType) == 0x000DD0, "Member 'UMarinerAsyncFlowOffers::OptionListPromptType' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, ActivateClosePromptType) == 0x000DD8, "Member 'UMarinerAsyncFlowOffers::ActivateClosePromptType' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, EquipAndEquipToAllClosePromptType) == 0x000DE0, "Member 'UMarinerAsyncFlowOffers::EquipAndEquipToAllClosePromptType' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, EquipClosePromptType) == 0x000DE8, "Member 'UMarinerAsyncFlowOffers::EquipClosePromptType' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, EquipToAllClosePromptType) == 0x000DF0, "Member 'UMarinerAsyncFlowOffers::EquipToAllClosePromptType' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, InGameStoreFlowHandlerType) == 0x000DF8, "Member 'UMarinerAsyncFlowOffers::InGameStoreFlowHandlerType' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, PurchaseSFX) == 0x000E00, "Member 'UMarinerAsyncFlowOffers::PurchaseSFX' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, EquipToCharacter) == 0x000EE8, "Member 'UMarinerAsyncFlowOffers::EquipToCharacter' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, LoadItemDataObject) == 0x000F70, "Member 'UMarinerAsyncFlowOffers::LoadItemDataObject' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, EquipObject) == 0x000F78, "Member 'UMarinerAsyncFlowOffers::EquipObject' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, EquipEmotesObject) == 0x000F80, "Member 'UMarinerAsyncFlowOffers::EquipEmotesObject' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOffers, EquipAllObject) == 0x000F88, "Member 'UMarinerAsyncFlowOffers::EquipAllObject' has a wrong offset!");

// Class Mariner.MarinerDamageNumbers
// 0x0050 (0x04B0 - 0x0460)
class UMarinerDamageNumbers final : public UMarinerHUDWidget
{
public:
	float                                         DamageNumberLifetime;                              // 0x0460(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_162D[0x4];                                     // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DamageNumberScaleOverLife;                         // 0x0468(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           DamageNumberColor;                                 // 0x0470(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            DamageNumberSpeedOverLife;                         // 0x0480(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            DamageNumberAlphaOverLife;                         // 0x0488(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              DamageNumberLocationOffset;                        // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFont*                                  DamageNumberFont;                                  // 0x0498(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_162E[0x10];                                    // 0x04A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDamageNumbers">();
	}
	static class UMarinerDamageNumbers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDamageNumbers>();
	}
};
static_assert(alignof(UMarinerDamageNumbers) == 0x000008, "Wrong alignment on UMarinerDamageNumbers");
static_assert(sizeof(UMarinerDamageNumbers) == 0x0004B0, "Wrong size on UMarinerDamageNumbers");
static_assert(offsetof(UMarinerDamageNumbers, DamageNumberLifetime) == 0x000460, "Member 'UMarinerDamageNumbers::DamageNumberLifetime' has a wrong offset!");
static_assert(offsetof(UMarinerDamageNumbers, DamageNumberScaleOverLife) == 0x000468, "Member 'UMarinerDamageNumbers::DamageNumberScaleOverLife' has a wrong offset!");
static_assert(offsetof(UMarinerDamageNumbers, DamageNumberColor) == 0x000470, "Member 'UMarinerDamageNumbers::DamageNumberColor' has a wrong offset!");
static_assert(offsetof(UMarinerDamageNumbers, DamageNumberSpeedOverLife) == 0x000480, "Member 'UMarinerDamageNumbers::DamageNumberSpeedOverLife' has a wrong offset!");
static_assert(offsetof(UMarinerDamageNumbers, DamageNumberAlphaOverLife) == 0x000488, "Member 'UMarinerDamageNumbers::DamageNumberAlphaOverLife' has a wrong offset!");
static_assert(offsetof(UMarinerDamageNumbers, DamageNumberLocationOffset) == 0x000490, "Member 'UMarinerDamageNumbers::DamageNumberLocationOffset' has a wrong offset!");
static_assert(offsetof(UMarinerDamageNumbers, DamageNumberFont) == 0x000498, "Member 'UMarinerDamageNumbers::DamageNumberFont' has a wrong offset!");

// Class Mariner.MarinerAsyncFlowOnboarding
// 0x04B8 (0x04E8 - 0x0030)
class UMarinerAsyncFlowOnboarding : public UMarinerAsyncUIFlowHandler
{
public:
	UMulticastInlineDelegateProperty_             OnUnlockSocialPlaylists;                           // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnUnlockRankedPlaylists;                           // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FMarinerServerTravelConfig             IntroLevelServerTravelConfig;                      // 0x0050(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 SplashPopupMessageBox;                             // 0x0090(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 SocialUnlockedMessageBox;                          // 0x0200(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 RankedUnlockedMessageBox;                          // 0x0370(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_162F[0x8];                                     // 0x04E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AbortOnboarding();
	void BeginOnboarding();
	void OnMangoProfileUpdated();
	void RestartOnboarding();

	EMarinerOnboardingPlaylistState GetOnboardingPlaylistState() const;
	EMarinerOnboardingStates GetOnboardingState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAsyncFlowOnboarding">();
	}
	static class UMarinerAsyncFlowOnboarding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAsyncFlowOnboarding>();
	}
};
static_assert(alignof(UMarinerAsyncFlowOnboarding) == 0x000008, "Wrong alignment on UMarinerAsyncFlowOnboarding");
static_assert(sizeof(UMarinerAsyncFlowOnboarding) == 0x0004E8, "Wrong size on UMarinerAsyncFlowOnboarding");
static_assert(offsetof(UMarinerAsyncFlowOnboarding, OnUnlockSocialPlaylists) == 0x000030, "Member 'UMarinerAsyncFlowOnboarding::OnUnlockSocialPlaylists' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOnboarding, OnUnlockRankedPlaylists) == 0x000040, "Member 'UMarinerAsyncFlowOnboarding::OnUnlockRankedPlaylists' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOnboarding, IntroLevelServerTravelConfig) == 0x000050, "Member 'UMarinerAsyncFlowOnboarding::IntroLevelServerTravelConfig' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOnboarding, SplashPopupMessageBox) == 0x000090, "Member 'UMarinerAsyncFlowOnboarding::SplashPopupMessageBox' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOnboarding, SocialUnlockedMessageBox) == 0x000200, "Member 'UMarinerAsyncFlowOnboarding::SocialUnlockedMessageBox' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncFlowOnboarding, RankedUnlockedMessageBox) == 0x000370, "Member 'UMarinerAsyncFlowOnboarding::RankedUnlockedMessageBox' has a wrong offset!");

// Class Mariner.MarinerAsyncImage
// 0x00C0 (0x02F0 - 0x0230)
class UMarinerAsyncImage : public UUserWidget
{
public:
	class UImage*                                 Bound_LoadedImage;                                 // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            Bound_LoadingWidget;                               // 0x0238(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                            DefaultBrush;                                      // 0x0240(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              SoftTexture;                                       // 0x02C8(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnTextureAsyncLoadFinished(TSoftObjectPtr<class UTexture2D> InSoftTexture);
	void PopulateWithSoftTexture(TSoftObjectPtr<class UTexture2D> InSoftTexture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAsyncImage">();
	}
	static class UMarinerAsyncImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAsyncImage>();
	}
};
static_assert(alignof(UMarinerAsyncImage) == 0x000008, "Wrong alignment on UMarinerAsyncImage");
static_assert(sizeof(UMarinerAsyncImage) == 0x0002F0, "Wrong size on UMarinerAsyncImage");
static_assert(offsetof(UMarinerAsyncImage, Bound_LoadedImage) == 0x000230, "Member 'UMarinerAsyncImage::Bound_LoadedImage' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncImage, Bound_LoadingWidget) == 0x000238, "Member 'UMarinerAsyncImage::Bound_LoadingWidget' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncImage, DefaultBrush) == 0x000240, "Member 'UMarinerAsyncImage::DefaultBrush' has a wrong offset!");
static_assert(offsetof(UMarinerAsyncImage, SoftTexture) == 0x0002C8, "Member 'UMarinerAsyncImage::SoftTexture' has a wrong offset!");

// Class Mariner.MarinerGameplayEffect
// 0x0000 (0x0770 - 0x0770)
class UMarinerGameplayEffect : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameplayEffect">();
	}
	static class UMarinerGameplayEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGameplayEffect>();
	}
};
static_assert(alignof(UMarinerGameplayEffect) == 0x000008, "Wrong alignment on UMarinerGameplayEffect");
static_assert(sizeof(UMarinerGameplayEffect) == 0x000770, "Wrong size on UMarinerGameplayEffect");

// Class Mariner.MarinerAvatarWidget
// 0x0160 (0x0410 - 0x02B0)
class UMarinerAvatarWidget : public UMarinerUserWidget
{
public:
	class UImage*                                 Bound_PlayerDisplayImage;                          // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_PartyBorder;                                 // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_PartyAdd;                                    // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_PartyLeaderImage;                            // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_PlayerVoiceOn;                               // 0x02D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            Bound_LoadingSpinner;                              // 0x02D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAvatarType                                   WidgetType;                                        // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1630[0x7];                                     // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            DefaultDisplayImage;                               // 0x02E8(0x0088)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMenuStackManager>   SocialStackManager;                                // 0x0370(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerIDTag>              ProfileMenuId;                                     // 0x0378(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMenuStackLayer>     ProfileMenu;                                       // 0x0380(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMenuStackLayer>     SocialMenu;                                        // 0x0388(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1631[0x30];                                    // 0x0390(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             AvatarImage;                                       // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1632[0x48];                                    // 0x03C8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerTalking(const class FString& ChannelName, const class FString& PlayerName, bool bIsTalking);
	void OnUserSettingsChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAvatarWidget">();
	}
	static class UMarinerAvatarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAvatarWidget>();
	}
};
static_assert(alignof(UMarinerAvatarWidget) == 0x000008, "Wrong alignment on UMarinerAvatarWidget");
static_assert(sizeof(UMarinerAvatarWidget) == 0x000410, "Wrong size on UMarinerAvatarWidget");
static_assert(offsetof(UMarinerAvatarWidget, Bound_PlayerDisplayImage) == 0x0002B0, "Member 'UMarinerAvatarWidget::Bound_PlayerDisplayImage' has a wrong offset!");
static_assert(offsetof(UMarinerAvatarWidget, Bound_PartyBorder) == 0x0002B8, "Member 'UMarinerAvatarWidget::Bound_PartyBorder' has a wrong offset!");
static_assert(offsetof(UMarinerAvatarWidget, Bound_PartyAdd) == 0x0002C0, "Member 'UMarinerAvatarWidget::Bound_PartyAdd' has a wrong offset!");
static_assert(offsetof(UMarinerAvatarWidget, Bound_PartyLeaderImage) == 0x0002C8, "Member 'UMarinerAvatarWidget::Bound_PartyLeaderImage' has a wrong offset!");
static_assert(offsetof(UMarinerAvatarWidget, Bound_PlayerVoiceOn) == 0x0002D0, "Member 'UMarinerAvatarWidget::Bound_PlayerVoiceOn' has a wrong offset!");
static_assert(offsetof(UMarinerAvatarWidget, Bound_LoadingSpinner) == 0x0002D8, "Member 'UMarinerAvatarWidget::Bound_LoadingSpinner' has a wrong offset!");
static_assert(offsetof(UMarinerAvatarWidget, WidgetType) == 0x0002E0, "Member 'UMarinerAvatarWidget::WidgetType' has a wrong offset!");
static_assert(offsetof(UMarinerAvatarWidget, DefaultDisplayImage) == 0x0002E8, "Member 'UMarinerAvatarWidget::DefaultDisplayImage' has a wrong offset!");
static_assert(offsetof(UMarinerAvatarWidget, SocialStackManager) == 0x000370, "Member 'UMarinerAvatarWidget::SocialStackManager' has a wrong offset!");
static_assert(offsetof(UMarinerAvatarWidget, ProfileMenuId) == 0x000378, "Member 'UMarinerAvatarWidget::ProfileMenuId' has a wrong offset!");
static_assert(offsetof(UMarinerAvatarWidget, ProfileMenu) == 0x000380, "Member 'UMarinerAvatarWidget::ProfileMenu' has a wrong offset!");
static_assert(offsetof(UMarinerAvatarWidget, SocialMenu) == 0x000388, "Member 'UMarinerAvatarWidget::SocialMenu' has a wrong offset!");
static_assert(offsetof(UMarinerAvatarWidget, AvatarImage) == 0x0003C0, "Member 'UMarinerAvatarWidget::AvatarImage' has a wrong offset!");

// Class Mariner.MarinerBaseCharacterUIData
// 0x0320 (0x0350 - 0x0030)
class UMarinerBaseCharacterUIData : public UDataAsset
{
public:
	class FText                                   Title;                                             // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   HelpText;                                          // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Quote;                                             // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EMarinerCharacterDifficulty                   Difficulty;                                        // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1634[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   StoryParagraph1_1;                                 // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   StoryParagraph1_2;                                 // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   StoryParagraph2_1;                                 // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   StoryParagraph2_2;                                 // 0x00C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   StoryParagraph3_1;                                 // 0x00E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   StoryParagraph3_2;                                 // 0x00F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CharacterProjectile;                               // 0x0110(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            StoryBackground;                                   // 0x0198(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            StoryOriginLocation;                               // 0x0220(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            StoryProjectile;                                   // 0x02A8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           HUDAbilityBorderColor;                             // 0x0330(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          CharacterSelectedSFX;                              // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          CharacterLockStateSFX;                             // 0x0348(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBaseCharacterUIData">();
	}
	static class UMarinerBaseCharacterUIData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerBaseCharacterUIData>();
	}
};
static_assert(alignof(UMarinerBaseCharacterUIData) == 0x000008, "Wrong alignment on UMarinerBaseCharacterUIData");
static_assert(sizeof(UMarinerBaseCharacterUIData) == 0x000350, "Wrong size on UMarinerBaseCharacterUIData");
static_assert(offsetof(UMarinerBaseCharacterUIData, Title) == 0x000030, "Member 'UMarinerBaseCharacterUIData::Title' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, HelpText) == 0x000048, "Member 'UMarinerBaseCharacterUIData::HelpText' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, Quote) == 0x000060, "Member 'UMarinerBaseCharacterUIData::Quote' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, Difficulty) == 0x000078, "Member 'UMarinerBaseCharacterUIData::Difficulty' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, StoryParagraph1_1) == 0x000080, "Member 'UMarinerBaseCharacterUIData::StoryParagraph1_1' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, StoryParagraph1_2) == 0x000098, "Member 'UMarinerBaseCharacterUIData::StoryParagraph1_2' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, StoryParagraph2_1) == 0x0000B0, "Member 'UMarinerBaseCharacterUIData::StoryParagraph2_1' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, StoryParagraph2_2) == 0x0000C8, "Member 'UMarinerBaseCharacterUIData::StoryParagraph2_2' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, StoryParagraph3_1) == 0x0000E0, "Member 'UMarinerBaseCharacterUIData::StoryParagraph3_1' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, StoryParagraph3_2) == 0x0000F8, "Member 'UMarinerBaseCharacterUIData::StoryParagraph3_2' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, CharacterProjectile) == 0x000110, "Member 'UMarinerBaseCharacterUIData::CharacterProjectile' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, StoryBackground) == 0x000198, "Member 'UMarinerBaseCharacterUIData::StoryBackground' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, StoryOriginLocation) == 0x000220, "Member 'UMarinerBaseCharacterUIData::StoryOriginLocation' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, StoryProjectile) == 0x0002A8, "Member 'UMarinerBaseCharacterUIData::StoryProjectile' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, HUDAbilityBorderColor) == 0x000330, "Member 'UMarinerBaseCharacterUIData::HUDAbilityBorderColor' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, CharacterSelectedSFX) == 0x000340, "Member 'UMarinerBaseCharacterUIData::CharacterSelectedSFX' has a wrong offset!");
static_assert(offsetof(UMarinerBaseCharacterUIData, CharacterLockStateSFX) == 0x000348, "Member 'UMarinerBaseCharacterUIData::CharacterLockStateSFX' has a wrong offset!");

// Class Mariner.MarinerGameGriefComponent
// 0x0060 (0x0110 - 0x00B0)
class UMarinerGameGriefComponent final : public UActorComponent
{
public:
	float                                         IdleBootKickTime;                                  // 0x00B0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIdleBootingEnabled;                               // 0x00B4(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1635[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class APlayerController*, struct FGameGriefData> GameGriefPlayerMap;                                // 0x00B8(0x0050)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1636[0x8];                                     // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameGriefComponent">();
	}
	static class UMarinerGameGriefComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGameGriefComponent>();
	}
};
static_assert(alignof(UMarinerGameGriefComponent) == 0x000008, "Wrong alignment on UMarinerGameGriefComponent");
static_assert(sizeof(UMarinerGameGriefComponent) == 0x000110, "Wrong size on UMarinerGameGriefComponent");
static_assert(offsetof(UMarinerGameGriefComponent, IdleBootKickTime) == 0x0000B0, "Member 'UMarinerGameGriefComponent::IdleBootKickTime' has a wrong offset!");
static_assert(offsetof(UMarinerGameGriefComponent, bIdleBootingEnabled) == 0x0000B4, "Member 'UMarinerGameGriefComponent::bIdleBootingEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerGameGriefComponent, GameGriefPlayerMap) == 0x0000B8, "Member 'UMarinerGameGriefComponent::GameGriefPlayerMap' has a wrong offset!");

// Class Mariner.MarinerBaseContentWidget
// 0x0040 (0x02F0 - 0x02B0)
class UMarinerBaseContentWidget : public UMarinerUserWidget
{
public:
	class UMarinerVerticalBox*                    Bound_RootVerticalBox;                             // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           Bound_EmptyGridVerticalBox;                        // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollBox*                             Bound_ScrollBox;                                   // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerContentGrid>        ContentGridSubclass;                               // 0x02C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumColumns;                                        // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumRows;                                           // 0x02D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFillEmpty;                                        // 0x02D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1637[0x7];                                     // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerContentGrid*                    EmptyContentGrid;                                  // 0x02E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1638[0x8];                                     // 0x02E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCharacterContentGrid(const TArray<class UMarinerPlayableCharacter*>& LoadedItems, TSubclassOf<class UMarinerLayeredButton> LayeredButtonSubclass, TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UMarinerPlayableCharacter* Character)> OnCharacterAddedToGrid, const class FText& Header, EMarinerContentGridType InContentType);
	void AddItemsContentGrid(const TArray<class UItemLoadResponse*>& LoadedItems, TSubclassOf<class UMarinerLayeredButton> LayeredButtonSubclass, TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UItemLoadResponse* Item, bool bRanked)> OnItemAddedToGrid, const class FText& Header);
	void ClearContentWidget();
	class UMarinerLayeredButton* GetFirstItem();
	class UMarinerLayeredButton* GetHighlightedItem(const class FString& LookupId);
	class UMarinerLayeredButton* HighlightItem(const class FString& LookupId);
	void SetupGrid(int32 InColumns, int32 InNumRows, bool Param_bFillEmpty);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBaseContentWidget">();
	}
	static class UMarinerBaseContentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerBaseContentWidget>();
	}
};
static_assert(alignof(UMarinerBaseContentWidget) == 0x000008, "Wrong alignment on UMarinerBaseContentWidget");
static_assert(sizeof(UMarinerBaseContentWidget) == 0x0002F0, "Wrong size on UMarinerBaseContentWidget");
static_assert(offsetof(UMarinerBaseContentWidget, Bound_RootVerticalBox) == 0x0002B0, "Member 'UMarinerBaseContentWidget::Bound_RootVerticalBox' has a wrong offset!");
static_assert(offsetof(UMarinerBaseContentWidget, Bound_EmptyGridVerticalBox) == 0x0002B8, "Member 'UMarinerBaseContentWidget::Bound_EmptyGridVerticalBox' has a wrong offset!");
static_assert(offsetof(UMarinerBaseContentWidget, Bound_ScrollBox) == 0x0002C0, "Member 'UMarinerBaseContentWidget::Bound_ScrollBox' has a wrong offset!");
static_assert(offsetof(UMarinerBaseContentWidget, ContentGridSubclass) == 0x0002C8, "Member 'UMarinerBaseContentWidget::ContentGridSubclass' has a wrong offset!");
static_assert(offsetof(UMarinerBaseContentWidget, NumColumns) == 0x0002D0, "Member 'UMarinerBaseContentWidget::NumColumns' has a wrong offset!");
static_assert(offsetof(UMarinerBaseContentWidget, NumRows) == 0x0002D4, "Member 'UMarinerBaseContentWidget::NumRows' has a wrong offset!");
static_assert(offsetof(UMarinerBaseContentWidget, bFillEmpty) == 0x0002D8, "Member 'UMarinerBaseContentWidget::bFillEmpty' has a wrong offset!");
static_assert(offsetof(UMarinerBaseContentWidget, EmptyContentGrid) == 0x0002E0, "Member 'UMarinerBaseContentWidget::EmptyContentGrid' has a wrong offset!");

// Class Mariner.MarinerBaseHUDWidget
// 0x0008 (0x0468 - 0x0460)
class UMarinerBaseHUDWidget final : public UMarinerHUDWidget
{
public:
	class UCanvasPanel*                           Bound_ContentRoot;                                 // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBaseHUDWidget">();
	}
	static class UMarinerBaseHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerBaseHUDWidget>();
	}
};
static_assert(alignof(UMarinerBaseHUDWidget) == 0x000008, "Wrong alignment on UMarinerBaseHUDWidget");
static_assert(sizeof(UMarinerBaseHUDWidget) == 0x000468, "Wrong size on UMarinerBaseHUDWidget");
static_assert(offsetof(UMarinerBaseHUDWidget, Bound_ContentRoot) == 0x000460, "Member 'UMarinerBaseHUDWidget::Bound_ContentRoot' has a wrong offset!");

// Class Mariner.MarinerDamageImpulseHandler
// 0x0020 (0x0048 - 0x0028)
class UMarinerDamageImpulseHandler : public UObject
{
public:
	bool                                          bIgnoresActorDamageImpulseMultiplier;              // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseClampLaunchPitch;                              // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseVerticalityDampening;                          // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bClampLaunchPitchOnlyUsedOnGround;                 // 0x002B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bImpulseIsHostile;                                 // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldOverrideOtherImpulse;                       // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_163B[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedLaunchPitch;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FixedMegablastLaunchPitch;                         // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GroundedSpikePitchThreshold;                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AirborneSpikePitchThreshold;                       // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PracticallyGroundedDistanceFromFloor;              // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_163C[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector BP_CalculateDamageImpulseVector(const class AActor* DamagedActor, const float DamageImpulse, const struct FVector& DamageOrigin, const struct FVector& DamageDirection, const bool bIsAOEDamage, const class AController* DamageInstigator, const class AActor* DamageSourceActor) const;
	struct FVector BP_OverrideDamageImpulseOrigin(const class AActor* DamagedActor, const struct FVector& DamageOrigin, const struct FVector& DamageHitPoint, const bool bIsAOEDamage, const class AController* DamageInstigator, const class AActor* DamageSourceActor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDamageImpulseHandler">();
	}
	static class UMarinerDamageImpulseHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDamageImpulseHandler>();
	}
};
static_assert(alignof(UMarinerDamageImpulseHandler) == 0x000008, "Wrong alignment on UMarinerDamageImpulseHandler");
static_assert(sizeof(UMarinerDamageImpulseHandler) == 0x000048, "Wrong size on UMarinerDamageImpulseHandler");
static_assert(offsetof(UMarinerDamageImpulseHandler, bIgnoresActorDamageImpulseMultiplier) == 0x000028, "Member 'UMarinerDamageImpulseHandler::bIgnoresActorDamageImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerDamageImpulseHandler, bUseClampLaunchPitch) == 0x000029, "Member 'UMarinerDamageImpulseHandler::bUseClampLaunchPitch' has a wrong offset!");
static_assert(offsetof(UMarinerDamageImpulseHandler, bUseVerticalityDampening) == 0x00002A, "Member 'UMarinerDamageImpulseHandler::bUseVerticalityDampening' has a wrong offset!");
static_assert(offsetof(UMarinerDamageImpulseHandler, bClampLaunchPitchOnlyUsedOnGround) == 0x00002B, "Member 'UMarinerDamageImpulseHandler::bClampLaunchPitchOnlyUsedOnGround' has a wrong offset!");
static_assert(offsetof(UMarinerDamageImpulseHandler, bImpulseIsHostile) == 0x00002C, "Member 'UMarinerDamageImpulseHandler::bImpulseIsHostile' has a wrong offset!");
static_assert(offsetof(UMarinerDamageImpulseHandler, bShouldOverrideOtherImpulse) == 0x00002D, "Member 'UMarinerDamageImpulseHandler::bShouldOverrideOtherImpulse' has a wrong offset!");
static_assert(offsetof(UMarinerDamageImpulseHandler, FixedLaunchPitch) == 0x000030, "Member 'UMarinerDamageImpulseHandler::FixedLaunchPitch' has a wrong offset!");
static_assert(offsetof(UMarinerDamageImpulseHandler, FixedMegablastLaunchPitch) == 0x000034, "Member 'UMarinerDamageImpulseHandler::FixedMegablastLaunchPitch' has a wrong offset!");
static_assert(offsetof(UMarinerDamageImpulseHandler, GroundedSpikePitchThreshold) == 0x000038, "Member 'UMarinerDamageImpulseHandler::GroundedSpikePitchThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerDamageImpulseHandler, AirborneSpikePitchThreshold) == 0x00003C, "Member 'UMarinerDamageImpulseHandler::AirborneSpikePitchThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerDamageImpulseHandler, PracticallyGroundedDistanceFromFloor) == 0x000040, "Member 'UMarinerDamageImpulseHandler::PracticallyGroundedDistanceFromFloor' has a wrong offset!");

// Class Mariner.MarinerBaseItemSpawner
// 0x00A0 (0x02B8 - 0x0218)
class AMarinerBaseItemSpawner : public AActor
{
public:
	uint8                                         Pad_1641[0x8];                                     // 0x0218(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivationSphereRadius;                            // 0x0220(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1642[0x4];                                     // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       ActivationSphereComponent;                         // 0x0228(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1643[0x1];                                     // 0x0230(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShouldSpawnedItemsIgnoreImpulses;                 // 0x0231(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsARandomSpawner;                                 // 0x0232(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1644[0x5];                                     // 0x0233(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AMarinerItem>               ItemTemplate;                                      // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AMarinerItem>>       RandomItemTemplates;                               // 0x0240(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AMarinerItem>>       RankedItemTemplates;                               // 0x0250(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FMarinerSpawnItemTemplates>     EventRandomItemTemplates;                          // 0x0260(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1645[0x39];                                    // 0x0270(0x0039)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsGameStateRanked;                                // 0x02A9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1646[0x6];                                     // 0x02AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerAbilitySystemComponent*         AbilitySystemComponent;                            // 0x02B0(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_OnItemDisturbed(class AMarinerItem* DisturbedItem);
	void BP_OnItemSpawned(class AMarinerItem* SpawnedItem);
	void BP_OnRankedItemBoxSet(bool bIsRanked);
	void OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnPlaylistEventItemsLoaded(bool bIsRanked, const class FString& EventId);
	void OnPlaylistInfoSet(bool bIsRanked, const class FString& EventId);
	void OnPooledItemDisturbed(class AMarinerItem* DestroyedItem);
	void OnSpawnedItemDestroyed(class AActor* DestroyedActor);
	void OnSpawnedItemPickedUp(class AMarinerItem* Item, class AMarinerCharacter* NewItemCarrier);
	bool SpawnItem();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBaseItemSpawner">();
	}
	static class AMarinerBaseItemSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerBaseItemSpawner>();
	}
};
static_assert(alignof(AMarinerBaseItemSpawner) == 0x000008, "Wrong alignment on AMarinerBaseItemSpawner");
static_assert(sizeof(AMarinerBaseItemSpawner) == 0x0002B8, "Wrong size on AMarinerBaseItemSpawner");
static_assert(offsetof(AMarinerBaseItemSpawner, ActivationSphereRadius) == 0x000220, "Member 'AMarinerBaseItemSpawner::ActivationSphereRadius' has a wrong offset!");
static_assert(offsetof(AMarinerBaseItemSpawner, ActivationSphereComponent) == 0x000228, "Member 'AMarinerBaseItemSpawner::ActivationSphereComponent' has a wrong offset!");
static_assert(offsetof(AMarinerBaseItemSpawner, bShouldSpawnedItemsIgnoreImpulses) == 0x000231, "Member 'AMarinerBaseItemSpawner::bShouldSpawnedItemsIgnoreImpulses' has a wrong offset!");
static_assert(offsetof(AMarinerBaseItemSpawner, bIsARandomSpawner) == 0x000232, "Member 'AMarinerBaseItemSpawner::bIsARandomSpawner' has a wrong offset!");
static_assert(offsetof(AMarinerBaseItemSpawner, ItemTemplate) == 0x000238, "Member 'AMarinerBaseItemSpawner::ItemTemplate' has a wrong offset!");
static_assert(offsetof(AMarinerBaseItemSpawner, RandomItemTemplates) == 0x000240, "Member 'AMarinerBaseItemSpawner::RandomItemTemplates' has a wrong offset!");
static_assert(offsetof(AMarinerBaseItemSpawner, RankedItemTemplates) == 0x000250, "Member 'AMarinerBaseItemSpawner::RankedItemTemplates' has a wrong offset!");
static_assert(offsetof(AMarinerBaseItemSpawner, EventRandomItemTemplates) == 0x000260, "Member 'AMarinerBaseItemSpawner::EventRandomItemTemplates' has a wrong offset!");
static_assert(offsetof(AMarinerBaseItemSpawner, bIsGameStateRanked) == 0x0002A9, "Member 'AMarinerBaseItemSpawner::bIsGameStateRanked' has a wrong offset!");
static_assert(offsetof(AMarinerBaseItemSpawner, AbilitySystemComponent) == 0x0002B0, "Member 'AMarinerBaseItemSpawner::AbilitySystemComponent' has a wrong offset!");

// Class Mariner.MarinerBasePinWidget
// 0x0140 (0x03F0 - 0x02B0)
class UMarinerBasePinWidget : public UMarinerUserWidget
{
public:
	struct FMargin                                WidgetPosition;                                    // 0x02B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EPinState                                     CurrentState;                                      // 0x02C0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldRenderPinPoint;                             // 0x02C1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsAtEdgeOfScreen;                                 // 0x02C2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasLineOfSightToActor;                            // 0x02C3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_164A[0x4];                                     // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PinPointRotationAngle;                             // 0x02C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldClampToScreenRect;                          // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowPinPointWhenNotAtEdgeOfScreen;                // 0x02CD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_164B[0x2];                                     // 0x02CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ScaleAtDistanceCurve;                              // 0x02D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumScale;                                      // 0x02D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaximumScale;                                      // 0x02DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxScaleDistanceSquared;                           // 0x02E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinScaleDistanceSquared;                           // 0x02E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVisibilityPolicy                             VisibilityPolicyInsideViewCone;                    // 0x02E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVisibilityPolicy                             VisibilityPolicyOutsideViewCone;                   // 0x02E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_164C[0x6];                                     // 0x02EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarinerCone>                   ViewConeArray;                                     // 0x02F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bShouldBePinned;                                   // 0x0300(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_164D[0x3];                                     // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PinPosition;                                       // 0x0304(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TransitionDurationSeconds;                         // 0x030C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              Pivot;                                             // 0x0310(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              PaddingFromCenter;                                 // 0x0318(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              ScreenEdgePaddingFromCenter;                       // 0x0320(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PositioningSocket;                                 // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSlateBrush>                    BackgroundImages;                                  // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSlateBrush>                    PinImages;                                         // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSlateBrush>                    CenterImages;                                      // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bHiddenOnArenaReturn;                              // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_164E[0x37];                                    // 0x0361(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 InternalPinFrame;                                  // 0x0398(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 InternalPinPoint;                                  // 0x03A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 InternalPinImage;                                  // 0x03A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UWidget*>                        VisibilityChangingWidgets;                         // 0x03B0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UImage*>                         ColorChangingWidgets;                              // 0x03C0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_164F[0x20];                                    // 0x03D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddSelfToLayer();
	bool AdvanceState(EPinState NewState);
	struct FLinearColor DetermineColorDetails();
	struct FSlateBrush DeterminePinFrameBrush();
	struct FSlateBrush DeterminePinImageBrush();
	struct FSlateBrush DeterminePinPointBrush();
	ESlateVisibility DetermineVisibilityDetails();
	void HandleTransitionToNewState(EPinState NewState);
	void OnActorReferenceChanged(class AActor* NewActorReference);
	void OnHasLineOfSightToActorChanged(bool bHasLineOfSight);
	void OnInViewConeChanged(bool bInViewCone);
	void OnIsAtEdgeOfScreenChanged(bool bEdgeOfScreen);
	void OnOwningPlayerChangedTeams(class AMarinerPlayerState* OwningPlayer);
	void OnRenderValueChanged(bool bCurrentRenderValue);
	void RemoveSelfFromLayer();
	void SetActorReferenceIfDifferent(class AActor* NewActorReference);
	void SetActorReferenceIfNotValid(class AActor* NewActorReference);
	void SetIsPinPointShownWhenNotAtScreenEdge(bool bInShouldShowPinPoint);
	void SetIsRenderedAsPinned(bool bRenderAsPinned);
	void SetPinPosition(const struct FVector2D& InPinPosition);
	void SetPivot(const struct FVector2D& InPivot);
	void SetShouldRender(bool bInBool);
	void SetupPinWidgetLogic(class UImage* PinPointWidget, class UImage* FrameWidget, class UImage* ImageWidget);
	void SetupWidgetColorLogic(const TArray<class UImage*>& RelevantWidgets);
	void SetupWidgetVisibilityLogic(const TArray<class UWidget*>& RelevantWidgets);
	void SetVisibilityPolicyInsideViewCone(EVisibilityPolicy Policy);
	void SetVisibilityPolicyOutsideViewCone(EVisibilityPolicy Policy);
	void SetWorldOffset(const struct FVector& InWorldOffset);

	class AActor* GetActorReference() const;
	float GetRenderScalar() const;
	bool IsDead() const;
	bool IsInViewCone() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBasePinWidget">();
	}
	static class UMarinerBasePinWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerBasePinWidget>();
	}
};
static_assert(alignof(UMarinerBasePinWidget) == 0x000008, "Wrong alignment on UMarinerBasePinWidget");
static_assert(sizeof(UMarinerBasePinWidget) == 0x0003F0, "Wrong size on UMarinerBasePinWidget");
static_assert(offsetof(UMarinerBasePinWidget, WidgetPosition) == 0x0002B0, "Member 'UMarinerBasePinWidget::WidgetPosition' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, CurrentState) == 0x0002C0, "Member 'UMarinerBasePinWidget::CurrentState' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, bShouldRenderPinPoint) == 0x0002C1, "Member 'UMarinerBasePinWidget::bShouldRenderPinPoint' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, bIsAtEdgeOfScreen) == 0x0002C2, "Member 'UMarinerBasePinWidget::bIsAtEdgeOfScreen' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, bHasLineOfSightToActor) == 0x0002C3, "Member 'UMarinerBasePinWidget::bHasLineOfSightToActor' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, PinPointRotationAngle) == 0x0002C8, "Member 'UMarinerBasePinWidget::PinPointRotationAngle' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, bShouldClampToScreenRect) == 0x0002CC, "Member 'UMarinerBasePinWidget::bShouldClampToScreenRect' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, bShowPinPointWhenNotAtEdgeOfScreen) == 0x0002CD, "Member 'UMarinerBasePinWidget::bShowPinPointWhenNotAtEdgeOfScreen' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, ScaleAtDistanceCurve) == 0x0002D0, "Member 'UMarinerBasePinWidget::ScaleAtDistanceCurve' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, MinimumScale) == 0x0002D8, "Member 'UMarinerBasePinWidget::MinimumScale' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, MaximumScale) == 0x0002DC, "Member 'UMarinerBasePinWidget::MaximumScale' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, MaxScaleDistanceSquared) == 0x0002E0, "Member 'UMarinerBasePinWidget::MaxScaleDistanceSquared' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, MinScaleDistanceSquared) == 0x0002E4, "Member 'UMarinerBasePinWidget::MinScaleDistanceSquared' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, VisibilityPolicyInsideViewCone) == 0x0002E8, "Member 'UMarinerBasePinWidget::VisibilityPolicyInsideViewCone' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, VisibilityPolicyOutsideViewCone) == 0x0002E9, "Member 'UMarinerBasePinWidget::VisibilityPolicyOutsideViewCone' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, ViewConeArray) == 0x0002F0, "Member 'UMarinerBasePinWidget::ViewConeArray' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, bShouldBePinned) == 0x000300, "Member 'UMarinerBasePinWidget::bShouldBePinned' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, PinPosition) == 0x000304, "Member 'UMarinerBasePinWidget::PinPosition' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, TransitionDurationSeconds) == 0x00030C, "Member 'UMarinerBasePinWidget::TransitionDurationSeconds' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, Pivot) == 0x000310, "Member 'UMarinerBasePinWidget::Pivot' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, PaddingFromCenter) == 0x000318, "Member 'UMarinerBasePinWidget::PaddingFromCenter' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, ScreenEdgePaddingFromCenter) == 0x000320, "Member 'UMarinerBasePinWidget::ScreenEdgePaddingFromCenter' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, PositioningSocket) == 0x000328, "Member 'UMarinerBasePinWidget::PositioningSocket' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, BackgroundImages) == 0x000330, "Member 'UMarinerBasePinWidget::BackgroundImages' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, PinImages) == 0x000340, "Member 'UMarinerBasePinWidget::PinImages' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, CenterImages) == 0x000350, "Member 'UMarinerBasePinWidget::CenterImages' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, bHiddenOnArenaReturn) == 0x000360, "Member 'UMarinerBasePinWidget::bHiddenOnArenaReturn' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, InternalPinFrame) == 0x000398, "Member 'UMarinerBasePinWidget::InternalPinFrame' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, InternalPinPoint) == 0x0003A0, "Member 'UMarinerBasePinWidget::InternalPinPoint' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, InternalPinImage) == 0x0003A8, "Member 'UMarinerBasePinWidget::InternalPinImage' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, VisibilityChangingWidgets) == 0x0003B0, "Member 'UMarinerBasePinWidget::VisibilityChangingWidgets' has a wrong offset!");
static_assert(offsetof(UMarinerBasePinWidget, ColorChangingWidgets) == 0x0003C0, "Member 'UMarinerBasePinWidget::ColorChangingWidgets' has a wrong offset!");

// Class Mariner.MarinerDamageType
// 0x0098 (0x00D8 - 0x0040)
class UMarinerDamageType : public UDamageType
{
public:
	float                                         BaseDirectDamage;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDirectImpulse;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDirectImpulse;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldDirectRedirectOnOpposingVelocity;           // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1650[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseAOEDamageAtCenter;                             // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseAOEDamageAtEdge;                               // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DamageFalloffCurve;                                // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseAOEImpulseAtCenter;                            // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseAOEImpulseAtEdge;                              // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ImpulseFalloffCurve;                               // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelfInflictedDamageImpulse;                        // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1651[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SelfInflictedDamageImpulseFalloffCurve;            // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAOEImpulse;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAOEImpulse;                                     // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AOEOuterRadius;                                    // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAOERedirectOnOpposingVelocity;              // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverflowsMegablastDanger;                         // 0x008D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1652[0x2];                                     // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerDamageImpulseHandler> DamageImpulseHandler;                              // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelfInflictedDamageApplied;                     // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesGenerateHudFeedback;                          // 0x0099(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1653[0x6];                                     // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCanvasIcon                            KillIcon;                                          // 0x00A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   HitForceFeedback;                                  // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   KilledForceFeedback;                               // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShake>               DamageTakenCameraShake;                            // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShake>               DamageGivenCameraShake;                            // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDamageType">();
	}
	static class UMarinerDamageType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDamageType>();
	}
};
static_assert(alignof(UMarinerDamageType) == 0x000008, "Wrong alignment on UMarinerDamageType");
static_assert(sizeof(UMarinerDamageType) == 0x0000D8, "Wrong size on UMarinerDamageType");
static_assert(offsetof(UMarinerDamageType, BaseDirectDamage) == 0x000040, "Member 'UMarinerDamageType::BaseDirectDamage' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, MaxDirectImpulse) == 0x000044, "Member 'UMarinerDamageType::MaxDirectImpulse' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, MinDirectImpulse) == 0x000048, "Member 'UMarinerDamageType::MinDirectImpulse' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, bShouldDirectRedirectOnOpposingVelocity) == 0x00004C, "Member 'UMarinerDamageType::bShouldDirectRedirectOnOpposingVelocity' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, BaseAOEDamageAtCenter) == 0x000050, "Member 'UMarinerDamageType::BaseAOEDamageAtCenter' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, BaseAOEDamageAtEdge) == 0x000054, "Member 'UMarinerDamageType::BaseAOEDamageAtEdge' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, DamageFalloffCurve) == 0x000058, "Member 'UMarinerDamageType::DamageFalloffCurve' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, BaseAOEImpulseAtCenter) == 0x000060, "Member 'UMarinerDamageType::BaseAOEImpulseAtCenter' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, BaseAOEImpulseAtEdge) == 0x000064, "Member 'UMarinerDamageType::BaseAOEImpulseAtEdge' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, ImpulseFalloffCurve) == 0x000068, "Member 'UMarinerDamageType::ImpulseFalloffCurve' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, SelfInflictedDamageImpulse) == 0x000070, "Member 'UMarinerDamageType::SelfInflictedDamageImpulse' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, SelfInflictedDamageImpulseFalloffCurve) == 0x000078, "Member 'UMarinerDamageType::SelfInflictedDamageImpulseFalloffCurve' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, MaxAOEImpulse) == 0x000080, "Member 'UMarinerDamageType::MaxAOEImpulse' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, MinAOEImpulse) == 0x000084, "Member 'UMarinerDamageType::MinAOEImpulse' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, AOEOuterRadius) == 0x000088, "Member 'UMarinerDamageType::AOEOuterRadius' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, bShouldAOERedirectOnOpposingVelocity) == 0x00008C, "Member 'UMarinerDamageType::bShouldAOERedirectOnOpposingVelocity' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, bOverflowsMegablastDanger) == 0x00008D, "Member 'UMarinerDamageType::bOverflowsMegablastDanger' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, DamageImpulseHandler) == 0x000090, "Member 'UMarinerDamageType::DamageImpulseHandler' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, bIsSelfInflictedDamageApplied) == 0x000098, "Member 'UMarinerDamageType::bIsSelfInflictedDamageApplied' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, bDoesGenerateHudFeedback) == 0x000099, "Member 'UMarinerDamageType::bDoesGenerateHudFeedback' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, KillIcon) == 0x0000A0, "Member 'UMarinerDamageType::KillIcon' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, HitForceFeedback) == 0x0000B8, "Member 'UMarinerDamageType::HitForceFeedback' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, KilledForceFeedback) == 0x0000C0, "Member 'UMarinerDamageType::KilledForceFeedback' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, DamageTakenCameraShake) == 0x0000C8, "Member 'UMarinerDamageType::DamageTakenCameraShake' has a wrong offset!");
static_assert(offsetof(UMarinerDamageType, DamageGivenCameraShake) == 0x0000D0, "Member 'UMarinerDamageType::DamageGivenCameraShake' has a wrong offset!");

// Class Mariner.MarinerBlastPassOfferMessageBox
// 0x0020 (0x0478 - 0x0458)
class UMarinerBlastPassOfferMessageBox : public UMarinerMessageBoxBase
{
public:
	class UTextBlock*                             Bound_Season;                                      // 0x0458(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_Description;                                 // 0x0460(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_CostValue;                                   // 0x0468(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_BackgroundImage;                             // 0x0470(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	const struct FMarinerMessageBoxBlastPassOfferData GetData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBlastPassOfferMessageBox">();
	}
	static class UMarinerBlastPassOfferMessageBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerBlastPassOfferMessageBox>();
	}
};
static_assert(alignof(UMarinerBlastPassOfferMessageBox) == 0x000008, "Wrong alignment on UMarinerBlastPassOfferMessageBox");
static_assert(sizeof(UMarinerBlastPassOfferMessageBox) == 0x000478, "Wrong size on UMarinerBlastPassOfferMessageBox");
static_assert(offsetof(UMarinerBlastPassOfferMessageBox, Bound_Season) == 0x000458, "Member 'UMarinerBlastPassOfferMessageBox::Bound_Season' has a wrong offset!");
static_assert(offsetof(UMarinerBlastPassOfferMessageBox, Bound_Description) == 0x000460, "Member 'UMarinerBlastPassOfferMessageBox::Bound_Description' has a wrong offset!");
static_assert(offsetof(UMarinerBlastPassOfferMessageBox, Bound_CostValue) == 0x000468, "Member 'UMarinerBlastPassOfferMessageBox::Bound_CostValue' has a wrong offset!");
static_assert(offsetof(UMarinerBlastPassOfferMessageBox, Bound_BackgroundImage) == 0x000470, "Member 'UMarinerBlastPassOfferMessageBox::Bound_BackgroundImage' has a wrong offset!");

// Class Mariner.MarinerDamageDebugRecord
// 0x0048 (0x0070 - 0x0028)
class UMarinerDamageDebugRecord : public UObject
{
public:
	class FName                                   DamageTypeName;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DamageImpulseHandlerName;                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DamageInstigatorName;                              // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DamageSourceActorName;                             // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                DamageOrigin;                                      // 0x0048(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BaseDamage;                                        // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageMultiplier;                                  // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BaseImpulse;                                       // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ImpulseMultiplier;                                 // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1654[0xC];                                     // 0x0064(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DrawDebugInfo() const;
	class FText GetShortDescription() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDamageDebugRecord">();
	}
	static class UMarinerDamageDebugRecord* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDamageDebugRecord>();
	}
};
static_assert(alignof(UMarinerDamageDebugRecord) == 0x000008, "Wrong alignment on UMarinerDamageDebugRecord");
static_assert(sizeof(UMarinerDamageDebugRecord) == 0x000070, "Wrong size on UMarinerDamageDebugRecord");
static_assert(offsetof(UMarinerDamageDebugRecord, DamageTypeName) == 0x000028, "Member 'UMarinerDamageDebugRecord::DamageTypeName' has a wrong offset!");
static_assert(offsetof(UMarinerDamageDebugRecord, DamageImpulseHandlerName) == 0x000030, "Member 'UMarinerDamageDebugRecord::DamageImpulseHandlerName' has a wrong offset!");
static_assert(offsetof(UMarinerDamageDebugRecord, DamageInstigatorName) == 0x000038, "Member 'UMarinerDamageDebugRecord::DamageInstigatorName' has a wrong offset!");
static_assert(offsetof(UMarinerDamageDebugRecord, DamageSourceActorName) == 0x000040, "Member 'UMarinerDamageDebugRecord::DamageSourceActorName' has a wrong offset!");
static_assert(offsetof(UMarinerDamageDebugRecord, DamageOrigin) == 0x000048, "Member 'UMarinerDamageDebugRecord::DamageOrigin' has a wrong offset!");
static_assert(offsetof(UMarinerDamageDebugRecord, BaseDamage) == 0x000054, "Member 'UMarinerDamageDebugRecord::BaseDamage' has a wrong offset!");
static_assert(offsetof(UMarinerDamageDebugRecord, DamageMultiplier) == 0x000058, "Member 'UMarinerDamageDebugRecord::DamageMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerDamageDebugRecord, BaseImpulse) == 0x00005C, "Member 'UMarinerDamageDebugRecord::BaseImpulse' has a wrong offset!");
static_assert(offsetof(UMarinerDamageDebugRecord, ImpulseMultiplier) == 0x000060, "Member 'UMarinerDamageDebugRecord::ImpulseMultiplier' has a wrong offset!");

// Class Mariner.MarinerDirectDamageDebugRecord
// 0x0040 (0x00B0 - 0x0070)
class UMarinerDirectDamageDebugRecord final : public UMarinerDamageDebugRecord
{
public:
	struct FMarinerActorDamagedDebugRecord        ActorDamaged;                                      // 0x0070(0x0040)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDirectDamageDebugRecord">();
	}
	static class UMarinerDirectDamageDebugRecord* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDirectDamageDebugRecord>();
	}
};
static_assert(alignof(UMarinerDirectDamageDebugRecord) == 0x000008, "Wrong alignment on UMarinerDirectDamageDebugRecord");
static_assert(sizeof(UMarinerDirectDamageDebugRecord) == 0x0000B0, "Wrong size on UMarinerDirectDamageDebugRecord");
static_assert(offsetof(UMarinerDirectDamageDebugRecord, ActorDamaged) == 0x000070, "Member 'UMarinerDirectDamageDebugRecord::ActorDamaged' has a wrong offset!");

// Class Mariner.MarinerBlastPassPip
// 0x0028 (0x0258 - 0x0230)
class UMarinerBlastPassPip : public UUserWidget
{
public:
	class UMaterialInterface*                     PipImageMaterial;                                  // 0x0230(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_PipImage;                                    // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Bound_FlashAnim;                                   // 0x0240(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1655[0x8];                                     // 0x0248(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MaterialInstance;                                  // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetPipProgress(bool bInit, float Percent);

	float GetPipProgress() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBlastPassPip">();
	}
	static class UMarinerBlastPassPip* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerBlastPassPip>();
	}
};
static_assert(alignof(UMarinerBlastPassPip) == 0x000008, "Wrong alignment on UMarinerBlastPassPip");
static_assert(sizeof(UMarinerBlastPassPip) == 0x000258, "Wrong size on UMarinerBlastPassPip");
static_assert(offsetof(UMarinerBlastPassPip, PipImageMaterial) == 0x000230, "Member 'UMarinerBlastPassPip::PipImageMaterial' has a wrong offset!");
static_assert(offsetof(UMarinerBlastPassPip, Bound_PipImage) == 0x000238, "Member 'UMarinerBlastPassPip::Bound_PipImage' has a wrong offset!");
static_assert(offsetof(UMarinerBlastPassPip, Bound_FlashAnim) == 0x000240, "Member 'UMarinerBlastPassPip::Bound_FlashAnim' has a wrong offset!");
static_assert(offsetof(UMarinerBlastPassPip, MaterialInstance) == 0x000250, "Member 'UMarinerBlastPassPip::MaterialInstance' has a wrong offset!");

// Class Mariner.MarinerBlastPassProgressBar
// 0x0020 (0x0318 - 0x02F8)
class UMarinerBlastPassProgressBar : public UMarinerAnimatedProgressWidget
{
public:
	class UHorizontalBox*                         Bound_PipPanel;                                    // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerBlastPassXPBoost*               Bound_PersonalBoost;                               // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerBlastPassXPBoost*               Bound_PartyBoost;                                  // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1657[0x8];                                     // 0x0310(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PopulateXPBoosts(int32 PersonalBoost, int32 PartyBoost);
	void PopulateXPBoostsFromProfile();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBlastPassProgressBar">();
	}
	static class UMarinerBlastPassProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerBlastPassProgressBar>();
	}
};
static_assert(alignof(UMarinerBlastPassProgressBar) == 0x000008, "Wrong alignment on UMarinerBlastPassProgressBar");
static_assert(sizeof(UMarinerBlastPassProgressBar) == 0x000318, "Wrong size on UMarinerBlastPassProgressBar");
static_assert(offsetof(UMarinerBlastPassProgressBar, Bound_PipPanel) == 0x0002F8, "Member 'UMarinerBlastPassProgressBar::Bound_PipPanel' has a wrong offset!");
static_assert(offsetof(UMarinerBlastPassProgressBar, Bound_PersonalBoost) == 0x000300, "Member 'UMarinerBlastPassProgressBar::Bound_PersonalBoost' has a wrong offset!");
static_assert(offsetof(UMarinerBlastPassProgressBar, Bound_PartyBoost) == 0x000308, "Member 'UMarinerBlastPassProgressBar::Bound_PartyBoost' has a wrong offset!");

// Class Mariner.MarinerItemLevelGroupWidget
// 0x01F0 (0x04A0 - 0x02B0)
class UMarinerItemLevelGroupWidget : public UMarinerUserWidget
{
public:
	struct FMarinerItemLevelGroupData             WidgetData;                                        // 0x02B0(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	EMarinerInputActions                          PagePreviousAction;                                // 0x0420(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerInputActions                          PageNextAction;                                    // 0x0421(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1658[0x6];                                     // 0x0422(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerHorizontalBox*                  Bound_ContentRoot;                                 // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         Bound_PageBanner;                                  // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_PageText;                                    // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                               Bound_SizeBox;                                     // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1659[0x58];                                    // 0x0448(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnButtonCreated(class UMarinerLayeredButton* ButtonInstance, const struct FMarinerUIItemButtonData& ItemData);
	void OnButtonHighlighted(class UMarinerLayeredButton* ButtonInstance, bool bFromKeyboard, bool bFromMouse);
	void OnButtonSelected(class UMarinerLayeredButton* ButtonInstance);
	void OnButtonUnhighlighted(class UMarinerLayeredButton* ButtonInstance);

	bool IsChangePageInput(EMarinerInputActions InInput) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerItemLevelGroupWidget">();
	}
	static class UMarinerItemLevelGroupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerItemLevelGroupWidget>();
	}
};
static_assert(alignof(UMarinerItemLevelGroupWidget) == 0x000008, "Wrong alignment on UMarinerItemLevelGroupWidget");
static_assert(sizeof(UMarinerItemLevelGroupWidget) == 0x0004A0, "Wrong size on UMarinerItemLevelGroupWidget");
static_assert(offsetof(UMarinerItemLevelGroupWidget, WidgetData) == 0x0002B0, "Member 'UMarinerItemLevelGroupWidget::WidgetData' has a wrong offset!");
static_assert(offsetof(UMarinerItemLevelGroupWidget, PagePreviousAction) == 0x000420, "Member 'UMarinerItemLevelGroupWidget::PagePreviousAction' has a wrong offset!");
static_assert(offsetof(UMarinerItemLevelGroupWidget, PageNextAction) == 0x000421, "Member 'UMarinerItemLevelGroupWidget::PageNextAction' has a wrong offset!");
static_assert(offsetof(UMarinerItemLevelGroupWidget, Bound_ContentRoot) == 0x000428, "Member 'UMarinerItemLevelGroupWidget::Bound_ContentRoot' has a wrong offset!");
static_assert(offsetof(UMarinerItemLevelGroupWidget, Bound_PageBanner) == 0x000430, "Member 'UMarinerItemLevelGroupWidget::Bound_PageBanner' has a wrong offset!");
static_assert(offsetof(UMarinerItemLevelGroupWidget, Bound_PageText) == 0x000438, "Member 'UMarinerItemLevelGroupWidget::Bound_PageText' has a wrong offset!");
static_assert(offsetof(UMarinerItemLevelGroupWidget, Bound_SizeBox) == 0x000440, "Member 'UMarinerItemLevelGroupWidget::Bound_SizeBox' has a wrong offset!");

// Class Mariner.MarinerBlastPassProgressionWidget
// 0x0080 (0x0520 - 0x04A0)
class UMarinerBlastPassProgressionWidget : public UMarinerItemLevelGroupWidget
{
public:
	uint8                                         Pad_165B[0x80];                                    // 0x04A0(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ChangeMaxDisplayedTier(int32 Delta);
	void Init(const struct FMangoBlastPassDefinition& Definition, bool bInShowContentStates, int32 InStartingTier);
	void InitTierRange(const struct FMangoBlastPassDefinition& Definition, bool bInShowContentStates, int32 InMinTier, int32 InMaxTier);

	const struct FMangoBlastPassDefinition GetBlastPass() const;
	int32 GetMaxDisplayedTier() const;
	int32 GetMinDisplayedTier() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBlastPassProgressionWidget">();
	}
	static class UMarinerBlastPassProgressionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerBlastPassProgressionWidget>();
	}
};
static_assert(alignof(UMarinerBlastPassProgressionWidget) == 0x000008, "Wrong alignment on UMarinerBlastPassProgressionWidget");
static_assert(sizeof(UMarinerBlastPassProgressionWidget) == 0x000520, "Wrong size on UMarinerBlastPassProgressionWidget");

// Class Mariner.MarinerDropShadowComponent
// 0x0040 (0x0270 - 0x0230)
class UMarinerDropShadowComponent final : public UDecalComponent
{
public:
	bool                                          bUseTrace;                                         // 0x0230(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1660[0x3];                                     // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDisplayHeight_ZeroStrength;                     // 0x0234(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinDisplayHeight_OneStrength;                      // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxDisplayHeight_OneStrength;                      // 0x023C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxDisplayHeight_ZeroStrength;                     // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               LockedWorldOrientation;                            // 0x0244(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                OffsetFromOwner;                                   // 0x0250(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1661[0x14];                                    // 0x025C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDropShadowComponent">();
	}
	static class UMarinerDropShadowComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDropShadowComponent>();
	}
};
static_assert(alignof(UMarinerDropShadowComponent) == 0x000010, "Wrong alignment on UMarinerDropShadowComponent");
static_assert(sizeof(UMarinerDropShadowComponent) == 0x000270, "Wrong size on UMarinerDropShadowComponent");
static_assert(offsetof(UMarinerDropShadowComponent, bUseTrace) == 0x000230, "Member 'UMarinerDropShadowComponent::bUseTrace' has a wrong offset!");
static_assert(offsetof(UMarinerDropShadowComponent, MinDisplayHeight_ZeroStrength) == 0x000234, "Member 'UMarinerDropShadowComponent::MinDisplayHeight_ZeroStrength' has a wrong offset!");
static_assert(offsetof(UMarinerDropShadowComponent, MinDisplayHeight_OneStrength) == 0x000238, "Member 'UMarinerDropShadowComponent::MinDisplayHeight_OneStrength' has a wrong offset!");
static_assert(offsetof(UMarinerDropShadowComponent, MaxDisplayHeight_OneStrength) == 0x00023C, "Member 'UMarinerDropShadowComponent::MaxDisplayHeight_OneStrength' has a wrong offset!");
static_assert(offsetof(UMarinerDropShadowComponent, MaxDisplayHeight_ZeroStrength) == 0x000240, "Member 'UMarinerDropShadowComponent::MaxDisplayHeight_ZeroStrength' has a wrong offset!");
static_assert(offsetof(UMarinerDropShadowComponent, LockedWorldOrientation) == 0x000244, "Member 'UMarinerDropShadowComponent::LockedWorldOrientation' has a wrong offset!");
static_assert(offsetof(UMarinerDropShadowComponent, OffsetFromOwner) == 0x000250, "Member 'UMarinerDropShadowComponent::OffsetFromOwner' has a wrong offset!");

// Class Mariner.MarinerBlastPassTierPurchaseMessageBox
// 0x0010 (0x0468 - 0x0458)
class UMarinerBlastPassTierPurchaseMessageBox : public UMarinerMessageBoxBase
{
public:
	class UTextBlock*                             Bound_TierDescription;                             // 0x0458(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_CostValue;                                   // 0x0460(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	const struct FMarinerMessageBoxBlastPassTierPurchaseData GetData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBlastPassTierPurchaseMessageBox">();
	}
	static class UMarinerBlastPassTierPurchaseMessageBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerBlastPassTierPurchaseMessageBox>();
	}
};
static_assert(alignof(UMarinerBlastPassTierPurchaseMessageBox) == 0x000008, "Wrong alignment on UMarinerBlastPassTierPurchaseMessageBox");
static_assert(sizeof(UMarinerBlastPassTierPurchaseMessageBox) == 0x000468, "Wrong size on UMarinerBlastPassTierPurchaseMessageBox");
static_assert(offsetof(UMarinerBlastPassTierPurchaseMessageBox, Bound_TierDescription) == 0x000458, "Member 'UMarinerBlastPassTierPurchaseMessageBox::Bound_TierDescription' has a wrong offset!");
static_assert(offsetof(UMarinerBlastPassTierPurchaseMessageBox, Bound_CostValue) == 0x000460, "Member 'UMarinerBlastPassTierPurchaseMessageBox::Bound_CostValue' has a wrong offset!");

// Class Mariner.MarinerBlastPassXPBoost
// 0x0098 (0x02C8 - 0x0230)
class UMarinerBlastPassXPBoost : public UUserWidget
{
public:
	struct FSlateBrush                            IconBrush;                                         // 0x0230(0x0088)(Edit, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_BoostIcon;                                   // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_BoostText;                                   // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetBoostPercent(int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBlastPassXPBoost">();
	}
	static class UMarinerBlastPassXPBoost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerBlastPassXPBoost>();
	}
};
static_assert(alignof(UMarinerBlastPassXPBoost) == 0x000008, "Wrong alignment on UMarinerBlastPassXPBoost");
static_assert(sizeof(UMarinerBlastPassXPBoost) == 0x0002C8, "Wrong size on UMarinerBlastPassXPBoost");
static_assert(offsetof(UMarinerBlastPassXPBoost, IconBrush) == 0x000230, "Member 'UMarinerBlastPassXPBoost::IconBrush' has a wrong offset!");
static_assert(offsetof(UMarinerBlastPassXPBoost, Bound_BoostIcon) == 0x0002B8, "Member 'UMarinerBlastPassXPBoost::Bound_BoostIcon' has a wrong offset!");
static_assert(offsetof(UMarinerBlastPassXPBoost, Bound_BoostText) == 0x0002C0, "Member 'UMarinerBlastPassXPBoost::Bound_BoostText' has a wrong offset!");

// Class Mariner.MarinerDirectionalImmunityInterface
// 0x0000 (0x0028 - 0x0028)
class IMarinerDirectionalImmunityInterface final : public IInterface
{
public:
	bool DoesDamageTypeBypassImmunity(TSubclassOf<class UMarinerDamageType> DamageType) const;
	TMap<struct FVector, float> GetImmunityDirections() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDirectionalImmunityInterface">();
	}
	static class IMarinerDirectionalImmunityInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarinerDirectionalImmunityInterface>();
	}
};
static_assert(alignof(IMarinerDirectionalImmunityInterface) == 0x000008, "Wrong alignment on IMarinerDirectionalImmunityInterface");
static_assert(sizeof(IMarinerDirectionalImmunityInterface) == 0x000028, "Wrong size on IMarinerDirectionalImmunityInterface");

// Class Mariner.MarinerBotDifficultyData
// 0x0058 (0x0088 - 0x0030)
class UMarinerBotDifficultyData final : public UDataAsset
{
public:
	class UBehaviorTree*                          BehaviorTree;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAimTrackingDeviation                  AccuracyDeviation;                                 // 0x0038(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         NeedHealthDamageThreshold;                         // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionChanceOfCompletion              FindHealthChanceOfCompletion;                      // 0x004C(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FActionChanceOfCompletion              FindPlayerChanceOfCompletion;                      // 0x0054(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FActionChanceOfCompletion              SpecialAbilityChanceOfCompletion;                  // 0x005C(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FActionChanceOfCompletion              UseItemChanceOfCompletion;                         // 0x0064(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FActionChanceOfCompletion              DodgeProjectileChanceOfCompletion;                 // 0x006C(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FActionChanceOfCompletion              JumpAsPartOfDodgeChanceOfCompletion;               // 0x0074(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MaxFriendliesInSPSFireZoneForActivation;           // 0x007C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinEnemiesInSPSFireZoneForActivation;              // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1663[0x4];                                     // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBotDifficultyData">();
	}
	static class UMarinerBotDifficultyData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerBotDifficultyData>();
	}
};
static_assert(alignof(UMarinerBotDifficultyData) == 0x000008, "Wrong alignment on UMarinerBotDifficultyData");
static_assert(sizeof(UMarinerBotDifficultyData) == 0x000088, "Wrong size on UMarinerBotDifficultyData");
static_assert(offsetof(UMarinerBotDifficultyData, BehaviorTree) == 0x000030, "Member 'UMarinerBotDifficultyData::BehaviorTree' has a wrong offset!");
static_assert(offsetof(UMarinerBotDifficultyData, AccuracyDeviation) == 0x000038, "Member 'UMarinerBotDifficultyData::AccuracyDeviation' has a wrong offset!");
static_assert(offsetof(UMarinerBotDifficultyData, NeedHealthDamageThreshold) == 0x000048, "Member 'UMarinerBotDifficultyData::NeedHealthDamageThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerBotDifficultyData, FindHealthChanceOfCompletion) == 0x00004C, "Member 'UMarinerBotDifficultyData::FindHealthChanceOfCompletion' has a wrong offset!");
static_assert(offsetof(UMarinerBotDifficultyData, FindPlayerChanceOfCompletion) == 0x000054, "Member 'UMarinerBotDifficultyData::FindPlayerChanceOfCompletion' has a wrong offset!");
static_assert(offsetof(UMarinerBotDifficultyData, SpecialAbilityChanceOfCompletion) == 0x00005C, "Member 'UMarinerBotDifficultyData::SpecialAbilityChanceOfCompletion' has a wrong offset!");
static_assert(offsetof(UMarinerBotDifficultyData, UseItemChanceOfCompletion) == 0x000064, "Member 'UMarinerBotDifficultyData::UseItemChanceOfCompletion' has a wrong offset!");
static_assert(offsetof(UMarinerBotDifficultyData, DodgeProjectileChanceOfCompletion) == 0x00006C, "Member 'UMarinerBotDifficultyData::DodgeProjectileChanceOfCompletion' has a wrong offset!");
static_assert(offsetof(UMarinerBotDifficultyData, JumpAsPartOfDodgeChanceOfCompletion) == 0x000074, "Member 'UMarinerBotDifficultyData::JumpAsPartOfDodgeChanceOfCompletion' has a wrong offset!");
static_assert(offsetof(UMarinerBotDifficultyData, MaxFriendliesInSPSFireZoneForActivation) == 0x00007C, "Member 'UMarinerBotDifficultyData::MaxFriendliesInSPSFireZoneForActivation' has a wrong offset!");
static_assert(offsetof(UMarinerBotDifficultyData, MinEnemiesInSPSFireZoneForActivation) == 0x000080, "Member 'UMarinerBotDifficultyData::MinEnemiesInSPSFireZoneForActivation' has a wrong offset!");

// Class Mariner.MarinerBotTypesData
// 0x0050 (0x0080 - 0x0030)
class UMarinerBotTypesData final : public UDataAsset
{
public:
	TMap<TSoftClassPtr<class UClass>, struct FMarinerBotTypeInfo> BotTypeInformation;                                // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBotTypesData">();
	}
	static class UMarinerBotTypesData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerBotTypesData>();
	}
};
static_assert(alignof(UMarinerBotTypesData) == 0x000008, "Wrong alignment on UMarinerBotTypesData");
static_assert(sizeof(UMarinerBotTypesData) == 0x000080, "Wrong size on UMarinerBotTypesData");
static_assert(offsetof(UMarinerBotTypesData, BotTypeInformation) == 0x000030, "Member 'UMarinerBotTypesData::BotTypeInformation' has a wrong offset!");

// Class Mariner.MarinerDebugProfileDataAsset
// 0x02E0 (0x0310 - 0x0030)
class UMarinerDebugProfileDataAsset final : public UDataAsset
{
public:
	struct FMangoProfile                          Profile;                                           // 0x0030(0x02E0)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDebugProfileDataAsset">();
	}
	static class UMarinerDebugProfileDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDebugProfileDataAsset>();
	}
};
static_assert(alignof(UMarinerDebugProfileDataAsset) == 0x000008, "Wrong alignment on UMarinerDebugProfileDataAsset");
static_assert(sizeof(UMarinerDebugProfileDataAsset) == 0x000310, "Wrong size on UMarinerDebugProfileDataAsset");
static_assert(offsetof(UMarinerDebugProfileDataAsset, Profile) == 0x000030, "Member 'UMarinerDebugProfileDataAsset::Profile' has a wrong offset!");

// Class Mariner.MarinerBotManager
// 0x00D0 (0x02E8 - 0x0218)
class AMarinerBotManager final : public AActor
{
public:
	class UEnvQuery*                              DefaultMovementLocationQuery;                      // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEnvQuery*                              DefaultShootTargetQuery;                           // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FString>                         ModeObjectives;                                    // 0x0228(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class AMarinerAIController*>           ManagedControllers;                                // 0x0238(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, float>                      QueryParams;                                       // 0x0248(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FVector>             ContextParams;                                     // 0x0298(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	class FString BP_GetDesiredBotObjective(class AMarinerAIController* AIController, const class FString& CurrentObjective);
	class UEnvQuery* BP_GetMovementLocationQuery(class AMarinerAIController* AIController, const class FString& AssignedObjective);
	class UEnvQuery* BP_GetShootTargetQuery(class AMarinerAIController* AIController, const class FString& AssignedObjective, bool* bOutClearObjectiveEnemy);
	void BP_OnBotsInitialized(const TArray<class AMarinerAIController*>& InitializedBots);
	class UEnvQuery* GetMovementLocationQuery(class AMarinerAIController* AIController);
	class UEnvQuery* GetShootTargetQuery(class AMarinerAIController* AIController, bool* bOutClearObjectiveEnemy);
	void UpdateAllBotObjectives();
	void UpdateDesiredBotObjective(class AMarinerAIController* AIController);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBotManager">();
	}
	static class AMarinerBotManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerBotManager>();
	}
};
static_assert(alignof(AMarinerBotManager) == 0x000008, "Wrong alignment on AMarinerBotManager");
static_assert(sizeof(AMarinerBotManager) == 0x0002E8, "Wrong size on AMarinerBotManager");
static_assert(offsetof(AMarinerBotManager, DefaultMovementLocationQuery) == 0x000218, "Member 'AMarinerBotManager::DefaultMovementLocationQuery' has a wrong offset!");
static_assert(offsetof(AMarinerBotManager, DefaultShootTargetQuery) == 0x000220, "Member 'AMarinerBotManager::DefaultShootTargetQuery' has a wrong offset!");
static_assert(offsetof(AMarinerBotManager, ModeObjectives) == 0x000228, "Member 'AMarinerBotManager::ModeObjectives' has a wrong offset!");
static_assert(offsetof(AMarinerBotManager, ManagedControllers) == 0x000238, "Member 'AMarinerBotManager::ManagedControllers' has a wrong offset!");
static_assert(offsetof(AMarinerBotManager, QueryParams) == 0x000248, "Member 'AMarinerBotManager::QueryParams' has a wrong offset!");
static_assert(offsetof(AMarinerBotManager, ContextParams) == 0x000298, "Member 'AMarinerBotManager::ContextParams' has a wrong offset!");

// Class Mariner.MarinerBotNameOverrides
// 0x0010 (0x0040 - 0x0030)
class UMarinerBotNameOverrides final : public UDataAsset
{
public:
	TArray<class FString>                         UniqueBotNames;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBotNameOverrides">();
	}
	static class UMarinerBotNameOverrides* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerBotNameOverrides>();
	}
};
static_assert(alignof(UMarinerBotNameOverrides) == 0x000008, "Wrong alignment on UMarinerBotNameOverrides");
static_assert(sizeof(UMarinerBotNameOverrides) == 0x000040, "Wrong size on UMarinerBotNameOverrides");
static_assert(offsetof(UMarinerBotNameOverrides, UniqueBotNames) == 0x000030, "Member 'UMarinerBotNameOverrides::UniqueBotNames' has a wrong offset!");

// Class Mariner.MarinerDiverWaterFormAnimInstance
// 0x0000 (0x0270 - 0x0270)
class UMarinerDiverWaterFormAnimInstance final : public UMarinerAnimInstance
{
public:
	void CalculateBoneIK(struct FVector& BoneLocation, struct FRotator& BoneRotation, const struct FRotator& RootRotation, class FName BoneName, const TArray<EObjectTypeQuery>& ObjectTypes, const class USkeletalMeshComponent* SkeletalMesh, float TraceLength, float NormalOffset, float RotationSmoothing, float PositionSmoothing, float DeltaTime, bool FlipTrace, bool IgnoreSmoothing, bool SkipTrace, const struct FVector& Velocity, struct FHitResult& CachedHitResult);
	void CalculateRootIK(struct FRotator& RootRotation, class FName BoneName, const TArray<EObjectTypeQuery>& ObjectTypes, const class USkeletalMeshComponent* SkeletalMesh, float TraceLength, float RotationSmoothing, float DeltaTime, bool IgnoreSmoothing, bool SkipTrace, struct FHitResult& CachedHitResult);
	void CalculateTailIK(struct FVector& BoneLocation, struct FRotator& BoneRotation, const struct FRotator& RootRotation, class FName BoneName, const TArray<EObjectTypeQuery>& ObjectTypes, const class USkeletalMeshComponent* SkeletalMesh, float TraceLength, float NormalOffset, float RotationSmoothing, float PositionSmoothing, float DeltaTime, bool IgnoreSmoothing, bool SkipTrace, const struct FVector& Velocity, struct FHitResult& CachedHitResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDiverWaterFormAnimInstance">();
	}
	static class UMarinerDiverWaterFormAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDiverWaterFormAnimInstance>();
	}
};
static_assert(alignof(UMarinerDiverWaterFormAnimInstance) == 0x000010, "Wrong alignment on UMarinerDiverWaterFormAnimInstance");
static_assert(sizeof(UMarinerDiverWaterFormAnimInstance) == 0x000270, "Wrong size on UMarinerDiverWaterFormAnimInstance");

// Class Mariner.MarinerBoxArenaBoundary
// 0x0010 (0x0298 - 0x0288)
class AMarinerBoxArenaBoundary final : public AMarinerArenaBoundary
{
public:
	struct FVector                                KnockoutBoxExtents;                                // 0x0288(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_166E[0x4];                                     // 0x0294(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBoxArenaBoundary">();
	}
	static class AMarinerBoxArenaBoundary* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerBoxArenaBoundary>();
	}
};
static_assert(alignof(AMarinerBoxArenaBoundary) == 0x000008, "Wrong alignment on AMarinerBoxArenaBoundary");
static_assert(sizeof(AMarinerBoxArenaBoundary) == 0x000298, "Wrong size on AMarinerBoxArenaBoundary");
static_assert(offsetof(AMarinerBoxArenaBoundary, KnockoutBoxExtents) == 0x000288, "Member 'AMarinerBoxArenaBoundary::KnockoutBoxExtents' has a wrong offset!");

// Class Mariner.MarinerBoxComponent
// 0x0000 (0x0400 - 0x0400)
class UMarinerBoxComponent final : public UBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerBoxComponent">();
	}
	static class UMarinerBoxComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerBoxComponent>();
	}
};
static_assert(alignof(UMarinerBoxComponent) == 0x000010, "Wrong alignment on UMarinerBoxComponent");
static_assert(sizeof(UMarinerBoxComponent) == 0x000400, "Wrong size on UMarinerBoxComponent");

// Class Mariner.MarinerButton
// 0x05F0 (0x0A18 - 0x0428)
class UMarinerButton final : public UButton
{
public:
	uint8                                         Pad_166F[0x8];                                     // 0x0428(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          OnClickedAudioEvent;                               // 0x0430(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerPlatformText                   DisplayText;                                       // 0x0438(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerTextWidgetStyle>    DefaultTextStyle;                                  // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerTextWidgetStyle>    HoveredTextStyle;                                  // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextJustify                                  TextJustification;                                 // 0x04C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            TextVerticalAlignment;                             // 0x04C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1670[0x2];                                     // 0x04C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                TextPadding;                                       // 0x04C4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1671[0x4];                                     // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerButtonWidgetStyle>  ButtonWidgetStyle;                                 // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1672[0x538];                                   // 0x04E0(0x0538)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearDefaultTextStyleOverride();
	void ClearHoveredTextStyleOverride();
	void SetDefaultTextStyleOverride(const struct FTextBlockStyle& TextStyle);
	void SetHoveredTextStyleOverride(const struct FTextBlockStyle& TextStyle);
	void SetPlatformText(const struct FMarinerPlatformText& NewText);
	void SetText(const class FText& NewText);

	const TSubclassOf<class UMarinerTextWidgetStyle> GetDefaultTextStyle() const;
	const TSubclassOf<class UMarinerTextWidgetStyle> GetHoveredTextStyle() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerButton">();
	}
	static class UMarinerButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerButton>();
	}
};
static_assert(alignof(UMarinerButton) == 0x000008, "Wrong alignment on UMarinerButton");
static_assert(sizeof(UMarinerButton) == 0x000A18, "Wrong size on UMarinerButton");
static_assert(offsetof(UMarinerButton, OnClickedAudioEvent) == 0x000430, "Member 'UMarinerButton::OnClickedAudioEvent' has a wrong offset!");
static_assert(offsetof(UMarinerButton, DisplayText) == 0x000438, "Member 'UMarinerButton::DisplayText' has a wrong offset!");
static_assert(offsetof(UMarinerButton, DefaultTextStyle) == 0x0004B0, "Member 'UMarinerButton::DefaultTextStyle' has a wrong offset!");
static_assert(offsetof(UMarinerButton, HoveredTextStyle) == 0x0004B8, "Member 'UMarinerButton::HoveredTextStyle' has a wrong offset!");
static_assert(offsetof(UMarinerButton, TextJustification) == 0x0004C0, "Member 'UMarinerButton::TextJustification' has a wrong offset!");
static_assert(offsetof(UMarinerButton, TextVerticalAlignment) == 0x0004C1, "Member 'UMarinerButton::TextVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UMarinerButton, TextPadding) == 0x0004C4, "Member 'UMarinerButton::TextPadding' has a wrong offset!");
static_assert(offsetof(UMarinerButton, ButtonWidgetStyle) == 0x0004D8, "Member 'UMarinerButton::ButtonWidgetStyle' has a wrong offset!");

// Class Mariner.MarinerPagedVerticalBox
// 0x0048 (0x02F8 - 0x02B0)
class UMarinerPagedVerticalBox : public UMarinerUserWidget
{
public:
	uint8                                         Pad_1673[0x20];                                    // 0x02B0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumElementsForPage;                                // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerInputActions                          RightInputAction;                                  // 0x02D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerInputActions                          LeftInputAction;                                   // 0x02D5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1674[0x2];                                     // 0x02D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerVerticalBox*                    Bound_ContentVerticalBox;                          // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPageNavigationWidget*           Bound_PageNavigation;                              // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1675[0x10];                                    // 0x02E8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPagedVerticalBox">();
	}
	static class UMarinerPagedVerticalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPagedVerticalBox>();
	}
};
static_assert(alignof(UMarinerPagedVerticalBox) == 0x000008, "Wrong alignment on UMarinerPagedVerticalBox");
static_assert(sizeof(UMarinerPagedVerticalBox) == 0x0002F8, "Wrong size on UMarinerPagedVerticalBox");
static_assert(offsetof(UMarinerPagedVerticalBox, NumElementsForPage) == 0x0002D0, "Member 'UMarinerPagedVerticalBox::NumElementsForPage' has a wrong offset!");
static_assert(offsetof(UMarinerPagedVerticalBox, RightInputAction) == 0x0002D4, "Member 'UMarinerPagedVerticalBox::RightInputAction' has a wrong offset!");
static_assert(offsetof(UMarinerPagedVerticalBox, LeftInputAction) == 0x0002D5, "Member 'UMarinerPagedVerticalBox::LeftInputAction' has a wrong offset!");
static_assert(offsetof(UMarinerPagedVerticalBox, Bound_ContentVerticalBox) == 0x0002D8, "Member 'UMarinerPagedVerticalBox::Bound_ContentVerticalBox' has a wrong offset!");
static_assert(offsetof(UMarinerPagedVerticalBox, Bound_PageNavigation) == 0x0002E0, "Member 'UMarinerPagedVerticalBox::Bound_PageNavigation' has a wrong offset!");

// Class Mariner.MarinerButtonTimerWidget
// 0x0040 (0x0270 - 0x0230)
class UMarinerButtonTimerWidget : public UUserWidget
{
public:
	bool                                          bAllowTimerBackground;                             // 0x0230(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1676[0x7];                                     // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           Bound_TimerFrame;                                  // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_TimerBackground;                             // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_RemainingTime;                               // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1677[0x20];                                    // 0x0250(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEndTime(const struct FDateTime& InEndTime, TDelegate<void()> InTimerExpired);

	bool IsExpired() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerButtonTimerWidget">();
	}
	static class UMarinerButtonTimerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerButtonTimerWidget>();
	}
};
static_assert(alignof(UMarinerButtonTimerWidget) == 0x000008, "Wrong alignment on UMarinerButtonTimerWidget");
static_assert(sizeof(UMarinerButtonTimerWidget) == 0x000270, "Wrong size on UMarinerButtonTimerWidget");
static_assert(offsetof(UMarinerButtonTimerWidget, bAllowTimerBackground) == 0x000230, "Member 'UMarinerButtonTimerWidget::bAllowTimerBackground' has a wrong offset!");
static_assert(offsetof(UMarinerButtonTimerWidget, Bound_TimerFrame) == 0x000238, "Member 'UMarinerButtonTimerWidget::Bound_TimerFrame' has a wrong offset!");
static_assert(offsetof(UMarinerButtonTimerWidget, Bound_TimerBackground) == 0x000240, "Member 'UMarinerButtonTimerWidget::Bound_TimerBackground' has a wrong offset!");
static_assert(offsetof(UMarinerButtonTimerWidget, Bound_RemainingTime) == 0x000248, "Member 'UMarinerButtonTimerWidget::Bound_RemainingTime' has a wrong offset!");

// Class Mariner.MarinerButtonWidgetStyle
// 0x0000 (0x02A8 - 0x02A8)
class UMarinerButtonWidgetStyle : public UButtonWidgetStyle
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerButtonWidgetStyle">();
	}
	static class UMarinerButtonWidgetStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerButtonWidgetStyle>();
	}
};
static_assert(alignof(UMarinerButtonWidgetStyle) == 0x000008, "Wrong alignment on UMarinerButtonWidgetStyle");
static_assert(sizeof(UMarinerButtonWidgetStyle) == 0x0002A8, "Wrong size on UMarinerButtonWidgetStyle");

// Class Mariner.MarinerCameraGlobals
// 0x00A0 (0x00D0 - 0x0030)
class UMarinerCameraGlobals final : public UDataAsset
{
public:
	struct FGameplayTagContainer                  CameraShakeIgnoreTags;                             // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FCameraShakeParameter>          DamageGivenShakes;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FCameraShakeParameter>          DamageTakenShakes;                                 // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UCameraShake>               MegablastedShake;                                  // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCameraShake>               KnockedOutShake;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class AMarinerCameraLensEffect>, int32> PreallocatedCameraLensEffects;                     // 0x0080(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	bool CanApplyCameraShake(class APawn* Pawn);

	const TSubclassOf<class UCameraShake> GetDamageGivenCameraShake(float DamageGiven) const;
	const TSubclassOf<class UCameraShake> GetDamageTakenCameraShake(float DamageTaken) const;
	const TSubclassOf<class UCameraShake> GetKnockedOutCameraShake() const;
	const TSubclassOf<class UCameraShake> GetMegablastedCameraShake() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCameraGlobals">();
	}
	static class UMarinerCameraGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCameraGlobals>();
	}
};
static_assert(alignof(UMarinerCameraGlobals) == 0x000008, "Wrong alignment on UMarinerCameraGlobals");
static_assert(sizeof(UMarinerCameraGlobals) == 0x0000D0, "Wrong size on UMarinerCameraGlobals");
static_assert(offsetof(UMarinerCameraGlobals, CameraShakeIgnoreTags) == 0x000030, "Member 'UMarinerCameraGlobals::CameraShakeIgnoreTags' has a wrong offset!");
static_assert(offsetof(UMarinerCameraGlobals, DamageGivenShakes) == 0x000050, "Member 'UMarinerCameraGlobals::DamageGivenShakes' has a wrong offset!");
static_assert(offsetof(UMarinerCameraGlobals, DamageTakenShakes) == 0x000060, "Member 'UMarinerCameraGlobals::DamageTakenShakes' has a wrong offset!");
static_assert(offsetof(UMarinerCameraGlobals, MegablastedShake) == 0x000070, "Member 'UMarinerCameraGlobals::MegablastedShake' has a wrong offset!");
static_assert(offsetof(UMarinerCameraGlobals, KnockedOutShake) == 0x000078, "Member 'UMarinerCameraGlobals::KnockedOutShake' has a wrong offset!");
static_assert(offsetof(UMarinerCameraGlobals, PreallocatedCameraLensEffects) == 0x000080, "Member 'UMarinerCameraGlobals::PreallocatedCameraLensEffects' has a wrong offset!");

// Class Mariner.MarinerCameraLensEffect
// 0x0000 (0x02D0 - 0x02D0)
class AMarinerCameraLensEffect : public AEmitterCameraLensEffectBase
{
public:
	void BP_OnDisabled();
	void BP_OnEnabled();
	void Disable();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCameraLensEffect">();
	}
	static class AMarinerCameraLensEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerCameraLensEffect>();
	}
};
static_assert(alignof(AMarinerCameraLensEffect) == 0x000010, "Wrong alignment on AMarinerCameraLensEffect");
static_assert(sizeof(AMarinerCameraLensEffect) == 0x0002D0, "Wrong size on AMarinerCameraLensEffect");

// Class Mariner.MarinerEquipItemToProfile
// 0x00B0 (0x00E0 - 0x0030)
class UMarinerEquipItemToProfile final : public UBlueprintAsyncActionBase
{
public:
	UMulticastInlineDelegateProperty_             SentToServer;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             SucceededOnServer;                                 // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             WorldNoLongerValid;                                // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             ProfileUpdateComplete;                             // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             FailedOnServer;                                    // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             FailedBeforeSending;                               // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UMarinerCMSItemDataAsset*>       ItemsToEquip;                                      // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_167B[0x28];                                    // 0x00A0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerPlayableCharacter*              PlayableCharacter;                                 // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMangoItemType                                ItemToUnEquipType;                                 // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_167C[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UObject>                 WorldContextObject;                                // 0x00D4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_167D[0x4];                                     // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerEquipItemToProfile* EquipItemToProfile(const class UObject* Param_WorldContextObject, const TArray<class UMarinerCMSItemDataAsset*>& Param_ItemsToEquip, const class UMarinerPlayableCharacter* Param_PlayableCharacter, bool bRanked);
	static class UMarinerEquipItemToProfile* UnequipItemToProfile(const class UObject* Param_WorldContextObject, const class FString& CharacterId, const EMangoItemType& ItemType, bool bRanked);

	void OnProfileUpdated();
	void OnProfileUpdateFailed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerEquipItemToProfile">();
	}
	static class UMarinerEquipItemToProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerEquipItemToProfile>();
	}
};
static_assert(alignof(UMarinerEquipItemToProfile) == 0x000008, "Wrong alignment on UMarinerEquipItemToProfile");
static_assert(sizeof(UMarinerEquipItemToProfile) == 0x0000E0, "Wrong size on UMarinerEquipItemToProfile");
static_assert(offsetof(UMarinerEquipItemToProfile, SentToServer) == 0x000030, "Member 'UMarinerEquipItemToProfile::SentToServer' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToProfile, SucceededOnServer) == 0x000040, "Member 'UMarinerEquipItemToProfile::SucceededOnServer' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToProfile, WorldNoLongerValid) == 0x000050, "Member 'UMarinerEquipItemToProfile::WorldNoLongerValid' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToProfile, ProfileUpdateComplete) == 0x000060, "Member 'UMarinerEquipItemToProfile::ProfileUpdateComplete' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToProfile, FailedOnServer) == 0x000070, "Member 'UMarinerEquipItemToProfile::FailedOnServer' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToProfile, FailedBeforeSending) == 0x000080, "Member 'UMarinerEquipItemToProfile::FailedBeforeSending' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToProfile, ItemsToEquip) == 0x000090, "Member 'UMarinerEquipItemToProfile::ItemsToEquip' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToProfile, PlayableCharacter) == 0x0000C8, "Member 'UMarinerEquipItemToProfile::PlayableCharacter' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToProfile, ItemToUnEquipType) == 0x0000D0, "Member 'UMarinerEquipItemToProfile::ItemToUnEquipType' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToProfile, WorldContextObject) == 0x0000D4, "Member 'UMarinerEquipItemToProfile::WorldContextObject' has a wrong offset!");

// Class Mariner.MarinerCapsuleArenaBoundary
// 0x0008 (0x0290 - 0x0288)
class AMarinerCapsuleArenaBoundary final : public AMarinerArenaBoundary
{
public:
	float                                         KnockoutVolumeHeight;                              // 0x0288(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KnockoutVolumeRadius;                              // 0x028C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCapsuleArenaBoundary">();
	}
	static class AMarinerCapsuleArenaBoundary* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerCapsuleArenaBoundary>();
	}
};
static_assert(alignof(AMarinerCapsuleArenaBoundary) == 0x000008, "Wrong alignment on AMarinerCapsuleArenaBoundary");
static_assert(sizeof(AMarinerCapsuleArenaBoundary) == 0x000290, "Wrong size on AMarinerCapsuleArenaBoundary");
static_assert(offsetof(AMarinerCapsuleArenaBoundary, KnockoutVolumeHeight) == 0x000288, "Member 'AMarinerCapsuleArenaBoundary::KnockoutVolumeHeight' has a wrong offset!");
static_assert(offsetof(AMarinerCapsuleArenaBoundary, KnockoutVolumeRadius) == 0x00028C, "Member 'AMarinerCapsuleArenaBoundary::KnockoutVolumeRadius' has a wrong offset!");

// Class Mariner.MarinerFastCollisionCollection
// 0x0010 (0x0038 - 0x0028)
class UMarinerFastCollisionCollection final : public UObject
{
public:
	TArray<class UMarinerFastCollisionComponent*> Collection;                                        // 0x0028(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFastCollisionCollection">();
	}
	static class UMarinerFastCollisionCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerFastCollisionCollection>();
	}
};
static_assert(alignof(UMarinerFastCollisionCollection) == 0x000008, "Wrong alignment on UMarinerFastCollisionCollection");
static_assert(sizeof(UMarinerFastCollisionCollection) == 0x000038, "Wrong size on UMarinerFastCollisionCollection");
static_assert(offsetof(UMarinerFastCollisionCollection, Collection) == 0x000028, "Member 'UMarinerFastCollisionCollection::Collection' has a wrong offset!");

// Class Mariner.MarinerCapsuleComponent
// 0x0010 (0x0410 - 0x0400)
class UMarinerCapsuleComponent final : public UCapsuleComponent
{
public:
	class UMaterialInterface*                     MeshMaterial;                                      // 0x03F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRenderWireFrame;                                  // 0x0400(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRenderEndCaps;                                    // 0x0401(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1680[0xE];                                     // 0x0402(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetScaledCapsulePoles(struct FVector* OutTopPole, struct FVector* OutBottomPole) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCapsuleComponent">();
	}
	static class UMarinerCapsuleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCapsuleComponent>();
	}
};
static_assert(alignof(UMarinerCapsuleComponent) == 0x000010, "Wrong alignment on UMarinerCapsuleComponent");
static_assert(sizeof(UMarinerCapsuleComponent) == 0x000410, "Wrong size on UMarinerCapsuleComponent");
static_assert(offsetof(UMarinerCapsuleComponent, MeshMaterial) == 0x0003F8, "Member 'UMarinerCapsuleComponent::MeshMaterial' has a wrong offset!");
static_assert(offsetof(UMarinerCapsuleComponent, bRenderWireFrame) == 0x000400, "Member 'UMarinerCapsuleComponent::bRenderWireFrame' has a wrong offset!");
static_assert(offsetof(UMarinerCapsuleComponent, bRenderEndCaps) == 0x000401, "Member 'UMarinerCapsuleComponent::bRenderEndCaps' has a wrong offset!");

// Class Mariner.MarinerFastArenaKOCollider
// 0x0010 (0x0228 - 0x0218)
class AMarinerFastArenaKOCollider : public AActor
{
public:
	bool                                          bInvertCollider;                                   // 0x0218(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1681[0x7];                                     // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerFastArenaBounds*                ArenaBounds;                                       // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFastArenaKOCollider">();
	}
	static class AMarinerFastArenaKOCollider* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerFastArenaKOCollider>();
	}
};
static_assert(alignof(AMarinerFastArenaKOCollider) == 0x000008, "Wrong alignment on AMarinerFastArenaKOCollider");
static_assert(sizeof(AMarinerFastArenaKOCollider) == 0x000228, "Wrong size on AMarinerFastArenaKOCollider");
static_assert(offsetof(AMarinerFastArenaKOCollider, bInvertCollider) == 0x000218, "Member 'AMarinerFastArenaKOCollider::bInvertCollider' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaKOCollider, ArenaBounds) == 0x000220, "Member 'AMarinerFastArenaKOCollider::ArenaBounds' has a wrong offset!");

// Class Mariner.MarinerFastArenaKOPlane
// 0x0008 (0x0230 - 0x0228)
class AMarinerFastArenaKOPlane final : public AMarinerFastArenaKOCollider
{
public:
	struct FVector2D                              PlaneExtents;                                      // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFastArenaKOPlane">();
	}
	static class AMarinerFastArenaKOPlane* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerFastArenaKOPlane>();
	}
};
static_assert(alignof(AMarinerFastArenaKOPlane) == 0x000008, "Wrong alignment on AMarinerFastArenaKOPlane");
static_assert(sizeof(AMarinerFastArenaKOPlane) == 0x000230, "Wrong size on AMarinerFastArenaKOPlane");
static_assert(offsetof(AMarinerFastArenaKOPlane, PlaneExtents) == 0x000228, "Member 'AMarinerFastArenaKOPlane::PlaneExtents' has a wrong offset!");

// Class Mariner.MarinerCaptureVolume
// 0x0008 (0x0228 - 0x0220)
class UMarinerCaptureVolume final : public UMarinerCaptureVolumeBase
{
public:
	float                                         CapturePercentage;                                 // 0x0220(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1682[0x4];                                     // 0x0224(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_CapturePercentage();

	float GetCapturePercentage() const;
	bool IsCaptured() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCaptureVolume">();
	}
	static class UMarinerCaptureVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCaptureVolume>();
	}
};
static_assert(alignof(UMarinerCaptureVolume) == 0x000008, "Wrong alignment on UMarinerCaptureVolume");
static_assert(sizeof(UMarinerCaptureVolume) == 0x000228, "Wrong size on UMarinerCaptureVolume");
static_assert(offsetof(UMarinerCaptureVolume, CapturePercentage) == 0x000220, "Member 'UMarinerCaptureVolume::CapturePercentage' has a wrong offset!");

// Class Mariner.MarinerMeshSwapJob
// 0x0030 (0x0058 - 0x0028)
class UMarinerMeshSwapJob final : public UObject
{
public:
	uint8                                         Pad_1683[0x30];                                    // 0x0028(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMeshSwapJob">();
	}
	static class UMarinerMeshSwapJob* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMeshSwapJob>();
	}
};
static_assert(alignof(UMarinerMeshSwapJob) == 0x000008, "Wrong alignment on UMarinerMeshSwapJob");
static_assert(sizeof(UMarinerMeshSwapJob) == 0x000058, "Wrong size on UMarinerMeshSwapJob");

// Class Mariner.MarinerEquipEmotesToProfile
// 0x00A8 (0x00D8 - 0x0030)
class UMarinerEquipEmotesToProfile final : public UBlueprintAsyncActionBase
{
public:
	UMulticastInlineDelegateProperty_             SentToServer;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             SucceededOnServer;                                 // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             WorldNoLongerValid;                                // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             ProfileUpdateComplete;                             // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             FailedOnServer;                                    // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             FailedBeforeSending;                               // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1684[0x38];                                    // 0x0090(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerPlayableCharacter*              PlayableCharacter;                                 // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UObject>                 WorldContextObject;                                // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UMarinerEquipEmotesToProfile* EquipChatEmotesToProfile(const class UObject* Param_WorldContextObject, const TArray<struct FMangoEquippedEmoteWithSlot>& EmotesToEquip, const class UMarinerPlayableCharacter* Param_PlayableCharacter);
	static class UMarinerEquipEmotesToProfile* EquipPregameEmotesToProfile(const class UObject* Param_WorldContextObject, const TArray<struct FMangoEquippedEmoteWithSlot>& EmotesToEquip, const class UMarinerPlayableCharacter* Param_PlayableCharacter);
	static class UMarinerEquipEmotesToProfile* EquipVictoryEmoteToProfile(const class UObject* Param_WorldContextObject, struct FMangoEquippedEmote* EmoteToEquip, const class UMarinerPlayableCharacter* Param_PlayableCharacter);

	void OnProfileUpdated();
	void OnProfileUpdateFailed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerEquipEmotesToProfile">();
	}
	static class UMarinerEquipEmotesToProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerEquipEmotesToProfile>();
	}
};
static_assert(alignof(UMarinerEquipEmotesToProfile) == 0x000008, "Wrong alignment on UMarinerEquipEmotesToProfile");
static_assert(sizeof(UMarinerEquipEmotesToProfile) == 0x0000D8, "Wrong size on UMarinerEquipEmotesToProfile");
static_assert(offsetof(UMarinerEquipEmotesToProfile, SentToServer) == 0x000030, "Member 'UMarinerEquipEmotesToProfile::SentToServer' has a wrong offset!");
static_assert(offsetof(UMarinerEquipEmotesToProfile, SucceededOnServer) == 0x000040, "Member 'UMarinerEquipEmotesToProfile::SucceededOnServer' has a wrong offset!");
static_assert(offsetof(UMarinerEquipEmotesToProfile, WorldNoLongerValid) == 0x000050, "Member 'UMarinerEquipEmotesToProfile::WorldNoLongerValid' has a wrong offset!");
static_assert(offsetof(UMarinerEquipEmotesToProfile, ProfileUpdateComplete) == 0x000060, "Member 'UMarinerEquipEmotesToProfile::ProfileUpdateComplete' has a wrong offset!");
static_assert(offsetof(UMarinerEquipEmotesToProfile, FailedOnServer) == 0x000070, "Member 'UMarinerEquipEmotesToProfile::FailedOnServer' has a wrong offset!");
static_assert(offsetof(UMarinerEquipEmotesToProfile, FailedBeforeSending) == 0x000080, "Member 'UMarinerEquipEmotesToProfile::FailedBeforeSending' has a wrong offset!");
static_assert(offsetof(UMarinerEquipEmotesToProfile, PlayableCharacter) == 0x0000C8, "Member 'UMarinerEquipEmotesToProfile::PlayableCharacter' has a wrong offset!");
static_assert(offsetof(UMarinerEquipEmotesToProfile, WorldContextObject) == 0x0000D0, "Member 'UMarinerEquipEmotesToProfile::WorldContextObject' has a wrong offset!");

// Class Mariner.MarinerChangeableMaterialInterface
// 0x0000 (0x0028 - 0x0028)
class IMarinerChangeableMaterialInterface final : public IInterface
{
public:
	TMap<int32, struct FMarinerMatSwapData> GetOriginalMaterials();
	void RevertMaterial(const struct FMarinerMatSwapJob& RevertJob);
	void RevertMaterials(TArray<struct FMarinerMatSwapJob>* InRevertJobs);
	void RevertMesh(EMarinerChangeMeshEnum MeshTypeToRevert);
	void RevertMeshes(const TArray<EMarinerChangeMeshEnum>& MeshTypesToRevert);
	void SwapMaterial(const struct FMarinerMatSwapJob& MatSwap);
	void SwapMaterials(TArray<struct FMarinerMatSwapJob>* InMatSwaps);
	void SwapMesh(class UMarinerMeshSwapJob* MeshSwap);
	void SwapMeshes(TArray<class UMarinerMeshSwapJob*>* InMeshSwaps);
	void UpdateMaterial(const struct FMarinerMatSwapJob& UpdateMatJob, bool bRevertImmediately);
	void UpdateMaterials(TArray<struct FMarinerMatSwapJob>* InUpdateMatJobs, bool bRevertImmediately);
	bool UsingOriginalMaterial(EMarinerChangeMaterialFlags MaterialType);

	bool HasPendingMeshSwapForMeshType(EMarinerChangeMeshEnum MeshType) const;
	bool IsUsingOriginalMesh(EMarinerChangeMeshEnum MeshType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerChangeableMaterialInterface">();
	}
	static class IMarinerChangeableMaterialInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarinerChangeableMaterialInterface>();
	}
};
static_assert(alignof(IMarinerChangeableMaterialInterface) == 0x000008, "Wrong alignment on IMarinerChangeableMaterialInterface");
static_assert(sizeof(IMarinerChangeableMaterialInterface) == 0x000028, "Wrong size on IMarinerChangeableMaterialInterface");

// Class Mariner.MarinerFastCollisionComponent
// 0x0038 (0x00E8 - 0x00B0)
class UMarinerFastCollisionComponent : public UActorComponent
{
public:
	struct FComponentReference                    ParentComponentRef;                                // 0x00B0(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	class UPrimitiveComponent*                    ParentComponent;                                   // 0x00D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanCollideWithArenaBounds;                        // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         CollisionCollection;                               // 0x00E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         CollectionToHit;                                   // 0x00E2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisableCollision;                                 // 0x00E3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1687[0x4];                                     // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckIsColliding(struct FVector* OutCollisionPoint, struct FVector* OutCollisionNormal, class UMarinerFastCollisionComponent** OutHitCollider);
	void DisableCollision(bool DisableParentCollision);
	void EnableCollision(bool EnableParentCollision);
	void SetCanCollideWithArenaBounds(bool bCanCollide);

	bool GetCanCollideWithArenaBounds() const;
	bool IsCollisionDisabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFastCollisionComponent">();
	}
	static class UMarinerFastCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerFastCollisionComponent>();
	}
};
static_assert(alignof(UMarinerFastCollisionComponent) == 0x000008, "Wrong alignment on UMarinerFastCollisionComponent");
static_assert(sizeof(UMarinerFastCollisionComponent) == 0x0000E8, "Wrong size on UMarinerFastCollisionComponent");
static_assert(offsetof(UMarinerFastCollisionComponent, ParentComponentRef) == 0x0000B0, "Member 'UMarinerFastCollisionComponent::ParentComponentRef' has a wrong offset!");
static_assert(offsetof(UMarinerFastCollisionComponent, ParentComponent) == 0x0000D8, "Member 'UMarinerFastCollisionComponent::ParentComponent' has a wrong offset!");
static_assert(offsetof(UMarinerFastCollisionComponent, bCanCollideWithArenaBounds) == 0x0000E0, "Member 'UMarinerFastCollisionComponent::bCanCollideWithArenaBounds' has a wrong offset!");
static_assert(offsetof(UMarinerFastCollisionComponent, CollisionCollection) == 0x0000E1, "Member 'UMarinerFastCollisionComponent::CollisionCollection' has a wrong offset!");
static_assert(offsetof(UMarinerFastCollisionComponent, CollectionToHit) == 0x0000E2, "Member 'UMarinerFastCollisionComponent::CollectionToHit' has a wrong offset!");
static_assert(offsetof(UMarinerFastCollisionComponent, bDisableCollision) == 0x0000E3, "Member 'UMarinerFastCollisionComponent::bDisableCollision' has a wrong offset!");

// Class Mariner.MarinerFastBoxComponent
// 0x0000 (0x00E8 - 0x00E8)
class UMarinerFastBoxComponent final : public UMarinerFastCollisionComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFastBoxComponent">();
	}
	static class UMarinerFastBoxComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerFastBoxComponent>();
	}
};
static_assert(alignof(UMarinerFastBoxComponent) == 0x000008, "Wrong alignment on UMarinerFastBoxComponent");
static_assert(sizeof(UMarinerFastBoxComponent) == 0x0000E8, "Wrong size on UMarinerFastBoxComponent");

// Class Mariner.MarinerCharacter
// 0x1A20 (0x2060 - 0x0640)
class AMarinerCharacter : public ACharacter
{
public:
	uint8                                         Pad_1689[0x88];                                    // 0x0640(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            InvincibleModeEffect;                              // 0x06C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            TurboModeEffect;                                   // 0x06D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    SimulatedLatestMegablastBounceLocation;            // 0x06D8(0x000C)(Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKZModifier;                                       // 0x06E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKFootAlphaMaxValue;                               // 0x06E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168A[0x14];                                    // 0x06EC(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnAuthoritativeDamageCausedDelegate;               // 0x0700(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnArenaCurrentStateChanged;                        // 0x0710(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnInputSupressionRemoved;                          // 0x0720(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnEnteredRealityDelegate;                          // 0x0730(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPostBeginPlayDelegate;                           // 0x0740(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCharacterDisabledDelegate;                       // 0x0750(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPlayHitDelegate;                                 // 0x0760(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnReticleTargetChangedDelegate;                    // 0x0770(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnHomingTargetAcquiredDelegate;                    // 0x0780(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnHomingTargetLostDelegate;                        // 0x0790(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnHomingTargetSwappedDelegate;                     // 0x07A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             AirJumpDelegate;                                   // 0x07B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 Mesh1P;                                            // 0x07C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseNewWeaponMeshSystem;                            // 0x07C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168B[0x7];                                     // 0x07C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 WeaponMesh1P;                                      // 0x07D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 WeaponMesh3P;                                      // 0x07D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerFastCapsuleComponent*           FastCapsuleCollider;                               // 0x07E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerDamageableComponent*            DamageableComponent;                               // 0x07E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerItemInteractionComponent*       ItemInteractionComponent;                          // 0x07F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerAchievement                           CharacterKnockoutAchievement;                      // 0x07F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerAchievement                           CharacterWinsAchievement;                          // 0x07F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168C[0x6];                                     // 0x07FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          DangerZoneLoopBeginSFX;                            // 0x0800(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          DangerZoneLoopEndSFX;                              // 0x0808(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          CharacterMegaBlastBounceSFX;                       // 0x0810(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          MegaBlastThresholdOpponentSFX;                     // 0x0818(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          HitTickSFX;                                        // 0x0820(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          DamageTakenSFX;                                    // 0x0828(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ImpulseSFXClamps;                                  // 0x0830(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DamageSFXClamps;                                   // 0x0838(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168D[0x18];                                    // 0x0840(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnCharacterRecovered;                              // 0x0858(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnBlastedTrailToggled;                             // 0x0868(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMarinerMovementModeChanged;                      // 0x0878(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCharacterMovedToReturnRocketLaunchpad;           // 0x0888(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnKnockedOutAuthorityDelegate;                     // 0x0898(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnKnockedOutDelegate;                              // 0x08A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnKnockedOtherCharacterOutAuthorityDelegate;       // 0x08B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCharacterCameraPerspectiveChanged;               // 0x08C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToRemoveOnKnockout;                            // 0x08D8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  JumpSuppressionTags;                               // 0x08F8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  WASDSuppressionTags;                               // 0x0918(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAnyDamageIncoming;                               // 0x0938(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnGameplayTagRemovedDelegate;                      // 0x0948(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnGameplayTagAppliedDelegate;                      // 0x0958(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnSkinApplied;                                     // 0x0968(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPostSkinApplied;                                 // 0x0978(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnHomedStatusChangedDelegate;                      // 0x0988(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EMarinerRealityState                          CurrentRealityState;                               // 0x0998(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168E[0x17];                                    // 0x0999(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerCharacterMovement*              MarinerCharacterMovement;                          // 0x09B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastHitByTimeStamp;                                // 0x09B8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_168F[0x4];                                     // 0x09BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerSkinDataAsset*                  DefaultSkinData;                                   // 0x09C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerAbilitySkinMap*                 DefaultAbilitySkin;                                // 0x09C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerCueSkinMap*                     DefaultCueSkinMap;                                 // 0x09D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UAnimInstance>              DefaultAnimBP;                                     // 0x09D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> CurrentSkinCollection;                             // 0x09E0(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerSkinCollectionDataAsset*        LoadedSkinCollectionData;                          // 0x0A08(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerSkinDataAsset*                  LoadedSkinData;                                    // 0x0A10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerAbilitySkinMap*                 LoadedAbilitySkinCollection;                       // 0x0A18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerCueSkinMap*                     LoadedCueSkinMap;                                  // 0x0A20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UAnimInstance>              LoadedAnimBP;                                      // 0x0A28(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerPoolingCharacterData> PoolingData;                                       // 0x0A30(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1690[0x18];                                    // 0x0A38(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ComboCounterTimeout;                               // 0x0A50(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         JumpAudioCooldownTime;                             // 0x0A54(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         JumpFXOffsetZFromCapsuleBottom;                    // 0x0A58(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1691[0x4];                                     // 0x0A5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerGameplayAbilitySet*             AbilitySet;                                        // 0x0A60(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerAbilitySystemComponent*         AbilitySystemComponent;                            // 0x0A68(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  HomingPreventionTags;                              // 0x0A70(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UMarinerGameplayTagBundle>> DefaultGameplayTagBundlesToListenFor;              // 0x0A90(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_1692[0x20];                                    // 0x0AA0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ArenaReturnSuppressionTags;                        // 0x0AC0(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UMarinerMaterialsSwapManagerComponent*  MatSwapManager;                                    // 0x0AE0(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMarinerMeshSwapJob*>            MeshSwapJobArray;                                  // 0x0AE8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UAkComponent*                           AkAudioComponent;                                  // 0x0AF8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LeftFootstepBoneName;                              // 0x0B00(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RightFootstepBoneName;                             // 0x0B08(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerCharacterFootstepEffectSet     DefaultFootstepEffects;                            // 0x0B10(0x0020)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UMarinerParticleComponentPool*          LeftFootstepPool;                                  // 0x0B30(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerParticleComponentPool*          RightFootstepPool;                                 // 0x0B38(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EPhysicalSurface, struct FMarinerCharacterFootstepEffectSet> FootStepEffectsBySurfaceType;                      // 0x0B40(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           LandedGameplayTag;                                 // 0x0B90(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerSpringArmComponent*             ThirdPersonCameraArm;                              // 0x0B98(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraComponent*                       ThirdPersonCamera;                                 // 0x0BA0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1693[0xA8];                                    // 0x0BA8(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FMarinerCameraPerspective> PerspectiveMap;                                    // 0x0C50(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1694[0xCE0];                                   // 0x0CA0(0x0CE0)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeaponAttachPoint;                                 // 0x1980(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AMarinerWeapon>>     DefaultInventoryClasses;                           // 0x1988(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class AMarinerWeapon*>                 Inventory;                                         // 0x1998(0x0010)(Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class AMarinerWeapon*                         CurrentWeapon;                                     // 0x19A8(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerWeaponAttributes*               WeaponAttributes;                                  // 0x19B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnCharacterWeaponChanged;                          // 0x19B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerHUDWidget>          CustomHudWidget;                                   // 0x19C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerTakeHitInfo                    LastTakeHitInfo;                                   // 0x19D0(0x0128)(Net, Transient, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UParticleSystem*                        BlastedEffect;                                     // 0x1AF8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BlastedEffectThreshold;                            // 0x1B00(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1695[0x4];                                     // 0x1B04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitFeedbackFlashProgressRatio;                     // 0x1B08(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHitFeedbackFlashIsActive;                         // 0x1B0C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1696[0x3];                                     // 0x1B0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseHitFeedbackFlashTimeLength;                    // 0x1B10(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1697[0x4];                                     // 0x1B14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      HitFeedbackFlashColorCurve;                        // 0x1B18(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HitFeedbackFlashVectorMaterialParameterName;       // 0x1B20(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            HitFeedbackFlashScalarCurve;                       // 0x1B28(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HitFeedbackFlashScalarMaterialParameterName;       // 0x1B30(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMeshComponent*>                 MeshesToFlashHitFeedback;                          // 0x1B38(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1698[0x50];                                    // 0x1B48(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GrantAssistDurationValue;                          // 0x1B98(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1699[0xC];                                     // 0x1B9C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               PlayerLaunchedTrail;                               // 0x1BA8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        SimpleLaunchParticleFX;                            // 0x1BB0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerMegaBlastDataAsset*             LoadedMegaBlastTrail;                              // 0x1BB8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerReturnTrailDataAsset*           LoadedReturnTrail;                                 // 0x1BC0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*               ArenaReturnFX;                                     // 0x1BC8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_169A[0x4];                                     // 0x1BD0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfInflictedImpulseCenterOfMassZOffset;           // 0x1BD4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerSplineComponent*                SplinePathComponent;                               // 0x1BD8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FArenaReturnData                       ArenaReturnData;                                   // 0x1BE0(0x01B8)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FArenaReturnState                      ArenaReturnState;                                  // 0x1D98(0x0070)(BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FCollisionResponseContainer            CachedOriginalCapsuleCollisionResponses;           // 0x1E08(0x0020)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_169B[0x10];                                    // 0x1E28(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocalClientKnockoutPredictionDuration;             // 0x1E38(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         SimulatedCurrentJumpCount;                         // 0x1E3C(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_169C[0x4B];                                    // 0x1E3D(0x004B)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            PeggedInputCurve;                                  // 0x1E88(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_169D[0x58];                                    // 0x1E90(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerAimAssistDataAsset*             AimAssistData;                                     // 0x1EE8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerAimAssistDataAsset*             NormalAimAssistData;                               // 0x1EF0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerAimAssistDataAsset*             LegacyAimAssistData;                               // 0x1EF8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            ControllerInputMagnitudeFilter;                    // 0x1F00(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_169E[0x8];                                     // 0x1F08(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           ControllerInputPlatformFilter;                     // 0x1F10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowAltFireSpecialAbilitySwap;                   // 0x1F18(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_169F[0x3];                                     // 0x1F19(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TeamColorMaterialParam;                            // 0x1F1C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LocalPlayerMaterialParam;                          // 0x1F24(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                AllyReturnTrailColor;                              // 0x1F2C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                EnemyReturnTrailColor;                             // 0x1F38(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16A0[0x4];                                     // 0x1F44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           CharacterParamCollection;                          // 0x1F48(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ProjectileSpawnPosParam;                           // 0x1F50(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CharacterPosParam;                                 // 0x1F58(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CharacterHeightParam;                              // 0x1F60(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        RespawnFX;                                         // 0x1F68(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         AuthoritativePlayerLaunchedTrailState;             // 0x1F70(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseLegacyMegablastSystem;                         // 0x1F71(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16A1[0x36];                                    // 0x1F72(0x0036)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnalogFireState                       PrimaryFire;                                       // 0x1FA8(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FAnalogFireState                       AltFire;                                           // 0x1FB8(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsActive;                                         // 0x1FC8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16A2[0x7];                                     // 0x1FC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SplatVelocityTimeCurve;                            // 0x1FD0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            ClearOffsetLerpCurve;                              // 0x1FD8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SplatDuration;                                     // 0x1FE0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DelayBeforeInitiatingLerpToClearOffset;            // 0x1FE4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LerpToClearOffsetDuration;                         // 0x1FE8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         KnockoutTypesThatTriggerSplats;                    // 0x1FEC(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16A3[0x3];                                     // 0x1FED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      SplatSweepObjectTypes;                             // 0x1FF0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	EObjectTypeQuery                              Test;                                              // 0x2000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16A4[0x3];                                     // 0x2001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDistanceToSweepForSplat;                        // 0x2004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerMegablastSplatState            SplatState;                                        // 0x2008(0x0030)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_16A5[0x10];                                    // 0x2038(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerProfileObjectManager*           ProfileObjectManager;                              // 0x2048(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16A6[0x10];                                    // 0x2050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AltFireByAxis(float Value);
	void ApplyDefaultSkin();
	void ApplyInstigatorsMegablastFX(const class AMarinerPlayerState* MegablastInstigator);
	void ApplyMouseAndGamepadSensitivityModifier(float MouseTurnRateModifier, float MouseLookUpRateModifier, float GamepadTurnRateModifier, float GamepadLookUpRateModifier);
	void ApplySkinFromOtherCharacter(class AMarinerCharacter* OtherCharacter);
	void ApplySkinFromProfileObjectManager(const TSoftObjectPtr<class UMarinerSkinCollectionDataAsset>& InCollectionPath, bool bForceUpdate);
	void AuthoritativeKnockOut();
	void AuthorityForceActivatePrimary();
	void AuthoritySetCurrentReality(EMarinerRealityState DesiredRealityState);
	void AuthorityToggleBlastedTrail(bool bActivate, bool bInIsMegablasted);
	bool BP_GetOverrideLocalVisibilityForComponent(class USceneComponent* Component, class AActor* ComponentOwner, bool bWantsToBeVisible);
	void BP_InvokeLocalGameplayCues(const struct FGameplayTagContainer& GameplayCues);
	void BP_MegablastTimedUpdate();
	void BP_OnBeginArenaReturn();
	struct FMarinerCameraPerspective BP_OnChangePerspective(const class FName& PerspectiveName, struct FMarinerCameraPerspective& Perspective);
	void BP_OnEndArenaReturn();
	void BP_OnEnteredReality_OnOtherCharacter(class AMarinerCharacter* NonTransitioningCharacter, const EMarinerRealityState& CurrentReality);
	void BP_OnEnterMegablastState(class AMarinerPlayerState* MegablastInstigator);
	void BP_OnEnterReality(class AMarinerCharacter* TransitioningCharacter, const EMarinerRealityState& CurrentReality);
	void BP_OnExitMegablastState(class AMarinerPlayerState* MegablastInstigator);
	void BP_OnGameplayTagListenedForEvent(const struct FGameplayTag& GameplayTag, int32 Count);
	bool BP_OnHandleFellOutOfWorld();
	void BP_OnHitStunApplied();
	void BP_OnHitStunRemoved();
	void BP_OnKnockedOut(class AMarinerCharacter* KnockOutInstigator, const struct FVector& KnockOutDirection);
	void BP_OnKnockedOutAuthoritative();
	void BP_OnKnockedOutFromMegablast(class AMarinerCharacter* MegablastInstigator, const struct FVector& KnockOutDirection);
	void BP_OnMatchStateChanged(class FName State);
	void BP_OnMegablastApplied(class AMarinerPlayerState* MegablastInstigatorPlayerState);
	void BP_OnMegablastRemoved(class AMarinerPlayerState* MegablastInstigator);
	void BP_OnMoveAffectingGameplayEffectApplied(TSubclassOf<class UGameplayEffect> GameplayEffect, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel);
	void BP_OnMoveAffectingGameplayEffectRemoved(TSubclassOf<class UGameplayEffect> GameplayEffect, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel);
	void BP_OnMoveUpdateDataDefaultsUsed(TSubclassOf<class UMarinerMoveUpdateDefaults> DefaultsUsed);
	void BP_OnMoveUpdateRootMotionApplied(class FName RootMotionName);
	void BP_OnMoveUpdateRootMotionManuallyRemoved(class FName RootMotionName);
	void BP_OnRecoveryApplied();
	void BP_OnSuppressionEffectApplied();
	void BP_OnSuppressionEffectRemoved();
	void BP_OnTeamChange();
	void ChangePerspective(class FName PerspectiveName);
	void CheckForPreRoundSuppressionRemoval();
	void ClientPrintPlayerLaunchedTrailDetails(const class FString& ServerDetailsString);
	void ClientSendMoveUpdate(const struct FMarinerMoveUpdate& NewMoveUpdate);
	void DebugAbilityStatus();
	void DebugApplyHitStun(float Duration);
	void DebugApplyMegablastAim();
	void DebugApplyMegablastUp();
	void DebugHurtMe(float Amount);
	void DebugRemoveHitStun();
	void DebugRemoveMegablast();
	void DebugSetCameraPerspective(const class FName& PerspectiveName);
	void DisableJumpLoop();
	void DoFootstep(EMarinerCharacterFoot FootThatLanded);
	void DynamicServerMove(const struct FMarinerDynamicServerMove& ServerMoveInfo);
	void DynamicServerMoveDual(const struct FMarinerDynamicServerMove& ServerMoveInfo);
	void DynamicServerMoveDualHybridRootMotion(const struct FMarinerDynamicServerMove& ServerMoveInfo);
	void DynamicServerMoveOld(const struct FMarinerDynamicServerMove& ServerMoveInfo);
	struct FMarinerCameraPerspective FindPerspective(const class FName Key);
	void FireByAxis(float Value);
	class UParticleSystemComponent* GetJumpFXParticleSystemComponent(int32 CurrentJumpCount);
	struct FVector GetJumpParticlesOffset();
	float GetLastKnockedOutTimeStamp();
	TArray<class UMeshComponent*> GetMeshesToApplyHitFeedbackFlash();
	struct FVector GetSocketLocation(const class FName& SocketName, bool bAccountForProjection);
	void HandleDodgeStateApplied();
	void HandleDodgeStateRemoved();
	void IncrementPlayerStat(const class FName& StatName, const int32& Value, bool bGiveGameplayAward);
	void ListenForGameplayTagChanges(const struct FGameplayTag& GameplayTagToListenFor);
	void ListenForGameplayTagChangesInBundle(const TSubclassOf<class UMarinerGameplayTagBundle>& GameplayTagBundleToListenFor);
	void ListenForGameplayTagChangesInBundles(const TArray<TSubclassOf<class UMarinerGameplayTagBundle>>& GameplayTagBundlesToListenFor);
	void ListenForGameplayTagChangesInContainer(const struct FGameplayTagContainer& GameplayTagsToListenForInContainer);
	void ListenToAnimInstace(class UObject* MontageListener, EMarinerCharacterAnimListenerContext ListenerContext);
	void MoveBackward(float Val);
	void MoveForward(float Val);
	void MulticastOnDamageImpulse(float ImpulseTaken, const struct FVector_NetQuantize& ImpulseLocation);
	void NotifyRecoveryActionPerformed();
	void OnAbilityGiven(class UGameplayAbility* Ability);
	void OnAllCollectionMembersLoaded();
	void OnAnyPlayerChangedTeams(class AMarinerPlayerState* PlayerChangedTeam);
	void OnDebugApplyHitStun(float Duration);
	void OnDebugApplyMegablast(const struct FVector& MegablastDirection);
	void OnDebugHurtMe(float Amount);
	void OnDebugRemoveHitStun();
	void OnDebugRemoveMegablast();
	void OnDefaultAnimBPLoaded();
	void OnDefaultCollectionMembersLoaded();
	void OnDefaultSkinCollectionMembersLoaded();
	void OnGameplayTagListenedForEvent(const struct FGameplayTag& GameplayTag, int32 Count);
	void OnHitStunRemoved();
	void OnHUDFinishedBeginPlay();
	void OnLaunchEvent(const struct FVector& PostLaunchVelocity, bool bLaunchContainedHostileImpulse, bool bLaunchWasMegablast);
	void OnLocalArenaReturnTeleport();
	void OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageStarted(class UAnimMontage* Montage);
	void OnProfileObjectsLoaded();
	void OnRegenSuppressionEnded();
	void OnRep_ArenaReturnState(const struct FArenaReturnState& PreviousArenaReturnState);
	void OnRep_AuthoritativePlayerLaunchedTrailState();
	void OnRep_CurrentRealityState();
	void OnRep_CurrentWeapon(class AMarinerWeapon* LastWeapon);
	void OnRep_Inventory();
	void OnRep_LastTakeHitInfo();
	void OnRep_SimulatedCurrentJumpCount();
	void OnRep_SimulatedLatestMegablastBounceLocation();
	void OnSkinCollectionLoaded();
	void OnSkinCollectionMembersLoaded();
	float PlayMarinerCharacterMontage(const class UMarinerCharacterMontage* CharacterMontage, float PlayRate, class FName StartSectionName, class UObject* OptionalMontageListener);
	void PotentialThrowPriorityItemSpoof();
	void RejectClientSuppressionPrediction();
	void ResetFlashHitFeedback(bool bRestartAfterStopped);
	void ResetMouseAndGamepadSensitivityModifier();
	void ServerEchoSuppressionEffect(const struct FPredictionKey& SuppressionEffectPredictionKey);
	void ServerEquipWeapon(class AMarinerWeapon* NewWeapon);
	void ServerPrintPlayerLaunchedTrailDetails();
	void ServerSetAimAssistState(EMarinerAimAssistState AimAssistState);
	bool SetAbilityInputSuppressionByTag(bool bSuppress);
	bool SetAllItemPickupSuppressionByTag(bool bSuppress);
	void SetAllowAltFireSpecialAbilitySwap(bool InBool);
	void SetAllSuppressionTags(bool bIsSuppressed);
	void SetFixedFootIK(bool bFixed);
	void SetGameplayEffect(TSubclassOf<class UGameplayEffect> GameplayEffect, bool bApply, int32 Level);
	void SetInputFilter(class UCurveVector* InCurve);
	bool SetItemUseSuppressionByTag(bool bSuppress);
	bool SetJumpSuppressionByTag(bool bSuppress);
	bool SetLookInputSuppressionByTag(bool bSuppress);
	bool SetMovementInputSuppressionByTag(bool bSuppress);
	bool SetNonPriorityItemPickupSuppressionByTag(bool bSuppress);
	bool SetPriorityItemPickupSuppressionByTag(bool bSuppress);
	void SetRuntimeStickAccelerationEnabled(bool bEnabled);
	void SetSensitivityFromIndex(int32 SpecificationIndex);
	bool SetSuppressionTags(const struct FGameplayTagContainer& SuppressionTagsToSet, bool bIsSuppressed);
	void SetTeamIndex(int32 InTeamIndex);
	void SetupProfileObjectBindings();
	bool SetWASDSuppressionByTag(bool bSuppress);
	bool SetWeaponInputSuppressionByTag(bool bSuppress);
	void StartJumpLoop(int32 InJumpLoopFrameTarget);
	void StopListeningToAnimInstance(class UObject* MontageListener, EMarinerCharacterAnimListenerContext ListenerContext);
	void StopMarinerCharacterMontage(float BlendOutTime, const class UMarinerCharacterMontage* CharacterMontage);
	void SwapAltFireOnSupportedConfiguration();
	void TransitionCamera(const class FName& PerspectiveName, const struct FMarinerCameraPerspective& Perspective);
	bool TryInitiateFlashHitFeedback(class APawn* HitInstigator);
	void UpdateInputFilterCurve();
	void UpdateOtherCharacterVisibilitiesByReality(class AMarinerBasePlayerController* LocalController);
	void UpdateTeamColors();
	void UpdateTeamMaskCollision();
	void UpdateUserSettings();

	class UMarinerDamageableComponent* BP_GetDamageableComponent() const;
	bool BP_OverrideCanUseViewCatchCapsule() const;
	bool ClearAllSuppressionTags() const;
	bool ClearSuppressionTags(const struct FGameplayTagContainer& SuppressionTagsToClear) const;
	class UCapsuleComponent* GetActiveCapsuleComponent() const;
	struct FRotator GetAimOffsets() const;
	class AMarinerCharacter* GetAimTarget() const;
	void GetAllNonMesh1PSceneComponents(TArray<class USceneComponent*>* OutNonMesh1PSceneComponents) const;
	bool GetAllowAltFireSpecialAbilitySwap() const;
	EMarinerArenaReturnState GetArenaReturnState() const;
	struct FVector2D GetBaseTurnSpeed() const;
	EMarinerAchievement GetCharacterKnockoutAchievement() const;
	EMarinerAchievement GetCharacterWinsAchievement() const;
	class UCurveFloat* GetControllerInputMagnitudeFilter() const;
	class UCurveVector* GetControllerInputPlatformFilter() const;
	EMarinerArenaReturnState GetCurrentArenaReturnState() const;
	class AMarinerArenaReturnTarget* GetCurrentArenaReturnTarget() const;
	struct FVector2D GetCurrentInputs() const;
	int32 GetCurrentJumpCount() const;
	class UMarinerSkinCollectionDataAsset* GetCurrentSkinCollection() const;
	struct FVector2D GetCurrentVelocity() const;
	float GetDamageDealtMultiplier() const;
	float GetDamageInstigatorMultiplier() const;
	struct FVector2D GetDeadzonedInput() const;
	class UMarinerSkinCollectionDataAsset* GetDefaultSkinCollection() const;
	const struct FMarinerCharacterFallbackReturnData GetFallbackArenaReturnData() const;
	float GetFireRateMultiplier() const;
	class USceneComponent* GetHomingComponentOverride() const;
	struct FVector GetHomingLocation() const;
	class AMarinerCharacter* GetHomingTarget() const;
	float GetImpulseDealtMultiplier() const;
	float GetImpulseInstigatorMultiplier() const;
	struct FVector2D GetInputBuffer() const;
	class UMarinerItemInteractionComponent* GetItemInteractionComponent() const;
	class UMarinerCharacterMovement* GetMarinerMovement() const;
	class UMarinerMaterialsSwapManagerComponent* GetMatSwapManagerComponent() const;
	float GetMegablastSpeed() const;
	float GetOriginalCapsuleHalfHeight() const;
	float GetOriginalCapsuleRadius() const;
	class USkeletalMeshComponent* GetPawnMesh() const;
	class UCurveFloat* GetPeggedInputVelocityCurve() const;
	struct FVector GetProjectileSpawnLocation() const;
	bool GetRuntimeStickAccelerationEnabled() const;
	struct FVector GetSensitivityTimeWhilePegged() const;
	class UMarinerSplineComponent* GetSplinePathComponent() const;
	int32 GetTeamIndex() const;
	class UCameraComponent* GetThirdPersonCamera() const;
	class UMarinerSpringArmComponent* GetThirdPersonCameraArm() const;
	float GetTimePeggedUntilAtTopEndTurnSpeed() const;
	struct FVector2D GetTopEndTurnSpeed() const;
	class AMarinerWeapon* GetWeapon() const;
	class UMarinerWeaponAttributes* GetWeaponAttributes() const;
	class USkeletalMeshComponent* GetWeaponMesh() const;
	class USkeletalMeshComponent* GetWeaponMesh1P() const;
	class USkeletalMeshComponent* GetWeaponMesh3P() const;
	bool HasAnyOfGivenSuppressionTags(const struct FGameplayTagContainer& SuppressionTagsToCheck) const;
	bool HasPriorityItem() const;
	bool HasValidHomingTarget() const;
	bool IsAbilityInputSuppressedByTag() const;
	bool IsAimMagnetismActive() const;
	bool IsAllItemPickupSuppressedByTag() const;
	bool IsCameraTransitioning() const;
	bool IsCharacterStateAdditiveJumping() const;
	bool IsFiring() const;
	bool IsFirstPerson() const;
	bool IsIndependentCharacter() const;
	bool IsItemUseSuppressedByTag() const;
	bool IsLookInputSuppressedByTag() const;
	bool IsMegablasted() const;
	bool IsMovementInputSuppressedByTag() const;
	bool IsNonPriorityItemPickupSuppressedByTag() const;
	bool IsPlayingMarinerCharacterMontage(const class UMarinerCharacterMontage* CharacterMontage) const;
	bool IsPlayingMontage(const class UAnimMontage* Montage) const;
	bool IsPriorityItemPickupSuppressedByTag() const;
	bool IsReticleRed() const;
	bool IsReturningToArena() const;
	bool IsSimulatingClient() const;
	bool IsWeaponInputSuppressedByTag() const;
	bool ShouldKnockoutInitiateSplat(bool bWasKnockoutDueToMegablast) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacter">();
	}
	static class AMarinerCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerCharacter>();
	}
};
static_assert(alignof(AMarinerCharacter) == 0x000010, "Wrong alignment on AMarinerCharacter");
static_assert(sizeof(AMarinerCharacter) == 0x002060, "Wrong size on AMarinerCharacter");
static_assert(offsetof(AMarinerCharacter, InvincibleModeEffect) == 0x0006C8, "Member 'AMarinerCharacter::InvincibleModeEffect' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, TurboModeEffect) == 0x0006D0, "Member 'AMarinerCharacter::TurboModeEffect' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, SimulatedLatestMegablastBounceLocation) == 0x0006D8, "Member 'AMarinerCharacter::SimulatedLatestMegablastBounceLocation' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, IKZModifier) == 0x0006E4, "Member 'AMarinerCharacter::IKZModifier' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, IKFootAlphaMaxValue) == 0x0006E8, "Member 'AMarinerCharacter::IKFootAlphaMaxValue' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnAuthoritativeDamageCausedDelegate) == 0x000700, "Member 'AMarinerCharacter::OnAuthoritativeDamageCausedDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnArenaCurrentStateChanged) == 0x000710, "Member 'AMarinerCharacter::OnArenaCurrentStateChanged' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnInputSupressionRemoved) == 0x000720, "Member 'AMarinerCharacter::OnInputSupressionRemoved' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnEnteredRealityDelegate) == 0x000730, "Member 'AMarinerCharacter::OnEnteredRealityDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnPostBeginPlayDelegate) == 0x000740, "Member 'AMarinerCharacter::OnPostBeginPlayDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnCharacterDisabledDelegate) == 0x000750, "Member 'AMarinerCharacter::OnCharacterDisabledDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnPlayHitDelegate) == 0x000760, "Member 'AMarinerCharacter::OnPlayHitDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnReticleTargetChangedDelegate) == 0x000770, "Member 'AMarinerCharacter::OnReticleTargetChangedDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnHomingTargetAcquiredDelegate) == 0x000780, "Member 'AMarinerCharacter::OnHomingTargetAcquiredDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnHomingTargetLostDelegate) == 0x000790, "Member 'AMarinerCharacter::OnHomingTargetLostDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnHomingTargetSwappedDelegate) == 0x0007A0, "Member 'AMarinerCharacter::OnHomingTargetSwappedDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, AirJumpDelegate) == 0x0007B0, "Member 'AMarinerCharacter::AirJumpDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, Mesh1P) == 0x0007C0, "Member 'AMarinerCharacter::Mesh1P' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, UseNewWeaponMeshSystem) == 0x0007C8, "Member 'AMarinerCharacter::UseNewWeaponMeshSystem' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, WeaponMesh1P) == 0x0007D0, "Member 'AMarinerCharacter::WeaponMesh1P' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, WeaponMesh3P) == 0x0007D8, "Member 'AMarinerCharacter::WeaponMesh3P' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, FastCapsuleCollider) == 0x0007E0, "Member 'AMarinerCharacter::FastCapsuleCollider' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, DamageableComponent) == 0x0007E8, "Member 'AMarinerCharacter::DamageableComponent' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, ItemInteractionComponent) == 0x0007F0, "Member 'AMarinerCharacter::ItemInteractionComponent' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, CharacterKnockoutAchievement) == 0x0007F8, "Member 'AMarinerCharacter::CharacterKnockoutAchievement' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, CharacterWinsAchievement) == 0x0007F9, "Member 'AMarinerCharacter::CharacterWinsAchievement' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, DangerZoneLoopBeginSFX) == 0x000800, "Member 'AMarinerCharacter::DangerZoneLoopBeginSFX' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, DangerZoneLoopEndSFX) == 0x000808, "Member 'AMarinerCharacter::DangerZoneLoopEndSFX' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, CharacterMegaBlastBounceSFX) == 0x000810, "Member 'AMarinerCharacter::CharacterMegaBlastBounceSFX' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, MegaBlastThresholdOpponentSFX) == 0x000818, "Member 'AMarinerCharacter::MegaBlastThresholdOpponentSFX' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, HitTickSFX) == 0x000820, "Member 'AMarinerCharacter::HitTickSFX' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, DamageTakenSFX) == 0x000828, "Member 'AMarinerCharacter::DamageTakenSFX' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, ImpulseSFXClamps) == 0x000830, "Member 'AMarinerCharacter::ImpulseSFXClamps' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, DamageSFXClamps) == 0x000838, "Member 'AMarinerCharacter::DamageSFXClamps' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnCharacterRecovered) == 0x000858, "Member 'AMarinerCharacter::OnCharacterRecovered' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnBlastedTrailToggled) == 0x000868, "Member 'AMarinerCharacter::OnBlastedTrailToggled' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnMarinerMovementModeChanged) == 0x000878, "Member 'AMarinerCharacter::OnMarinerMovementModeChanged' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnCharacterMovedToReturnRocketLaunchpad) == 0x000888, "Member 'AMarinerCharacter::OnCharacterMovedToReturnRocketLaunchpad' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnKnockedOutAuthorityDelegate) == 0x000898, "Member 'AMarinerCharacter::OnKnockedOutAuthorityDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnKnockedOutDelegate) == 0x0008A8, "Member 'AMarinerCharacter::OnKnockedOutDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnKnockedOtherCharacterOutAuthorityDelegate) == 0x0008B8, "Member 'AMarinerCharacter::OnKnockedOtherCharacterOutAuthorityDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnCharacterCameraPerspectiveChanged) == 0x0008C8, "Member 'AMarinerCharacter::OnCharacterCameraPerspectiveChanged' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, TagsToRemoveOnKnockout) == 0x0008D8, "Member 'AMarinerCharacter::TagsToRemoveOnKnockout' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, JumpSuppressionTags) == 0x0008F8, "Member 'AMarinerCharacter::JumpSuppressionTags' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, WASDSuppressionTags) == 0x000918, "Member 'AMarinerCharacter::WASDSuppressionTags' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnAnyDamageIncoming) == 0x000938, "Member 'AMarinerCharacter::OnAnyDamageIncoming' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnGameplayTagRemovedDelegate) == 0x000948, "Member 'AMarinerCharacter::OnGameplayTagRemovedDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnGameplayTagAppliedDelegate) == 0x000958, "Member 'AMarinerCharacter::OnGameplayTagAppliedDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnSkinApplied) == 0x000968, "Member 'AMarinerCharacter::OnSkinApplied' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnPostSkinApplied) == 0x000978, "Member 'AMarinerCharacter::OnPostSkinApplied' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnHomedStatusChangedDelegate) == 0x000988, "Member 'AMarinerCharacter::OnHomedStatusChangedDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, CurrentRealityState) == 0x000998, "Member 'AMarinerCharacter::CurrentRealityState' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, MarinerCharacterMovement) == 0x0009B0, "Member 'AMarinerCharacter::MarinerCharacterMovement' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LastHitByTimeStamp) == 0x0009B8, "Member 'AMarinerCharacter::LastHitByTimeStamp' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, DefaultSkinData) == 0x0009C0, "Member 'AMarinerCharacter::DefaultSkinData' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, DefaultAbilitySkin) == 0x0009C8, "Member 'AMarinerCharacter::DefaultAbilitySkin' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, DefaultCueSkinMap) == 0x0009D0, "Member 'AMarinerCharacter::DefaultCueSkinMap' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, DefaultAnimBP) == 0x0009D8, "Member 'AMarinerCharacter::DefaultAnimBP' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, CurrentSkinCollection) == 0x0009E0, "Member 'AMarinerCharacter::CurrentSkinCollection' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LoadedSkinCollectionData) == 0x000A08, "Member 'AMarinerCharacter::LoadedSkinCollectionData' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LoadedSkinData) == 0x000A10, "Member 'AMarinerCharacter::LoadedSkinData' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LoadedAbilitySkinCollection) == 0x000A18, "Member 'AMarinerCharacter::LoadedAbilitySkinCollection' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LoadedCueSkinMap) == 0x000A20, "Member 'AMarinerCharacter::LoadedCueSkinMap' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LoadedAnimBP) == 0x000A28, "Member 'AMarinerCharacter::LoadedAnimBP' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, PoolingData) == 0x000A30, "Member 'AMarinerCharacter::PoolingData' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, ComboCounterTimeout) == 0x000A50, "Member 'AMarinerCharacter::ComboCounterTimeout' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, JumpAudioCooldownTime) == 0x000A54, "Member 'AMarinerCharacter::JumpAudioCooldownTime' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, JumpFXOffsetZFromCapsuleBottom) == 0x000A58, "Member 'AMarinerCharacter::JumpFXOffsetZFromCapsuleBottom' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, AbilitySet) == 0x000A60, "Member 'AMarinerCharacter::AbilitySet' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, AbilitySystemComponent) == 0x000A68, "Member 'AMarinerCharacter::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, HomingPreventionTags) == 0x000A70, "Member 'AMarinerCharacter::HomingPreventionTags' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, DefaultGameplayTagBundlesToListenFor) == 0x000A90, "Member 'AMarinerCharacter::DefaultGameplayTagBundlesToListenFor' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, ArenaReturnSuppressionTags) == 0x000AC0, "Member 'AMarinerCharacter::ArenaReturnSuppressionTags' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, MatSwapManager) == 0x000AE0, "Member 'AMarinerCharacter::MatSwapManager' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, MeshSwapJobArray) == 0x000AE8, "Member 'AMarinerCharacter::MeshSwapJobArray' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, AkAudioComponent) == 0x000AF8, "Member 'AMarinerCharacter::AkAudioComponent' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LeftFootstepBoneName) == 0x000B00, "Member 'AMarinerCharacter::LeftFootstepBoneName' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, RightFootstepBoneName) == 0x000B08, "Member 'AMarinerCharacter::RightFootstepBoneName' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, DefaultFootstepEffects) == 0x000B10, "Member 'AMarinerCharacter::DefaultFootstepEffects' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LeftFootstepPool) == 0x000B30, "Member 'AMarinerCharacter::LeftFootstepPool' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, RightFootstepPool) == 0x000B38, "Member 'AMarinerCharacter::RightFootstepPool' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, FootStepEffectsBySurfaceType) == 0x000B40, "Member 'AMarinerCharacter::FootStepEffectsBySurfaceType' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LandedGameplayTag) == 0x000B90, "Member 'AMarinerCharacter::LandedGameplayTag' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, ThirdPersonCameraArm) == 0x000B98, "Member 'AMarinerCharacter::ThirdPersonCameraArm' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, ThirdPersonCamera) == 0x000BA0, "Member 'AMarinerCharacter::ThirdPersonCamera' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, PerspectiveMap) == 0x000C50, "Member 'AMarinerCharacter::PerspectiveMap' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, WeaponAttachPoint) == 0x001980, "Member 'AMarinerCharacter::WeaponAttachPoint' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, DefaultInventoryClasses) == 0x001988, "Member 'AMarinerCharacter::DefaultInventoryClasses' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, Inventory) == 0x001998, "Member 'AMarinerCharacter::Inventory' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, CurrentWeapon) == 0x0019A8, "Member 'AMarinerCharacter::CurrentWeapon' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, WeaponAttributes) == 0x0019B0, "Member 'AMarinerCharacter::WeaponAttributes' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, OnCharacterWeaponChanged) == 0x0019B8, "Member 'AMarinerCharacter::OnCharacterWeaponChanged' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, CustomHudWidget) == 0x0019C8, "Member 'AMarinerCharacter::CustomHudWidget' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LastTakeHitInfo) == 0x0019D0, "Member 'AMarinerCharacter::LastTakeHitInfo' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, BlastedEffect) == 0x001AF8, "Member 'AMarinerCharacter::BlastedEffect' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, BlastedEffectThreshold) == 0x001B00, "Member 'AMarinerCharacter::BlastedEffectThreshold' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, HitFeedbackFlashProgressRatio) == 0x001B08, "Member 'AMarinerCharacter::HitFeedbackFlashProgressRatio' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, bHitFeedbackFlashIsActive) == 0x001B0C, "Member 'AMarinerCharacter::bHitFeedbackFlashIsActive' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, BaseHitFeedbackFlashTimeLength) == 0x001B10, "Member 'AMarinerCharacter::BaseHitFeedbackFlashTimeLength' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, HitFeedbackFlashColorCurve) == 0x001B18, "Member 'AMarinerCharacter::HitFeedbackFlashColorCurve' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, HitFeedbackFlashVectorMaterialParameterName) == 0x001B20, "Member 'AMarinerCharacter::HitFeedbackFlashVectorMaterialParameterName' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, HitFeedbackFlashScalarCurve) == 0x001B28, "Member 'AMarinerCharacter::HitFeedbackFlashScalarCurve' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, HitFeedbackFlashScalarMaterialParameterName) == 0x001B30, "Member 'AMarinerCharacter::HitFeedbackFlashScalarMaterialParameterName' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, MeshesToFlashHitFeedback) == 0x001B38, "Member 'AMarinerCharacter::MeshesToFlashHitFeedback' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, GrantAssistDurationValue) == 0x001B98, "Member 'AMarinerCharacter::GrantAssistDurationValue' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, PlayerLaunchedTrail) == 0x001BA8, "Member 'AMarinerCharacter::PlayerLaunchedTrail' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, SimpleLaunchParticleFX) == 0x001BB0, "Member 'AMarinerCharacter::SimpleLaunchParticleFX' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LoadedMegaBlastTrail) == 0x001BB8, "Member 'AMarinerCharacter::LoadedMegaBlastTrail' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LoadedReturnTrail) == 0x001BC0, "Member 'AMarinerCharacter::LoadedReturnTrail' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, ArenaReturnFX) == 0x001BC8, "Member 'AMarinerCharacter::ArenaReturnFX' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, SelfInflictedImpulseCenterOfMassZOffset) == 0x001BD4, "Member 'AMarinerCharacter::SelfInflictedImpulseCenterOfMassZOffset' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, SplinePathComponent) == 0x001BD8, "Member 'AMarinerCharacter::SplinePathComponent' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, ArenaReturnData) == 0x001BE0, "Member 'AMarinerCharacter::ArenaReturnData' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, ArenaReturnState) == 0x001D98, "Member 'AMarinerCharacter::ArenaReturnState' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, CachedOriginalCapsuleCollisionResponses) == 0x001E08, "Member 'AMarinerCharacter::CachedOriginalCapsuleCollisionResponses' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LocalClientKnockoutPredictionDuration) == 0x001E38, "Member 'AMarinerCharacter::LocalClientKnockoutPredictionDuration' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, SimulatedCurrentJumpCount) == 0x001E3C, "Member 'AMarinerCharacter::SimulatedCurrentJumpCount' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, PeggedInputCurve) == 0x001E88, "Member 'AMarinerCharacter::PeggedInputCurve' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, AimAssistData) == 0x001EE8, "Member 'AMarinerCharacter::AimAssistData' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, NormalAimAssistData) == 0x001EF0, "Member 'AMarinerCharacter::NormalAimAssistData' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LegacyAimAssistData) == 0x001EF8, "Member 'AMarinerCharacter::LegacyAimAssistData' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, ControllerInputMagnitudeFilter) == 0x001F00, "Member 'AMarinerCharacter::ControllerInputMagnitudeFilter' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, ControllerInputPlatformFilter) == 0x001F10, "Member 'AMarinerCharacter::ControllerInputPlatformFilter' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, bAllowAltFireSpecialAbilitySwap) == 0x001F18, "Member 'AMarinerCharacter::bAllowAltFireSpecialAbilitySwap' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, TeamColorMaterialParam) == 0x001F1C, "Member 'AMarinerCharacter::TeamColorMaterialParam' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LocalPlayerMaterialParam) == 0x001F24, "Member 'AMarinerCharacter::LocalPlayerMaterialParam' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, AllyReturnTrailColor) == 0x001F2C, "Member 'AMarinerCharacter::AllyReturnTrailColor' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, EnemyReturnTrailColor) == 0x001F38, "Member 'AMarinerCharacter::EnemyReturnTrailColor' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, CharacterParamCollection) == 0x001F48, "Member 'AMarinerCharacter::CharacterParamCollection' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, ProjectileSpawnPosParam) == 0x001F50, "Member 'AMarinerCharacter::ProjectileSpawnPosParam' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, CharacterPosParam) == 0x001F58, "Member 'AMarinerCharacter::CharacterPosParam' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, CharacterHeightParam) == 0x001F60, "Member 'AMarinerCharacter::CharacterHeightParam' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, RespawnFX) == 0x001F68, "Member 'AMarinerCharacter::RespawnFX' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, AuthoritativePlayerLaunchedTrailState) == 0x001F70, "Member 'AMarinerCharacter::AuthoritativePlayerLaunchedTrailState' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, bUseLegacyMegablastSystem) == 0x001F71, "Member 'AMarinerCharacter::bUseLegacyMegablastSystem' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, PrimaryFire) == 0x001FA8, "Member 'AMarinerCharacter::PrimaryFire' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, AltFire) == 0x001FB8, "Member 'AMarinerCharacter::AltFire' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, bIsActive) == 0x001FC8, "Member 'AMarinerCharacter::bIsActive' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, SplatVelocityTimeCurve) == 0x001FD0, "Member 'AMarinerCharacter::SplatVelocityTimeCurve' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, ClearOffsetLerpCurve) == 0x001FD8, "Member 'AMarinerCharacter::ClearOffsetLerpCurve' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, SplatDuration) == 0x001FE0, "Member 'AMarinerCharacter::SplatDuration' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, DelayBeforeInitiatingLerpToClearOffset) == 0x001FE4, "Member 'AMarinerCharacter::DelayBeforeInitiatingLerpToClearOffset' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, LerpToClearOffsetDuration) == 0x001FE8, "Member 'AMarinerCharacter::LerpToClearOffsetDuration' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, KnockoutTypesThatTriggerSplats) == 0x001FEC, "Member 'AMarinerCharacter::KnockoutTypesThatTriggerSplats' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, SplatSweepObjectTypes) == 0x001FF0, "Member 'AMarinerCharacter::SplatSweepObjectTypes' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, Test) == 0x002000, "Member 'AMarinerCharacter::Test' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, MaxDistanceToSweepForSplat) == 0x002004, "Member 'AMarinerCharacter::MaxDistanceToSweepForSplat' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, SplatState) == 0x002008, "Member 'AMarinerCharacter::SplatState' has a wrong offset!");
static_assert(offsetof(AMarinerCharacter, ProfileObjectManager) == 0x002048, "Member 'AMarinerCharacter::ProfileObjectManager' has a wrong offset!");

// Class Mariner.MarinerCharacterAbilityWidget
// 0x0030 (0x02E0 - 0x02B0)
class UMarinerCharacterAbilityWidget : public UMarinerUserWidget
{
public:
	class UTextBlock*                             Bound_AbilityName;                                 // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_AbilityDescription;                          // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_AbilityType;                                 // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Bound_AbilityIcon;                                 // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerPrompt*                         Bound_Prompt;                                      // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerInputActions                          AbilityAction;                                     // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16BF[0x7];                                     // 0x02D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PopulateUsingSoftReference(TSoftClassPtr<class UClass> Character);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterAbilityWidget">();
	}
	static class UMarinerCharacterAbilityWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterAbilityWidget>();
	}
};
static_assert(alignof(UMarinerCharacterAbilityWidget) == 0x000008, "Wrong alignment on UMarinerCharacterAbilityWidget");
static_assert(sizeof(UMarinerCharacterAbilityWidget) == 0x0002E0, "Wrong size on UMarinerCharacterAbilityWidget");
static_assert(offsetof(UMarinerCharacterAbilityWidget, Bound_AbilityName) == 0x0002B0, "Member 'UMarinerCharacterAbilityWidget::Bound_AbilityName' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterAbilityWidget, Bound_AbilityDescription) == 0x0002B8, "Member 'UMarinerCharacterAbilityWidget::Bound_AbilityDescription' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterAbilityWidget, Bound_AbilityType) == 0x0002C0, "Member 'UMarinerCharacterAbilityWidget::Bound_AbilityType' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterAbilityWidget, Bound_AbilityIcon) == 0x0002C8, "Member 'UMarinerCharacterAbilityWidget::Bound_AbilityIcon' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterAbilityWidget, Bound_Prompt) == 0x0002D0, "Member 'UMarinerCharacterAbilityWidget::Bound_Prompt' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterAbilityWidget, AbilityAction) == 0x0002D8, "Member 'UMarinerCharacterAbilityWidget::AbilityAction' has a wrong offset!");

// Class Mariner.MarinerFriendListErrorWidget
// 0x0088 (0x0338 - 0x02B0)
class UMarinerFriendListErrorWidget : public UMarinerUserWidget
{
public:
	struct FMarinerPlatformText                   FriendErrorMessage;                                // 0x02B0(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_ErrorMessageText;                            // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16C0[0x8];                                     // 0x0330(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFriendListErrorWidget">();
	}
	static class UMarinerFriendListErrorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerFriendListErrorWidget>();
	}
};
static_assert(alignof(UMarinerFriendListErrorWidget) == 0x000008, "Wrong alignment on UMarinerFriendListErrorWidget");
static_assert(sizeof(UMarinerFriendListErrorWidget) == 0x000338, "Wrong size on UMarinerFriendListErrorWidget");
static_assert(offsetof(UMarinerFriendListErrorWidget, FriendErrorMessage) == 0x0002B0, "Member 'UMarinerFriendListErrorWidget::FriendErrorMessage' has a wrong offset!");
static_assert(offsetof(UMarinerFriendListErrorWidget, Bound_ErrorMessageText) == 0x000328, "Member 'UMarinerFriendListErrorWidget::Bound_ErrorMessageText' has a wrong offset!");

// Class Mariner.MarinerCharacterEmotes
// 0x0010 (0x0040 - 0x0030)
class UMarinerCharacterEmotes final : public UDataAsset
{
public:
	TArray<TSoftObjectPtr<class UMarinerCMSItemWithIcon>> CharacterEmotes;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterEmotes">();
	}
	static class UMarinerCharacterEmotes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterEmotes>();
	}
};
static_assert(alignof(UMarinerCharacterEmotes) == 0x000008, "Wrong alignment on UMarinerCharacterEmotes");
static_assert(sizeof(UMarinerCharacterEmotes) == 0x000040, "Wrong size on UMarinerCharacterEmotes");
static_assert(offsetof(UMarinerCharacterEmotes, CharacterEmotes) == 0x000030, "Member 'UMarinerCharacterEmotes::CharacterEmotes' has a wrong offset!");

// Class Mariner.MarinerCharacterFrontendSkinUIData
// 0x0020 (0x0050 - 0x0030)
class UMarinerCharacterFrontendSkinUIData final : public UDataAsset
{
public:
	class UTexture2D*                             Icon;                                              // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   PaletteColors;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UTexture*                               PortraitBackground;                                // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	const TArray<struct FLinearColor> GetPaletteColors() const;
	class UTexture* GetPortraitBackground() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterFrontendSkinUIData">();
	}
	static class UMarinerCharacterFrontendSkinUIData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterFrontendSkinUIData>();
	}
};
static_assert(alignof(UMarinerCharacterFrontendSkinUIData) == 0x000008, "Wrong alignment on UMarinerCharacterFrontendSkinUIData");
static_assert(sizeof(UMarinerCharacterFrontendSkinUIData) == 0x000050, "Wrong size on UMarinerCharacterFrontendSkinUIData");
static_assert(offsetof(UMarinerCharacterFrontendSkinUIData, Icon) == 0x000030, "Member 'UMarinerCharacterFrontendSkinUIData::Icon' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterFrontendSkinUIData, PaletteColors) == 0x000038, "Member 'UMarinerCharacterFrontendSkinUIData::PaletteColors' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterFrontendSkinUIData, PortraitBackground) == 0x000048, "Member 'UMarinerCharacterFrontendSkinUIData::PortraitBackground' has a wrong offset!");

// Class Mariner.MarinerFastCollisionUtils
// 0x0000 (0x0028 - 0x0028)
class UMarinerFastCollisionUtils final : public UBlueprintFunctionLibrary
{
public:
	static void DebugDrawFastOverlapListenerHandle(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle, float DrawDuration, const struct FColor& DrawColor);
	static bool FastOverlapBox(const class UObject* WorldContextObject, const struct FBox& OverlapperBox, const struct FTransform& BoxTransform, ECollisionChannel OverlapChannel, TArray<class UMarinerFastCollisionComponent*>* OutHits);
	static bool FastOverlapBoxWithCollection(const class UObject* WorldContextObject, const struct FBox& OverlapperBox, const struct FTransform& BoxTransform, ECollisionChannel OverlapChannel, TArray<class UMarinerFastCollisionComponent*>* OutHits, int32 CollectionToCollideAgainst);
	static bool FastOverlapCapsule(const class UObject* WorldContextObject, const float CapsuleRadius, const struct FVector& StartPoint, const struct FVector& EndPoint, ECollisionChannel OverlapChannel, TArray<class UMarinerFastCollisionComponent*>* OutHits);
	static bool FastOverlapCapsuleWithCollection(const class UObject* WorldContextObject, const float CapsuleRadius, const struct FVector& StartPoint, const struct FVector& EndPoint, ECollisionChannel OverlapChannel, TArray<class UMarinerFastCollisionComponent*>* OutHits, int32 CollectionToCollideAgainst);
	static bool FastOverlapSphere(const class UObject* WorldContextObject, const float SphereRadius, const struct FVector& Location, ECollisionChannel OverlapChannel, TArray<class UMarinerFastCollisionComponent*>* OutHits);
	static bool FastOverlapSphereWithCollection(const class UObject* WorldContextObject, const float SphereRadius, const struct FVector& Location, ECollisionChannel OverlapChannel, TArray<class UMarinerFastCollisionComponent*>* OutHits, int32 CollectionToCollideAgainst);
	static bool IsProjectileFastOverlapListenerVolumeValid(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle);
	static struct FMarinerProjectileFastOverlapListenerHandle RegisterProjectileFastOverlapListenerBoxVolume(const class UObject* WorldContextObject, class AActor* OverlapResponder, const struct FVector& Extents, const struct FVector& Location, const struct FRotator& Rotation, ECollisionChannel OverlapChannel, int32 CollectionToCollideAgainst);
	static struct FMarinerProjectileFastOverlapListenerHandle RegisterProjectileFastOverlapListenerCapsuleVolume(const class UObject* WorldContextObject, class AActor* OverlapResponder, float Radius, float HalfHeight, const struct FVector& Location, const struct FRotator& Rotation, ECollisionChannel OverlapChannel, int32 CollectionToCollideAgainst);
	static struct FMarinerProjectileFastOverlapListenerHandle RegisterProjectileFastOverlapListenerSphereVolume(const class UObject* WorldContextObject, class AActor* OverlapResponder, float Radius, const struct FVector& Location, ECollisionChannel OverlapChannel, int32 CollectionToCollideAgainst);
	static void UnregisterProjectileFastOverlapListenerVolume(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle);
	static void UpdateProjectileFastOverlapListenerBoxVolume(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle, const struct FVector& Extents, const struct FVector& Location, const struct FRotator& Rotation);
	static void UpdateProjectileFastOverlapListenerCapsuleVolume(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle, float Radius, float HalfHeight, const struct FVector& Location, const struct FRotator& Rotation);
	static void UpdateProjectileFastOverlapListenerLocation(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle, const struct FVector& Location);
	static void UpdateProjectileFastOverlapListenerLocationAndRotation(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle, const struct FVector& Location, const struct FRotator& Rotation);
	static void UpdateProjectileFastOverlapListenerRotation(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle, const struct FRotator& Rotation);
	static void UpdateProjectileFastOverlapListenerSphereVolume(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle, float Radius, const struct FVector& Location);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFastCollisionUtils">();
	}
	static class UMarinerFastCollisionUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerFastCollisionUtils>();
	}
};
static_assert(alignof(UMarinerFastCollisionUtils) == 0x000008, "Wrong alignment on UMarinerFastCollisionUtils");
static_assert(sizeof(UMarinerFastCollisionUtils) == 0x000028, "Wrong size on UMarinerFastCollisionUtils");

// Class Mariner.MarinerCharacterLite
// 0x01C0 (0x03D8 - 0x0218)
class AMarinerCharacterLite : public AActor
{
public:
	uint8                                         Pad_16DA[0x8];                                     // 0x0218(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnSkinApplied;                                     // 0x0220(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         MaxSpinSpeed;                                      // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialHiddenTime;                                 // 0x0234(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwapSkinHiddenTime;                                // 0x0238(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeamColorMaterialParam;                            // 0x023C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16DB[0x4];                                     // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 CharacterMesh;                                     // 0x0250(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UAnimInstance>              CharacterMeshAnimBP;                               // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerSkinCollectionDataAsset*        DefaultSkinCollection;                             // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> CurrentSkinCollection;                             // 0x0268(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerSkinCollectionDataAsset*        LoadedSkinCollection;                              // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerSkinDataAsset*                  LoadedSkinData;                                    // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerSkinDataAsset*                  PreviousSkinDataAsset;                             // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerSkinDataAsset*                  DefaultSkinData;                                   // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 WeaponMesh;                                        // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UAnimInstance>              WeaponMeshAnimBP;                                  // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   WeaponAttachPoint;                                 // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMaterialInstanceDynamic*>       MeshMIDs;                                          // 0x02D0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UAkComponent*                           AkAudioComponent;                                  // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x02E8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableFidget;                                     // 0x0310(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableDizzy;                                      // 0x0311(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableTickle;                                     // 0x0312(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableGreeting;                                   // 0x0313(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableSkinChangedAnim;                            // 0x0314(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowInteractableBehavior;                        // 0x0315(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasPostGameResultsCameraXOffset;                  // 0x0316(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16DC[0xC1];                                    // 0x0317(0x00C1)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearGreetingsHistory();
	void ForceLoopingReturnTrail();
	const float GetPostGameResultsCameraXOffset();
	const float GetPostGameResultsCameraZOffset();
	bool PlayBlastOffMontage();
	bool PlayDefeatMontage();
	bool PlayDrawMontage();
	bool PlayVictoryMontage();
	void SetEnableDizzy(bool bEnable);
	void SetEnableFidget(bool bEnable);
	void SetEnableGreeting(bool bEnable);
	void SetEnableTickle(bool bEnable);
	void SetInteractableBehaviorAllowed(bool bAllowed);
	void SetIsLooping(bool bEnable);
	void SetPlayerState(class AMarinerPlayerState* NewPlayerState);
	void SetPreviewAnimationModeEnabled(bool bEnabled);

	class UCapsuleComponent* GetCapsuleComponent() const;
	TSoftClassPtr<class UClass> GetCharacterClass() const;
	class USkeletalMeshComponent* GetCharacterMesh() const;
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> GetCurrentSkinCollection() const;
	class AMarinerPlayerState* GetPlayerState() const;
	class USkeletalMeshComponent* GetWeaponMesh() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterLite">();
	}
	static class AMarinerCharacterLite* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerCharacterLite>();
	}
};
static_assert(alignof(AMarinerCharacterLite) == 0x000008, "Wrong alignment on AMarinerCharacterLite");
static_assert(sizeof(AMarinerCharacterLite) == 0x0003D8, "Wrong size on AMarinerCharacterLite");
static_assert(offsetof(AMarinerCharacterLite, OnSkinApplied) == 0x000220, "Member 'AMarinerCharacterLite::OnSkinApplied' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, MaxSpinSpeed) == 0x000230, "Member 'AMarinerCharacterLite::MaxSpinSpeed' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, InitialHiddenTime) == 0x000234, "Member 'AMarinerCharacterLite::InitialHiddenTime' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, SwapSkinHiddenTime) == 0x000238, "Member 'AMarinerCharacterLite::SwapSkinHiddenTime' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, TeamColorMaterialParam) == 0x00023C, "Member 'AMarinerCharacterLite::TeamColorMaterialParam' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, PlayerState) == 0x000248, "Member 'AMarinerCharacterLite::PlayerState' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, CharacterMesh) == 0x000250, "Member 'AMarinerCharacterLite::CharacterMesh' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, CharacterMeshAnimBP) == 0x000258, "Member 'AMarinerCharacterLite::CharacterMeshAnimBP' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, DefaultSkinCollection) == 0x000260, "Member 'AMarinerCharacterLite::DefaultSkinCollection' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, CurrentSkinCollection) == 0x000268, "Member 'AMarinerCharacterLite::CurrentSkinCollection' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, LoadedSkinCollection) == 0x000290, "Member 'AMarinerCharacterLite::LoadedSkinCollection' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, LoadedSkinData) == 0x000298, "Member 'AMarinerCharacterLite::LoadedSkinData' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, PreviousSkinDataAsset) == 0x0002A0, "Member 'AMarinerCharacterLite::PreviousSkinDataAsset' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, DefaultSkinData) == 0x0002A8, "Member 'AMarinerCharacterLite::DefaultSkinData' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, WeaponMesh) == 0x0002B0, "Member 'AMarinerCharacterLite::WeaponMesh' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, WeaponMeshAnimBP) == 0x0002B8, "Member 'AMarinerCharacterLite::WeaponMeshAnimBP' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, WeaponAttachPoint) == 0x0002C0, "Member 'AMarinerCharacterLite::WeaponAttachPoint' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, CapsuleComponent) == 0x0002C8, "Member 'AMarinerCharacterLite::CapsuleComponent' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, MeshMIDs) == 0x0002D0, "Member 'AMarinerCharacterLite::MeshMIDs' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, AkAudioComponent) == 0x0002E0, "Member 'AMarinerCharacterLite::AkAudioComponent' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, CharacterClass) == 0x0002E8, "Member 'AMarinerCharacterLite::CharacterClass' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, bEnableFidget) == 0x000310, "Member 'AMarinerCharacterLite::bEnableFidget' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, bEnableDizzy) == 0x000311, "Member 'AMarinerCharacterLite::bEnableDizzy' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, bEnableTickle) == 0x000312, "Member 'AMarinerCharacterLite::bEnableTickle' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, bEnableGreeting) == 0x000313, "Member 'AMarinerCharacterLite::bEnableGreeting' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, bEnableSkinChangedAnim) == 0x000314, "Member 'AMarinerCharacterLite::bEnableSkinChangedAnim' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, bAllowInteractableBehavior) == 0x000315, "Member 'AMarinerCharacterLite::bAllowInteractableBehavior' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterLite, bHasPostGameResultsCameraXOffset) == 0x000316, "Member 'AMarinerCharacterLite::bHasPostGameResultsCameraXOffset' has a wrong offset!");

// Class Mariner.MarinerCharacterLiteGlobals
// 0x0040 (0x0070 - 0x0030)
class UMarinerCharacterLiteGlobals final : public UDataAsset
{
public:
	struct FMarinerInteractableData               InteractableData;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DizzyAnimationVelocity_Mouse;                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DizzyAnimationVelocity_Controller;                 // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DizzyDecaySpeed_Mouse;                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DizzyDecaySpeed_Controller;                        // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DizzyDecayDelay;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TickleAnimationTriggerCount;                       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickleMaxDelayBetweenClicks;                       // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickleMaxDragAmount;                               // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FidgetAnimationDelayRange;                         // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RotationReturnCurve;                               // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyShowdownAnimationDelay;                       // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16DD[0x4];                                     // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterLiteGlobals">();
	}
	static class UMarinerCharacterLiteGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterLiteGlobals>();
	}
};
static_assert(alignof(UMarinerCharacterLiteGlobals) == 0x000008, "Wrong alignment on UMarinerCharacterLiteGlobals");
static_assert(sizeof(UMarinerCharacterLiteGlobals) == 0x000070, "Wrong size on UMarinerCharacterLiteGlobals");
static_assert(offsetof(UMarinerCharacterLiteGlobals, InteractableData) == 0x000030, "Member 'UMarinerCharacterLiteGlobals::InteractableData' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterLiteGlobals, DizzyAnimationVelocity_Mouse) == 0x000038, "Member 'UMarinerCharacterLiteGlobals::DizzyAnimationVelocity_Mouse' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterLiteGlobals, DizzyAnimationVelocity_Controller) == 0x00003C, "Member 'UMarinerCharacterLiteGlobals::DizzyAnimationVelocity_Controller' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterLiteGlobals, DizzyDecaySpeed_Mouse) == 0x000040, "Member 'UMarinerCharacterLiteGlobals::DizzyDecaySpeed_Mouse' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterLiteGlobals, DizzyDecaySpeed_Controller) == 0x000044, "Member 'UMarinerCharacterLiteGlobals::DizzyDecaySpeed_Controller' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterLiteGlobals, DizzyDecayDelay) == 0x000048, "Member 'UMarinerCharacterLiteGlobals::DizzyDecayDelay' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterLiteGlobals, TickleAnimationTriggerCount) == 0x00004C, "Member 'UMarinerCharacterLiteGlobals::TickleAnimationTriggerCount' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterLiteGlobals, TickleMaxDelayBetweenClicks) == 0x000050, "Member 'UMarinerCharacterLiteGlobals::TickleMaxDelayBetweenClicks' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterLiteGlobals, TickleMaxDragAmount) == 0x000054, "Member 'UMarinerCharacterLiteGlobals::TickleMaxDragAmount' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterLiteGlobals, FidgetAnimationDelayRange) == 0x000058, "Member 'UMarinerCharacterLiteGlobals::FidgetAnimationDelayRange' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterLiteGlobals, RotationReturnCurve) == 0x000060, "Member 'UMarinerCharacterLiteGlobals::RotationReturnCurve' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterLiteGlobals, EnemyShowdownAnimationDelay) == 0x000068, "Member 'UMarinerCharacterLiteGlobals::EnemyShowdownAnimationDelay' has a wrong offset!");

// Class Mariner.MarinerCharacterManager
// 0x0030 (0x0058 - 0x0028)
class UMarinerCharacterManager final : public UObject
{
public:
	TArray<TSoftClassPtr<class UClass>>           FreeRotationCharacters;                            // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UMarinerGameInstance*                   MarinerGameInstance;                               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AMarinerCharacter*>              LoadedCharacters;                                  // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16DE[0x8];                                     // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsCharacterOnFreeRotation(const TSoftClassPtr<class UClass>& CharacterClass) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterManager">();
	}
	static class UMarinerCharacterManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterManager>();
	}
};
static_assert(alignof(UMarinerCharacterManager) == 0x000008, "Wrong alignment on UMarinerCharacterManager");
static_assert(sizeof(UMarinerCharacterManager) == 0x000058, "Wrong size on UMarinerCharacterManager");
static_assert(offsetof(UMarinerCharacterManager, FreeRotationCharacters) == 0x000028, "Member 'UMarinerCharacterManager::FreeRotationCharacters' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterManager, MarinerGameInstance) == 0x000038, "Member 'UMarinerCharacterManager::MarinerGameInstance' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterManager, LoadedCharacters) == 0x000040, "Member 'UMarinerCharacterManager::LoadedCharacters' has a wrong offset!");

// Class Mariner.MarinerCharacterMontage
// 0x0010 (0x0040 - 0x0030)
class UMarinerCharacterMontage : public UDataAsset
{
public:
	class UAnimMontage*                           FirstPersonMontage;                                // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ThirdPersonMontage;                                // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool Contains(const class UAnimMontage* Montage) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterMontage">();
	}
	static class UMarinerCharacterMontage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterMontage>();
	}
};
static_assert(alignof(UMarinerCharacterMontage) == 0x000008, "Wrong alignment on UMarinerCharacterMontage");
static_assert(sizeof(UMarinerCharacterMontage) == 0x000040, "Wrong size on UMarinerCharacterMontage");
static_assert(offsetof(UMarinerCharacterMontage, FirstPersonMontage) == 0x000030, "Member 'UMarinerCharacterMontage::FirstPersonMontage' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMontage, ThirdPersonMontage) == 0x000038, "Member 'UMarinerCharacterMontage::ThirdPersonMontage' has a wrong offset!");

// Class Mariner.MarinerFrontEndGlobals
// 0x0028 (0x0058 - 0x0030)
class UMarinerFrontEndGlobals final : public UDataAsset
{
public:
	class UMarinerStoreGlobals*                   StoreGlobals;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerNewsGlobals*                    NewsGlobals;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPlaylistGlobals*                PlaylistGlobals;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UMarinerCharacterUIData>> CharacterUIDatas;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	class UMarinerNewsGlobals* GetNewsGlobals() const;
	class UMarinerPlaylistGlobals* GetPlaylistGlobals() const;
	class UMarinerStoreGlobals* GetStoreGlobals() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFrontEndGlobals">();
	}
	static class UMarinerFrontEndGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerFrontEndGlobals>();
	}
};
static_assert(alignof(UMarinerFrontEndGlobals) == 0x000008, "Wrong alignment on UMarinerFrontEndGlobals");
static_assert(sizeof(UMarinerFrontEndGlobals) == 0x000058, "Wrong size on UMarinerFrontEndGlobals");
static_assert(offsetof(UMarinerFrontEndGlobals, StoreGlobals) == 0x000030, "Member 'UMarinerFrontEndGlobals::StoreGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerFrontEndGlobals, NewsGlobals) == 0x000038, "Member 'UMarinerFrontEndGlobals::NewsGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerFrontEndGlobals, PlaylistGlobals) == 0x000040, "Member 'UMarinerFrontEndGlobals::PlaylistGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerFrontEndGlobals, CharacterUIDatas) == 0x000048, "Member 'UMarinerFrontEndGlobals::CharacterUIDatas' has a wrong offset!");

// Class Mariner.MarinerCharacterMovement
// 0x06B0 (0x0DA0 - 0x06F0)
class UMarinerCharacterMovement final : public UCharacterMovementComponent
{
public:
	uint8                                         Pad_16E1[0xD8];                                    // 0x06F0(0x00D8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerMoveUpdate                     CurrentMoveUpdateBucket;                           // 0x07C8(0x0090)(Protected, NativeAccessSpecifierProtected)
	float                                         MoveUpdateLifetime;                                // 0x0858(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerForceClientMoveTime;                         // 0x085C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClientSendMoveUpdateBatchTime;                     // 0x0860(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultCharacterMovementTickInterval;              // 0x0864(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16E2[0x18];                                    // 0x0868(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveUpdateLifetime_ClientBuffer;                   // 0x0880(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxImpulseMagnitudeSqrAllowDelayMove;              // 0x0884(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumMoveDeltaTime;                              // 0x0888(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaximumMoveDeltaTime;                              // 0x088C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarinerCharacter*                      MarinerCharacterOwner;                             // 0x0890(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMoveUpdate_ApplyRecoveryDefaults> ApplyRecoveryDefaults;                             // 0x0898(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerGameplayEffect_DisableDynamicGravityFrictionAndBraking> DisableDynamicGravityFrictionAndBrakingEffect;     // 0x08A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerCharacterMovementAttributes*    MovementAttributes;                                // 0x08A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMarinerAirJumpProperties>      AirJumps;                                          // 0x08B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         MaximumSameDirectionJumpVelocity;                  // 0x08C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16E3[0x4];                                     // 0x08C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          JumpAudioEvent;                                    // 0x08C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GroundJumpWhileFallingMaxLedgeDistanceSquared;     // 0x08D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16E4[0x14];                                    // 0x08D4(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            JumpGravityScalarCurve;                            // 0x08E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            BlastedAirborneAscendingGravityScalarCurve;        // 0x08F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            BlastedAirborneHitStunGravityScalarCurve;          // 0x08F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            SelfBlastedAirborneAscendingGravityScalarCurve;    // 0x0900(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBotsUseSeperateJumps;                             // 0x0908(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16E5[0x3];                                     // 0x0909(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BotJumpZVelocity;                                  // 0x090C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMarinerAirJumpProperties>      BotAirJumps;                                       // 0x0910(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bBotsUseConsistentRocketJumps;                     // 0x0920(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16E6[0x3];                                     // 0x0921(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BotRocketJumpImpulseMagnitude;                     // 0x0924(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveVector*                           LaunchDirectionOverrideCurveFromDot;               // 0x0928(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxAirJumpZVelocityToMaintain;                     // 0x0930(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BlastedAirborneDescendingGravityScalar;            // 0x0934(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SelfBlastedAirborneDescendingGravityScalar;        // 0x0938(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MegablastTimeDilation;                             // 0x093C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MegablastTimeDilationLength;                       // 0x0940(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MegablastCameraArmLength;                          // 0x0944(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MegaBlastCamBlendTime;                             // 0x0948(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MegaBlastCamBlendExp;                              // 0x094C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ExitUnsuccessfulMegaBlastCamBlendTime;             // 0x0950(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EViewTargetBlendFunction                      ExitUnsuccessfulMegaBlastCamBlendFunction;         // 0x0954(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16E7[0x3];                                     // 0x0955(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExitUnsuccessfulMegaBlastCamBlendExp;              // 0x0958(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MegablastCameraBounceRotationSpeed;                // 0x095C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MegablastCameraRotationSpeedNotBouncing;           // 0x0960(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MegablastCameraLookDistance;                       // 0x0964(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                MegablastCameraOffSet;                             // 0x0968(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16E8[0x20];                                    // 0x0974(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MegablastTimerUpdateFrequency;                     // 0x0994(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MegablastSpeed;                                    // 0x0998(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BestMegablastDirectionTiltAngle;                   // 0x099C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BestMegablastDirectionTiltAngle_IntialLeftRight;   // 0x09A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseLeftRightMegablastDirectionOptionsOnInitialMegablast; // 0x09A4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16E9[0x3];                                     // 0x09A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BestMegablastRedundantImpactAvoidanceDistanceTolerance; // 0x09A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BestMegablastRedundantImpactAvoidanceDistanceSquaredTolerance; // 0x09AC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BestMegablastRedundantImpactAvoidanceDotTolerance; // 0x09B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16EA[0x4];                                     // 0x09B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MegablastBounceLimit;                              // 0x09B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MegablastBouncesBeforeMegaBlastDirectorVolumeUse;  // 0x09BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DebugOverrideMinTimeBetweenTimeStampResets;        // 0x09C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16EB[0xC];                                     // 0x09C4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BestMegablastDirection;                            // 0x09D0(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16EC[0x4];                                     // 0x09DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           MegablastTimeDilationTimer;                        // 0x09E0(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           HitStunTimer;                                      // 0x09E8(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           MegablastTimer;                                    // 0x09F0(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            CharacterHitStunTimeCurve;                         // 0x09F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumVelocityDotUpToClampZSpeedOnHitStunRemove;  // 0x0A00(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ZVelocityRatioMaintainedOnHitStunRemove;           // 0x0A04(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ZVelocityMaxMaintainedOnHitStunRemove;             // 0x0A08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumVelocityDotUpToClampXYSpeedOnHitStunRemove; // 0x0A0C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         XYVelocityRatioMaintainedOnHitStunRemove;          // 0x0A10(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         XYVelocityMaxMaintainedOnHitStunRemove;            // 0x0A14(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VelocityMaxMaintainedOnHitStunRemove;              // 0x0A18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16ED[0x4];                                     // 0x0A1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            HitStunGameplayEffectType;                         // 0x0A20(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BounceFriction;                                    // 0x0A28(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Bounciness;                                        // 0x0A2C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxBounceSpeed;                                    // 0x0A30(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VerticalityDampenerZRatioClamp;                    // 0x0A34(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NearSlideBounceBufferDegrees;                      // 0x0A38(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BounceVsSlideDotZeroTolerance;                     // 0x0A3C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxAirStepHeight;                                  // 0x0A40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AirStepUpSpeed;                                    // 0x0A44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxAirStepUpSpeed;                                 // 0x0A48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxAirStepSimulationDistance;                      // 0x0A4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UGameplayEffect>>    DebugWatchMoveAffectingGEs;                        // 0x0A50(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_16EE[0x154];                                   // 0x0A60(0x0154)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsBlastedAirborneGravityActive;                   // 0x0BB4(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWasMostRecentLaunchByHostileDamage;               // 0x0BB5(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldBounceOffSurfaces;                          // 0x0BB6(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldBounceOffFloors;                            // 0x0BB7(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16EF[0x4];                                     // 0x0BB8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentZForceFromJump;                             // 0x0BBC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseHitStunRemovalSpeedClampOnMegablastRemove;     // 0x0BC0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16F0[0x3];                                     // 0x0BC1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfInflictedLaunchJumpZDampeningRatio;            // 0x0BC4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HostileLaunchJumpZDampeningRatio;                  // 0x0BC8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClampSelfImpulseVelocityThreshold;                 // 0x0BCC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentZForceFromSelfInflictedImpulse;             // 0x0BD0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxSelfInflictedZForce;                            // 0x0BD4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PracticallyGroundedDistanceFromFloor;              // 0x0BD8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerCardinalDirection                     CurrentCardinalDirection;                          // 0x0BDC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16F1[0x3];                                     // 0x0BDD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerCardinalOffsets                CardinalOffsetsToVelocity;                         // 0x0BE0(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         NorthernCardinalAngle;                             // 0x0BF0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DelayUntilStandingStill;                           // 0x0BF4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16F2[0x4];                                     // 0x0BF8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsStandingStill;                                  // 0x0BFC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16F3[0xB];                                     // 0x0BFD(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnBounceDelegate;                                  // 0x0C08(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnBounceLaunchedDelegate;                          // 0x0C18(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnLaunchedDelegate;                                // 0x0C28(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnHitStunAppliedDelegate;                          // 0x0C38(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnHitStunRemovedDelegate;                          // 0x0C48(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMegablastAppliedDelegate;                        // 0x0C58(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMegablastRemovedDelegate;                        // 0x0C68(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMegablastPostTimeDilationDelegate;               // 0x0C78(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnImpendingMegablast;                              // 0x0C88(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMoveUpdateRootMotionAppliedDelegate;             // 0x0C98(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMoveUpdateRootMotionManuallyRemovedDelegate;     // 0x0CA8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMoveUpdateDataUsedDelegate;                      // 0x0CB8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMoveAffectingGameplayEffectAppliedDelegate;      // 0x0CC8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMoveAffectingGameplayEffectAppliedDuringReplayDelegate; // 0x0CD8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMoveAffectingGameplayEffectRemovedDelegate;      // 0x0CE8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMoveAffectingGameplayEffectRemovedDuringReplayDelegate; // 0x0CF8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMovementUpdatedDelegate;                         // 0x0D08(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCurrentJumpCountChanged;                         // 0x0D18(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnJumped;                                          // 0x0D28(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnRocketJump;                                      // 0x0D38(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCharacterPivot;                                  // 0x0D48(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCardinalDirectionChanged;                        // 0x0D58(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_16F4[0x38];                                    // 0x0D68(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyHitStun(float HitStunDuration);
	void ApplyLerpToSpeedRootMotion(TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed> Defaults, float OverrideDuration, float OverrideExtendedDurationOnStop, class UCurveFloat* OverrideVelocityChangeOverTimeCurve, float OverrideStartingVelocityMagnitude, float OverrideTargetVelocityMagnitude, EMarinerLerpToSpeedRootMotionPolicy OverrideLerpTowardsTargetPolicy);
	void ApplyMegablast();
	void ApplyMoveToDynamicForceRootMotion(TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce> Defaults, const struct FVector& StartLocation, const struct FVector& TargetLocation, bool bGetStartLocationFromCharacter, float OverrideDuration, bool bOverrideRestrictSpeedToExpected, class UCurveVector* OverridePathOffsetCurve, class UCurveFloat* OverrideTimeMappingCurve, ERootMotionAccumulateMode OverrideAccumulateMode, ERootMotionFinishVelocityMode OverrideFinishVelocityParams_Mode, float OverrideFinishVelocityParams_ClampVelocity, const struct FVector& OverrideFinishVelocityParams_SetVelocity);
	void ApplyRecoveryLocal();
	void ApplySlowToStopRootMotion(TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_SlowToStop> Defaults, float OverrideDuration, class UCurveFloat* OverrideDecelerationCurve, float OverrideStartingSpeed);
	void AuthorityRemoveRootMotionSourceByID(int32 RootMotionSourceID);
	void AuthoritySetDisableDynamicGravityFrictionAndBraking(bool bIsDisabled);
	void ConsumeClientSendMoveUpdateBatch();
	bool IsRootMotionSourceActive(int32 RootMotionSourceID);
	void LocallyPlayMegablastBounceSFX();
	void MulticastLerpBetweenPoints(class FName MotionName, const struct FVector_NetQuantize& PositionAtZero, const struct FNonQuantizedRotator& RotationAtZero, const struct FVector_NetQuantize& PositionAtOne, const struct FNonQuantizedRotator& RotationAtOne, class UCurveFloat* LerpCurve, bool bOverrideMegablasts);
	void MulticastMegablastApplied(class AMarinerPlayerState* MegablastInstigator);
	void MulticastMegablastRemoved();
	void MulticastMoveAlongCharacterSpline_ArenaReturn(class FName MotionName, int32 AssignedSplineID, class UCurveFloat* CharacterMovementStartCurve, class UCurveFloat* CharacterMovementEndCurve, float CharacterEndRotationBlendTime);
	void MulticastRemoveRootMotionSource(class FName MotionName);
	void MulticastSlowToStop(class FName MotionName, float DecelerationTime, class UCurveFloat* DecelerationCurve);
	void OnMegablastBounce(const struct FHitResult& BounceHitResult, bool bIsMegaBlastBouncing);
	void OnOwnerCharacterRecoveredAuthority();
	void RemoveHitStun();
	void RemoveMegablast();
	void RemoveMegablastTimeDilation();
	void RemoveRootMotion(class FName RootMotionName);
	void RemoveRootMotionSourceByNameLocal(class FName MotionName);
	void ResetAirborneJumpCount();
	void ResetAirborneJumpCountLocal();
	int32 RootMotionLerpBetweenPoints(class FName MotionName, const struct FVector& PositionAtZero, const struct FNonQuantizedRotator& RotationAtZero, const struct FVector& PositionAtOne, const struct FNonQuantizedRotator& RotationAtOne, class UCurveFloat* LerpCurve, bool bOverrideMegablasts);
	int32 RootMotionMoveAlongCharacterSpline_ArenaReturn(class FName MotionName, int32 AssignedSplineID, class UCurveFloat* CharacterMovementStartCurve, class UCurveFloat* CharacterMovementEndCurve, float CharacterEndArenaReturnRotationBlendTime);
	int32 RootMotionSlowToStop(class FName MotionName, float DecelerationTime, class UCurveFloat* DecelerationCurve);
	void ServerMoveFlowUpdateTimerExpired();
	void SetDodgeState(bool bInIsDodgeActive);
	void SetMegablastLookRotation(float DeltaTime);
	void SimulatedClientPlayMegablastBounceSFX();

	float GetBlastedAirborneDescendingGravityScalar() const;
	float GetCurrentClientTime() const;
	float GetGravityScale() const;
	float GetLaunchMagnitudeMultiplier() const;
	class AMarinerCharacter* GetMarinerCharacterOwner() const;
	int32 GetMaxJumpCount() const;
	struct FRotator GetMegablastRotation() const;
	float GetMegablastSpeed() const;
	float GetMoveRearwardInputScaleMultiplier() const;
	float GetSelfBlastedAirborneDescendingGravityScalar() const;
	bool HasOwnerAuthority() const;
	bool InGroundJumpWhileFallingGracePeriod() const;
	bool InOverrideRootMotion() const;
	bool IsDynamicGravityBrakingAndFrictionDisabled() const;
	bool IsHitStunActiveOrPendingApply() const;
	bool IsHitStunned() const;
	bool IsHitStunPendingApply() const;
	bool IsMoveAffectingGameplayEffectPendingApply(TSubclassOf<class UGameplayEffect> Effect, int32* OutPendingCount) const;
	bool IsMoveAffectingGameplayEffectPendingRemove(TSubclassOf<class UGameplayEffect> Effect, int32* OutPendingCount) const;
	bool IsOwnerLocallyControlled() const;
	bool IsReplayingMoves() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterMovement">();
	}
	static class UMarinerCharacterMovement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterMovement>();
	}
};
static_assert(alignof(UMarinerCharacterMovement) == 0x000010, "Wrong alignment on UMarinerCharacterMovement");
static_assert(sizeof(UMarinerCharacterMovement) == 0x000DA0, "Wrong size on UMarinerCharacterMovement");
static_assert(offsetof(UMarinerCharacterMovement, CurrentMoveUpdateBucket) == 0x0007C8, "Member 'UMarinerCharacterMovement::CurrentMoveUpdateBucket' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MoveUpdateLifetime) == 0x000858, "Member 'UMarinerCharacterMovement::MoveUpdateLifetime' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, ServerForceClientMoveTime) == 0x00085C, "Member 'UMarinerCharacterMovement::ServerForceClientMoveTime' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, ClientSendMoveUpdateBatchTime) == 0x000860, "Member 'UMarinerCharacterMovement::ClientSendMoveUpdateBatchTime' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, DefaultCharacterMovementTickInterval) == 0x000864, "Member 'UMarinerCharacterMovement::DefaultCharacterMovementTickInterval' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MoveUpdateLifetime_ClientBuffer) == 0x000880, "Member 'UMarinerCharacterMovement::MoveUpdateLifetime_ClientBuffer' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MaxImpulseMagnitudeSqrAllowDelayMove) == 0x000884, "Member 'UMarinerCharacterMovement::MaxImpulseMagnitudeSqrAllowDelayMove' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MinimumMoveDeltaTime) == 0x000888, "Member 'UMarinerCharacterMovement::MinimumMoveDeltaTime' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MaximumMoveDeltaTime) == 0x00088C, "Member 'UMarinerCharacterMovement::MaximumMoveDeltaTime' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MarinerCharacterOwner) == 0x000890, "Member 'UMarinerCharacterMovement::MarinerCharacterOwner' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, ApplyRecoveryDefaults) == 0x000898, "Member 'UMarinerCharacterMovement::ApplyRecoveryDefaults' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, DisableDynamicGravityFrictionAndBrakingEffect) == 0x0008A0, "Member 'UMarinerCharacterMovement::DisableDynamicGravityFrictionAndBrakingEffect' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MovementAttributes) == 0x0008A8, "Member 'UMarinerCharacterMovement::MovementAttributes' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, AirJumps) == 0x0008B0, "Member 'UMarinerCharacterMovement::AirJumps' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MaximumSameDirectionJumpVelocity) == 0x0008C0, "Member 'UMarinerCharacterMovement::MaximumSameDirectionJumpVelocity' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, JumpAudioEvent) == 0x0008C8, "Member 'UMarinerCharacterMovement::JumpAudioEvent' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, GroundJumpWhileFallingMaxLedgeDistanceSquared) == 0x0008D0, "Member 'UMarinerCharacterMovement::GroundJumpWhileFallingMaxLedgeDistanceSquared' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, JumpGravityScalarCurve) == 0x0008E8, "Member 'UMarinerCharacterMovement::JumpGravityScalarCurve' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, BlastedAirborneAscendingGravityScalarCurve) == 0x0008F0, "Member 'UMarinerCharacterMovement::BlastedAirborneAscendingGravityScalarCurve' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, BlastedAirborneHitStunGravityScalarCurve) == 0x0008F8, "Member 'UMarinerCharacterMovement::BlastedAirborneHitStunGravityScalarCurve' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, SelfBlastedAirborneAscendingGravityScalarCurve) == 0x000900, "Member 'UMarinerCharacterMovement::SelfBlastedAirborneAscendingGravityScalarCurve' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, bBotsUseSeperateJumps) == 0x000908, "Member 'UMarinerCharacterMovement::bBotsUseSeperateJumps' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, BotJumpZVelocity) == 0x00090C, "Member 'UMarinerCharacterMovement::BotJumpZVelocity' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, BotAirJumps) == 0x000910, "Member 'UMarinerCharacterMovement::BotAirJumps' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, bBotsUseConsistentRocketJumps) == 0x000920, "Member 'UMarinerCharacterMovement::bBotsUseConsistentRocketJumps' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, BotRocketJumpImpulseMagnitude) == 0x000924, "Member 'UMarinerCharacterMovement::BotRocketJumpImpulseMagnitude' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, LaunchDirectionOverrideCurveFromDot) == 0x000928, "Member 'UMarinerCharacterMovement::LaunchDirectionOverrideCurveFromDot' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MaxAirJumpZVelocityToMaintain) == 0x000930, "Member 'UMarinerCharacterMovement::MaxAirJumpZVelocityToMaintain' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, BlastedAirborneDescendingGravityScalar) == 0x000934, "Member 'UMarinerCharacterMovement::BlastedAirborneDescendingGravityScalar' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, SelfBlastedAirborneDescendingGravityScalar) == 0x000938, "Member 'UMarinerCharacterMovement::SelfBlastedAirborneDescendingGravityScalar' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MegablastTimeDilation) == 0x00093C, "Member 'UMarinerCharacterMovement::MegablastTimeDilation' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MegablastTimeDilationLength) == 0x000940, "Member 'UMarinerCharacterMovement::MegablastTimeDilationLength' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MegablastCameraArmLength) == 0x000944, "Member 'UMarinerCharacterMovement::MegablastCameraArmLength' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MegaBlastCamBlendTime) == 0x000948, "Member 'UMarinerCharacterMovement::MegaBlastCamBlendTime' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MegaBlastCamBlendExp) == 0x00094C, "Member 'UMarinerCharacterMovement::MegaBlastCamBlendExp' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, ExitUnsuccessfulMegaBlastCamBlendTime) == 0x000950, "Member 'UMarinerCharacterMovement::ExitUnsuccessfulMegaBlastCamBlendTime' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, ExitUnsuccessfulMegaBlastCamBlendFunction) == 0x000954, "Member 'UMarinerCharacterMovement::ExitUnsuccessfulMegaBlastCamBlendFunction' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, ExitUnsuccessfulMegaBlastCamBlendExp) == 0x000958, "Member 'UMarinerCharacterMovement::ExitUnsuccessfulMegaBlastCamBlendExp' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MegablastCameraBounceRotationSpeed) == 0x00095C, "Member 'UMarinerCharacterMovement::MegablastCameraBounceRotationSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MegablastCameraRotationSpeedNotBouncing) == 0x000960, "Member 'UMarinerCharacterMovement::MegablastCameraRotationSpeedNotBouncing' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MegablastCameraLookDistance) == 0x000964, "Member 'UMarinerCharacterMovement::MegablastCameraLookDistance' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MegablastCameraOffSet) == 0x000968, "Member 'UMarinerCharacterMovement::MegablastCameraOffSet' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MegablastTimerUpdateFrequency) == 0x000994, "Member 'UMarinerCharacterMovement::MegablastTimerUpdateFrequency' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MegablastSpeed) == 0x000998, "Member 'UMarinerCharacterMovement::MegablastSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, BestMegablastDirectionTiltAngle) == 0x00099C, "Member 'UMarinerCharacterMovement::BestMegablastDirectionTiltAngle' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, BestMegablastDirectionTiltAngle_IntialLeftRight) == 0x0009A0, "Member 'UMarinerCharacterMovement::BestMegablastDirectionTiltAngle_IntialLeftRight' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, bUseLeftRightMegablastDirectionOptionsOnInitialMegablast) == 0x0009A4, "Member 'UMarinerCharacterMovement::bUseLeftRightMegablastDirectionOptionsOnInitialMegablast' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, BestMegablastRedundantImpactAvoidanceDistanceTolerance) == 0x0009A8, "Member 'UMarinerCharacterMovement::BestMegablastRedundantImpactAvoidanceDistanceTolerance' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, BestMegablastRedundantImpactAvoidanceDistanceSquaredTolerance) == 0x0009AC, "Member 'UMarinerCharacterMovement::BestMegablastRedundantImpactAvoidanceDistanceSquaredTolerance' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, BestMegablastRedundantImpactAvoidanceDotTolerance) == 0x0009B0, "Member 'UMarinerCharacterMovement::BestMegablastRedundantImpactAvoidanceDotTolerance' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MegablastBounceLimit) == 0x0009B8, "Member 'UMarinerCharacterMovement::MegablastBounceLimit' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MegablastBouncesBeforeMegaBlastDirectorVolumeUse) == 0x0009BC, "Member 'UMarinerCharacterMovement::MegablastBouncesBeforeMegaBlastDirectorVolumeUse' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, DebugOverrideMinTimeBetweenTimeStampResets) == 0x0009C0, "Member 'UMarinerCharacterMovement::DebugOverrideMinTimeBetweenTimeStampResets' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, BestMegablastDirection) == 0x0009D0, "Member 'UMarinerCharacterMovement::BestMegablastDirection' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MegablastTimeDilationTimer) == 0x0009E0, "Member 'UMarinerCharacterMovement::MegablastTimeDilationTimer' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, HitStunTimer) == 0x0009E8, "Member 'UMarinerCharacterMovement::HitStunTimer' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MegablastTimer) == 0x0009F0, "Member 'UMarinerCharacterMovement::MegablastTimer' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, CharacterHitStunTimeCurve) == 0x0009F8, "Member 'UMarinerCharacterMovement::CharacterHitStunTimeCurve' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MinimumVelocityDotUpToClampZSpeedOnHitStunRemove) == 0x000A00, "Member 'UMarinerCharacterMovement::MinimumVelocityDotUpToClampZSpeedOnHitStunRemove' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, ZVelocityRatioMaintainedOnHitStunRemove) == 0x000A04, "Member 'UMarinerCharacterMovement::ZVelocityRatioMaintainedOnHitStunRemove' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, ZVelocityMaxMaintainedOnHitStunRemove) == 0x000A08, "Member 'UMarinerCharacterMovement::ZVelocityMaxMaintainedOnHitStunRemove' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MinimumVelocityDotUpToClampXYSpeedOnHitStunRemove) == 0x000A0C, "Member 'UMarinerCharacterMovement::MinimumVelocityDotUpToClampXYSpeedOnHitStunRemove' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, XYVelocityRatioMaintainedOnHitStunRemove) == 0x000A10, "Member 'UMarinerCharacterMovement::XYVelocityRatioMaintainedOnHitStunRemove' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, XYVelocityMaxMaintainedOnHitStunRemove) == 0x000A14, "Member 'UMarinerCharacterMovement::XYVelocityMaxMaintainedOnHitStunRemove' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, VelocityMaxMaintainedOnHitStunRemove) == 0x000A18, "Member 'UMarinerCharacterMovement::VelocityMaxMaintainedOnHitStunRemove' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, HitStunGameplayEffectType) == 0x000A20, "Member 'UMarinerCharacterMovement::HitStunGameplayEffectType' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, BounceFriction) == 0x000A28, "Member 'UMarinerCharacterMovement::BounceFriction' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, Bounciness) == 0x000A2C, "Member 'UMarinerCharacterMovement::Bounciness' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MaxBounceSpeed) == 0x000A30, "Member 'UMarinerCharacterMovement::MaxBounceSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, VerticalityDampenerZRatioClamp) == 0x000A34, "Member 'UMarinerCharacterMovement::VerticalityDampenerZRatioClamp' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, NearSlideBounceBufferDegrees) == 0x000A38, "Member 'UMarinerCharacterMovement::NearSlideBounceBufferDegrees' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, BounceVsSlideDotZeroTolerance) == 0x000A3C, "Member 'UMarinerCharacterMovement::BounceVsSlideDotZeroTolerance' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MaxAirStepHeight) == 0x000A40, "Member 'UMarinerCharacterMovement::MaxAirStepHeight' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, AirStepUpSpeed) == 0x000A44, "Member 'UMarinerCharacterMovement::AirStepUpSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MaxAirStepUpSpeed) == 0x000A48, "Member 'UMarinerCharacterMovement::MaxAirStepUpSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MaxAirStepSimulationDistance) == 0x000A4C, "Member 'UMarinerCharacterMovement::MaxAirStepSimulationDistance' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, DebugWatchMoveAffectingGEs) == 0x000A50, "Member 'UMarinerCharacterMovement::DebugWatchMoveAffectingGEs' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, bIsBlastedAirborneGravityActive) == 0x000BB4, "Member 'UMarinerCharacterMovement::bIsBlastedAirborneGravityActive' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, bWasMostRecentLaunchByHostileDamage) == 0x000BB5, "Member 'UMarinerCharacterMovement::bWasMostRecentLaunchByHostileDamage' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, bShouldBounceOffSurfaces) == 0x000BB6, "Member 'UMarinerCharacterMovement::bShouldBounceOffSurfaces' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, bShouldBounceOffFloors) == 0x000BB7, "Member 'UMarinerCharacterMovement::bShouldBounceOffFloors' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, CurrentZForceFromJump) == 0x000BBC, "Member 'UMarinerCharacterMovement::CurrentZForceFromJump' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, bUseHitStunRemovalSpeedClampOnMegablastRemove) == 0x000BC0, "Member 'UMarinerCharacterMovement::bUseHitStunRemovalSpeedClampOnMegablastRemove' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, SelfInflictedLaunchJumpZDampeningRatio) == 0x000BC4, "Member 'UMarinerCharacterMovement::SelfInflictedLaunchJumpZDampeningRatio' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, HostileLaunchJumpZDampeningRatio) == 0x000BC8, "Member 'UMarinerCharacterMovement::HostileLaunchJumpZDampeningRatio' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, ClampSelfImpulseVelocityThreshold) == 0x000BCC, "Member 'UMarinerCharacterMovement::ClampSelfImpulseVelocityThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, CurrentZForceFromSelfInflictedImpulse) == 0x000BD0, "Member 'UMarinerCharacterMovement::CurrentZForceFromSelfInflictedImpulse' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, MaxSelfInflictedZForce) == 0x000BD4, "Member 'UMarinerCharacterMovement::MaxSelfInflictedZForce' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, PracticallyGroundedDistanceFromFloor) == 0x000BD8, "Member 'UMarinerCharacterMovement::PracticallyGroundedDistanceFromFloor' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, CurrentCardinalDirection) == 0x000BDC, "Member 'UMarinerCharacterMovement::CurrentCardinalDirection' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, CardinalOffsetsToVelocity) == 0x000BE0, "Member 'UMarinerCharacterMovement::CardinalOffsetsToVelocity' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, NorthernCardinalAngle) == 0x000BF0, "Member 'UMarinerCharacterMovement::NorthernCardinalAngle' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, DelayUntilStandingStill) == 0x000BF4, "Member 'UMarinerCharacterMovement::DelayUntilStandingStill' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, bIsStandingStill) == 0x000BFC, "Member 'UMarinerCharacterMovement::bIsStandingStill' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnBounceDelegate) == 0x000C08, "Member 'UMarinerCharacterMovement::OnBounceDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnBounceLaunchedDelegate) == 0x000C18, "Member 'UMarinerCharacterMovement::OnBounceLaunchedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnLaunchedDelegate) == 0x000C28, "Member 'UMarinerCharacterMovement::OnLaunchedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnHitStunAppliedDelegate) == 0x000C38, "Member 'UMarinerCharacterMovement::OnHitStunAppliedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnHitStunRemovedDelegate) == 0x000C48, "Member 'UMarinerCharacterMovement::OnHitStunRemovedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnMegablastAppliedDelegate) == 0x000C58, "Member 'UMarinerCharacterMovement::OnMegablastAppliedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnMegablastRemovedDelegate) == 0x000C68, "Member 'UMarinerCharacterMovement::OnMegablastRemovedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnMegablastPostTimeDilationDelegate) == 0x000C78, "Member 'UMarinerCharacterMovement::OnMegablastPostTimeDilationDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnImpendingMegablast) == 0x000C88, "Member 'UMarinerCharacterMovement::OnImpendingMegablast' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnMoveUpdateRootMotionAppliedDelegate) == 0x000C98, "Member 'UMarinerCharacterMovement::OnMoveUpdateRootMotionAppliedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnMoveUpdateRootMotionManuallyRemovedDelegate) == 0x000CA8, "Member 'UMarinerCharacterMovement::OnMoveUpdateRootMotionManuallyRemovedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnMoveUpdateDataUsedDelegate) == 0x000CB8, "Member 'UMarinerCharacterMovement::OnMoveUpdateDataUsedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnMoveAffectingGameplayEffectAppliedDelegate) == 0x000CC8, "Member 'UMarinerCharacterMovement::OnMoveAffectingGameplayEffectAppliedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnMoveAffectingGameplayEffectAppliedDuringReplayDelegate) == 0x000CD8, "Member 'UMarinerCharacterMovement::OnMoveAffectingGameplayEffectAppliedDuringReplayDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnMoveAffectingGameplayEffectRemovedDelegate) == 0x000CE8, "Member 'UMarinerCharacterMovement::OnMoveAffectingGameplayEffectRemovedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnMoveAffectingGameplayEffectRemovedDuringReplayDelegate) == 0x000CF8, "Member 'UMarinerCharacterMovement::OnMoveAffectingGameplayEffectRemovedDuringReplayDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnMovementUpdatedDelegate) == 0x000D08, "Member 'UMarinerCharacterMovement::OnMovementUpdatedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnCurrentJumpCountChanged) == 0x000D18, "Member 'UMarinerCharacterMovement::OnCurrentJumpCountChanged' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnJumped) == 0x000D28, "Member 'UMarinerCharacterMovement::OnJumped' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnRocketJump) == 0x000D38, "Member 'UMarinerCharacterMovement::OnRocketJump' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnCharacterPivot) == 0x000D48, "Member 'UMarinerCharacterMovement::OnCharacterPivot' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovement, OnCardinalDirectionChanged) == 0x000D58, "Member 'UMarinerCharacterMovement::OnCardinalDirectionChanged' has a wrong offset!");

// Class Mariner.MarinerCharacterMovementAttributes
// 0x0488 (0x04B8 - 0x0030)
class UMarinerCharacterMovementAttributes final : public UAttributeSet
{
public:
	struct FMarinerPredictiveGameplayAttributeData GravityScale;                                      // 0x0030(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData MoveRearwardInputScaleMultiplier;                  // 0x0058(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData BlastedAirborneDescendingGravityScalar;            // 0x0080(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData SelfBlastedAirborneDescendingGravityScalar;        // 0x00A8(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData MaxBaseMovementSpeed;                              // 0x00D0(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData MaxAcceleration;                                   // 0x00F8(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData GroundFriction;                                    // 0x0120(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData AirborneLateralFriction;                           // 0x0148(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData BrakingFrictionMultiplier;                         // 0x0170(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData BrakingFriction;                                   // 0x0198(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData BrakingDecelerationGround;                         // 0x01C0(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData LateralBrakingDecelerationAirborne;                // 0x01E8(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData BrakingDecelerationFlying;                         // 0x0210(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData AirControl;                                        // 0x0238(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData AirControlBoostModifier;                           // 0x0260(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData AirControlBoostLateralSpeedThreshold;              // 0x0288(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData LaunchMagnitudeMultiplier;                         // 0x02B0(0x0028)(NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData BounceFriction;                                    // 0x02D8(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData Bounciness;                                        // 0x0300(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData MaxBounceSpeed;                                    // 0x0328(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData GroundJumpScale;                                   // 0x0350(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData AirJumpScale;                                      // 0x0378(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData JumpSameDirectionLateralSpeedMultiplier;           // 0x03A0(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData JumpDifferentDirectionLateralSpeedMultiplier;      // 0x03C8(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData CapsuleRadiusMultiplier;                           // 0x03F0(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerPredictiveGameplayAttributeData CapsuleHalfHeightMultiplier;                       // 0x0418(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	class UMarinerCharacterMovement*              OwnerMovementComponent;                            // 0x0440(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AMarinerCharacter*                      OwnerCharacter;                                    // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCapsuleComponent*                      OwnerCharacterCapsule;                             // 0x0450(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1708[0x14];                                    // 0x0458(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConfigGravityMultiplier;                           // 0x046C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigGroundJumpScale;                             // 0x0470(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigBlastedAirborneDescendingGravityScalar;      // 0x0474(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigSelfBlastedAirborneDescendingGravityScalar;  // 0x0478(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigMaxBaseMovementSpeed;                        // 0x047C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigMaxAcceleration;                             // 0x0480(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigGroundFriction;                              // 0x0484(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigAirborneLateralFriction;                     // 0x0488(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigBrakingFrictionMultiplier;                   // 0x048C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigBrakingFriction;                             // 0x0490(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigBrakingDecelerationGround;                   // 0x0494(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigLateralBrakingDecelerationAirborne;          // 0x0498(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigBrakingDecelerationFlying;                   // 0x049C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigAirControl;                                  // 0x04A0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigAirControlBoostModifier;                     // 0x04A4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigAirControlBoostLateralSpeedThreshold;        // 0x04A8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigBounceFriction;                              // 0x04AC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigBounciness;                                  // 0x04B0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConfigMaxBounceSpeed;                              // 0x04B4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnRep_AirborneLateralFriction();
	void OnRep_AirControl();
	void OnRep_AirControlBoostLateralSpeedThreshold();
	void OnRep_AirControlBoostModifier();
	void OnRep_AirJumpScale();
	void OnRep_BlastedAirborneDescendingGravityScalar();
	void OnRep_BounceFriction();
	void OnRep_Bounciness();
	void OnRep_BrakingDecelerationFlying();
	void OnRep_BrakingDecelerationGround();
	void OnRep_BrakingFriction();
	void OnRep_BrakingFrictionMultiplier();
	void OnRep_CapsuleHalfHeightMultiplier();
	void OnRep_CapsuleRadiusMultiplier();
	void OnRep_GravityScale();
	void OnRep_GroundFriction();
	void OnRep_GroundJumpScale();
	void OnRep_JumpDifferentDirectionLateralSpeedMultiplier();
	void OnRep_JumpSameDirectionLateralSpeedMultiplier();
	void OnRep_LateralBrakingDecelerationAirborne();
	void OnRep_MaxAcceleration();
	void OnRep_MaxBaseMovementSpeed();
	void OnRep_MaxBounceSpeed();
	void OnRep_MoveRearwardInputScaleMultiplier();
	void OnRep_SelfBlastedAirborneDescendingGravityScalar();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterMovementAttributes">();
	}
	static class UMarinerCharacterMovementAttributes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterMovementAttributes>();
	}
};
static_assert(alignof(UMarinerCharacterMovementAttributes) == 0x000008, "Wrong alignment on UMarinerCharacterMovementAttributes");
static_assert(sizeof(UMarinerCharacterMovementAttributes) == 0x0004B8, "Wrong size on UMarinerCharacterMovementAttributes");
static_assert(offsetof(UMarinerCharacterMovementAttributes, GravityScale) == 0x000030, "Member 'UMarinerCharacterMovementAttributes::GravityScale' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, MoveRearwardInputScaleMultiplier) == 0x000058, "Member 'UMarinerCharacterMovementAttributes::MoveRearwardInputScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, BlastedAirborneDescendingGravityScalar) == 0x000080, "Member 'UMarinerCharacterMovementAttributes::BlastedAirborneDescendingGravityScalar' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, SelfBlastedAirborneDescendingGravityScalar) == 0x0000A8, "Member 'UMarinerCharacterMovementAttributes::SelfBlastedAirborneDescendingGravityScalar' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, MaxBaseMovementSpeed) == 0x0000D0, "Member 'UMarinerCharacterMovementAttributes::MaxBaseMovementSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, MaxAcceleration) == 0x0000F8, "Member 'UMarinerCharacterMovementAttributes::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, GroundFriction) == 0x000120, "Member 'UMarinerCharacterMovementAttributes::GroundFriction' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, AirborneLateralFriction) == 0x000148, "Member 'UMarinerCharacterMovementAttributes::AirborneLateralFriction' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, BrakingFrictionMultiplier) == 0x000170, "Member 'UMarinerCharacterMovementAttributes::BrakingFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, BrakingFriction) == 0x000198, "Member 'UMarinerCharacterMovementAttributes::BrakingFriction' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, BrakingDecelerationGround) == 0x0001C0, "Member 'UMarinerCharacterMovementAttributes::BrakingDecelerationGround' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, LateralBrakingDecelerationAirborne) == 0x0001E8, "Member 'UMarinerCharacterMovementAttributes::LateralBrakingDecelerationAirborne' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, BrakingDecelerationFlying) == 0x000210, "Member 'UMarinerCharacterMovementAttributes::BrakingDecelerationFlying' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, AirControl) == 0x000238, "Member 'UMarinerCharacterMovementAttributes::AirControl' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, AirControlBoostModifier) == 0x000260, "Member 'UMarinerCharacterMovementAttributes::AirControlBoostModifier' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, AirControlBoostLateralSpeedThreshold) == 0x000288, "Member 'UMarinerCharacterMovementAttributes::AirControlBoostLateralSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, LaunchMagnitudeMultiplier) == 0x0002B0, "Member 'UMarinerCharacterMovementAttributes::LaunchMagnitudeMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, BounceFriction) == 0x0002D8, "Member 'UMarinerCharacterMovementAttributes::BounceFriction' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, Bounciness) == 0x000300, "Member 'UMarinerCharacterMovementAttributes::Bounciness' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, MaxBounceSpeed) == 0x000328, "Member 'UMarinerCharacterMovementAttributes::MaxBounceSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, GroundJumpScale) == 0x000350, "Member 'UMarinerCharacterMovementAttributes::GroundJumpScale' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, AirJumpScale) == 0x000378, "Member 'UMarinerCharacterMovementAttributes::AirJumpScale' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, JumpSameDirectionLateralSpeedMultiplier) == 0x0003A0, "Member 'UMarinerCharacterMovementAttributes::JumpSameDirectionLateralSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, JumpDifferentDirectionLateralSpeedMultiplier) == 0x0003C8, "Member 'UMarinerCharacterMovementAttributes::JumpDifferentDirectionLateralSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, CapsuleRadiusMultiplier) == 0x0003F0, "Member 'UMarinerCharacterMovementAttributes::CapsuleRadiusMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, CapsuleHalfHeightMultiplier) == 0x000418, "Member 'UMarinerCharacterMovementAttributes::CapsuleHalfHeightMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, OwnerMovementComponent) == 0x000440, "Member 'UMarinerCharacterMovementAttributes::OwnerMovementComponent' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, OwnerCharacter) == 0x000448, "Member 'UMarinerCharacterMovementAttributes::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, OwnerCharacterCapsule) == 0x000450, "Member 'UMarinerCharacterMovementAttributes::OwnerCharacterCapsule' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigGravityMultiplier) == 0x00046C, "Member 'UMarinerCharacterMovementAttributes::ConfigGravityMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigGroundJumpScale) == 0x000470, "Member 'UMarinerCharacterMovementAttributes::ConfigGroundJumpScale' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigBlastedAirborneDescendingGravityScalar) == 0x000474, "Member 'UMarinerCharacterMovementAttributes::ConfigBlastedAirborneDescendingGravityScalar' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigSelfBlastedAirborneDescendingGravityScalar) == 0x000478, "Member 'UMarinerCharacterMovementAttributes::ConfigSelfBlastedAirborneDescendingGravityScalar' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigMaxBaseMovementSpeed) == 0x00047C, "Member 'UMarinerCharacterMovementAttributes::ConfigMaxBaseMovementSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigMaxAcceleration) == 0x000480, "Member 'UMarinerCharacterMovementAttributes::ConfigMaxAcceleration' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigGroundFriction) == 0x000484, "Member 'UMarinerCharacterMovementAttributes::ConfigGroundFriction' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigAirborneLateralFriction) == 0x000488, "Member 'UMarinerCharacterMovementAttributes::ConfigAirborneLateralFriction' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigBrakingFrictionMultiplier) == 0x00048C, "Member 'UMarinerCharacterMovementAttributes::ConfigBrakingFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigBrakingFriction) == 0x000490, "Member 'UMarinerCharacterMovementAttributes::ConfigBrakingFriction' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigBrakingDecelerationGround) == 0x000494, "Member 'UMarinerCharacterMovementAttributes::ConfigBrakingDecelerationGround' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigLateralBrakingDecelerationAirborne) == 0x000498, "Member 'UMarinerCharacterMovementAttributes::ConfigLateralBrakingDecelerationAirborne' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigBrakingDecelerationFlying) == 0x00049C, "Member 'UMarinerCharacterMovementAttributes::ConfigBrakingDecelerationFlying' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigAirControl) == 0x0004A0, "Member 'UMarinerCharacterMovementAttributes::ConfigAirControl' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigAirControlBoostModifier) == 0x0004A4, "Member 'UMarinerCharacterMovementAttributes::ConfigAirControlBoostModifier' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigAirControlBoostLateralSpeedThreshold) == 0x0004A8, "Member 'UMarinerCharacterMovementAttributes::ConfigAirControlBoostLateralSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigBounceFriction) == 0x0004AC, "Member 'UMarinerCharacterMovementAttributes::ConfigBounceFriction' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigBounciness) == 0x0004B0, "Member 'UMarinerCharacterMovementAttributes::ConfigBounciness' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterMovementAttributes, ConfigMaxBounceSpeed) == 0x0004B4, "Member 'UMarinerCharacterMovementAttributes::ConfigMaxBounceSpeed' has a wrong offset!");

// Class Mariner.MarinerCharacterPinWidget
// 0x0020 (0x0410 - 0x03F0)
class UMarinerCharacterPinWidget : public UMarinerBasePinWidget
{
public:
	float                                         AimRayIntersectDetectionDistance;                  // 0x03F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AimRayIntersectDetectionSphereRadius;              // 0x03F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMarinerCone>                   NameCones;                                         // 0x03F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1709[0x8];                                     // 0x0408(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearActionText();
	void ClearGameModeWidget();
	void ClearIcon();
	void HandleMegablastEvent(class AMarinerPlayerState* MegablastInstigator);
	void HandleOwnerKnockedOutTrackedPlayer();
	void HandleRecoveredFromMegablastEvent();
	void OnCharacterArenaReturnStateChanged(EMarinerArenaReturnState PreviousState, EMarinerArenaReturnState NewState);
	void OnDamagedByLocalClient();
	void OnDamagedLocalClient();
	void OnInNameViewConeChanged(bool bInNameViewCone);
	void OnIntersectsAimRayChanged(bool bIntersectsAimRay);
	void OnTrackedPlayerChangedTeams(class AMarinerPlayerState* TrackedPlayerState);
	void SetActionText(const class FText& Text);
	void SetForcedOn(bool bForcedOn);
	void SetGameModeWidget(TSubclassOf<class UMarinerPinGameModeWidget> GameModeWidget, class AMarinerPlayerState* PlayerState);
	void SetIcon(const struct FSlateBrush& Brush, bool bForcesPinVisible, bool bImageCanDim);

	EMarinerArenaReturnState GetCharacterArenaReturnState() const;
	class AMarinerCharacter* GetCharacterReference() const;
	bool IsInNameViewCone() const;
	bool IsIntersectingAimRay() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterPinWidget">();
	}
	static class UMarinerCharacterPinWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterPinWidget>();
	}
};
static_assert(alignof(UMarinerCharacterPinWidget) == 0x000008, "Wrong alignment on UMarinerCharacterPinWidget");
static_assert(sizeof(UMarinerCharacterPinWidget) == 0x000410, "Wrong size on UMarinerCharacterPinWidget");
static_assert(offsetof(UMarinerCharacterPinWidget, AimRayIntersectDetectionDistance) == 0x0003F0, "Member 'UMarinerCharacterPinWidget::AimRayIntersectDetectionDistance' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterPinWidget, AimRayIntersectDetectionSphereRadius) == 0x0003F4, "Member 'UMarinerCharacterPinWidget::AimRayIntersectDetectionSphereRadius' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterPinWidget, NameCones) == 0x0003F8, "Member 'UMarinerCharacterPinWidget::NameCones' has a wrong offset!");

// Class Mariner.MarinerCharacterProgressionButton
// 0x0018 (0x2F90 - 0x2F78)
class UMarinerCharacterProgressionButton : public UMarinerLayeredButton
{
public:
	class UMarinerRewardPreview*                  Bound_RewardPreview;                               // 0x2F78(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScaleBox*                              Bound_ScaleBoxLevelText;                           // 0x2F80(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextNextLevel;                               // 0x2F88(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void InitCharacterProgression(int32 RewardLevel, const struct FMangoProgressionCharacterLevelReward& CharacterReward);
	void InitNoProgression();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterProgressionButton">();
	}
	static class UMarinerCharacterProgressionButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterProgressionButton>();
	}
};
static_assert(alignof(UMarinerCharacterProgressionButton) == 0x000008, "Wrong alignment on UMarinerCharacterProgressionButton");
static_assert(sizeof(UMarinerCharacterProgressionButton) == 0x002F90, "Wrong size on UMarinerCharacterProgressionButton");
static_assert(offsetof(UMarinerCharacterProgressionButton, Bound_RewardPreview) == 0x002F78, "Member 'UMarinerCharacterProgressionButton::Bound_RewardPreview' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterProgressionButton, Bound_ScaleBoxLevelText) == 0x002F80, "Member 'UMarinerCharacterProgressionButton::Bound_ScaleBoxLevelText' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterProgressionButton, Bound_TextNextLevel) == 0x002F88, "Member 'UMarinerCharacterProgressionButton::Bound_TextNextLevel' has a wrong offset!");

// Class Mariner.MarinerReturnRocketLaunchpad
// 0x0078 (0x02A0 - 0x0228)
class AMarinerReturnRocketLaunchpad final : public AStaticMeshActor
{
public:
	int32                                         TeamIndex;                                         // 0x0228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_170C[0x4];                                     // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       MeshDynamicMaterials;                              // 0x0230(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class FName                                   LaunchSocketName;                                  // 0x0240(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LaunchTargetLocation;                              // 0x0248(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TeleportToPadCountdownTime;                        // 0x0254(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LaunchCountdownTime;                               // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LaunchAngle;                                       // 0x025C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LaunchSeparationTime;                              // 0x0260(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_170D[0x3C];                                    // 0x0264(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDestruction(class AActor* DestroyedActor);
	void OnLaunchCountdownTimerExpired();
	void OnLaunchSeparationTimerExpired();
	void OnTeleportCountdownTimerExpired();

	struct FVector GetLaunchLocation() const;
	float GetLaunchRotationYaw() const;
	void MulticastPrepareCharacterForLaunch(class AMarinerCharacter* Character) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerReturnRocketLaunchpad">();
	}
	static class AMarinerReturnRocketLaunchpad* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerReturnRocketLaunchpad>();
	}
};
static_assert(alignof(AMarinerReturnRocketLaunchpad) == 0x000008, "Wrong alignment on AMarinerReturnRocketLaunchpad");
static_assert(sizeof(AMarinerReturnRocketLaunchpad) == 0x0002A0, "Wrong size on AMarinerReturnRocketLaunchpad");
static_assert(offsetof(AMarinerReturnRocketLaunchpad, TeamIndex) == 0x000228, "Member 'AMarinerReturnRocketLaunchpad::TeamIndex' has a wrong offset!");
static_assert(offsetof(AMarinerReturnRocketLaunchpad, MeshDynamicMaterials) == 0x000230, "Member 'AMarinerReturnRocketLaunchpad::MeshDynamicMaterials' has a wrong offset!");
static_assert(offsetof(AMarinerReturnRocketLaunchpad, LaunchSocketName) == 0x000240, "Member 'AMarinerReturnRocketLaunchpad::LaunchSocketName' has a wrong offset!");
static_assert(offsetof(AMarinerReturnRocketLaunchpad, LaunchTargetLocation) == 0x000248, "Member 'AMarinerReturnRocketLaunchpad::LaunchTargetLocation' has a wrong offset!");
static_assert(offsetof(AMarinerReturnRocketLaunchpad, TeleportToPadCountdownTime) == 0x000254, "Member 'AMarinerReturnRocketLaunchpad::TeleportToPadCountdownTime' has a wrong offset!");
static_assert(offsetof(AMarinerReturnRocketLaunchpad, LaunchCountdownTime) == 0x000258, "Member 'AMarinerReturnRocketLaunchpad::LaunchCountdownTime' has a wrong offset!");
static_assert(offsetof(AMarinerReturnRocketLaunchpad, LaunchAngle) == 0x00025C, "Member 'AMarinerReturnRocketLaunchpad::LaunchAngle' has a wrong offset!");
static_assert(offsetof(AMarinerReturnRocketLaunchpad, LaunchSeparationTime) == 0x000260, "Member 'AMarinerReturnRocketLaunchpad::LaunchSeparationTime' has a wrong offset!");

// Class Mariner.MarinerItemLoaderButtonBase
// 0x00E0 (0x3058 - 0x2F78)
class UMarinerItemLoaderButtonBase : public UMarinerLayeredButton
{
public:
	uint8                                         Pad_170E[0x10];                                    // 0x2F78(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CommonMaterialSize;                                // 0x2F88(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              TotemMaterialSize;                                 // 0x2F90(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     CharacterSkinMaterial;                             // 0x2F98(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     CharacterIconMaterial;                             // 0x2FA0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlwaysUseLootCardImage;                           // 0x2FA8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_170F[0x7];                                     // 0x2FA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerLoadEngineAsset*                ItemLoader;                                        // 0x2FB0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAssetLoadResponse*                     AssetToLoad;                                       // 0x2FB8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             AuxTextRef;                                        // 0x2FC0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             AuxDescRef;                                        // 0x2FC8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             RarityTextRef;                                     // 0x2FD0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 ItemImageRef;                                      // 0x2FD8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 TotemImageRef;                                     // 0x2FE0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 RarityImageRef;                                    // 0x2FE8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 RaritySymbolRef;                                   // 0x2FF0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 NameImageRef;                                      // 0x2FF8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUserWidget*                            LoadingSpinnerRef;                                 // 0x3000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMangoItem                             MangoItemRef;                                      // 0x3008(0x0050)(NativeAccessSpecifierPrivate)

public:
	void LoadAndPopulate(class UTextBlock* InAuxText, class UTextBlock* InAuxDesc, class UTextBlock* InRarityText, class UImage* InItemImage, class UImage* InTotemImage, class UImage* InRarityImage, class UImage* InRaritySymbol, class UImage* InNameImage, class UUserWidget* InLoadingSpinner, const struct FMangoItem& InItem);
	void PopulateCharacterIcon(struct FSlateBrush* Brush);
	void PopulateDefaultIcon(const struct FSlateBrush& Brush, class UImage* InItemImage, class UImage* InTotemImage, class UImage* InNameIcon);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerItemLoaderButtonBase">();
	}
	static class UMarinerItemLoaderButtonBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerItemLoaderButtonBase>();
	}
};
static_assert(alignof(UMarinerItemLoaderButtonBase) == 0x000008, "Wrong alignment on UMarinerItemLoaderButtonBase");
static_assert(sizeof(UMarinerItemLoaderButtonBase) == 0x003058, "Wrong size on UMarinerItemLoaderButtonBase");
static_assert(offsetof(UMarinerItemLoaderButtonBase, CommonMaterialSize) == 0x002F88, "Member 'UMarinerItemLoaderButtonBase::CommonMaterialSize' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, TotemMaterialSize) == 0x002F90, "Member 'UMarinerItemLoaderButtonBase::TotemMaterialSize' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, CharacterSkinMaterial) == 0x002F98, "Member 'UMarinerItemLoaderButtonBase::CharacterSkinMaterial' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, CharacterIconMaterial) == 0x002FA0, "Member 'UMarinerItemLoaderButtonBase::CharacterIconMaterial' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, bAlwaysUseLootCardImage) == 0x002FA8, "Member 'UMarinerItemLoaderButtonBase::bAlwaysUseLootCardImage' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, ItemLoader) == 0x002FB0, "Member 'UMarinerItemLoaderButtonBase::ItemLoader' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, AssetToLoad) == 0x002FB8, "Member 'UMarinerItemLoaderButtonBase::AssetToLoad' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, AuxTextRef) == 0x002FC0, "Member 'UMarinerItemLoaderButtonBase::AuxTextRef' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, AuxDescRef) == 0x002FC8, "Member 'UMarinerItemLoaderButtonBase::AuxDescRef' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, RarityTextRef) == 0x002FD0, "Member 'UMarinerItemLoaderButtonBase::RarityTextRef' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, ItemImageRef) == 0x002FD8, "Member 'UMarinerItemLoaderButtonBase::ItemImageRef' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, TotemImageRef) == 0x002FE0, "Member 'UMarinerItemLoaderButtonBase::TotemImageRef' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, RarityImageRef) == 0x002FE8, "Member 'UMarinerItemLoaderButtonBase::RarityImageRef' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, RaritySymbolRef) == 0x002FF0, "Member 'UMarinerItemLoaderButtonBase::RaritySymbolRef' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, NameImageRef) == 0x002FF8, "Member 'UMarinerItemLoaderButtonBase::NameImageRef' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, LoadingSpinnerRef) == 0x003000, "Member 'UMarinerItemLoaderButtonBase::LoadingSpinnerRef' has a wrong offset!");
static_assert(offsetof(UMarinerItemLoaderButtonBase, MangoItemRef) == 0x003008, "Member 'UMarinerItemLoaderButtonBase::MangoItemRef' has a wrong offset!");

// Class Mariner.MarinerCharacterProgressionWidget
// 0x0008 (0x04A8 - 0x04A0)
class UMarinerCharacterProgressionWidget : public UMarinerItemLevelGroupWidget
{
public:
	class UMarinerPlayableCharacter*              CharacterToShow;                                   // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Init(class UMarinerPlayableCharacter* Character);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterProgressionWidget">();
	}
	static class UMarinerCharacterProgressionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterProgressionWidget>();
	}
};
static_assert(alignof(UMarinerCharacterProgressionWidget) == 0x000008, "Wrong alignment on UMarinerCharacterProgressionWidget");
static_assert(sizeof(UMarinerCharacterProgressionWidget) == 0x0004A8, "Wrong size on UMarinerCharacterProgressionWidget");
static_assert(offsetof(UMarinerCharacterProgressionWidget, CharacterToShow) == 0x0004A0, "Member 'UMarinerCharacterProgressionWidget::CharacterToShow' has a wrong offset!");

// Class Mariner.MarinerCharacterRoleUIData
// 0x00A0 (0x00D0 - 0x0030)
class UMarinerCharacterRoleUIData final : public UDataAsset
{
public:
	class FText                                   RoleName;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            RoleIcon;                                          // 0x0048(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterRoleUIData">();
	}
	static class UMarinerCharacterRoleUIData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterRoleUIData>();
	}
};
static_assert(alignof(UMarinerCharacterRoleUIData) == 0x000008, "Wrong alignment on UMarinerCharacterRoleUIData");
static_assert(sizeof(UMarinerCharacterRoleUIData) == 0x0000D0, "Wrong size on UMarinerCharacterRoleUIData");
static_assert(offsetof(UMarinerCharacterRoleUIData, RoleName) == 0x000030, "Member 'UMarinerCharacterRoleUIData::RoleName' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterRoleUIData, RoleIcon) == 0x000048, "Member 'UMarinerCharacterRoleUIData::RoleIcon' has a wrong offset!");

// Class Mariner.MarinerCharacterSelectButton
// 0x0158 (0x30D0 - 0x2F78)
class UMarinerCharacterSelectButton : public UMarinerLayeredButton
{
public:
	class UMarinerPlayableCharacter*              CharacterToSelect;                                 // 0x2F78(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     IconBrush;                                         // 0x2F80(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                            FreeRotationOwnedBrush;                            // 0x2F88(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            FreeRotationUnownedBrush;                          // 0x3010(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UUserWidget*                            Bound_LoadingWidget;                               // 0x3098(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_FreeRotationIcon;                            // 0x30A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_RarityIcon;                                  // 0x30A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1710[0x8];                                     // 0x30B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerPlayerState*                    AssociatedPlayerState;                             // 0x30B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAkAudioEvent*                          CharacterLockStateSFX;                             // 0x30C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerSkinUIData*                     SkinUIDataRef;                                     // 0x30C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Refresh();
	void SetButtonsCharacterData(class UMarinerPlayableCharacter* InCharacter, EMarinerCharacterLockState InLockState, bool bInAllowUnviewedFlag, bool bInEnableGamepadAutoSelect);

	class UMarinerPlayableCharacter* GetCharacter() const;
	class UAkAudioEvent* GetCharacterLockStateSFX() const;
	class UAkAudioEvent* GetCharacterSelectedSFX() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterSelectButton">();
	}
	static class UMarinerCharacterSelectButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterSelectButton>();
	}
};
static_assert(alignof(UMarinerCharacterSelectButton) == 0x000008, "Wrong alignment on UMarinerCharacterSelectButton");
static_assert(sizeof(UMarinerCharacterSelectButton) == 0x0030D0, "Wrong size on UMarinerCharacterSelectButton");
static_assert(offsetof(UMarinerCharacterSelectButton, CharacterToSelect) == 0x002F78, "Member 'UMarinerCharacterSelectButton::CharacterToSelect' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectButton, IconBrush) == 0x002F80, "Member 'UMarinerCharacterSelectButton::IconBrush' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectButton, FreeRotationOwnedBrush) == 0x002F88, "Member 'UMarinerCharacterSelectButton::FreeRotationOwnedBrush' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectButton, FreeRotationUnownedBrush) == 0x003010, "Member 'UMarinerCharacterSelectButton::FreeRotationUnownedBrush' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectButton, Bound_LoadingWidget) == 0x003098, "Member 'UMarinerCharacterSelectButton::Bound_LoadingWidget' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectButton, Bound_FreeRotationIcon) == 0x0030A0, "Member 'UMarinerCharacterSelectButton::Bound_FreeRotationIcon' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectButton, Bound_RarityIcon) == 0x0030A8, "Member 'UMarinerCharacterSelectButton::Bound_RarityIcon' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectButton, AssociatedPlayerState) == 0x0030B8, "Member 'UMarinerCharacterSelectButton::AssociatedPlayerState' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectButton, CharacterLockStateSFX) == 0x0030C0, "Member 'UMarinerCharacterSelectButton::CharacterLockStateSFX' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectButton, SkinUIDataRef) == 0x0030C8, "Member 'UMarinerCharacterSelectButton::SkinUIDataRef' has a wrong offset!");

// Class Mariner.MarinerSkinnedSelectedCharacterWidget
// 0x0028 (0x02D8 - 0x02B0)
class UMarinerSkinnedSelectedCharacterWidget : public UMarinerUserWidget
{
public:
	class AMarinerPlayerState*                    AssociatedPlayerState;                             // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerArtifactImage*                  Bound_CoreArtifact;                                // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerArtifactImage*                  Bound_SecondaryArtifact;                           // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerArtifactImage*                  Bound_UtilityArtifact;                             // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerArtifactImage*                  Bound_CharacterArtifact;                           // 0x02D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DisplayData(class AMarinerPlayerState* PlayerState, class UMarinerSkinCollectionDataAsset* ActiveSkin, int32 Level, class UMarinerArtifactDataAsset* Artifact);
	class AMarinerPlayerState* GetPlayerState();
	void OnOwnerSelectedCharacterChanged(const class FString& SelectedCharacter);
	void OnProfileCollectionDataUpdated();
	void OnProfileDataUpdated();
	void OnSelectedCharacterChanged();
	void SetPlayerState(class AMarinerPlayerState* PlayerState);
	void TryUpdateSkinData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSkinnedSelectedCharacterWidget">();
	}
	static class UMarinerSkinnedSelectedCharacterWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSkinnedSelectedCharacterWidget>();
	}
};
static_assert(alignof(UMarinerSkinnedSelectedCharacterWidget) == 0x000008, "Wrong alignment on UMarinerSkinnedSelectedCharacterWidget");
static_assert(sizeof(UMarinerSkinnedSelectedCharacterWidget) == 0x0002D8, "Wrong size on UMarinerSkinnedSelectedCharacterWidget");
static_assert(offsetof(UMarinerSkinnedSelectedCharacterWidget, AssociatedPlayerState) == 0x0002B0, "Member 'UMarinerSkinnedSelectedCharacterWidget::AssociatedPlayerState' has a wrong offset!");
static_assert(offsetof(UMarinerSkinnedSelectedCharacterWidget, Bound_CoreArtifact) == 0x0002B8, "Member 'UMarinerSkinnedSelectedCharacterWidget::Bound_CoreArtifact' has a wrong offset!");
static_assert(offsetof(UMarinerSkinnedSelectedCharacterWidget, Bound_SecondaryArtifact) == 0x0002C0, "Member 'UMarinerSkinnedSelectedCharacterWidget::Bound_SecondaryArtifact' has a wrong offset!");
static_assert(offsetof(UMarinerSkinnedSelectedCharacterWidget, Bound_UtilityArtifact) == 0x0002C8, "Member 'UMarinerSkinnedSelectedCharacterWidget::Bound_UtilityArtifact' has a wrong offset!");
static_assert(offsetof(UMarinerSkinnedSelectedCharacterWidget, Bound_CharacterArtifact) == 0x0002D0, "Member 'UMarinerSkinnedSelectedCharacterWidget::Bound_CharacterArtifact' has a wrong offset!");

// Class Mariner.MarinerGameState
// 0x0648 (0x08C0 - 0x0278)
class AMarinerGameState : public AGameState
{
public:
	UMulticastInlineDelegateProperty_             OnPlayerAdded;                                     // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPlayerRemoved;                                   // 0x0288(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPlayableCharactersChanged;                       // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnTeamScoreChanged;                                // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnGameOutcomeChanged;                              // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnRoundResetTimerSet;                              // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnRemainingTimeChanged;                            // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnOvertimeStarted;                                 // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnSafeToLeaveTimerStarted;                         // 0x02F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnSafeToLeaveTimerStoped;                          // 0x0308(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnSessionSafeToLeave;                              // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnServerPreRoundCountdownTimerSet;                 // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnRoundCountdownTimerStarted;                      // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnGameTimerExtendedChanged;                        // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPregameStateChanged;                             // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMatchStateChanged;                               // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAnyPlayerChangedTeams;                           // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMatchEndDataSet;                                 // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPlaylistInfoSet;                                 // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnModeHUDStatesChanged;                            // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	bool                                          bShouldDisplayFinalCountdown;                      // 0x03B8(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1713[0x17];                                    // 0x03B9(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerMegaBlastDirectorVolumeManager* MegaBlastVolumeDirectorManager;                    // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFastCollisionManager*                  FastCollisionManager;                              // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPoolingManager*                 PoolingManager;                                    // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerActorPool*                      ActorPool;                                         // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           DisabledCharacterClasses;                          // 0x03F0(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, RepNotify, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           ForceEnabledCharacterClasses;                      // 0x0400(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, RepNotify, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	float                                         DefaultHealthRecoveredOnArenaReturn;               // 0x0410(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1714[0x4];                                     // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            CountdownSuppressionEffect;                        // 0x0418(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BetweenRoundsSuppressionDuration;                  // 0x0420(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerPreRoundCountdownEndTimeStamp;               // 0x0424(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerSafeToLeaveSessionEndTimeTeam0Stamp;         // 0x0428(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerSafeToLeaveSessionEndTimeTeam1Stamp;         // 0x042C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RemainingTime;                                     // 0x0430(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsGameTimerExtended;                              // 0x0434(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsGameTimerPaused;                                // 0x0435(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInOvertime;                                     // 0x0436(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1715[0x1];                                     // 0x0437(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumTeams;                                          // 0x0438(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1716[0x4];                                     // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TeamScores;                                        // 0x0440(0x0010)(Edit, Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<EMarinerGameOutcome>                   TeamGameOutcomes;                                  // 0x0450(0x0010)(Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct FImportantThrowTarget>          ImportantThrowTargets;                             // 0x0460(0x0010)(Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AMarinerItem>>       AvailableItemSpawns;                               // 0x0470(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class FName>                           GameModeRequiredObjects;                           // 0x0480(0x0010)(Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	int32                                         RoundCount;                                        // 0x0490(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1717[0x4];                                     // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchEndJsonString;                                // 0x0498(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1718[0x10];                                    // 0x04A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PregameState;                                      // 0x04B8(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 GameModeName;                                      // 0x04C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameServerDebugInfo                   GameServerDebugInfo;                               // 0x04D0(0x00A8)(Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct FMarinerGameLiftSessionInfo            GameLiftSessionInfo;                               // 0x0578(0x0030)(Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1719[0x8];                                     // 0x05A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMangoId>                       MangoIds;                                          // 0x05B0(0x0010)(Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsMatchmadeSession;                               // 0x05C0(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_171A[0x7];                                     // 0x05C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlaylistInfo                          PlaylistInfo;                                      // 0x05C8(0x0018)(Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct FGuid                                  PlaylistName;                                      // 0x05E0(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ActiveModeHUDStates;                               // 0x05F0(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowCharacterStacking;                           // 0x05F4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceRandomCharacter;                             // 0x05F5(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bResetCooldownsOnKnockout;                         // 0x05F6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_171B[0x1];                                     // 0x05F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumRequiredPlayersForMatch;                        // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumRequiredPlayersForTeam;                         // 0x05FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeBeforeTheGameIsDeclaredSafeToLeave;            // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_171C[0x1C];                                    // 0x0604(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DefaultBotName;                                    // 0x0620(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_171D[0x14];                                    // 0x0630(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	EMarinerTelemetryType                         TelemetryType;                                     // 0x0644(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_171E[0x3];                                     // 0x0645(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   RocketballAnalyticItemClass;                       // 0x0648(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_171F[0x243];                                   // 0x0670(0x0243)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSessionHasEarlyDisconnect;                        // 0x08B3(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1720[0xC];                                     // 0x08B4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddImportantThrowTarget(class AActor* ThrowTargetActor, int32 TargetForTeamIndex);
	void AuthorityApplyModeHUDState(const TSubclassOf<class UMarinerHUDState> State);
	void AuthorityRecordFloatKnockoutAnalytic(EMarinerKnockoutAnalyticEntries AnalyticToRecord, float Value);
	void AuthorityRecordRocketballGoalAnalytic(EMarinerRocketballGoalType GoalType);
	void AuthorityRecordRocketballResetAnalytic(EMarinerRocketballResetType ResetType);
	void AuthorityRemoveModeHUDState(const TSubclassOf<class UMarinerHUDState> State);
	void AwardPointsToTeam(int32 TeamIndex, int32 PointsToAward);
	void BroadcastOnPregameStateChanged();
	void CheckForPreRoundSuppressionRemoval();
	void EnableWorldUILevel(bool bEnabled, const TDelegate<void(bool bIsVisible)>& OnComplete);
	void EnsureReplicationForRoundTransition();
	class UFastCollisionManager* GetFastCollisionManager();
	class UMarinerPoolingManager* GetPoolingManager();
	class FName GetPregameState();
	int32 GetTeamScore(int32 TeamIndex);
	void HACK_UpdateBlastballParticleSystems(const TArray<class UParticleSystemComponent*>& ParticleSystemComponentsToUpdate);
	void IncrementRoundCount();
	void IncrementTeamScore(int32 TeamIndex);
	void MulticastRPCOnRoundTransition();
	void OnPlayerChagnedTeam(class AMarinerPlayerState* PlayerChangedTeam);
	void OnPlayerControlledCharacterUpdated();
	void OnRep_ActiveModeHUDStates(int32 OldActiveModeHUDStates);
	void OnRep_DisabledCharacterClasses();
	void OnRep_ForceEnabledCharacterClasses();
	void OnRep_GameLiftSessionInfo();
	void OnRep_GameModeRemainingTime();
	void OnRep_GameModeRequiredObjects();
	void OnRep_GameOutcomesByTeam();
	void OnRep_GameServerDebugInfo();
	void OnRep_IsGameTimerExtended();
	void OnRep_MangoIds();
	void OnRep_MatchEndJsonString();
	void OnRep_PlaylistInfo();
	void OnRep_PregameState();
	void OnRep_PreRoundCountdownEndTimeStamp();
	void OnRep_SafeToLeaveSessionEndTimeTeam0Stamp();
	void OnRep_SafeToLeaveSessionEndTimeTeam1Stamp();
	void OnRep_SessionHasEarlyDisconnect();
	void OnRep_TeamScores();
	void OnWorldUILevelHidden();
	void OnWorldUILevelShown();
	void RemoveImportantThrowTarget(class AActor* ThrowTargetActor);
	void RemovePointsFromTeam(int32 TeamIndex, int32 PointsToDecrement);
	void SetMatchEndJsonString(const class FString& MatchEnd);
	void SetPregameState(class FName NewState);
	void SetPreRoundCountdownTime(int32 InPreRoundCountdownTime);
	void SetTimeToLeaveSessionForTeam(int32 TeamIndex);

	class FText GetDefaultBotName() const;
	TArray<class UMarinerPlayableCharacter*> GetEnabledCharacters(EMarinerEnabledCharacterFilter Filter) const;
	EMarinerGameOutcome GetGameOutcome(const class AMarinerPlayerState* PlayerState) const;
	float GetHealthToRecoverOnKnockout(class AMarinerPlayerState* PlayerStateOfReturningCharacter) const;
	TArray<class APlayerState*> GetIndependentNonBotPlayers() const;
	TArray<class APlayerState*> GetIndependentPlayers() const;
	TArray<class APlayerState*> GetIndependentPlayersOnTeam(int32 TeamIndex) const;
	const struct FGuid GetMatchId() const;
	float GetMidMatchRoundTimeRemaining() const;
	TArray<class APlayerState*> GetNonBotPlayersOnTeam(int32 TeamIndex) const;
	int32 GetNumPlayersOnTeam(int32 TeamIndex) const;
	TArray<class APlayerState*> GetPlayersOnTeam(int32 TeamIndex) const;
	class FString GetPlaylistEventId() const;
	const struct FGuid GetPlaylistName() const;
	float GetPreRoundCountdownTimeRemaining() const;
	bool IsCharacterStackingAllowed() const;
	bool IsForceRandomSelectionEnabled() const;
	bool IsGameCurrentlyRunning() const;
	bool IsGameTimerPaused() const;
	bool IsMatchMade() const;
	bool IsMatchTied() const;
	bool IsPlaylistPvE() const;
	bool IsRanked() const;
	const bool IsSessionSafeToLeave(int32 TeamIndex) const;
	const bool IsSessonWithEarlyDisconnect() const;
	bool ShouldEnterOvertime() const;
	bool ShouldResetCooldownsOnKnockout() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameState">();
	}
	static class AMarinerGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerGameState>();
	}
};
static_assert(alignof(AMarinerGameState) == 0x000008, "Wrong alignment on AMarinerGameState");
static_assert(sizeof(AMarinerGameState) == 0x0008C0, "Wrong size on AMarinerGameState");
static_assert(offsetof(AMarinerGameState, OnPlayerAdded) == 0x000278, "Member 'AMarinerGameState::OnPlayerAdded' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnPlayerRemoved) == 0x000288, "Member 'AMarinerGameState::OnPlayerRemoved' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnPlayableCharactersChanged) == 0x000298, "Member 'AMarinerGameState::OnPlayableCharactersChanged' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnTeamScoreChanged) == 0x0002A8, "Member 'AMarinerGameState::OnTeamScoreChanged' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnGameOutcomeChanged) == 0x0002B8, "Member 'AMarinerGameState::OnGameOutcomeChanged' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnRoundResetTimerSet) == 0x0002C8, "Member 'AMarinerGameState::OnRoundResetTimerSet' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnRemainingTimeChanged) == 0x0002D8, "Member 'AMarinerGameState::OnRemainingTimeChanged' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnOvertimeStarted) == 0x0002E8, "Member 'AMarinerGameState::OnOvertimeStarted' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnSafeToLeaveTimerStarted) == 0x0002F8, "Member 'AMarinerGameState::OnSafeToLeaveTimerStarted' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnSafeToLeaveTimerStoped) == 0x000308, "Member 'AMarinerGameState::OnSafeToLeaveTimerStoped' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnSessionSafeToLeave) == 0x000318, "Member 'AMarinerGameState::OnSessionSafeToLeave' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnServerPreRoundCountdownTimerSet) == 0x000328, "Member 'AMarinerGameState::OnServerPreRoundCountdownTimerSet' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnRoundCountdownTimerStarted) == 0x000338, "Member 'AMarinerGameState::OnRoundCountdownTimerStarted' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnGameTimerExtendedChanged) == 0x000348, "Member 'AMarinerGameState::OnGameTimerExtendedChanged' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnPregameStateChanged) == 0x000358, "Member 'AMarinerGameState::OnPregameStateChanged' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnMatchStateChanged) == 0x000368, "Member 'AMarinerGameState::OnMatchStateChanged' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnAnyPlayerChangedTeams) == 0x000378, "Member 'AMarinerGameState::OnAnyPlayerChangedTeams' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnMatchEndDataSet) == 0x000388, "Member 'AMarinerGameState::OnMatchEndDataSet' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnPlaylistInfoSet) == 0x000398, "Member 'AMarinerGameState::OnPlaylistInfoSet' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, OnModeHUDStatesChanged) == 0x0003A8, "Member 'AMarinerGameState::OnModeHUDStatesChanged' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, bShouldDisplayFinalCountdown) == 0x0003B8, "Member 'AMarinerGameState::bShouldDisplayFinalCountdown' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, MegaBlastVolumeDirectorManager) == 0x0003D0, "Member 'AMarinerGameState::MegaBlastVolumeDirectorManager' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, FastCollisionManager) == 0x0003D8, "Member 'AMarinerGameState::FastCollisionManager' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, PoolingManager) == 0x0003E0, "Member 'AMarinerGameState::PoolingManager' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, ActorPool) == 0x0003E8, "Member 'AMarinerGameState::ActorPool' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, DisabledCharacterClasses) == 0x0003F0, "Member 'AMarinerGameState::DisabledCharacterClasses' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, ForceEnabledCharacterClasses) == 0x000400, "Member 'AMarinerGameState::ForceEnabledCharacterClasses' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, DefaultHealthRecoveredOnArenaReturn) == 0x000410, "Member 'AMarinerGameState::DefaultHealthRecoveredOnArenaReturn' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, CountdownSuppressionEffect) == 0x000418, "Member 'AMarinerGameState::CountdownSuppressionEffect' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, BetweenRoundsSuppressionDuration) == 0x000420, "Member 'AMarinerGameState::BetweenRoundsSuppressionDuration' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, ServerPreRoundCountdownEndTimeStamp) == 0x000424, "Member 'AMarinerGameState::ServerPreRoundCountdownEndTimeStamp' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, ServerSafeToLeaveSessionEndTimeTeam0Stamp) == 0x000428, "Member 'AMarinerGameState::ServerSafeToLeaveSessionEndTimeTeam0Stamp' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, ServerSafeToLeaveSessionEndTimeTeam1Stamp) == 0x00042C, "Member 'AMarinerGameState::ServerSafeToLeaveSessionEndTimeTeam1Stamp' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, RemainingTime) == 0x000430, "Member 'AMarinerGameState::RemainingTime' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, bIsGameTimerExtended) == 0x000434, "Member 'AMarinerGameState::bIsGameTimerExtended' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, bIsGameTimerPaused) == 0x000435, "Member 'AMarinerGameState::bIsGameTimerPaused' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, bIsInOvertime) == 0x000436, "Member 'AMarinerGameState::bIsInOvertime' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, NumTeams) == 0x000438, "Member 'AMarinerGameState::NumTeams' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, TeamScores) == 0x000440, "Member 'AMarinerGameState::TeamScores' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, TeamGameOutcomes) == 0x000450, "Member 'AMarinerGameState::TeamGameOutcomes' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, ImportantThrowTargets) == 0x000460, "Member 'AMarinerGameState::ImportantThrowTargets' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, AvailableItemSpawns) == 0x000470, "Member 'AMarinerGameState::AvailableItemSpawns' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, GameModeRequiredObjects) == 0x000480, "Member 'AMarinerGameState::GameModeRequiredObjects' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, RoundCount) == 0x000490, "Member 'AMarinerGameState::RoundCount' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, MatchEndJsonString) == 0x000498, "Member 'AMarinerGameState::MatchEndJsonString' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, PregameState) == 0x0004B8, "Member 'AMarinerGameState::PregameState' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, GameModeName) == 0x0004C0, "Member 'AMarinerGameState::GameModeName' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, GameServerDebugInfo) == 0x0004D0, "Member 'AMarinerGameState::GameServerDebugInfo' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, GameLiftSessionInfo) == 0x000578, "Member 'AMarinerGameState::GameLiftSessionInfo' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, MangoIds) == 0x0005B0, "Member 'AMarinerGameState::MangoIds' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, bIsMatchmadeSession) == 0x0005C0, "Member 'AMarinerGameState::bIsMatchmadeSession' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, PlaylistInfo) == 0x0005C8, "Member 'AMarinerGameState::PlaylistInfo' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, PlaylistName) == 0x0005E0, "Member 'AMarinerGameState::PlaylistName' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, ActiveModeHUDStates) == 0x0005F0, "Member 'AMarinerGameState::ActiveModeHUDStates' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, bAllowCharacterStacking) == 0x0005F4, "Member 'AMarinerGameState::bAllowCharacterStacking' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, bForceRandomCharacter) == 0x0005F5, "Member 'AMarinerGameState::bForceRandomCharacter' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, bResetCooldownsOnKnockout) == 0x0005F6, "Member 'AMarinerGameState::bResetCooldownsOnKnockout' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, NumRequiredPlayersForMatch) == 0x0005F8, "Member 'AMarinerGameState::NumRequiredPlayersForMatch' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, NumRequiredPlayersForTeam) == 0x0005FC, "Member 'AMarinerGameState::NumRequiredPlayersForTeam' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, TimeBeforeTheGameIsDeclaredSafeToLeave) == 0x000600, "Member 'AMarinerGameState::TimeBeforeTheGameIsDeclaredSafeToLeave' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, DefaultBotName) == 0x000620, "Member 'AMarinerGameState::DefaultBotName' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, TelemetryType) == 0x000644, "Member 'AMarinerGameState::TelemetryType' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, RocketballAnalyticItemClass) == 0x000648, "Member 'AMarinerGameState::RocketballAnalyticItemClass' has a wrong offset!");
static_assert(offsetof(AMarinerGameState, bSessionHasEarlyDisconnect) == 0x0008B3, "Member 'AMarinerGameState::bSessionHasEarlyDisconnect' has a wrong offset!");

// Class Mariner.MarinerLANLobbyGameState
// 0x0038 (0x08F8 - 0x08C0)
class AMarinerLANLobbyGameState final : public AMarinerGameState
{
public:
	UMulticastInlineDelegateProperty_             OnMatchSettingsMenuChanged;                        // 0x08C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 DesiredMapName;                                    // 0x08D0(0x0010)(BlueprintVisible, Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DesiredModeName;                                   // 0x08E0(0x0010)(BlueprintVisible, Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesiredBotsSelection;                              // 0x08F0(0x0004)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesiredBotDifficulty;                              // 0x08F4(0x0004)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnRep_MatchSettingsChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLANLobbyGameState">();
	}
	static class AMarinerLANLobbyGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerLANLobbyGameState>();
	}
};
static_assert(alignof(AMarinerLANLobbyGameState) == 0x000008, "Wrong alignment on AMarinerLANLobbyGameState");
static_assert(sizeof(AMarinerLANLobbyGameState) == 0x0008F8, "Wrong size on AMarinerLANLobbyGameState");
static_assert(offsetof(AMarinerLANLobbyGameState, OnMatchSettingsMenuChanged) == 0x0008C0, "Member 'AMarinerLANLobbyGameState::OnMatchSettingsMenuChanged' has a wrong offset!");
static_assert(offsetof(AMarinerLANLobbyGameState, DesiredMapName) == 0x0008D0, "Member 'AMarinerLANLobbyGameState::DesiredMapName' has a wrong offset!");
static_assert(offsetof(AMarinerLANLobbyGameState, DesiredModeName) == 0x0008E0, "Member 'AMarinerLANLobbyGameState::DesiredModeName' has a wrong offset!");
static_assert(offsetof(AMarinerLANLobbyGameState, DesiredBotsSelection) == 0x0008F0, "Member 'AMarinerLANLobbyGameState::DesiredBotsSelection' has a wrong offset!");
static_assert(offsetof(AMarinerLANLobbyGameState, DesiredBotDifficulty) == 0x0008F4, "Member 'AMarinerLANLobbyGameState::DesiredBotDifficulty' has a wrong offset!");

// Class Mariner.MarinerCharacterSelectedWidget
// 0x0070 (0x0348 - 0x02D8)
class UMarinerCharacterSelectedWidget : public UMarinerSkinnedSelectedCharacterWidget
{
public:
	bool                                          bIsSelected;                                       // 0x02D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_172B[0x7];                                     // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 Bound_ImageMicOn;                                  // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_ImageMicOff;                                 // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   CurrentHoveredClass;                               // 0x02F0(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_172C[0x30];                                    // 0x0318(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayHoveredData(class AMarinerPlayerState* PlayerState, class UMarinerPlayableCharacter* CharacterData, class UMarinerSkinCollectionDataAsset* ActiveSkin, int32 Level, class UMarinerArtifactDataAsset* Artifact);
	void OnClientRequestingCharacter();
	void OnHovered();
	void OnLockedSelectionChanged();
	void OnPlayerStateCharacterRequestFailed(const class FString& FailedCharacterRequest, const class FString& LastKnownCharacterString);
	void OnPlayerStateCharacterSelected(class AMarinerPlayerState* PlayerState, TSoftClassPtr<class UClass> SelectedCharacter);
	void OnPlayerStateSelectedCharacterChanged(const class FString& SelectedCharacter);
	void OnPlayerTalking(const class FString& ChannelName, const class FString& PlayerName, bool bIsTalking);
	void OnSetSelectedState();
	void OnSetUnselectedState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterSelectedWidget">();
	}
	static class UMarinerCharacterSelectedWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterSelectedWidget>();
	}
};
static_assert(alignof(UMarinerCharacterSelectedWidget) == 0x000008, "Wrong alignment on UMarinerCharacterSelectedWidget");
static_assert(sizeof(UMarinerCharacterSelectedWidget) == 0x000348, "Wrong size on UMarinerCharacterSelectedWidget");
static_assert(offsetof(UMarinerCharacterSelectedWidget, bIsSelected) == 0x0002D8, "Member 'UMarinerCharacterSelectedWidget::bIsSelected' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectedWidget, Bound_ImageMicOn) == 0x0002E0, "Member 'UMarinerCharacterSelectedWidget::Bound_ImageMicOn' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectedWidget, Bound_ImageMicOff) == 0x0002E8, "Member 'UMarinerCharacterSelectedWidget::Bound_ImageMicOff' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectedWidget, CurrentHoveredClass) == 0x0002F0, "Member 'UMarinerCharacterSelectedWidget::CurrentHoveredClass' has a wrong offset!");

// Class Mariner.MarinerRejoinResponseInterface
// 0x0000 (0x0028 - 0x0028)
class IMarinerRejoinResponseInterface final : public IInterface
{
public:
	void OnAnyRejoiningClientReady();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRejoinResponseInterface">();
	}
	static class IMarinerRejoinResponseInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarinerRejoinResponseInterface>();
	}
};
static_assert(alignof(IMarinerRejoinResponseInterface) == 0x000008, "Wrong alignment on IMarinerRejoinResponseInterface");
static_assert(sizeof(IMarinerRejoinResponseInterface) == 0x000028, "Wrong size on IMarinerRejoinResponseInterface");

// Class Mariner.MarinerItemLevelWidget
// 0x0058 (0x0308 - 0x02B0)
class UMarinerItemLevelWidget : public UMarinerUserWidget
{
public:
	class UMarinerVerticalBox*                    Bound_ItemLevelWidgetRootBox;                      // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerHorizontalBox*                  Bound_FreeRewardsBox;                              // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerHorizontalBox*                  Bound_PaidRewardsBox;                              // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_PaidPanel;                                   // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_Divider;                                     // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_LevelText;                                   // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_UnavailableImage;                            // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           LevelAvailableColor;                               // 0x02E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           LevelUnavailableColor;                             // 0x02F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerItemLevelWidget">();
	}
	static class UMarinerItemLevelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerItemLevelWidget>();
	}
};
static_assert(alignof(UMarinerItemLevelWidget) == 0x000008, "Wrong alignment on UMarinerItemLevelWidget");
static_assert(sizeof(UMarinerItemLevelWidget) == 0x000308, "Wrong size on UMarinerItemLevelWidget");
static_assert(offsetof(UMarinerItemLevelWidget, Bound_ItemLevelWidgetRootBox) == 0x0002B0, "Member 'UMarinerItemLevelWidget::Bound_ItemLevelWidgetRootBox' has a wrong offset!");
static_assert(offsetof(UMarinerItemLevelWidget, Bound_FreeRewardsBox) == 0x0002B8, "Member 'UMarinerItemLevelWidget::Bound_FreeRewardsBox' has a wrong offset!");
static_assert(offsetof(UMarinerItemLevelWidget, Bound_PaidRewardsBox) == 0x0002C0, "Member 'UMarinerItemLevelWidget::Bound_PaidRewardsBox' has a wrong offset!");
static_assert(offsetof(UMarinerItemLevelWidget, Bound_PaidPanel) == 0x0002C8, "Member 'UMarinerItemLevelWidget::Bound_PaidPanel' has a wrong offset!");
static_assert(offsetof(UMarinerItemLevelWidget, Bound_Divider) == 0x0002D0, "Member 'UMarinerItemLevelWidget::Bound_Divider' has a wrong offset!");
static_assert(offsetof(UMarinerItemLevelWidget, Bound_LevelText) == 0x0002D8, "Member 'UMarinerItemLevelWidget::Bound_LevelText' has a wrong offset!");
static_assert(offsetof(UMarinerItemLevelWidget, Bound_UnavailableImage) == 0x0002E0, "Member 'UMarinerItemLevelWidget::Bound_UnavailableImage' has a wrong offset!");
static_assert(offsetof(UMarinerItemLevelWidget, LevelAvailableColor) == 0x0002E8, "Member 'UMarinerItemLevelWidget::LevelAvailableColor' has a wrong offset!");
static_assert(offsetof(UMarinerItemLevelWidget, LevelUnavailableColor) == 0x0002F8, "Member 'UMarinerItemLevelWidget::LevelUnavailableColor' has a wrong offset!");

// Class Mariner.MarinerCharacterSelectMenu
// 0x0128 (0x0608 - 0x04E0)
class UMarinerCharacterSelectMenu : public UMarinerMenu
{
public:
	int32                                         CharacterSelectButtonRows;                         // 0x04E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_172F[0x4];                                     // 0x04E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerCharacterSelectButton> CharacterSelectButtonClass;                        // 0x04E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerUniformGridPanel*               CharacterSelectPanel;                              // 0x04F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerLayeredButton*                  SelectCharacterButton;                             // 0x04F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPrompt*                         SelectCharacterPrompt;                             // 0x0500(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPrompt*                         CancelSelectionPrompt;                             // 0x0508(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerLayeredButton*                  CancelSelectionButton;                             // 0x0510(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPromptBanner*                   EmotePromptBanner;                                 // 0x0518(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                            IconLockOverride;                                  // 0x0520(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UMarinerPlayableCharacter>> InventoryCharactersToLoad;                         // 0x05A8(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UMarinerPlayableCharacter*>      InventoryCharacters;                               // 0x05B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UMarinerCharacterSelectButton*>  CharacterSelectButtons;                            // 0x05C8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UMarinerCharacterSelectedWidget*> TeamCharacterWidgets;                              // 0x05D8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1730[0x8];                                     // 0x05E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerCharacterSelectButton*          SelectedButton;                                    // 0x05F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AMarinerCharacter*                      LoadedSelectedCharacter;                           // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1731[0x8];                                     // 0x0600(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnButtonActivityStateHasBeenChanged();
	void BP_OnCharacterSelectionFailed();
	void CreateCharacterSelectButtons();
	class UMarinerCharacterSelectButton* GetSelectedButton();
	void OnAnyPlayerChangedTeam(class AMarinerPlayerState* PlayerState);
	void OnCancelPressed();
	void OnCancelSelectionButtonPressed(class UMarinerLayeredButton* LayeredButton);
	void OnCharacterButtonHovered(class UMarinerLayeredButton* Instance, bool bFromKeyboard, bool bFromMouse);
	void OnCharacterButtonSelected(class UMarinerLayeredButton* LayeredButton);
	void OnCharacterButtonUnHovered(class UMarinerLayeredButton* LayeredButton);
	void OnCharacterHighlightChanged(class UMarinerPlayableCharacter* Character);
	void OnCharacterSelectionLocked();
	void OnCharacterSelectionReleased();
	void OnConfirmPressed();
	void OnCountdownEnteredLockState();
	void OnEmotePressed(EMarinerInputActions InputAction);
	void OnInitialRandomCharacterSet(const TSoftClassPtr<class UClass>& Character);
	void OnLocalInventoryChanged();
	void OnLocalProfilePregameEmoteDataLoaded();
	void OnOwningPlayerStateCharacterRequestFailed(const class FString& RequestedCharacterString, const class FString& LastKnownSelectedCharacter);
	void OnOwningPlayerStateInitiatedOnAuthority();
	void OnOwningPlayerStateIntialRandomCharacterSet(const class FString& RequestedCharacterData);
	void OnOwningPlayerStatePawnClassSet();
	void OnOwningPlayerStateReplicated(class AMarinerPlayerController* ControllerHostingState);
	void OnOwningPlayerStateSelectedCharacterChanged(const class FString& RequestedCharacterData);
	void OnPlayableCharactersChanged();
	void OnPlayerAdded(class APlayerState* PlayerState);
	void OnPlayerRemoved(class APlayerState* PlayerState);
	void OnPlayerStateReplicated();
	void OnPregameStateChanged(const class FName NewPregameState);
	void OnSelectCharacterButtonPressed(class UMarinerLayeredButton* LayeredButton);
	void OnSelectedCharacterLoaded();
	void OnSoftSelectionChanged(const TSoftClassPtr<class UClass>& SelectedCharacter);
	void RefreshCharacterButtonIconStates();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterSelectMenu">();
	}
	static class UMarinerCharacterSelectMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterSelectMenu>();
	}
};
static_assert(alignof(UMarinerCharacterSelectMenu) == 0x000008, "Wrong alignment on UMarinerCharacterSelectMenu");
static_assert(sizeof(UMarinerCharacterSelectMenu) == 0x000608, "Wrong size on UMarinerCharacterSelectMenu");
static_assert(offsetof(UMarinerCharacterSelectMenu, CharacterSelectButtonRows) == 0x0004E0, "Member 'UMarinerCharacterSelectMenu::CharacterSelectButtonRows' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectMenu, CharacterSelectButtonClass) == 0x0004E8, "Member 'UMarinerCharacterSelectMenu::CharacterSelectButtonClass' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectMenu, CharacterSelectPanel) == 0x0004F0, "Member 'UMarinerCharacterSelectMenu::CharacterSelectPanel' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectMenu, SelectCharacterButton) == 0x0004F8, "Member 'UMarinerCharacterSelectMenu::SelectCharacterButton' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectMenu, SelectCharacterPrompt) == 0x000500, "Member 'UMarinerCharacterSelectMenu::SelectCharacterPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectMenu, CancelSelectionPrompt) == 0x000508, "Member 'UMarinerCharacterSelectMenu::CancelSelectionPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectMenu, CancelSelectionButton) == 0x000510, "Member 'UMarinerCharacterSelectMenu::CancelSelectionButton' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectMenu, EmotePromptBanner) == 0x000518, "Member 'UMarinerCharacterSelectMenu::EmotePromptBanner' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectMenu, IconLockOverride) == 0x000520, "Member 'UMarinerCharacterSelectMenu::IconLockOverride' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectMenu, InventoryCharactersToLoad) == 0x0005A8, "Member 'UMarinerCharacterSelectMenu::InventoryCharactersToLoad' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectMenu, InventoryCharacters) == 0x0005B8, "Member 'UMarinerCharacterSelectMenu::InventoryCharacters' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectMenu, CharacterSelectButtons) == 0x0005C8, "Member 'UMarinerCharacterSelectMenu::CharacterSelectButtons' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectMenu, TeamCharacterWidgets) == 0x0005D8, "Member 'UMarinerCharacterSelectMenu::TeamCharacterWidgets' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectMenu, SelectedButton) == 0x0005F0, "Member 'UMarinerCharacterSelectMenu::SelectedButton' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterSelectMenu, LoadedSelectedCharacter) == 0x0005F8, "Member 'UMarinerCharacterSelectMenu::LoadedSelectedCharacter' has a wrong offset!");

// Class Mariner.MarinerRocketTotem
// 0x0118 (0x0340 - 0x0228)
class AMarinerRocketTotem : public AStaticMeshActor
{
public:
	uint8                                         Pad_1733[0x8];                                     // 0x0228(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamIndex;                                         // 0x0230(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerHostility                             TeamOrientation;                                   // 0x0234(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1734[0x3];                                     // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerIndex;                                       // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bManualPlayerStateSet;                             // 0x023C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1735[0x3];                                     // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   StandMeshComponent;                                // 0x0240(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   BannerMeshComponent;                               // 0x0248(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        TotemVFX;                                          // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*               ParticleComponent;                                 // 0x0258(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 CompanionComponent;                                // 0x0260(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetComponent*                       WidgetComponent;                                   // 0x0268(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpinSpeed;                                      // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1736[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerPlayerState*                    AssignedPlayerState;                               // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisableMeshPunchThrough;                          // 0x0288(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnablePreviewMode;                                // 0x0289(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableWidget;                                     // 0x028A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowInteractableBehavior;                        // 0x028B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1737[0xC];                                     // 0x028C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BannerMaterialInstance;                            // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1738[0x80];                                    // 0x02A0(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         SpawnedActors;                                     // 0x0320(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1739[0x10];                                    // 0x0330(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyProfileObjects();
	void ApplyTotemCollection(const struct FMarinerRocketTotemCollection& TotemCollection);
	void DirtyRefresh();
	struct FMarinerRocketTotemCollection GetCachedTotemChanges();
	void OnAnyPlayerChangedTeams(class AMarinerPlayerState* PlayerChangingTeams);
	void OnPlayerJoinedOrLeftGame(class APlayerState* JoiningPlayer);
	void OnRefreshTotem();
	void PlayCompanionVictoryAnim();
	void ResetParticles(bool bEmptyInstances);
	void SetBannerBorder(class UMarinerRocketTotemBorderDataAsset* DataAsset);
	void SetBannerPattern(class UMarinerRocketTotemPatternDataAsset* DataAsset);
	void SetBannerShape(class UMarinerRocketTotemShapeDataAsset* DataAsset);
	void SetBannerSymbol(class UMarinerRocketTotemSymbolsDataAsset* DataAsset);
	void SetCompanion(class UMarinerRocketTotemCompanionDataAsset* DataAsset);
	void SetProfileStateData(struct FMarinerRocketTotemCollection& TotemCollection);
	void SetStandMesh(class UMarinerRocketTotemStandDataAsset* DataAsset);
	void SetVFX(class UMarinerRocketTotemVFXDataAsset* DataAsset);

	class UCapsuleComponent* GetCapsuleComponent() const;
	struct FRotator GetStartingRotation() const;
	bool IsPlayerAssigned() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRocketTotem">();
	}
	static class AMarinerRocketTotem* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerRocketTotem>();
	}
};
static_assert(alignof(AMarinerRocketTotem) == 0x000008, "Wrong alignment on AMarinerRocketTotem");
static_assert(sizeof(AMarinerRocketTotem) == 0x000340, "Wrong size on AMarinerRocketTotem");
static_assert(offsetof(AMarinerRocketTotem, TeamIndex) == 0x000230, "Member 'AMarinerRocketTotem::TeamIndex' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, TeamOrientation) == 0x000234, "Member 'AMarinerRocketTotem::TeamOrientation' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, PlayerIndex) == 0x000238, "Member 'AMarinerRocketTotem::PlayerIndex' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, bManualPlayerStateSet) == 0x00023C, "Member 'AMarinerRocketTotem::bManualPlayerStateSet' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, StandMeshComponent) == 0x000240, "Member 'AMarinerRocketTotem::StandMeshComponent' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, BannerMeshComponent) == 0x000248, "Member 'AMarinerRocketTotem::BannerMeshComponent' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, TotemVFX) == 0x000250, "Member 'AMarinerRocketTotem::TotemVFX' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, ParticleComponent) == 0x000258, "Member 'AMarinerRocketTotem::ParticleComponent' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, CompanionComponent) == 0x000260, "Member 'AMarinerRocketTotem::CompanionComponent' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, WidgetComponent) == 0x000268, "Member 'AMarinerRocketTotem::WidgetComponent' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, MaxSpinSpeed) == 0x000270, "Member 'AMarinerRocketTotem::MaxSpinSpeed' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, AssignedPlayerState) == 0x000278, "Member 'AMarinerRocketTotem::AssignedPlayerState' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, CapsuleComponent) == 0x000280, "Member 'AMarinerRocketTotem::CapsuleComponent' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, bDisableMeshPunchThrough) == 0x000288, "Member 'AMarinerRocketTotem::bDisableMeshPunchThrough' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, bEnablePreviewMode) == 0x000289, "Member 'AMarinerRocketTotem::bEnablePreviewMode' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, bEnableWidget) == 0x00028A, "Member 'AMarinerRocketTotem::bEnableWidget' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, bAllowInteractableBehavior) == 0x00028B, "Member 'AMarinerRocketTotem::bAllowInteractableBehavior' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, BannerMaterialInstance) == 0x000298, "Member 'AMarinerRocketTotem::BannerMaterialInstance' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTotem, SpawnedActors) == 0x000320, "Member 'AMarinerRocketTotem::SpawnedActors' has a wrong offset!");

// Class Mariner.MarinerCharacterSpawner
// 0x00C0 (0x02D8 - 0x0218)
class AMarinerCharacterSpawner : public AActor
{
public:
	uint8                                         Pad_173A[0x10];                                    // 0x0218(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AMarinerCharacterLite>      CurrentCharacterClass;                             // 0x0228(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerSkinCollectionDataAsset*        CurrentCharacterSkinAsset;                         // 0x0230(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_173B[0x10];                                    // 0x0238(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacterLite*                  CurrentLoadedCharacter;                            // 0x0248(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AMarinerSpawnLocation>> SpawnLocations;                                    // 0x0250(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bEnableGreeting;                                   // 0x0260(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_173C[0x7];                                     // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AStaticMeshActor*                       BackgroundMesh;                                    // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               BackgroundIconMaterial;                            // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_173D[0x60];                                    // 0x0278(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplySkin(class UMarinerSkinCollectionDataAsset* InSkinCollection);
	class AMarinerCharacterLite* GetCurrentLoadedCharacter();
	bool LoadCharacter(const TSubclassOf<class AMarinerCharacterLite>& InClass);
	void LoadCharacterWithSkin(const TSoftClassPtr<class UClass>& InClass, const TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> InSkin);
	void OnCharacterAndSkinLoaded();
	void OnCharacterLoaded();
	void OnLoadedCharacterSkinApplied(class UMarinerSkinCollectionDataAsset* Collection);
	void OnPortraitBackgroundLoaded(class UTexture* Portrait);
	void OnSkinApplied(class UMarinerSkinCollectionDataAsset* InSkinCollection);
	void SetVictoryAnimationTime(float AnimationTime);
	void ShowEmoteAnimation(class UAnimMontage* InAnim);
	void UnloadCharacter();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterSpawner">();
	}
	static class AMarinerCharacterSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerCharacterSpawner>();
	}
};
static_assert(alignof(AMarinerCharacterSpawner) == 0x000008, "Wrong alignment on AMarinerCharacterSpawner");
static_assert(sizeof(AMarinerCharacterSpawner) == 0x0002D8, "Wrong size on AMarinerCharacterSpawner");
static_assert(offsetof(AMarinerCharacterSpawner, CurrentCharacterClass) == 0x000228, "Member 'AMarinerCharacterSpawner::CurrentCharacterClass' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterSpawner, CurrentCharacterSkinAsset) == 0x000230, "Member 'AMarinerCharacterSpawner::CurrentCharacterSkinAsset' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterSpawner, CurrentLoadedCharacter) == 0x000248, "Member 'AMarinerCharacterSpawner::CurrentLoadedCharacter' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterSpawner, SpawnLocations) == 0x000250, "Member 'AMarinerCharacterSpawner::SpawnLocations' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterSpawner, bEnableGreeting) == 0x000260, "Member 'AMarinerCharacterSpawner::bEnableGreeting' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterSpawner, BackgroundMesh) == 0x000268, "Member 'AMarinerCharacterSpawner::BackgroundMesh' has a wrong offset!");
static_assert(offsetof(AMarinerCharacterSpawner, BackgroundIconMaterial) == 0x000270, "Member 'AMarinerCharacterSpawner::BackgroundIconMaterial' has a wrong offset!");

// Class Mariner.MarinerStackHeader
// 0x0010 (0x0428 - 0x0418)
class UMarinerStackHeader : public UMarinerAnimatedWidget
{
public:
	uint8                                         Pad_173F[0x10];                                    // 0x0418(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsHeaderAllowed() const;
	bool IsHeaderDirty() const;
	void UpdateEquippedArtifactsPreset(const bool bRankedPreset) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerStackHeader">();
	}
	static class UMarinerStackHeader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerStackHeader>();
	}
};
static_assert(alignof(UMarinerStackHeader) == 0x000008, "Wrong alignment on UMarinerStackHeader");
static_assert(sizeof(UMarinerStackHeader) == 0x000428, "Wrong size on UMarinerStackHeader");

// Class Mariner.MarinerGauntletController
// 0x0030 (0x0060 - 0x0030)
class UMarinerGauntletController : public UGauntletTestController
{
public:
	uint8                                         Pad_1740[0x30];                                    // 0x0030(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMatchStateChanged(const class FName& NewGameState);
	void StartLogin();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGauntletController">();
	}
	static class UMarinerGauntletController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGauntletController>();
	}
};
static_assert(alignof(UMarinerGauntletController) == 0x000008, "Wrong alignment on UMarinerGauntletController");
static_assert(sizeof(UMarinerGauntletController) == 0x000060, "Wrong size on UMarinerGauntletController");

// Class Mariner.MarinerCharacterStackHeader
// 0x0000 (0x0428 - 0x0428)
class UMarinerCharacterStackHeader : public UMarinerStackHeader
{
public:
	void UpdateEquippedArtifacts(const bool bRankedPreset) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterStackHeader">();
	}
	static class UMarinerCharacterStackHeader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterStackHeader>();
	}
};
static_assert(alignof(UMarinerCharacterStackHeader) == 0x000008, "Wrong alignment on UMarinerCharacterStackHeader");
static_assert(sizeof(UMarinerCharacterStackHeader) == 0x000428, "Wrong size on UMarinerCharacterStackHeader");

// Class Mariner.MarinerCharacterUIData
// 0x0538 (0x0568 - 0x0030)
class UMarinerCharacterUIData : public UDataAsset
{
public:
	class FText                                   Name_MarinerCharacterUIData;                       // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Image;                                             // 0x0048(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SmallIcon;                                         // 0x00D0(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LargeIcon;                                         // 0x0158(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Portrait;                                          // 0x01E0(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NavPoint;                                          // 0x0268(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FButtonStyle                           ButtonStyle;                                       // 0x02F0(0x0278)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCharacterUIData">();
	}
	static class UMarinerCharacterUIData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCharacterUIData>();
	}
};
static_assert(alignof(UMarinerCharacterUIData) == 0x000008, "Wrong alignment on UMarinerCharacterUIData");
static_assert(sizeof(UMarinerCharacterUIData) == 0x000568, "Wrong size on UMarinerCharacterUIData");
static_assert(offsetof(UMarinerCharacterUIData, Name_MarinerCharacterUIData) == 0x000030, "Member 'UMarinerCharacterUIData::Name_MarinerCharacterUIData' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterUIData, Image) == 0x000048, "Member 'UMarinerCharacterUIData::Image' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterUIData, SmallIcon) == 0x0000D0, "Member 'UMarinerCharacterUIData::SmallIcon' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterUIData, LargeIcon) == 0x000158, "Member 'UMarinerCharacterUIData::LargeIcon' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterUIData, Portrait) == 0x0001E0, "Member 'UMarinerCharacterUIData::Portrait' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterUIData, NavPoint) == 0x000268, "Member 'UMarinerCharacterUIData::NavPoint' has a wrong offset!");
static_assert(offsetof(UMarinerCharacterUIData, ButtonStyle) == 0x0002F0, "Member 'UMarinerCharacterUIData::ButtonStyle' has a wrong offset!");

// Class Mariner.MarinerChatEmote
// 0x0070 (0x00E0 - 0x0070)
class UMarinerChatEmote final : public UMarinerCMSItemWithIcon
{
public:
	class UAnimMontage*                           CharacterAnimation;                                // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<TSoftObjectPtr<class USkeletalMesh>, class UAnimMontage*> CharacterAnimationOverrides;                       // 0x0078(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UTexture2D*                             ChatIcon;                                          // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UAkAudioEvent*>                  VoiceLines;                                        // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerChatEmote">();
	}
	static class UMarinerChatEmote* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerChatEmote>();
	}
};
static_assert(alignof(UMarinerChatEmote) == 0x000008, "Wrong alignment on UMarinerChatEmote");
static_assert(sizeof(UMarinerChatEmote) == 0x0000E0, "Wrong size on UMarinerChatEmote");
static_assert(offsetof(UMarinerChatEmote, CharacterAnimation) == 0x000070, "Member 'UMarinerChatEmote::CharacterAnimation' has a wrong offset!");
static_assert(offsetof(UMarinerChatEmote, CharacterAnimationOverrides) == 0x000078, "Member 'UMarinerChatEmote::CharacterAnimationOverrides' has a wrong offset!");
static_assert(offsetof(UMarinerChatEmote, ChatIcon) == 0x0000C8, "Member 'UMarinerChatEmote::ChatIcon' has a wrong offset!");
static_assert(offsetof(UMarinerChatEmote, VoiceLines) == 0x0000D0, "Member 'UMarinerChatEmote::VoiceLines' has a wrong offset!");

// Class Mariner.MarinerChatGlobals
// 0x0040 (0x0070 - 0x0030)
class UMarinerChatGlobals final : public UDataAsset
{
public:
	class UGenericGraph*                          ChatWheelGraph;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ChatWheelTimeoutDuration;                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1741[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerLocalMessage>       MessageToDisplayOnSpamLock;                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerLocalMessage>       ChatEmoteBaseMessageClass;                         // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MessageSpamThreshold;                              // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MessageLifetimeForSpamThreshold;                   // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MessageSpamTimeoutDuration;                        // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           LocalPlayerMessageDisplayColor;                    // 0x005C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumProfileChatSlots;                               // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UMarinerChatWheel_ParentNode* GetChatWheelRoot();
	int32 MapChatInputToSlot(EMarinerInputActions InInput);
	EMarinerInputActions MapChatSlotToInput(int32 InSlot);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerChatGlobals">();
	}
	static class UMarinerChatGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerChatGlobals>();
	}
};
static_assert(alignof(UMarinerChatGlobals) == 0x000008, "Wrong alignment on UMarinerChatGlobals");
static_assert(sizeof(UMarinerChatGlobals) == 0x000070, "Wrong size on UMarinerChatGlobals");
static_assert(offsetof(UMarinerChatGlobals, ChatWheelGraph) == 0x000030, "Member 'UMarinerChatGlobals::ChatWheelGraph' has a wrong offset!");
static_assert(offsetof(UMarinerChatGlobals, ChatWheelTimeoutDuration) == 0x000038, "Member 'UMarinerChatGlobals::ChatWheelTimeoutDuration' has a wrong offset!");
static_assert(offsetof(UMarinerChatGlobals, MessageToDisplayOnSpamLock) == 0x000040, "Member 'UMarinerChatGlobals::MessageToDisplayOnSpamLock' has a wrong offset!");
static_assert(offsetof(UMarinerChatGlobals, ChatEmoteBaseMessageClass) == 0x000048, "Member 'UMarinerChatGlobals::ChatEmoteBaseMessageClass' has a wrong offset!");
static_assert(offsetof(UMarinerChatGlobals, MessageSpamThreshold) == 0x000050, "Member 'UMarinerChatGlobals::MessageSpamThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerChatGlobals, MessageLifetimeForSpamThreshold) == 0x000054, "Member 'UMarinerChatGlobals::MessageLifetimeForSpamThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerChatGlobals, MessageSpamTimeoutDuration) == 0x000058, "Member 'UMarinerChatGlobals::MessageSpamTimeoutDuration' has a wrong offset!");
static_assert(offsetof(UMarinerChatGlobals, LocalPlayerMessageDisplayColor) == 0x00005C, "Member 'UMarinerChatGlobals::LocalPlayerMessageDisplayColor' has a wrong offset!");
static_assert(offsetof(UMarinerChatGlobals, NumProfileChatSlots) == 0x00006C, "Member 'UMarinerChatGlobals::NumProfileChatSlots' has a wrong offset!");

// Class Mariner.MarinerChatWheel_BaseEdge
// 0x0008 (0x0048 - 0x0040)
class UMarinerChatWheel_BaseEdge final : public UGenericGraphEdge
{
public:
	EMarinerTraversalDirection                    TraversalDirection;                                // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1744[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerChatWheel_BaseEdge">();
	}
	static class UMarinerChatWheel_BaseEdge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerChatWheel_BaseEdge>();
	}
};
static_assert(alignof(UMarinerChatWheel_BaseEdge) == 0x000008, "Wrong alignment on UMarinerChatWheel_BaseEdge");
static_assert(sizeof(UMarinerChatWheel_BaseEdge) == 0x000048, "Wrong size on UMarinerChatWheel_BaseEdge");
static_assert(offsetof(UMarinerChatWheel_BaseEdge, TraversalDirection) == 0x000040, "Member 'UMarinerChatWheel_BaseEdge::TraversalDirection' has a wrong offset!");

// Class Mariner.MarinerRichTextBlockDecorator
// 0x0008 (0x0030 - 0x0028)
class UMarinerRichTextBlockDecorator final : public UObject
{
public:
	bool                                          bReveal;                                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1745[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RevealedIndex;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRichTextBlockDecorator">();
	}
	static class UMarinerRichTextBlockDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRichTextBlockDecorator>();
	}
};
static_assert(alignof(UMarinerRichTextBlockDecorator) == 0x000008, "Wrong alignment on UMarinerRichTextBlockDecorator");
static_assert(sizeof(UMarinerRichTextBlockDecorator) == 0x000030, "Wrong size on UMarinerRichTextBlockDecorator");
static_assert(offsetof(UMarinerRichTextBlockDecorator, bReveal) == 0x000028, "Member 'UMarinerRichTextBlockDecorator::bReveal' has a wrong offset!");
static_assert(offsetof(UMarinerRichTextBlockDecorator, RevealedIndex) == 0x00002C, "Member 'UMarinerRichTextBlockDecorator::RevealedIndex' has a wrong offset!");

// Class Mariner.MarinerGameplayFrameworkBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UMarinerGameplayFrameworkBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddGameplayCue(class AActor* TargetActor, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters);
	static void ApplyAbilityToInputActions(class AMarinerCharacter* Character, TSubclassOf<class UMarinerAbility> AbilityClass, EMarinerInputActions InputAction);
	static struct FMarinerGameplayAbilityTargetData_Aim CastAimDataFromHandle(struct FGameplayAbilityTargetDataHandle& AimDataHandle);
	static bool DoesAbilitySpecExistForSpecHandle(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayAbilitySpecHandle& AbilitySpecHandle);
	static class UGameplayAbility* GetPrimaryAbilityInstance(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayAbilitySpecHandle& AbilitySpecHandle);
	static class UWorld* GetWorldFromWorldContext(class UObject* WorldContextObject);
	static bool IsAbilityActive(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayAbilitySpecHandle& AbilitySpecHandle);
	static bool IsGameplayAbilitySpecHandleValid(const struct FGameplayAbilitySpecHandle& AbilitySpecHandle);
	static void RemoveGameplayCue(class AActor* TargetActor, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameplayFrameworkBlueprintLibrary">();
	}
	static class UMarinerGameplayFrameworkBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGameplayFrameworkBlueprintLibrary>();
	}
};
static_assert(alignof(UMarinerGameplayFrameworkBlueprintLibrary) == 0x000008, "Wrong alignment on UMarinerGameplayFrameworkBlueprintLibrary");
static_assert(sizeof(UMarinerGameplayFrameworkBlueprintLibrary) == 0x000028, "Wrong size on UMarinerGameplayFrameworkBlueprintLibrary");

// Class Mariner.MarinerRocketTotemVFXDataAsset
// 0x0008 (0x0078 - 0x0070)
class UMarinerRocketTotemVFXDataAsset final : public UMarinerCMSItemWithIcon
{
public:
	class UParticleSystem*                        VFX;                                               // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRocketTotemVFXDataAsset">();
	}
	static class UMarinerRocketTotemVFXDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRocketTotemVFXDataAsset>();
	}
};
static_assert(alignof(UMarinerRocketTotemVFXDataAsset) == 0x000008, "Wrong alignment on UMarinerRocketTotemVFXDataAsset");
static_assert(sizeof(UMarinerRocketTotemVFXDataAsset) == 0x000078, "Wrong size on UMarinerRocketTotemVFXDataAsset");
static_assert(offsetof(UMarinerRocketTotemVFXDataAsset, VFX) == 0x000070, "Member 'UMarinerRocketTotemVFXDataAsset::VFX' has a wrong offset!");

// Class Mariner.MarinerChatWheel_BaseNode
// 0x0000 (0x00A0 - 0x00A0)
class UMarinerChatWheel_BaseNode : public UGenericGraphNode
{
public:
	const class FText GetChatWheelDisplayText(const class UObject* WorldContextObject) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerChatWheel_BaseNode">();
	}
	static class UMarinerChatWheel_BaseNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerChatWheel_BaseNode>();
	}
};
static_assert(alignof(UMarinerChatWheel_BaseNode) == 0x000008, "Wrong alignment on UMarinerChatWheel_BaseNode");
static_assert(sizeof(UMarinerChatWheel_BaseNode) == 0x0000A0, "Wrong size on UMarinerChatWheel_BaseNode");

// Class Mariner.MarinerChatWheel_ParentNode
// 0x0018 (0x00B8 - 0x00A0)
class UMarinerChatWheel_ParentNode final : public UMarinerChatWheel_BaseNode
{
public:
	class FText                                   ChatWheelDisplayText;                              // 0x00A0(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	class UMarinerChatWheel_BaseNode* GetChildByTraversalDirection(EMarinerTraversalDirection TraversalDirection) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerChatWheel_ParentNode">();
	}
	static class UMarinerChatWheel_ParentNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerChatWheel_ParentNode>();
	}
};
static_assert(alignof(UMarinerChatWheel_ParentNode) == 0x000008, "Wrong alignment on UMarinerChatWheel_ParentNode");
static_assert(sizeof(UMarinerChatWheel_ParentNode) == 0x0000B8, "Wrong size on UMarinerChatWheel_ParentNode");
static_assert(offsetof(UMarinerChatWheel_ParentNode, ChatWheelDisplayText) == 0x0000A0, "Member 'UMarinerChatWheel_ParentNode::ChatWheelDisplayText' has a wrong offset!");

// Class Mariner.MarinerRegionComboBoxSetting
// 0x0000 (0x06F0 - 0x06F0)
class UMarinerRegionComboBoxSetting : public UMarinerSettingComboBox
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRegionComboBoxSetting">();
	}
	static class UMarinerRegionComboBoxSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRegionComboBoxSetting>();
	}
};
static_assert(alignof(UMarinerRegionComboBoxSetting) == 0x000008, "Wrong alignment on UMarinerRegionComboBoxSetting");
static_assert(sizeof(UMarinerRegionComboBoxSetting) == 0x0006F0, "Wrong size on UMarinerRegionComboBoxSetting");

// Class Mariner.MarinerChatWheel_LeafNode
// 0x0018 (0x00B8 - 0x00A0)
class UMarinerChatWheel_LeafNode : public UMarinerChatWheel_BaseNode
{
public:
	TArray<TSubclassOf<class UMarinerLocalMessage>> PossibleMessages;                                  // 0x00A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerLocalMessage>       MessageToSend;                                     // 0x00B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	const TSubclassOf<class UMarinerLocalMessage> GetMessageToSend(const class UObject* WorldContextObject) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerChatWheel_LeafNode">();
	}
	static class UMarinerChatWheel_LeafNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerChatWheel_LeafNode>();
	}
};
static_assert(alignof(UMarinerChatWheel_LeafNode) == 0x000008, "Wrong alignment on UMarinerChatWheel_LeafNode");
static_assert(sizeof(UMarinerChatWheel_LeafNode) == 0x0000B8, "Wrong size on UMarinerChatWheel_LeafNode");
static_assert(offsetof(UMarinerChatWheel_LeafNode, PossibleMessages) == 0x0000A0, "Member 'UMarinerChatWheel_LeafNode::PossibleMessages' has a wrong offset!");
static_assert(offsetof(UMarinerChatWheel_LeafNode, MessageToSend) == 0x0000B0, "Member 'UMarinerChatWheel_LeafNode::MessageToSend' has a wrong offset!");

// Class Mariner.MarinerProjectile
// 0x0698 (0x08B0 - 0x0218)
class AMarinerProjectile : public AActor
{
public:
	uint8                                         Pad_174C[0x10];                                    // 0x0218(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnExplodeDelegate;                                 // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnHomingTargetAcquiredDelegate;                    // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnHomingTargetLostDelegate;                        // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnEnabledFromPool;                                 // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnEnabledFromClientRejoin;                         // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnDisabledtoPool;                                  // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnInitialDisabledtoPool;                           // 0x0288(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnProjectileLifeChangedDelegate;                   // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnProjectileSpeedChangedDelegate;                  // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnGameplayTagRemovedDelegate;                      // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnGameplayTagAppliedDelegate;                      // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAuthorityDirectDamageNegatedFromComponentInvulnerabilityTagDelegate; // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_174D[0x8];                                     // 0x02E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProjectileEnablePoolDelayValue;                    // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174E[0xC];                                     // 0x02F4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DefaultProjectileFireSocket;                       // 0x0300(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  MuzzleFXGameplayCues;                              // 0x0308(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bShouldDisableInPostgame;                          // 0x0328(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_174F[0x57];                                    // 0x0329(0x0057)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bPooledProjectile;                                 // 0x0380(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         EnableId;                                          // 0x0381(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInstancedMeshVisible;                           // 0x0382(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1750[0x1];                                     // 0x0383(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReplicatedServerLastTransformUpdateTimeStamp;      // 0x0384(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1751[0xD];                                     // 0x0388(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseLatencyCompensation;                           // 0x0395(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTranslateParticleTrailOnExplode;                  // 0x0396(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1752[0x1];                                     // 0x0397(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeLocationToSnapParticleComponentToOnExplode; // 0x0398(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1753[0xA4];                                    // 0x03A4(0x00A4)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThirdPersonObstructionTestDistance;                // 0x0448(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             CornerObstructionCollisionChannel;                 // 0x044C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1754[0x3];                                     // 0x044D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CornerObstructionCollisionProbeSize;               // 0x0450(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UMarinerAbilitySkinData_Base> CachedProfileSkinData;                             // 0x0454(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1755[0x4];                                     // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerProjectileMoveComponent*        MovementComp;                                      // 0x0460(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerProjectileCollisionComponent*   CollisionComponent;                                // 0x0468(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerFastSphereComponent*            FastSphereCollision;                               // 0x0470(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*               ParticleComp;                                      // 0x0478(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   StaticMeshComp;                                    // 0x0480(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkComponent*                           AkSoundComponent;                                  // 0x0488(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ParticleLifetimePostExplode;                       // 0x0490(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bActivateParticleSystemOnEnableFromPool;           // 0x0494(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldResolveVisualOffsetAfterExploding;          // 0x0495(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1756[0x2];                                     // 0x0496(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocallyOwnedVisibilityDelay;                       // 0x0498(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumExplosionDistanceFromImpact;                // 0x049C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCameraShake>               ExplosionCameraShake;                              // 0x04A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ExplosionCameraShakeRadius;                        // 0x04A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1757[0x4];                                     // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemComponent*>       ManagedParticleComponentTrails;                    // 0x04B0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UParticleSystemComponent*>       ManagedParticleComponents;                         // 0x04C0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class USceneComponent*>                ManagedVisualComponents;                           // 0x04D0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseImpulseBatching;                               // 0x04E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1758[0x7];                                     // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Batching_ImpulseCurve;                             // 0x04E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            Batching_RocketJumpImpulseCurve;                   // 0x04F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Batching_ImpulseType;                              // 0x04F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1759[0x3];                                     // 0x04F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Batching_TimeWindow;                               // 0x04FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Batching_MegaBlastProjectileCountRequirement;      // 0x0500(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bVisualOffsetEnabled;                              // 0x0504(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOrientToTrajectoryDuringVisualOffset;             // 0x0505(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_175A[0x2];                                     // 0x0506(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetTime;                                        // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_175B[0x4];                                     // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            VisualOffsetSmoothingCurve;                        // 0x0510(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFirePointOnInstigatorWeapon;                    // 0x0518(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_175C[0x3];                                     // 0x0519(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FirePointSocketName;                               // 0x051C(0x0008)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_175D[0x4];                                     // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InstigatorGameplayTagsToListenFor;                 // 0x0528(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               VisualComponentRotationRate;                       // 0x0548(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_175E[0xC];                                     // 0x0554(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerComponentMoveDataSet           VisualComponentMoveData;                           // 0x0560(0x0040)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         CreationScaleToFullSizeTime;                       // 0x05A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_175F[0x4];                                     // 0x05A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           ScaleToFullSizeCurve;                              // 0x05A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1760[0xC];                                     // 0x05B0(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitialVisualOffset;                               // 0x05BC(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1761[0xC];                                     // 0x05C8(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnLocation;                                     // 0x05D4(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AMarinerExplosionEffect>    ExplosionTemplate;                                 // 0x05E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarinerExplosionEffect*                ExplosionEffectActor;                              // 0x05E8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExplodeOnImpact;                                  // 0x05F0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1762[0x1];                                     // 0x05F1(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShouldForceFinishVisualOffsetOnStopSimulating;    // 0x05F2(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIgnoreInstigatorCollision;                        // 0x05F3(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseInstancedMesh;                                 // 0x05F4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1763[0x3];                                     // 0x05F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerProjectileData                 WeaponConfig;                                      // 0x05F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         CachedInstigatorDamageMultiplier;                  // 0x0610(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CachedInstigatorImpulseMultiplier;                 // 0x0614(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerProjectileExplosionReplicationData ExplosionData;                                     // 0x0618(0x002C)(Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1764[0x4];                                     // 0x0644(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          StartSoundEvent;                                   // 0x0648(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          StopSoundEvent;                                    // 0x0650(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 DopplerRTPC;                                       // 0x0658(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1765[0x8];                                     // 0x0668(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle_ProjectileLife;                        // 0x0670(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           TimerHandle_LocallyOwnedVisibilityDelayTimer;      // 0x0678(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           TimerHandle_ParticleLifetimePostExplode;           // 0x0680(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           TimerHandle_VisualCompDelayDisable;                // 0x0688(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerAbilitySkinData_ProjectileGeneral* AbilitySkinData;                                   // 0x0690(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerAbilitySkinMap*                 AbilitySkinMap;                                    // 0x0698(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMarinerAbilitySkinMap>  AbilitySkinMapToLoad;                              // 0x06A0(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> SkinCollectionToLoad;                              // 0x06C8(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerAbilitySkinData_ProjectileBase* DefaultProjectileSkin;                             // 0x06F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerAbilitySkinData_ProjectileGeneral* CurrentInstancedSkin;                              // 0x06F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1766[0x20];                                    // 0x0700(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerProjectileModifierArray        AppliedModifiers;                                  // 0x0720(0x0120)(Net, Protected, NativeAccessSpecifierProtected)
	class USceneComponent*                        RootVisualComponent;                               // 0x0840(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultProjectileNetUpdateFrequency_PC;            // 0x0848(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultProjectileNetUpdateFrequency_Console;       // 0x084C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultProjectileMinNetUpdateFrequency;            // 0x0850(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ProjectileVelocityMultiplier;                      // 0x0854(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ProjectileSizeMultiplier;                          // 0x0858(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldDoCornerObstructionTest;                    // 0x085C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         RejoinEnableId;                                    // 0x085D(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1767[0x6];                                     // 0x085E(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxLatencyForMovementCompensation;                 // 0x0864(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1768[0xF];                                     // 0x0868(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsLatencyMoveCompensationEnabled;                 // 0x0877(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LatencyMoveCompensationReplicationCounter;         // 0x0878(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         StopVisualOffsetReplicationCounter;                // 0x0879(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1769[0x6];                                     // 0x087A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerPlayerState*                    CachedInstigatorPlayerState;                       // 0x0880(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerProfileObjectManager*           CachedInstigatorProfileObjectManager;              // 0x0888(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_176A[0x20];                                    // 0x0890(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplySkin(class UMarinerAbilitySkinData_Base* ProfileSkinData);
	void AuthorityAddDamageImmuneActor(class AActor* DamageImmuneActor);
	bool AuthorityApplyProjectileModifier(float LifetimeMultiplier, float NewSpeedMultiplier, float NewGravityScaleMultiplier, class AActor* ModifyInstigator);
	bool AuthorityApplyTimedProjectileModifier(float LifetimeMultiplier, float NewSpeedMultiplier, float NewGravityScaleMultiplier, class AActor* ModifyInstigator, float Duration);
	void AuthorityEnableFromPool(const struct FVector& InitialLocation, const struct FVector& InstigatorEyeLocation, class APawn* InInstigator, class AActor* InOwner, const struct FVector& ShootDirection, class USceneComponent* HomingTarget, class FName HomingTargetSocketName);
	void AuthorityOnMatchStateSet(const class FName& InMatchState);
	void AuthorityRemoveDamageImmuneActor(class AActor* DamageImmuneActor);
	void AuthorityRemoveProjectileModifier(class AActor* ModifyInstigator);
	void AuthorityRemoveTimedProjectileModifier(class AActor* ModifyInstigator, uint8 ImprintedProjectileEnableId);
	float BP_GetOverrideMegaBlastDamageRequirement();
	bool BP_IsTargetValidForHoming(class AActor* PotentialHomingTarget);
	void BP_OnClientRejoinEnabled();
	void BP_OnDisabledToPool();
	void BP_OnEnabledFromPool();
	void BP_OnFailedToStickToImpactedObject(const struct FHitResult& ImpactHit, const struct FHitResult& StickySweep);
	void BP_OnImpact(const struct FHitResult& HitResult);
	void BP_OnInitialDisabledToPool();
	void BP_OnInstigatorGameplayTagEvent(const struct FGameplayTag& GameplayTag, int32 Count);
	void BP_OnLocallyOwnedVisibilityDelayEnded();
	void BP_OnLostHomingTarget(class AActor* ExHomingTarget);
	void BP_OnStuckToImpactedObject(const struct FHitResult& Hit);
	void BP_ToggleHideComponentsOnRealityChange(bool bShouldBeHidden);
	void ClearHomingTarget();
	void DisableAndDestroy();
	void Explode();
	void ExplodeFromImpact(const struct FHitResult& Impact);
	void InitDirection(const struct FVector& ShootDirection);
	void InitDirectionAndSpeed(const struct FVector& ShootDirection, float Speed);
	void MulticastDisableToPool(float CurrentTimeStamp);
	void MulticastEnableFromPool_Expanded(const struct FVector_NetQuantize& InitialLocation, const struct FVector_NetQuantize& InstigatorEyeLocation, const struct FVector_NetQuantize100& InitialDirection, const class FName& FireSocket, class USceneComponent* HomingTarget, class FName HomingTargetSocketName, float CurrentTimeStamp);
	void MulticastEnableFromPool_Minimal(const struct FVector_NetQuantize& InitialLocation, const struct FVector_NetQuantize& InstigatorEyeLocation, const struct FVector_NetQuantize100& InitialDirection, float CurrentTimeStamp);
	void MulticastEnableFromPool_NonDefaultFireSocket(const struct FVector_NetQuantize& InitialLocation, const struct FVector_NetQuantize& InstigatorEyeLocation, const struct FVector_NetQuantize100& InitialDirection, const class FName& FireSocket, float CurrentTimeStamp);
	void MulticastEnableFromPool_WithHoming(const struct FVector_NetQuantize& InitialLocation, const struct FVector_NetQuantize& InstigatorEyeLocation, const struct FVector_NetQuantize100& InitialDirection, class USceneComponent* HomingTarget, class FName HomingTargetSocketName, float CurrentTimeStamp);
	void OnAnyRejoiningClientReady();
	void OnCornerObstructionFound();
	void OnDelayedLocallyOwnedVisibilityTimerExpired();
	void OnImpact(const struct FHitResult& HitResult);
	void OnInstigatorGameplayTagEvent(const struct FGameplayTag& GameplayTag, int32 Count);
	void OnInstigatorPlayerStateReceived();
	void OnLifeTimeExpired();
	void OnLocalCharacterChangedReality(EMarinerRealityState OldReality, EMarinerRealityState NewReality);
	void OnModifierInstigatorDestroyed(class AActor* ModifyInstigator);
	void OnOwnerMangoUserUpdated(class AMarinerPlayerState* PlayerState);
	void OnOwningCharacterDestroyed(class AActor* DestroyedActor);
	void OnProfileObjectsLoaded();
	void OnRep_ExplosionData();
	void OnRep_LatencyMoveCompensationReplicationCounter();
	void OnRep_RejoinEnableId();
	void OnRep_StopVisualOffsetReplicationCounter();
	void PauseVisualComponentMoveData(const class FString& Param_Name);
	void PreventAutoActivate();
	void ReverseVisualComponentMoveData(const class FString& Param_Name);
	void SetFirePointSocketName(class FName SocketName);
	void SetInstancedMeshVisibility(bool bIsVisible);
	void SetTeamIndex(int32 InTeamIndex);
	void StopAndFinishVisualOffset();
	void StopVisualComponentMoveData(const class FString& Param_Name);
	void TryLoadSkinFromInstigatorsProfile();
	void UnpauseVisualComponentMoveData(const class FString& Param_Name);
	void UpdateTeamColors();

	bool AuthorityIsActorDamageImmune(class AActor* DamageImmuneActor) const;
	TMap<class UParticleSystemComponent*, struct FVector> BP_GetExtraManagedParticleComponents() const;
	TMap<class UParticleSystemComponent*, struct FVector> BP_GetExtraManagedParticleTrailComponents() const;
	TArray<class USceneComponent*> BP_GetExtraManagedVisualComponents() const;
	bool DoesExplodeOnImpact() const;
	float GetAuthorityTimeStamp() const;
	float GetCreationTime() const;
	float GetDamageMultiplier() const;
	uint8 GetImpulseBatchingType() const;
	float GetImpulseMultiplier() const;
	class UMarinerAbilitySystemComponent* GetInstigatorAbilitySystemComponent() const;
	bool GetIsEnabled() const;
	class UMarinerProjectileMoveComponent* GetMovementComponent() const;
	class UMarinerAbilitySkinData_Base* GetSkinData() const;
	int32 GetTeamIndex() const;
	float GetTotalLifetimeModifier() const;
	float GetTotalSpeedModifier() const;
	bool IsProjectileEnablePoolTimerActive() const;
	bool UsesImpulseBatching() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerProjectile">();
	}
	static class AMarinerProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerProjectile>();
	}
};
static_assert(alignof(AMarinerProjectile) == 0x000010, "Wrong alignment on AMarinerProjectile");
static_assert(sizeof(AMarinerProjectile) == 0x0008B0, "Wrong size on AMarinerProjectile");
static_assert(offsetof(AMarinerProjectile, OnExplodeDelegate) == 0x000228, "Member 'AMarinerProjectile::OnExplodeDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, OnHomingTargetAcquiredDelegate) == 0x000238, "Member 'AMarinerProjectile::OnHomingTargetAcquiredDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, OnHomingTargetLostDelegate) == 0x000248, "Member 'AMarinerProjectile::OnHomingTargetLostDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, OnEnabledFromPool) == 0x000258, "Member 'AMarinerProjectile::OnEnabledFromPool' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, OnEnabledFromClientRejoin) == 0x000268, "Member 'AMarinerProjectile::OnEnabledFromClientRejoin' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, OnDisabledtoPool) == 0x000278, "Member 'AMarinerProjectile::OnDisabledtoPool' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, OnInitialDisabledtoPool) == 0x000288, "Member 'AMarinerProjectile::OnInitialDisabledtoPool' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, OnProjectileLifeChangedDelegate) == 0x000298, "Member 'AMarinerProjectile::OnProjectileLifeChangedDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, OnProjectileSpeedChangedDelegate) == 0x0002A8, "Member 'AMarinerProjectile::OnProjectileSpeedChangedDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, OnGameplayTagRemovedDelegate) == 0x0002B8, "Member 'AMarinerProjectile::OnGameplayTagRemovedDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, OnGameplayTagAppliedDelegate) == 0x0002C8, "Member 'AMarinerProjectile::OnGameplayTagAppliedDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, OnAuthorityDirectDamageNegatedFromComponentInvulnerabilityTagDelegate) == 0x0002D8, "Member 'AMarinerProjectile::OnAuthorityDirectDamageNegatedFromComponentInvulnerabilityTagDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ProjectileEnablePoolDelayValue) == 0x0002F0, "Member 'AMarinerProjectile::ProjectileEnablePoolDelayValue' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, DefaultProjectileFireSocket) == 0x000300, "Member 'AMarinerProjectile::DefaultProjectileFireSocket' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, MuzzleFXGameplayCues) == 0x000308, "Member 'AMarinerProjectile::MuzzleFXGameplayCues' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bShouldDisableInPostgame) == 0x000328, "Member 'AMarinerProjectile::bShouldDisableInPostgame' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bPooledProjectile) == 0x000380, "Member 'AMarinerProjectile::bPooledProjectile' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, EnableId) == 0x000381, "Member 'AMarinerProjectile::EnableId' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bIsInstancedMeshVisible) == 0x000382, "Member 'AMarinerProjectile::bIsInstancedMeshVisible' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ReplicatedServerLastTransformUpdateTimeStamp) == 0x000384, "Member 'AMarinerProjectile::ReplicatedServerLastTransformUpdateTimeStamp' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bUseLatencyCompensation) == 0x000395, "Member 'AMarinerProjectile::bUseLatencyCompensation' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bTranslateParticleTrailOnExplode) == 0x000396, "Member 'AMarinerProjectile::bTranslateParticleTrailOnExplode' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, RelativeLocationToSnapParticleComponentToOnExplode) == 0x000398, "Member 'AMarinerProjectile::RelativeLocationToSnapParticleComponentToOnExplode' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ThirdPersonObstructionTestDistance) == 0x000448, "Member 'AMarinerProjectile::ThirdPersonObstructionTestDistance' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, CornerObstructionCollisionChannel) == 0x00044C, "Member 'AMarinerProjectile::CornerObstructionCollisionChannel' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, CornerObstructionCollisionProbeSize) == 0x000450, "Member 'AMarinerProjectile::CornerObstructionCollisionProbeSize' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, CachedProfileSkinData) == 0x000454, "Member 'AMarinerProjectile::CachedProfileSkinData' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, MovementComp) == 0x000460, "Member 'AMarinerProjectile::MovementComp' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, CollisionComponent) == 0x000468, "Member 'AMarinerProjectile::CollisionComponent' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, FastSphereCollision) == 0x000470, "Member 'AMarinerProjectile::FastSphereCollision' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ParticleComp) == 0x000478, "Member 'AMarinerProjectile::ParticleComp' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, StaticMeshComp) == 0x000480, "Member 'AMarinerProjectile::StaticMeshComp' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, AkSoundComponent) == 0x000488, "Member 'AMarinerProjectile::AkSoundComponent' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ParticleLifetimePostExplode) == 0x000490, "Member 'AMarinerProjectile::ParticleLifetimePostExplode' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bActivateParticleSystemOnEnableFromPool) == 0x000494, "Member 'AMarinerProjectile::bActivateParticleSystemOnEnableFromPool' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bShouldResolveVisualOffsetAfterExploding) == 0x000495, "Member 'AMarinerProjectile::bShouldResolveVisualOffsetAfterExploding' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, LocallyOwnedVisibilityDelay) == 0x000498, "Member 'AMarinerProjectile::LocallyOwnedVisibilityDelay' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, MinimumExplosionDistanceFromImpact) == 0x00049C, "Member 'AMarinerProjectile::MinimumExplosionDistanceFromImpact' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ExplosionCameraShake) == 0x0004A0, "Member 'AMarinerProjectile::ExplosionCameraShake' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ExplosionCameraShakeRadius) == 0x0004A8, "Member 'AMarinerProjectile::ExplosionCameraShakeRadius' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ManagedParticleComponentTrails) == 0x0004B0, "Member 'AMarinerProjectile::ManagedParticleComponentTrails' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ManagedParticleComponents) == 0x0004C0, "Member 'AMarinerProjectile::ManagedParticleComponents' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ManagedVisualComponents) == 0x0004D0, "Member 'AMarinerProjectile::ManagedVisualComponents' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bUseImpulseBatching) == 0x0004E0, "Member 'AMarinerProjectile::bUseImpulseBatching' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, Batching_ImpulseCurve) == 0x0004E8, "Member 'AMarinerProjectile::Batching_ImpulseCurve' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, Batching_RocketJumpImpulseCurve) == 0x0004F0, "Member 'AMarinerProjectile::Batching_RocketJumpImpulseCurve' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, Batching_ImpulseType) == 0x0004F8, "Member 'AMarinerProjectile::Batching_ImpulseType' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, Batching_TimeWindow) == 0x0004FC, "Member 'AMarinerProjectile::Batching_TimeWindow' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, Batching_MegaBlastProjectileCountRequirement) == 0x000500, "Member 'AMarinerProjectile::Batching_MegaBlastProjectileCountRequirement' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bVisualOffsetEnabled) == 0x000504, "Member 'AMarinerProjectile::bVisualOffsetEnabled' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bOrientToTrajectoryDuringVisualOffset) == 0x000505, "Member 'AMarinerProjectile::bOrientToTrajectoryDuringVisualOffset' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, OffsetTime) == 0x000508, "Member 'AMarinerProjectile::OffsetTime' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, VisualOffsetSmoothingCurve) == 0x000510, "Member 'AMarinerProjectile::VisualOffsetSmoothingCurve' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bIsFirePointOnInstigatorWeapon) == 0x000518, "Member 'AMarinerProjectile::bIsFirePointOnInstigatorWeapon' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, FirePointSocketName) == 0x00051C, "Member 'AMarinerProjectile::FirePointSocketName' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, InstigatorGameplayTagsToListenFor) == 0x000528, "Member 'AMarinerProjectile::InstigatorGameplayTagsToListenFor' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, VisualComponentRotationRate) == 0x000548, "Member 'AMarinerProjectile::VisualComponentRotationRate' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, VisualComponentMoveData) == 0x000560, "Member 'AMarinerProjectile::VisualComponentMoveData' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, CreationScaleToFullSizeTime) == 0x0005A0, "Member 'AMarinerProjectile::CreationScaleToFullSizeTime' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ScaleToFullSizeCurve) == 0x0005A8, "Member 'AMarinerProjectile::ScaleToFullSizeCurve' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, InitialVisualOffset) == 0x0005BC, "Member 'AMarinerProjectile::InitialVisualOffset' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, SpawnLocation) == 0x0005D4, "Member 'AMarinerProjectile::SpawnLocation' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ExplosionTemplate) == 0x0005E0, "Member 'AMarinerProjectile::ExplosionTemplate' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ExplosionEffectActor) == 0x0005E8, "Member 'AMarinerProjectile::ExplosionEffectActor' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bExplodeOnImpact) == 0x0005F0, "Member 'AMarinerProjectile::bExplodeOnImpact' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bShouldForceFinishVisualOffsetOnStopSimulating) == 0x0005F2, "Member 'AMarinerProjectile::bShouldForceFinishVisualOffsetOnStopSimulating' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bIgnoreInstigatorCollision) == 0x0005F3, "Member 'AMarinerProjectile::bIgnoreInstigatorCollision' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bUseInstancedMesh) == 0x0005F4, "Member 'AMarinerProjectile::bUseInstancedMesh' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, WeaponConfig) == 0x0005F8, "Member 'AMarinerProjectile::WeaponConfig' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, CachedInstigatorDamageMultiplier) == 0x000610, "Member 'AMarinerProjectile::CachedInstigatorDamageMultiplier' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, CachedInstigatorImpulseMultiplier) == 0x000614, "Member 'AMarinerProjectile::CachedInstigatorImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ExplosionData) == 0x000618, "Member 'AMarinerProjectile::ExplosionData' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, StartSoundEvent) == 0x000648, "Member 'AMarinerProjectile::StartSoundEvent' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, StopSoundEvent) == 0x000650, "Member 'AMarinerProjectile::StopSoundEvent' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, DopplerRTPC) == 0x000658, "Member 'AMarinerProjectile::DopplerRTPC' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, TimerHandle_ProjectileLife) == 0x000670, "Member 'AMarinerProjectile::TimerHandle_ProjectileLife' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, TimerHandle_LocallyOwnedVisibilityDelayTimer) == 0x000678, "Member 'AMarinerProjectile::TimerHandle_LocallyOwnedVisibilityDelayTimer' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, TimerHandle_ParticleLifetimePostExplode) == 0x000680, "Member 'AMarinerProjectile::TimerHandle_ParticleLifetimePostExplode' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, TimerHandle_VisualCompDelayDisable) == 0x000688, "Member 'AMarinerProjectile::TimerHandle_VisualCompDelayDisable' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, AbilitySkinData) == 0x000690, "Member 'AMarinerProjectile::AbilitySkinData' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, AbilitySkinMap) == 0x000698, "Member 'AMarinerProjectile::AbilitySkinMap' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, AbilitySkinMapToLoad) == 0x0006A0, "Member 'AMarinerProjectile::AbilitySkinMapToLoad' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, SkinCollectionToLoad) == 0x0006C8, "Member 'AMarinerProjectile::SkinCollectionToLoad' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, DefaultProjectileSkin) == 0x0006F0, "Member 'AMarinerProjectile::DefaultProjectileSkin' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, CurrentInstancedSkin) == 0x0006F8, "Member 'AMarinerProjectile::CurrentInstancedSkin' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, AppliedModifiers) == 0x000720, "Member 'AMarinerProjectile::AppliedModifiers' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, RootVisualComponent) == 0x000840, "Member 'AMarinerProjectile::RootVisualComponent' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, DefaultProjectileNetUpdateFrequency_PC) == 0x000848, "Member 'AMarinerProjectile::DefaultProjectileNetUpdateFrequency_PC' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, DefaultProjectileNetUpdateFrequency_Console) == 0x00084C, "Member 'AMarinerProjectile::DefaultProjectileNetUpdateFrequency_Console' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, DefaultProjectileMinNetUpdateFrequency) == 0x000850, "Member 'AMarinerProjectile::DefaultProjectileMinNetUpdateFrequency' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ProjectileVelocityMultiplier) == 0x000854, "Member 'AMarinerProjectile::ProjectileVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, ProjectileSizeMultiplier) == 0x000858, "Member 'AMarinerProjectile::ProjectileSizeMultiplier' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bShouldDoCornerObstructionTest) == 0x00085C, "Member 'AMarinerProjectile::bShouldDoCornerObstructionTest' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, RejoinEnableId) == 0x00085D, "Member 'AMarinerProjectile::RejoinEnableId' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, MaxLatencyForMovementCompensation) == 0x000864, "Member 'AMarinerProjectile::MaxLatencyForMovementCompensation' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, bIsLatencyMoveCompensationEnabled) == 0x000877, "Member 'AMarinerProjectile::bIsLatencyMoveCompensationEnabled' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, LatencyMoveCompensationReplicationCounter) == 0x000878, "Member 'AMarinerProjectile::LatencyMoveCompensationReplicationCounter' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, StopVisualOffsetReplicationCounter) == 0x000879, "Member 'AMarinerProjectile::StopVisualOffsetReplicationCounter' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, CachedInstigatorPlayerState) == 0x000880, "Member 'AMarinerProjectile::CachedInstigatorPlayerState' has a wrong offset!");
static_assert(offsetof(AMarinerProjectile, CachedInstigatorProfileObjectManager) == 0x000888, "Member 'AMarinerProjectile::CachedInstigatorProfileObjectManager' has a wrong offset!");

// Class Mariner.MarinerGrapplingHook
// 0x0070 (0x0920 - 0x08B0)
class AMarinerGrapplingHook final : public AMarinerProjectile
{
public:
	UMulticastInlineDelegateProperty_             OnAttachFromHit;                                   // 0x08B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnHookDetached;                                    // 0x08C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCableDetached;                                   // 0x08D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCableComponent*                        CableComponent;                                    // 0x08E0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CableAttachSocket;                                 // 0x08E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerGrapplingHookBehavior*          GrapplingHookBehavior;                             // 0x08F0(0x0008)(Edit, ExportObject, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DespawnDelay;                                      // 0x08F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHookAttached;                                   // 0x08FC(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1777[0x3];                                     // 0x08FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerGrapplingHookCableAttachData   GrapplingHookCableAttachData;                      // 0x0900(0x0020)(Net, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void AttachGrapplingHookCableToCharacter(class AMarinerCharacter* CharacterToAttachTo, const class FName& AttachSocketName);
	void AttachGrapplingHookCableToComponent(class USceneComponent* ComponentToAttachTo, const class FName& AttachSocketName);
	void DetachGrapplingHook();
	void DetachGrapplingHookCable();
	void OnHookAttachedActorDestroyed(class AActor* DestroyedActor);
	void OnHookAttachedItemPickedUp(class AMarinerItem* AttachedItem, class AMarinerCharacter* NewItemHolder);
	void OnPostDetachDestroyTimerExpired();
	void OnRep_GrapplingHookCableAttachData();
	void OnRep_IsHookAttached();

	bool IsGrapplingHookCableAttached() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGrapplingHook">();
	}
	static class AMarinerGrapplingHook* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerGrapplingHook>();
	}
};
static_assert(alignof(AMarinerGrapplingHook) == 0x000010, "Wrong alignment on AMarinerGrapplingHook");
static_assert(sizeof(AMarinerGrapplingHook) == 0x000920, "Wrong size on AMarinerGrapplingHook");
static_assert(offsetof(AMarinerGrapplingHook, OnAttachFromHit) == 0x0008B0, "Member 'AMarinerGrapplingHook::OnAttachFromHit' has a wrong offset!");
static_assert(offsetof(AMarinerGrapplingHook, OnHookDetached) == 0x0008C0, "Member 'AMarinerGrapplingHook::OnHookDetached' has a wrong offset!");
static_assert(offsetof(AMarinerGrapplingHook, OnCableDetached) == 0x0008D0, "Member 'AMarinerGrapplingHook::OnCableDetached' has a wrong offset!");
static_assert(offsetof(AMarinerGrapplingHook, CableComponent) == 0x0008E0, "Member 'AMarinerGrapplingHook::CableComponent' has a wrong offset!");
static_assert(offsetof(AMarinerGrapplingHook, CableAttachSocket) == 0x0008E8, "Member 'AMarinerGrapplingHook::CableAttachSocket' has a wrong offset!");
static_assert(offsetof(AMarinerGrapplingHook, GrapplingHookBehavior) == 0x0008F0, "Member 'AMarinerGrapplingHook::GrapplingHookBehavior' has a wrong offset!");
static_assert(offsetof(AMarinerGrapplingHook, DespawnDelay) == 0x0008F8, "Member 'AMarinerGrapplingHook::DespawnDelay' has a wrong offset!");
static_assert(offsetof(AMarinerGrapplingHook, bIsHookAttached) == 0x0008FC, "Member 'AMarinerGrapplingHook::bIsHookAttached' has a wrong offset!");
static_assert(offsetof(AMarinerGrapplingHook, GrapplingHookCableAttachData) == 0x000900, "Member 'AMarinerGrapplingHook::GrapplingHookCableAttachData' has a wrong offset!");

// Class Mariner.MarinerChatWheel_ModeDependentLeafNode
// 0x0050 (0x0108 - 0x00B8)
class UMarinerChatWheel_ModeDependentLeafNode final : public UMarinerChatWheel_LeafNode
{
public:
	TMap<class FString, TSubclassOf<class UMarinerLocalMessage>> GameModeOverrideMessages;                          // 0x00B8(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerChatWheel_ModeDependentLeafNode">();
	}
	static class UMarinerChatWheel_ModeDependentLeafNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerChatWheel_ModeDependentLeafNode>();
	}
};
static_assert(alignof(UMarinerChatWheel_ModeDependentLeafNode) == 0x000008, "Wrong alignment on UMarinerChatWheel_ModeDependentLeafNode");
static_assert(sizeof(UMarinerChatWheel_ModeDependentLeafNode) == 0x000108, "Wrong size on UMarinerChatWheel_ModeDependentLeafNode");
static_assert(offsetof(UMarinerChatWheel_ModeDependentLeafNode, GameModeOverrideMessages) == 0x0000B8, "Member 'UMarinerChatWheel_ModeDependentLeafNode::GameModeOverrideMessages' has a wrong offset!");

// Class Mariner.MarinerGauntletMatchmakingController
// 0x0000 (0x0060 - 0x0060)
class UMarinerGauntletMatchmakingController final : public UMarinerGauntletController
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGauntletMatchmakingController">();
	}
	static class UMarinerGauntletMatchmakingController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGauntletMatchmakingController>();
	}
};
static_assert(alignof(UMarinerGauntletMatchmakingController) == 0x000008, "Wrong alignment on UMarinerGauntletMatchmakingController");
static_assert(sizeof(UMarinerGauntletMatchmakingController) == 0x000060, "Wrong size on UMarinerGauntletMatchmakingController");

// Class Mariner.MarinerCheatManager
// 0x0018 (0x0090 - 0x0078)
class UMarinerCheatManager final : public UCheatManager
{
public:
	uint8                                         Pad_1778[0x18];                                    // 0x0078(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeTeam(int32 NewTeamNumber);
	void Cheat(const class FString& Msg);
	void ClientCheat(const class FString& Msg);
	void DisplayEquippedArtifacts();
	void EnableAllCharacters();
	void EnableBotAbilities(bool bEnable);
	void ForceMatchStart();
	void ForceMaxQuality();
	void ForceRefreshInventory();
	void GetMedal(const class FString& MessagePath);
	void MuteLocalAudioListener();
	void PossessNewPawn(const class FString& PawnPath);
	void PrintActorPoolInfo();
	void RecordPressInputToProjectileTime(const class FString& InputName);
	void RecordReleaseInputToProjectileTime(const class FString& InputName);
	void SetArtifact(const class FString& ArtifactName);
	void SetArtifactLevel(int32 ArtifactLevel);
	void SetCharacterLightingEnabled(bool bEnable);
	void SetChatEmote(int32 Slot, const class FString& ChatEmoteName);
	void SetMegaBlast(const class FString& MegaBlastName);
	void SetOutlinesEnabled(bool bEnable);
	void SetPreGameEmote(int32 Slot, const class FString& PreGameEmoteName);
	void SetProjectileLatencyCompensationEnabled(bool bEnabled);
	void SetReturnTrail(const class FString& ReturnTrailName);
	void SetSkin(int32 SkinIndex);
	void SetVictoryPose(const class FString& ArtifactName);
	void SpawnBot();
	void ToggleCameraPunchThrough();
	void ToggleForceLoopPrimary();
	void ToggleGodMode();
	void ToggleIdleBootDebugging();
	void ToggleInfiniteAmmo();
	void ToggleInvincibleMode();
	void ToggleMatchTimer();
	void ToggleMusic();
	void ToggleNoAbilityCooldown();
	void ToggleReturnZoneVisibility();
	void ToggleSFX();
	void ToggleTurboMode();
	void ToggleVoiceVolume();
	void UnmuteLocalAudioListener();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCheatManager">();
	}
	static class UMarinerCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCheatManager>();
	}
};
static_assert(alignof(UMarinerCheatManager) == 0x000008, "Wrong alignment on UMarinerCheatManager");
static_assert(sizeof(UMarinerCheatManager) == 0x000090, "Wrong size on UMarinerCheatManager");

// Class Mariner.MarinerGameUserSettings
// 0x0160 (0x0280 - 0x0120)
class UMarinerGameUserSettings final : public UGameUserSettings
{
public:
	UMulticastInlineDelegateProperty_             OnUserSettingsChanged;                             // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnShowNetworkInformationChanged;                   // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         PCVersion;                                         // 0x0140(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_177B[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NameOfSavedCulture;                                // 0x0148(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         AvailableLanguages;                                // 0x0158(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	bool                                          bShowNetworkInformation;                           // 0x0168(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPartyIsPrivate;                                   // 0x0169(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCrossplayEnabled;                                 // 0x016A(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMarinerCrossplayState                        CrossplayState;                                    // 0x016B(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_177C[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserSelectedMatchmakingRegion;                     // 0x0170(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCrossplayNoticeViewed;                            // 0x0180(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bMythicUpsellViewed;                               // 0x0181(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_177D[0x2];                                     // 0x0182(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScreenPercentage;                                  // 0x0184(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SSRQuality;                                        // 0x0188(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Gamma;                                             // 0x018C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         HorizontalFOV;                                     // 0x0190(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MasterVolume;                                      // 0x0194(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MusicVolume;                                       // 0x0198(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SFXVolume;                                         // 0x019C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VoiceVolume;                                       // 0x01A0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VoiceChatVolume;                                   // 0x01A4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AimSensitivity;                                    // 0x01A8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bVoiceChatEnabled;                                 // 0x01AC(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPushToTalkEnabled;                                // 0x01AD(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_177E[0x2];                                     // 0x01AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ControllerConfiguration;                           // 0x01B0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SensitivitySpecification;                          // 0x01B4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bVibration;                                        // 0x01B8(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bInvertControllerHorizontal;                       // 0x01B9(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bInvertControllerVertical;                         // 0x01BA(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bStickAccelerationEnabled;                         // 0x01BB(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMarinerAimAssistState                        AimAssistState;                                    // 0x01BC(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_177F[0x3];                                     // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FastTurnState;                                     // 0x01C0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ControllerAxialDeadzone;                           // 0x01C4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ControllerInnerRadialDeadzone;                     // 0x01C8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ControllerOuterRadialDeadzone;                     // 0x01CC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ControllerMenuDeadzone;                            // 0x01D0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MouseLookUpSensitivity;                            // 0x01D4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MouseTurnSensitivity;                              // 0x01D8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bMouseInvertedXAxis;                               // 0x01DC(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bMouseInvertedYAxis;                               // 0x01DD(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bNarrationEnabled;                                 // 0x01DE(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowInGameIcons;                                  // 0x01DF(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSubtitlesEnabled;                                 // 0x01E0(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bTextToSpeechEnabled;                              // 0x01E1(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSpeechToTextEnabled;                              // 0x01E2(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         ColorDeficiency;                                   // 0x01E3(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ColorDeficiencySeverity;                           // 0x01E4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MenuNarrationVolume;                               // 0x01E8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShareUsageData;                                   // 0x01EC(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShareExternalUsageData;                           // 0x01ED(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1780[0x2];                                     // 0x01EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameliftSessionId;                                 // 0x01F0(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 GameliftDnsName;                                   // 0x0200(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1781[0x58];                                    // 0x0210(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerGameInstance*                   MarinerGameInstance;                               // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1782[0x10];                                    // 0x0270(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetSensitivitySpecification();
	void RestoreAccessibilityDefaults();
	void RestoreAccountDefaults();
	void RestoreAudioDefaults();
	void RestoreControllerDefaults();
	void RestoreGameDefaults();
	void RestoreKBMDefaults();
	void RestoreVideoDefaults();
	void SetAimAssistState(EMarinerAimAssistState InState);
	void SetAimSensitivity(float InSensitivity);
	void SetColorDeficiency(EColorVisionDeficiency InValue);
	void SetColorDeficiencySeverity(float InValue);
	void SetControllerAxialDeadzone(float InAxialDeadzone);
	void SetControllerConfiguration(int32 InConfiguration);
	void SetControllerInnerRadialDeadzone(float InInnerRadialDeadzone);
	void SetControllerInversionHorizontal(bool InBool);
	void SetControllerInversionVertical(bool InBool);
	void SetControllerMenuDeadzone(float InMenuDeadzone);
	void SetControllerOuterRadialDeadzone(float InOuterRadialDeadzone);
	void SetCrossplayNoticeViewed(bool bInValue);
	void SetCrossplayState(EMarinerCrossplayState InCrossplayState);
	void SetFastTurnState(int32 InSetting);
	void SetGameScreenPercentage(float Value);
	void SetGamma(float InGamma);
	void SetHorizontalFOV(float InFOV);
	void SetLastGameliftDnsName(const class FString& InGameliftDnsName);
	void SetLastGameliftSessionId(const class FString& InGameliftSessionId);
	void SetLegalDocsAccepted(bool bAccepted);
	void SetMasterVolume(float InMasterVolume);
	void SetMenuNarrationVolume(float InVolume);
	void SetMouseInvertedXAxis(bool bInvert);
	void SetMouseInvertedYAxis(bool bInvert);
	void SetMouseLookUpSensitivity(float InSensitivity);
	void SetMouseTurnSensitivity(float InSensitivity);
	void SetMusicVolume(float InMusicVolume);
	void SetMythicUpsellViewed(bool bInValue);
	void SetNarrationEnabled(bool bInValue);
	void SetPartyIsPrivate(bool bInValue);
	void SetSavedCulture(const class FString& InCultureName);
	void SetSensitivitySpecification(int32 InSensitivity);
	void SetSFXVolume(float InSFXVolume);
	void SetSharingExternalUsageData(bool bSharing);
	void SetSharingUsageData(bool bSharing);
	void SetShowInGameIcons(bool bInValue);
	void SetShowNetworkInformation(bool bInValue);
	void SetSpeechToTextEnabled(bool bInValue);
	void SetSSRQuality(int32 Value);
	void SetStickAccelerationEnabled(bool InBool);
	void SetSubtitlesEnabled(bool bInValue);
	void SetTextToSpeechEnabled(bool bInValue);
	void SetUserSelectedMatchmakingRegion(const class FString& InUserSelectedMatchmakingRegion);
	void SetVibrationEnabled(bool bEnabled);
	void SetVoiceChatEnabled(bool bInValue);
	void SetVoiceChatPushToTalkEnabled(bool bInValue);
	void SetVoiceChatVolume(float InVoiceChatVolume);
	void SetVoiceVolume(float InVoiceVolume);

	EMarinerAimAssistState GetAimAssistState() const;
	float GetAimSensitivity() const;
	EColorVisionDeficiency GetColorDeficiency() const;
	float GetColorDeficiencySeverity() const;
	float GetControllerAxialDeadzone() const;
	int32 GetControllerConfiguration() const;
	float GetControllerInnerRadialDeadzone() const;
	bool GetControllerInversionHorizontal() const;
	bool GetControllerInversionVertical() const;
	float GetControllerMenuDeadzone() const;
	float GetControllerOuterRadialDeadzone() const;
	bool GetCrossplayNoticeViewed() const;
	EMarinerCrossplayState GetCrossplayState() const;
	int32 GetFastTurnState() const;
	float GetGameScreenPercentage() const;
	float GetGamma() const;
	float GetHorizontalFOV() const;
	class FString GetLastGameLiftDnsName() const;
	class FString GetLastGameLiftSessionId() const;
	float GetMasterVolume() const;
	float GetMenuNarrationVolume() const;
	float GetMouseLookUpSensitivity() const;
	float GetMouseTurnSensitivity() const;
	float GetMusicVolume() const;
	bool GetMythicUpsellViewed() const;
	bool GetNarrationEnabled() const;
	bool GetPartyIsPrivate() const;
	class FString GetSavedCulture() const;
	float GetSFXVolume() const;
	bool GetShowInGameIcons() const;
	bool GetShowNetworkInformation() const;
	bool GetSpeechToTextEnabled() const;
	int32 GetSSRQuality() const;
	bool GetStickAccelerationEnabled() const;
	bool GetSubtitlesEnabled() const;
	bool GetTextToSpeechEnabled() const;
	class FString GetUserSelectedMatchmakingRegion() const;
	bool GetVibrationEnabled() const;
	bool GetVoiceChatEnabled() const;
	bool GetVoiceChatPushToTalkEnabled() const;
	float GetVoiceChatVolume() const;
	float GetVoiceVolume() const;
	bool HasAcceptedLegalDocs() const;
	bool IsMouseInvertedXAxis() const;
	bool IsMouseInvertedYAxis() const;
	bool IsSharingExternalUsageData() const;
	bool IsSharingUsageData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameUserSettings">();
	}
	static class UMarinerGameUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGameUserSettings>();
	}
};
static_assert(alignof(UMarinerGameUserSettings) == 0x000008, "Wrong alignment on UMarinerGameUserSettings");
static_assert(sizeof(UMarinerGameUserSettings) == 0x000280, "Wrong size on UMarinerGameUserSettings");
static_assert(offsetof(UMarinerGameUserSettings, OnUserSettingsChanged) == 0x000120, "Member 'UMarinerGameUserSettings::OnUserSettingsChanged' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, OnShowNetworkInformationChanged) == 0x000130, "Member 'UMarinerGameUserSettings::OnShowNetworkInformationChanged' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, PCVersion) == 0x000140, "Member 'UMarinerGameUserSettings::PCVersion' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, NameOfSavedCulture) == 0x000148, "Member 'UMarinerGameUserSettings::NameOfSavedCulture' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, AvailableLanguages) == 0x000158, "Member 'UMarinerGameUserSettings::AvailableLanguages' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bShowNetworkInformation) == 0x000168, "Member 'UMarinerGameUserSettings::bShowNetworkInformation' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bPartyIsPrivate) == 0x000169, "Member 'UMarinerGameUserSettings::bPartyIsPrivate' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bCrossplayEnabled) == 0x00016A, "Member 'UMarinerGameUserSettings::bCrossplayEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, CrossplayState) == 0x00016B, "Member 'UMarinerGameUserSettings::CrossplayState' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, UserSelectedMatchmakingRegion) == 0x000170, "Member 'UMarinerGameUserSettings::UserSelectedMatchmakingRegion' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bCrossplayNoticeViewed) == 0x000180, "Member 'UMarinerGameUserSettings::bCrossplayNoticeViewed' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bMythicUpsellViewed) == 0x000181, "Member 'UMarinerGameUserSettings::bMythicUpsellViewed' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, ScreenPercentage) == 0x000184, "Member 'UMarinerGameUserSettings::ScreenPercentage' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, SSRQuality) == 0x000188, "Member 'UMarinerGameUserSettings::SSRQuality' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, Gamma) == 0x00018C, "Member 'UMarinerGameUserSettings::Gamma' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, HorizontalFOV) == 0x000190, "Member 'UMarinerGameUserSettings::HorizontalFOV' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, MasterVolume) == 0x000194, "Member 'UMarinerGameUserSettings::MasterVolume' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, MusicVolume) == 0x000198, "Member 'UMarinerGameUserSettings::MusicVolume' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, SFXVolume) == 0x00019C, "Member 'UMarinerGameUserSettings::SFXVolume' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, VoiceVolume) == 0x0001A0, "Member 'UMarinerGameUserSettings::VoiceVolume' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, VoiceChatVolume) == 0x0001A4, "Member 'UMarinerGameUserSettings::VoiceChatVolume' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, AimSensitivity) == 0x0001A8, "Member 'UMarinerGameUserSettings::AimSensitivity' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bVoiceChatEnabled) == 0x0001AC, "Member 'UMarinerGameUserSettings::bVoiceChatEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bPushToTalkEnabled) == 0x0001AD, "Member 'UMarinerGameUserSettings::bPushToTalkEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, ControllerConfiguration) == 0x0001B0, "Member 'UMarinerGameUserSettings::ControllerConfiguration' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, SensitivitySpecification) == 0x0001B4, "Member 'UMarinerGameUserSettings::SensitivitySpecification' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bVibration) == 0x0001B8, "Member 'UMarinerGameUserSettings::bVibration' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bInvertControllerHorizontal) == 0x0001B9, "Member 'UMarinerGameUserSettings::bInvertControllerHorizontal' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bInvertControllerVertical) == 0x0001BA, "Member 'UMarinerGameUserSettings::bInvertControllerVertical' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bStickAccelerationEnabled) == 0x0001BB, "Member 'UMarinerGameUserSettings::bStickAccelerationEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, AimAssistState) == 0x0001BC, "Member 'UMarinerGameUserSettings::AimAssistState' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, FastTurnState) == 0x0001C0, "Member 'UMarinerGameUserSettings::FastTurnState' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, ControllerAxialDeadzone) == 0x0001C4, "Member 'UMarinerGameUserSettings::ControllerAxialDeadzone' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, ControllerInnerRadialDeadzone) == 0x0001C8, "Member 'UMarinerGameUserSettings::ControllerInnerRadialDeadzone' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, ControllerOuterRadialDeadzone) == 0x0001CC, "Member 'UMarinerGameUserSettings::ControllerOuterRadialDeadzone' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, ControllerMenuDeadzone) == 0x0001D0, "Member 'UMarinerGameUserSettings::ControllerMenuDeadzone' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, MouseLookUpSensitivity) == 0x0001D4, "Member 'UMarinerGameUserSettings::MouseLookUpSensitivity' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, MouseTurnSensitivity) == 0x0001D8, "Member 'UMarinerGameUserSettings::MouseTurnSensitivity' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bMouseInvertedXAxis) == 0x0001DC, "Member 'UMarinerGameUserSettings::bMouseInvertedXAxis' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bMouseInvertedYAxis) == 0x0001DD, "Member 'UMarinerGameUserSettings::bMouseInvertedYAxis' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bNarrationEnabled) == 0x0001DE, "Member 'UMarinerGameUserSettings::bNarrationEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bShowInGameIcons) == 0x0001DF, "Member 'UMarinerGameUserSettings::bShowInGameIcons' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bSubtitlesEnabled) == 0x0001E0, "Member 'UMarinerGameUserSettings::bSubtitlesEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bTextToSpeechEnabled) == 0x0001E1, "Member 'UMarinerGameUserSettings::bTextToSpeechEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bSpeechToTextEnabled) == 0x0001E2, "Member 'UMarinerGameUserSettings::bSpeechToTextEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, ColorDeficiency) == 0x0001E3, "Member 'UMarinerGameUserSettings::ColorDeficiency' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, ColorDeficiencySeverity) == 0x0001E4, "Member 'UMarinerGameUserSettings::ColorDeficiencySeverity' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, MenuNarrationVolume) == 0x0001E8, "Member 'UMarinerGameUserSettings::MenuNarrationVolume' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bShareUsageData) == 0x0001EC, "Member 'UMarinerGameUserSettings::bShareUsageData' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, bShareExternalUsageData) == 0x0001ED, "Member 'UMarinerGameUserSettings::bShareExternalUsageData' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, GameliftSessionId) == 0x0001F0, "Member 'UMarinerGameUserSettings::GameliftSessionId' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, GameliftDnsName) == 0x000200, "Member 'UMarinerGameUserSettings::GameliftDnsName' has a wrong offset!");
static_assert(offsetof(UMarinerGameUserSettings, MarinerGameInstance) == 0x000268, "Member 'UMarinerGameUserSettings::MarinerGameInstance' has a wrong offset!");

// Class Mariner.MarinerCMSItemWithIconAndColor
// 0x0028 (0x0098 - 0x0070)
class UMarinerCMSItemWithIconAndColor : public UMarinerCMSItemWithIcon
{
public:
	struct FMarinerPBRProperties                  VisualProperties;                                  // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCMSItemWithIconAndColor">();
	}
	static class UMarinerCMSItemWithIconAndColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCMSItemWithIconAndColor>();
	}
};
static_assert(alignof(UMarinerCMSItemWithIconAndColor) == 0x000008, "Wrong alignment on UMarinerCMSItemWithIconAndColor");
static_assert(sizeof(UMarinerCMSItemWithIconAndColor) == 0x000098, "Wrong size on UMarinerCMSItemWithIconAndColor");
static_assert(offsetof(UMarinerCMSItemWithIconAndColor, VisualProperties) == 0x000070, "Member 'UMarinerCMSItemWithIconAndColor::VisualProperties' has a wrong offset!");

// Class Mariner.MarinerRocketTotemSymbolsDataAsset
// 0x0088 (0x0120 - 0x0098)
class UMarinerRocketTotemSymbolsDataAsset final : public UMarinerCMSItemWithIconAndColor
{
public:
	class UTexture2D*                             FlagSymbolTexture;                                 // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerPBRProperties                  SecondaryVisualProperties;                         // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FLinearColor                           BacklightColor;                                    // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           FoilTintLayer1;                                    // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FoilTintLayer2;                                    // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoilSpeedLayer1;                                   // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoilSpeedLayer2;                                   // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoilLayerHeight;                                   // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoilDistortionIntensity;                           // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoilDesatAmount;                                   // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1783[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             FoilDistortTexture;                                // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoilDistortTextureTiling;                          // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1784[0x4];                                     // 0x011C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRocketTotemSymbolsDataAsset">();
	}
	static class UMarinerRocketTotemSymbolsDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRocketTotemSymbolsDataAsset>();
	}
};
static_assert(alignof(UMarinerRocketTotemSymbolsDataAsset) == 0x000008, "Wrong alignment on UMarinerRocketTotemSymbolsDataAsset");
static_assert(sizeof(UMarinerRocketTotemSymbolsDataAsset) == 0x000120, "Wrong size on UMarinerRocketTotemSymbolsDataAsset");
static_assert(offsetof(UMarinerRocketTotemSymbolsDataAsset, FlagSymbolTexture) == 0x000098, "Member 'UMarinerRocketTotemSymbolsDataAsset::FlagSymbolTexture' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemSymbolsDataAsset, SecondaryVisualProperties) == 0x0000A0, "Member 'UMarinerRocketTotemSymbolsDataAsset::SecondaryVisualProperties' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemSymbolsDataAsset, BacklightColor) == 0x0000C8, "Member 'UMarinerRocketTotemSymbolsDataAsset::BacklightColor' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemSymbolsDataAsset, FoilTintLayer1) == 0x0000D8, "Member 'UMarinerRocketTotemSymbolsDataAsset::FoilTintLayer1' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemSymbolsDataAsset, FoilTintLayer2) == 0x0000E8, "Member 'UMarinerRocketTotemSymbolsDataAsset::FoilTintLayer2' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemSymbolsDataAsset, FoilSpeedLayer1) == 0x0000F8, "Member 'UMarinerRocketTotemSymbolsDataAsset::FoilSpeedLayer1' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemSymbolsDataAsset, FoilSpeedLayer2) == 0x0000FC, "Member 'UMarinerRocketTotemSymbolsDataAsset::FoilSpeedLayer2' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemSymbolsDataAsset, FoilLayerHeight) == 0x000100, "Member 'UMarinerRocketTotemSymbolsDataAsset::FoilLayerHeight' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemSymbolsDataAsset, FoilDistortionIntensity) == 0x000104, "Member 'UMarinerRocketTotemSymbolsDataAsset::FoilDistortionIntensity' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemSymbolsDataAsset, FoilDesatAmount) == 0x000108, "Member 'UMarinerRocketTotemSymbolsDataAsset::FoilDesatAmount' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemSymbolsDataAsset, FoilDistortTexture) == 0x000110, "Member 'UMarinerRocketTotemSymbolsDataAsset::FoilDistortTexture' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemSymbolsDataAsset, FoilDistortTextureTiling) == 0x000118, "Member 'UMarinerRocketTotemSymbolsDataAsset::FoilDistortTextureTiling' has a wrong offset!");

// Class Mariner.MarinerCheckBox
// 0x0008 (0x0778 - 0x0770)
class UMarinerCheckBox final : public UCheckBox
{
public:
	uint8                                         Pad_1785[0x8];                                     // 0x0770(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCheckBox">();
	}
	static class UMarinerCheckBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCheckBox>();
	}
};
static_assert(alignof(UMarinerCheckBox) == 0x000008, "Wrong alignment on UMarinerCheckBox");
static_assert(sizeof(UMarinerCheckBox) == 0x000778, "Wrong size on UMarinerCheckBox");

// Class Mariner.MarinerGlobals
// 0x00A8 (0x00D0 - 0x0028)
class UMarinerGlobals : public UObject
{
public:
	class UMarinerAchievementsGlobals*            AchievementsGlobals;                               // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerCharacterLiteGlobals*           CharacterLiteGlobals;                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerChatGlobals*                    ChatGlobals;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerDemoGlobals*                    DemoGlobals;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerGameGlobals>        GameGlobalsType;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerInputGlobals*                   InputGlobals;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMapGlobals>         MapGlobalsType;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerMenuGlobals*                    MenuGlobals;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerModeGlobals*                    ModeGlobals;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerMusicGlobals*                   MusicGlobals;                                      // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMarinerFrontEndGlobals> FrontEndGlobals;                                   // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPlatformSettingsGlobals*        PlatformSettingsGlobals;                           // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerUIGlobals*                      UIGlobals;                                         // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerVoiceOverGlobals*               VoiceOverGlobals;                                  // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerTotemGlobals*                   TotemGlobals;                                      // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerCameraGlobals*                  CameraGlobals;                                     // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerFrontEndGlobals*                LoadedFrontEndGlobals;                             // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UMarinerAchievementsGlobals* GetAchievementsGlobals() const;
	class UMarinerSettingsGlobals* GetActiveSettingsGlobals() const;
	class UMarinerCameraGlobals* GetCameraGlobals() const;
	class UMarinerCharacterLiteGlobals* GetCharacterLiteGlobals() const;
	class UMarinerChatGlobals* GetChatGlobals() const;
	class UMarinerDemoGlobals* GetDemoGlobals() const;
	class UMarinerFrontEndGlobals* GetFrontEndGlobals() const;
	class UMarinerGameGlobals* GetGameGlobals() const;
	class UMarinerInputGlobals* GetInputGlobals() const;
	class UMarinerMapGlobals* GetMapGlobals() const;
	class UMarinerMenuGlobals* GetMenuGlobals() const;
	class UMarinerModeGlobals* GetModeGlobals() const;
	class UMarinerTotemGlobals* GetTotemGlobals() const;
	class UMarinerUIGlobals* GetUIGlobals() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGlobals">();
	}
	static class UMarinerGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGlobals>();
	}
};
static_assert(alignof(UMarinerGlobals) == 0x000008, "Wrong alignment on UMarinerGlobals");
static_assert(sizeof(UMarinerGlobals) == 0x0000D0, "Wrong size on UMarinerGlobals");
static_assert(offsetof(UMarinerGlobals, AchievementsGlobals) == 0x000028, "Member 'UMarinerGlobals::AchievementsGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, CharacterLiteGlobals) == 0x000030, "Member 'UMarinerGlobals::CharacterLiteGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, ChatGlobals) == 0x000038, "Member 'UMarinerGlobals::ChatGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, DemoGlobals) == 0x000040, "Member 'UMarinerGlobals::DemoGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, GameGlobalsType) == 0x000048, "Member 'UMarinerGlobals::GameGlobalsType' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, InputGlobals) == 0x000050, "Member 'UMarinerGlobals::InputGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, MapGlobalsType) == 0x000058, "Member 'UMarinerGlobals::MapGlobalsType' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, MenuGlobals) == 0x000060, "Member 'UMarinerGlobals::MenuGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, ModeGlobals) == 0x000068, "Member 'UMarinerGlobals::ModeGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, MusicGlobals) == 0x000070, "Member 'UMarinerGlobals::MusicGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, FrontEndGlobals) == 0x000078, "Member 'UMarinerGlobals::FrontEndGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, PlatformSettingsGlobals) == 0x0000A0, "Member 'UMarinerGlobals::PlatformSettingsGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, UIGlobals) == 0x0000A8, "Member 'UMarinerGlobals::UIGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, VoiceOverGlobals) == 0x0000B0, "Member 'UMarinerGlobals::VoiceOverGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, TotemGlobals) == 0x0000B8, "Member 'UMarinerGlobals::TotemGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, CameraGlobals) == 0x0000C0, "Member 'UMarinerGlobals::CameraGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerGlobals, LoadedFrontEndGlobals) == 0x0000C8, "Member 'UMarinerGlobals::LoadedFrontEndGlobals' has a wrong offset!");

// Class Mariner.MarinerRegionComboBox
// 0x0030 (0x3220 - 0x31F0)
class UMarinerRegionComboBox : public UMarinerCustomComboBox
{
public:
	class FText                                   PingMetric;                                        // 0x31F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   Recommended;                                       // 0x3208(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRegionComboBox">();
	}
	static class UMarinerRegionComboBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRegionComboBox>();
	}
};
static_assert(alignof(UMarinerRegionComboBox) == 0x000008, "Wrong alignment on UMarinerRegionComboBox");
static_assert(sizeof(UMarinerRegionComboBox) == 0x003220, "Wrong size on UMarinerRegionComboBox");
static_assert(offsetof(UMarinerRegionComboBox, PingMetric) == 0x0031F0, "Member 'UMarinerRegionComboBox::PingMetric' has a wrong offset!");
static_assert(offsetof(UMarinerRegionComboBox, Recommended) == 0x003208, "Member 'UMarinerRegionComboBox::Recommended' has a wrong offset!");

// Class Mariner.MarinerCircleProgress
// 0x0018 (0x0228 - 0x0210)
class UMarinerCircleProgress final : public UImage
{
public:
	float                                         StartDegree;                                       // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TotalDegrees;                                      // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InnerRadius;                                       // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1786[0x4];                                     // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ProgressMaterial;                                  // 0x0220(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetInnerRadius(float InPercent);
	void SetProgress(float InPercent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCircleProgress">();
	}
	static class UMarinerCircleProgress* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCircleProgress>();
	}
};
static_assert(alignof(UMarinerCircleProgress) == 0x000008, "Wrong alignment on UMarinerCircleProgress");
static_assert(sizeof(UMarinerCircleProgress) == 0x000228, "Wrong size on UMarinerCircleProgress");
static_assert(offsetof(UMarinerCircleProgress, StartDegree) == 0x000210, "Member 'UMarinerCircleProgress::StartDegree' has a wrong offset!");
static_assert(offsetof(UMarinerCircleProgress, TotalDegrees) == 0x000214, "Member 'UMarinerCircleProgress::TotalDegrees' has a wrong offset!");
static_assert(offsetof(UMarinerCircleProgress, InnerRadius) == 0x000218, "Member 'UMarinerCircleProgress::InnerRadius' has a wrong offset!");
static_assert(offsetof(UMarinerCircleProgress, ProgressMaterial) == 0x000220, "Member 'UMarinerCircleProgress::ProgressMaterial' has a wrong offset!");

// Class Mariner.MarinerRichTextBlock
// 0x0310 (0x0438 - 0x0128)
class UMarinerRichTextBlock final : public UTextLayoutWidget
{
public:
	class FText                                   Text;                                              // 0x0128(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	TDelegate<void()>                             TextDelegate;                                      // 0x0140(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSlateFontInfo                         Font;                                              // 0x0150(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           Color;                                             // 0x01A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMarinerRichTextBlockDecorator*> Decorators;                                        // 0x01B0(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1787[0x278];                                   // 0x01C0(0x0278)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetText(const class FText& Param_Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRichTextBlock">();
	}
	static class UMarinerRichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRichTextBlock>();
	}
};
static_assert(alignof(UMarinerRichTextBlock) == 0x000008, "Wrong alignment on UMarinerRichTextBlock");
static_assert(sizeof(UMarinerRichTextBlock) == 0x000438, "Wrong size on UMarinerRichTextBlock");
static_assert(offsetof(UMarinerRichTextBlock, Text) == 0x000128, "Member 'UMarinerRichTextBlock::Text' has a wrong offset!");
static_assert(offsetof(UMarinerRichTextBlock, TextDelegate) == 0x000140, "Member 'UMarinerRichTextBlock::TextDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerRichTextBlock, Font) == 0x000150, "Member 'UMarinerRichTextBlock::Font' has a wrong offset!");
static_assert(offsetof(UMarinerRichTextBlock, Color) == 0x0001A0, "Member 'UMarinerRichTextBlock::Color' has a wrong offset!");
static_assert(offsetof(UMarinerRichTextBlock, Decorators) == 0x0001B0, "Member 'UMarinerRichTextBlock::Decorators' has a wrong offset!");

// Class Mariner.MarinerCollectableObject
// 0x0088 (0x0300 - 0x0278)
class AMarinerCollectableObject final : public AMarinerStaticMeshProp
{
public:
	class UParticleSystemComponent*               PickupPSC;                                         // 0x0278(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1788[0x18];                                    // 0x0280(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    PickupCollision;                                   // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           ActiveGameplayCueTag;                              // 0x02A0(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        ActiveFX;                                          // 0x02A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        PickupFX;                                          // 0x02B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          SpawnSound;                                        // 0x02B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          PickupSound;                                       // 0x02C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ActiveFXStartSound;                                // 0x02C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ActiveFXStopSound;                                 // 0x02D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsActive;                                         // 0x02D8(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1789[0x3];                                     // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AMarinerCharacter>       PickedUpBy;                                        // 0x02DC(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AMarinerCharacter>       DroppedBy;                                         // 0x02E4(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_178A[0x4];                                     // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SourceSpawner;                                     // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldAutoDestroyOnPickup;                        // 0x02F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsPooledCollectable;                              // 0x02F9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_178B[0x6];                                     // 0x02FA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnClientBeginPlayOverlappingLocalPlayer(class APawn* LocalPlayerPawn);
	void OnLifeTimeExpired();
	void OnNoPickupTimeout();
	void OnPickedUpEvent(class AMarinerCharacter* InPickedUpBy);
	void OnRep_IsActive();
	bool TryToPickup(class AMarinerCharacter* Pawn);

	bool BP_CanBePickedUp(const class AMarinerCharacter* TestPawn) const;
	class AMarinerCharacter* GetDroppedBy() const;
	class AMarinerCharacter* GetPickedUpBy() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCollectableObject">();
	}
	static class AMarinerCollectableObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerCollectableObject>();
	}
};
static_assert(alignof(AMarinerCollectableObject) == 0x000008, "Wrong alignment on AMarinerCollectableObject");
static_assert(sizeof(AMarinerCollectableObject) == 0x000300, "Wrong size on AMarinerCollectableObject");
static_assert(offsetof(AMarinerCollectableObject, PickupPSC) == 0x000278, "Member 'AMarinerCollectableObject::PickupPSC' has a wrong offset!");
static_assert(offsetof(AMarinerCollectableObject, PickupCollision) == 0x000298, "Member 'AMarinerCollectableObject::PickupCollision' has a wrong offset!");
static_assert(offsetof(AMarinerCollectableObject, ActiveGameplayCueTag) == 0x0002A0, "Member 'AMarinerCollectableObject::ActiveGameplayCueTag' has a wrong offset!");
static_assert(offsetof(AMarinerCollectableObject, ActiveFX) == 0x0002A8, "Member 'AMarinerCollectableObject::ActiveFX' has a wrong offset!");
static_assert(offsetof(AMarinerCollectableObject, PickupFX) == 0x0002B0, "Member 'AMarinerCollectableObject::PickupFX' has a wrong offset!");
static_assert(offsetof(AMarinerCollectableObject, SpawnSound) == 0x0002B8, "Member 'AMarinerCollectableObject::SpawnSound' has a wrong offset!");
static_assert(offsetof(AMarinerCollectableObject, PickupSound) == 0x0002C0, "Member 'AMarinerCollectableObject::PickupSound' has a wrong offset!");
static_assert(offsetof(AMarinerCollectableObject, ActiveFXStartSound) == 0x0002C8, "Member 'AMarinerCollectableObject::ActiveFXStartSound' has a wrong offset!");
static_assert(offsetof(AMarinerCollectableObject, ActiveFXStopSound) == 0x0002D0, "Member 'AMarinerCollectableObject::ActiveFXStopSound' has a wrong offset!");
static_assert(offsetof(AMarinerCollectableObject, bIsActive) == 0x0002D8, "Member 'AMarinerCollectableObject::bIsActive' has a wrong offset!");
static_assert(offsetof(AMarinerCollectableObject, PickedUpBy) == 0x0002DC, "Member 'AMarinerCollectableObject::PickedUpBy' has a wrong offset!");
static_assert(offsetof(AMarinerCollectableObject, DroppedBy) == 0x0002E4, "Member 'AMarinerCollectableObject::DroppedBy' has a wrong offset!");
static_assert(offsetof(AMarinerCollectableObject, SourceSpawner) == 0x0002F0, "Member 'AMarinerCollectableObject::SourceSpawner' has a wrong offset!");
static_assert(offsetof(AMarinerCollectableObject, bShouldAutoDestroyOnPickup) == 0x0002F8, "Member 'AMarinerCollectableObject::bShouldAutoDestroyOnPickup' has a wrong offset!");
static_assert(offsetof(AMarinerCollectableObject, bIsPooledCollectable) == 0x0002F9, "Member 'AMarinerCollectableObject::bIsPooledCollectable' has a wrong offset!");

// Class Mariner.MarinerCollectionDataAsset
// 0x0308 (0x0338 - 0x0030)
class UMarinerCollectionDataAsset final : public UDataAsset
{
public:
	TArray<TSoftObjectPtr<class UMarinerCMSItemDataAsset>> CollectionItems;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FSlateBrush                            CollectionIcon;                                    // 0x0040(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            LockIcon;                                          // 0x00C8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   OfferButtonText;                                   // 0x0150(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bUsePreviewMessageBox;                             // 0x0168(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_178E[0x7];                                     // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerMessageBoxData                 PreviewMessageBox;                                 // 0x0170(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class FText                                   PurchaseOfferHeader;                               // 0x02E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   PurchaseOfferBody;                                 // 0x02F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         PurchaseOfferIds;                                  // 0x0310(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         NativeOfferLookupIdentifiers;                      // 0x0320(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_178F[0x8];                                     // 0x0330(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginCollectionPurchase(const class UObject* WorldContextObject, bool bAllowPreviewMessageBox);
	void OnPreviewMessageBoxConfirmed(const struct FKey& KeyPressed);

	bool CanPurchase() const;
	bool ContainsItem(const struct FMangoItem& Item) const;
	const struct FSlateBrush GetCollectionIcon() const;
	const struct FSlateBrush GetLockIcon() const;
	const class FText GetOfferButtonText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCollectionDataAsset">();
	}
	static class UMarinerCollectionDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCollectionDataAsset>();
	}
};
static_assert(alignof(UMarinerCollectionDataAsset) == 0x000008, "Wrong alignment on UMarinerCollectionDataAsset");
static_assert(sizeof(UMarinerCollectionDataAsset) == 0x000338, "Wrong size on UMarinerCollectionDataAsset");
static_assert(offsetof(UMarinerCollectionDataAsset, CollectionItems) == 0x000030, "Member 'UMarinerCollectionDataAsset::CollectionItems' has a wrong offset!");
static_assert(offsetof(UMarinerCollectionDataAsset, CollectionIcon) == 0x000040, "Member 'UMarinerCollectionDataAsset::CollectionIcon' has a wrong offset!");
static_assert(offsetof(UMarinerCollectionDataAsset, LockIcon) == 0x0000C8, "Member 'UMarinerCollectionDataAsset::LockIcon' has a wrong offset!");
static_assert(offsetof(UMarinerCollectionDataAsset, OfferButtonText) == 0x000150, "Member 'UMarinerCollectionDataAsset::OfferButtonText' has a wrong offset!");
static_assert(offsetof(UMarinerCollectionDataAsset, bUsePreviewMessageBox) == 0x000168, "Member 'UMarinerCollectionDataAsset::bUsePreviewMessageBox' has a wrong offset!");
static_assert(offsetof(UMarinerCollectionDataAsset, PreviewMessageBox) == 0x000170, "Member 'UMarinerCollectionDataAsset::PreviewMessageBox' has a wrong offset!");
static_assert(offsetof(UMarinerCollectionDataAsset, PurchaseOfferHeader) == 0x0002E0, "Member 'UMarinerCollectionDataAsset::PurchaseOfferHeader' has a wrong offset!");
static_assert(offsetof(UMarinerCollectionDataAsset, PurchaseOfferBody) == 0x0002F8, "Member 'UMarinerCollectionDataAsset::PurchaseOfferBody' has a wrong offset!");
static_assert(offsetof(UMarinerCollectionDataAsset, PurchaseOfferIds) == 0x000310, "Member 'UMarinerCollectionDataAsset::PurchaseOfferIds' has a wrong offset!");
static_assert(offsetof(UMarinerCollectionDataAsset, NativeOfferLookupIdentifiers) == 0x000320, "Member 'UMarinerCollectionDataAsset::NativeOfferLookupIdentifiers' has a wrong offset!");

// Class Mariner.MarinerGauntletPrivateMatchController
// 0x0000 (0x0060 - 0x0060)
class UMarinerGauntletPrivateMatchController final : public UMarinerGauntletController
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGauntletPrivateMatchController">();
	}
	static class UMarinerGauntletPrivateMatchController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGauntletPrivateMatchController>();
	}
};
static_assert(alignof(UMarinerGauntletPrivateMatchController) == 0x000008, "Wrong alignment on UMarinerGauntletPrivateMatchController");
static_assert(sizeof(UMarinerGauntletPrivateMatchController) == 0x000060, "Wrong size on UMarinerGauntletPrivateMatchController");

// Class Mariner.MarinerRoundResetInterface
// 0x0000 (0x0028 - 0x0028)
class IMarinerRoundResetInterface final : public IInterface
{
public:
	void OnRoundReset();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRoundResetInterface">();
	}
	static class IMarinerRoundResetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarinerRoundResetInterface>();
	}
};
static_assert(alignof(IMarinerRoundResetInterface) == 0x000008, "Wrong alignment on IMarinerRoundResetInterface");
static_assert(sizeof(IMarinerRoundResetInterface) == 0x000028, "Wrong size on IMarinerRoundResetInterface");

// Class Mariner.MarinerGameMode
// 0x0240 (0x0540 - 0x0300)
class AMarinerGameMode : public AGameMode
{
public:
	TArray<class AMarinerPickup*>                 LevelPickups;                                      // 0x0300(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnFirstRoundBegin;                                 // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarinerCharacter>          DefaultBotPawnClass;                               // 0x0320(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   PrivateMatchBotPawnSoftClass;                      // 0x0328(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerBotNameOverrides*               BotNameOverrides;                                  // 0x0350(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1792[0x10];                                    // 0x0358(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerBotTypesData*                   BotTypesInfo;                                      // 0x0368(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldBotsAvoidDuplicates;                        // 0x0370(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1793[0x3];                                     // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BotCharacterSelectionMinimumTimeLeft;              // 0x0374(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1794[0x10];                                    // 0x0378(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AMarinerAIController>       EasyBotControllerClass;                            // 0x0388(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AMarinerAIController>       NormalBotControllerClass;                          // 0x0390(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AMarinerAIController>       HardBotControllerClass;                            // 0x0398(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AMarinerAIController>       ExtremeBotControllerClass;                         // 0x03A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1795[0x10];                                    // 0x03A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAllowDelayBeforeReadyToStartMatch;                // 0x03B8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1796[0x3];                                     // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MatchStartDelayDuration;                           // 0x03BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1797[0x1];                                     // 0x03C0(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bDisableGameTimerExtension;                        // 0x03C1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1798[0x2];                                     // 0x03C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreRoundCountdownTime;                             // 0x03C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WaitToStartTimeoutSeconds;                         // 0x03C8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1799[0x4];                                     // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ACameraActor>               DesiredPreGameCameraType;                          // 0x03D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RoundTime;                                         // 0x03D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OvertimeTime;                                      // 0x03DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxExtendedTime;                                   // 0x03E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        TimeBetweenRounds;                                 // 0x03E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TimeBetweenMatches;                                // 0x03E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FinalCountdownThreshold;                           // 0x03EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         KillScore;                                         // 0x03F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DeathScore;                                        // 0x03F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSelfDamageAllowed;                              // 0x03F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFriendlyFireAllowed;                            // 0x03F9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_179A[0x2];                                     // 0x03FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageSelfScale;                                   // 0x03FC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInvertTeamSpawns;                                 // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_179B[0x3];                                     // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KnockoutCreditTimeout;                             // 0x0404(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxBots;                                           // 0x0408(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFillToMinimumPlayerCountWithBots;                 // 0x040C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_179C[0x3];                                     // 0x040D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumPlayerCountToFillTo;                        // 0x0410(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBotDifficultyLevel                           DefaultBotDifficulty;                              // 0x0414(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOnboardingMode;                                 // 0x0415(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerMatchTerminationPolicy                TerminationPolicy;                                 // 0x0416(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldTerminateOnPrematchLeaver;                  // 0x0417(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableDeveloperCheats;                            // 0x0418(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_179D[0x7];                                     // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULocalMessage>              KnockoutMessage;                                   // 0x0420(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULocalMessage>              KnockoutMegablastMessage;                          // 0x0428(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULocalMessage>              SuicideMessage;                                    // 0x0430(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerArenaReturnTargetComparer> ArenaReturnTargetComparerType;                     // 0x0438(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerArenaReturnTimingParams        ArenaReturnTimingParams;                           // 0x0440(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           RequiredObjects;                                   // 0x0450(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           GameModeSubLevels;                                 // 0x0460(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class AMarinerAIController*>           BotControllers;                                    // 0x0470(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UMarinerArenaReturnTargetComparer*      ArenaReturnTargetComparer;                         // 0x0480(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_179E[0x50];                                    // 0x0488(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerGameGriefComponent*             GameGriefComponent;                                // 0x04D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarinerNetworkGameplayCueActor*        GameplayCueActor;                                  // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarinerBotManager*                     BotManager;                                        // 0x04E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AMarinerBotManager>         BotManagerClass;                                   // 0x04F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_179F[0x1B];                                    // 0x04F8(0x001B)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bBotsShouldTeleportOnArenaReturn;                  // 0x0513(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17A0[0x4];                                     // 0x0514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideCharacterLoadTime;                         // 0x0518(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17A1[0x4];                                     // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerPregameStateMachine> PregameStateMachine;                               // 0x0520(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPregameStateMachine*            PregameStateMachineInstance;                       // 0x0528(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17A2[0x10];                                    // 0x0530(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 AddToRedundantElapsedTime(int32 SecondsToAdd);
	void BP_OnPlayerRejoined(class AMarinerPlayerState* RejoinedPlayer);
	void BroadcastMessage(TSubclassOf<class ULocalMessage> Message, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject);
	void BroadcastMessageToAll(TSubclassOf<class ULocalMessage> Message, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject);
	void BroadcastMessageToPlayers(const TArray<class APlayerState*>& ToPlayers, TSubclassOf<class ULocalMessage> Message, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject);
	bool CanBotHaveUniqueName(const class AMarinerPlayerState* BotPlayerState);
	int32 ChooseTeam(const class AMarinerPlayerState* InPlayerState, const TArray<class APlayerState*>& Players);
	class AMarinerAIController* CreateBot(TSubclassOf<class AMarinerCharacter> OverridePawnClass, EBotDifficultyLevel Difficulty, int32 TeamNum);
	void EndGameTimerExtension();
	void FinishMatch();
	void FinishMatchWithWinningTeam(int32 WinningTeam);
	TSubclassOf<class AMarinerCharacter> GetBotInitialPawnClass(const class AMarinerGameState* MarinerGameState, int32 BotTeam);
	void HandleStartingNewController(class AController* NewPlayer);
	void InitiateRoundReset(bool bRespawnPlayers, bool bClearProjectiles);
	void InitiateTimerToRoundReset(bool bRespawnPlayers, bool bClearProjectiles);
	bool IsDeveloperCheatingAllowed();
	void ModifySuppressionTagLayersForAllPlayers(bool bAdd);
	void NotifyPlayersOfArtifactEvent(EArtifactEventTypes ArtifactEventType);
	void OnCharacterSelectRemainingTimeChanged(int32 RemainingTime);
	void OnDamageCaused(const class AActor* DamagedActor, bool bIsAOEDamage, bool bIsMegablastDamage, TSubclassOf<class UDamageType> DamageType, float DamageApplied, float DamageBlocked, const class APawn* InstigatorPawn);
	void OnEnterOvertime();
	bool OnGameModeObjectOutOfBounds(class AActor* GameModeObject);
	void OnItemDropped(class APlayerState* Player, class AMarinerItem* DroppedBall);
	void OnItemPickedUp(class APlayerState* Player, class AMarinerItem* Ball);
	void OnItemStolen(class APlayerState* StealingPlayer, class APlayerState* StolenFromPlayer);
	void OnKnockout(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, const class UDamageType* DamageType);
	void OnOverrideCharacterLoadTimer();
	void OnOvertimeTimedOut();
	void OnPossessPawn(class AMarinerPlayerController* PossessingController, class APawn* PossessedPawn);
	void OnPregameStateBegin(const class FName NewPregameState);
	void OnPregameStateEnded(const class FName OldPregameState);
	void OnRoundBegin();
	void OnRoundReset();
	void OnTimerUpdated(int32 TimeRemaining);
	void PauseTimer(bool bIsPaused);
	void ReactToPreRoundCountdownStarted(float PreRoundCountdownEndTimeStamp);
	void SetAllowBots(bool bInAllowBots, int32 InMaxBots, EBotDifficultyLevel InBotDifficulty);
	bool ShouldDelayPawnSelectionUntilCharacterSelect(const class AMarinerGameState* MarinerGameState, class AMarinerPlayerState* BotPlayerState);

	class AMarinerReturnRocketLaunchpad* ChooseBestReturnRocketLaunchpad(const class AMarinerCharacter* Character, const int32 CharacterTeamIndex, const TArray<class AMarinerReturnRocketLaunchpad*>& EligibleLaunchpads) const;
	const TSubclassOf<class AMarinerAIController> GetBotControllerClass() const;
	class AMarinerBotManager* GetBotManager() const;
	int32 GetRedundantElapsedTime() const;
	bool IsMatchTied() const;
	void ResetAllItemSpawners() const;
	bool ShouldExtendGameTimer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameMode">();
	}
	static class AMarinerGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerGameMode>();
	}
};
static_assert(alignof(AMarinerGameMode) == 0x000008, "Wrong alignment on AMarinerGameMode");
static_assert(sizeof(AMarinerGameMode) == 0x000540, "Wrong size on AMarinerGameMode");
static_assert(offsetof(AMarinerGameMode, LevelPickups) == 0x000300, "Member 'AMarinerGameMode::LevelPickups' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, OnFirstRoundBegin) == 0x000310, "Member 'AMarinerGameMode::OnFirstRoundBegin' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, DefaultBotPawnClass) == 0x000320, "Member 'AMarinerGameMode::DefaultBotPawnClass' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, PrivateMatchBotPawnSoftClass) == 0x000328, "Member 'AMarinerGameMode::PrivateMatchBotPawnSoftClass' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, BotNameOverrides) == 0x000350, "Member 'AMarinerGameMode::BotNameOverrides' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, BotTypesInfo) == 0x000368, "Member 'AMarinerGameMode::BotTypesInfo' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, bShouldBotsAvoidDuplicates) == 0x000370, "Member 'AMarinerGameMode::bShouldBotsAvoidDuplicates' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, BotCharacterSelectionMinimumTimeLeft) == 0x000374, "Member 'AMarinerGameMode::BotCharacterSelectionMinimumTimeLeft' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, EasyBotControllerClass) == 0x000388, "Member 'AMarinerGameMode::EasyBotControllerClass' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, NormalBotControllerClass) == 0x000390, "Member 'AMarinerGameMode::NormalBotControllerClass' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, HardBotControllerClass) == 0x000398, "Member 'AMarinerGameMode::HardBotControllerClass' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, ExtremeBotControllerClass) == 0x0003A0, "Member 'AMarinerGameMode::ExtremeBotControllerClass' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, bAllowDelayBeforeReadyToStartMatch) == 0x0003B8, "Member 'AMarinerGameMode::bAllowDelayBeforeReadyToStartMatch' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, MatchStartDelayDuration) == 0x0003BC, "Member 'AMarinerGameMode::MatchStartDelayDuration' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, bDisableGameTimerExtension) == 0x0003C1, "Member 'AMarinerGameMode::bDisableGameTimerExtension' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, PreRoundCountdownTime) == 0x0003C4, "Member 'AMarinerGameMode::PreRoundCountdownTime' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, WaitToStartTimeoutSeconds) == 0x0003C8, "Member 'AMarinerGameMode::WaitToStartTimeoutSeconds' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, DesiredPreGameCameraType) == 0x0003D0, "Member 'AMarinerGameMode::DesiredPreGameCameraType' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, RoundTime) == 0x0003D8, "Member 'AMarinerGameMode::RoundTime' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, OvertimeTime) == 0x0003DC, "Member 'AMarinerGameMode::OvertimeTime' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, MaxExtendedTime) == 0x0003E0, "Member 'AMarinerGameMode::MaxExtendedTime' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, TimeBetweenRounds) == 0x0003E4, "Member 'AMarinerGameMode::TimeBetweenRounds' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, TimeBetweenMatches) == 0x0003E8, "Member 'AMarinerGameMode::TimeBetweenMatches' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, FinalCountdownThreshold) == 0x0003EC, "Member 'AMarinerGameMode::FinalCountdownThreshold' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, KillScore) == 0x0003F0, "Member 'AMarinerGameMode::KillScore' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, DeathScore) == 0x0003F4, "Member 'AMarinerGameMode::DeathScore' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, bIsSelfDamageAllowed) == 0x0003F8, "Member 'AMarinerGameMode::bIsSelfDamageAllowed' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, bIsFriendlyFireAllowed) == 0x0003F9, "Member 'AMarinerGameMode::bIsFriendlyFireAllowed' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, DamageSelfScale) == 0x0003FC, "Member 'AMarinerGameMode::DamageSelfScale' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, bInvertTeamSpawns) == 0x000400, "Member 'AMarinerGameMode::bInvertTeamSpawns' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, KnockoutCreditTimeout) == 0x000404, "Member 'AMarinerGameMode::KnockoutCreditTimeout' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, MaxBots) == 0x000408, "Member 'AMarinerGameMode::MaxBots' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, bFillToMinimumPlayerCountWithBots) == 0x00040C, "Member 'AMarinerGameMode::bFillToMinimumPlayerCountWithBots' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, MinimumPlayerCountToFillTo) == 0x000410, "Member 'AMarinerGameMode::MinimumPlayerCountToFillTo' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, DefaultBotDifficulty) == 0x000414, "Member 'AMarinerGameMode::DefaultBotDifficulty' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, bIsOnboardingMode) == 0x000415, "Member 'AMarinerGameMode::bIsOnboardingMode' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, TerminationPolicy) == 0x000416, "Member 'AMarinerGameMode::TerminationPolicy' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, bShouldTerminateOnPrematchLeaver) == 0x000417, "Member 'AMarinerGameMode::bShouldTerminateOnPrematchLeaver' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, bEnableDeveloperCheats) == 0x000418, "Member 'AMarinerGameMode::bEnableDeveloperCheats' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, KnockoutMessage) == 0x000420, "Member 'AMarinerGameMode::KnockoutMessage' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, KnockoutMegablastMessage) == 0x000428, "Member 'AMarinerGameMode::KnockoutMegablastMessage' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, SuicideMessage) == 0x000430, "Member 'AMarinerGameMode::SuicideMessage' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, ArenaReturnTargetComparerType) == 0x000438, "Member 'AMarinerGameMode::ArenaReturnTargetComparerType' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, ArenaReturnTimingParams) == 0x000440, "Member 'AMarinerGameMode::ArenaReturnTimingParams' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, RequiredObjects) == 0x000450, "Member 'AMarinerGameMode::RequiredObjects' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, GameModeSubLevels) == 0x000460, "Member 'AMarinerGameMode::GameModeSubLevels' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, BotControllers) == 0x000470, "Member 'AMarinerGameMode::BotControllers' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, ArenaReturnTargetComparer) == 0x000480, "Member 'AMarinerGameMode::ArenaReturnTargetComparer' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, GameGriefComponent) == 0x0004D8, "Member 'AMarinerGameMode::GameGriefComponent' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, GameplayCueActor) == 0x0004E0, "Member 'AMarinerGameMode::GameplayCueActor' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, BotManager) == 0x0004E8, "Member 'AMarinerGameMode::BotManager' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, BotManagerClass) == 0x0004F0, "Member 'AMarinerGameMode::BotManagerClass' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, bBotsShouldTeleportOnArenaReturn) == 0x000513, "Member 'AMarinerGameMode::bBotsShouldTeleportOnArenaReturn' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, OverrideCharacterLoadTime) == 0x000518, "Member 'AMarinerGameMode::OverrideCharacterLoadTime' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, PregameStateMachine) == 0x000520, "Member 'AMarinerGameMode::PregameStateMachine' has a wrong offset!");
static_assert(offsetof(AMarinerGameMode, PregameStateMachineInstance) == 0x000528, "Member 'AMarinerGameMode::PregameStateMachineInstance' has a wrong offset!");

// Class Mariner.MarinerCollectionGameMode
// 0x0148 (0x0688 - 0x0540)
class AMarinerCollectionGameMode final : public AMarinerGameMode
{
public:
	bool                                          bPreventSpawningTrophies;                          // 0x0540(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17AD[0x7];                                     // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULocalMessage>              RocketTrophyFeedPickupMessage;                     // 0x0548(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULocalMessage>              PlayerTrophyFeedPickupMessage;                     // 0x0550(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULocalMessage>              RocketTrophyMedalPickupMessage;                    // 0x0558(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULocalMessage>              PlayerTrophyMedalPickupMessage;                    // 0x0560(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULocalMessage>              RocketObjectivePickupMessage;                      // 0x0568(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULocalMessage>              PlayerObjectivePickupMessage;                      // 0x0570(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AMarinerCollectableObject>  PlayerTrophyClass;                                 // 0x0578(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AMarinerCollectableObject>  RocketTrophyClass;                                 // 0x0580(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RocketTrophyPointValue;                            // 0x0588(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FriendlyTrophyPointValue;                          // 0x058C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         EnemyTrophyPointValue;                             // 0x0590(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RocketTrophySpawnTime;                             // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RocketTrophyQuickSpawnTime;                        // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PlayerTrophyDamageThreshold;                       // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RocketTrophyNoPickupTime;                          // 0x05A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PlayerTrophyFriendlyNoPickupTime;                  // 0x05A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PlayerTrophyBlastability;                          // 0x05A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldPoolPlayerTrophies;                         // 0x05AC(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17AE[0x3];                                     // 0x05AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InitialPlayerTrophyPoolSize;                       // 0x05B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PlayerTrophyLifetime;                              // 0x05B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PlayerTrophyBounceDirectionOverride;               // 0x05B8(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PlayerTrophyDefaultDropDirection;                  // 0x05C4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PlayerTrophyBounceOrigin;                          // 0x05D0(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17AF[0x4];                                     // 0x05DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarinerRocketTrophySpawnerData> RocketTrophySpawnerData;                           // 0x05E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<TWeakObjectPtr<class AMarinerCharacter>, int32> TrophyDroppedCountMap;                             // 0x05F0(0x0050)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AMarinerRocketTrophySpawner>> AvailableRocketTrophySpawners;                     // 0x0640(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	EPlayerTrophyBounceDirectionMode              PlayerTrophyBounceDirectionMode;                   // 0x0650(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17B0[0x3];                                     // 0x0651(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerTrophyBouncePitch;                           // 0x0654(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldDestroyRocketTrophiesOnExitArena;           // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17B1[0x7];                                     // 0x0659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMarinerCollectableObject*>      PlayerTrophyPool;                                  // 0x0660(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_17B2[0x18];                                    // 0x0670(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AccelerateExistingRocketTrophySpawn();
	void GetTrophyType(const class AMarinerCollectableObject* CollectableObject, EMarinerTrophyType* OutTrophyType);
	void IncrementsCharacterTrophyPointsAndCount(const class AMarinerCharacter* PickedUpBy, int32 PointsToAward);
	void IncrementsTeamTrophyPoints(int32 TeamIndex, int32 PointsToAward);
	bool MoveTrophyToOriginalSpawnLocation(class AMarinerCollectableObject* TrophyToTeleport);
	void OnAccumulatedDamageChange(const class UMarinerDamageableComponent* DamageableComponent, float NewAccumulatedDamage, float OldAccumulatedDamage);
	void OnCharacterBeginDropPlayerTrophy(const class UMarinerDamageableComponent* DroppedByDamageComponent);
	void OnCollectableObjectOutOfBounds(const class AMarinerCollectableObject* CollectableObject, bool bShouldDestroy);
	void OnCollectablePickedUp(class AMarinerCharacter* PickedUpBy, class AMarinerCollectableObject* CollectableObject);
	class AMarinerRocketTrophySpawner* RespawnRocketTrophyFromOriginalSpawner(float TimeToSpawn, class AMarinerCollectableObject* TrophyToRespawn);
	void SetPlayerTrophyBlastability(float InPlayerTrophyBlastability);
	void SetPlayerTrophyBounceDirectionMode(const EPlayerTrophyBounceDirectionMode& InPlayerTrophyBounceDirectionMode);
	void SetPlayerTrophyBounceDirectionOverride(const struct FVector& InPlayerTrophyBounceDirectionOverride);
	void SetPlayerTrophyBounceOrigin(const struct FVector& InPlayerTrophyBounceOrigin);
	void SetPlayerTrophyBouncePitch(float InPitch);
	void SetTrophyHuntMaxScore(int32 InTrophyHuntMaxScore);
	void SpawnPlayerTrophy(class AMarinerCharacter* DamagedCharacter, const struct FVector& DropDirection);
	class AMarinerRocketTrophySpawner* SpawnRocketTrophy(float TimeToSpawn);
	class AMarinerRocketTrophySpawner* SpawnRocketTrophyUsingSpawnerID(float TimeToSpawn, int32 SpawnerID);
	class AMarinerRocketTrophySpawner* SpawnRocketTrophyUsingSpecificSpawner(float TimeToSpawn, class AMarinerRocketTrophySpawner* SpecificSpawner);

	bool AreAvailableSpawners() const;
	int32 GetActiveRocketTrophySpawnerCount() const;
	int32 GetEnemyPlayerTrophyValue() const;
	int32 GetFriendPlayerTrophyValue() const;
	int32 GetQueuedRocketTrophySpawnCount() const;
	int32 GetRocketTrophiesInCirculation() const;
	int32 GetRocketTrophyValue() const;
	int32 GetTrophyRewardPoints(const class AMarinerCharacter* PickedUpBy, class AMarinerCollectableObject* CollectableObject) const;
	int32 GetTrophySpawnersCount() const;
	void UnblockAllRocketTrophySpawners() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCollectionGameMode">();
	}
	static class AMarinerCollectionGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerCollectionGameMode>();
	}
};
static_assert(alignof(AMarinerCollectionGameMode) == 0x000008, "Wrong alignment on AMarinerCollectionGameMode");
static_assert(sizeof(AMarinerCollectionGameMode) == 0x000688, "Wrong size on AMarinerCollectionGameMode");
static_assert(offsetof(AMarinerCollectionGameMode, bPreventSpawningTrophies) == 0x000540, "Member 'AMarinerCollectionGameMode::bPreventSpawningTrophies' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, RocketTrophyFeedPickupMessage) == 0x000548, "Member 'AMarinerCollectionGameMode::RocketTrophyFeedPickupMessage' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, PlayerTrophyFeedPickupMessage) == 0x000550, "Member 'AMarinerCollectionGameMode::PlayerTrophyFeedPickupMessage' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, RocketTrophyMedalPickupMessage) == 0x000558, "Member 'AMarinerCollectionGameMode::RocketTrophyMedalPickupMessage' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, PlayerTrophyMedalPickupMessage) == 0x000560, "Member 'AMarinerCollectionGameMode::PlayerTrophyMedalPickupMessage' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, RocketObjectivePickupMessage) == 0x000568, "Member 'AMarinerCollectionGameMode::RocketObjectivePickupMessage' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, PlayerObjectivePickupMessage) == 0x000570, "Member 'AMarinerCollectionGameMode::PlayerObjectivePickupMessage' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, PlayerTrophyClass) == 0x000578, "Member 'AMarinerCollectionGameMode::PlayerTrophyClass' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, RocketTrophyClass) == 0x000580, "Member 'AMarinerCollectionGameMode::RocketTrophyClass' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, RocketTrophyPointValue) == 0x000588, "Member 'AMarinerCollectionGameMode::RocketTrophyPointValue' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, FriendlyTrophyPointValue) == 0x00058C, "Member 'AMarinerCollectionGameMode::FriendlyTrophyPointValue' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, EnemyTrophyPointValue) == 0x000590, "Member 'AMarinerCollectionGameMode::EnemyTrophyPointValue' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, RocketTrophySpawnTime) == 0x000594, "Member 'AMarinerCollectionGameMode::RocketTrophySpawnTime' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, RocketTrophyQuickSpawnTime) == 0x000598, "Member 'AMarinerCollectionGameMode::RocketTrophyQuickSpawnTime' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, PlayerTrophyDamageThreshold) == 0x00059C, "Member 'AMarinerCollectionGameMode::PlayerTrophyDamageThreshold' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, RocketTrophyNoPickupTime) == 0x0005A0, "Member 'AMarinerCollectionGameMode::RocketTrophyNoPickupTime' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, PlayerTrophyFriendlyNoPickupTime) == 0x0005A4, "Member 'AMarinerCollectionGameMode::PlayerTrophyFriendlyNoPickupTime' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, PlayerTrophyBlastability) == 0x0005A8, "Member 'AMarinerCollectionGameMode::PlayerTrophyBlastability' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, bShouldPoolPlayerTrophies) == 0x0005AC, "Member 'AMarinerCollectionGameMode::bShouldPoolPlayerTrophies' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, InitialPlayerTrophyPoolSize) == 0x0005B0, "Member 'AMarinerCollectionGameMode::InitialPlayerTrophyPoolSize' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, PlayerTrophyLifetime) == 0x0005B4, "Member 'AMarinerCollectionGameMode::PlayerTrophyLifetime' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, PlayerTrophyBounceDirectionOverride) == 0x0005B8, "Member 'AMarinerCollectionGameMode::PlayerTrophyBounceDirectionOverride' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, PlayerTrophyDefaultDropDirection) == 0x0005C4, "Member 'AMarinerCollectionGameMode::PlayerTrophyDefaultDropDirection' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, PlayerTrophyBounceOrigin) == 0x0005D0, "Member 'AMarinerCollectionGameMode::PlayerTrophyBounceOrigin' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, RocketTrophySpawnerData) == 0x0005E0, "Member 'AMarinerCollectionGameMode::RocketTrophySpawnerData' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, TrophyDroppedCountMap) == 0x0005F0, "Member 'AMarinerCollectionGameMode::TrophyDroppedCountMap' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, AvailableRocketTrophySpawners) == 0x000640, "Member 'AMarinerCollectionGameMode::AvailableRocketTrophySpawners' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, PlayerTrophyBounceDirectionMode) == 0x000650, "Member 'AMarinerCollectionGameMode::PlayerTrophyBounceDirectionMode' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, PlayerTrophyBouncePitch) == 0x000654, "Member 'AMarinerCollectionGameMode::PlayerTrophyBouncePitch' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, bShouldDestroyRocketTrophiesOnExitArena) == 0x000658, "Member 'AMarinerCollectionGameMode::bShouldDestroyRocketTrophiesOnExitArena' has a wrong offset!");
static_assert(offsetof(AMarinerCollectionGameMode, PlayerTrophyPool) == 0x000660, "Member 'AMarinerCollectionGameMode::PlayerTrophyPool' has a wrong offset!");

// Class Mariner.MarinerComboBoxString
// 0x0048 (0x0E28 - 0x0DE0)
class UMarinerComboBoxString final : public UComboBoxString
{
public:
	uint8                                         Pad_17BC[0x8];                                     // 0x0DE0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnSelectionIndexChanged;                           // 0x0DE8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bWrap;                                             // 0x0DF8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17BD[0x7];                                     // 0x0DF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          OnOpeningSFX;                                      // 0x0E00(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17BE[0x20];                                    // 0x0E08(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType);
	void SetHeaderHighlightState(bool bHighlighted);
	void SetHightlightedOptionViaIndex(int32 Param_Index);
	void SetIsOpen(bool bOpen);
	void SetSelectedOptionViaIndex(int32 Param_Index);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerComboBoxString">();
	}
	static class UMarinerComboBoxString* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerComboBoxString>();
	}
};
static_assert(alignof(UMarinerComboBoxString) == 0x000008, "Wrong alignment on UMarinerComboBoxString");
static_assert(sizeof(UMarinerComboBoxString) == 0x000E28, "Wrong size on UMarinerComboBoxString");
static_assert(offsetof(UMarinerComboBoxString, OnSelectionIndexChanged) == 0x000DE8, "Member 'UMarinerComboBoxString::OnSelectionIndexChanged' has a wrong offset!");
static_assert(offsetof(UMarinerComboBoxString, bWrap) == 0x000DF8, "Member 'UMarinerComboBoxString::bWrap' has a wrong offset!");
static_assert(offsetof(UMarinerComboBoxString, OnOpeningSFX) == 0x000E00, "Member 'UMarinerComboBoxString::OnOpeningSFX' has a wrong offset!");

// Class Mariner.MarinerInGameScoreBoardTeam
// 0x0020 (0x0250 - 0x0230)
class UMarinerInGameScoreBoardTeam final : public UUserWidget
{
public:
	class UHorizontalBox*                         Bound_WidgetContainer;                             // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerSkinnedSelectedCharacterWidget* Bound_RocketBots;                                  // 0x0238(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AMarinerPlayerState*>            PlayerStates;                                      // 0x0240(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerInGameScoreBoardTeam">();
	}
	static class UMarinerInGameScoreBoardTeam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerInGameScoreBoardTeam>();
	}
};
static_assert(alignof(UMarinerInGameScoreBoardTeam) == 0x000008, "Wrong alignment on UMarinerInGameScoreBoardTeam");
static_assert(sizeof(UMarinerInGameScoreBoardTeam) == 0x000250, "Wrong size on UMarinerInGameScoreBoardTeam");
static_assert(offsetof(UMarinerInGameScoreBoardTeam, Bound_WidgetContainer) == 0x000230, "Member 'UMarinerInGameScoreBoardTeam::Bound_WidgetContainer' has a wrong offset!");
static_assert(offsetof(UMarinerInGameScoreBoardTeam, Bound_RocketBots) == 0x000238, "Member 'UMarinerInGameScoreBoardTeam::Bound_RocketBots' has a wrong offset!");
static_assert(offsetof(UMarinerInGameScoreBoardTeam, PlayerStates) == 0x000240, "Member 'UMarinerInGameScoreBoardTeam::PlayerStates' has a wrong offset!");

// Class Mariner.MarinerContentGrid
// 0x00C0 (0x0370 - 0x02B0)
class UMarinerContentGrid : public UMarinerUserWidget
{
public:
	class UTextBlock*                             Bound_TextBlockHeader;                             // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerGridPanel*                      Bound_GridPanel;                                   // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USizeBox*                               Bound_SizeBoxHeader;                               // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerEmptyItem>          EmptyItemSubclass;                                 // 0x02C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerLayeredButton*                  LayeredButtonTemplate;                             // 0x02D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UItemLoadResponse* Item, bool bRanked)> OnItemAddedToGridHandle;                           // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate)
	TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UMarinerPlayableCharacter* Character)> OnCharacterAddedToGridHandle;                      // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate)
	TSubclassOf<class UMarinerLayeredButton>      ContentItemSubclass;                               // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_17C0[0x18];                                    // 0x0300(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class UGridSlot*>         HighlightGridSlotReferenceMap;                     // 0x0318(0x0050)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_17C1[0x8];                                     // 0x0368(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMarinerLayeredButton* GetHighlightedItem();
	class UMarinerLayeredButton* HighlightItem(const class FString& LookupId);
	void InitCharacterContentGrid(const TArray<class UMarinerPlayableCharacter*>& LoadedItems, TSubclassOf<class UMarinerLayeredButton> LayeredButtonSubclass, TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UMarinerPlayableCharacter* Character)> OnCharacterAddedToGrid, const class FText& Header, int32 InNumColumns, bool bFillEmpty, EMarinerContentGridType InContentType);
	void InitEmptyContentGrid(int32 InNumColumns, int32 InNumRow, float InEmptyItemWidth, float InEmptyItemHeight);
	void InitItemsContentGrid(const TArray<class UItemLoadResponse*>& LoadedItems, TSubclassOf<class UMarinerLayeredButton> LayeredButtonSubclass, TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UItemLoadResponse* Item, bool bRanked)> OnItemAddedToGrid, const class FText& Header, int32 InNumColumns, bool bFillEmpty);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerContentGrid">();
	}
	static class UMarinerContentGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerContentGrid>();
	}
};
static_assert(alignof(UMarinerContentGrid) == 0x000008, "Wrong alignment on UMarinerContentGrid");
static_assert(sizeof(UMarinerContentGrid) == 0x000370, "Wrong size on UMarinerContentGrid");
static_assert(offsetof(UMarinerContentGrid, Bound_TextBlockHeader) == 0x0002B0, "Member 'UMarinerContentGrid::Bound_TextBlockHeader' has a wrong offset!");
static_assert(offsetof(UMarinerContentGrid, Bound_GridPanel) == 0x0002B8, "Member 'UMarinerContentGrid::Bound_GridPanel' has a wrong offset!");
static_assert(offsetof(UMarinerContentGrid, Bound_SizeBoxHeader) == 0x0002C0, "Member 'UMarinerContentGrid::Bound_SizeBoxHeader' has a wrong offset!");
static_assert(offsetof(UMarinerContentGrid, EmptyItemSubclass) == 0x0002C8, "Member 'UMarinerContentGrid::EmptyItemSubclass' has a wrong offset!");
static_assert(offsetof(UMarinerContentGrid, LayeredButtonTemplate) == 0x0002D0, "Member 'UMarinerContentGrid::LayeredButtonTemplate' has a wrong offset!");
static_assert(offsetof(UMarinerContentGrid, OnItemAddedToGridHandle) == 0x0002D8, "Member 'UMarinerContentGrid::OnItemAddedToGridHandle' has a wrong offset!");
static_assert(offsetof(UMarinerContentGrid, OnCharacterAddedToGridHandle) == 0x0002E8, "Member 'UMarinerContentGrid::OnCharacterAddedToGridHandle' has a wrong offset!");
static_assert(offsetof(UMarinerContentGrid, ContentItemSubclass) == 0x0002F8, "Member 'UMarinerContentGrid::ContentItemSubclass' has a wrong offset!");
static_assert(offsetof(UMarinerContentGrid, HighlightGridSlotReferenceMap) == 0x000318, "Member 'UMarinerContentGrid::HighlightGridSlotReferenceMap' has a wrong offset!");

// Class Mariner.MarinerCosmeticReactiveProp
// 0x0008 (0x0238 - 0x0230)
class AMarinerCosmeticReactiveProp : public AMarinerStaticMeshActor
{
public:
	float                                         DamageReactionThreshold;                           // 0x0230(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17C4[0x4];                                     // 0x0234(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ReactToDamage(const struct FVector& DamageOrigin, const struct FVector& DamageDirection);
	void ReplicateDamageReaction(const struct FVector& DamageOrigin, const struct FVector_NetQuantizeNormal& DamageDirection);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCosmeticReactiveProp">();
	}
	static class AMarinerCosmeticReactiveProp* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerCosmeticReactiveProp>();
	}
};
static_assert(alignof(AMarinerCosmeticReactiveProp) == 0x000008, "Wrong alignment on AMarinerCosmeticReactiveProp");
static_assert(sizeof(AMarinerCosmeticReactiveProp) == 0x000238, "Wrong size on AMarinerCosmeticReactiveProp");
static_assert(offsetof(AMarinerCosmeticReactiveProp, DamageReactionThreshold) == 0x000230, "Member 'AMarinerCosmeticReactiveProp::DamageReactionThreshold' has a wrong offset!");

// Class Mariner.MarinerCreditsData
// 0x00A0 (0x00D0 - 0x0030)
class UMarinerCreditsData final : public UDataAsset
{
public:
	float                                         ScrollSpeed;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17C5[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            StartingLogo;                                      // 0x0038(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMarinerCreditGroup>            CreditGroups;                                      // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCreditsData">();
	}
	static class UMarinerCreditsData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCreditsData>();
	}
};
static_assert(alignof(UMarinerCreditsData) == 0x000008, "Wrong alignment on UMarinerCreditsData");
static_assert(sizeof(UMarinerCreditsData) == 0x0000D0, "Wrong size on UMarinerCreditsData");
static_assert(offsetof(UMarinerCreditsData, ScrollSpeed) == 0x000030, "Member 'UMarinerCreditsData::ScrollSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerCreditsData, StartingLogo) == 0x000038, "Member 'UMarinerCreditsData::StartingLogo' has a wrong offset!");
static_assert(offsetof(UMarinerCreditsData, CreditGroups) == 0x0000C0, "Member 'UMarinerCreditsData::CreditGroups' has a wrong offset!");

// Class Mariner.MarinerCueNotify_FireAndForgetCharacterEffect
// 0x0050 (0x00A0 - 0x0050)
class UMarinerCueNotify_FireAndForgetCharacterEffect : public UGameplayCueNotify_Static
{
public:
	struct FMarinerGameplayCueCharacterEffectData EffectData;                                        // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCueNotify_FireAndForgetCharacterEffect">();
	}
	static class UMarinerCueNotify_FireAndForgetCharacterEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCueNotify_FireAndForgetCharacterEffect>();
	}
};
static_assert(alignof(UMarinerCueNotify_FireAndForgetCharacterEffect) == 0x000008, "Wrong alignment on UMarinerCueNotify_FireAndForgetCharacterEffect");
static_assert(sizeof(UMarinerCueNotify_FireAndForgetCharacterEffect) == 0x0000A0, "Wrong size on UMarinerCueNotify_FireAndForgetCharacterEffect");
static_assert(offsetof(UMarinerCueNotify_FireAndForgetCharacterEffect, EffectData) == 0x000050, "Member 'UMarinerCueNotify_FireAndForgetCharacterEffect::EffectData' has a wrong offset!");

// Class Mariner.MarinerEmoteCategoryButton
// 0x0040 (0x2FB8 - 0x2F78)
class UMarinerEmoteCategoryButton : public UMarinerLayeredButton
{
public:
	EMangoItemType                                EmotesCategory;                                    // 0x2F78(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17C6[0x7];                                     // 0x2F79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   EmotesName;                                        // 0x2F80(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	class FText                                   EmotesDescription;                                 // 0x2F98(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	int32                                         NumSlots;                                          // 0x2FB0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17C7[0x4];                                     // 0x2FB4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerEmoteCategoryButton">();
	}
	static class UMarinerEmoteCategoryButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerEmoteCategoryButton>();
	}
};
static_assert(alignof(UMarinerEmoteCategoryButton) == 0x000008, "Wrong alignment on UMarinerEmoteCategoryButton");
static_assert(sizeof(UMarinerEmoteCategoryButton) == 0x002FB8, "Wrong size on UMarinerEmoteCategoryButton");
static_assert(offsetof(UMarinerEmoteCategoryButton, EmotesCategory) == 0x002F78, "Member 'UMarinerEmoteCategoryButton::EmotesCategory' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteCategoryButton, EmotesName) == 0x002F80, "Member 'UMarinerEmoteCategoryButton::EmotesName' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteCategoryButton, EmotesDescription) == 0x002F98, "Member 'UMarinerEmoteCategoryButton::EmotesDescription' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteCategoryButton, NumSlots) == 0x002FB0, "Member 'UMarinerEmoteCategoryButton::NumSlots' has a wrong offset!");

// Class Mariner.MarinerSkinnableCueNotify_Static
// 0x0008 (0x0058 - 0x0050)
class UMarinerSkinnableCueNotify_Static : public UGameplayCueNotify_Static
{
public:
	class UMarinerCueSkinData_Base*               SkinData;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSkinnableCueNotify_Static">();
	}
	static class UMarinerSkinnableCueNotify_Static* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSkinnableCueNotify_Static>();
	}
};
static_assert(alignof(UMarinerSkinnableCueNotify_Static) == 0x000008, "Wrong alignment on UMarinerSkinnableCueNotify_Static");
static_assert(sizeof(UMarinerSkinnableCueNotify_Static) == 0x000058, "Wrong size on UMarinerSkinnableCueNotify_Static");
static_assert(offsetof(UMarinerSkinnableCueNotify_Static, SkinData) == 0x000050, "Member 'UMarinerSkinnableCueNotify_Static::SkinData' has a wrong offset!");

// Class Mariner.MarinerCueNotify_FireAndForgetEffect
// 0x0028 (0x0080 - 0x0058)
class UMarinerCueNotify_FireAndForgetEffect : public UMarinerSkinnableCueNotify_Static
{
public:
	struct FMarinerGameplayCueEffectData          EffectData;                                        // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCueNotify_FireAndForgetEffect">();
	}
	static class UMarinerCueNotify_FireAndForgetEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCueNotify_FireAndForgetEffect>();
	}
};
static_assert(alignof(UMarinerCueNotify_FireAndForgetEffect) == 0x000008, "Wrong alignment on UMarinerCueNotify_FireAndForgetEffect");
static_assert(sizeof(UMarinerCueNotify_FireAndForgetEffect) == 0x000080, "Wrong size on UMarinerCueNotify_FireAndForgetEffect");
static_assert(offsetof(UMarinerCueNotify_FireAndForgetEffect, EffectData) == 0x000058, "Member 'UMarinerCueNotify_FireAndForgetEffect::EffectData' has a wrong offset!");

// Class Mariner.MarinerInGamePauseMenu
// 0x01D8 (0x06B8 - 0x04E0)
class UMarinerInGamePauseMenu : public UMarinerMenu
{
public:
	class UMarinerPromptBanner*                   Bound_MuteMenuPrompt;                              // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerVerticalBox*                    Bound_VerticalBoxSettings;                         // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerVerticalBox*                    Bound_VerticalBoxMute;                             // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerButton*                         Bound_ButtonMute;                                  // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerButton*                         Bound_Retry;                                       // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerButton*                         Bound_QuitMatch;                                   // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerButton*                         Bound_EndMatch;                                    // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerButton*                         Bound_Resume;                                      // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerMessageBoxData                 EndMatchConfirmDialog;                             // 0x0520(0x0170)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FText                                   QuitMatchButtonText;                               // 0x0690(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C8[0x10];                                    // 0x06A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndMatchConfirm(const struct FKey& KeyPressed);
	void HandleQuitMatchButton(int32 TeamIndex);
	void OnEndMatch();
	void OnResume();
	void OnRetry();
	void ToggleMutePlayersMenu();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerInGamePauseMenu">();
	}
	static class UMarinerInGamePauseMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerInGamePauseMenu>();
	}
};
static_assert(alignof(UMarinerInGamePauseMenu) == 0x000008, "Wrong alignment on UMarinerInGamePauseMenu");
static_assert(sizeof(UMarinerInGamePauseMenu) == 0x0006B8, "Wrong size on UMarinerInGamePauseMenu");
static_assert(offsetof(UMarinerInGamePauseMenu, Bound_MuteMenuPrompt) == 0x0004E0, "Member 'UMarinerInGamePauseMenu::Bound_MuteMenuPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerInGamePauseMenu, Bound_VerticalBoxSettings) == 0x0004E8, "Member 'UMarinerInGamePauseMenu::Bound_VerticalBoxSettings' has a wrong offset!");
static_assert(offsetof(UMarinerInGamePauseMenu, Bound_VerticalBoxMute) == 0x0004F0, "Member 'UMarinerInGamePauseMenu::Bound_VerticalBoxMute' has a wrong offset!");
static_assert(offsetof(UMarinerInGamePauseMenu, Bound_ButtonMute) == 0x0004F8, "Member 'UMarinerInGamePauseMenu::Bound_ButtonMute' has a wrong offset!");
static_assert(offsetof(UMarinerInGamePauseMenu, Bound_Retry) == 0x000500, "Member 'UMarinerInGamePauseMenu::Bound_Retry' has a wrong offset!");
static_assert(offsetof(UMarinerInGamePauseMenu, Bound_QuitMatch) == 0x000508, "Member 'UMarinerInGamePauseMenu::Bound_QuitMatch' has a wrong offset!");
static_assert(offsetof(UMarinerInGamePauseMenu, Bound_EndMatch) == 0x000510, "Member 'UMarinerInGamePauseMenu::Bound_EndMatch' has a wrong offset!");
static_assert(offsetof(UMarinerInGamePauseMenu, Bound_Resume) == 0x000518, "Member 'UMarinerInGamePauseMenu::Bound_Resume' has a wrong offset!");
static_assert(offsetof(UMarinerInGamePauseMenu, EndMatchConfirmDialog) == 0x000520, "Member 'UMarinerInGamePauseMenu::EndMatchConfirmDialog' has a wrong offset!");
static_assert(offsetof(UMarinerInGamePauseMenu, QuitMatchButtonText) == 0x000690, "Member 'UMarinerInGamePauseMenu::QuitMatchButtonText' has a wrong offset!");

// Class Mariner.MarinerCueNotify_FireAndForgetItemWidget
// 0x00A0 (0x00F0 - 0x0050)
class UMarinerCueNotify_FireAndForgetItemWidget : public UGameplayCueNotify_Static
{
public:
	TSubclassOf<class UMarinerActiveItemWidget>   WidgetToShow;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                            IconToShow;                                        // 0x0058(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            SourceGameplayEffect;                              // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTriggerOnActive;                                  // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTriggerOnExecute;                                 // 0x00E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17C9[0x6];                                     // 0x00EA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCueNotify_FireAndForgetItemWidget">();
	}
	static class UMarinerCueNotify_FireAndForgetItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCueNotify_FireAndForgetItemWidget>();
	}
};
static_assert(alignof(UMarinerCueNotify_FireAndForgetItemWidget) == 0x000008, "Wrong alignment on UMarinerCueNotify_FireAndForgetItemWidget");
static_assert(sizeof(UMarinerCueNotify_FireAndForgetItemWidget) == 0x0000F0, "Wrong size on UMarinerCueNotify_FireAndForgetItemWidget");
static_assert(offsetof(UMarinerCueNotify_FireAndForgetItemWidget, WidgetToShow) == 0x000050, "Member 'UMarinerCueNotify_FireAndForgetItemWidget::WidgetToShow' has a wrong offset!");
static_assert(offsetof(UMarinerCueNotify_FireAndForgetItemWidget, IconToShow) == 0x000058, "Member 'UMarinerCueNotify_FireAndForgetItemWidget::IconToShow' has a wrong offset!");
static_assert(offsetof(UMarinerCueNotify_FireAndForgetItemWidget, SourceGameplayEffect) == 0x0000E0, "Member 'UMarinerCueNotify_FireAndForgetItemWidget::SourceGameplayEffect' has a wrong offset!");
static_assert(offsetof(UMarinerCueNotify_FireAndForgetItemWidget, bTriggerOnActive) == 0x0000E8, "Member 'UMarinerCueNotify_FireAndForgetItemWidget::bTriggerOnActive' has a wrong offset!");
static_assert(offsetof(UMarinerCueNotify_FireAndForgetItemWidget, bTriggerOnExecute) == 0x0000E9, "Member 'UMarinerCueNotify_FireAndForgetItemWidget::bTriggerOnExecute' has a wrong offset!");

// Class Mariner.MarinerCueNotify_ManagedCharacterEffectBase
// 0x0048 (0x02D0 - 0x0288)
class AMarinerCueNotify_ManagedCharacterEffectBase : public AGameplayCueNotify_Actor
{
public:
	class UForceFeedbackEffect*                   LoopingForceFeedback;                              // 0x0288(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UForceFeedbackEffect*                   ForceFeedbackOnEnd;                                // 0x0290(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17CA[0x38];                                    // 0x0298(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class AEmitterCameraLensEffectBase* GetSpawnedCameraEffect();
	class AMarinerCharacter* GetTargetCharacter();
	int32 PostAkEvent(class UAkAudioEvent* AudioEvent);

	bool HasTargetCharacter() const;
	bool IsFirstPerson() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCueNotify_ManagedCharacterEffectBase">();
	}
	static class AMarinerCueNotify_ManagedCharacterEffectBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerCueNotify_ManagedCharacterEffectBase>();
	}
};
static_assert(alignof(AMarinerCueNotify_ManagedCharacterEffectBase) == 0x000008, "Wrong alignment on AMarinerCueNotify_ManagedCharacterEffectBase");
static_assert(sizeof(AMarinerCueNotify_ManagedCharacterEffectBase) == 0x0002D0, "Wrong size on AMarinerCueNotify_ManagedCharacterEffectBase");
static_assert(offsetof(AMarinerCueNotify_ManagedCharacterEffectBase, LoopingForceFeedback) == 0x000288, "Member 'AMarinerCueNotify_ManagedCharacterEffectBase::LoopingForceFeedback' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedCharacterEffectBase, ForceFeedbackOnEnd) == 0x000290, "Member 'AMarinerCueNotify_ManagedCharacterEffectBase::ForceFeedbackOnEnd' has a wrong offset!");

// Class Mariner.MarinerInputOverlay
// 0x0730 (0x0960 - 0x0230)
class UMarinerInputOverlay : public UUserWidget
{
public:
	UMulticastInlineDelegateProperty_             OnInputTypeChanged;                                // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnInputBindingsChanged;                            // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnComboBoxOutOfScope;                              // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UInputOverlayPanel*                     ChildCanvas;                                       // 0x0260(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnalogInputInitialDelay;                           // 0x0268(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnalogInputRate;                                   // 0x026C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 GamepadDisconnectedPC;                             // 0x0270(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 GamepadDisconnectedPS4;                            // 0x03E0(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 GamepadDisconnectedConsoles;                       // 0x0550(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 GamepadDisconnectedXboxWithActiveGamepads;         // 0x06C0(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_17CC[0x18];                                    // 0x0830(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerInteractableManager*            InteractableManager;                               // 0x0848(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_17CD[0x110];                                   // 0x0850(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAnalogNavigation(EMarinerInputActions InAction, bool bIsRepeat);

	EPlayerInputType GetActiveInputType() const;
	EPlayerInputType GetLastActiveGamepadType() const;
	bool IsGamepadConnected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerInputOverlay">();
	}
	static class UMarinerInputOverlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerInputOverlay>();
	}
};
static_assert(alignof(UMarinerInputOverlay) == 0x000008, "Wrong alignment on UMarinerInputOverlay");
static_assert(sizeof(UMarinerInputOverlay) == 0x000960, "Wrong size on UMarinerInputOverlay");
static_assert(offsetof(UMarinerInputOverlay, OnInputTypeChanged) == 0x000230, "Member 'UMarinerInputOverlay::OnInputTypeChanged' has a wrong offset!");
static_assert(offsetof(UMarinerInputOverlay, OnInputBindingsChanged) == 0x000240, "Member 'UMarinerInputOverlay::OnInputBindingsChanged' has a wrong offset!");
static_assert(offsetof(UMarinerInputOverlay, OnComboBoxOutOfScope) == 0x000250, "Member 'UMarinerInputOverlay::OnComboBoxOutOfScope' has a wrong offset!");
static_assert(offsetof(UMarinerInputOverlay, ChildCanvas) == 0x000260, "Member 'UMarinerInputOverlay::ChildCanvas' has a wrong offset!");
static_assert(offsetof(UMarinerInputOverlay, AnalogInputInitialDelay) == 0x000268, "Member 'UMarinerInputOverlay::AnalogInputInitialDelay' has a wrong offset!");
static_assert(offsetof(UMarinerInputOverlay, AnalogInputRate) == 0x00026C, "Member 'UMarinerInputOverlay::AnalogInputRate' has a wrong offset!");
static_assert(offsetof(UMarinerInputOverlay, GamepadDisconnectedPC) == 0x000270, "Member 'UMarinerInputOverlay::GamepadDisconnectedPC' has a wrong offset!");
static_assert(offsetof(UMarinerInputOverlay, GamepadDisconnectedPS4) == 0x0003E0, "Member 'UMarinerInputOverlay::GamepadDisconnectedPS4' has a wrong offset!");
static_assert(offsetof(UMarinerInputOverlay, GamepadDisconnectedConsoles) == 0x000550, "Member 'UMarinerInputOverlay::GamepadDisconnectedConsoles' has a wrong offset!");
static_assert(offsetof(UMarinerInputOverlay, GamepadDisconnectedXboxWithActiveGamepads) == 0x0006C0, "Member 'UMarinerInputOverlay::GamepadDisconnectedXboxWithActiveGamepads' has a wrong offset!");
static_assert(offsetof(UMarinerInputOverlay, InteractableManager) == 0x000848, "Member 'UMarinerInputOverlay::InteractableManager' has a wrong offset!");

// Class Mariner.MarinerCueNotify_ManagedCharacterEffect
// 0x0060 (0x0330 - 0x02D0)
class AMarinerCueNotify_ManagedCharacterEffect : public AMarinerCueNotify_ManagedCharacterEffectBase
{
public:
	struct FMarinerGameplayCueCharacterEffectData EffectData;                                        // 0x02D0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ThirdPersonRemovalAudioEvent;                      // 0x0320(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          FirstPersonRemovalAudioEvent;                      // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCueNotify_ManagedCharacterEffect">();
	}
	static class AMarinerCueNotify_ManagedCharacterEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerCueNotify_ManagedCharacterEffect>();
	}
};
static_assert(alignof(AMarinerCueNotify_ManagedCharacterEffect) == 0x000008, "Wrong alignment on AMarinerCueNotify_ManagedCharacterEffect");
static_assert(sizeof(AMarinerCueNotify_ManagedCharacterEffect) == 0x000330, "Wrong size on AMarinerCueNotify_ManagedCharacterEffect");
static_assert(offsetof(AMarinerCueNotify_ManagedCharacterEffect, EffectData) == 0x0002D0, "Member 'AMarinerCueNotify_ManagedCharacterEffect::EffectData' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedCharacterEffect, ThirdPersonRemovalAudioEvent) == 0x000320, "Member 'AMarinerCueNotify_ManagedCharacterEffect::ThirdPersonRemovalAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedCharacterEffect, FirstPersonRemovalAudioEvent) == 0x000328, "Member 'AMarinerCueNotify_ManagedCharacterEffect::FirstPersonRemovalAudioEvent' has a wrong offset!");

// Class Mariner.MarinerCueNotify_ManagedCharacterEffectSequence
// 0x00D0 (0x03A0 - 0x02D0)
class AMarinerCueNotify_ManagedCharacterEffectSequence : public AMarinerCueNotify_ManagedCharacterEffectBase
{
public:
	bool                                          DeactivateCameraEffectOnRemove;                    // 0x02D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17CE[0x7];                                     // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerGameplayCueCharacterEffectData InEffectData;                                      // 0x02D8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerGameplayCueCharacterEffectDataBase LoopEffectData;                                    // 0x0328(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerGameplayCueCharacterEffectDataBase OutEffectData;                                     // 0x0358(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_17CF[0x18];                                    // 0x0388(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnParticleInFinished(class UParticleSystemComponent* FinishedComponent);
	void OnParticleOutFinished(class UParticleSystemComponent* FinishedComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCueNotify_ManagedCharacterEffectSequence">();
	}
	static class AMarinerCueNotify_ManagedCharacterEffectSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerCueNotify_ManagedCharacterEffectSequence>();
	}
};
static_assert(alignof(AMarinerCueNotify_ManagedCharacterEffectSequence) == 0x000008, "Wrong alignment on AMarinerCueNotify_ManagedCharacterEffectSequence");
static_assert(sizeof(AMarinerCueNotify_ManagedCharacterEffectSequence) == 0x0003A0, "Wrong size on AMarinerCueNotify_ManagedCharacterEffectSequence");
static_assert(offsetof(AMarinerCueNotify_ManagedCharacterEffectSequence, DeactivateCameraEffectOnRemove) == 0x0002D0, "Member 'AMarinerCueNotify_ManagedCharacterEffectSequence::DeactivateCameraEffectOnRemove' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedCharacterEffectSequence, InEffectData) == 0x0002D8, "Member 'AMarinerCueNotify_ManagedCharacterEffectSequence::InEffectData' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedCharacterEffectSequence, LoopEffectData) == 0x000328, "Member 'AMarinerCueNotify_ManagedCharacterEffectSequence::LoopEffectData' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedCharacterEffectSequence, OutEffectData) == 0x000358, "Member 'AMarinerCueNotify_ManagedCharacterEffectSequence::OutEffectData' has a wrong offset!");

// Class Mariner.MarinerCueNotify_ManagedEffect
// 0x0048 (0x02D0 - 0x0288)
class AMarinerCueNotify_ManagedEffect final : public AGameplayCueNotify_Actor
{
public:
	struct FMarinerGameplayCueEffectData          EffectData;                                        // 0x0288(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          RemovalAudioEvent;                                 // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17D0[0x18];                                    // 0x02B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCueNotify_ManagedEffect">();
	}
	static class AMarinerCueNotify_ManagedEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerCueNotify_ManagedEffect>();
	}
};
static_assert(alignof(AMarinerCueNotify_ManagedEffect) == 0x000008, "Wrong alignment on AMarinerCueNotify_ManagedEffect");
static_assert(sizeof(AMarinerCueNotify_ManagedEffect) == 0x0002D0, "Wrong size on AMarinerCueNotify_ManagedEffect");
static_assert(offsetof(AMarinerCueNotify_ManagedEffect, EffectData) == 0x000288, "Member 'AMarinerCueNotify_ManagedEffect::EffectData' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedEffect, RemovalAudioEvent) == 0x0002B0, "Member 'AMarinerCueNotify_ManagedEffect::RemovalAudioEvent' has a wrong offset!");

// Class Mariner.MarinerCueNotify_ManagedEffectSequence
// 0x0150 (0x03D8 - 0x0288)
class AMarinerCueNotify_ManagedEffectSequence : public AGameplayCueNotify_Actor
{
public:
	struct FMarinerGameplayCueEffectData          InEffectData;                                      // 0x0288(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerGameplayCueEffectData          LoopEffectData;                                    // 0x02B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerGameplayCueEffectData          OutEffectData;                                     // 0x02D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_17D1[0xD8];                                    // 0x0300(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnParticleInFinished(class UParticleSystemComponent* FinishedComponent);
	void OnParticleOutFinished(class UParticleSystemComponent* FinishedComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCueNotify_ManagedEffectSequence">();
	}
	static class AMarinerCueNotify_ManagedEffectSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerCueNotify_ManagedEffectSequence>();
	}
};
static_assert(alignof(AMarinerCueNotify_ManagedEffectSequence) == 0x000008, "Wrong alignment on AMarinerCueNotify_ManagedEffectSequence");
static_assert(sizeof(AMarinerCueNotify_ManagedEffectSequence) == 0x0003D8, "Wrong size on AMarinerCueNotify_ManagedEffectSequence");
static_assert(offsetof(AMarinerCueNotify_ManagedEffectSequence, InEffectData) == 0x000288, "Member 'AMarinerCueNotify_ManagedEffectSequence::InEffectData' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedEffectSequence, LoopEffectData) == 0x0002B0, "Member 'AMarinerCueNotify_ManagedEffectSequence::LoopEffectData' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedEffectSequence, OutEffectData) == 0x0002D8, "Member 'AMarinerCueNotify_ManagedEffectSequence::OutEffectData' has a wrong offset!");

// Class Mariner.MarinerIDTag
// 0x0000 (0x0028 - 0x0028)
class UMarinerIDTag : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerIDTag">();
	}
	static class UMarinerIDTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerIDTag>();
	}
};
static_assert(alignof(UMarinerIDTag) == 0x000008, "Wrong alignment on UMarinerIDTag");
static_assert(sizeof(UMarinerIDTag) == 0x000028, "Wrong size on UMarinerIDTag");

// Class Mariner.MarinerCueNotify_ManagedItemWidget
// 0x00A0 (0x0328 - 0x0288)
class AMarinerCueNotify_ManagedItemWidget : public AGameplayCueNotify_Actor
{
public:
	TSubclassOf<class UMarinerActiveItemWidget>   WidgetToShow;                                      // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                            IconToShow;                                        // 0x0290(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            SourceGameplayEffect;                              // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17D2[0x8];                                     // 0x0320(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCueNotify_ManagedItemWidget">();
	}
	static class AMarinerCueNotify_ManagedItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerCueNotify_ManagedItemWidget>();
	}
};
static_assert(alignof(AMarinerCueNotify_ManagedItemWidget) == 0x000008, "Wrong alignment on AMarinerCueNotify_ManagedItemWidget");
static_assert(sizeof(AMarinerCueNotify_ManagedItemWidget) == 0x000328, "Wrong size on AMarinerCueNotify_ManagedItemWidget");
static_assert(offsetof(AMarinerCueNotify_ManagedItemWidget, WidgetToShow) == 0x000288, "Member 'AMarinerCueNotify_ManagedItemWidget::WidgetToShow' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedItemWidget, IconToShow) == 0x000290, "Member 'AMarinerCueNotify_ManagedItemWidget::IconToShow' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedItemWidget, SourceGameplayEffect) == 0x000318, "Member 'AMarinerCueNotify_ManagedItemWidget::SourceGameplayEffect' has a wrong offset!");

// Class Mariner.MarinerCueNotify_ManagedWeaponEffect
// 0x0080 (0x0308 - 0x0288)
class AMarinerCueNotify_ManagedWeaponEffect : public AGameplayCueNotify_Actor
{
public:
	bool                                          bStopAudioOnRemoval;                               // 0x0288(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D3[0x7];                                     // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerWeaponMontage*                  WeaponAnimation;                                   // 0x0290(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          Sound;                                             // 0x0298(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        MuzzleFX;                                          // 0x02A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        ThirdPersonMuzzleFX;                               // 0x02A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseThirdPersonMuzzleFX;                           // 0x02B0(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17D4[0x3];                                     // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MuzzleFXScale;                                     // 0x02B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   MuzzleAttachPoint;                                 // 0x02B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCameraShake>               CameraShake;                                       // 0x02C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TScriptInterface<class IBlendableInterface>   PostProcessMaterial;                               // 0x02C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	float                                         PostProcessBlendableWeight;                        // 0x02D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17D5[0x4];                                     // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   ForceFeedback;                                     // 0x02E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UForceFeedbackEffect*                   ForceFeedbackLoop;                                 // 0x02E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UForceFeedbackEffect*                   ForceFeedbackEnd;                                  // 0x02F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UMarinerParticleSystemComponent> SpawnedParticleSystem;                             // 0x02F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17D6[0x8];                                     // 0x0300(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCueNotify_ManagedWeaponEffect">();
	}
	static class AMarinerCueNotify_ManagedWeaponEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerCueNotify_ManagedWeaponEffect>();
	}
};
static_assert(alignof(AMarinerCueNotify_ManagedWeaponEffect) == 0x000008, "Wrong alignment on AMarinerCueNotify_ManagedWeaponEffect");
static_assert(sizeof(AMarinerCueNotify_ManagedWeaponEffect) == 0x000308, "Wrong size on AMarinerCueNotify_ManagedWeaponEffect");
static_assert(offsetof(AMarinerCueNotify_ManagedWeaponEffect, bStopAudioOnRemoval) == 0x000288, "Member 'AMarinerCueNotify_ManagedWeaponEffect::bStopAudioOnRemoval' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedWeaponEffect, WeaponAnimation) == 0x000290, "Member 'AMarinerCueNotify_ManagedWeaponEffect::WeaponAnimation' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedWeaponEffect, Sound) == 0x000298, "Member 'AMarinerCueNotify_ManagedWeaponEffect::Sound' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedWeaponEffect, MuzzleFX) == 0x0002A0, "Member 'AMarinerCueNotify_ManagedWeaponEffect::MuzzleFX' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedWeaponEffect, ThirdPersonMuzzleFX) == 0x0002A8, "Member 'AMarinerCueNotify_ManagedWeaponEffect::ThirdPersonMuzzleFX' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedWeaponEffect, bUseThirdPersonMuzzleFX) == 0x0002B0, "Member 'AMarinerCueNotify_ManagedWeaponEffect::bUseThirdPersonMuzzleFX' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedWeaponEffect, MuzzleFXScale) == 0x0002B4, "Member 'AMarinerCueNotify_ManagedWeaponEffect::MuzzleFXScale' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedWeaponEffect, MuzzleAttachPoint) == 0x0002B8, "Member 'AMarinerCueNotify_ManagedWeaponEffect::MuzzleAttachPoint' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedWeaponEffect, CameraShake) == 0x0002C0, "Member 'AMarinerCueNotify_ManagedWeaponEffect::CameraShake' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedWeaponEffect, PostProcessMaterial) == 0x0002C8, "Member 'AMarinerCueNotify_ManagedWeaponEffect::PostProcessMaterial' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedWeaponEffect, PostProcessBlendableWeight) == 0x0002D8, "Member 'AMarinerCueNotify_ManagedWeaponEffect::PostProcessBlendableWeight' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedWeaponEffect, ForceFeedback) == 0x0002E0, "Member 'AMarinerCueNotify_ManagedWeaponEffect::ForceFeedback' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedWeaponEffect, ForceFeedbackLoop) == 0x0002E8, "Member 'AMarinerCueNotify_ManagedWeaponEffect::ForceFeedbackLoop' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedWeaponEffect, ForceFeedbackEnd) == 0x0002F0, "Member 'AMarinerCueNotify_ManagedWeaponEffect::ForceFeedbackEnd' has a wrong offset!");
static_assert(offsetof(AMarinerCueNotify_ManagedWeaponEffect, SpawnedParticleSystem) == 0x0002F8, "Member 'AMarinerCueNotify_ManagedWeaponEffect::SpawnedParticleSystem' has a wrong offset!");

// Class Mariner.MarinerCueNotify_WeaponEffect
// 0x0070 (0x00C8 - 0x0058)
class UMarinerCueNotify_WeaponEffect : public UMarinerSkinnableCueNotify_Static
{
public:
	class UMarinerWeaponMontage*                  WeaponAnimation;                                   // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  AnimationBlockedTags;                              // 0x0060(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          Sound;                                             // 0x0080(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        MuzzleFX;                                          // 0x0088(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        ThirdPersonMuzzleFX;                               // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseThirdPersonMuzzleFX;                           // 0x0098(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17D7[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MuzzleFXScale;                                     // 0x009C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   MuzzleAttachPoint;                                 // 0x00A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCameraShake>               CameraShake;                                       // 0x00A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNewShakeOverridesOldShake;                        // 0x00B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17D8[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   ForceFeedback;                                     // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17D9[0x8];                                     // 0x00C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCueNotify_WeaponEffect">();
	}
	static class UMarinerCueNotify_WeaponEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCueNotify_WeaponEffect>();
	}
};
static_assert(alignof(UMarinerCueNotify_WeaponEffect) == 0x000008, "Wrong alignment on UMarinerCueNotify_WeaponEffect");
static_assert(sizeof(UMarinerCueNotify_WeaponEffect) == 0x0000C8, "Wrong size on UMarinerCueNotify_WeaponEffect");
static_assert(offsetof(UMarinerCueNotify_WeaponEffect, WeaponAnimation) == 0x000058, "Member 'UMarinerCueNotify_WeaponEffect::WeaponAnimation' has a wrong offset!");
static_assert(offsetof(UMarinerCueNotify_WeaponEffect, AnimationBlockedTags) == 0x000060, "Member 'UMarinerCueNotify_WeaponEffect::AnimationBlockedTags' has a wrong offset!");
static_assert(offsetof(UMarinerCueNotify_WeaponEffect, Sound) == 0x000080, "Member 'UMarinerCueNotify_WeaponEffect::Sound' has a wrong offset!");
static_assert(offsetof(UMarinerCueNotify_WeaponEffect, MuzzleFX) == 0x000088, "Member 'UMarinerCueNotify_WeaponEffect::MuzzleFX' has a wrong offset!");
static_assert(offsetof(UMarinerCueNotify_WeaponEffect, ThirdPersonMuzzleFX) == 0x000090, "Member 'UMarinerCueNotify_WeaponEffect::ThirdPersonMuzzleFX' has a wrong offset!");
static_assert(offsetof(UMarinerCueNotify_WeaponEffect, bUseThirdPersonMuzzleFX) == 0x000098, "Member 'UMarinerCueNotify_WeaponEffect::bUseThirdPersonMuzzleFX' has a wrong offset!");
static_assert(offsetof(UMarinerCueNotify_WeaponEffect, MuzzleFXScale) == 0x00009C, "Member 'UMarinerCueNotify_WeaponEffect::MuzzleFXScale' has a wrong offset!");
static_assert(offsetof(UMarinerCueNotify_WeaponEffect, MuzzleAttachPoint) == 0x0000A0, "Member 'UMarinerCueNotify_WeaponEffect::MuzzleAttachPoint' has a wrong offset!");
static_assert(offsetof(UMarinerCueNotify_WeaponEffect, CameraShake) == 0x0000A8, "Member 'UMarinerCueNotify_WeaponEffect::CameraShake' has a wrong offset!");
static_assert(offsetof(UMarinerCueNotify_WeaponEffect, bNewShakeOverridesOldShake) == 0x0000B0, "Member 'UMarinerCueNotify_WeaponEffect::bNewShakeOverridesOldShake' has a wrong offset!");
static_assert(offsetof(UMarinerCueNotify_WeaponEffect, ForceFeedback) == 0x0000B8, "Member 'UMarinerCueNotify_WeaponEffect::ForceFeedback' has a wrong offset!");

// Class Mariner.MarinerCueSkinData_Base
// 0x0000 (0x0030 - 0x0030)
class UMarinerCueSkinData_Base : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCueSkinData_Base">();
	}
	static class UMarinerCueSkinData_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCueSkinData_Base>();
	}
};
static_assert(alignof(UMarinerCueSkinData_Base) == 0x000008, "Wrong alignment on UMarinerCueSkinData_Base");
static_assert(sizeof(UMarinerCueSkinData_Base) == 0x000030, "Wrong size on UMarinerCueSkinData_Base");

// Class Mariner.MarinerItem
// 0x0398 (0x0620 - 0x0288)
class AMarinerItem : public AMarinerAbilitySystemProp
{
public:
	uint8                                         Pad_17DA[0x58];                                    // 0x0288(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviousHoldingCharacterInvulnerabilityDuration;   // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17DB[0xC];                                     // 0x02E4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnPickedUpEvent;                                   // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnDroppedEvent;                                    // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnEnabledFromPoolDelegate;                         // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnDisabledToPoolDelegate;                          // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bIsEnabledFromPool;                                // 0x0330(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17DC[0xF];                                     // 0x0331(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NonPriorityRecieveItemBufferDuration;              // 0x0340(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17DD[0x4];                                     // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           AkAudioComponent;                                  // 0x0348(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsPriorityItem;                                   // 0x0350(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanBePickedUp;                                    // 0x0351(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldDropWhenMegablasted;                        // 0x0352(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldCollideWithSplineFollowActors;              // 0x0353(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldUseItemPool;                                // 0x0354(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17DE[0x3];                                     // 0x0355(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityScale;                                      // 0x0358(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerItemOutliningPolicy                   OutliningPolicy;                                   // 0x035C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17DF[0x3];                                     // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ItemActivationUITexture;                           // 0x0360(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   ItemActivationUIText;                              // 0x0368(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   ItemActivationUIPrefixText;                        // 0x0380(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bIgnoresDroppingCharacterCollision;                // 0x0398(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17E0[0x7];                                     // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PriorityPickupActor;                               // 0x03A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                       PriorityPickupActorSphere;                         // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackHeldTime;                                    // 0x03B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17E1[0x3];                                     // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThrowResolutionPostHitDelay;                       // 0x03B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17E2[0x1];                                     // 0x03B8(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsItemRandomItem;                                 // 0x03B9(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17E3[0x6];                                     // 0x03BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          SpawnedBySpawnerAudioEvent;                        // 0x03C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        SpawnedBySpawnerEffect;                            // 0x03C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerFastBoundsCollision*            FastBoundsCollision;                               // 0x03D0(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          PickupAudioEvent;                                  // 0x03D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          PickupThirdPersonAudioEvent;                       // 0x03E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CarrySocketName;                                   // 0x03E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerItemCarryVisibility                   CarryVisibility;                                   // 0x03F0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17E4[0x3];                                     // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScaleWhenHeld;                                     // 0x03F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ScaleWhenNotHeld;                                  // 0x03F8(0x000C)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                RuntimeScaleWhenHeld;                              // 0x0404(0x000C)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanDashToPickUp;                                  // 0x0410(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17E5[0x3];                                     // 0x0411(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseDashToPickUpRange;                             // 0x0414(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerItemInteractionIcon            DashToPickUpIcon;                                  // 0x0418(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bCanBeStolen;                                      // 0x04B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17E6[0x7];                                     // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          StolenAudioEvent;                                  // 0x04B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerItemInteractionIcon            StealIcon;                                         // 0x04C0(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	EMarinerItemThrowingRule                      ThrowingRule;                                      // 0x0558(0x0001)(Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17E7[0x7];                                     // 0x0559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          ThrowAudioEvent;                                   // 0x0560(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BaseThrowSpeed;                                    // 0x0568(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCollideWithPawnsAfterThrowing;                    // 0x056C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17E8[0x3];                                     // 0x056D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PostThrowCollisionChangeTime;                      // 0x0570(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BasePassTargetingRange;                            // 0x0574(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BaseMinimumPassSpeed;                              // 0x0578(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BaseMaximumPassSpeed;                              // 0x057C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BasePassThrowRange;                                // 0x0580(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AMarinerCharacter>       PreviousHoldingCharacter;                          // 0x0584(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AMarinerCharacter>       HoldingCharacter;                                  // 0x058C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17E9[0x64];                                    // 0x0594(0x0064)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UGameplayAbility>>   ItemGameplayAbilities;                             // 0x05F8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerAbility>            GrantedAbilityType;                                // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerItemAttributes*                 ItemAttributes;                                    // 0x0610(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ItemUses;                                          // 0x0618(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDestroyOnUsedUp;                                  // 0x061C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanBeActivated;                                   // 0x061D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasBeenActivated;                                 // 0x061E(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTriggersArtifactEvents;                           // 0x061F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AuthorityExpendItemUse();
	void AuthorityOnItemDamaged(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void AuthorityOnItemHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void AuthorityOnThrowResolutionDelayTimer();
	void BP_DisabledToPool();
	void BP_EnabledFromPool();
	void BP_OnDropped(class AMarinerCharacter* CharacterDroppingItem);
	void BP_OnPickedUp(class AMarinerCharacter* CharacterHoldingItem);
	void DisableOrDestroy();
	const class FText GetItemActivationUIPrefixText();
	const class FText GetItemActivationUIText();
	class UTexture* GetItemActivationUITexture();
	void MulticastCreateSpawnedBySpawnerEffects();
	void OnHoldingCharacterMegablasted(const class UMarinerDamageableComponent* RelevantDamageableComponent, const class AMarinerPlayerState* MegablastInstigator, bool bEnteredState);
	void OnItemAbilityEnded(class UGameplayAbility* EndedAbility);
	void OnPostReleaseCollisionTimerExpired();
	void OnRep_HasBeenActivated();
	void OnRep_IsEnabledFromPool();
	void OnTakeDamage(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, class AController* DamageInstigator, class AActor* DamageSourceActor);
	void OnWillPickUp();
	void SetCanBePickedUp(bool bNewCanBePickedUp);
	void SetPriorityPickupActor(class AActor* NewPriorityPickupActor, class USphereComponent* OptionalSphereCollision);

	class UMarinerAbility* GetItemAbilityInstance() const;
	class AMarinerPlayerState* GetLastPlayerAffectingItemFromTeam(int32 InTeamIndex) const;
	bool IsEnabledFromPool() const;
	bool IsItemRandomSpawned() const;
	bool ShouldItemUsePool() const;
	bool ShouldUseThrowingRule() const;
	bool UsesItemAbility() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerItem">();
	}
	static class AMarinerItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerItem>();
	}
};
static_assert(alignof(AMarinerItem) == 0x000008, "Wrong alignment on AMarinerItem");
static_assert(sizeof(AMarinerItem) == 0x000620, "Wrong size on AMarinerItem");
static_assert(offsetof(AMarinerItem, PreviousHoldingCharacterInvulnerabilityDuration) == 0x0002E0, "Member 'AMarinerItem::PreviousHoldingCharacterInvulnerabilityDuration' has a wrong offset!");
static_assert(offsetof(AMarinerItem, OnPickedUpEvent) == 0x0002F0, "Member 'AMarinerItem::OnPickedUpEvent' has a wrong offset!");
static_assert(offsetof(AMarinerItem, OnDroppedEvent) == 0x000300, "Member 'AMarinerItem::OnDroppedEvent' has a wrong offset!");
static_assert(offsetof(AMarinerItem, OnEnabledFromPoolDelegate) == 0x000310, "Member 'AMarinerItem::OnEnabledFromPoolDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerItem, OnDisabledToPoolDelegate) == 0x000320, "Member 'AMarinerItem::OnDisabledToPoolDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bIsEnabledFromPool) == 0x000330, "Member 'AMarinerItem::bIsEnabledFromPool' has a wrong offset!");
static_assert(offsetof(AMarinerItem, NonPriorityRecieveItemBufferDuration) == 0x000340, "Member 'AMarinerItem::NonPriorityRecieveItemBufferDuration' has a wrong offset!");
static_assert(offsetof(AMarinerItem, AkAudioComponent) == 0x000348, "Member 'AMarinerItem::AkAudioComponent' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bIsPriorityItem) == 0x000350, "Member 'AMarinerItem::bIsPriorityItem' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bCanBePickedUp) == 0x000351, "Member 'AMarinerItem::bCanBePickedUp' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bShouldDropWhenMegablasted) == 0x000352, "Member 'AMarinerItem::bShouldDropWhenMegablasted' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bShouldCollideWithSplineFollowActors) == 0x000353, "Member 'AMarinerItem::bShouldCollideWithSplineFollowActors' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bShouldUseItemPool) == 0x000354, "Member 'AMarinerItem::bShouldUseItemPool' has a wrong offset!");
static_assert(offsetof(AMarinerItem, GravityScale) == 0x000358, "Member 'AMarinerItem::GravityScale' has a wrong offset!");
static_assert(offsetof(AMarinerItem, OutliningPolicy) == 0x00035C, "Member 'AMarinerItem::OutliningPolicy' has a wrong offset!");
static_assert(offsetof(AMarinerItem, ItemActivationUITexture) == 0x000360, "Member 'AMarinerItem::ItemActivationUITexture' has a wrong offset!");
static_assert(offsetof(AMarinerItem, ItemActivationUIText) == 0x000368, "Member 'AMarinerItem::ItemActivationUIText' has a wrong offset!");
static_assert(offsetof(AMarinerItem, ItemActivationUIPrefixText) == 0x000380, "Member 'AMarinerItem::ItemActivationUIPrefixText' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bIgnoresDroppingCharacterCollision) == 0x000398, "Member 'AMarinerItem::bIgnoresDroppingCharacterCollision' has a wrong offset!");
static_assert(offsetof(AMarinerItem, PriorityPickupActor) == 0x0003A0, "Member 'AMarinerItem::PriorityPickupActor' has a wrong offset!");
static_assert(offsetof(AMarinerItem, PriorityPickupActorSphere) == 0x0003A8, "Member 'AMarinerItem::PriorityPickupActorSphere' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bTrackHeldTime) == 0x0003B0, "Member 'AMarinerItem::bTrackHeldTime' has a wrong offset!");
static_assert(offsetof(AMarinerItem, ThrowResolutionPostHitDelay) == 0x0003B4, "Member 'AMarinerItem::ThrowResolutionPostHitDelay' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bIsItemRandomItem) == 0x0003B9, "Member 'AMarinerItem::bIsItemRandomItem' has a wrong offset!");
static_assert(offsetof(AMarinerItem, SpawnedBySpawnerAudioEvent) == 0x0003C0, "Member 'AMarinerItem::SpawnedBySpawnerAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerItem, SpawnedBySpawnerEffect) == 0x0003C8, "Member 'AMarinerItem::SpawnedBySpawnerEffect' has a wrong offset!");
static_assert(offsetof(AMarinerItem, FastBoundsCollision) == 0x0003D0, "Member 'AMarinerItem::FastBoundsCollision' has a wrong offset!");
static_assert(offsetof(AMarinerItem, PickupAudioEvent) == 0x0003D8, "Member 'AMarinerItem::PickupAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerItem, PickupThirdPersonAudioEvent) == 0x0003E0, "Member 'AMarinerItem::PickupThirdPersonAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerItem, CarrySocketName) == 0x0003E8, "Member 'AMarinerItem::CarrySocketName' has a wrong offset!");
static_assert(offsetof(AMarinerItem, CarryVisibility) == 0x0003F0, "Member 'AMarinerItem::CarryVisibility' has a wrong offset!");
static_assert(offsetof(AMarinerItem, ScaleWhenHeld) == 0x0003F4, "Member 'AMarinerItem::ScaleWhenHeld' has a wrong offset!");
static_assert(offsetof(AMarinerItem, ScaleWhenNotHeld) == 0x0003F8, "Member 'AMarinerItem::ScaleWhenNotHeld' has a wrong offset!");
static_assert(offsetof(AMarinerItem, RuntimeScaleWhenHeld) == 0x000404, "Member 'AMarinerItem::RuntimeScaleWhenHeld' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bCanDashToPickUp) == 0x000410, "Member 'AMarinerItem::bCanDashToPickUp' has a wrong offset!");
static_assert(offsetof(AMarinerItem, BaseDashToPickUpRange) == 0x000414, "Member 'AMarinerItem::BaseDashToPickUpRange' has a wrong offset!");
static_assert(offsetof(AMarinerItem, DashToPickUpIcon) == 0x000418, "Member 'AMarinerItem::DashToPickUpIcon' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bCanBeStolen) == 0x0004B0, "Member 'AMarinerItem::bCanBeStolen' has a wrong offset!");
static_assert(offsetof(AMarinerItem, StolenAudioEvent) == 0x0004B8, "Member 'AMarinerItem::StolenAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerItem, StealIcon) == 0x0004C0, "Member 'AMarinerItem::StealIcon' has a wrong offset!");
static_assert(offsetof(AMarinerItem, ThrowingRule) == 0x000558, "Member 'AMarinerItem::ThrowingRule' has a wrong offset!");
static_assert(offsetof(AMarinerItem, ThrowAudioEvent) == 0x000560, "Member 'AMarinerItem::ThrowAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerItem, BaseThrowSpeed) == 0x000568, "Member 'AMarinerItem::BaseThrowSpeed' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bCollideWithPawnsAfterThrowing) == 0x00056C, "Member 'AMarinerItem::bCollideWithPawnsAfterThrowing' has a wrong offset!");
static_assert(offsetof(AMarinerItem, PostThrowCollisionChangeTime) == 0x000570, "Member 'AMarinerItem::PostThrowCollisionChangeTime' has a wrong offset!");
static_assert(offsetof(AMarinerItem, BasePassTargetingRange) == 0x000574, "Member 'AMarinerItem::BasePassTargetingRange' has a wrong offset!");
static_assert(offsetof(AMarinerItem, BaseMinimumPassSpeed) == 0x000578, "Member 'AMarinerItem::BaseMinimumPassSpeed' has a wrong offset!");
static_assert(offsetof(AMarinerItem, BaseMaximumPassSpeed) == 0x00057C, "Member 'AMarinerItem::BaseMaximumPassSpeed' has a wrong offset!");
static_assert(offsetof(AMarinerItem, BasePassThrowRange) == 0x000580, "Member 'AMarinerItem::BasePassThrowRange' has a wrong offset!");
static_assert(offsetof(AMarinerItem, PreviousHoldingCharacter) == 0x000584, "Member 'AMarinerItem::PreviousHoldingCharacter' has a wrong offset!");
static_assert(offsetof(AMarinerItem, HoldingCharacter) == 0x00058C, "Member 'AMarinerItem::HoldingCharacter' has a wrong offset!");
static_assert(offsetof(AMarinerItem, ItemGameplayAbilities) == 0x0005F8, "Member 'AMarinerItem::ItemGameplayAbilities' has a wrong offset!");
static_assert(offsetof(AMarinerItem, GrantedAbilityType) == 0x000608, "Member 'AMarinerItem::GrantedAbilityType' has a wrong offset!");
static_assert(offsetof(AMarinerItem, ItemAttributes) == 0x000610, "Member 'AMarinerItem::ItemAttributes' has a wrong offset!");
static_assert(offsetof(AMarinerItem, ItemUses) == 0x000618, "Member 'AMarinerItem::ItemUses' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bDestroyOnUsedUp) == 0x00061C, "Member 'AMarinerItem::bDestroyOnUsedUp' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bCanBeActivated) == 0x00061D, "Member 'AMarinerItem::bCanBeActivated' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bHasBeenActivated) == 0x00061E, "Member 'AMarinerItem::bHasBeenActivated' has a wrong offset!");
static_assert(offsetof(AMarinerItem, bTriggersArtifactEvents) == 0x00061F, "Member 'AMarinerItem::bTriggersArtifactEvents' has a wrong offset!");

// Class Mariner.MarinerCueSkinData_GameplayCueParameters
// 0x0028 (0x0058 - 0x0030)
class UMarinerCueSkinData_GameplayCueParameters final : public UMarinerCueSkinData_Base
{
public:
	struct FMarinerGameplayCueEffectData          EffectData;                                        // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCueSkinData_GameplayCueParameters">();
	}
	static class UMarinerCueSkinData_GameplayCueParameters* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCueSkinData_GameplayCueParameters>();
	}
};
static_assert(alignof(UMarinerCueSkinData_GameplayCueParameters) == 0x000008, "Wrong alignment on UMarinerCueSkinData_GameplayCueParameters");
static_assert(sizeof(UMarinerCueSkinData_GameplayCueParameters) == 0x000058, "Wrong size on UMarinerCueSkinData_GameplayCueParameters");
static_assert(offsetof(UMarinerCueSkinData_GameplayCueParameters, EffectData) == 0x000030, "Member 'UMarinerCueSkinData_GameplayCueParameters::EffectData' has a wrong offset!");

// Class Mariner.MarinerCueSkinData_WeaponEffect
// 0x0048 (0x0078 - 0x0030)
class UMarinerCueSkinData_WeaponEffect final : public UMarinerCueSkinData_Base
{
public:
	class UMarinerWeaponMontage*                  WeaponAnimation;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          Sound;                                             // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        FirstPersonMuzzleFX;                               // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ThirdPersonMuzzleFX;                               // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseThirdPersonMuzzleFX;                           // 0x0050(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17EF[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MuzzleFXScale;                                     // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MuzzleAttachPoint;                                 // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShake>               CameraShake;                                       // 0x0060(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewShakeOverridesOldShake;                        // 0x0068(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17F0[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   ForceFeedback;                                     // 0x0070(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCueSkinData_WeaponEffect">();
	}
	static class UMarinerCueSkinData_WeaponEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCueSkinData_WeaponEffect>();
	}
};
static_assert(alignof(UMarinerCueSkinData_WeaponEffect) == 0x000008, "Wrong alignment on UMarinerCueSkinData_WeaponEffect");
static_assert(sizeof(UMarinerCueSkinData_WeaponEffect) == 0x000078, "Wrong size on UMarinerCueSkinData_WeaponEffect");
static_assert(offsetof(UMarinerCueSkinData_WeaponEffect, WeaponAnimation) == 0x000030, "Member 'UMarinerCueSkinData_WeaponEffect::WeaponAnimation' has a wrong offset!");
static_assert(offsetof(UMarinerCueSkinData_WeaponEffect, Sound) == 0x000038, "Member 'UMarinerCueSkinData_WeaponEffect::Sound' has a wrong offset!");
static_assert(offsetof(UMarinerCueSkinData_WeaponEffect, FirstPersonMuzzleFX) == 0x000040, "Member 'UMarinerCueSkinData_WeaponEffect::FirstPersonMuzzleFX' has a wrong offset!");
static_assert(offsetof(UMarinerCueSkinData_WeaponEffect, ThirdPersonMuzzleFX) == 0x000048, "Member 'UMarinerCueSkinData_WeaponEffect::ThirdPersonMuzzleFX' has a wrong offset!");
static_assert(offsetof(UMarinerCueSkinData_WeaponEffect, bUseThirdPersonMuzzleFX) == 0x000050, "Member 'UMarinerCueSkinData_WeaponEffect::bUseThirdPersonMuzzleFX' has a wrong offset!");
static_assert(offsetof(UMarinerCueSkinData_WeaponEffect, MuzzleFXScale) == 0x000054, "Member 'UMarinerCueSkinData_WeaponEffect::MuzzleFXScale' has a wrong offset!");
static_assert(offsetof(UMarinerCueSkinData_WeaponEffect, MuzzleAttachPoint) == 0x000058, "Member 'UMarinerCueSkinData_WeaponEffect::MuzzleAttachPoint' has a wrong offset!");
static_assert(offsetof(UMarinerCueSkinData_WeaponEffect, CameraShake) == 0x000060, "Member 'UMarinerCueSkinData_WeaponEffect::CameraShake' has a wrong offset!");
static_assert(offsetof(UMarinerCueSkinData_WeaponEffect, bNewShakeOverridesOldShake) == 0x000068, "Member 'UMarinerCueSkinData_WeaponEffect::bNewShakeOverridesOldShake' has a wrong offset!");
static_assert(offsetof(UMarinerCueSkinData_WeaponEffect, ForceFeedback) == 0x000070, "Member 'UMarinerCueSkinData_WeaponEffect::ForceFeedback' has a wrong offset!");

// Class Mariner.MarinerCueSkinMap
// 0x00A0 (0x00D0 - 0x0030)
class UMarinerCueSkinMap final : public UDataAsset
{
public:
	TMap<TSoftClassPtr<class UClass>, class UMarinerCueSkinData_Base*> NotifyStaticOverrides;                             // 0x0030(0x0050)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<TSoftClassPtr<class UClass>, class UMarinerCueSkinData_Base*> NotifyActorOverrides;                              // 0x0080(0x0050)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCueSkinMap">();
	}
	static class UMarinerCueSkinMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCueSkinMap>();
	}
};
static_assert(alignof(UMarinerCueSkinMap) == 0x000008, "Wrong alignment on UMarinerCueSkinMap");
static_assert(sizeof(UMarinerCueSkinMap) == 0x0000D0, "Wrong size on UMarinerCueSkinMap");
static_assert(offsetof(UMarinerCueSkinMap, NotifyStaticOverrides) == 0x000030, "Member 'UMarinerCueSkinMap::NotifyStaticOverrides' has a wrong offset!");
static_assert(offsetof(UMarinerCueSkinMap, NotifyActorOverrides) == 0x000080, "Member 'UMarinerCueSkinMap::NotifyActorOverrides' has a wrong offset!");

// Class Mariner.MarinerCustomDropdown
// 0x0230 (0x04E0 - 0x02B0)
class UMarinerCustomDropdown : public UMarinerUserWidget
{
public:
	TSubclassOf<class UMarinerLayeredButton>      OptionType;                                        // 0x02B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                               Bound_SizePanel;                                   // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNamedSlot*                             Bound_HeaderSlot;                                  // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerVerticalBox*                    Bound_OptionPanel;                                 // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerCustomDropdownEditConfirmation EditConfirmationData;                              // 0x02D0(0x01C8)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerCustomDropdownSFX              DropdownSFX;                                       // 0x0498(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UMarinerCustomComboBox*                 Owner;                                             // 0x04C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerLayeredButton*                  SelectedInstance;                                  // 0x04C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUserWidget*                            HeaderInstance;                                    // 0x04D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_17F1[0x8];                                     // 0x04D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOptionHovered(class UMarinerLayeredButton* Instance, bool bFromKeyboard, bool bFromMouse);
	void OnOptionSelected(class UMarinerLayeredButton* Instance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCustomDropdown">();
	}
	static class UMarinerCustomDropdown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCustomDropdown>();
	}
};
static_assert(alignof(UMarinerCustomDropdown) == 0x000008, "Wrong alignment on UMarinerCustomDropdown");
static_assert(sizeof(UMarinerCustomDropdown) == 0x0004E0, "Wrong size on UMarinerCustomDropdown");
static_assert(offsetof(UMarinerCustomDropdown, OptionType) == 0x0002B0, "Member 'UMarinerCustomDropdown::OptionType' has a wrong offset!");
static_assert(offsetof(UMarinerCustomDropdown, Bound_SizePanel) == 0x0002B8, "Member 'UMarinerCustomDropdown::Bound_SizePanel' has a wrong offset!");
static_assert(offsetof(UMarinerCustomDropdown, Bound_HeaderSlot) == 0x0002C0, "Member 'UMarinerCustomDropdown::Bound_HeaderSlot' has a wrong offset!");
static_assert(offsetof(UMarinerCustomDropdown, Bound_OptionPanel) == 0x0002C8, "Member 'UMarinerCustomDropdown::Bound_OptionPanel' has a wrong offset!");
static_assert(offsetof(UMarinerCustomDropdown, EditConfirmationData) == 0x0002D0, "Member 'UMarinerCustomDropdown::EditConfirmationData' has a wrong offset!");
static_assert(offsetof(UMarinerCustomDropdown, DropdownSFX) == 0x000498, "Member 'UMarinerCustomDropdown::DropdownSFX' has a wrong offset!");
static_assert(offsetof(UMarinerCustomDropdown, Owner) == 0x0004C0, "Member 'UMarinerCustomDropdown::Owner' has a wrong offset!");
static_assert(offsetof(UMarinerCustomDropdown, SelectedInstance) == 0x0004C8, "Member 'UMarinerCustomDropdown::SelectedInstance' has a wrong offset!");
static_assert(offsetof(UMarinerCustomDropdown, HeaderInstance) == 0x0004D0, "Member 'UMarinerCustomDropdown::HeaderInstance' has a wrong offset!");

// Class Mariner.MarinerInputGlobals
// 0x03B8 (0x03E8 - 0x0030)
class UMarinerInputGlobals final : public UDataAsset
{
public:
	UMulticastInlineDelegateProperty_             OnFinishedUpdatingInputType;                       // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UDataTable*                             ActionConfiguration;                               // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             AxisConfiguration;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DecelerationPercentage;                            // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17F3[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             SensitivitySettings;                               // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             ControllerConfigurations;                          // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             InputActionMappings;                               // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        PS4Keys;                                           // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                            PS4_DpadBaseIcon;                                  // 0x0088(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        XboxKeys;                                          // 0x0110(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                            Xbox_DpadBaseIcon;                                 // 0x0128(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        GenericKeys;                                       // 0x01B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                            Generic_DpadBaseIcon;                              // 0x01C8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        KBMKeyOverrides;                                   // 0x0250(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveVector*                           GenericInputFilter;                                // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveVector*                           PS4InputFilter;                                    // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveVector*                           XboxInputFilter;                                   // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             CurrentKeyIconSet;                                 // 0x0280(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FKey, struct FSlateBrush>         KeyToIconMapping;                                  // 0x0288(0x0050)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TMap<EMarinerInputActions, struct FMarinerInputActionKeySets> GamepadInputActionToKeySetMapping;                 // 0x02D8(0x0050)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TMap<EMarinerInputActions, struct FMarinerKeySet> KeyboardInputActionToKeySetMapping;                // 0x0328(0x0050)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TMap<struct FMarinerKeySet, struct FMarinerInputActionList> KeySetToInputActionListMapping;                    // 0x0378(0x0050)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UDataTable*                             PreviousConfiguration;                             // 0x03C8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             PreviousKeySet;                                    // 0x03D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             KBMKeyOverrideSet;                                 // 0x03D8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17F4[0x8];                                     // 0x03E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearStoredConfiguration();
	void GenerateGamepadKeyIconMappings(class UDataTable* ControllerConfiguration, class UDataTable* ConsoleKeyIconMapping);
	void GenerateKeyIconMappingsFromIndex(int32 ConfigurationIndex);
	class UDataTable* GetActiveKeySet();
	struct FMarinerIconSet GetGamepadIconSetFromInputAction(EMarinerInputActions Action, bool* bOutCouldFindIcon);
	EMarinerInputActions GetInputActionFromKeyboardKeySet(const struct FMarinerKeySet& KeySet, bool bGameplayOnly);
	struct FMarinerKBMKeyOverrides GetKBMKeyOverrides(const struct FKey& InKey);
	struct FMarinerKeySet GetKeyboardKeySetFromInputAction(EMarinerInputActions Action);
	struct FMarinerSensitivtySpecification GetSensitivitySpeicificationFromIndex(int32 SpecificationIndex);
	void OnInputTypeChanged(EPlayerInputType InputType);
	void RestoreInputDefaults(bool bKeyboardOnly, bool bConditionalRestore);
	void SwapGamepadKeySetIcons(EMarinerInputActions FirstAction, EMarinerInputActions SecondAction);

	class FText GetActionNameFromKeySet(const struct FMarinerKeySet& InKeySet) const;
	class UDataTable* GetControllerConfigurationFromIndex(int32 ConfigurationIndex) const;
	float GetDecelerationPercentage() const;
	class FText GetDisplayTextFromInputAction(EMarinerInputActions InAction) const;
	struct FMarinerKeySet GetGamepadKeySetFromInputAction(EMarinerInputActions Action) const;
	const struct FSlateBrush GetIconForNeutralDpad() const;
	EMarinerInputActions GetInputActionFromKeySetInputBinding(const struct FMarinerKeySet& KeySet) const;
	const struct FMarinerInputActionList GetInputActionListFromKey(const struct FKey& Key) const;
	const struct FMarinerInputActionList GetInputActionListFromKeySet(const struct FMarinerKeySet& KeySet) const;
	class UCurveVector* GetInputMagnitudeFilterCurve() const;
	class UDataTable* GetSensitivitySettings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerInputGlobals">();
	}
	static class UMarinerInputGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerInputGlobals>();
	}
};
static_assert(alignof(UMarinerInputGlobals) == 0x000008, "Wrong alignment on UMarinerInputGlobals");
static_assert(sizeof(UMarinerInputGlobals) == 0x0003E8, "Wrong size on UMarinerInputGlobals");
static_assert(offsetof(UMarinerInputGlobals, OnFinishedUpdatingInputType) == 0x000030, "Member 'UMarinerInputGlobals::OnFinishedUpdatingInputType' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, ActionConfiguration) == 0x000040, "Member 'UMarinerInputGlobals::ActionConfiguration' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, AxisConfiguration) == 0x000048, "Member 'UMarinerInputGlobals::AxisConfiguration' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, DecelerationPercentage) == 0x000050, "Member 'UMarinerInputGlobals::DecelerationPercentage' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, SensitivitySettings) == 0x000058, "Member 'UMarinerInputGlobals::SensitivitySettings' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, ControllerConfigurations) == 0x000060, "Member 'UMarinerInputGlobals::ControllerConfigurations' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, InputActionMappings) == 0x000068, "Member 'UMarinerInputGlobals::InputActionMappings' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, PS4Keys) == 0x000070, "Member 'UMarinerInputGlobals::PS4Keys' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, PS4_DpadBaseIcon) == 0x000088, "Member 'UMarinerInputGlobals::PS4_DpadBaseIcon' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, XboxKeys) == 0x000110, "Member 'UMarinerInputGlobals::XboxKeys' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, Xbox_DpadBaseIcon) == 0x000128, "Member 'UMarinerInputGlobals::Xbox_DpadBaseIcon' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, GenericKeys) == 0x0001B0, "Member 'UMarinerInputGlobals::GenericKeys' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, Generic_DpadBaseIcon) == 0x0001C8, "Member 'UMarinerInputGlobals::Generic_DpadBaseIcon' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, KBMKeyOverrides) == 0x000250, "Member 'UMarinerInputGlobals::KBMKeyOverrides' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, GenericInputFilter) == 0x000268, "Member 'UMarinerInputGlobals::GenericInputFilter' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, PS4InputFilter) == 0x000270, "Member 'UMarinerInputGlobals::PS4InputFilter' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, XboxInputFilter) == 0x000278, "Member 'UMarinerInputGlobals::XboxInputFilter' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, CurrentKeyIconSet) == 0x000280, "Member 'UMarinerInputGlobals::CurrentKeyIconSet' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, KeyToIconMapping) == 0x000288, "Member 'UMarinerInputGlobals::KeyToIconMapping' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, GamepadInputActionToKeySetMapping) == 0x0002D8, "Member 'UMarinerInputGlobals::GamepadInputActionToKeySetMapping' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, KeyboardInputActionToKeySetMapping) == 0x000328, "Member 'UMarinerInputGlobals::KeyboardInputActionToKeySetMapping' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, KeySetToInputActionListMapping) == 0x000378, "Member 'UMarinerInputGlobals::KeySetToInputActionListMapping' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, PreviousConfiguration) == 0x0003C8, "Member 'UMarinerInputGlobals::PreviousConfiguration' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, PreviousKeySet) == 0x0003D0, "Member 'UMarinerInputGlobals::PreviousKeySet' has a wrong offset!");
static_assert(offsetof(UMarinerInputGlobals, KBMKeyOverrideSet) == 0x0003D8, "Member 'UMarinerInputGlobals::KBMKeyOverrideSet' has a wrong offset!");

// Class Mariner.MarinerCustomDropdownClickGuard
// 0x0008 (0x0238 - 0x0230)
class UMarinerCustomDropdownClickGuard : public UUserWidget
{
public:
	class UMarinerCustomComboBox*                 Owner;                                             // 0x0230(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCustomDropdownClickGuard">();
	}
	static class UMarinerCustomDropdownClickGuard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerCustomDropdownClickGuard>();
	}
};
static_assert(alignof(UMarinerCustomDropdownClickGuard) == 0x000008, "Wrong alignment on UMarinerCustomDropdownClickGuard");
static_assert(sizeof(UMarinerCustomDropdownClickGuard) == 0x000238, "Wrong size on UMarinerCustomDropdownClickGuard");
static_assert(offsetof(UMarinerCustomDropdownClickGuard, Owner) == 0x000230, "Member 'UMarinerCustomDropdownClickGuard::Owner' has a wrong offset!");

// Class Mariner.MarinerInputInterface
// 0x0000 (0x0028 - 0x0028)
class IMarinerInputInterface : public IInterface
{
public:
	void Exit(bool bToSubLayer);
	TScriptInterface<class IMarinerInputInterface> GetHighlightedObject();
	void HandleGamepadConnectionChanged(bool bIsConnected, bool bIsActiveDevice);
	bool HandleInput(EMarinerInputActions InInput);
	void HandleInputDeviceChanged(EPlayerInputType InputType);
	bool HandleInputPressed(EMarinerInputActions InInput);
	bool HandleInputReleased(EMarinerInputActions InInput);
	bool HandleKeyDown(const struct FKey& InKey, bool bIsRepeat);

	bool CanHighlight() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerInputInterface">();
	}
	static class IMarinerInputInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarinerInputInterface>();
	}
};
static_assert(alignof(IMarinerInputInterface) == 0x000008, "Wrong alignment on IMarinerInputInterface");
static_assert(sizeof(IMarinerInputInterface) == 0x000028, "Wrong size on IMarinerInputInterface");

// Class Mariner.MarinerInteractableObjectInterface
// 0x0000 (0x0028 - 0x0028)
class IMarinerInteractableObjectInterface final : public IMarinerInputInterface
{
public:
	void OnInteractableBeginDrag();
	void OnInteractableDrag(float FDeltaX, float FDeltaY);
	void OnInteractableEndDrag();

	struct FMarinerInteractableData GetInteractableData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerInteractableObjectInterface">();
	}
	static class IMarinerInteractableObjectInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarinerInteractableObjectInterface>();
	}
};
static_assert(alignof(IMarinerInteractableObjectInterface) == 0x000008, "Wrong alignment on IMarinerInteractableObjectInterface");
static_assert(sizeof(IMarinerInteractableObjectInterface) == 0x000028, "Wrong size on IMarinerInteractableObjectInterface");

// Class Mariner.MarinerDamageableComponent
// 0x0258 (0x0308 - 0x00B0)
class UMarinerDamageableComponent final : public UActorComponent
{
public:
	UMulticastInlineDelegateProperty_             OnDeathEvent;                                      // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAccumulatedDamageChanged;                        // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAccumulatedDamageRegenPerSecondChanged;          // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAccumulatedDamageRegenSuppressionTimeChanged;    // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnDamageMultiplierChanged;                         // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnImpulseMultiplierChanged;                        // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnSelfImpulseMultiplierChanged;                    // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnReachedMegablastDangerDelegate;                  // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnReachedMegablastThresholdDelegate;               // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnRegenSuppressionEndedDelegate;                   // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnRegenSuppressionStartedDelegate;                 // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMegablastStateChanged;                           // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnImpendingMegablast;                              // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FE[0x8];                                     // 0x0180(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MegablastTimerUpdateFrequency;                     // 0x0188(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MegablastSpeed;                                    // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultAccumulatedDamageRegenPerSecond;            // 0x0190(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultAccumulatedDamageRegenSuppressionTime;      // 0x0194(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCannotAccumulateDamage;                           // 0x0198(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bObstructsChildrenFromAOEDamage;                   // 0x0199(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDestroyObjectOnDeath;                             // 0x019A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17FF[0x5];                                     // 0x019B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            MegablastGameplayEffect;                           // 0x01A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MegablastDuration;                                 // 0x01A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1800[0x4];                                     // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          MegablastBeginAll;                                 // 0x01B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          MegablastHitEndAll;                                // 0x01B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          MegablastHitInstigatorFeedback;                    // 0x01C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          MegablastHitBeginVictim;                           // 0x01C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          MegablastHitEndVictim;                             // 0x01D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveVector*                           ImpulseMultiplierCurve;                            // 0x01D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveVector*                           SelfInflictedImpulseMultiplierCurve;               // 0x01E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMarinerDamageThresholdEvent>   DamageThresholdEvents;                             // 0x01E8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         DangerDamageThreshold;                             // 0x01F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CriticalDamageThreshold;                           // 0x01FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MegablastDanger;                                   // 0x0200(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MegablastDangerOverflowThreshold;                  // 0x0204(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MegablastThreshold;                                // 0x0208(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1801[0x8];                                     // 0x020C(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ShieldedGameplayCueTag;                            // 0x0214(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDead;                                           // 0x021C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInvulnerable;                                   // 0x021D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRecentlyDamaged;                                  // 0x021E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1802[0x1];                                     // 0x021F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastDamageEventOrigin;                             // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LastDamageEventDirection;                          // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHitResult                             LastDamageEventClosestHitResult;                   // 0x0238(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                         AccumulatedDamageAsNonAttribute;                   // 0x02C0(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1803[0x4];                                     // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerDamageAttributes*               DamageAttributes;                                  // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1804[0x10];                                    // 0x02D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           AccumulatedDamageRegenSuppressionTimer;            // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1805[0x8];                                     // 0x02E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           AccumulatedDamageRegenLoopingTimer;                // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMarinerProjectileImpulseBatch> BatchedImpulseRecord;                              // 0x02F8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void AccumulatedDamageChanged(const class UMarinerDamageableComponent* RelevantDamageableComponent, float NewAccumulatedDamage, float OldAccumulatedDamage);
	void AuthoritativeSetIsInvulnerable(bool bInIsInvulnerable);
	void AuthoritySetAccumulatedDamage(float NewAccumulatedDamage, bool bOverflowsMegablastDanger);
	void OnCharacterTakeAnyDamage(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void OnOwnerKnockedOut();
	void OnRegenSuppressionEnded();
	void OnRep_AccumulatedDamageAsNonAttribute(float OldAccumulatedDamage);
	void RemoveAllDamage();
	void RemoveDamage(float DamageToRemove);
	void SuppressRegeneration();

	bool CanDieFromDamage() const;
	float GetAccumulatedDamage() const;
	float GetAccumulatedDamageRegenPerSecond() const;
	float GetAccumulatedDamageRegenSuppressionTime() const;
	EMarinerBlastableLevel GetBlastableLevel() const;
	float GetCriticalDamageThreshold() const;
	float GetDamageMultiplier() const;
	float GetDamageReceivedMultiplier() const;
	float GetDeathDamageThreshold() const;
	float GetImpulseMultiplier() const;
	const struct FHitResult GetLastDamageEventClosestHitResult() const;
	const struct FVector GetLastDamageEventDirection() const;
	const struct FVector GetLastDamageEventOrigin() const;
	float GetMegablastDuration() const;
	TSubclassOf<class UGameplayEffect> GetMegablastGameplayEffect() const;
	float GetSelfImpulseMultiplier() const;
	bool IsInvulnerable() const;
	bool IsMegablastActiveOrPending() const;
	bool IsMegablasted() const;
	bool IsRecentlyDamaged() const;
	bool IsRegenerating() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDamageableComponent">();
	}
	static class UMarinerDamageableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDamageableComponent>();
	}
};
static_assert(alignof(UMarinerDamageableComponent) == 0x000008, "Wrong alignment on UMarinerDamageableComponent");
static_assert(sizeof(UMarinerDamageableComponent) == 0x000308, "Wrong size on UMarinerDamageableComponent");
static_assert(offsetof(UMarinerDamageableComponent, OnDeathEvent) == 0x0000B0, "Member 'UMarinerDamageableComponent::OnDeathEvent' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, OnAccumulatedDamageChanged) == 0x0000C0, "Member 'UMarinerDamageableComponent::OnAccumulatedDamageChanged' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, OnAccumulatedDamageRegenPerSecondChanged) == 0x0000D0, "Member 'UMarinerDamageableComponent::OnAccumulatedDamageRegenPerSecondChanged' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, OnAccumulatedDamageRegenSuppressionTimeChanged) == 0x0000E0, "Member 'UMarinerDamageableComponent::OnAccumulatedDamageRegenSuppressionTimeChanged' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, OnDamageMultiplierChanged) == 0x0000F0, "Member 'UMarinerDamageableComponent::OnDamageMultiplierChanged' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, OnImpulseMultiplierChanged) == 0x000100, "Member 'UMarinerDamageableComponent::OnImpulseMultiplierChanged' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, OnSelfImpulseMultiplierChanged) == 0x000110, "Member 'UMarinerDamageableComponent::OnSelfImpulseMultiplierChanged' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, OnReachedMegablastDangerDelegate) == 0x000120, "Member 'UMarinerDamageableComponent::OnReachedMegablastDangerDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, OnReachedMegablastThresholdDelegate) == 0x000130, "Member 'UMarinerDamageableComponent::OnReachedMegablastThresholdDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, OnRegenSuppressionEndedDelegate) == 0x000140, "Member 'UMarinerDamageableComponent::OnRegenSuppressionEndedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, OnRegenSuppressionStartedDelegate) == 0x000150, "Member 'UMarinerDamageableComponent::OnRegenSuppressionStartedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, OnMegablastStateChanged) == 0x000160, "Member 'UMarinerDamageableComponent::OnMegablastStateChanged' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, OnImpendingMegablast) == 0x000170, "Member 'UMarinerDamageableComponent::OnImpendingMegablast' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, MegablastTimerUpdateFrequency) == 0x000188, "Member 'UMarinerDamageableComponent::MegablastTimerUpdateFrequency' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, MegablastSpeed) == 0x00018C, "Member 'UMarinerDamageableComponent::MegablastSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, DefaultAccumulatedDamageRegenPerSecond) == 0x000190, "Member 'UMarinerDamageableComponent::DefaultAccumulatedDamageRegenPerSecond' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, DefaultAccumulatedDamageRegenSuppressionTime) == 0x000194, "Member 'UMarinerDamageableComponent::DefaultAccumulatedDamageRegenSuppressionTime' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, bCannotAccumulateDamage) == 0x000198, "Member 'UMarinerDamageableComponent::bCannotAccumulateDamage' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, bObstructsChildrenFromAOEDamage) == 0x000199, "Member 'UMarinerDamageableComponent::bObstructsChildrenFromAOEDamage' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, bDestroyObjectOnDeath) == 0x00019A, "Member 'UMarinerDamageableComponent::bDestroyObjectOnDeath' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, MegablastGameplayEffect) == 0x0001A0, "Member 'UMarinerDamageableComponent::MegablastGameplayEffect' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, MegablastDuration) == 0x0001A8, "Member 'UMarinerDamageableComponent::MegablastDuration' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, MegablastBeginAll) == 0x0001B0, "Member 'UMarinerDamageableComponent::MegablastBeginAll' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, MegablastHitEndAll) == 0x0001B8, "Member 'UMarinerDamageableComponent::MegablastHitEndAll' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, MegablastHitInstigatorFeedback) == 0x0001C0, "Member 'UMarinerDamageableComponent::MegablastHitInstigatorFeedback' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, MegablastHitBeginVictim) == 0x0001C8, "Member 'UMarinerDamageableComponent::MegablastHitBeginVictim' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, MegablastHitEndVictim) == 0x0001D0, "Member 'UMarinerDamageableComponent::MegablastHitEndVictim' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, ImpulseMultiplierCurve) == 0x0001D8, "Member 'UMarinerDamageableComponent::ImpulseMultiplierCurve' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, SelfInflictedImpulseMultiplierCurve) == 0x0001E0, "Member 'UMarinerDamageableComponent::SelfInflictedImpulseMultiplierCurve' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, DamageThresholdEvents) == 0x0001E8, "Member 'UMarinerDamageableComponent::DamageThresholdEvents' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, DangerDamageThreshold) == 0x0001F8, "Member 'UMarinerDamageableComponent::DangerDamageThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, CriticalDamageThreshold) == 0x0001FC, "Member 'UMarinerDamageableComponent::CriticalDamageThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, MegablastDanger) == 0x000200, "Member 'UMarinerDamageableComponent::MegablastDanger' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, MegablastDangerOverflowThreshold) == 0x000204, "Member 'UMarinerDamageableComponent::MegablastDangerOverflowThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, MegablastThreshold) == 0x000208, "Member 'UMarinerDamageableComponent::MegablastThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, ShieldedGameplayCueTag) == 0x000214, "Member 'UMarinerDamageableComponent::ShieldedGameplayCueTag' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, bIsDead) == 0x00021C, "Member 'UMarinerDamageableComponent::bIsDead' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, bIsInvulnerable) == 0x00021D, "Member 'UMarinerDamageableComponent::bIsInvulnerable' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, bRecentlyDamaged) == 0x00021E, "Member 'UMarinerDamageableComponent::bRecentlyDamaged' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, LastDamageEventOrigin) == 0x000220, "Member 'UMarinerDamageableComponent::LastDamageEventOrigin' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, LastDamageEventDirection) == 0x00022C, "Member 'UMarinerDamageableComponent::LastDamageEventDirection' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, LastDamageEventClosestHitResult) == 0x000238, "Member 'UMarinerDamageableComponent::LastDamageEventClosestHitResult' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, AccumulatedDamageAsNonAttribute) == 0x0002C0, "Member 'UMarinerDamageableComponent::AccumulatedDamageAsNonAttribute' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, DamageAttributes) == 0x0002C8, "Member 'UMarinerDamageableComponent::DamageAttributes' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, AccumulatedDamageRegenSuppressionTimer) == 0x0002E0, "Member 'UMarinerDamageableComponent::AccumulatedDamageRegenSuppressionTimer' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, AccumulatedDamageRegenLoopingTimer) == 0x0002F0, "Member 'UMarinerDamageableComponent::AccumulatedDamageRegenLoopingTimer' has a wrong offset!");
static_assert(offsetof(UMarinerDamageableComponent, BatchedImpulseRecord) == 0x0002F8, "Member 'UMarinerDamageableComponent::BatchedImpulseRecord' has a wrong offset!");

// Class Mariner.MarinerDamageableObjectInterface
// 0x0000 (0x0028 - 0x0028)
class IMarinerDamageableObjectInterface final : public IInterface
{
public:
	class UMarinerDamageableComponent* BP_GetDamageableComponent() const;
	bool ShouldGenerateCombo() const;
	bool ShouldGenerateHitTicks() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDamageableObjectInterface">();
	}
	static class IMarinerDamageableObjectInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarinerDamageableObjectInterface>();
	}
};
static_assert(alignof(IMarinerDamageableObjectInterface) == 0x000008, "Wrong alignment on IMarinerDamageableObjectInterface");
static_assert(sizeof(IMarinerDamageableObjectInterface) == 0x000028, "Wrong size on IMarinerDamageableObjectInterface");

// Class Mariner.MarinerKnockoutMiniScoreboard
// 0x00A0 (0x02D0 - 0x0230)
class UMarinerKnockoutMiniScoreboard final : public UUserWidget
{
public:
	class UMarinerHorizontalBox*                  Bound_PlayerTeam;                                  // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerHorizontalBox*                  Bound_EnemyTeam;                                   // 0x0238(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_StockScorePlayerTeam;                        // 0x0240(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_StockScoreEnemyTeam;                         // 0x0248(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_PlayerTeamBadgesText;                        // 0x0250(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_EnemyTeamBadgesText;                         // 0x0258(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarinerGameState*                      MarinerGameState;                                  // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AMarinerPlayerState*                    MarinerLocalPlayerState;                           // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1808[0x10];                                    // 0x0270(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class APlayerState*, class UMarinerSkinnedSelectedCharacterWidget*> ActivePlayerWidgets;                               // 0x0280(0x0050)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void CheckIfAllPlayerStatesAreAdded();
	void CheckPlayerWidgetsBeforeGameStarts(float Timestamp);
	void Init(class AMarinerPlayerController* MarinerPlayerController);
	void OnOvertimeStarted();
	void OnPlayerAdded(class APlayerState* PlayerState);
	void OnPlayerChangedTeam(class AMarinerPlayerState* PlayerState);
	void OnPlayerRemoved(class APlayerState* PlayerState);
	void OnScoreChanged(int32 TeamIndex, int32 NewScore);
	void SetUpPlayerWidget(class AMarinerPlayerState* PlayerState, class UMarinerSkinnedSelectedCharacterWidget* PlayerWidget);
	void SetUpPlayerWidgetForOvertime(class UMarinerSkinnedSelectedCharacterWidget* PlayerWidget);
	void SetUpRocketBotAttackWidget(class UMarinerSkinnedSelectedCharacterWidget* PlayerWidget);

	struct FMarinerKnockoutMiniScoreboardAnimations GetAnimationAssets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerKnockoutMiniScoreboard">();
	}
	static class UMarinerKnockoutMiniScoreboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerKnockoutMiniScoreboard>();
	}
};
static_assert(alignof(UMarinerKnockoutMiniScoreboard) == 0x000008, "Wrong alignment on UMarinerKnockoutMiniScoreboard");
static_assert(sizeof(UMarinerKnockoutMiniScoreboard) == 0x0002D0, "Wrong size on UMarinerKnockoutMiniScoreboard");
static_assert(offsetof(UMarinerKnockoutMiniScoreboard, Bound_PlayerTeam) == 0x000230, "Member 'UMarinerKnockoutMiniScoreboard::Bound_PlayerTeam' has a wrong offset!");
static_assert(offsetof(UMarinerKnockoutMiniScoreboard, Bound_EnemyTeam) == 0x000238, "Member 'UMarinerKnockoutMiniScoreboard::Bound_EnemyTeam' has a wrong offset!");
static_assert(offsetof(UMarinerKnockoutMiniScoreboard, Bound_StockScorePlayerTeam) == 0x000240, "Member 'UMarinerKnockoutMiniScoreboard::Bound_StockScorePlayerTeam' has a wrong offset!");
static_assert(offsetof(UMarinerKnockoutMiniScoreboard, Bound_StockScoreEnemyTeam) == 0x000248, "Member 'UMarinerKnockoutMiniScoreboard::Bound_StockScoreEnemyTeam' has a wrong offset!");
static_assert(offsetof(UMarinerKnockoutMiniScoreboard, Bound_PlayerTeamBadgesText) == 0x000250, "Member 'UMarinerKnockoutMiniScoreboard::Bound_PlayerTeamBadgesText' has a wrong offset!");
static_assert(offsetof(UMarinerKnockoutMiniScoreboard, Bound_EnemyTeamBadgesText) == 0x000258, "Member 'UMarinerKnockoutMiniScoreboard::Bound_EnemyTeamBadgesText' has a wrong offset!");
static_assert(offsetof(UMarinerKnockoutMiniScoreboard, MarinerGameState) == 0x000260, "Member 'UMarinerKnockoutMiniScoreboard::MarinerGameState' has a wrong offset!");
static_assert(offsetof(UMarinerKnockoutMiniScoreboard, MarinerLocalPlayerState) == 0x000268, "Member 'UMarinerKnockoutMiniScoreboard::MarinerLocalPlayerState' has a wrong offset!");
static_assert(offsetof(UMarinerKnockoutMiniScoreboard, ActivePlayerWidgets) == 0x000280, "Member 'UMarinerKnockoutMiniScoreboard::ActivePlayerWidgets' has a wrong offset!");

// Class Mariner.MarinerDamageableProjectile
// 0x0010 (0x08C0 - 0x08B0)
class AMarinerDamageableProjectile : public AMarinerProjectile
{
public:
	uint8                                         Pad_1809[0x8];                                     // 0x08B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerDamageableComponent*            DamageableComponent;                               // 0x08B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UMarinerDamageableComponent* BP_GetDamageableComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDamageableProjectile">();
	}
	static class AMarinerDamageableProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerDamageableProjectile>();
	}
};
static_assert(alignof(AMarinerDamageableProjectile) == 0x000010, "Wrong alignment on AMarinerDamageableProjectile");
static_assert(sizeof(AMarinerDamageableProjectile) == 0x0008C0, "Wrong size on AMarinerDamageableProjectile");
static_assert(offsetof(AMarinerDamageableProjectile, DamageableComponent) == 0x0008B8, "Member 'AMarinerDamageableProjectile::DamageableComponent' has a wrong offset!");

// Class Mariner.MarinerItemInteractionComponent
// 0x0288 (0x0338 - 0x00B0)
class UMarinerItemInteractionComponent final : public UActorComponent
{
public:
	uint8                                         Pad_180A[0x8];                                     // 0x00B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnCharacterHoldingItem;                            // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCatchCompletedEvent;                             // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnThrowInitiatedEvent;                             // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnThrowReleaseEvent;                               // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnDropInitiatedEvent;                              // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnDropReleaseEvent;                                // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnStealEvent;                                      // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         ClientOnHoldingItemReplicationByte;                // 0x0128(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_180B[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerThrowItemReleasePayload        CurrentThrowItemReleaseData_Default;               // 0x012C(0x0020)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerThrowItemReleasePayload        CurrentThrowItemReleaseData_Priority;              // 0x014C(0x0020)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerThrowItemPayload               CurrentInitiateThrowItemData_Default;              // 0x016C(0x0010)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerThrowItemPayload               CurrentInitiateThrowItemData_Priority;             // 0x017C(0x0010)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   ItemInteractionInputBinding;                       // 0x018C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PriorityItemInteractionInputBinding;               // 0x0194(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_180C[0x4];                                     // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerItem*                           HeldItem;                                          // 0x01A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarinerItem*                           HeldPriorityItem;                                  // 0x01A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DefaultCarrySocketName;                            // 0x01B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLocalShouldPlayItemAnimations;                    // 0x01B8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_180D[0x3];                                     // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BodyCatchCapsuleBoundsHeight;                      // 0x01BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BodyCatchCapsuleBoundsRadius;                      // 0x01C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ViewCatchCapsuleRadius;                            // 0x01C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ViewCatchCapsuleLength;                            // 0x01C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_180E[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerCharacterMontage*               CatchAnimation;                                    // 0x01D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             ItemDetectionChannel;                              // 0x01D8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_180F[0x7];                                     // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerCharacterMontage*               ThrowAnimation;                                    // 0x01E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ThrowSocket;                                       // 0x01E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThrowSpeedMultiplier;                              // 0x01F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MovementSpeedThrowMultiplier;                      // 0x01F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThrowAngle;                                        // 0x01F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PostThrowCatchCooldown;                            // 0x01FC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CooldownTimeBetweenThrowActions;                   // 0x0200(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1810[0x4];                                     // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerCharacterMontage*               DropAnimation;                                     // 0x0208(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DropReleaseSocketName;                             // 0x0210(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PostDropCatchCooldown;                             // 0x0218(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1811[0xC];                                     // 0x021C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerItem*                           JustReleasedItem;                                  // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class AMarinerItem*, float>              AuthorityRecentlyReleasedItems;                    // 0x0230(0x0050)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1812[0x4];                                     // 0x0280(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        DefaultSlotLockCount;                              // 0x0284(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        PrioritySlotLockCount;                             // 0x0288(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1813[0xAC];                                    // 0x028C(0x00AC)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AuthorityTryReceiveItem(class AMarinerItem* ItemToGive);
	void DestroyAllHeldItems();
	void DropAllItems();
	class AMarinerItem* DropAnyItemInSlot(EMarinerItemSlot ItemSlotToDrop, const struct FVector& DropLocation, class UParticleSystem* DropEffect, const class FName TagRequiredToDrop);
	class AMarinerItem* DropAnyItemInSlotAtCurrentLocation(EMarinerItemSlot ItemSlotToDrop, class UParticleSystem* DropEffect, const class FName TagRequiredToDrop);
	class AMarinerItem* DropNextItem(const struct FVector& DropLocation, class UParticleSystem* DropEffect, const class FName TagRequiredToDrop);
	void HandleInputForTheGivenSlot(EMarinerItemSlot SlotToInteractWith);
	void LocalSetShouldItemAnimationsPlay(bool bShouldPlay);
	void LockSlot(EMarinerItemSlot ItemSlotToLock, bool bShouldBeLocked);
	void MatSwapItem(class UMaterialInterface* NewMaterial, const EMarinerItemSlot ItemType);
	bool MoveItemInSlotToAnotherCharacter(EMarinerItemSlot ItemSlotToGiveAway, class AMarinerCharacter* CharacterToGiveTo);
	void MulticastDropNextItem(EMarinerItemSlot SlotToDropItemFrom, const struct FVector_NetQuantize& DropLocation, class UParticleSystem* DropEffect);
	void MulticastMoveItemInSlotToAnotherCharacter(EMarinerItemSlot ItemSlotToGiveAway, class AMarinerCharacter* CharacterToGiveTo);
	void MulticastPerformThrowRelease(EMarinerItemSlot SlotToReleaseFrom, const struct FVector_NetQuantize& ThrowReleaseRelativeLocation, const struct FVector_NetQuantize& ThrowVelocity);
	void OnHeldItemDestroyed(class AActor* DestroyedActor);
	void OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageStarted(class UAnimMontage* Montage);
	void OnOwnerDeath(const class AActor* DeadActor, const class UMarinerDamageType* KillingDamage, class AController* KillInstigator, class AActor* KillingDamageSourceActor);
	void OnOwnerPerspectiveChanged(class AMarinerCharacter* Character, bool bIsFirstPerson);
	void OnReleaseAnimNotifyCharacterEvent(EAnimNotifyCharacterEventType EventType);
	void OnRep_ClientOnHoldingItemReplicationByte();
	void OnRep_CurrentInitiateThrowItemData_Default();
	void OnRep_CurrentInitiateThrowItemData_Priority();
	void OnRep_CurrentThrowItemReleaseData_Default();
	void OnRep_CurrentThrowItemReleaseData_Priority();
	void OnRep_HeldItem();
	void OnRep_HeldPriorityItem();
	void ReceiveItem(class AMarinerItem* ItemReceived);
	void RevertMatItem(const EMarinerItemSlot ItemType);
	void ServerRequestActivateItem(class AMarinerItem* ItemToActivate);
	void ServerRequestThrowItem(EMarinerItemSlot SlotToThrowFrom, bool bIsThrowDrop);
	void ServerRequestThrowRelease(EMarinerItemSlot SlotToReleaseFrom, const struct FVector_NetQuantize& ThrowReleaseRelativeLocation, const struct FVector_NetQuantize& ThrowVelocity);

	bool CanPickupItem(const class AMarinerItem* ItemToTryToHold) const;
	bool DoesSlotContainItem(EMarinerItemSlot SlotToCheck) const;
	EMarinerItemSlot GetFirstFullItemSlot() const;
	class AMarinerItem* GetFirstHeldItem() const;
	TSubclassOf<class UMarinerAbility> GetItemAbilityType(EMarinerItemSlot ItemSlot) const;
	class AMarinerItem* GetItemBySlot(EMarinerItemSlot ItemSlot) const;
	class AMarinerCharacter* GetMarinerCharacterOwner() const;
	class UMarinerAbilitySystemComponent* GetOwnerAbilitySystemComponent() const;
	bool HasRoomToHoldItem(const class AMarinerItem* ItemToTryToHold) const;
	bool IsAllItemPickupSuppressed() const;
	bool IsHoldingItem() const;
	bool IsNonPriorityItemPickupSuppressed() const;
	bool IsPriorityItemPickupSuppressed() const;
	bool IsSlotLocked(EMarinerItemSlot ItemSlotToCheck) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerItemInteractionComponent">();
	}
	static class UMarinerItemInteractionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerItemInteractionComponent>();
	}
};
static_assert(alignof(UMarinerItemInteractionComponent) == 0x000008, "Wrong alignment on UMarinerItemInteractionComponent");
static_assert(sizeof(UMarinerItemInteractionComponent) == 0x000338, "Wrong size on UMarinerItemInteractionComponent");
static_assert(offsetof(UMarinerItemInteractionComponent, OnCharacterHoldingItem) == 0x0000B8, "Member 'UMarinerItemInteractionComponent::OnCharacterHoldingItem' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, OnCatchCompletedEvent) == 0x0000C8, "Member 'UMarinerItemInteractionComponent::OnCatchCompletedEvent' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, OnThrowInitiatedEvent) == 0x0000D8, "Member 'UMarinerItemInteractionComponent::OnThrowInitiatedEvent' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, OnThrowReleaseEvent) == 0x0000E8, "Member 'UMarinerItemInteractionComponent::OnThrowReleaseEvent' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, OnDropInitiatedEvent) == 0x0000F8, "Member 'UMarinerItemInteractionComponent::OnDropInitiatedEvent' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, OnDropReleaseEvent) == 0x000108, "Member 'UMarinerItemInteractionComponent::OnDropReleaseEvent' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, OnStealEvent) == 0x000118, "Member 'UMarinerItemInteractionComponent::OnStealEvent' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, ClientOnHoldingItemReplicationByte) == 0x000128, "Member 'UMarinerItemInteractionComponent::ClientOnHoldingItemReplicationByte' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, CurrentThrowItemReleaseData_Default) == 0x00012C, "Member 'UMarinerItemInteractionComponent::CurrentThrowItemReleaseData_Default' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, CurrentThrowItemReleaseData_Priority) == 0x00014C, "Member 'UMarinerItemInteractionComponent::CurrentThrowItemReleaseData_Priority' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, CurrentInitiateThrowItemData_Default) == 0x00016C, "Member 'UMarinerItemInteractionComponent::CurrentInitiateThrowItemData_Default' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, CurrentInitiateThrowItemData_Priority) == 0x00017C, "Member 'UMarinerItemInteractionComponent::CurrentInitiateThrowItemData_Priority' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, ItemInteractionInputBinding) == 0x00018C, "Member 'UMarinerItemInteractionComponent::ItemInteractionInputBinding' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, PriorityItemInteractionInputBinding) == 0x000194, "Member 'UMarinerItemInteractionComponent::PriorityItemInteractionInputBinding' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, HeldItem) == 0x0001A0, "Member 'UMarinerItemInteractionComponent::HeldItem' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, HeldPriorityItem) == 0x0001A8, "Member 'UMarinerItemInteractionComponent::HeldPriorityItem' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, DefaultCarrySocketName) == 0x0001B0, "Member 'UMarinerItemInteractionComponent::DefaultCarrySocketName' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, bLocalShouldPlayItemAnimations) == 0x0001B8, "Member 'UMarinerItemInteractionComponent::bLocalShouldPlayItemAnimations' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, BodyCatchCapsuleBoundsHeight) == 0x0001BC, "Member 'UMarinerItemInteractionComponent::BodyCatchCapsuleBoundsHeight' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, BodyCatchCapsuleBoundsRadius) == 0x0001C0, "Member 'UMarinerItemInteractionComponent::BodyCatchCapsuleBoundsRadius' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, ViewCatchCapsuleRadius) == 0x0001C4, "Member 'UMarinerItemInteractionComponent::ViewCatchCapsuleRadius' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, ViewCatchCapsuleLength) == 0x0001C8, "Member 'UMarinerItemInteractionComponent::ViewCatchCapsuleLength' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, CatchAnimation) == 0x0001D0, "Member 'UMarinerItemInteractionComponent::CatchAnimation' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, ItemDetectionChannel) == 0x0001D8, "Member 'UMarinerItemInteractionComponent::ItemDetectionChannel' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, ThrowAnimation) == 0x0001E0, "Member 'UMarinerItemInteractionComponent::ThrowAnimation' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, ThrowSocket) == 0x0001E8, "Member 'UMarinerItemInteractionComponent::ThrowSocket' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, ThrowSpeedMultiplier) == 0x0001F0, "Member 'UMarinerItemInteractionComponent::ThrowSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, MovementSpeedThrowMultiplier) == 0x0001F4, "Member 'UMarinerItemInteractionComponent::MovementSpeedThrowMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, ThrowAngle) == 0x0001F8, "Member 'UMarinerItemInteractionComponent::ThrowAngle' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, PostThrowCatchCooldown) == 0x0001FC, "Member 'UMarinerItemInteractionComponent::PostThrowCatchCooldown' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, CooldownTimeBetweenThrowActions) == 0x000200, "Member 'UMarinerItemInteractionComponent::CooldownTimeBetweenThrowActions' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, DropAnimation) == 0x000208, "Member 'UMarinerItemInteractionComponent::DropAnimation' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, DropReleaseSocketName) == 0x000210, "Member 'UMarinerItemInteractionComponent::DropReleaseSocketName' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, PostDropCatchCooldown) == 0x000218, "Member 'UMarinerItemInteractionComponent::PostDropCatchCooldown' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, JustReleasedItem) == 0x000228, "Member 'UMarinerItemInteractionComponent::JustReleasedItem' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, AuthorityRecentlyReleasedItems) == 0x000230, "Member 'UMarinerItemInteractionComponent::AuthorityRecentlyReleasedItems' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, DefaultSlotLockCount) == 0x000284, "Member 'UMarinerItemInteractionComponent::DefaultSlotLockCount' has a wrong offset!");
static_assert(offsetof(UMarinerItemInteractionComponent, PrioritySlotLockCount) == 0x000288, "Member 'UMarinerItemInteractionComponent::PrioritySlotLockCount' has a wrong offset!");

// Class Mariner.MarinerDamageAttributes
// 0x0088 (0x00B8 - 0x0030)
class UMarinerDamageAttributes final : public UAttributeSet
{
public:
	struct FMarinerGameplayAttributeData          ShieldUsesRemaining;                               // 0x0030(0x0010)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerGameplayAttributeData          AccumulatedDamage;                                 // 0x0040(0x0010)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerGameplayAttributeData          AccumulatedDamageRegenPerSecond;                   // 0x0050(0x0010)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerGameplayAttributeData          AccumulatedDamageRegenSuppressionTime;             // 0x0060(0x0010)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerGameplayAttributeData          DamageReceivedMultiplier;                          // 0x0070(0x0010)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerGameplayAttributeData          StunAccrualMultiplier;                             // 0x0080(0x0010)(NativeAccessSpecifierPublic)
	struct FMarinerGameplayAttributeData          ImpulseReceivedMultiplier;                         // 0x0090(0x0010)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FMarinerGameplayAttributeData          SelfImpulseReceivedMultiplier;                     // 0x00A0(0x0010)(Net, RepNotify, NativeAccessSpecifierPublic)
	class UMarinerDamageableComponent*            OwnerDamageableComponent;                          // 0x00B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnRep_AccumulatedDamage(const struct FMarinerGameplayAttributeData& OldAccumulatedDamage);
	void OnRep_AccumulatedDamageRegenPerSecond(const struct FMarinerGameplayAttributeData& OldAccumulatedDamageRegenPerSecond);
	void OnRep_AccumulatedDamageRegenSuppressionTime(const struct FMarinerGameplayAttributeData& OldAccumulatedDamageRegenSuppressionTime);
	void OnRep_DamageReceivedMultiplier(const struct FMarinerGameplayAttributeData& OldDamageMultiplier);
	void OnRep_ImpulseReceivedMultiplier(const struct FMarinerGameplayAttributeData& OldImpulseReceivedMultiplier);
	void OnRep_SelfImpulseReceivedMultiplier(const struct FMarinerGameplayAttributeData& OldSelfImpulseReceivedMultiplier);
	void OnRep_ShieldUsesRemaining(const struct FMarinerGameplayAttributeData& OldShieldUsesRemaining);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDamageAttributes">();
	}
	static class UMarinerDamageAttributes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDamageAttributes>();
	}
};
static_assert(alignof(UMarinerDamageAttributes) == 0x000008, "Wrong alignment on UMarinerDamageAttributes");
static_assert(sizeof(UMarinerDamageAttributes) == 0x0000B8, "Wrong size on UMarinerDamageAttributes");
static_assert(offsetof(UMarinerDamageAttributes, ShieldUsesRemaining) == 0x000030, "Member 'UMarinerDamageAttributes::ShieldUsesRemaining' has a wrong offset!");
static_assert(offsetof(UMarinerDamageAttributes, AccumulatedDamage) == 0x000040, "Member 'UMarinerDamageAttributes::AccumulatedDamage' has a wrong offset!");
static_assert(offsetof(UMarinerDamageAttributes, AccumulatedDamageRegenPerSecond) == 0x000050, "Member 'UMarinerDamageAttributes::AccumulatedDamageRegenPerSecond' has a wrong offset!");
static_assert(offsetof(UMarinerDamageAttributes, AccumulatedDamageRegenSuppressionTime) == 0x000060, "Member 'UMarinerDamageAttributes::AccumulatedDamageRegenSuppressionTime' has a wrong offset!");
static_assert(offsetof(UMarinerDamageAttributes, DamageReceivedMultiplier) == 0x000070, "Member 'UMarinerDamageAttributes::DamageReceivedMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerDamageAttributes, StunAccrualMultiplier) == 0x000080, "Member 'UMarinerDamageAttributes::StunAccrualMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerDamageAttributes, ImpulseReceivedMultiplier) == 0x000090, "Member 'UMarinerDamageAttributes::ImpulseReceivedMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerDamageAttributes, SelfImpulseReceivedMultiplier) == 0x0000A0, "Member 'UMarinerDamageAttributes::SelfImpulseReceivedMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerDamageAttributes, OwnerDamageableComponent) == 0x0000B0, "Member 'UMarinerDamageAttributes::OwnerDamageableComponent' has a wrong offset!");

// Class Mariner.MarinerDamageDebugManager
// 0x0030 (0x0058 - 0x0028)
class UMarinerDamageDebugManager final : public UObject
{
public:
	UMulticastInlineDelegateProperty_             OnDamageDebugRecordAdded;                          // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnDamageDebugArchiveCleared;                       // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UMarinerDamageDebugRecord*>      DamageDebugArchive;                                // 0x0048(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	TArray<class UMarinerDamageDebugRecord*> GetDamageDebugArchive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDamageDebugManager">();
	}
	static class UMarinerDamageDebugManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDamageDebugManager>();
	}
};
static_assert(alignof(UMarinerDamageDebugManager) == 0x000008, "Wrong alignment on UMarinerDamageDebugManager");
static_assert(sizeof(UMarinerDamageDebugManager) == 0x000058, "Wrong size on UMarinerDamageDebugManager");
static_assert(offsetof(UMarinerDamageDebugManager, OnDamageDebugRecordAdded) == 0x000028, "Member 'UMarinerDamageDebugManager::OnDamageDebugRecordAdded' has a wrong offset!");
static_assert(offsetof(UMarinerDamageDebugManager, OnDamageDebugArchiveCleared) == 0x000038, "Member 'UMarinerDamageDebugManager::OnDamageDebugArchiveCleared' has a wrong offset!");
static_assert(offsetof(UMarinerDamageDebugManager, DamageDebugArchive) == 0x000048, "Member 'UMarinerDamageDebugManager::DamageDebugArchive' has a wrong offset!");

// Class Mariner.MarinerInstancedMeshManager
// 0x0050 (0x0078 - 0x0028)
class UMarinerInstancedMeshManager final : public UObject
{
public:
	TMap<class UWorld*, class AMarinerProjectileInstancedMeshActor*> WorldInstanceMeshActors;                           // 0x0028(0x0050)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerInstancedMeshManager">();
	}
	static class UMarinerInstancedMeshManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerInstancedMeshManager>();
	}
};
static_assert(alignof(UMarinerInstancedMeshManager) == 0x000008, "Wrong alignment on UMarinerInstancedMeshManager");
static_assert(sizeof(UMarinerInstancedMeshManager) == 0x000078, "Wrong size on UMarinerInstancedMeshManager");
static_assert(offsetof(UMarinerInstancedMeshManager, WorldInstanceMeshActors) == 0x000028, "Member 'UMarinerInstancedMeshManager::WorldInstanceMeshActors' has a wrong offset!");

// Class Mariner.MarinerAOEDamageDebugRecord
// 0x00C0 (0x0130 - 0x0070)
class UMarinerAOEDamageDebugRecord final : public UMarinerDamageDebugRecord
{
public:
	float                                         MinimumDamage;                                     // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumImpulse;                                    // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OuterRadius;                                       // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1826[0xA4];                                    // 0x007C(0x00A4)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SelectedDamageCandidateActorName;                  // 0x0120(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SelectedActorDamagedName;                          // 0x0128(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	TArray<class FName> GetDamageCandidateActorNames() const;
	TArray<class FName> GetDamagedActorNames() const;
	struct FMarinerActorDamagedDebugRecord GetDamageDebugRecordForActorDamaged(class FName ActorName) const;
	TArray<struct FMarinerAOEObstructionTestDebugRecord> GetObstructionTestDebugRecordsForActor(class FName ActorName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerAOEDamageDebugRecord">();
	}
	static class UMarinerAOEDamageDebugRecord* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerAOEDamageDebugRecord>();
	}
};
static_assert(alignof(UMarinerAOEDamageDebugRecord) == 0x000008, "Wrong alignment on UMarinerAOEDamageDebugRecord");
static_assert(sizeof(UMarinerAOEDamageDebugRecord) == 0x000130, "Wrong size on UMarinerAOEDamageDebugRecord");
static_assert(offsetof(UMarinerAOEDamageDebugRecord, MinimumDamage) == 0x000070, "Member 'UMarinerAOEDamageDebugRecord::MinimumDamage' has a wrong offset!");
static_assert(offsetof(UMarinerAOEDamageDebugRecord, MinimumImpulse) == 0x000074, "Member 'UMarinerAOEDamageDebugRecord::MinimumImpulse' has a wrong offset!");
static_assert(offsetof(UMarinerAOEDamageDebugRecord, OuterRadius) == 0x000078, "Member 'UMarinerAOEDamageDebugRecord::OuterRadius' has a wrong offset!");
static_assert(offsetof(UMarinerAOEDamageDebugRecord, SelectedDamageCandidateActorName) == 0x000120, "Member 'UMarinerAOEDamageDebugRecord::SelectedDamageCandidateActorName' has a wrong offset!");
static_assert(offsetof(UMarinerAOEDamageDebugRecord, SelectedActorDamagedName) == 0x000128, "Member 'UMarinerAOEDamageDebugRecord::SelectedActorDamagedName' has a wrong offset!");

// Class Mariner.MarinerUIGlobals
// 0x07F0 (0x0820 - 0x0030)
class UMarinerUIGlobals final : public UDataAsset
{
public:
	UMulticastInlineDelegateProperty_             OnArtifactDataLoaded;                              // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1827[0x8];                                     // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerUITeamData                     FriendlyTeamData;                                  // 0x0048(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerUITeamData                     HostileTeamData;                                   // 0x0068(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerUITeamData                     NeutralTeamData;                                   // 0x0088(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              Padding;                                           // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerLoadingScreen>      LoadingScreenWidgetType;                           // 0x00B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMarinerLoadingScreenData>      Loadingscreens;                                    // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UMediaPlayer*                           MediaPlayerInstance;                               // 0x00C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerAsyncUIFlowHandler> OnboardingFlowHandlerType;                         // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerAsyncUIFlowHandler> OfferFlowHandlerType;                              // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UMarinerHUDState>>   HUDStates;                                         // 0x00E0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSubclassOf<class AMarinerPregameManager>     PregameManagerType;                                // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AMarinerPostgameManager>    PostgameManagerType;                               // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerScreenWipeWidget>   ScreenWipeWidgetType;                              // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerVoiceChatWidget>    VoiceChatWidgetType;                               // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerSubtitleManager>    SubtitleManagerType;                               // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerDebugInfoWidget>    DebugInfoWidgetType;                               // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerTTSDialogPC>        MarinerTTSDialogPCType;                            // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateBrush                            DefaultAvatar;                                     // 0x0128(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FMarinerPlatformIconData> PlatformIcons;                                     // 0x01B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            GenericPCIcon;                                     // 0x0200(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            GenericConsoleIcon;                                // 0x0288(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            EAIcon;                                            // 0x0310(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMarinerUIRankData>             UIRanksData;                                       // 0x0398(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<TSoftClassPtr<class UClass>, struct FMarinerUICharacterAbilityData> CharactersAbilitiesUIData;                         // 0x03A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<EMangoItemType, class FText>             ItemTypeNameMappings;                              // 0x03F8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<EMangoItemType, struct FSlateBrush>      ItemTypeIconMap;                                   // 0x0448(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            LockedArtifact;                                    // 0x0498(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<int32, struct FMarinerUIArtifactLevelData> ArtifactLevelData;                                 // 0x0520(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<EMangoItemType, class FText>             ArtifactTypes;                                     // 0x0570(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                         DefaultArtifactLevel;                              // 0x05C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultArtifactProgress;                           // 0x05C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxArtifactLevel;                                  // 0x05C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1828[0x4];                                     // 0x05CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EMangoItemType, class UMarinerArtifactDataAsset*> BotFakeArtifacts;                                  // 0x05D0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UMarinerCollectionDataAsset*>    CollectionList;                                    // 0x0620(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UMarinerCollectionDataAsset*            MythicEditionCollection;                           // 0x0630(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          PushToTalkSFX;                                     // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EMangoItemType, class UMarinerUIArtifactsForTypeData*> ArtifactsData;                                     // 0x0640(0x0050)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 OverlayDisabledMessageBox;                         // 0x0690(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsPreGameEmoteEnabled;                            // 0x0800(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsChatEmoteAnimationsEnabled;                     // 0x0801(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsVictoryPoseEnabled;                             // 0x0802(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1829[0x5];                                     // 0x0803(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerDebugProfileDataAsset*          DebugProfile;                                      // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_182A[0x8];                                     // 0x0810(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             NextLoadingScreenAsset;                            // 0x0818(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	TSoftObjectPtr<class UTexture2D> GetArtifactSoftTexture(EMangoItemType ArtifactType, const class FString& LookupId, int32 Level);
	const bool IsArtifactDataLoaded();
	bool IsValidRank(int32 InPlayerRank);
	void PopulateArtifactFromData(const class UMarinerArtifactDataAsset* ArtifactData, int32 CurrentLevel, class UMarinerArtifactImage* ArtifactImage);
	void PopulateEquippedCharacterArtifactForProfile(const class UMarinerGameInstance* MarinerGameInstance, const TSoftClassPtr<class UClass> CharacterClass, const struct FMangoProfile& Profile, EMangoItemType ItemType, bool bRanked, class UMarinerArtifactImage* ArtifactImage);
	void PopulateLocalEquippedCharacterArtifact(const class UMarinerGameInstance* MarinerGameInstance, const TSoftClassPtr<class UClass> CharacterClass, EMangoItemType ItemType, bool bRanked, class UMarinerArtifactImage* ArtifactImage);
	void PopulatePlatformIcon(const class UObject* WorldContextObject, class UImage* Icon, const class FName& Platform, bool bIgnoreCrossplaySetting);
	void PopulateRankIcon(int32 PlayerRank, class UImage* RankIcon, bool bUseSmallImage);

	const TMap<class UItemLoadResponse*, class UMarinerArtifactDataAsset*> GetAllArtifactsUIInfoForType(EMangoItemType ArtifactType) const;
	class UMarinerArtifactDataAsset* GetArtifactUIDataAsset(EMangoItemType ArtifactType, const class FString& LookupId) const;
	const TSubclassOf<class UHUDAbilityUIData> GetCharacterAbility(TSoftClassPtr<class UClass> Character, EMarinerInputActions AbilityInput) const;
	const struct FMarinerUICharacterAbilityData GetCharactersAbilitiesUIData(TSoftClassPtr<class UClass> Character) const;
	class UMarinerCollectionDataAsset* GetCollectionForItem(const struct FMangoItem& Item) const;
	const struct FSlateBrush GetItemTypeIcon(EMangoItemType ItemType) const;
	class FText GetItemTypeName(const struct FMangoItem& Item) const;
	class UMarinerCollectionDataAsset* GetMythicEditionCollection() const;
	bool IsChatEmoteAnimationsEnabled() const;
	bool IsPreGameEmoteEnabled() const;
	bool IsVictoryPoseEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerUIGlobals">();
	}
	static class UMarinerUIGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerUIGlobals>();
	}
};
static_assert(alignof(UMarinerUIGlobals) == 0x000008, "Wrong alignment on UMarinerUIGlobals");
static_assert(sizeof(UMarinerUIGlobals) == 0x000820, "Wrong size on UMarinerUIGlobals");
static_assert(offsetof(UMarinerUIGlobals, OnArtifactDataLoaded) == 0x000030, "Member 'UMarinerUIGlobals::OnArtifactDataLoaded' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, FriendlyTeamData) == 0x000048, "Member 'UMarinerUIGlobals::FriendlyTeamData' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, HostileTeamData) == 0x000068, "Member 'UMarinerUIGlobals::HostileTeamData' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, NeutralTeamData) == 0x000088, "Member 'UMarinerUIGlobals::NeutralTeamData' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, Padding) == 0x0000A8, "Member 'UMarinerUIGlobals::Padding' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, LoadingScreenWidgetType) == 0x0000B0, "Member 'UMarinerUIGlobals::LoadingScreenWidgetType' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, Loadingscreens) == 0x0000B8, "Member 'UMarinerUIGlobals::Loadingscreens' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, MediaPlayerInstance) == 0x0000C8, "Member 'UMarinerUIGlobals::MediaPlayerInstance' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, OnboardingFlowHandlerType) == 0x0000D0, "Member 'UMarinerUIGlobals::OnboardingFlowHandlerType' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, OfferFlowHandlerType) == 0x0000D8, "Member 'UMarinerUIGlobals::OfferFlowHandlerType' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, HUDStates) == 0x0000E0, "Member 'UMarinerUIGlobals::HUDStates' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, PregameManagerType) == 0x0000F0, "Member 'UMarinerUIGlobals::PregameManagerType' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, PostgameManagerType) == 0x0000F8, "Member 'UMarinerUIGlobals::PostgameManagerType' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, ScreenWipeWidgetType) == 0x000100, "Member 'UMarinerUIGlobals::ScreenWipeWidgetType' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, VoiceChatWidgetType) == 0x000108, "Member 'UMarinerUIGlobals::VoiceChatWidgetType' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, SubtitleManagerType) == 0x000110, "Member 'UMarinerUIGlobals::SubtitleManagerType' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, DebugInfoWidgetType) == 0x000118, "Member 'UMarinerUIGlobals::DebugInfoWidgetType' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, MarinerTTSDialogPCType) == 0x000120, "Member 'UMarinerUIGlobals::MarinerTTSDialogPCType' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, DefaultAvatar) == 0x000128, "Member 'UMarinerUIGlobals::DefaultAvatar' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, PlatformIcons) == 0x0001B0, "Member 'UMarinerUIGlobals::PlatformIcons' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, GenericPCIcon) == 0x000200, "Member 'UMarinerUIGlobals::GenericPCIcon' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, GenericConsoleIcon) == 0x000288, "Member 'UMarinerUIGlobals::GenericConsoleIcon' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, EAIcon) == 0x000310, "Member 'UMarinerUIGlobals::EAIcon' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, UIRanksData) == 0x000398, "Member 'UMarinerUIGlobals::UIRanksData' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, CharactersAbilitiesUIData) == 0x0003A8, "Member 'UMarinerUIGlobals::CharactersAbilitiesUIData' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, ItemTypeNameMappings) == 0x0003F8, "Member 'UMarinerUIGlobals::ItemTypeNameMappings' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, ItemTypeIconMap) == 0x000448, "Member 'UMarinerUIGlobals::ItemTypeIconMap' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, LockedArtifact) == 0x000498, "Member 'UMarinerUIGlobals::LockedArtifact' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, ArtifactLevelData) == 0x000520, "Member 'UMarinerUIGlobals::ArtifactLevelData' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, ArtifactTypes) == 0x000570, "Member 'UMarinerUIGlobals::ArtifactTypes' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, DefaultArtifactLevel) == 0x0005C0, "Member 'UMarinerUIGlobals::DefaultArtifactLevel' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, DefaultArtifactProgress) == 0x0005C4, "Member 'UMarinerUIGlobals::DefaultArtifactProgress' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, MaxArtifactLevel) == 0x0005C8, "Member 'UMarinerUIGlobals::MaxArtifactLevel' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, BotFakeArtifacts) == 0x0005D0, "Member 'UMarinerUIGlobals::BotFakeArtifacts' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, CollectionList) == 0x000620, "Member 'UMarinerUIGlobals::CollectionList' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, MythicEditionCollection) == 0x000630, "Member 'UMarinerUIGlobals::MythicEditionCollection' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, PushToTalkSFX) == 0x000638, "Member 'UMarinerUIGlobals::PushToTalkSFX' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, ArtifactsData) == 0x000640, "Member 'UMarinerUIGlobals::ArtifactsData' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, OverlayDisabledMessageBox) == 0x000690, "Member 'UMarinerUIGlobals::OverlayDisabledMessageBox' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, bIsPreGameEmoteEnabled) == 0x000800, "Member 'UMarinerUIGlobals::bIsPreGameEmoteEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, bIsChatEmoteAnimationsEnabled) == 0x000801, "Member 'UMarinerUIGlobals::bIsChatEmoteAnimationsEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, bIsVictoryPoseEnabled) == 0x000802, "Member 'UMarinerUIGlobals::bIsVictoryPoseEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, DebugProfile) == 0x000808, "Member 'UMarinerUIGlobals::DebugProfile' has a wrong offset!");
static_assert(offsetof(UMarinerUIGlobals, NextLoadingScreenAsset) == 0x000818, "Member 'UMarinerUIGlobals::NextLoadingScreenAsset' has a wrong offset!");

// Class Mariner.MarinerDamageLibrary
// 0x0000 (0x0028 - 0x0028)
class UMarinerDamageLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CauseAOEDamage(class UObject* WorldContextObject, TSubclassOf<class UMarinerDamageType> DamageType, const struct FVector& DamageOrigin, const TArray<class AActor*>& IgnoreActors, class AController* DamageInstigator, class AActor* DamageSourceActor, bool bDirectHitOnCharacter, float InDamageMultiplier);
	static bool CauseAOEDamageAndGetDamagedActors(class UObject* WorldContextObject, TSubclassOf<class UMarinerDamageType> DamageType, const struct FVector& DamageOrigin, const TArray<class AActor*>& IgnoreActors, class AController* DamageInstigator, class AActor* DamageSourceActor, TArray<class AActor*>* OutDamagedActors, float InDamageMultiplier);
	static bool CauseAOEDamageWithOuterRadiusOverride(class UObject* WorldContextObject, TSubclassOf<class UMarinerDamageType> DamageType, float OuterRadiusOverride, const struct FVector& DamageOrigin, const TArray<class AActor*>& IgnoreActors, class AController* DamageInstigator, class AActor* DamageSourceActor, TArray<class AActor*>* OutDamagedActors, float InDamageMultiplier);
	static void CauseDamage(class AActor* DamagedActor, TSubclassOf<class UMarinerDamageType> DamageType, class AController* DamageInstigator, class AActor* DamageSourceActor, float InDamageMultiplier, const struct FVector& OverrideDamageDirection, bool bShouldTreatAsAOE);
	static void CauseDamageFromHit(class AActor* DamagedActor, TSubclassOf<class UMarinerDamageType> DamageType, const struct FVector& DamageDirection, const struct FHitResult& HitInfo, class AController* DamageInstigator, class AActor* DamageSourceActor, float InDamageMultiplier);
	static bool DoesActorHaveDirectionalImmunity(const class AActor* Actor, const struct FVector& DamageOrigin, TSubclassOf<class UMarinerDamageType> OptionalDamageSourceType);
	static bool DoesComponentAbsorbExplosion(const class UPrimitiveComponent* Component);
	static bool DoesComponentHaveVulnerabilityTag(const class UPrimitiveComponent* Component);
	static bool IsActorDamageable(const class AActor* Actor);
	static bool IsItemInvulnerable(class AActor* DamagedActor, class AActor* DamageInstigator);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDamageLibrary">();
	}
	static class UMarinerDamageLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDamageLibrary>();
	}
};
static_assert(alignof(UMarinerDamageLibrary) == 0x000008, "Wrong alignment on UMarinerDamageLibrary");
static_assert(sizeof(UMarinerDamageLibrary) == 0x000028, "Wrong size on UMarinerDamageLibrary");

// Class Mariner.MarinerDebugInfoWidget
// 0x0010 (0x0240 - 0x0230)
class UMarinerDebugInfoWidget : public UUserWidget
{
public:
	class UTextBlock*                             StaticInfoTextBlock;                               // 0x0230(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             DynamicInfoTextBlock;                              // 0x0238(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDebugInfoWidget">();
	}
	static class UMarinerDebugInfoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDebugInfoWidget>();
	}
};
static_assert(alignof(UMarinerDebugInfoWidget) == 0x000008, "Wrong alignment on UMarinerDebugInfoWidget");
static_assert(sizeof(UMarinerDebugInfoWidget) == 0x000240, "Wrong size on UMarinerDebugInfoWidget");
static_assert(offsetof(UMarinerDebugInfoWidget, StaticInfoTextBlock) == 0x000230, "Member 'UMarinerDebugInfoWidget::StaticInfoTextBlock' has a wrong offset!");
static_assert(offsetof(UMarinerDebugInfoWidget, DynamicInfoTextBlock) == 0x000238, "Member 'UMarinerDebugInfoWidget::DynamicInfoTextBlock' has a wrong offset!");

// Class Mariner.MarinerVoiceChatWidget
// 0x0048 (0x0460 - 0x0418)
class UMarinerVoiceChatWidget : public UMarinerAnimatedWidget
{
public:
	class UVerticalBox*                           Bound_VerticalBoxPlayerVoiceWidgets;               // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1847[0x40];                                    // 0x0420(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGameStatePlayerAdded(class APlayerState* AddedPlayer);
	void OnGameStatePlayerMangoUserUpdated(class AMarinerPlayerState* PlayerState);
	void OnGameStatePlayerRemoved(class APlayerState* RemovedPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerVoiceChatWidget">();
	}
	static class UMarinerVoiceChatWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerVoiceChatWidget>();
	}
};
static_assert(alignof(UMarinerVoiceChatWidget) == 0x000008, "Wrong alignment on UMarinerVoiceChatWidget");
static_assert(sizeof(UMarinerVoiceChatWidget) == 0x000460, "Wrong size on UMarinerVoiceChatWidget");
static_assert(offsetof(UMarinerVoiceChatWidget, Bound_VerticalBoxPlayerVoiceWidgets) == 0x000418, "Member 'UMarinerVoiceChatWidget::Bound_VerticalBoxPlayerVoiceWidgets' has a wrong offset!");

// Class Mariner.MarinerDefaultPhysicsVolume
// 0x0000 (0x0260 - 0x0260)
class AMarinerDefaultPhysicsVolume final : public ADefaultPhysicsVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDefaultPhysicsVolume">();
	}
	static class AMarinerDefaultPhysicsVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerDefaultPhysicsVolume>();
	}
};
static_assert(alignof(AMarinerDefaultPhysicsVolume) == 0x000008, "Wrong alignment on AMarinerDefaultPhysicsVolume");
static_assert(sizeof(AMarinerDefaultPhysicsVolume) == 0x000260, "Wrong size on AMarinerDefaultPhysicsVolume");

// Class Mariner.MarinerDemoGlobals
// 0x0060 (0x0090 - 0x0030)
class UMarinerDemoGlobals final : public UDataAsset
{
public:
	class UMarinerPlatformSettingsGlobals*        E3_18SettingsGlobals;                              // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DemoE3_18;                                         // 0x0038(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          DemoBeta;                                          // 0x0039(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1848[0x2E];                                    // 0x003A(0x002E)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ClientConnectionString;                            // 0x0068(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 PlayerName;                                        // 0x0078(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PlayerTeamIndex;                                   // 0x0088(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1849[0x4];                                     // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool IsBetaBuild();
	static bool IsDemoE3_18();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDemoGlobals">();
	}
	static class UMarinerDemoGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDemoGlobals>();
	}
};
static_assert(alignof(UMarinerDemoGlobals) == 0x000008, "Wrong alignment on UMarinerDemoGlobals");
static_assert(sizeof(UMarinerDemoGlobals) == 0x000090, "Wrong size on UMarinerDemoGlobals");
static_assert(offsetof(UMarinerDemoGlobals, E3_18SettingsGlobals) == 0x000030, "Member 'UMarinerDemoGlobals::E3_18SettingsGlobals' has a wrong offset!");
static_assert(offsetof(UMarinerDemoGlobals, DemoE3_18) == 0x000038, "Member 'UMarinerDemoGlobals::DemoE3_18' has a wrong offset!");
static_assert(offsetof(UMarinerDemoGlobals, DemoBeta) == 0x000039, "Member 'UMarinerDemoGlobals::DemoBeta' has a wrong offset!");
static_assert(offsetof(UMarinerDemoGlobals, ClientConnectionString) == 0x000068, "Member 'UMarinerDemoGlobals::ClientConnectionString' has a wrong offset!");
static_assert(offsetof(UMarinerDemoGlobals, PlayerName) == 0x000078, "Member 'UMarinerDemoGlobals::PlayerName' has a wrong offset!");
static_assert(offsetof(UMarinerDemoGlobals, PlayerTeamIndex) == 0x000088, "Member 'UMarinerDemoGlobals::PlayerTeamIndex' has a wrong offset!");

// Class Mariner.MarinerDemoSpectatorPlayerController
// 0x0008 (0x0588 - 0x0580)
class AMarinerDemoSpectatorPlayerController final : public AMarinerBasePlayerController
{
public:
	uint8                                         Pad_184A[0x8];                                     // 0x0580(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDemoSpectatorPlayerController">();
	}
	static class AMarinerDemoSpectatorPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerDemoSpectatorPlayerController>();
	}
};
static_assert(alignof(AMarinerDemoSpectatorPlayerController) == 0x000008, "Wrong alignment on AMarinerDemoSpectatorPlayerController");
static_assert(sizeof(AMarinerDemoSpectatorPlayerController) == 0x000588, "Wrong size on AMarinerDemoSpectatorPlayerController");

// Class Mariner.MarinerDiscoveryMenu
// 0x0250 (0x0730 - 0x04E0)
class UMarinerDiscoveryMenu : public UMarinerMenu
{
public:
	class UMarinerHorizontalBox*                  Bound_InputRoot;                                   // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerDiscoveryWidget*                Bound_DiscoveryWidget;                             // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerSocialRequestsWidget*           Bound_FriendRequestInWidget;                       // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerSocialRequestsWidget*           Bound_FriendRequestOutWidget;                      // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     SearchPrompt;                                      // 0x0500(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     RefreshPrompt;                                     // 0x0618(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDiscoveryMenu">();
	}
	static class UMarinerDiscoveryMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDiscoveryMenu>();
	}
};
static_assert(alignof(UMarinerDiscoveryMenu) == 0x000008, "Wrong alignment on UMarinerDiscoveryMenu");
static_assert(sizeof(UMarinerDiscoveryMenu) == 0x000730, "Wrong size on UMarinerDiscoveryMenu");
static_assert(offsetof(UMarinerDiscoveryMenu, Bound_InputRoot) == 0x0004E0, "Member 'UMarinerDiscoveryMenu::Bound_InputRoot' has a wrong offset!");
static_assert(offsetof(UMarinerDiscoveryMenu, Bound_DiscoveryWidget) == 0x0004E8, "Member 'UMarinerDiscoveryMenu::Bound_DiscoveryWidget' has a wrong offset!");
static_assert(offsetof(UMarinerDiscoveryMenu, Bound_FriendRequestInWidget) == 0x0004F0, "Member 'UMarinerDiscoveryMenu::Bound_FriendRequestInWidget' has a wrong offset!");
static_assert(offsetof(UMarinerDiscoveryMenu, Bound_FriendRequestOutWidget) == 0x0004F8, "Member 'UMarinerDiscoveryMenu::Bound_FriendRequestOutWidget' has a wrong offset!");
static_assert(offsetof(UMarinerDiscoveryMenu, SearchPrompt) == 0x000500, "Member 'UMarinerDiscoveryMenu::SearchPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerDiscoveryMenu, RefreshPrompt) == 0x000618, "Member 'UMarinerDiscoveryMenu::RefreshPrompt' has a wrong offset!");

// Class Mariner.MarinerDiscoveryWidget
// 0x0100 (0x03F8 - 0x02F8)
class UMarinerDiscoveryWidget : public UMarinerPagedVerticalBox
{
public:
	class UMarinerEditableTextWidget*             Bound_SearchTextBox;                               // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerSocialWidget>       SocialWidgetSubclass;                              // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   DefaultText;                                       // 0x0308(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   TextNoUsersFound;                                  // 0x0320(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   TextSearchFailed;                                  // 0x0338(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UMarinerVerticalBox*                    Bound_RootInputBox;                                // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            Bound_LoadingWidget;                               // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextSearchInfo;                              // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_184B[0x90];                                    // 0x0368(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDiscoveryWidget">();
	}
	static class UMarinerDiscoveryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDiscoveryWidget>();
	}
};
static_assert(alignof(UMarinerDiscoveryWidget) == 0x000008, "Wrong alignment on UMarinerDiscoveryWidget");
static_assert(sizeof(UMarinerDiscoveryWidget) == 0x0003F8, "Wrong size on UMarinerDiscoveryWidget");
static_assert(offsetof(UMarinerDiscoveryWidget, Bound_SearchTextBox) == 0x0002F8, "Member 'UMarinerDiscoveryWidget::Bound_SearchTextBox' has a wrong offset!");
static_assert(offsetof(UMarinerDiscoveryWidget, SocialWidgetSubclass) == 0x000300, "Member 'UMarinerDiscoveryWidget::SocialWidgetSubclass' has a wrong offset!");
static_assert(offsetof(UMarinerDiscoveryWidget, DefaultText) == 0x000308, "Member 'UMarinerDiscoveryWidget::DefaultText' has a wrong offset!");
static_assert(offsetof(UMarinerDiscoveryWidget, TextNoUsersFound) == 0x000320, "Member 'UMarinerDiscoveryWidget::TextNoUsersFound' has a wrong offset!");
static_assert(offsetof(UMarinerDiscoveryWidget, TextSearchFailed) == 0x000338, "Member 'UMarinerDiscoveryWidget::TextSearchFailed' has a wrong offset!");
static_assert(offsetof(UMarinerDiscoveryWidget, Bound_RootInputBox) == 0x000350, "Member 'UMarinerDiscoveryWidget::Bound_RootInputBox' has a wrong offset!");
static_assert(offsetof(UMarinerDiscoveryWidget, Bound_LoadingWidget) == 0x000358, "Member 'UMarinerDiscoveryWidget::Bound_LoadingWidget' has a wrong offset!");
static_assert(offsetof(UMarinerDiscoveryWidget, Bound_TextSearchInfo) == 0x000360, "Member 'UMarinerDiscoveryWidget::Bound_TextSearchInfo' has a wrong offset!");

// Class Mariner.MarinerEditableTextBox
// 0x0930 (0x0A38 - 0x0108)
class UMarinerEditableTextBox final : public UWidget
{
public:
	class FText                                   Text;                                              // 0x0108(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextDelegate;                                      // 0x0120(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FEditableTextBoxStyle                  WidgetStyle;                                       // 0x0130(0x07F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 Style;                                             // 0x0920(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HintText;                                          // 0x0928(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             HintTextDelegate;                                  // 0x0940(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0950(0x0050)(Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ForegroundColor;                                   // 0x09A0(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x09B0(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReadOnlyForegroundColor;                           // 0x09C0(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReadOnly;                                        // 0x09D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPassword;                                        // 0x09D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184C[0x2];                                     // 0x09D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumDesiredWidth;                               // 0x09D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x09D8(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsCaretMovedWhenGainFocus;                         // 0x09E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextWhenFocused;                          // 0x09E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RevertTextOnEscape;                                // 0x09EA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearKeyboardFocusOnCommit;                        // 0x09EB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextOnCommit;                             // 0x09EC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowContextMenu;                                  // 0x09ED(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVirtualKeyboardType                          KeyboardType;                                      // 0x09EE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVirtualKeyboardOptions                VirtualKeyboardOptions;                            // 0x09EF(0x0001)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EVirtualKeyboardDismissAction                 VirtualKeyboardDismissAction;                      // 0x09F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x09F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShapedTextOptions                     ShapedTextOptions;                                 // 0x09F2(0x0003)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_184D[0x3];                                     // 0x09F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxLength;                                         // 0x09F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184E[0x4];                                     // 0x09FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          CommittedSFX;                                      // 0x0A00(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnTextChanged;                                     // 0x0A08(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnTextCommitted;                                   // 0x0A18(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_184F[0x10];                                    // 0x0A28(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearError();
	void OnMarinerEditableTextBoxChangedEvent__DelegateSignature(const class FText& Param_Text);
	void OnMarinerEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Param_Text, ETextCommit CommitMethod);
	void SetError(const class FText& InError);
	void SetHintText(const class FText& InText);
	void SetHovered(bool bHovered);
	void SetIsPassword(bool bIsPassword);
	void SetIsReadOnly(bool bReadOnly);
	void SetText(const class FText& InText);

	class FText GetText() const;
	bool HasError() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerEditableTextBox">();
	}
	static class UMarinerEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerEditableTextBox>();
	}
};
static_assert(alignof(UMarinerEditableTextBox) == 0x000008, "Wrong alignment on UMarinerEditableTextBox");
static_assert(sizeof(UMarinerEditableTextBox) == 0x000A38, "Wrong size on UMarinerEditableTextBox");
static_assert(offsetof(UMarinerEditableTextBox, Text) == 0x000108, "Member 'UMarinerEditableTextBox::Text' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, TextDelegate) == 0x000120, "Member 'UMarinerEditableTextBox::TextDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, WidgetStyle) == 0x000130, "Member 'UMarinerEditableTextBox::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, Style) == 0x000920, "Member 'UMarinerEditableTextBox::Style' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, HintText) == 0x000928, "Member 'UMarinerEditableTextBox::HintText' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, HintTextDelegate) == 0x000940, "Member 'UMarinerEditableTextBox::HintTextDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, Font) == 0x000950, "Member 'UMarinerEditableTextBox::Font' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, ForegroundColor) == 0x0009A0, "Member 'UMarinerEditableTextBox::ForegroundColor' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, BackgroundColor) == 0x0009B0, "Member 'UMarinerEditableTextBox::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, ReadOnlyForegroundColor) == 0x0009C0, "Member 'UMarinerEditableTextBox::ReadOnlyForegroundColor' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, IsReadOnly) == 0x0009D0, "Member 'UMarinerEditableTextBox::IsReadOnly' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, IsPassword) == 0x0009D1, "Member 'UMarinerEditableTextBox::IsPassword' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, MinimumDesiredWidth) == 0x0009D4, "Member 'UMarinerEditableTextBox::MinimumDesiredWidth' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, Padding) == 0x0009D8, "Member 'UMarinerEditableTextBox::Padding' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, IsCaretMovedWhenGainFocus) == 0x0009E8, "Member 'UMarinerEditableTextBox::IsCaretMovedWhenGainFocus' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, SelectAllTextWhenFocused) == 0x0009E9, "Member 'UMarinerEditableTextBox::SelectAllTextWhenFocused' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, RevertTextOnEscape) == 0x0009EA, "Member 'UMarinerEditableTextBox::RevertTextOnEscape' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, ClearKeyboardFocusOnCommit) == 0x0009EB, "Member 'UMarinerEditableTextBox::ClearKeyboardFocusOnCommit' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, SelectAllTextOnCommit) == 0x0009EC, "Member 'UMarinerEditableTextBox::SelectAllTextOnCommit' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, AllowContextMenu) == 0x0009ED, "Member 'UMarinerEditableTextBox::AllowContextMenu' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, KeyboardType) == 0x0009EE, "Member 'UMarinerEditableTextBox::KeyboardType' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, VirtualKeyboardOptions) == 0x0009EF, "Member 'UMarinerEditableTextBox::VirtualKeyboardOptions' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, VirtualKeyboardDismissAction) == 0x0009F0, "Member 'UMarinerEditableTextBox::VirtualKeyboardDismissAction' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, Justification) == 0x0009F1, "Member 'UMarinerEditableTextBox::Justification' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, ShapedTextOptions) == 0x0009F2, "Member 'UMarinerEditableTextBox::ShapedTextOptions' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, MaxLength) == 0x0009F8, "Member 'UMarinerEditableTextBox::MaxLength' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, CommittedSFX) == 0x000A00, "Member 'UMarinerEditableTextBox::CommittedSFX' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, OnTextChanged) == 0x000A08, "Member 'UMarinerEditableTextBox::OnTextChanged' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextBox, OnTextCommitted) == 0x000A18, "Member 'UMarinerEditableTextBox::OnTextCommitted' has a wrong offset!");

// Class Mariner.MarinerEditableTextWidget
// 0x0050 (0x2FC8 - 0x2F78)
class UMarinerEditableTextWidget : public UMarinerLayeredButton
{
public:
	uint8                                         Pad_1851[0x18];                                    // 0x2F78(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerEditableTextBox*                Bound_EditableTextBox;                             // 0x2F90(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   HintText;                                          // 0x2F98(0x0018)(Edit, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          CommittedSFX;                                      // 0x2FB0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1852[0x10];                                    // 0x2FB8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnWidgetTextCommited(const class FText& Text, ETextCommit CommitMethod);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerEditableTextWidget">();
	}
	static class UMarinerEditableTextWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerEditableTextWidget>();
	}
};
static_assert(alignof(UMarinerEditableTextWidget) == 0x000008, "Wrong alignment on UMarinerEditableTextWidget");
static_assert(sizeof(UMarinerEditableTextWidget) == 0x002FC8, "Wrong size on UMarinerEditableTextWidget");
static_assert(offsetof(UMarinerEditableTextWidget, Bound_EditableTextBox) == 0x002F90, "Member 'UMarinerEditableTextWidget::Bound_EditableTextBox' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextWidget, HintText) == 0x002F98, "Member 'UMarinerEditableTextWidget::HintText' has a wrong offset!");
static_assert(offsetof(UMarinerEditableTextWidget, CommittedSFX) == 0x002FB0, "Member 'UMarinerEditableTextWidget::CommittedSFX' has a wrong offset!");

// Class Mariner.MarinerEditorFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UMarinerEditorFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool DoesMaterialInstanceStaticBoolParamExist(class UMaterialInterface* InstanceToRead, class FName ParameterName);
	static bool GetMaterialInstanceStaticBoolParamValue(class UMaterialInterface* InstanceToRead, class FName ParameterName);
	static class UTexture2D* GetTexture2DFromPath(const class FString& Path);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerEditorFunctionLibrary">();
	}
	static class UMarinerEditorFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerEditorFunctionLibrary>();
	}
};
static_assert(alignof(UMarinerEditorFunctionLibrary) == 0x000008, "Wrong alignment on UMarinerEditorFunctionLibrary");
static_assert(sizeof(UMarinerEditorFunctionLibrary) == 0x000028, "Wrong size on UMarinerEditorFunctionLibrary");

// Class Mariner.MarinerInventoryBaseMenu
// 0x0E00 (0x12E0 - 0x04E0)
class UMarinerInventoryBaseMenu : public UMarinerMenu
{
public:
	bool                                          bAllowUnequipping;                                 // 0x04E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowDetailedInfo;                                // 0x04E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1856[0x6];                                     // 0x04E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Header;                                            // 0x04E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerItemLoadResponseButton> ButtonType;                                        // 0x0500(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMangoItemType                                MenuItemType;                                      // 0x0508(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1857[0x3];                                     // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GridNumColumns;                                    // 0x050C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         GridNumRows;                                       // 0x0510(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bGridFillEmpty;                                    // 0x0514(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowOwnedItems;                                   // 0x0515(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowUnownedItems;                                 // 0x0516(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowProgressionItems;                             // 0x0517(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowBlastPassItems;                               // 0x0518(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowOfferItems;                                   // 0x0519(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowCollectionItems;                              // 0x051A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPopOnEquip;                                       // 0x051B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1858[0x4];                                     // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerPromptData                     EquipPrompt;                                       // 0x0520(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     EquipAllPrompt;                                    // 0x0638(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     UnequipPrompt;                                     // 0x0750(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     PurchasePrompt;                                    // 0x0868(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     BlastPassPrompt;                                   // 0x0980(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 EquipActiveMessageBox;                             // 0x0A98(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 UnequipActiveMessageBox;                           // 0x0C08(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 EquipAllMessageBox;                                // 0x0D78(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 EquipFailedMessageBox;                             // 0x0EE8(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 ItemUnavailableMessageBox;                         // 0x1058(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ButtonHoveredSFX;                                  // 0x11C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ButtonSelectedSFX;                                 // 0x11D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          EquipSFX;                                          // 0x11D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UMarinerRarityDataAsset*, class UAkAudioEvent*> EquipSFXOverrides;                                 // 0x11E0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          UnequipSFX;                                        // 0x1230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerBaseContentWidget*              Bound_BaseContentWidget;                           // 0x1238(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            Bound_LoadSpinner;                                 // 0x1240(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerItemLoadResponseButton*         CurrentSelectedButton;                             // 0x1248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerLoadAllItemsFromCMSByType*      LoadObject;                                        // 0x1250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerLoadFrontendSkinDataForCharacter* SkinLoadObject;                                    // 0x1258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerLoadEmotesForCharacter*         EmotesLoadObject;                                  // 0x1260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerEquipItemToProfile*             EquipObject;                                       // 0x1268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerEquipEmotesToProfile*           EquipEmotesObject;                                 // 0x1270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerEquipItemToAllCharacters*       EquipAllObject;                                    // 0x1278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1859[0x28];                                    // 0x1280(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerPlayableCharacter*              CurrentCharacter;                                  // 0x12A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarinerCharacterSpawner*               CharacterSpawner;                                  // 0x12B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_185A[0x28];                                    // 0x12B8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndVisualization();
	void OnButtonAdded(class UMarinerLayeredButton* IconInstance, class UItemLoadResponse* Data, bool bRanked);
	void OnButtonHovered(class UMarinerLayeredButton* Instance, bool bFromKeyboard, bool bFromMouse);
	void OnButtonSelected(class UMarinerLayeredButton* IconInstance);
	void OnButtonUnhovered(class UMarinerLayeredButton* IconInstance);
	void OnButtonViewed(class UMarinerLayeredButton* IconInstance);
	void OnEquipFailed();
	void OnEquipProfileRefreshComplete();
	void OnEquipSucceeded();
	void OnInventoryChanged();
	void OnLoadFailed();
	void OnLoadFinished(const TArray<class UItemLoadResponse*>& LoadedDataResponse);
	void OnOfferStateChanged(const TArray<struct FMangoPurchaseOffer>& OffersStarting, const TArray<struct FMangoPurchaseOffer>& OffersEnding);
	void OnProfileChanged();
	void OnProfileItemEquipped(class UMarinerCMSItemDataAsset* Item);
	void OnPurchaseClosed();
	void OnPurchaseFlowComplete(bool bOfferPurchased);
	void OnSkinLoadFinished(const TArray<class UFrontendSkinUILoadResponse*>& LoadedDataResponse);
	void OnUnequipSucceeded();
	void OnWorldNoLongerValid();
	void PopulateOwnedItem(class UItemLoadResponse* LoadResponse);
	void PopulateUnlockPreview(class UItemLoadResponse* LoadResponse, class UMarinerCMSItemDataAsset* DataAsset, class UMarinerPlayableCharacter* Character);
	void SetCurrentCharacter(class UMarinerPlayableCharacter* InCurrentCharacter, class AMarinerCharacterSpawner* InCharacterSpawner);
	void SetMenuItemType(EMangoItemType InNewType);
	void ViewBlastPass(int32 Tier);
	void VisualizeSelectedButton(class UMarinerItemLoadResponseButton* ButtonInstance);

	class AMarinerCharacterSpawner* GetCharacterSpawner() const;
	class UMarinerPlayableCharacter* GetCurrentCharacter() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerInventoryBaseMenu">();
	}
	static class UMarinerInventoryBaseMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerInventoryBaseMenu>();
	}
};
static_assert(alignof(UMarinerInventoryBaseMenu) == 0x000008, "Wrong alignment on UMarinerInventoryBaseMenu");
static_assert(sizeof(UMarinerInventoryBaseMenu) == 0x0012E0, "Wrong size on UMarinerInventoryBaseMenu");
static_assert(offsetof(UMarinerInventoryBaseMenu, bAllowUnequipping) == 0x0004E0, "Member 'UMarinerInventoryBaseMenu::bAllowUnequipping' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, bAllowDetailedInfo) == 0x0004E1, "Member 'UMarinerInventoryBaseMenu::bAllowDetailedInfo' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, Header) == 0x0004E8, "Member 'UMarinerInventoryBaseMenu::Header' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, ButtonType) == 0x000500, "Member 'UMarinerInventoryBaseMenu::ButtonType' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, MenuItemType) == 0x000508, "Member 'UMarinerInventoryBaseMenu::MenuItemType' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, GridNumColumns) == 0x00050C, "Member 'UMarinerInventoryBaseMenu::GridNumColumns' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, GridNumRows) == 0x000510, "Member 'UMarinerInventoryBaseMenu::GridNumRows' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, bGridFillEmpty) == 0x000514, "Member 'UMarinerInventoryBaseMenu::bGridFillEmpty' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, bShowOwnedItems) == 0x000515, "Member 'UMarinerInventoryBaseMenu::bShowOwnedItems' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, bShowUnownedItems) == 0x000516, "Member 'UMarinerInventoryBaseMenu::bShowUnownedItems' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, bShowProgressionItems) == 0x000517, "Member 'UMarinerInventoryBaseMenu::bShowProgressionItems' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, bShowBlastPassItems) == 0x000518, "Member 'UMarinerInventoryBaseMenu::bShowBlastPassItems' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, bShowOfferItems) == 0x000519, "Member 'UMarinerInventoryBaseMenu::bShowOfferItems' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, bShowCollectionItems) == 0x00051A, "Member 'UMarinerInventoryBaseMenu::bShowCollectionItems' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, bPopOnEquip) == 0x00051B, "Member 'UMarinerInventoryBaseMenu::bPopOnEquip' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, EquipPrompt) == 0x000520, "Member 'UMarinerInventoryBaseMenu::EquipPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, EquipAllPrompt) == 0x000638, "Member 'UMarinerInventoryBaseMenu::EquipAllPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, UnequipPrompt) == 0x000750, "Member 'UMarinerInventoryBaseMenu::UnequipPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, PurchasePrompt) == 0x000868, "Member 'UMarinerInventoryBaseMenu::PurchasePrompt' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, BlastPassPrompt) == 0x000980, "Member 'UMarinerInventoryBaseMenu::BlastPassPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, EquipActiveMessageBox) == 0x000A98, "Member 'UMarinerInventoryBaseMenu::EquipActiveMessageBox' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, UnequipActiveMessageBox) == 0x000C08, "Member 'UMarinerInventoryBaseMenu::UnequipActiveMessageBox' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, EquipAllMessageBox) == 0x000D78, "Member 'UMarinerInventoryBaseMenu::EquipAllMessageBox' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, EquipFailedMessageBox) == 0x000EE8, "Member 'UMarinerInventoryBaseMenu::EquipFailedMessageBox' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, ItemUnavailableMessageBox) == 0x001058, "Member 'UMarinerInventoryBaseMenu::ItemUnavailableMessageBox' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, ButtonHoveredSFX) == 0x0011C8, "Member 'UMarinerInventoryBaseMenu::ButtonHoveredSFX' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, ButtonSelectedSFX) == 0x0011D0, "Member 'UMarinerInventoryBaseMenu::ButtonSelectedSFX' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, EquipSFX) == 0x0011D8, "Member 'UMarinerInventoryBaseMenu::EquipSFX' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, EquipSFXOverrides) == 0x0011E0, "Member 'UMarinerInventoryBaseMenu::EquipSFXOverrides' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, UnequipSFX) == 0x001230, "Member 'UMarinerInventoryBaseMenu::UnequipSFX' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, Bound_BaseContentWidget) == 0x001238, "Member 'UMarinerInventoryBaseMenu::Bound_BaseContentWidget' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, Bound_LoadSpinner) == 0x001240, "Member 'UMarinerInventoryBaseMenu::Bound_LoadSpinner' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, CurrentSelectedButton) == 0x001248, "Member 'UMarinerInventoryBaseMenu::CurrentSelectedButton' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, LoadObject) == 0x001250, "Member 'UMarinerInventoryBaseMenu::LoadObject' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, SkinLoadObject) == 0x001258, "Member 'UMarinerInventoryBaseMenu::SkinLoadObject' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, EmotesLoadObject) == 0x001260, "Member 'UMarinerInventoryBaseMenu::EmotesLoadObject' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, EquipObject) == 0x001268, "Member 'UMarinerInventoryBaseMenu::EquipObject' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, EquipEmotesObject) == 0x001270, "Member 'UMarinerInventoryBaseMenu::EquipEmotesObject' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, EquipAllObject) == 0x001278, "Member 'UMarinerInventoryBaseMenu::EquipAllObject' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, CurrentCharacter) == 0x0012A8, "Member 'UMarinerInventoryBaseMenu::CurrentCharacter' has a wrong offset!");
static_assert(offsetof(UMarinerInventoryBaseMenu, CharacterSpawner) == 0x0012B0, "Member 'UMarinerInventoryBaseMenu::CharacterSpawner' has a wrong offset!");

// Class Mariner.MarinerEmoteCustomizationMenu
// 0x03A8 (0x1688 - 0x12E0)
class UMarinerEmoteCustomizationMenu : public UMarinerInventoryBaseMenu
{
public:
	class UTextBlock*                             Bound_TextSelectedEmoteCategoryName;               // 0x12E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextSelectedEmoteCategoryDescription;        // 0x12E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     PlayEmotePrompt;                                   // 0x12F0(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     CancelEquipPrompt;                                 // 0x1408(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     BackPrompt;                                        // 0x1520(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         Bound_CategoryBox;                                 // 0x1638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           Bound_RootCanvasPanel;                             // 0x1640(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerInputActions                          ChangeCategoryRightAction;                         // 0x1648(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerInputActions                          ChangeCategoryLeftAction;                          // 0x1649(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_185D[0x36];                                    // 0x164A(0x0036)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                LastPlayedEmote;                                   // 0x1680(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnCategorySelected(class UMarinerLayeredButton* Button);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerEmoteCustomizationMenu">();
	}
	static class UMarinerEmoteCustomizationMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerEmoteCustomizationMenu>();
	}
};
static_assert(alignof(UMarinerEmoteCustomizationMenu) == 0x000008, "Wrong alignment on UMarinerEmoteCustomizationMenu");
static_assert(sizeof(UMarinerEmoteCustomizationMenu) == 0x001688, "Wrong size on UMarinerEmoteCustomizationMenu");
static_assert(offsetof(UMarinerEmoteCustomizationMenu, Bound_TextSelectedEmoteCategoryName) == 0x0012E0, "Member 'UMarinerEmoteCustomizationMenu::Bound_TextSelectedEmoteCategoryName' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteCustomizationMenu, Bound_TextSelectedEmoteCategoryDescription) == 0x0012E8, "Member 'UMarinerEmoteCustomizationMenu::Bound_TextSelectedEmoteCategoryDescription' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteCustomizationMenu, PlayEmotePrompt) == 0x0012F0, "Member 'UMarinerEmoteCustomizationMenu::PlayEmotePrompt' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteCustomizationMenu, CancelEquipPrompt) == 0x001408, "Member 'UMarinerEmoteCustomizationMenu::CancelEquipPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteCustomizationMenu, BackPrompt) == 0x001520, "Member 'UMarinerEmoteCustomizationMenu::BackPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteCustomizationMenu, Bound_CategoryBox) == 0x001638, "Member 'UMarinerEmoteCustomizationMenu::Bound_CategoryBox' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteCustomizationMenu, Bound_RootCanvasPanel) == 0x001640, "Member 'UMarinerEmoteCustomizationMenu::Bound_RootCanvasPanel' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteCustomizationMenu, ChangeCategoryRightAction) == 0x001648, "Member 'UMarinerEmoteCustomizationMenu::ChangeCategoryRightAction' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteCustomizationMenu, ChangeCategoryLeftAction) == 0x001649, "Member 'UMarinerEmoteCustomizationMenu::ChangeCategoryLeftAction' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteCustomizationMenu, LastPlayedEmote) == 0x001680, "Member 'UMarinerEmoteCustomizationMenu::LastPlayedEmote' has a wrong offset!");

// Class Mariner.MarinerTask_SpawnProjectile_Base
// 0x00A0 (0x0120 - 0x0080)
class UMarinerTask_SpawnProjectile_Base : public UAbilityTask
{
public:
	UMulticastInlineDelegateProperty_             OnProjectileStartedSpawning;                       // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnProjectileFinishedSpawning;                      // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnProjectileFailedToSpawn;                         // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_185E[0x70];                                    // 0x00B0(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_SpawnProjectile_Base">();
	}
	static class UMarinerTask_SpawnProjectile_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_SpawnProjectile_Base>();
	}
};
static_assert(alignof(UMarinerTask_SpawnProjectile_Base) == 0x000008, "Wrong alignment on UMarinerTask_SpawnProjectile_Base");
static_assert(sizeof(UMarinerTask_SpawnProjectile_Base) == 0x000120, "Wrong size on UMarinerTask_SpawnProjectile_Base");
static_assert(offsetof(UMarinerTask_SpawnProjectile_Base, OnProjectileStartedSpawning) == 0x000080, "Member 'UMarinerTask_SpawnProjectile_Base::OnProjectileStartedSpawning' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnProjectile_Base, OnProjectileFinishedSpawning) == 0x000090, "Member 'UMarinerTask_SpawnProjectile_Base::OnProjectileFinishedSpawning' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnProjectile_Base, OnProjectileFailedToSpawn) == 0x0000A0, "Member 'UMarinerTask_SpawnProjectile_Base::OnProjectileFailedToSpawn' has a wrong offset!");

// Class Mariner.MarinerEmoteMenuSlot
// 0x0088 (0x3000 - 0x2F78)
class UMarinerEmoteMenuSlot : public UMarinerLayeredButton
{
public:
	class UWidgetAnimation*                       Bound_EquippableStateAnim;                         // 0x2F78(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPrompt*                         Bound_Prompt;                                      // 0x2F80(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateColor                            FilledTextColor;                                   // 0x2F88(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateColor                            EmptyTextColor;                                    // 0x2FB0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   EmptyText;                                         // 0x2FD8(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UItemLoadResponse*                      LoadResponse;                                      // 0x2FF0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_185F[0x8];                                     // 0x2FF8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Clear();
	void SetEmote(class UItemLoadResponse* InLoadResponse);
	void SetEquippableStateEnabled(bool bEnabled);

	class UItemLoadResponse* GetLoadResponse() const;
	class FString GetSlottedItemId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerEmoteMenuSlot">();
	}
	static class UMarinerEmoteMenuSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerEmoteMenuSlot>();
	}
};
static_assert(alignof(UMarinerEmoteMenuSlot) == 0x000008, "Wrong alignment on UMarinerEmoteMenuSlot");
static_assert(sizeof(UMarinerEmoteMenuSlot) == 0x003000, "Wrong size on UMarinerEmoteMenuSlot");
static_assert(offsetof(UMarinerEmoteMenuSlot, Bound_EquippableStateAnim) == 0x002F78, "Member 'UMarinerEmoteMenuSlot::Bound_EquippableStateAnim' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteMenuSlot, Bound_Prompt) == 0x002F80, "Member 'UMarinerEmoteMenuSlot::Bound_Prompt' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteMenuSlot, FilledTextColor) == 0x002F88, "Member 'UMarinerEmoteMenuSlot::FilledTextColor' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteMenuSlot, EmptyTextColor) == 0x002FB0, "Member 'UMarinerEmoteMenuSlot::EmptyTextColor' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteMenuSlot, EmptyText) == 0x002FD8, "Member 'UMarinerEmoteMenuSlot::EmptyText' has a wrong offset!");
static_assert(offsetof(UMarinerEmoteMenuSlot, LoadResponse) == 0x002FF0, "Member 'UMarinerEmoteMenuSlot::LoadResponse' has a wrong offset!");

// Class Mariner.MarinerEmptyItem
// 0x0008 (0x0238 - 0x0230)
class UMarinerEmptyItem : public UUserWidget
{
public:
	class USizeBox*                               Bound_RootSizeBox;                                 // 0x0230(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetEmptyItemDesiredSize(int32 DesiredWidth, int32 DesiredHeight);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerEmptyItem">();
	}
	static class UMarinerEmptyItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerEmptyItem>();
	}
};
static_assert(alignof(UMarinerEmptyItem) == 0x000008, "Wrong alignment on UMarinerEmptyItem");
static_assert(sizeof(UMarinerEmptyItem) == 0x000238, "Wrong size on UMarinerEmptyItem");
static_assert(offsetof(UMarinerEmptyItem, Bound_RootSizeBox) == 0x000230, "Member 'UMarinerEmptyItem::Bound_RootSizeBox' has a wrong offset!");

// Class Mariner.MarinerEngine
// 0x0010 (0x0E48 - 0x0E38)
class UMarinerEngine final : public UGameEngine
{
public:
	float                                         DedicatedServerIdleMaxTickRate;                    // 0x0E38(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1860[0xC];                                     // 0x0E3C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerEngine">();
	}
	static class UMarinerEngine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerEngine>();
	}
};
static_assert(alignof(UMarinerEngine) == 0x000008, "Wrong alignment on UMarinerEngine");
static_assert(sizeof(UMarinerEngine) == 0x000E48, "Wrong size on UMarinerEngine");
static_assert(offsetof(UMarinerEngine, DedicatedServerIdleMaxTickRate) == 0x000E38, "Member 'UMarinerEngine::DedicatedServerIdleMaxTickRate' has a wrong offset!");

// Class Mariner.MarinerEquipItemToAllCharacters
// 0x0090 (0x00C0 - 0x0030)
class UMarinerEquipItemToAllCharacters final : public UBlueprintAsyncActionBase
{
public:
	UMulticastInlineDelegateProperty_             OnSentToServer;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnSucceededOnServer;                               // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnWorldNoLongerValid;                              // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnProfileUpdateComplete;                           // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnServerFailure;                                   // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnFailedBeforeSending;                             // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UMarinerCMSItemDataAsset*>       ItemsToEquip;                                      // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1861[0x10];                                    // 0x00A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UObject>                 WorldContextObject;                                // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1862[0x8];                                     // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerEquipItemToAllCharacters* EquipItemToAllCharacters(const class UObject* Param_WorldContextObject, const TArray<class UMarinerCMSItemDataAsset*>& Param_ItemsToEquip, bool bRanked);

	void OnProfileUpdated();
	void OnProfileUpdateFailed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerEquipItemToAllCharacters">();
	}
	static class UMarinerEquipItemToAllCharacters* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerEquipItemToAllCharacters>();
	}
};
static_assert(alignof(UMarinerEquipItemToAllCharacters) == 0x000008, "Wrong alignment on UMarinerEquipItemToAllCharacters");
static_assert(sizeof(UMarinerEquipItemToAllCharacters) == 0x0000C0, "Wrong size on UMarinerEquipItemToAllCharacters");
static_assert(offsetof(UMarinerEquipItemToAllCharacters, OnSentToServer) == 0x000030, "Member 'UMarinerEquipItemToAllCharacters::OnSentToServer' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToAllCharacters, OnSucceededOnServer) == 0x000040, "Member 'UMarinerEquipItemToAllCharacters::OnSucceededOnServer' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToAllCharacters, OnWorldNoLongerValid) == 0x000050, "Member 'UMarinerEquipItemToAllCharacters::OnWorldNoLongerValid' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToAllCharacters, OnProfileUpdateComplete) == 0x000060, "Member 'UMarinerEquipItemToAllCharacters::OnProfileUpdateComplete' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToAllCharacters, OnServerFailure) == 0x000070, "Member 'UMarinerEquipItemToAllCharacters::OnServerFailure' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToAllCharacters, OnFailedBeforeSending) == 0x000080, "Member 'UMarinerEquipItemToAllCharacters::OnFailedBeforeSending' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToAllCharacters, ItemsToEquip) == 0x000090, "Member 'UMarinerEquipItemToAllCharacters::ItemsToEquip' has a wrong offset!");
static_assert(offsetof(UMarinerEquipItemToAllCharacters, WorldContextObject) == 0x0000B0, "Member 'UMarinerEquipItemToAllCharacters::WorldContextObject' has a wrong offset!");

// Class Mariner.MarinerShockwave
// 0x00C0 (0x02D8 - 0x0218)
class AMarinerShockwave final : public AActor
{
public:
	uint8                                         Pad_1864[0x18];                                    // 0x0218(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasShockwaveFired;                                // 0x0230(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1865[0x7];                                     // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShockwaveDuration;                                 // 0x0238(0x0004)(Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumRadius;                                     // 0x023C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaximumRadius;                                     // 0x0240(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1866[0x4];                                     // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           ProjectileTypeExplodeBlacklist;                    // 0x0248(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_1867[0x8];                                     // 0x0258(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ExpansionCurve;                                    // 0x0260(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerSphereComponent*                ShockwaveCollisionComponent;                       // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerDamageType>         AOEDamage;                                         // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AController*                            ShockwaveInstigator;                               // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         ActorsToIgnoreWhenDoingDamage;                     // 0x0280(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UMarinerParticleSystemComponent*        ParticleSystemComponent;                           // 0x0290(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        ParticleEffect;                                    // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   OwningAbilityType;                                 // 0x02A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ProgressAsFloatEffectParamName;                    // 0x02C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ProgressAsVectorEffectParamName;                   // 0x02D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AuthorityManuallyAddIgnoredDamageActor(class AActor* Actor);
	void FireShockwave();
	void OnRep_HasShockwaveFired();
	void OnShockwaveExpired();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerShockwave">();
	}
	static class AMarinerShockwave* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerShockwave>();
	}
};
static_assert(alignof(AMarinerShockwave) == 0x000008, "Wrong alignment on AMarinerShockwave");
static_assert(sizeof(AMarinerShockwave) == 0x0002D8, "Wrong size on AMarinerShockwave");
static_assert(offsetof(AMarinerShockwave, bHasShockwaveFired) == 0x000230, "Member 'AMarinerShockwave::bHasShockwaveFired' has a wrong offset!");
static_assert(offsetof(AMarinerShockwave, ShockwaveDuration) == 0x000238, "Member 'AMarinerShockwave::ShockwaveDuration' has a wrong offset!");
static_assert(offsetof(AMarinerShockwave, MinimumRadius) == 0x00023C, "Member 'AMarinerShockwave::MinimumRadius' has a wrong offset!");
static_assert(offsetof(AMarinerShockwave, MaximumRadius) == 0x000240, "Member 'AMarinerShockwave::MaximumRadius' has a wrong offset!");
static_assert(offsetof(AMarinerShockwave, ProjectileTypeExplodeBlacklist) == 0x000248, "Member 'AMarinerShockwave::ProjectileTypeExplodeBlacklist' has a wrong offset!");
static_assert(offsetof(AMarinerShockwave, ExpansionCurve) == 0x000260, "Member 'AMarinerShockwave::ExpansionCurve' has a wrong offset!");
static_assert(offsetof(AMarinerShockwave, ShockwaveCollisionComponent) == 0x000268, "Member 'AMarinerShockwave::ShockwaveCollisionComponent' has a wrong offset!");
static_assert(offsetof(AMarinerShockwave, AOEDamage) == 0x000270, "Member 'AMarinerShockwave::AOEDamage' has a wrong offset!");
static_assert(offsetof(AMarinerShockwave, ShockwaveInstigator) == 0x000278, "Member 'AMarinerShockwave::ShockwaveInstigator' has a wrong offset!");
static_assert(offsetof(AMarinerShockwave, ActorsToIgnoreWhenDoingDamage) == 0x000280, "Member 'AMarinerShockwave::ActorsToIgnoreWhenDoingDamage' has a wrong offset!");
static_assert(offsetof(AMarinerShockwave, ParticleSystemComponent) == 0x000290, "Member 'AMarinerShockwave::ParticleSystemComponent' has a wrong offset!");
static_assert(offsetof(AMarinerShockwave, ParticleEffect) == 0x000298, "Member 'AMarinerShockwave::ParticleEffect' has a wrong offset!");
static_assert(offsetof(AMarinerShockwave, OwningAbilityType) == 0x0002A0, "Member 'AMarinerShockwave::OwningAbilityType' has a wrong offset!");
static_assert(offsetof(AMarinerShockwave, ProgressAsFloatEffectParamName) == 0x0002C8, "Member 'AMarinerShockwave::ProgressAsFloatEffectParamName' has a wrong offset!");
static_assert(offsetof(AMarinerShockwave, ProgressAsVectorEffectParamName) == 0x0002D0, "Member 'AMarinerShockwave::ProgressAsVectorEffectParamName' has a wrong offset!");

// Class Mariner.MarinerExplosionEffect
// 0x0100 (0x0318 - 0x0218)
class AMarinerExplosionEffect final : public AActor
{
public:
	bool                                          bDirectHit;                                        // 0x0218(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPhysicalSurface                              ImpactSurfaceType;                                 // 0x0219(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1868[0x6];                                     // 0x021A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           AkAudioComponent;                                  // 0x0220(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        Root;                                              // 0x0228(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*               VFXParticleComponent;                              // 0x0230(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*               DirectHitFXParticleComponent;                      // 0x0238(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*               AreaOfEffectParticleComponent;                     // 0x0240(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               AreaOfEffectDynamicMat;                            // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystem*                        ExplosionFX;                                       // 0x0250(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystem*                        DirectHitFX;                                       // 0x0258(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               ExplosionFXRelativeRotation;                       // 0x0260(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1869[0x4];                                     // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExplosionEffectsData                  AreaOfEffect;                                      // 0x0270(0x0048)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	class UAkAudioEvent*                          ExplosionSound;                                    // 0x02B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAkAudioEvent*                          DirectHitSound;                                    // 0x02C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<EPhysicalSurface, struct FSurfaceEffectsData> SurfaceEffects;                                    // 0x02C8(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerExplosionEffect">();
	}
	static class AMarinerExplosionEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerExplosionEffect>();
	}
};
static_assert(alignof(AMarinerExplosionEffect) == 0x000008, "Wrong alignment on AMarinerExplosionEffect");
static_assert(sizeof(AMarinerExplosionEffect) == 0x000318, "Wrong size on AMarinerExplosionEffect");
static_assert(offsetof(AMarinerExplosionEffect, bDirectHit) == 0x000218, "Member 'AMarinerExplosionEffect::bDirectHit' has a wrong offset!");
static_assert(offsetof(AMarinerExplosionEffect, ImpactSurfaceType) == 0x000219, "Member 'AMarinerExplosionEffect::ImpactSurfaceType' has a wrong offset!");
static_assert(offsetof(AMarinerExplosionEffect, AkAudioComponent) == 0x000220, "Member 'AMarinerExplosionEffect::AkAudioComponent' has a wrong offset!");
static_assert(offsetof(AMarinerExplosionEffect, Root) == 0x000228, "Member 'AMarinerExplosionEffect::Root' has a wrong offset!");
static_assert(offsetof(AMarinerExplosionEffect, VFXParticleComponent) == 0x000230, "Member 'AMarinerExplosionEffect::VFXParticleComponent' has a wrong offset!");
static_assert(offsetof(AMarinerExplosionEffect, DirectHitFXParticleComponent) == 0x000238, "Member 'AMarinerExplosionEffect::DirectHitFXParticleComponent' has a wrong offset!");
static_assert(offsetof(AMarinerExplosionEffect, AreaOfEffectParticleComponent) == 0x000240, "Member 'AMarinerExplosionEffect::AreaOfEffectParticleComponent' has a wrong offset!");
static_assert(offsetof(AMarinerExplosionEffect, AreaOfEffectDynamicMat) == 0x000248, "Member 'AMarinerExplosionEffect::AreaOfEffectDynamicMat' has a wrong offset!");
static_assert(offsetof(AMarinerExplosionEffect, ExplosionFX) == 0x000250, "Member 'AMarinerExplosionEffect::ExplosionFX' has a wrong offset!");
static_assert(offsetof(AMarinerExplosionEffect, DirectHitFX) == 0x000258, "Member 'AMarinerExplosionEffect::DirectHitFX' has a wrong offset!");
static_assert(offsetof(AMarinerExplosionEffect, ExplosionFXRelativeRotation) == 0x000260, "Member 'AMarinerExplosionEffect::ExplosionFXRelativeRotation' has a wrong offset!");
static_assert(offsetof(AMarinerExplosionEffect, AreaOfEffect) == 0x000270, "Member 'AMarinerExplosionEffect::AreaOfEffect' has a wrong offset!");
static_assert(offsetof(AMarinerExplosionEffect, ExplosionSound) == 0x0002B8, "Member 'AMarinerExplosionEffect::ExplosionSound' has a wrong offset!");
static_assert(offsetof(AMarinerExplosionEffect, DirectHitSound) == 0x0002C0, "Member 'AMarinerExplosionEffect::DirectHitSound' has a wrong offset!");
static_assert(offsetof(AMarinerExplosionEffect, SurfaceEffects) == 0x0002C8, "Member 'AMarinerExplosionEffect::SurfaceEffects' has a wrong offset!");

// Class Mariner.MarinerFastArenaBounds
// 0x00C0 (0x02D8 - 0x0218)
class AMarinerFastArenaBounds final : public AActor
{
public:
	bool                                          bDoCleanUp;                                        // 0x0218(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         CollectionsToTest;                                 // 0x0219(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFlipSplineNormals;                                // 0x021A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_186A[0x1];                                     // 0x021B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaximumMaterialRelevantCharacters;                 // 0x021C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FloorHeight;                                       // 0x0220(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CeilingHeight;                                     // 0x0224(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KORelevancyTime;                                   // 0x0228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KORelevancyValueBias;                              // 0x022C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AMarinerFastArenaKOCollider*>    RegisteredArenaColliders;                          // 0x0230(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         DangerDistance;                                    // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_186B[0x4];                                     // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        RedTeamKnockoutPS;                                 // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UParticleSystemComponent*>       RedTeamEmitters;                                   // 0x0250(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UParticleSystem*                        BlueTeamKnockoutPS;                                // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UParticleSystemComponent*>       BlueTeamEmitters;                                  // 0x0268(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UParticleSystem*                        GenericKnockoutPS;                                 // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UParticleSystemComponent*>       GenericEmitters;                                   // 0x0280(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class USplineComponent*                       SplineComponent;                                   // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialParameterCollection*           LevelBoundsParameterCollection;                    // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialParameterCollectionInstance*   LevelBoundsParameterCollectionInst;                // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_186C[0x20];                                    // 0x02A8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         MaterialRelevantActors;                            // 0x02C8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	bool IsPointInside2DBounds(const struct FVector& PointToTest, float* OutDistToClosestSurface, struct FVector* OutPointOnClosestSurface, struct FVector* OutSurfaceNormal);
	bool IsPointInsideArenaBounds(const struct FVector& PointToTest, float* OutDistToClosestSurface, struct FVector* OutPointOnClosestSurface, struct FVector* OutSurfaceNormal);
	void MulticastKnockout(int8 KnockedOutTeamIndex, const struct FVector_NetQuantize& Position, const struct FVector_NetQuantizeNormal& Normal);
	void TriggerMaterialSort();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFastArenaBounds">();
	}
	static class AMarinerFastArenaBounds* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerFastArenaBounds>();
	}
};
static_assert(alignof(AMarinerFastArenaBounds) == 0x000008, "Wrong alignment on AMarinerFastArenaBounds");
static_assert(sizeof(AMarinerFastArenaBounds) == 0x0002D8, "Wrong size on AMarinerFastArenaBounds");
static_assert(offsetof(AMarinerFastArenaBounds, bDoCleanUp) == 0x000218, "Member 'AMarinerFastArenaBounds::bDoCleanUp' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, CollectionsToTest) == 0x000219, "Member 'AMarinerFastArenaBounds::CollectionsToTest' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, bFlipSplineNormals) == 0x00021A, "Member 'AMarinerFastArenaBounds::bFlipSplineNormals' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, MaximumMaterialRelevantCharacters) == 0x00021C, "Member 'AMarinerFastArenaBounds::MaximumMaterialRelevantCharacters' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, FloorHeight) == 0x000220, "Member 'AMarinerFastArenaBounds::FloorHeight' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, CeilingHeight) == 0x000224, "Member 'AMarinerFastArenaBounds::CeilingHeight' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, KORelevancyTime) == 0x000228, "Member 'AMarinerFastArenaBounds::KORelevancyTime' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, KORelevancyValueBias) == 0x00022C, "Member 'AMarinerFastArenaBounds::KORelevancyValueBias' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, RegisteredArenaColliders) == 0x000230, "Member 'AMarinerFastArenaBounds::RegisteredArenaColliders' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, DangerDistance) == 0x000240, "Member 'AMarinerFastArenaBounds::DangerDistance' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, RedTeamKnockoutPS) == 0x000248, "Member 'AMarinerFastArenaBounds::RedTeamKnockoutPS' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, RedTeamEmitters) == 0x000250, "Member 'AMarinerFastArenaBounds::RedTeamEmitters' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, BlueTeamKnockoutPS) == 0x000260, "Member 'AMarinerFastArenaBounds::BlueTeamKnockoutPS' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, BlueTeamEmitters) == 0x000268, "Member 'AMarinerFastArenaBounds::BlueTeamEmitters' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, GenericKnockoutPS) == 0x000278, "Member 'AMarinerFastArenaBounds::GenericKnockoutPS' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, GenericEmitters) == 0x000280, "Member 'AMarinerFastArenaBounds::GenericEmitters' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, SplineComponent) == 0x000290, "Member 'AMarinerFastArenaBounds::SplineComponent' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, LevelBoundsParameterCollection) == 0x000298, "Member 'AMarinerFastArenaBounds::LevelBoundsParameterCollection' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, LevelBoundsParameterCollectionInst) == 0x0002A0, "Member 'AMarinerFastArenaBounds::LevelBoundsParameterCollectionInst' has a wrong offset!");
static_assert(offsetof(AMarinerFastArenaBounds, MaterialRelevantActors) == 0x0002C8, "Member 'AMarinerFastArenaBounds::MaterialRelevantActors' has a wrong offset!");

// Class Mariner.MarinerWeapon
// 0x0250 (0x0468 - 0x0218)
class AMarinerWeapon final : public AActor
{
public:
	uint8                                         Pad_1870[0x60];                                    // 0x0218(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCanvasIcon                            PrimaryIcon;                                       // 0x0278(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCanvasIcon                            SecondaryIcon;                                     // 0x0290(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCanvasIcon                            PrimaryClipIcon;                                   // 0x02A8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCanvasIcon                            SecondaryClipIcon;                                 // 0x02C0(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                CustomHudWidget;                                   // 0x02D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            CustomHudInstance;                                 // 0x02E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmmoIconsCount;                                    // 0x02E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrimaryClipIconOffset;                             // 0x02EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondaryClipIconOffset;                           // 0x02F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1871[0x4];                                     // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCanvasIcon                            Crosshair[0x5];                                    // 0x02F8(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCanvasIcon                            AimingCrosshair[0x5];                              // 0x0370(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UseLaserDot;                                       // 0x03E8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCustomCrosshair;                                // 0x03E9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCustomAimingCrosshair;                          // 0x03EA(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideCrosshairWhileNotAiming;                      // 0x03EB(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1872[0x4];                                     // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnReloadStarted;                                   // 0x03F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnReloadStopped;                                   // 0x0400(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMarinerParticleSystemComponent*        MuzzleFlashParticleSystem;                         // 0x0410(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarinerCharacter*                      MyPawn;                                            // 0x0418(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMaterialInstanceDynamic*>       MeshMIDs;                                          // 0x0420(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UAkComponent*                           AkSoundComponent;                                  // 0x0430(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ReloadSound;                                       // 0x0438(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerWeaponMontage*                  ReloadAnimation;                                   // 0x0440(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerWeaponMontage*                  EquipAnimation;                                    // 0x0448(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1873[0x18];                                    // 0x0450(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEquiped();
	void OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageStarted(class UAnimMontage* Montage);
	void OnRep_MyPawn();
	float PlayMarinerWeaponMontage(const class UMarinerWeaponMontage* WeaponMontage, float PlayRate, class FName StartSectionName, class UObject* OptionalMontageListener);
	void StopMarinerWeaponMontage(float BlendOutTime, const class UMarinerWeaponMontage* WeaponMontage);

	EMarinerWeaponState GetCurrentState() const;
	struct FVector GetMuzzleDirection(class FName MuzzleAttachPoint) const;
	struct FVector GetMuzzleLocation(class FName MuzzleAttachPoint) const;
	class AMarinerCharacter* GetPawnOwner() const;
	class USkeletalMeshComponent* GetWeaponMesh() const;
	bool IsFirstPerson() const;
	bool IsReloading() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerWeapon">();
	}
	static class AMarinerWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerWeapon>();
	}
};
static_assert(alignof(AMarinerWeapon) == 0x000008, "Wrong alignment on AMarinerWeapon");
static_assert(sizeof(AMarinerWeapon) == 0x000468, "Wrong size on AMarinerWeapon");
static_assert(offsetof(AMarinerWeapon, PrimaryIcon) == 0x000278, "Member 'AMarinerWeapon::PrimaryIcon' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, SecondaryIcon) == 0x000290, "Member 'AMarinerWeapon::SecondaryIcon' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, PrimaryClipIcon) == 0x0002A8, "Member 'AMarinerWeapon::PrimaryClipIcon' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, SecondaryClipIcon) == 0x0002C0, "Member 'AMarinerWeapon::SecondaryClipIcon' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, CustomHudWidget) == 0x0002D8, "Member 'AMarinerWeapon::CustomHudWidget' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, CustomHudInstance) == 0x0002E0, "Member 'AMarinerWeapon::CustomHudInstance' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, AmmoIconsCount) == 0x0002E8, "Member 'AMarinerWeapon::AmmoIconsCount' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, PrimaryClipIconOffset) == 0x0002EC, "Member 'AMarinerWeapon::PrimaryClipIconOffset' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, SecondaryClipIconOffset) == 0x0002F0, "Member 'AMarinerWeapon::SecondaryClipIconOffset' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, Crosshair) == 0x0002F8, "Member 'AMarinerWeapon::Crosshair' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, AimingCrosshair) == 0x000370, "Member 'AMarinerWeapon::AimingCrosshair' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, UseLaserDot) == 0x0003E8, "Member 'AMarinerWeapon::UseLaserDot' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, UseCustomCrosshair) == 0x0003E9, "Member 'AMarinerWeapon::UseCustomCrosshair' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, UseCustomAimingCrosshair) == 0x0003EA, "Member 'AMarinerWeapon::UseCustomAimingCrosshair' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, bHideCrosshairWhileNotAiming) == 0x0003EB, "Member 'AMarinerWeapon::bHideCrosshairWhileNotAiming' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, OnReloadStarted) == 0x0003F0, "Member 'AMarinerWeapon::OnReloadStarted' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, OnReloadStopped) == 0x000400, "Member 'AMarinerWeapon::OnReloadStopped' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, MuzzleFlashParticleSystem) == 0x000410, "Member 'AMarinerWeapon::MuzzleFlashParticleSystem' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, MyPawn) == 0x000418, "Member 'AMarinerWeapon::MyPawn' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, MeshMIDs) == 0x000420, "Member 'AMarinerWeapon::MeshMIDs' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, AkSoundComponent) == 0x000430, "Member 'AMarinerWeapon::AkSoundComponent' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, ReloadSound) == 0x000438, "Member 'AMarinerWeapon::ReloadSound' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, ReloadAnimation) == 0x000440, "Member 'AMarinerWeapon::ReloadAnimation' has a wrong offset!");
static_assert(offsetof(AMarinerWeapon, EquipAnimation) == 0x000448, "Member 'AMarinerWeapon::EquipAnimation' has a wrong offset!");

// Class Mariner.MarinerFastArenaKOSphere
// 0x0008 (0x0230 - 0x0228)
class AMarinerFastArenaKOSphere final : public AMarinerFastArenaKOCollider
{
public:
	float                                         SphereRadius;                                      // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1879[0x4];                                     // 0x022C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFastArenaKOSphere">();
	}
	static class AMarinerFastArenaKOSphere* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerFastArenaKOSphere>();
	}
};
static_assert(alignof(AMarinerFastArenaKOSphere) == 0x000008, "Wrong alignment on AMarinerFastArenaKOSphere");
static_assert(sizeof(AMarinerFastArenaKOSphere) == 0x000230, "Wrong size on AMarinerFastArenaKOSphere");
static_assert(offsetof(AMarinerFastArenaKOSphere, SphereRadius) == 0x000228, "Member 'AMarinerFastArenaKOSphere::SphereRadius' has a wrong offset!");

// Class Mariner.MarinerFastBoundsCollision
// 0x0018 (0x0100 - 0x00E8)
class UMarinerFastBoundsCollision final : public UMarinerFastCollisionComponent
{
public:
	EFastCollisionPrimitiveType                   PreferredPrimitiveType;                            // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_187A[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoundsSizeOffset;                                  // 0x00EC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceAABB;                                        // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_187B[0x7];                                     // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFastBoundsCollision">();
	}
	static class UMarinerFastBoundsCollision* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerFastBoundsCollision>();
	}
};
static_assert(alignof(UMarinerFastBoundsCollision) == 0x000008, "Wrong alignment on UMarinerFastBoundsCollision");
static_assert(sizeof(UMarinerFastBoundsCollision) == 0x000100, "Wrong size on UMarinerFastBoundsCollision");
static_assert(offsetof(UMarinerFastBoundsCollision, PreferredPrimitiveType) == 0x0000E8, "Member 'UMarinerFastBoundsCollision::PreferredPrimitiveType' has a wrong offset!");
static_assert(offsetof(UMarinerFastBoundsCollision, BoundsSizeOffset) == 0x0000EC, "Member 'UMarinerFastBoundsCollision::BoundsSizeOffset' has a wrong offset!");
static_assert(offsetof(UMarinerFastBoundsCollision, bForceAABB) == 0x0000F8, "Member 'UMarinerFastBoundsCollision::bForceAABB' has a wrong offset!");

// Class Mariner.MarinerSkinDataAsset
// 0x0150 (0x0180 - 0x0030)
class UMarinerSkinDataAsset : public UDataAsset
{
public:
	class USkeletalMesh*                          CharacterMesh1P;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMesh*                          CharacterMesh3P;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMaterialOverride>              CharacterMaterialOverrides1P;                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMaterialOverride>              CharacterMaterialOverrides3P;                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UAnimInstance>              CharacterMesh1PAnimBP;                             // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   CharacterMesh3PAnimBP;                             // 0x0068(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UAnimInstance>              LiteCharacterMeshAnimBP;                           // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UAnimMontage*>                   MainMenuGreetingsAnimations;                       // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UAnimMontage*>                   MainMenuFidgetAnimations;                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UAnimMontage*>                   MainMenuTickleAnimations;                          // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UAnimMontage*>                   MainMenuDizzyAnimations;                           // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UAnimMontage*                           MainMenuReturnTrailAnimation;                      // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UAnimMontage*>                   MainMenuSkinSelectedAnimations;                    // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UAnimMontage*>                   PregameSpawnAnimations;                            // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UAnimMontage*>                   PregameBlastOffAnimations;                         // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UAnimMontage*>                   PregameIdleAnimations;                             // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UAnimMontage*>                   PostgameSpawnAnimations;                           // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UAnimMontage*>                   PostgameVictoryAnimations;                         // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UAnimMontage*>                   PostgameDefeatAnimations;                          // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UAnimMontage*>                   PostgameDrawAnimations;                            // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UAnimMontage*>                   PostgameIdleAnimations;                            // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class AActor>                     CustomPedestalInterior;                            // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AActor>                     CustomPedestalExterior;                            // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class FString GetSkinAssetAsString(const TSoftObjectPtr<class UMarinerSkinDataAsset>& Asset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSkinDataAsset">();
	}
	static class UMarinerSkinDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSkinDataAsset>();
	}
};
static_assert(alignof(UMarinerSkinDataAsset) == 0x000008, "Wrong alignment on UMarinerSkinDataAsset");
static_assert(sizeof(UMarinerSkinDataAsset) == 0x000180, "Wrong size on UMarinerSkinDataAsset");
static_assert(offsetof(UMarinerSkinDataAsset, CharacterMesh1P) == 0x000030, "Member 'UMarinerSkinDataAsset::CharacterMesh1P' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, CharacterMesh3P) == 0x000038, "Member 'UMarinerSkinDataAsset::CharacterMesh3P' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, CharacterMaterialOverrides1P) == 0x000040, "Member 'UMarinerSkinDataAsset::CharacterMaterialOverrides1P' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, CharacterMaterialOverrides3P) == 0x000050, "Member 'UMarinerSkinDataAsset::CharacterMaterialOverrides3P' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, CharacterMesh1PAnimBP) == 0x000060, "Member 'UMarinerSkinDataAsset::CharacterMesh1PAnimBP' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, CharacterMesh3PAnimBP) == 0x000068, "Member 'UMarinerSkinDataAsset::CharacterMesh3PAnimBP' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, LiteCharacterMeshAnimBP) == 0x000090, "Member 'UMarinerSkinDataAsset::LiteCharacterMeshAnimBP' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, MainMenuGreetingsAnimations) == 0x000098, "Member 'UMarinerSkinDataAsset::MainMenuGreetingsAnimations' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, MainMenuFidgetAnimations) == 0x0000A8, "Member 'UMarinerSkinDataAsset::MainMenuFidgetAnimations' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, MainMenuTickleAnimations) == 0x0000B8, "Member 'UMarinerSkinDataAsset::MainMenuTickleAnimations' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, MainMenuDizzyAnimations) == 0x0000C8, "Member 'UMarinerSkinDataAsset::MainMenuDizzyAnimations' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, MainMenuReturnTrailAnimation) == 0x0000D8, "Member 'UMarinerSkinDataAsset::MainMenuReturnTrailAnimation' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, MainMenuSkinSelectedAnimations) == 0x0000E0, "Member 'UMarinerSkinDataAsset::MainMenuSkinSelectedAnimations' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, PregameSpawnAnimations) == 0x0000F0, "Member 'UMarinerSkinDataAsset::PregameSpawnAnimations' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, PregameBlastOffAnimations) == 0x000100, "Member 'UMarinerSkinDataAsset::PregameBlastOffAnimations' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, PregameIdleAnimations) == 0x000110, "Member 'UMarinerSkinDataAsset::PregameIdleAnimations' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, PostgameSpawnAnimations) == 0x000120, "Member 'UMarinerSkinDataAsset::PostgameSpawnAnimations' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, PostgameVictoryAnimations) == 0x000130, "Member 'UMarinerSkinDataAsset::PostgameVictoryAnimations' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, PostgameDefeatAnimations) == 0x000140, "Member 'UMarinerSkinDataAsset::PostgameDefeatAnimations' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, PostgameDrawAnimations) == 0x000150, "Member 'UMarinerSkinDataAsset::PostgameDrawAnimations' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, PostgameIdleAnimations) == 0x000160, "Member 'UMarinerSkinDataAsset::PostgameIdleAnimations' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, CustomPedestalInterior) == 0x000170, "Member 'UMarinerSkinDataAsset::CustomPedestalInterior' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset, CustomPedestalExterior) == 0x000178, "Member 'UMarinerSkinDataAsset::CustomPedestalExterior' has a wrong offset!");

// Class Mariner.MarinerSkinDataAsset_Diver
// 0x0038 (0x01B8 - 0x0180)
class UMarinerSkinDataAsset_Diver final : public UMarinerSkinDataAsset
{
public:
	class USkeletalMesh*                          PuddleFormMesh;                                    // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMaterialOverride>              PuddleFormMaterialOverrides;                       // 0x0188(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UParticleSystem*                        PrimaryMedChargeFX_1P;                             // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        PrimaryMaxChargeFX_1P;                             // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        PrimaryMedChargeFX_3P;                             // 0x01A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        PrimaryMaxChargeFX_3P;                             // 0x01B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSkinDataAsset_Diver">();
	}
	static class UMarinerSkinDataAsset_Diver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSkinDataAsset_Diver>();
	}
};
static_assert(alignof(UMarinerSkinDataAsset_Diver) == 0x000008, "Wrong alignment on UMarinerSkinDataAsset_Diver");
static_assert(sizeof(UMarinerSkinDataAsset_Diver) == 0x0001B8, "Wrong size on UMarinerSkinDataAsset_Diver");
static_assert(offsetof(UMarinerSkinDataAsset_Diver, PuddleFormMesh) == 0x000180, "Member 'UMarinerSkinDataAsset_Diver::PuddleFormMesh' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset_Diver, PuddleFormMaterialOverrides) == 0x000188, "Member 'UMarinerSkinDataAsset_Diver::PuddleFormMaterialOverrides' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset_Diver, PrimaryMedChargeFX_1P) == 0x000198, "Member 'UMarinerSkinDataAsset_Diver::PrimaryMedChargeFX_1P' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset_Diver, PrimaryMaxChargeFX_1P) == 0x0001A0, "Member 'UMarinerSkinDataAsset_Diver::PrimaryMaxChargeFX_1P' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset_Diver, PrimaryMedChargeFX_3P) == 0x0001A8, "Member 'UMarinerSkinDataAsset_Diver::PrimaryMedChargeFX_3P' has a wrong offset!");
static_assert(offsetof(UMarinerSkinDataAsset_Diver, PrimaryMaxChargeFX_3P) == 0x0001B0, "Member 'UMarinerSkinDataAsset_Diver::PrimaryMaxChargeFX_3P' has a wrong offset!");

// Class Mariner.MarinerFastCapsuleComponent
// 0x0008 (0x00F0 - 0x00E8)
class UMarinerFastCapsuleComponent final : public UMarinerFastCollisionComponent
{
public:
	float                                         RadiusScale;                                       // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HalfHeightScale;                                   // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFastCapsuleComponent">();
	}
	static class UMarinerFastCapsuleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerFastCapsuleComponent>();
	}
};
static_assert(alignof(UMarinerFastCapsuleComponent) == 0x000008, "Wrong alignment on UMarinerFastCapsuleComponent");
static_assert(sizeof(UMarinerFastCapsuleComponent) == 0x0000F0, "Wrong size on UMarinerFastCapsuleComponent");
static_assert(offsetof(UMarinerFastCapsuleComponent, RadiusScale) == 0x0000E8, "Member 'UMarinerFastCapsuleComponent::RadiusScale' has a wrong offset!");
static_assert(offsetof(UMarinerFastCapsuleComponent, HalfHeightScale) == 0x0000EC, "Member 'UMarinerFastCapsuleComponent::HalfHeightScale' has a wrong offset!");

// Class Mariner.FastCollisionManager
// 0x0020 (0x0048 - 0x0028)
class UFastCollisionManager final : public UObject
{
public:
	TArray<class UMarinerFastCollisionCollection*> ColliderCollections;                               // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMarinerProjectileFastOverlapListenerData> ProjectileFastOverlapListeners;                    // 0x0038(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	const TArray<class UMarinerFastCollisionComponent*> GetColliders(EMarinerFastCollisionCollectionFlags Collection) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FastCollisionManager">();
	}
	static class UFastCollisionManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFastCollisionManager>();
	}
};
static_assert(alignof(UFastCollisionManager) == 0x000008, "Wrong alignment on UFastCollisionManager");
static_assert(sizeof(UFastCollisionManager) == 0x000048, "Wrong size on UFastCollisionManager");
static_assert(offsetof(UFastCollisionManager, ColliderCollections) == 0x000028, "Member 'UFastCollisionManager::ColliderCollections' has a wrong offset!");
static_assert(offsetof(UFastCollisionManager, ProjectileFastOverlapListeners) == 0x000038, "Member 'UFastCollisionManager::ProjectileFastOverlapListeners' has a wrong offset!");

// Class Mariner.MarinerTask_MatSwap
// 0x0068 (0x00E8 - 0x0080)
class UMarinerTask_MatSwap final : public UAbilityTask
{
public:
	UMulticastInlineDelegateProperty_             OnMatSwapWaitStarted;                              // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMatSwapStarted;                                  // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMatSwapFinishedSuccessfully;                     // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMatSwapInterrupted;                              // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_187D[0x20];                                    // 0x00C0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	EMarinerMatSwapState                          MatSwapState;                                      // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerMatSwapInterrupt                      InterruptType;                                     // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_187E[0x6];                                     // 0x00E2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_MatSwap* MatSwapCharacter(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, class UMaterialInterface* MatSwappingMaterial, float WaitingToMatSwapDuration, float MatSwapDuration, bool bRevertMatOnThrowItem, bool bRevertMatOnDropItem, bool bRevertMatOnCatchItem);

	void MatSwapServer();
	void OnItemCaught_Interrupt(class AMarinerCharacter* Character, EMarinerItemSlot ItemSlot);
	void OnItemCaught_MatSwap(class AMarinerCharacter* Character, EMarinerItemSlot ItemSlot);
	void OnItemDropped_Interrupt(class AMarinerCharacter* Character, EMarinerItemSlot ItemSlot);
	void OnItemRelease_RevertMat(class AMarinerCharacter* Character, EMarinerItemSlot ItemSlot);
	void OnItemThrown_Interrupt(class AMarinerCharacter* Character, EMarinerItemSlot ItemSlot);
	void RevertMatServer();

	EMarinerMatSwapInterrupt GetInterruptState() const;
	EMarinerMatSwapState GetMatSwapState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_MatSwap">();
	}
	static class UMarinerTask_MatSwap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_MatSwap>();
	}
};
static_assert(alignof(UMarinerTask_MatSwap) == 0x000008, "Wrong alignment on UMarinerTask_MatSwap");
static_assert(sizeof(UMarinerTask_MatSwap) == 0x0000E8, "Wrong size on UMarinerTask_MatSwap");
static_assert(offsetof(UMarinerTask_MatSwap, OnMatSwapWaitStarted) == 0x000080, "Member 'UMarinerTask_MatSwap::OnMatSwapWaitStarted' has a wrong offset!");
static_assert(offsetof(UMarinerTask_MatSwap, OnMatSwapStarted) == 0x000090, "Member 'UMarinerTask_MatSwap::OnMatSwapStarted' has a wrong offset!");
static_assert(offsetof(UMarinerTask_MatSwap, OnMatSwapFinishedSuccessfully) == 0x0000A0, "Member 'UMarinerTask_MatSwap::OnMatSwapFinishedSuccessfully' has a wrong offset!");
static_assert(offsetof(UMarinerTask_MatSwap, OnMatSwapInterrupted) == 0x0000B0, "Member 'UMarinerTask_MatSwap::OnMatSwapInterrupted' has a wrong offset!");
static_assert(offsetof(UMarinerTask_MatSwap, MatSwapState) == 0x0000E0, "Member 'UMarinerTask_MatSwap::MatSwapState' has a wrong offset!");
static_assert(offsetof(UMarinerTask_MatSwap, InterruptType) == 0x0000E1, "Member 'UMarinerTask_MatSwap::InterruptType' has a wrong offset!");

// Class Mariner.MarinerFastSphereComponent
// 0x0008 (0x00F0 - 0x00E8)
class UMarinerFastSphereComponent final : public UMarinerFastCollisionComponent
{
public:
	class UFastCollisionManager*                  Manager;                                           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool DoProjectileSweep(bool bIgnoreDamageableHitsBehind, const struct FVector& Start, const struct FVector& End, struct FHitResult* HitResult);

	bool SweepAgainstFastCollider(const class UMarinerFastCollisionComponent* Other, const struct FVector& StartPoint, const struct FVector& EndPoint, struct FVector* OutCollisionPoint, struct FVector* OutCollisionNormal) const;
	bool SweepCollideWithBox(const class UMarinerFastCollisionComponent* Other, const struct FVector& StartPoint, const struct FVector& EndPoint, struct FVector* OutCollisionPoint, struct FVector* OutCollisionNormal) const;
	bool SweepCollideWithCapsule(const class UMarinerFastCollisionComponent* Other, const struct FVector& StartPoint, const struct FVector& EndPoint, struct FVector* OutCollisionPoint, struct FVector* OutCollisionNormal) const;
	bool SweepCollideWithSphere(const class UMarinerFastCollisionComponent* Other, const struct FVector& StartPoint, const struct FVector& EndPoint, struct FVector* OutCollisionPoint, struct FVector* OutCollisionNormal) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFastSphereComponent">();
	}
	static class UMarinerFastSphereComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerFastSphereComponent>();
	}
};
static_assert(alignof(UMarinerFastSphereComponent) == 0x000008, "Wrong alignment on UMarinerFastSphereComponent");
static_assert(sizeof(UMarinerFastSphereComponent) == 0x0000F0, "Wrong size on UMarinerFastSphereComponent");
static_assert(offsetof(UMarinerFastSphereComponent, Manager) == 0x0000E8, "Member 'UMarinerFastSphereComponent::Manager' has a wrong offset!");

// Class Mariner.MarinerProjectileMoveComponent
// 0x0270 (0x0440 - 0x01D0)
#pragma pack(push, 0x1)
class alignas(0x10) UMarinerProjectileMoveComponent : public UProjectileMovementComponent
{
public:
	UMulticastInlineDelegateProperty_             OnStickAttemptNotify;                              // 0x01D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnStuckToObject;                                   // 0x01E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnFailedToStickToObject;                           // 0x01F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  HomingPreventionTags;                              // 0x0200(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bIgnoreHomingPreventionTagsWhenHomingToInstigator; // 0x0220(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_188B[0x5F];                                    // 0x0221(0x005F)(Fixing Size After Last Property [ Dumper-7 ])
	ENetworkSmoothingMode                         NetworkSmoothingMode;                              // 0x0280(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_188C[0x7];                                     // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NetworkMaxSmoothUpdateDistance;                    // 0x0288(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NetworkNoSmoothUpdateDistance;                     // 0x028C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NetworkSimulatedSmoothLocationTime;                // 0x0290(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NetworkSimulatedSmoothRotationTime;                // 0x0294(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerLastTransformUpdateTimeStamp;                // 0x0298(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerStickToObjectReplicationData   StickToObjectData;                                 // 0x029C(0x0090)(Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bShouldLobProjectile;                              // 0x032C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_188D[0x3];                                     // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LobDistance;                                       // 0x0330(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFavorHighArc;                                     // 0x0334(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_188E[0x3];                                     // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RotationRate;                                      // 0x0338(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                PivotTranslation;                                  // 0x0344(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bRotationInLocalSpace : 1;                         // 0x0350(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_188F[0x3];                                     // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IgnoreBounceCollisionChannelFlags;                 // 0x0354(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowVisualOffsetAfterBounce;                     // 0x0358(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1890[0x3];                                     // 0x0359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxBounces;                                        // 0x035C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1891[0x4];                                     // 0x0360(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UniqueBounceMinimumDistance;                       // 0x0364(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStickToImpactedObject;                            // 0x0368(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1892[0x7];                                     // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           StickableObjectTypeBlacklist;                      // 0x0370(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           NonStickableObjectNotifyList;                      // 0x0380(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<EObjectTypeQuery>                      StickableObjectCollisionTypes;                     // 0x0390(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         StickableObjectDetectionRadius;                    // 0x03A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StickingToObjectPaddingDistance;                   // 0x03A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SweepForStickablesRange;                           // 0x03A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               StickyRotationOffset;                              // 0x03AC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1893[0x1C];                                    // 0x03B8(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	EMarinerHomingPolicy                          HomingPolicy;                                      // 0x03D4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1894[0x3];                                     // 0x03D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketOnHomingTarget;                              // 0x03D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHomingIsDirectionBased;                           // 0x03E0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHomingIsLineBased;                                // 0x03E1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1895[0x2];                                     // 0x03E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinRotationalSpeedInDegrees;                       // 0x03E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRotationalSpeedInDegrees;                       // 0x03E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurnThresholdBeforeUsingUpVector;                  // 0x03EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldUseSpawnPointAsHomingLineSource;            // 0x03F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1896[0x3];                                     // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IdealAngleOfApproachInDegrees;                     // 0x03F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurningRadius;                                     // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxDeccelerationOfUnproductiveMovement;            // 0x03FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ConstantForceAlongHomingLine;                      // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                HomingLineStart;                                   // 0x0404(0x000C)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1897[0x8];                                     // 0x0410(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStickingToImpactedObject;                         // 0x0418(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1898[0x3];                                     // 0x0419(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BounceAffectSpeedCooldown;                         // 0x041C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1899[0x18];                                    // 0x0420(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetLobDistance();
	void HandleBounceCount(const struct FHitResult& Hit);
	bool IsTargetValidForHoming(class AActor* PotentialHomingTarget);
	void OnRep_StickToObjectData();
	void ResetBounceDataOnEnabled();
	void SetHomingPolicy(EMarinerHomingPolicy NewHomingPolicy);
	void SetMaxRotationalSpeedInDegrees(float NewMaxRotationalSpeedInDegrees);
	void SetMinRotationalSpeedInDegrees(float NewMinRotationalSpeedInDegrees);
	void SetTurnThresholdBeforeUsingUpVector(float NewTurnThresholdBeforeUsingUpVector);
	bool TrySetHomingTargetComponent(class USceneComponent* InHomingTargetComponent, class FName InSocketName);

	bool DidLastBounceAffectSpeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerProjectileMoveComponent">();
	}
	static class UMarinerProjectileMoveComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerProjectileMoveComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UMarinerProjectileMoveComponent) == 0x000010, "Wrong alignment on UMarinerProjectileMoveComponent");
static_assert(sizeof(UMarinerProjectileMoveComponent) == 0x000440, "Wrong size on UMarinerProjectileMoveComponent");
static_assert(offsetof(UMarinerProjectileMoveComponent, OnStickAttemptNotify) == 0x0001D0, "Member 'UMarinerProjectileMoveComponent::OnStickAttemptNotify' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, OnStuckToObject) == 0x0001E0, "Member 'UMarinerProjectileMoveComponent::OnStuckToObject' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, OnFailedToStickToObject) == 0x0001F0, "Member 'UMarinerProjectileMoveComponent::OnFailedToStickToObject' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, HomingPreventionTags) == 0x000200, "Member 'UMarinerProjectileMoveComponent::HomingPreventionTags' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, bIgnoreHomingPreventionTagsWhenHomingToInstigator) == 0x000220, "Member 'UMarinerProjectileMoveComponent::bIgnoreHomingPreventionTagsWhenHomingToInstigator' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, NetworkSmoothingMode) == 0x000280, "Member 'UMarinerProjectileMoveComponent::NetworkSmoothingMode' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, NetworkMaxSmoothUpdateDistance) == 0x000288, "Member 'UMarinerProjectileMoveComponent::NetworkMaxSmoothUpdateDistance' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, NetworkNoSmoothUpdateDistance) == 0x00028C, "Member 'UMarinerProjectileMoveComponent::NetworkNoSmoothUpdateDistance' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, NetworkSimulatedSmoothLocationTime) == 0x000290, "Member 'UMarinerProjectileMoveComponent::NetworkSimulatedSmoothLocationTime' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, NetworkSimulatedSmoothRotationTime) == 0x000294, "Member 'UMarinerProjectileMoveComponent::NetworkSimulatedSmoothRotationTime' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, ServerLastTransformUpdateTimeStamp) == 0x000298, "Member 'UMarinerProjectileMoveComponent::ServerLastTransformUpdateTimeStamp' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, StickToObjectData) == 0x00029C, "Member 'UMarinerProjectileMoveComponent::StickToObjectData' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, bShouldLobProjectile) == 0x00032C, "Member 'UMarinerProjectileMoveComponent::bShouldLobProjectile' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, LobDistance) == 0x000330, "Member 'UMarinerProjectileMoveComponent::LobDistance' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, bFavorHighArc) == 0x000334, "Member 'UMarinerProjectileMoveComponent::bFavorHighArc' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, RotationRate) == 0x000338, "Member 'UMarinerProjectileMoveComponent::RotationRate' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, PivotTranslation) == 0x000344, "Member 'UMarinerProjectileMoveComponent::PivotTranslation' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, IgnoreBounceCollisionChannelFlags) == 0x000354, "Member 'UMarinerProjectileMoveComponent::IgnoreBounceCollisionChannelFlags' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, bAllowVisualOffsetAfterBounce) == 0x000358, "Member 'UMarinerProjectileMoveComponent::bAllowVisualOffsetAfterBounce' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, MaxBounces) == 0x00035C, "Member 'UMarinerProjectileMoveComponent::MaxBounces' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, UniqueBounceMinimumDistance) == 0x000364, "Member 'UMarinerProjectileMoveComponent::UniqueBounceMinimumDistance' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, bStickToImpactedObject) == 0x000368, "Member 'UMarinerProjectileMoveComponent::bStickToImpactedObject' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, StickableObjectTypeBlacklist) == 0x000370, "Member 'UMarinerProjectileMoveComponent::StickableObjectTypeBlacklist' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, NonStickableObjectNotifyList) == 0x000380, "Member 'UMarinerProjectileMoveComponent::NonStickableObjectNotifyList' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, StickableObjectCollisionTypes) == 0x000390, "Member 'UMarinerProjectileMoveComponent::StickableObjectCollisionTypes' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, StickableObjectDetectionRadius) == 0x0003A0, "Member 'UMarinerProjectileMoveComponent::StickableObjectDetectionRadius' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, StickingToObjectPaddingDistance) == 0x0003A4, "Member 'UMarinerProjectileMoveComponent::StickingToObjectPaddingDistance' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, SweepForStickablesRange) == 0x0003A8, "Member 'UMarinerProjectileMoveComponent::SweepForStickablesRange' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, StickyRotationOffset) == 0x0003AC, "Member 'UMarinerProjectileMoveComponent::StickyRotationOffset' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, HomingPolicy) == 0x0003D4, "Member 'UMarinerProjectileMoveComponent::HomingPolicy' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, SocketOnHomingTarget) == 0x0003D8, "Member 'UMarinerProjectileMoveComponent::SocketOnHomingTarget' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, bHomingIsDirectionBased) == 0x0003E0, "Member 'UMarinerProjectileMoveComponent::bHomingIsDirectionBased' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, bHomingIsLineBased) == 0x0003E1, "Member 'UMarinerProjectileMoveComponent::bHomingIsLineBased' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, MinRotationalSpeedInDegrees) == 0x0003E4, "Member 'UMarinerProjectileMoveComponent::MinRotationalSpeedInDegrees' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, MaxRotationalSpeedInDegrees) == 0x0003E8, "Member 'UMarinerProjectileMoveComponent::MaxRotationalSpeedInDegrees' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, TurnThresholdBeforeUsingUpVector) == 0x0003EC, "Member 'UMarinerProjectileMoveComponent::TurnThresholdBeforeUsingUpVector' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, bShouldUseSpawnPointAsHomingLineSource) == 0x0003F0, "Member 'UMarinerProjectileMoveComponent::bShouldUseSpawnPointAsHomingLineSource' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, IdealAngleOfApproachInDegrees) == 0x0003F4, "Member 'UMarinerProjectileMoveComponent::IdealAngleOfApproachInDegrees' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, TurningRadius) == 0x0003F8, "Member 'UMarinerProjectileMoveComponent::TurningRadius' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, MaxDeccelerationOfUnproductiveMovement) == 0x0003FC, "Member 'UMarinerProjectileMoveComponent::MaxDeccelerationOfUnproductiveMovement' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, ConstantForceAlongHomingLine) == 0x000400, "Member 'UMarinerProjectileMoveComponent::ConstantForceAlongHomingLine' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, HomingLineStart) == 0x000404, "Member 'UMarinerProjectileMoveComponent::HomingLineStart' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, bStickingToImpactedObject) == 0x000418, "Member 'UMarinerProjectileMoveComponent::bStickingToImpactedObject' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileMoveComponent, BounceAffectSpeedCooldown) == 0x00041C, "Member 'UMarinerProjectileMoveComponent::BounceAffectSpeedCooldown' has a wrong offset!");

// Class Mariner.MarinerFluxProjectileMoveComponent
// 0x0050 (0x0490 - 0x0440)
class UMarinerFluxProjectileMoveComponent final : public UMarinerProjectileMoveComponent
{
public:
	struct FVector                                CircleBounceCenter;                                // 0x0438(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CircleBounceRadius;                                // 0x0444(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CircleBounceSpeed;                                 // 0x0448(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBottomUpWhileBouncing;                          // 0x044C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDoesRocketJumpNearbyInstigatorOnImpact;           // 0x044D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_189C[0x2];                                     // 0x044E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RocketJumpRadius;                                  // 0x0450(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RocketJumpStrengthRatio;                           // 0x0454(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           ExplodeOnCollisionWithActorTypes;                  // 0x0458(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_189D[0x28];                                    // 0x0468(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOwnerActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFluxProjectileMoveComponent">();
	}
	static class UMarinerFluxProjectileMoveComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerFluxProjectileMoveComponent>();
	}
};
static_assert(alignof(UMarinerFluxProjectileMoveComponent) == 0x000010, "Wrong alignment on UMarinerFluxProjectileMoveComponent");
static_assert(sizeof(UMarinerFluxProjectileMoveComponent) == 0x000490, "Wrong size on UMarinerFluxProjectileMoveComponent");
static_assert(offsetof(UMarinerFluxProjectileMoveComponent, CircleBounceCenter) == 0x000438, "Member 'UMarinerFluxProjectileMoveComponent::CircleBounceCenter' has a wrong offset!");
static_assert(offsetof(UMarinerFluxProjectileMoveComponent, CircleBounceRadius) == 0x000444, "Member 'UMarinerFluxProjectileMoveComponent::CircleBounceRadius' has a wrong offset!");
static_assert(offsetof(UMarinerFluxProjectileMoveComponent, CircleBounceSpeed) == 0x000448, "Member 'UMarinerFluxProjectileMoveComponent::CircleBounceSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerFluxProjectileMoveComponent, bIsBottomUpWhileBouncing) == 0x00044C, "Member 'UMarinerFluxProjectileMoveComponent::bIsBottomUpWhileBouncing' has a wrong offset!");
static_assert(offsetof(UMarinerFluxProjectileMoveComponent, bDoesRocketJumpNearbyInstigatorOnImpact) == 0x00044D, "Member 'UMarinerFluxProjectileMoveComponent::bDoesRocketJumpNearbyInstigatorOnImpact' has a wrong offset!");
static_assert(offsetof(UMarinerFluxProjectileMoveComponent, RocketJumpRadius) == 0x000450, "Member 'UMarinerFluxProjectileMoveComponent::RocketJumpRadius' has a wrong offset!");
static_assert(offsetof(UMarinerFluxProjectileMoveComponent, RocketJumpStrengthRatio) == 0x000454, "Member 'UMarinerFluxProjectileMoveComponent::RocketJumpStrengthRatio' has a wrong offset!");
static_assert(offsetof(UMarinerFluxProjectileMoveComponent, ExplodeOnCollisionWithActorTypes) == 0x000458, "Member 'UMarinerFluxProjectileMoveComponent::ExplodeOnCollisionWithActorTypes' has a wrong offset!");

// Class Mariner.MarinerTrialsFloatingPlatform
// 0x0078 (0x0290 - 0x0218)
class AMarinerTrialsFloatingPlatform final : public AActor
{
public:
	bool                                          bIsBombTrialPlatform;                              // 0x0218(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189F[0x3];                                     // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StageXIncrement;                                   // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StageYIncrement;                                   // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlatformDifficulty;                                // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BombTrialsPlatformMovementPausedTime;              // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BombTrialsPlatformInterpSpeed;                     // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18A0[0x34];                                    // 0x0230(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OscillationAmplitude;                              // 0x0264(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AdjustProjectileFudgeAmount;                       // 0x0268(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OscillationSpeed;                                  // 0x026C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   MeshComponent;                                     // 0x0270(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkComponent*                           AkAudioComponent;                                  // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          AkStopAudioEvent;                                  // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          AkStartAudioEvent;                                 // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BombTrialPlatformMovement(float TimeSeconds);
	void OnEnterBombTrialStageChange();
	void OnMeshComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTrialsFloatingPlatform">();
	}
	static class AMarinerTrialsFloatingPlatform* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerTrialsFloatingPlatform>();
	}
};
static_assert(alignof(AMarinerTrialsFloatingPlatform) == 0x000008, "Wrong alignment on AMarinerTrialsFloatingPlatform");
static_assert(sizeof(AMarinerTrialsFloatingPlatform) == 0x000290, "Wrong size on AMarinerTrialsFloatingPlatform");
static_assert(offsetof(AMarinerTrialsFloatingPlatform, bIsBombTrialPlatform) == 0x000218, "Member 'AMarinerTrialsFloatingPlatform::bIsBombTrialPlatform' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingPlatform, StageXIncrement) == 0x00021C, "Member 'AMarinerTrialsFloatingPlatform::StageXIncrement' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingPlatform, StageYIncrement) == 0x000220, "Member 'AMarinerTrialsFloatingPlatform::StageYIncrement' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingPlatform, PlatformDifficulty) == 0x000224, "Member 'AMarinerTrialsFloatingPlatform::PlatformDifficulty' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingPlatform, BombTrialsPlatformMovementPausedTime) == 0x000228, "Member 'AMarinerTrialsFloatingPlatform::BombTrialsPlatformMovementPausedTime' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingPlatform, BombTrialsPlatformInterpSpeed) == 0x00022C, "Member 'AMarinerTrialsFloatingPlatform::BombTrialsPlatformInterpSpeed' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingPlatform, OscillationAmplitude) == 0x000264, "Member 'AMarinerTrialsFloatingPlatform::OscillationAmplitude' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingPlatform, AdjustProjectileFudgeAmount) == 0x000268, "Member 'AMarinerTrialsFloatingPlatform::AdjustProjectileFudgeAmount' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingPlatform, OscillationSpeed) == 0x00026C, "Member 'AMarinerTrialsFloatingPlatform::OscillationSpeed' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingPlatform, MeshComponent) == 0x000270, "Member 'AMarinerTrialsFloatingPlatform::MeshComponent' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingPlatform, AkAudioComponent) == 0x000278, "Member 'AMarinerTrialsFloatingPlatform::AkAudioComponent' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingPlatform, AkStopAudioEvent) == 0x000280, "Member 'AMarinerTrialsFloatingPlatform::AkStopAudioEvent' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingPlatform, AkStartAudioEvent) == 0x000288, "Member 'AMarinerTrialsFloatingPlatform::AkStartAudioEvent' has a wrong offset!");

// Class Mariner.MarinerFollowSplineMovement
// 0x01C8 (0x02B8 - 0x00F0)
class UMarinerFollowSplineMovement final : public UMovementComponent
{
public:
	UMulticastInlineDelegateProperty_             OnAuthorityStartedMovingAlongSpline;               // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAuthorityStoppedMovingAlongSpline;               // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAuthorityReachedEndOfSpline;                     // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAuthorityStoppedDueToCollision;                  // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnSetSplineToFollowComponentDelegate;              // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bAllowComponentsToFollowSplineMovement;            // 0x0140(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowMovementCollision;                           // 0x0141(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldLoopMovementAtSplineEnd;                    // 0x0142(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowSeemlessLoopOnSplineEnd;                     // 0x0143(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DetectSplineCompleteRatioTolerance;                // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClientDeltaTimeMultiplierStep;                     // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxClientDeltaTimeMultiplier;                      // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinClientDeltaTimeMultiplier;                      // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClientServerRatioDifferenceTolerance;              // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class USceneComponent*, struct FRotator> ComponentRotationOffsetMap;                        // 0x0158(0x0050)(BlueprintVisible, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class USplineComponent*                       SplineToFollow;                                    // 0x01A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Duration;                                          // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18A2[0x4];                                     // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ProgressCurve;                                     // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerFollowSplineRotationSource            RotationSource;                                    // 0x01C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18A3[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaximumSimulationStepDistance;                     // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxSimulationSteps;                                // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldInterpolateToStart;                         // 0x01CC(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInterpolatingToStart;                           // 0x01CD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldStopMovementOnHit;                          // 0x01CE(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18A4[0x1];                                     // 0x01CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpolateToStartDuration;                        // 0x01D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18A5[0x1C];                                    // 0x01D4(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAllowClientResetProgressRatio;                    // 0x01F0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18A6[0x3];                                     // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClientProgressRatioResetToAuthorityDelay;          // 0x01F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsMoving;                                         // 0x01F8(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerFollowSplineDirection                 MovementDirection;                                 // 0x01F9(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18A7[0x6];                                     // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClientPaceTrackingThreshold;                       // 0x0200(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18A8[0x4];                                     // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReplicatedAuthoritativeProgressRatio;              // 0x0208(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18A9[0x54];                                    // 0x020C(0x0054)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DurationBeforeRestartingSplineMovement;            // 0x0260(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18AA[0x54];                                    // 0x0264(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AuthorityResetMovement();
	void AuthorityReverseMovementDirection();
	void AuthoritySetIsMoving(bool bInIsMoving);
	void AuthoritySetMinimumProgressRatioUpdateFrequencyTime(float NewRatioUpdateFrequency);
	void AuthoritySetMovementDirection(EMarinerFollowSplineDirection NewMovementDirection);
	void AuthoritySetMovementRotationSource(EMarinerFollowSplineRotationSource NewRotationSource);
	void AuthoritySetProgressRatio(float NewProgressRatio);
	void AuthoritySetProgressRatioUpdateFrequency(int32 NewUpdateFrequency);
	void AuthoritySetSplineToFollow(class USplineComponent* NewSplineToFollow);
	void AuthoritySetSplineTravelDuration(const float NewDuration);
	void OnAuthorityReachedEndOfSplineDelegate__DelegateSignature(class AActor* MovingActor, EMarinerFollowSplineDirection Param_MovementDirection);
	void OnAuthorityStartedMovingAlongSplineDelegate__DelegateSignature(class AActor* MovingActor, EMarinerFollowSplineDirection Param_MovementDirection);
	void OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature(class AActor* MovingActor, float ProgressRatioAtTimeOfCollision, const struct FHitResult& BlockingHit);
	void OnAuthorityStoppedMovingAlongSplineDelegate__DelegateSignature(class AActor* MovingActor, float ProgressRatioAtTimeOfStop);
	void OnRep_ReplicatedAuthoritativeProgressRatio(float PreviousReplicatedAuthoritativeProgressRatio);
	void OnRep_SplineToFollow();
	void OnSetSplineToFollowComponentSignature__DelegateSignature(class USplineComponent* SplineToFollowComponent);

	float AuthorityGetMinimumProgressRatioUpdateFrequencyTime() const;
	int32 AuthorityGetProgressRatioUpdateFrequency() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFollowSplineMovement">();
	}
	static class UMarinerFollowSplineMovement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerFollowSplineMovement>();
	}
};
static_assert(alignof(UMarinerFollowSplineMovement) == 0x000008, "Wrong alignment on UMarinerFollowSplineMovement");
static_assert(sizeof(UMarinerFollowSplineMovement) == 0x0002B8, "Wrong size on UMarinerFollowSplineMovement");
static_assert(offsetof(UMarinerFollowSplineMovement, OnAuthorityStartedMovingAlongSpline) == 0x0000F0, "Member 'UMarinerFollowSplineMovement::OnAuthorityStartedMovingAlongSpline' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, OnAuthorityStoppedMovingAlongSpline) == 0x000100, "Member 'UMarinerFollowSplineMovement::OnAuthorityStoppedMovingAlongSpline' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, OnAuthorityReachedEndOfSpline) == 0x000110, "Member 'UMarinerFollowSplineMovement::OnAuthorityReachedEndOfSpline' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, OnAuthorityStoppedDueToCollision) == 0x000120, "Member 'UMarinerFollowSplineMovement::OnAuthorityStoppedDueToCollision' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, OnSetSplineToFollowComponentDelegate) == 0x000130, "Member 'UMarinerFollowSplineMovement::OnSetSplineToFollowComponentDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, bAllowComponentsToFollowSplineMovement) == 0x000140, "Member 'UMarinerFollowSplineMovement::bAllowComponentsToFollowSplineMovement' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, bAllowMovementCollision) == 0x000141, "Member 'UMarinerFollowSplineMovement::bAllowMovementCollision' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, bShouldLoopMovementAtSplineEnd) == 0x000142, "Member 'UMarinerFollowSplineMovement::bShouldLoopMovementAtSplineEnd' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, bAllowSeemlessLoopOnSplineEnd) == 0x000143, "Member 'UMarinerFollowSplineMovement::bAllowSeemlessLoopOnSplineEnd' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, DetectSplineCompleteRatioTolerance) == 0x000144, "Member 'UMarinerFollowSplineMovement::DetectSplineCompleteRatioTolerance' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, ClientDeltaTimeMultiplierStep) == 0x000148, "Member 'UMarinerFollowSplineMovement::ClientDeltaTimeMultiplierStep' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, MaxClientDeltaTimeMultiplier) == 0x00014C, "Member 'UMarinerFollowSplineMovement::MaxClientDeltaTimeMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, MinClientDeltaTimeMultiplier) == 0x000150, "Member 'UMarinerFollowSplineMovement::MinClientDeltaTimeMultiplier' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, ClientServerRatioDifferenceTolerance) == 0x000154, "Member 'UMarinerFollowSplineMovement::ClientServerRatioDifferenceTolerance' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, ComponentRotationOffsetMap) == 0x000158, "Member 'UMarinerFollowSplineMovement::ComponentRotationOffsetMap' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, SplineToFollow) == 0x0001A8, "Member 'UMarinerFollowSplineMovement::SplineToFollow' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, Duration) == 0x0001B0, "Member 'UMarinerFollowSplineMovement::Duration' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, ProgressCurve) == 0x0001B8, "Member 'UMarinerFollowSplineMovement::ProgressCurve' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, RotationSource) == 0x0001C0, "Member 'UMarinerFollowSplineMovement::RotationSource' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, MaximumSimulationStepDistance) == 0x0001C4, "Member 'UMarinerFollowSplineMovement::MaximumSimulationStepDistance' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, MaxSimulationSteps) == 0x0001C8, "Member 'UMarinerFollowSplineMovement::MaxSimulationSteps' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, bShouldInterpolateToStart) == 0x0001CC, "Member 'UMarinerFollowSplineMovement::bShouldInterpolateToStart' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, bIsInterpolatingToStart) == 0x0001CD, "Member 'UMarinerFollowSplineMovement::bIsInterpolatingToStart' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, bShouldStopMovementOnHit) == 0x0001CE, "Member 'UMarinerFollowSplineMovement::bShouldStopMovementOnHit' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, InterpolateToStartDuration) == 0x0001D0, "Member 'UMarinerFollowSplineMovement::InterpolateToStartDuration' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, bAllowClientResetProgressRatio) == 0x0001F0, "Member 'UMarinerFollowSplineMovement::bAllowClientResetProgressRatio' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, ClientProgressRatioResetToAuthorityDelay) == 0x0001F4, "Member 'UMarinerFollowSplineMovement::ClientProgressRatioResetToAuthorityDelay' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, bIsMoving) == 0x0001F8, "Member 'UMarinerFollowSplineMovement::bIsMoving' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, MovementDirection) == 0x0001F9, "Member 'UMarinerFollowSplineMovement::MovementDirection' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, ClientPaceTrackingThreshold) == 0x000200, "Member 'UMarinerFollowSplineMovement::ClientPaceTrackingThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, ReplicatedAuthoritativeProgressRatio) == 0x000208, "Member 'UMarinerFollowSplineMovement::ReplicatedAuthoritativeProgressRatio' has a wrong offset!");
static_assert(offsetof(UMarinerFollowSplineMovement, DurationBeforeRestartingSplineMovement) == 0x000260, "Member 'UMarinerFollowSplineMovement::DurationBeforeRestartingSplineMovement' has a wrong offset!");

// Class Mariner.MarinerFriendsPagedVerticalBox
// 0x00F0 (0x03E8 - 0x02F8)
class UMarinerFriendsPagedVerticalBox : public UMarinerPagedVerticalBox
{
public:
	uint8                                         Pad_18AF[0x10];                                    // 0x02F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerSocialWidget>       FriendWidgetSubclass;                              // 0x0308(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerGroupHeaderWidget>  HeaderSubclass;                                    // 0x0310(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerPlatformText                   PlatformFriendsHeaderText;                         // 0x0318(0x0078)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18B0[0x58];                                    // 0x0390(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSocialWidgetOpened(const bool bOpen);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerFriendsPagedVerticalBox">();
	}
	static class UMarinerFriendsPagedVerticalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerFriendsPagedVerticalBox>();
	}
};
static_assert(alignof(UMarinerFriendsPagedVerticalBox) == 0x000008, "Wrong alignment on UMarinerFriendsPagedVerticalBox");
static_assert(sizeof(UMarinerFriendsPagedVerticalBox) == 0x0003E8, "Wrong size on UMarinerFriendsPagedVerticalBox");
static_assert(offsetof(UMarinerFriendsPagedVerticalBox, FriendWidgetSubclass) == 0x000308, "Member 'UMarinerFriendsPagedVerticalBox::FriendWidgetSubclass' has a wrong offset!");
static_assert(offsetof(UMarinerFriendsPagedVerticalBox, HeaderSubclass) == 0x000310, "Member 'UMarinerFriendsPagedVerticalBox::HeaderSubclass' has a wrong offset!");
static_assert(offsetof(UMarinerFriendsPagedVerticalBox, PlatformFriendsHeaderText) == 0x000318, "Member 'UMarinerFriendsPagedVerticalBox::PlatformFriendsHeaderText' has a wrong offset!");

// Class Mariner.MarinerTask_SpawnProjectileBloomingSpread
// 0x0010 (0x0130 - 0x0120)
class UMarinerTask_SpawnProjectileBloomingSpread final : public UMarinerTask_SpawnProjectile_Base
{
public:
	uint8                                         Pad_18B1[0x10];                                    // 0x0120(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_SpawnProjectileBloomingSpread* SpawnProjectile(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const TSubclassOf<class AMarinerProjectile>& DefaultProjectileType, const struct FGameplayAbilityTargetDataHandle& AimDataHandle, EMarinerSpawnSocketSource SocketSource, class FName SocketToSpawnAt, float SpreadDegrees);
	static class UMarinerTask_SpawnProjectileBloomingSpread* SpawnProjectileWithPool(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const TSubclassOf<class AMarinerProjectile>& DefaultProjectileType, const struct FGameplayAbilityTargetDataHandle& AimDataHandle, EMarinerSpawnSocketSource SocketSource, class FName SocketToSpawnAt, float SpreadDegrees);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_SpawnProjectileBloomingSpread">();
	}
	static class UMarinerTask_SpawnProjectileBloomingSpread* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_SpawnProjectileBloomingSpread>();
	}
};
static_assert(alignof(UMarinerTask_SpawnProjectileBloomingSpread) == 0x000008, "Wrong alignment on UMarinerTask_SpawnProjectileBloomingSpread");
static_assert(sizeof(UMarinerTask_SpawnProjectileBloomingSpread) == 0x000130, "Wrong size on UMarinerTask_SpawnProjectileBloomingSpread");

// Class Mariner.MarinerGameGlobals
// 0x02C8 (0x02F0 - 0x0028)
class UMarinerGameGlobals : public UObject
{
public:
	TMap<struct FIntPoint, class UAkAudioEvent*>  KnockoutScoreVO;                                   // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UMarinerPlayableCharacter*>      PlayableCharactersData;                            // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UMarinerPlayableCharacter*>      BotCharactersData;                                 // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	EMarinerParticleSystemDetailLevel             GameParticleDetailLevel;                           // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18B4[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FMarinerCameraPerspective> PerspectiveMap;                                    // 0x00A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerRocketTotemCollection          DefaultRocketTotemCollection;                      // 0x00F0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMarinerRocketTotemCollection>  AllowedBotRocketTotemCollectionList;               // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<int32, TSubclassOf<class UDataAsset>>    AllowedBotRocketTotemArrayIndexCollectionMap;      // 0x0138(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UMarinerMegaBlastDataAsset*             DefaultMegaBlastTrail;                             // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerReturnTrailDataAsset*           DefaultReturnTrail;                                // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMarinerMegaBlastDataAsset*>     AllowedBotMegablastTrailList;                      // 0x0198(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UMarinerReturnTrailDataAsset*>   AllowedBotReturnTrailList;                         // 0x01A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         LongDistanceShotLength;                            // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShortDistanceShotLength;                           // 0x01BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerCapsuleExtents                 PlayerStartMaxCapsuleDimensions;                   // 0x01C0(0x0010)(Edit, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerCapsuleExtents                 PlayerStartMinCapsuleDimensions;                   // 0x01D0(0x0010)(Edit, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   TallestCharacterType;                              // 0x01E0(0x0028)(Edit, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   WidestCharacterType;                               // 0x0208(0x0028)(Edit, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   ShortestCharacterType;                             // 0x0230(0x0028)(Edit, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   SkinniestCharacterType;                            // 0x0258(0x0028)(Edit, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialParameterCollection*           EnvironmentMPC;                                    // 0x0280(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialParameterCollection*           DebugMPC;                                          // 0x0288(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FString>                         MaxQualityConsoleCommands;                         // 0x0290(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         MatchmakingIntermissionTime;                       // 0x02A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableRedReticle;                                 // 0x02A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18B5[0x3];                                     // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ComponentInvulnerableTag;                          // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ComponentAbsorbsExplosionTag;                      // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18B6[0x38];                                    // 0x02B8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool FindPerspective(const class FName& Key, struct FMarinerCameraPerspective* OutPerspective);
	class UMarinerCMSItemDataAsset* GetDefaultItem(EMangoItemType ItemType);
	class UMarinerMegaBlastDataAsset* GetDefaultMegaBlastTrail();
	class UMarinerReturnTrailDataAsset* GetDefaultReturnTrail();
	bool GetEnableRedReticle();
	class UMarinerMegaBlastDataAsset* GetRandomBotMegaBlastTrail(int32* OutSelectedIndex);
	class UMarinerReturnTrailDataAsset* GetRandomBotReturnTrail(int32* OutSelectedIndex);
	void GetRandomBotTotemPartArrayLength(TArray<int32>* OutSelectedIndexList);
	void SetCurrentDetailLevel(EMarinerParticleSystemDetailLevel InLevel);

	const TArray<class UMarinerPlayableCharacter*> GetAllBotData() const;
	const TArray<class UMarinerPlayableCharacter*> GetAllPlayableCharactersData() const;
	class UMarinerPlayableCharacter* GetCharacterDataByClass(TSubclassOf<class AMarinerCharacter> Param_Class) const;
	class UMarinerPlayableCharacter* GetCharacterDataByEngineID(const class FString& EngineId) const;
	class UMarinerPlayableCharacter* GetCharacterDataByItemRestriction(const class UObject* WorldContextObject, const struct FMangoItem& Item) const;
	class UMarinerPlayableCharacter* GetCharacterDataBySoftClass(TSoftClassPtr<class UClass> Param_Class) const;
	class UMarinerPlayableCharacter* GetCharacterDataForPlayer(class APlayerState* PlayerState) const;
	const class FName GetComponentAbsorbsExplosionTag() const;
	const class FName GetComponentInvulnerableTag() const;
	EMarinerParticleSystemDetailLevel GetCurrentDetailLevel() const;
	class UMaterialParameterCollection* GetDebugMPC() const;
	const struct FMarinerRocketTotemCollection GetDefaultRocketTotemCollection() const;
	class UMaterialParameterCollection* GetEnvironmentMPC() const;
	const float GetLongDistanceShotLength() const;
	const float GetMatchmakingIntermissionTime() const;
	const struct FMarinerCapsuleExtents GetPlayerStartMaxCapsuleDimensions() const;
	const struct FMarinerCapsuleExtents GetPlayerStartMinCapsuleDimensions() const;
	class UMarinerPlayableCharacter* GetSelectedCharacterDataForPlayer(class APlayerState* PlayerState) const;
	const float GetShortDistanceShotLength() const;
	const TSoftClassPtr<class UClass> GetShortestCharacterType() const;
	const TSoftClassPtr<class UClass> GetSkinniestCharacterType() const;
	void GetSortedPlayableCharactersData(class UObject* WorldContextObject, EMarinerEnabledCharacterFilter EnabledFilter, TArray<class UMarinerPlayableCharacter*>* CharactersOut) const;
	const TSoftClassPtr<class UClass> GetTallestCharacterType() const;
	const TSoftClassPtr<class UClass> GetWidestCharacterType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameGlobals">();
	}
	static class UMarinerGameGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGameGlobals>();
	}
};
static_assert(alignof(UMarinerGameGlobals) == 0x000008, "Wrong alignment on UMarinerGameGlobals");
static_assert(sizeof(UMarinerGameGlobals) == 0x0002F0, "Wrong size on UMarinerGameGlobals");
static_assert(offsetof(UMarinerGameGlobals, KnockoutScoreVO) == 0x000028, "Member 'UMarinerGameGlobals::KnockoutScoreVO' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, PlayableCharactersData) == 0x000078, "Member 'UMarinerGameGlobals::PlayableCharactersData' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, BotCharactersData) == 0x000088, "Member 'UMarinerGameGlobals::BotCharactersData' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, GameParticleDetailLevel) == 0x000098, "Member 'UMarinerGameGlobals::GameParticleDetailLevel' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, PerspectiveMap) == 0x0000A0, "Member 'UMarinerGameGlobals::PerspectiveMap' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, DefaultRocketTotemCollection) == 0x0000F0, "Member 'UMarinerGameGlobals::DefaultRocketTotemCollection' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, AllowedBotRocketTotemCollectionList) == 0x000128, "Member 'UMarinerGameGlobals::AllowedBotRocketTotemCollectionList' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, AllowedBotRocketTotemArrayIndexCollectionMap) == 0x000138, "Member 'UMarinerGameGlobals::AllowedBotRocketTotemArrayIndexCollectionMap' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, DefaultMegaBlastTrail) == 0x000188, "Member 'UMarinerGameGlobals::DefaultMegaBlastTrail' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, DefaultReturnTrail) == 0x000190, "Member 'UMarinerGameGlobals::DefaultReturnTrail' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, AllowedBotMegablastTrailList) == 0x000198, "Member 'UMarinerGameGlobals::AllowedBotMegablastTrailList' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, AllowedBotReturnTrailList) == 0x0001A8, "Member 'UMarinerGameGlobals::AllowedBotReturnTrailList' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, LongDistanceShotLength) == 0x0001B8, "Member 'UMarinerGameGlobals::LongDistanceShotLength' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, ShortDistanceShotLength) == 0x0001BC, "Member 'UMarinerGameGlobals::ShortDistanceShotLength' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, PlayerStartMaxCapsuleDimensions) == 0x0001C0, "Member 'UMarinerGameGlobals::PlayerStartMaxCapsuleDimensions' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, PlayerStartMinCapsuleDimensions) == 0x0001D0, "Member 'UMarinerGameGlobals::PlayerStartMinCapsuleDimensions' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, TallestCharacterType) == 0x0001E0, "Member 'UMarinerGameGlobals::TallestCharacterType' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, WidestCharacterType) == 0x000208, "Member 'UMarinerGameGlobals::WidestCharacterType' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, ShortestCharacterType) == 0x000230, "Member 'UMarinerGameGlobals::ShortestCharacterType' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, SkinniestCharacterType) == 0x000258, "Member 'UMarinerGameGlobals::SkinniestCharacterType' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, EnvironmentMPC) == 0x000280, "Member 'UMarinerGameGlobals::EnvironmentMPC' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, DebugMPC) == 0x000288, "Member 'UMarinerGameGlobals::DebugMPC' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, MaxQualityConsoleCommands) == 0x000290, "Member 'UMarinerGameGlobals::MaxQualityConsoleCommands' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, MatchmakingIntermissionTime) == 0x0002A0, "Member 'UMarinerGameGlobals::MatchmakingIntermissionTime' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, bEnableRedReticle) == 0x0002A4, "Member 'UMarinerGameGlobals::bEnableRedReticle' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, ComponentInvulnerableTag) == 0x0002A8, "Member 'UMarinerGameGlobals::ComponentInvulnerableTag' has a wrong offset!");
static_assert(offsetof(UMarinerGameGlobals, ComponentAbsorbsExplosionTag) == 0x0002B0, "Member 'UMarinerGameGlobals::ComponentAbsorbsExplosionTag' has a wrong offset!");

// Class Mariner.MarinerGameInstance
// 0x0258 (0x03C0 - 0x0168)
class UMarinerGameInstance final : public UGameInstance
{
public:
	UMulticastInlineDelegateProperty_             OnServerTravelPreloadStarted;                      // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnViewportResized;                                 // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnDisplayMetricChanged;                            // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_18BC[0x48];                                    // 0x0198(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerGameMapLoader*                  GameMapLoaderInstance;                             // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerMenuManager*                    MenuManagerInstance;                               // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerMessageBoxManager*              MessageBoxManagerInstance;                         // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerMusicManager*                   MusicManagerInstance;                              // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerVoiceOverManager*               VoiceOverManagerInstance;                          // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerNarrationManager*               NarrationManager;                                  // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18BD[0x20];                                    // 0x0210(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UMangoManagers*                         MangoManagersInstance;                             // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18BE[0x10];                                    // 0x0238(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerDamageDebugManager*             DamageDebugManagerInstance;                        // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerInstancedMeshManager*           InstancedMeshManager;                              // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerRealityObjectManager*           RealityObjectManager;                              // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<TSubclassOf<class UMarinerAsyncUIFlowHandler>, class UMarinerAsyncUIFlowHandler*> AsyncUIFlowHandlers;                               // 0x0260(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UMarinerCharacterManager*               CharacterManager;                                  // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18BF[0x108];                                   // 0x02B8(0x0108)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMarinerCharacterManager* GetCharacterManager();
	class UMarinerDamageDebugManager* GetDamageDebugManager();
	class UMarinerInputOverlay* GetInputOverlay();
	class UMarinerMenuManager* GetMenuManager();
	class UMarinerMessageBoxManager* GetMessageBoxManager();
	class UMarinerMusicManager* GetMusicManager();
	class UMarinerGameUserSettings* GetUserSettings();
	class UMarinerVoiceOverManager* GetVoiceOverManager();
	void GoToLobby();
	void LoadArtifacts();
	void LoadArtifactsUnlockData();
	void OnKickedMessageAcknowledged(const struct FKey& KeyPressed);
	void OnMovieCompleted();
	void PlayMovie(class UMediaSource* MovieToPlay, bool bCanSkipOnceLoaded, TDelegate<void()> CompletionCallback);
	void PlayScreenWipe(TDelegate<void()> OnWipeCoveringScreen);
	void ReloadGameConfig();
	void ReturnToMainMenu();
	void ServerTravel(const struct FMarinerServerTravelConfig& Config);
	void SetPracticeModeSelectedCharacter(TSoftClassPtr<class UClass> InPracticeModeSelectedCharacter);
	void SetStartedPracticeModeFromCharacterMenu(bool bStartedFromCharacterMenu);
	void ShowMessageBox(const struct FMarinerMessageBoxData& MessageBoxData);

	class UMarinerNarrationManager* GetNarrationManager() const;
	const TSoftClassPtr<class UClass> GetPracticeModeSelectedCharacter() const;
	class UMarinerRealityObjectManager* GetRealityObjectManager() const;
	bool IsInMainMenu() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameInstance">();
	}
	static class UMarinerGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGameInstance>();
	}
};
static_assert(alignof(UMarinerGameInstance) == 0x000008, "Wrong alignment on UMarinerGameInstance");
static_assert(sizeof(UMarinerGameInstance) == 0x0003C0, "Wrong size on UMarinerGameInstance");
static_assert(offsetof(UMarinerGameInstance, OnServerTravelPreloadStarted) == 0x000168, "Member 'UMarinerGameInstance::OnServerTravelPreloadStarted' has a wrong offset!");
static_assert(offsetof(UMarinerGameInstance, OnViewportResized) == 0x000178, "Member 'UMarinerGameInstance::OnViewportResized' has a wrong offset!");
static_assert(offsetof(UMarinerGameInstance, OnDisplayMetricChanged) == 0x000188, "Member 'UMarinerGameInstance::OnDisplayMetricChanged' has a wrong offset!");
static_assert(offsetof(UMarinerGameInstance, GameMapLoaderInstance) == 0x0001E0, "Member 'UMarinerGameInstance::GameMapLoaderInstance' has a wrong offset!");
static_assert(offsetof(UMarinerGameInstance, MenuManagerInstance) == 0x0001E8, "Member 'UMarinerGameInstance::MenuManagerInstance' has a wrong offset!");
static_assert(offsetof(UMarinerGameInstance, MessageBoxManagerInstance) == 0x0001F0, "Member 'UMarinerGameInstance::MessageBoxManagerInstance' has a wrong offset!");
static_assert(offsetof(UMarinerGameInstance, MusicManagerInstance) == 0x0001F8, "Member 'UMarinerGameInstance::MusicManagerInstance' has a wrong offset!");
static_assert(offsetof(UMarinerGameInstance, VoiceOverManagerInstance) == 0x000200, "Member 'UMarinerGameInstance::VoiceOverManagerInstance' has a wrong offset!");
static_assert(offsetof(UMarinerGameInstance, NarrationManager) == 0x000208, "Member 'UMarinerGameInstance::NarrationManager' has a wrong offset!");
static_assert(offsetof(UMarinerGameInstance, MangoManagersInstance) == 0x000230, "Member 'UMarinerGameInstance::MangoManagersInstance' has a wrong offset!");
static_assert(offsetof(UMarinerGameInstance, DamageDebugManagerInstance) == 0x000248, "Member 'UMarinerGameInstance::DamageDebugManagerInstance' has a wrong offset!");
static_assert(offsetof(UMarinerGameInstance, InstancedMeshManager) == 0x000250, "Member 'UMarinerGameInstance::InstancedMeshManager' has a wrong offset!");
static_assert(offsetof(UMarinerGameInstance, RealityObjectManager) == 0x000258, "Member 'UMarinerGameInstance::RealityObjectManager' has a wrong offset!");
static_assert(offsetof(UMarinerGameInstance, AsyncUIFlowHandlers) == 0x000260, "Member 'UMarinerGameInstance::AsyncUIFlowHandlers' has a wrong offset!");
static_assert(offsetof(UMarinerGameInstance, CharacterManager) == 0x0002B0, "Member 'UMarinerGameInstance::CharacterManager' has a wrong offset!");

// Class Mariner.MarinerTripMine
// 0x01E0 (0x0AA0 - 0x08C0)
class AMarinerTripMine final : public AMarinerDamageableProjectile
{
public:
	class UParticleSystemComponent*               VFXLaser01;                                        // 0x08C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*               VFXLaser02;                                        // 0x08C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*               VFXLaser03;                                        // 0x08D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*               VFXLaserEndPoint;                                  // 0x08D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*               VFXBaseFinish;                                     // 0x08E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PlayerDetectionRadius;                             // 0x08E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxLaserSegmentDistance;                           // 0x08EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxNumLaserSegments;                               // 0x08F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisableRicochetOnMovement;                        // 0x08F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C2[0x3];                                     // 0x08F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinLaserSegmentDistance;                           // 0x08F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinRicochetAngleThreshhold;                        // 0x08FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               MinRicochetAdjustRotation;                         // 0x0900(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         MaxHealth;                                         // 0x090C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentHealth;                                     // 0x0910(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             EnvironmentTraceChannel;                           // 0x0914(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C3[0x3];                                     // 0x0915(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnvironmentTraceSphereRadius;                      // 0x0918(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsArmed;                                          // 0x091C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C4[0x3];                                     // 0x091D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArmingDelay;                                       // 0x0920(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C5[0xC];                                     // 0x0924(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPhysicalSurface>                      BlacklistedSurfaceTypes;                           // 0x0930(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           BlacklistedObjectClasses;                          // 0x0940(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           DestroyableNearbyObjectClasses;                    // 0x0950(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	ECollisionChannel                             DestroyNearbyActorsOverlapChannel;                 // 0x0960(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C6[0x7];                                     // 0x0961(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        VFXBeamTemplateDefault;                            // 0x0968(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        VFXBeamTemplateTriggered;                          // 0x0970(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TeamColorParameterName;                            // 0x0978(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BeamStartPointParameterName;                       // 0x0980(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BeamEndPointParameterName;                         // 0x0988(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BeamScaleParameterName;                            // 0x0990(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BeamAlphaParameterName;                            // 0x0998(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                FriendlyTeamVectorColor;                           // 0x09A0(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                HostileTeamVectorColor;                            // 0x09AC(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                NeutralTeamVectorColor;                            // 0x09B8(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                UnknownTeamVectorColor;                            // 0x09C4(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCameraShake>               TriggeredCameraShake;                              // 0x09D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraShakeScale;                                  // 0x09D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TriggeredCameraShakeRadius;                        // 0x09DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             CameraShakeOverlapChannel;                         // 0x09E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         CameraShakeOverlapsFastCollisionCollection;        // 0x09E1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C7[0x6];                                     // 0x09E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMarinerCharacter*>              DamagedCharacters;                                 // 0x09E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerDamageType>         DefaultDamageType;                                 // 0x09F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             PlayerDamageOverlapChannel;                        // 0x0A00(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C8[0x3];                                     // 0x0A01(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AOEDamageMultiplier;                               // 0x0A04(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         PlayerOverlapsFastCollisionCollection;             // 0x0A08(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C9[0x7];                                     // 0x0A09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InvalidCharacterOverlapTags;                       // 0x0A10(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         TriggeredSequenceTotalDuration;                    // 0x0A30(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasExploded;                                      // 0x0A34(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18CA[0x6B];                                    // 0x0A35(0x006B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateParticles();
	void ArmMine();
	void BP_OnTripMineArmed();
	void BP_OnTripMineAttached();
	void BP_OnTripMineTriggered(const TArray<class AMarinerCharacter*>& DamagedMarinerCharacters);
	void ClearTimers();
	void DeactivateParticles();
	void HandlePostTriggeredSequence();
	void HandleStuckToObject(const struct FHitResult& Hit);
	void MulticastOnTripMineTriggered(const TArray<class AMarinerCharacter*>& CharactersDamaged);
	void OnAttachedParentDestroyed(class AActor* DestroyedActor);
	void ResetVariables();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTripMine">();
	}
	static class AMarinerTripMine* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerTripMine>();
	}
};
static_assert(alignof(AMarinerTripMine) == 0x000010, "Wrong alignment on AMarinerTripMine");
static_assert(sizeof(AMarinerTripMine) == 0x000AA0, "Wrong size on AMarinerTripMine");
static_assert(offsetof(AMarinerTripMine, VFXLaser01) == 0x0008C0, "Member 'AMarinerTripMine::VFXLaser01' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, VFXLaser02) == 0x0008C8, "Member 'AMarinerTripMine::VFXLaser02' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, VFXLaser03) == 0x0008D0, "Member 'AMarinerTripMine::VFXLaser03' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, VFXLaserEndPoint) == 0x0008D8, "Member 'AMarinerTripMine::VFXLaserEndPoint' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, VFXBaseFinish) == 0x0008E0, "Member 'AMarinerTripMine::VFXBaseFinish' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, PlayerDetectionRadius) == 0x0008E8, "Member 'AMarinerTripMine::PlayerDetectionRadius' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, MaxLaserSegmentDistance) == 0x0008EC, "Member 'AMarinerTripMine::MaxLaserSegmentDistance' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, MaxNumLaserSegments) == 0x0008F0, "Member 'AMarinerTripMine::MaxNumLaserSegments' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, bDisableRicochetOnMovement) == 0x0008F4, "Member 'AMarinerTripMine::bDisableRicochetOnMovement' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, MinLaserSegmentDistance) == 0x0008F8, "Member 'AMarinerTripMine::MinLaserSegmentDistance' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, MinRicochetAngleThreshhold) == 0x0008FC, "Member 'AMarinerTripMine::MinRicochetAngleThreshhold' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, MinRicochetAdjustRotation) == 0x000900, "Member 'AMarinerTripMine::MinRicochetAdjustRotation' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, MaxHealth) == 0x00090C, "Member 'AMarinerTripMine::MaxHealth' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, CurrentHealth) == 0x000910, "Member 'AMarinerTripMine::CurrentHealth' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, EnvironmentTraceChannel) == 0x000914, "Member 'AMarinerTripMine::EnvironmentTraceChannel' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, EnvironmentTraceSphereRadius) == 0x000918, "Member 'AMarinerTripMine::EnvironmentTraceSphereRadius' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, bIsArmed) == 0x00091C, "Member 'AMarinerTripMine::bIsArmed' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, ArmingDelay) == 0x000920, "Member 'AMarinerTripMine::ArmingDelay' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, BlacklistedSurfaceTypes) == 0x000930, "Member 'AMarinerTripMine::BlacklistedSurfaceTypes' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, BlacklistedObjectClasses) == 0x000940, "Member 'AMarinerTripMine::BlacklistedObjectClasses' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, DestroyableNearbyObjectClasses) == 0x000950, "Member 'AMarinerTripMine::DestroyableNearbyObjectClasses' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, DestroyNearbyActorsOverlapChannel) == 0x000960, "Member 'AMarinerTripMine::DestroyNearbyActorsOverlapChannel' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, VFXBeamTemplateDefault) == 0x000968, "Member 'AMarinerTripMine::VFXBeamTemplateDefault' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, VFXBeamTemplateTriggered) == 0x000970, "Member 'AMarinerTripMine::VFXBeamTemplateTriggered' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, TeamColorParameterName) == 0x000978, "Member 'AMarinerTripMine::TeamColorParameterName' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, BeamStartPointParameterName) == 0x000980, "Member 'AMarinerTripMine::BeamStartPointParameterName' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, BeamEndPointParameterName) == 0x000988, "Member 'AMarinerTripMine::BeamEndPointParameterName' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, BeamScaleParameterName) == 0x000990, "Member 'AMarinerTripMine::BeamScaleParameterName' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, BeamAlphaParameterName) == 0x000998, "Member 'AMarinerTripMine::BeamAlphaParameterName' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, FriendlyTeamVectorColor) == 0x0009A0, "Member 'AMarinerTripMine::FriendlyTeamVectorColor' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, HostileTeamVectorColor) == 0x0009AC, "Member 'AMarinerTripMine::HostileTeamVectorColor' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, NeutralTeamVectorColor) == 0x0009B8, "Member 'AMarinerTripMine::NeutralTeamVectorColor' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, UnknownTeamVectorColor) == 0x0009C4, "Member 'AMarinerTripMine::UnknownTeamVectorColor' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, TriggeredCameraShake) == 0x0009D0, "Member 'AMarinerTripMine::TriggeredCameraShake' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, CameraShakeScale) == 0x0009D8, "Member 'AMarinerTripMine::CameraShakeScale' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, TriggeredCameraShakeRadius) == 0x0009DC, "Member 'AMarinerTripMine::TriggeredCameraShakeRadius' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, CameraShakeOverlapChannel) == 0x0009E0, "Member 'AMarinerTripMine::CameraShakeOverlapChannel' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, CameraShakeOverlapsFastCollisionCollection) == 0x0009E1, "Member 'AMarinerTripMine::CameraShakeOverlapsFastCollisionCollection' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, DamagedCharacters) == 0x0009E8, "Member 'AMarinerTripMine::DamagedCharacters' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, DefaultDamageType) == 0x0009F8, "Member 'AMarinerTripMine::DefaultDamageType' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, PlayerDamageOverlapChannel) == 0x000A00, "Member 'AMarinerTripMine::PlayerDamageOverlapChannel' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, AOEDamageMultiplier) == 0x000A04, "Member 'AMarinerTripMine::AOEDamageMultiplier' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, PlayerOverlapsFastCollisionCollection) == 0x000A08, "Member 'AMarinerTripMine::PlayerOverlapsFastCollisionCollection' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, InvalidCharacterOverlapTags) == 0x000A10, "Member 'AMarinerTripMine::InvalidCharacterOverlapTags' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, TriggeredSequenceTotalDuration) == 0x000A30, "Member 'AMarinerTripMine::TriggeredSequenceTotalDuration' has a wrong offset!");
static_assert(offsetof(AMarinerTripMine, bHasExploded) == 0x000A34, "Member 'AMarinerTripMine::bHasExploded' has a wrong offset!");

// Class Mariner.MarinerGameModeMainMenu
// 0x0000 (0x02B8 - 0x02B8)
class AMarinerGameModeMainMenu final : public AGameModeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameModeMainMenu">();
	}
	static class AMarinerGameModeMainMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerGameModeMainMenu>();
	}
};
static_assert(alignof(AMarinerGameModeMainMenu) == 0x000008, "Wrong alignment on AMarinerGameModeMainMenu");
static_assert(sizeof(AMarinerGameModeMainMenu) == 0x0002B8, "Wrong size on AMarinerGameModeMainMenu");

// Class Mariner.MarinerGameplayAbilitySet
// 0x0010 (0x0040 - 0x0030)
class UMarinerGameplayAbilitySet final : public UDataAsset
{
public:
	TArray<struct FMarinerGameplayAbilityBinding> Abilities;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameplayAbilitySet">();
	}
	static class UMarinerGameplayAbilitySet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGameplayAbilitySet>();
	}
};
static_assert(alignof(UMarinerGameplayAbilitySet) == 0x000008, "Wrong alignment on UMarinerGameplayAbilitySet");
static_assert(sizeof(UMarinerGameplayAbilitySet) == 0x000040, "Wrong size on UMarinerGameplayAbilitySet");
static_assert(offsetof(UMarinerGameplayAbilitySet, Abilities) == 0x000030, "Member 'UMarinerGameplayAbilitySet::Abilities' has a wrong offset!");

// Class Mariner.MarinerGameplayCueManager
// 0x0000 (0x0310 - 0x0310)
class UMarinerGameplayCueManager final : public UGameplayCueManager
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameplayCueManager">();
	}
	static class UMarinerGameplayCueManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGameplayCueManager>();
	}
};
static_assert(alignof(UMarinerGameplayCueManager) == 0x000008, "Wrong alignment on UMarinerGameplayCueManager");
static_assert(sizeof(UMarinerGameplayCueManager) == 0x000310, "Wrong size on UMarinerGameplayCueManager");

// Class Mariner.MarinerGameplayEffect_DisableDynamicGravityFrictionAndBraking
// 0x0000 (0x0770 - 0x0770)
class UMarinerGameplayEffect_DisableDynamicGravityFrictionAndBraking : public UMarinerGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameplayEffect_DisableDynamicGravityFrictionAndBraking">();
	}
	static class UMarinerGameplayEffect_DisableDynamicGravityFrictionAndBraking* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGameplayEffect_DisableDynamicGravityFrictionAndBraking>();
	}
};
static_assert(alignof(UMarinerGameplayEffect_DisableDynamicGravityFrictionAndBraking) == 0x000008, "Wrong alignment on UMarinerGameplayEffect_DisableDynamicGravityFrictionAndBraking");
static_assert(sizeof(UMarinerGameplayEffect_DisableDynamicGravityFrictionAndBraking) == 0x000770, "Wrong size on UMarinerGameplayEffect_DisableDynamicGravityFrictionAndBraking");

// Class Mariner.MarinerGameplayTagBundle
// 0x0020 (0x0050 - 0x0030)
class UMarinerGameplayTagBundle : public UDataAsset
{
public:
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameplayTagBundle">();
	}
	static class UMarinerGameplayTagBundle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGameplayTagBundle>();
	}
};
static_assert(alignof(UMarinerGameplayTagBundle) == 0x000008, "Wrong alignment on UMarinerGameplayTagBundle");
static_assert(sizeof(UMarinerGameplayTagBundle) == 0x000050, "Wrong size on UMarinerGameplayTagBundle");
static_assert(offsetof(UMarinerGameplayTagBundle, GameplayTags) == 0x000030, "Member 'UMarinerGameplayTagBundle::GameplayTags' has a wrong offset!");

// Class Mariner.MarinerGameSession
// 0x0000 (0x0230 - 0x0230)
class AMarinerGameSession final : public AGameSession
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameSession">();
	}
	static class AMarinerGameSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerGameSession>();
	}
};
static_assert(alignof(AMarinerGameSession) == 0x000008, "Wrong alignment on AMarinerGameSession");
static_assert(sizeof(AMarinerGameSession) == 0x000230, "Wrong size on AMarinerGameSession");

// Class Mariner.MarinerGameViewportClient
// 0x00E0 (0x03C8 - 0x02E8)
class UMarinerGameViewportClient final : public UGameViewportClient
{
public:
	uint8                                         Pad_18CB[0x40];                                    // 0x02E8(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerWatermark*                      Watermark;                                         // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18CC[0x10];                                    // 0x0330(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerDebugInfoWidget*                DebugInfoWidget;                                   // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18CD[0x10];                                    // 0x0348(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerScreenWipeWidget*               ScreenWipeWidget;                                  // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerInputOverlay*                   InputOverlay;                                      // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18CE[0x20];                                    // 0x0368(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerLoadTransitionWidget*           LoadTransition;                                    // 0x0388(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerLoadingScreen*                  PreloadLoadingScreen;                              // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18CF[0x28];                                    // 0x0398(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerTTSDialogBase*                  TTSDialog;                                         // 0x03C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnMoviePlaybackFinished();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGameViewportClient">();
	}
	static class UMarinerGameViewportClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGameViewportClient>();
	}
};
static_assert(alignof(UMarinerGameViewportClient) == 0x000008, "Wrong alignment on UMarinerGameViewportClient");
static_assert(sizeof(UMarinerGameViewportClient) == 0x0003C8, "Wrong size on UMarinerGameViewportClient");
static_assert(offsetof(UMarinerGameViewportClient, Watermark) == 0x000328, "Member 'UMarinerGameViewportClient::Watermark' has a wrong offset!");
static_assert(offsetof(UMarinerGameViewportClient, DebugInfoWidget) == 0x000340, "Member 'UMarinerGameViewportClient::DebugInfoWidget' has a wrong offset!");
static_assert(offsetof(UMarinerGameViewportClient, ScreenWipeWidget) == 0x000358, "Member 'UMarinerGameViewportClient::ScreenWipeWidget' has a wrong offset!");
static_assert(offsetof(UMarinerGameViewportClient, InputOverlay) == 0x000360, "Member 'UMarinerGameViewportClient::InputOverlay' has a wrong offset!");
static_assert(offsetof(UMarinerGameViewportClient, LoadTransition) == 0x000388, "Member 'UMarinerGameViewportClient::LoadTransition' has a wrong offset!");
static_assert(offsetof(UMarinerGameViewportClient, PreloadLoadingScreen) == 0x000390, "Member 'UMarinerGameViewportClient::PreloadLoadingScreen' has a wrong offset!");
static_assert(offsetof(UMarinerGameViewportClient, TTSDialog) == 0x0003C0, "Member 'UMarinerGameViewportClient::TTSDialog' has a wrong offset!");

// Class Mariner.MarinerGauntletLoginController
// 0x0000 (0x0060 - 0x0060)
class UMarinerGauntletLoginController final : public UMarinerGauntletController
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGauntletLoginController">();
	}
	static class UMarinerGauntletLoginController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGauntletLoginController>();
	}
};
static_assert(alignof(UMarinerGauntletLoginController) == 0x000008, "Wrong alignment on UMarinerGauntletLoginController");
static_assert(sizeof(UMarinerGauntletLoginController) == 0x000060, "Wrong size on UMarinerGauntletLoginController");

// Class Mariner.MarinerGauntletPerformanceController
// 0x0018 (0x0078 - 0x0060)
class UMarinerGauntletPerformanceController final : public UMarinerGauntletController
{
public:
	TArray<struct FGuid>                          MapsToRun;                                         // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18D0[0x8];                                     // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StartPerformanceTests();
	void StartProfiling();
	void StopPerformanceTests();
	void StopProfiling();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGauntletPerformanceController">();
	}
	static class UMarinerGauntletPerformanceController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGauntletPerformanceController>();
	}
};
static_assert(alignof(UMarinerGauntletPerformanceController) == 0x000008, "Wrong alignment on UMarinerGauntletPerformanceController");
static_assert(sizeof(UMarinerGauntletPerformanceController) == 0x000078, "Wrong size on UMarinerGauntletPerformanceController");
static_assert(offsetof(UMarinerGauntletPerformanceController, MapsToRun) == 0x000060, "Member 'UMarinerGauntletPerformanceController::MapsToRun' has a wrong offset!");

// Class Mariner.MarinerGlobalPostProcess
// 0x0008 (0x0220 - 0x0218)
class AMarinerGlobalPostProcess : public AActor
{
public:
	class UMaterialParameterCollection*           LightingParamCollection;                           // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGlobalPostProcess">();
	}
	static class AMarinerGlobalPostProcess* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerGlobalPostProcess>();
	}
};
static_assert(alignof(AMarinerGlobalPostProcess) == 0x000008, "Wrong alignment on AMarinerGlobalPostProcess");
static_assert(sizeof(AMarinerGlobalPostProcess) == 0x000220, "Wrong size on AMarinerGlobalPostProcess");
static_assert(offsetof(AMarinerGlobalPostProcess, LightingParamCollection) == 0x000218, "Member 'AMarinerGlobalPostProcess::LightingParamCollection' has a wrong offset!");

// Class Mariner.MarinerPoolWidget
// 0x0000 (0x0028 - 0x0028)
class IMarinerPoolWidget final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPoolWidget">();
	}
	static class IMarinerPoolWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarinerPoolWidget>();
	}
};
static_assert(alignof(IMarinerPoolWidget) == 0x000008, "Wrong alignment on IMarinerPoolWidget");
static_assert(sizeof(IMarinerPoolWidget) == 0x000028, "Wrong size on IMarinerPoolWidget");

// Class Mariner.MarinerGlobalsFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UMarinerGlobalsFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class AMarinerItem* AuthoritySpawnItem(class UObject* WorldContextObject, TSubclassOf<class AMarinerItem> ItemType, class APawn* ItemInstigator, const struct FTransform& Transform);
	static bool ComponentHasInvisibilityLock(class USceneComponent* Component);
	static bool DebugEquipCharacterItemToProfile(const TSoftClassPtr<class UClass> CharacterClass, EMangoItemType ItemType, bool bRanked, struct FMangoEquipItem& ItemToEquip, struct FMangoProfile& Profile);
	static class UMarinerAchievementsGlobals* GetAchievementsGlobals();
	static class UMarinerSettingsGlobals* GetActiveSettingsGlobals();
	static class FString GetActorRoleString(const class AActor* Actor);
	static class UMarinerCameraGlobals* GetCameraGlobals();
	static class UMarinerCharacterLiteGlobals* GetCharacterLiteGlobals();
	static class UMarinerChatGlobals* GetChatGlobals();
	static class UObject* GetClassDefaultObject(TSubclassOf<class UObject> ObjectClass);
	static class FString GetCurrentCulture();
	static class UMarinerDemoGlobals* GetDemoGlobals();
	static class UFastCollisionManager* GetFastCollisionManager();
	static class UMarinerFrontEndGlobals* GetFrontEndGlobals();
	static class UMarinerGameGlobals* GetGameGlobals();
	static EMarinerHostility GetHostilityBetweenTeams(int32 TeamIndexA, int32 TeamIndexB);
	static class UMarinerInputGlobals* GetInputGlobals();
	static class UTexture* GetItemActivationUITexture(const TSubclassOf<class AMarinerItem>& Item);
	static class FString GetMangoRealm(const class UObject* WorldContextObject);
	static class UMarinerMapGlobals* GetMapGlobals();
	static class UMarinerGlobals* GetMarinerGlobals(bool* IsValid);
	static const struct FColor GetMarinerTeamColorByHostility(const class UObject* WorldContextObject, bool* bIsValid, EMarinerHostility InHostility);
	static class FText GetMarinerTeamName(const class UObject* WorldContextObject, bool* bIsValid, int32 TeamIndex);
	static class UMarinerMenuGlobals* GetMenuGlobals();
	static class UMarinerModeGlobals* GetModeGlobals();
	static class FString GetPlatformDefaultCulture();
	static class UMarinerPoolingManager* GetPoolingManager(const class UObject* WorldContextObject);
	static class UMarinerRealityObjectManager* GetRealityManager(const class UObject* WorldContextObject);
	static int32 GetRelativeTeamIndexToLocalPlayer(const class AActor* Actor);
	static int32 GetServerTickRate();
	static class FString GetSoftClassAssetName(const TSoftClassPtr<class UClass>& SoftClass);
	static class UMarinerUIGlobals* GetUIGlobals();
	static bool IsBuildShipping();
	static void IsChildOfSoftReference(const class UObject* Object, TSoftClassPtr<class UClass> PossibleParent, EExecutionPins* Branches);
	static bool IsChildOfSoftReferencePure(const class UObject* Object, TSoftClassPtr<class UClass> PossibleParent);
	static void IsEqualSoftReference(const class UObject* Object, TSoftClassPtr<class UClass> EqualTo, EExecutionPins* Branches);
	static bool IsEqualSoftReferencePure(const class UObject* Object, TSoftClassPtr<class UClass> EqualTo);
	static bool IsOSSOrigin(const class UObject* WorldContextObject);
	static bool IsOSSSteam(const class UObject* WorldContextObject);
	static bool IsPlatformPC();
	static bool IsPlatformPS4();
	static bool IsPlatformStadia();
	static bool IsPlatformSwitch();
	static bool IsPlatformX1();
	static bool IsPlayInEditorMode();
	static void SetComponentInvisibilityLock(class USceneComponent* Component, bool bLockInvisibility);
	static bool SetCurrentCulture(const class FString& InCultureName);
	static void SetVisibilityRelativeToLocalPlayer(class USceneComponent* Component, bool bNewVisbility, bool bPropagateToChildren);
	static class APawn* SpawnAIFromClassWithGivenController(class UObject* WorldContextObject, TSubclassOf<class APawn> PawnClass, class AAIController* Controller, class UBehaviorTree* BehaviorTree, const struct FVector& Location, const struct FRotator& Rotation, bool bNoCollisionFail);
	static class UMarinerParticleSystemComponent* SpawnMarinerEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bAutoDestroy);
	static EMarinerHostility TryAndGetHostilityRelativeToLocalPlayer(const class UObject* WorldContextObject, int32 InTeamIndex);
	static class AMarinerBasePlayerController* TryAndGetLocalPlayerController(const class UObject* WorldContextObject);
	static void UpdateAudioComponentRelativeHostility(class UAkComponent* AkComponent, const class APawn* SoundInstigator);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGlobalsFunctionLibrary">();
	}
	static class UMarinerGlobalsFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGlobalsFunctionLibrary>();
	}
};
static_assert(alignof(UMarinerGlobalsFunctionLibrary) == 0x000008, "Wrong alignment on UMarinerGlobalsFunctionLibrary");
static_assert(sizeof(UMarinerGlobalsFunctionLibrary) == 0x000028, "Wrong size on UMarinerGlobalsFunctionLibrary");

// Class Mariner.MarinerGrapplingHookBehavior
// 0x0000 (0x0028 - 0x0028)
class UMarinerGrapplingHookBehavior : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGrapplingHookBehavior">();
	}
	static class UMarinerGrapplingHookBehavior* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGrapplingHookBehavior>();
	}
};
static_assert(alignof(UMarinerGrapplingHookBehavior) == 0x000008, "Wrong alignment on UMarinerGrapplingHookBehavior");
static_assert(sizeof(UMarinerGrapplingHookBehavior) == 0x000028, "Wrong size on UMarinerGrapplingHookBehavior");

// Class Mariner.MarinerGrapplingHookBehavior_Bungee
// 0x0010 (0x0038 - 0x0028)
class UMarinerGrapplingHookBehavior_Bungee final : public UMarinerGrapplingHookBehavior
{
public:
	float                                         SpringConstant;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExertForceOnCharacterAlways;                      // 0x002C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExertForceOnAnchoredDynamicObject;                // 0x002D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCableCanBreak;                                    // 0x002E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18E7[0x1];                                     // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CableBreakLength;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18E8[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGrapplingHookBehavior_Bungee">();
	}
	static class UMarinerGrapplingHookBehavior_Bungee* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGrapplingHookBehavior_Bungee>();
	}
};
static_assert(alignof(UMarinerGrapplingHookBehavior_Bungee) == 0x000008, "Wrong alignment on UMarinerGrapplingHookBehavior_Bungee");
static_assert(sizeof(UMarinerGrapplingHookBehavior_Bungee) == 0x000038, "Wrong size on UMarinerGrapplingHookBehavior_Bungee");
static_assert(offsetof(UMarinerGrapplingHookBehavior_Bungee, SpringConstant) == 0x000028, "Member 'UMarinerGrapplingHookBehavior_Bungee::SpringConstant' has a wrong offset!");
static_assert(offsetof(UMarinerGrapplingHookBehavior_Bungee, bExertForceOnCharacterAlways) == 0x00002C, "Member 'UMarinerGrapplingHookBehavior_Bungee::bExertForceOnCharacterAlways' has a wrong offset!");
static_assert(offsetof(UMarinerGrapplingHookBehavior_Bungee, bExertForceOnAnchoredDynamicObject) == 0x00002D, "Member 'UMarinerGrapplingHookBehavior_Bungee::bExertForceOnAnchoredDynamicObject' has a wrong offset!");
static_assert(offsetof(UMarinerGrapplingHookBehavior_Bungee, bCableCanBreak) == 0x00002E, "Member 'UMarinerGrapplingHookBehavior_Bungee::bCableCanBreak' has a wrong offset!");
static_assert(offsetof(UMarinerGrapplingHookBehavior_Bungee, CableBreakLength) == 0x000030, "Member 'UMarinerGrapplingHookBehavior_Bungee::CableBreakLength' has a wrong offset!");

// Class Mariner.MarinerPostGameStatHeader
// 0x0008 (0x0238 - 0x0230)
class UMarinerPostGameStatHeader : public UUserWidget
{
public:
	class UTextBlock*                             Bound_TextStatHeader;                              // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPostGameStatHeader">();
	}
	static class UMarinerPostGameStatHeader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPostGameStatHeader>();
	}
};
static_assert(alignof(UMarinerPostGameStatHeader) == 0x000008, "Wrong alignment on UMarinerPostGameStatHeader");
static_assert(sizeof(UMarinerPostGameStatHeader) == 0x000238, "Wrong size on UMarinerPostGameStatHeader");
static_assert(offsetof(UMarinerPostGameStatHeader, Bound_TextStatHeader) == 0x000230, "Member 'UMarinerPostGameStatHeader::Bound_TextStatHeader' has a wrong offset!");

// Class Mariner.MarinerGridPanel
// 0x0030 (0x0180 - 0x0150)
class UMarinerGridPanel final : public UGridPanel
{
public:
	uint8                                         Pad_18E9[0x20];                                    // 0x0150(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bWrapHorizontally;                                 // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWrapVertically;                                   // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18EA[0x2];                                     // 0x0172(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              StartingCoordinate;                                // 0x0174(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsumeAllInput;                                  // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18EB[0x3];                                     // 0x017D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddChildToGridWithColumnAndRow(class UUserWidget* Content, int32 Column, int32 Row, int32 ColumnSpan, int32 RowSpan);
	class UGridSlot* AddChildToGridWithWrapping(class UUserWidget* Content, const int32 Param_Index);
	void ClearHighlighting();
	void SetColumnFillMultiple(const TArray<float>& FillValues);
	void SetFixedColumnFill(float FillValue);
	void SetFixedRowFill(float FillValue);
	void SetHighlightedSlot(int32 Column, int32 Row, bool bForce);
	void SetRowFillMultiple(const TArray<float>& FillValues);

	void GetHighlightedSlot(int32* OutColumn, int32* OutRow) const;
	class UWidget* GetHighlightedWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGridPanel">();
	}
	static class UMarinerGridPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGridPanel>();
	}
};
static_assert(alignof(UMarinerGridPanel) == 0x000008, "Wrong alignment on UMarinerGridPanel");
static_assert(sizeof(UMarinerGridPanel) == 0x000180, "Wrong size on UMarinerGridPanel");
static_assert(offsetof(UMarinerGridPanel, bWrapHorizontally) == 0x000170, "Member 'UMarinerGridPanel::bWrapHorizontally' has a wrong offset!");
static_assert(offsetof(UMarinerGridPanel, bWrapVertically) == 0x000171, "Member 'UMarinerGridPanel::bWrapVertically' has a wrong offset!");
static_assert(offsetof(UMarinerGridPanel, StartingCoordinate) == 0x000174, "Member 'UMarinerGridPanel::StartingCoordinate' has a wrong offset!");
static_assert(offsetof(UMarinerGridPanel, bConsumeAllInput) == 0x00017C, "Member 'UMarinerGridPanel::bConsumeAllInput' has a wrong offset!");

// Class Mariner.MarinerGridStatsWidget
// 0x0018 (0x02C8 - 0x02B0)
class UMarinerGridStatsWidget final : public UMarinerUserWidget
{
public:
	int32                                         NumRows;                                           // 0x02B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumColumns;                                        // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_TextStatGroupName;                           // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUniformGridPanel*                      Bound_RootUniformGrid;                             // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGridStatsWidget">();
	}
	static class UMarinerGridStatsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGridStatsWidget>();
	}
};
static_assert(alignof(UMarinerGridStatsWidget) == 0x000008, "Wrong alignment on UMarinerGridStatsWidget");
static_assert(sizeof(UMarinerGridStatsWidget) == 0x0002C8, "Wrong size on UMarinerGridStatsWidget");
static_assert(offsetof(UMarinerGridStatsWidget, NumRows) == 0x0002B0, "Member 'UMarinerGridStatsWidget::NumRows' has a wrong offset!");
static_assert(offsetof(UMarinerGridStatsWidget, NumColumns) == 0x0002B4, "Member 'UMarinerGridStatsWidget::NumColumns' has a wrong offset!");
static_assert(offsetof(UMarinerGridStatsWidget, Bound_TextStatGroupName) == 0x0002B8, "Member 'UMarinerGridStatsWidget::Bound_TextStatGroupName' has a wrong offset!");
static_assert(offsetof(UMarinerGridStatsWidget, Bound_RootUniformGrid) == 0x0002C0, "Member 'UMarinerGridStatsWidget::Bound_RootUniformGrid' has a wrong offset!");

// Class Mariner.MarinerGroupHeaderWidget
// 0x0010 (0x0240 - 0x0230)
class UMarinerGroupHeaderWidget : public UUserWidget
{
public:
	uint8                                         Pad_18EE[0x8];                                     // 0x0230(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URichTextBlock*                         Bound_RichTextHeader;                              // 0x0238(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerGroupHeaderWidget">();
	}
	static class UMarinerGroupHeaderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerGroupHeaderWidget>();
	}
};
static_assert(alignof(UMarinerGroupHeaderWidget) == 0x000008, "Wrong alignment on UMarinerGroupHeaderWidget");
static_assert(sizeof(UMarinerGroupHeaderWidget) == 0x000240, "Wrong size on UMarinerGroupHeaderWidget");
static_assert(offsetof(UMarinerGroupHeaderWidget, Bound_RichTextHeader) == 0x000238, "Member 'UMarinerGroupHeaderWidget::Bound_RichTextHeader' has a wrong offset!");

// Class Mariner.MarinerHighlightedModeWidget
// 0x0020 (0x0438 - 0x0418)
class UMarinerHighlightedModeWidget : public UMarinerAnimatedWidget
{
public:
	class UTextBlock*                             Bound_ModeDescription;                             // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_ModeIcon;                                    // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18EF[0x10];                                    // 0x0428(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerHighlightedModeWidget">();
	}
	static class UMarinerHighlightedModeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerHighlightedModeWidget>();
	}
};
static_assert(alignof(UMarinerHighlightedModeWidget) == 0x000008, "Wrong alignment on UMarinerHighlightedModeWidget");
static_assert(sizeof(UMarinerHighlightedModeWidget) == 0x000438, "Wrong size on UMarinerHighlightedModeWidget");
static_assert(offsetof(UMarinerHighlightedModeWidget, Bound_ModeDescription) == 0x000418, "Member 'UMarinerHighlightedModeWidget::Bound_ModeDescription' has a wrong offset!");
static_assert(offsetof(UMarinerHighlightedModeWidget, Bound_ModeIcon) == 0x000420, "Member 'UMarinerHighlightedModeWidget::Bound_ModeIcon' has a wrong offset!");

// Class Mariner.MarinerHorizontalBox
// 0x0028 (0x0158 - 0x0130)
class UMarinerHorizontalBox final : public UHorizontalBox
{
public:
	uint8                                         Pad_18F0[0x20];                                    // 0x0130(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bWrap;                                             // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bConsumeHorizontalInput;                           // 0x0151(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bConsumeVerticalInput;                             // 0x0152(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18F1[0x5];                                     // 0x0153(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearHighlighting();
	void HighlightWidgetViaIndex(int32 Param_Index);

	class UWidget* GetHighlightedWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerHorizontalBox">();
	}
	static class UMarinerHorizontalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerHorizontalBox>();
	}
};
static_assert(alignof(UMarinerHorizontalBox) == 0x000008, "Wrong alignment on UMarinerHorizontalBox");
static_assert(sizeof(UMarinerHorizontalBox) == 0x000158, "Wrong size on UMarinerHorizontalBox");
static_assert(offsetof(UMarinerHorizontalBox, bWrap) == 0x000150, "Member 'UMarinerHorizontalBox::bWrap' has a wrong offset!");
static_assert(offsetof(UMarinerHorizontalBox, bConsumeHorizontalInput) == 0x000151, "Member 'UMarinerHorizontalBox::bConsumeHorizontalInput' has a wrong offset!");
static_assert(offsetof(UMarinerHorizontalBox, bConsumeVerticalInput) == 0x000152, "Member 'UMarinerHorizontalBox::bConsumeVerticalInput' has a wrong offset!");

// Class Mariner.MarinerHUD
// 0x0148 (0x0450 - 0x0308)
class AMarinerHUD : public AHUD
{
public:
	uint8                                         Pad_18F2[0x8];                                     // 0x0308(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnHUDFinishedBeginPlay;                            // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnHUDMatchStateChanged;                            // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnIsChatWheelAllowedChanged;                       // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnIsChatWheelActiveChanged;                        // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPreroundCountdownComplete;                       // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_18F3[0x8];                                     // 0x0360(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerBaseHUDWidget*                  HUDBase;                                           // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DelayAfterRoundTimerStartsBeforeChangingHUDState;  // 0x0370(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bScoreboardAllowed;                                // 0x0374(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18F4[0x3];                                     // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerBaseHUDWidget>      HUDBaseType;                                       // 0x0378(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerHUDWidget>          GameStateType;                                     // 0x0380(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerHUDState>           GameplayHUDState;                                  // 0x0388(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerHUDState>           ScoreboardHUDState;                                // 0x0390(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerHUDState>           MenuHUDState;                                      // 0x0398(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerHUDState>           ReturnToArenaState;                                // 0x03A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerHUDState>           MegablastedState;                                  // 0x03A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMenuStackLayer>     PregameLayer;                                      // 0x03B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerPostGameSequence>   PostGameSequenceType;                              // 0x03B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPostGameAchivementsEnabled;                       // 0x03C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18F5[0x7];                                     // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerPinGameModeWidget>  CharacterPinGameModeWidgetType;                    // 0x03C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerHUDWidget*                      CharacterWidgetInstance;                           // 0x03D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, class UMarinerMessageWidget*> MessageWidgets;                                    // 0x03D8(0x0050)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18F6[0x28];                                    // 0x0428(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyHUDState(const TSubclassOf<class UMarinerHUDState> State);
	void ClearChatWheelState();
	class UUserWidget* OnAddActiveItemWidgetWithDuration(class UObject* OwningCue, TSubclassOf<class UMarinerActiveItemWidget> ItemWidget, const struct FSlateBrush& Icon, float Duration);
	void OnArenaStateChanged(EMarinerArenaReturnState PreviousState, EMarinerArenaReturnState NewState);
	void OnDamageCaused(class AActor* DamagedActor, bool bDamageWasAOE, bool bDamageWasMegablast, int32 DamagedActorTeamIndex, TSubclassOf<class UDamageType> DamageType, const struct FVector& ImpulseVector, float DamageApplied, float DamageBlocked);
	void OnDamageTaken(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator);
	void OnKillCaused(class AActor* KilledActor, bool bDamageWasAOE, int32 KilledActorTeamIndex);
	void OnLocalizedMessageRecieved(class UMarinerLocalMessage* MessageCDO, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject);
	void OnMatchStateChanged(class FName State);
	void OnMegablastApplied(class AMarinerPlayerState* MegablastInstigatorPlayerState);
	void OnMegablastRemoved(class AMarinerPlayerState* MegablastInstigatorPlayerState);
	void OnModeHUDStatesChanged(int32 ActiveModeHUDStates);
	void OnPawnChanged(class AMarinerPlayerController* PossessingController, class APawn* PossessedPawn);
	void OnRootLayerChanged(class UMarinerMenuStackLayer* NewRootLayer);
	void OnRoundTimerStarted(bool bIsRoundTransition);
	void ReactToGameOver();
	void RemoveHUDState(const TSubclassOf<class UMarinerHUDState> State);
	void SetGameplayActive(bool bEnabled);
	void SetHUDEnabled(bool bEnabled);
	void ShowScoreboard(bool bEnabled);

	bool CanCharacterSelect() const;
	bool CanPause() const;
	bool CanUseChatWheel() const;
	TSubclassOf<class UMarinerPinGameModeWidget> GetCharacterPinGameModeWidgetType() const;
	bool IsHUDStateActive(const TSubclassOf<class UMarinerHUDState>& State) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerHUD">();
	}
	static class AMarinerHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerHUD>();
	}
};
static_assert(alignof(AMarinerHUD) == 0x000008, "Wrong alignment on AMarinerHUD");
static_assert(sizeof(AMarinerHUD) == 0x000450, "Wrong size on AMarinerHUD");
static_assert(offsetof(AMarinerHUD, OnHUDFinishedBeginPlay) == 0x000310, "Member 'AMarinerHUD::OnHUDFinishedBeginPlay' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, OnHUDMatchStateChanged) == 0x000320, "Member 'AMarinerHUD::OnHUDMatchStateChanged' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, OnIsChatWheelAllowedChanged) == 0x000330, "Member 'AMarinerHUD::OnIsChatWheelAllowedChanged' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, OnIsChatWheelActiveChanged) == 0x000340, "Member 'AMarinerHUD::OnIsChatWheelActiveChanged' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, OnPreroundCountdownComplete) == 0x000350, "Member 'AMarinerHUD::OnPreroundCountdownComplete' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, HUDBase) == 0x000368, "Member 'AMarinerHUD::HUDBase' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, DelayAfterRoundTimerStartsBeforeChangingHUDState) == 0x000370, "Member 'AMarinerHUD::DelayAfterRoundTimerStartsBeforeChangingHUDState' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, bScoreboardAllowed) == 0x000374, "Member 'AMarinerHUD::bScoreboardAllowed' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, HUDBaseType) == 0x000378, "Member 'AMarinerHUD::HUDBaseType' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, GameStateType) == 0x000380, "Member 'AMarinerHUD::GameStateType' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, GameplayHUDState) == 0x000388, "Member 'AMarinerHUD::GameplayHUDState' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, ScoreboardHUDState) == 0x000390, "Member 'AMarinerHUD::ScoreboardHUDState' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, MenuHUDState) == 0x000398, "Member 'AMarinerHUD::MenuHUDState' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, ReturnToArenaState) == 0x0003A0, "Member 'AMarinerHUD::ReturnToArenaState' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, MegablastedState) == 0x0003A8, "Member 'AMarinerHUD::MegablastedState' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, PregameLayer) == 0x0003B0, "Member 'AMarinerHUD::PregameLayer' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, PostGameSequenceType) == 0x0003B8, "Member 'AMarinerHUD::PostGameSequenceType' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, bPostGameAchivementsEnabled) == 0x0003C0, "Member 'AMarinerHUD::bPostGameAchivementsEnabled' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, CharacterPinGameModeWidgetType) == 0x0003C8, "Member 'AMarinerHUD::CharacterPinGameModeWidgetType' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, CharacterWidgetInstance) == 0x0003D0, "Member 'AMarinerHUD::CharacterWidgetInstance' has a wrong offset!");
static_assert(offsetof(AMarinerHUD, MessageWidgets) == 0x0003D8, "Member 'AMarinerHUD::MessageWidgets' has a wrong offset!");

// Class Mariner.MarinerHUDState
// 0x0008 (0x0030 - 0x0028)
class UMarinerHUDState : public UObject
{
public:
	uint8                                         Pad_18FD[0x8];                                     // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerHUDState">();
	}
	static class UMarinerHUDState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerHUDState>();
	}
};
static_assert(alignof(UMarinerHUDState) == 0x000008, "Wrong alignment on UMarinerHUDState");
static_assert(sizeof(UMarinerHUDState) == 0x000030, "Wrong size on UMarinerHUDState");

// Class Mariner.MarinerIndustrialSpinningDecoration
// 0x0028 (0x0260 - 0x0238)
class AMarinerIndustrialSpinningDecoration final : public AMarinerCosmeticReactiveProp
{
public:
	float                                         RotationRate;                                      // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRotationRate;                                   // 0x023C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AdditiveAccelerationRate;                          // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DecelerationRate;                                  // 0x0244(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpinDeco02SpinScale;                               // 0x0248(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpinDeco03SpinScale;                               // 0x024C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   SpinDeco02;                                        // 0x0250(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   SpinDeco03;                                        // 0x0258(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerIndustrialSpinningDecoration">();
	}
	static class AMarinerIndustrialSpinningDecoration* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerIndustrialSpinningDecoration>();
	}
};
static_assert(alignof(AMarinerIndustrialSpinningDecoration) == 0x000008, "Wrong alignment on AMarinerIndustrialSpinningDecoration");
static_assert(sizeof(AMarinerIndustrialSpinningDecoration) == 0x000260, "Wrong size on AMarinerIndustrialSpinningDecoration");
static_assert(offsetof(AMarinerIndustrialSpinningDecoration, RotationRate) == 0x000238, "Member 'AMarinerIndustrialSpinningDecoration::RotationRate' has a wrong offset!");
static_assert(offsetof(AMarinerIndustrialSpinningDecoration, MaxRotationRate) == 0x00023C, "Member 'AMarinerIndustrialSpinningDecoration::MaxRotationRate' has a wrong offset!");
static_assert(offsetof(AMarinerIndustrialSpinningDecoration, AdditiveAccelerationRate) == 0x000240, "Member 'AMarinerIndustrialSpinningDecoration::AdditiveAccelerationRate' has a wrong offset!");
static_assert(offsetof(AMarinerIndustrialSpinningDecoration, DecelerationRate) == 0x000244, "Member 'AMarinerIndustrialSpinningDecoration::DecelerationRate' has a wrong offset!");
static_assert(offsetof(AMarinerIndustrialSpinningDecoration, SpinDeco02SpinScale) == 0x000248, "Member 'AMarinerIndustrialSpinningDecoration::SpinDeco02SpinScale' has a wrong offset!");
static_assert(offsetof(AMarinerIndustrialSpinningDecoration, SpinDeco03SpinScale) == 0x00024C, "Member 'AMarinerIndustrialSpinningDecoration::SpinDeco03SpinScale' has a wrong offset!");
static_assert(offsetof(AMarinerIndustrialSpinningDecoration, SpinDeco02) == 0x000250, "Member 'AMarinerIndustrialSpinningDecoration::SpinDeco02' has a wrong offset!");
static_assert(offsetof(AMarinerIndustrialSpinningDecoration, SpinDeco03) == 0x000258, "Member 'AMarinerIndustrialSpinningDecoration::SpinDeco03' has a wrong offset!");

// Class Mariner.MarinerInGameScoreBoard
// 0x0070 (0x04D0 - 0x0460)
class UMarinerInGameScoreBoard final : public UMarinerHUDWidget
{
public:
	class UMarinerInGameTeamScore*                Bound_BlueTeamScore;                               // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerInGameTeamScore*                Bound_RedTeamScore;                                // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerInGameTeamScore*                Bound_RocketBotsLeftScore;                         // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        Bound_ScoreTypeSwitcher;                           // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           Bound_StandardScoreType;                           // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           Bound_RocketBotScoreType;                          // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_RocketBotsRemaining;                         // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerInGameScoreBoardTeam*           Bound_PlayerTeam;                                  // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerInGameScoreBoardTeam*           Bound_EnemyTeam;                                   // 0x04A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPrompt*                         Bound_TTSPrompt;                                   // 0x04A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarinerPlayerController*               OwningMarinerPlayerController;                     // 0x04B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18FE[0x8];                                     // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ScoreBoardStatsWidget;                             // 0x04C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18FF[0x8];                                     // 0x04C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Init(class AMarinerPlayerController* MarinerPlayerController);
	void OnPlayerAdded(class APlayerState* PlayerState);
	void OnPlayerPawnClassSet();
	void OnPlayerRemoved(class APlayerState* PlayerState);
	void OnPlayerTeamChanged(class AMarinerPlayerState* PlayerState);
	void OnScoreChanged(int32 TeamIndex, int32 NewScore);
	void UpdatePrompts();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerInGameScoreBoard">();
	}
	static class UMarinerInGameScoreBoard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerInGameScoreBoard>();
	}
};
static_assert(alignof(UMarinerInGameScoreBoard) == 0x000008, "Wrong alignment on UMarinerInGameScoreBoard");
static_assert(sizeof(UMarinerInGameScoreBoard) == 0x0004D0, "Wrong size on UMarinerInGameScoreBoard");
static_assert(offsetof(UMarinerInGameScoreBoard, Bound_BlueTeamScore) == 0x000460, "Member 'UMarinerInGameScoreBoard::Bound_BlueTeamScore' has a wrong offset!");
static_assert(offsetof(UMarinerInGameScoreBoard, Bound_RedTeamScore) == 0x000468, "Member 'UMarinerInGameScoreBoard::Bound_RedTeamScore' has a wrong offset!");
static_assert(offsetof(UMarinerInGameScoreBoard, Bound_RocketBotsLeftScore) == 0x000470, "Member 'UMarinerInGameScoreBoard::Bound_RocketBotsLeftScore' has a wrong offset!");
static_assert(offsetof(UMarinerInGameScoreBoard, Bound_ScoreTypeSwitcher) == 0x000478, "Member 'UMarinerInGameScoreBoard::Bound_ScoreTypeSwitcher' has a wrong offset!");
static_assert(offsetof(UMarinerInGameScoreBoard, Bound_StandardScoreType) == 0x000480, "Member 'UMarinerInGameScoreBoard::Bound_StandardScoreType' has a wrong offset!");
static_assert(offsetof(UMarinerInGameScoreBoard, Bound_RocketBotScoreType) == 0x000488, "Member 'UMarinerInGameScoreBoard::Bound_RocketBotScoreType' has a wrong offset!");
static_assert(offsetof(UMarinerInGameScoreBoard, Bound_RocketBotsRemaining) == 0x000490, "Member 'UMarinerInGameScoreBoard::Bound_RocketBotsRemaining' has a wrong offset!");
static_assert(offsetof(UMarinerInGameScoreBoard, Bound_PlayerTeam) == 0x000498, "Member 'UMarinerInGameScoreBoard::Bound_PlayerTeam' has a wrong offset!");
static_assert(offsetof(UMarinerInGameScoreBoard, Bound_EnemyTeam) == 0x0004A0, "Member 'UMarinerInGameScoreBoard::Bound_EnemyTeam' has a wrong offset!");
static_assert(offsetof(UMarinerInGameScoreBoard, Bound_TTSPrompt) == 0x0004A8, "Member 'UMarinerInGameScoreBoard::Bound_TTSPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerInGameScoreBoard, OwningMarinerPlayerController) == 0x0004B0, "Member 'UMarinerInGameScoreBoard::OwningMarinerPlayerController' has a wrong offset!");
static_assert(offsetof(UMarinerInGameScoreBoard, ScoreBoardStatsWidget) == 0x0004C0, "Member 'UMarinerInGameScoreBoard::ScoreBoardStatsWidget' has a wrong offset!");

// Class Mariner.MarinerInGameTeamScore
// 0x0008 (0x0238 - 0x0230)
class UMarinerInGameTeamScore final : public UUserWidget
{
public:
	class UTextBlock*                             Bound_TeamScore;                                   // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerInGameTeamScore">();
	}
	static class UMarinerInGameTeamScore* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerInGameTeamScore>();
	}
};
static_assert(alignof(UMarinerInGameTeamScore) == 0x000008, "Wrong alignment on UMarinerInGameTeamScore");
static_assert(sizeof(UMarinerInGameTeamScore) == 0x000238, "Wrong size on UMarinerInGameTeamScore");
static_assert(offsetof(UMarinerInGameTeamScore, Bound_TeamScore) == 0x000230, "Member 'UMarinerInGameTeamScore::Bound_TeamScore' has a wrong offset!");

// Class Mariner.MarinerInputComponent
// 0x0070 (0x01A8 - 0x0138)
class UMarinerInputComponent final : public UInputComponent
{
public:
	uint8                                         Pad_1900[0x58];                                    // 0x0138(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IdleBootAxisDeltaTolerance;                        // 0x0190(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1901[0x14];                                    // 0x0194(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerInputComponent">();
	}
	static class UMarinerInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerInputComponent>();
	}
};
static_assert(alignof(UMarinerInputComponent) == 0x000008, "Wrong alignment on UMarinerInputComponent");
static_assert(sizeof(UMarinerInputComponent) == 0x0001A8, "Wrong size on UMarinerInputComponent");
static_assert(offsetof(UMarinerInputComponent, IdleBootAxisDeltaTolerance) == 0x000190, "Member 'UMarinerInputComponent::IdleBootAxisDeltaTolerance' has a wrong offset!");

// Class Mariner.MarinerTotemGlobals
// 0x0040 (0x0070 - 0x0030)
class UMarinerTotemGlobals final : public UDataAsset
{
public:
	struct FMarinerInteractableData               InteractableData;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     RenderMaterial;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     PreviewMaterial;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BakedMaterial;                                     // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BakedUIMat;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     SymbolUIMat;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BorderUIMat;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     PatternUIMat;                                      // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTotemGlobals">();
	}
	static class UMarinerTotemGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTotemGlobals>();
	}
};
static_assert(alignof(UMarinerTotemGlobals) == 0x000008, "Wrong alignment on UMarinerTotemGlobals");
static_assert(sizeof(UMarinerTotemGlobals) == 0x000070, "Wrong size on UMarinerTotemGlobals");
static_assert(offsetof(UMarinerTotemGlobals, InteractableData) == 0x000030, "Member 'UMarinerTotemGlobals::InteractableData' has a wrong offset!");
static_assert(offsetof(UMarinerTotemGlobals, RenderMaterial) == 0x000038, "Member 'UMarinerTotemGlobals::RenderMaterial' has a wrong offset!");
static_assert(offsetof(UMarinerTotemGlobals, PreviewMaterial) == 0x000040, "Member 'UMarinerTotemGlobals::PreviewMaterial' has a wrong offset!");
static_assert(offsetof(UMarinerTotemGlobals, BakedMaterial) == 0x000048, "Member 'UMarinerTotemGlobals::BakedMaterial' has a wrong offset!");
static_assert(offsetof(UMarinerTotemGlobals, BakedUIMat) == 0x000050, "Member 'UMarinerTotemGlobals::BakedUIMat' has a wrong offset!");
static_assert(offsetof(UMarinerTotemGlobals, SymbolUIMat) == 0x000058, "Member 'UMarinerTotemGlobals::SymbolUIMat' has a wrong offset!");
static_assert(offsetof(UMarinerTotemGlobals, BorderUIMat) == 0x000060, "Member 'UMarinerTotemGlobals::BorderUIMat' has a wrong offset!");
static_assert(offsetof(UMarinerTotemGlobals, PatternUIMat) == 0x000068, "Member 'UMarinerTotemGlobals::PatternUIMat' has a wrong offset!");

// Class Mariner.InputOverlayPanel
// 0x0000 (0x0130 - 0x0130)
class UInputOverlayPanel final : public UCanvasPanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputOverlayPanel">();
	}
	static class UInputOverlayPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputOverlayPanel>();
	}
};
static_assert(alignof(UInputOverlayPanel) == 0x000008, "Wrong alignment on UInputOverlayPanel");
static_assert(sizeof(UInputOverlayPanel) == 0x000130, "Wrong size on UInputOverlayPanel");

// Class Mariner.MarinerInstancedMeshComponent
// 0x0000 (0x0500 - 0x0500)
class UMarinerInstancedMeshComponent final : public UInstancedStaticMeshComponent
{
public:
	void MarkInstanceMeshDirty();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerInstancedMeshComponent">();
	}
	static class UMarinerInstancedMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerInstancedMeshComponent>();
	}
};
static_assert(alignof(UMarinerInstancedMeshComponent) == 0x000010, "Wrong alignment on UMarinerInstancedMeshComponent");
static_assert(sizeof(UMarinerInstancedMeshComponent) == 0x000500, "Wrong size on UMarinerInstancedMeshComponent");

// Class Mariner.MarinerProjectileInstancedMeshActor
// 0x0060 (0x0278 - 0x0218)
class AMarinerProjectileInstancedMeshActor final : public AActor
{
public:
	TMap<TWeakObjectPtr<class UMarinerAbilitySkinData_ProjectileGeneral>, class UMarinerInstancedMeshComponent*> InstancedMeshContainer;                            // 0x0218(0x0050)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UMarinerInstancedMeshComponent*> AllInstancedMeshComponents;                        // 0x0268(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerProjectileInstancedMeshActor">();
	}
	static class AMarinerProjectileInstancedMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerProjectileInstancedMeshActor>();
	}
};
static_assert(alignof(AMarinerProjectileInstancedMeshActor) == 0x000008, "Wrong alignment on AMarinerProjectileInstancedMeshActor");
static_assert(sizeof(AMarinerProjectileInstancedMeshActor) == 0x000278, "Wrong size on AMarinerProjectileInstancedMeshActor");
static_assert(offsetof(AMarinerProjectileInstancedMeshActor, InstancedMeshContainer) == 0x000218, "Member 'AMarinerProjectileInstancedMeshActor::InstancedMeshContainer' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileInstancedMeshActor, AllInstancedMeshComponents) == 0x000268, "Member 'AMarinerProjectileInstancedMeshActor::AllInstancedMeshComponents' has a wrong offset!");

// Class Mariner.MarinerInteractableManager
// 0x0048 (0x0070 - 0x0028)
class UMarinerInteractableManager final : public UObject
{
public:
	uint8                                         Pad_1902[0x48];                                    // 0x0028(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void ClearControllerInteractables(const TArray<class UObject*>& InteractableObjects);
	static bool RegisterControllerInteractables(const TArray<class UObject*>& InteractableObjects);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerInteractableManager">();
	}
	static class UMarinerInteractableManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerInteractableManager>();
	}
};
static_assert(alignof(UMarinerInteractableManager) == 0x000008, "Wrong alignment on UMarinerInteractableManager");
static_assert(sizeof(UMarinerInteractableManager) == 0x000070, "Wrong size on UMarinerInteractableManager");

// Class Mariner.MarinerItemAttributes
// 0x0018 (0x0048 - 0x0030)
class UMarinerItemAttributes final : public UAttributeSet
{
public:
	struct FMarinerGameplayAttributeData          ItemUses;                                          // 0x0030(0x0010)(Net, RepNotify, NativeAccessSpecifierPublic)
	uint8                                         Pad_1904[0x8];                                     // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_ItemUses();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerItemAttributes">();
	}
	static class UMarinerItemAttributes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerItemAttributes>();
	}
};
static_assert(alignof(UMarinerItemAttributes) == 0x000008, "Wrong alignment on UMarinerItemAttributes");
static_assert(sizeof(UMarinerItemAttributes) == 0x000048, "Wrong size on UMarinerItemAttributes");
static_assert(offsetof(UMarinerItemAttributes, ItemUses) == 0x000030, "Member 'UMarinerItemAttributes::ItemUses' has a wrong offset!");

// Class Mariner.NavArea_MarinerTrustedLaunch
// 0x0000 (0x0048 - 0x0048)
class UNavArea_MarinerTrustedLaunch final : public UNavArea
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavArea_MarinerTrustedLaunch">();
	}
	static class UNavArea_MarinerTrustedLaunch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavArea_MarinerTrustedLaunch>();
	}
};
static_assert(alignof(UNavArea_MarinerTrustedLaunch) == 0x000008, "Wrong alignment on UNavArea_MarinerTrustedLaunch");
static_assert(sizeof(UNavArea_MarinerTrustedLaunch) == 0x000048, "Wrong size on UNavArea_MarinerTrustedLaunch");

// Class Mariner.MarinerItemLevelColumnWidget
// 0x0018 (0x02C8 - 0x02B0)
class UMarinerItemLevelColumnWidget : public UMarinerUserWidget
{
public:
	class UMarinerVerticalBox*                    Bound_ContentRoot;                                 // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1905[0x10];                                    // 0x02B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerItemLevelColumnWidget">();
	}
	static class UMarinerItemLevelColumnWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerItemLevelColumnWidget>();
	}
};
static_assert(alignof(UMarinerItemLevelColumnWidget) == 0x000008, "Wrong alignment on UMarinerItemLevelColumnWidget");
static_assert(sizeof(UMarinerItemLevelColumnWidget) == 0x0002C8, "Wrong size on UMarinerItemLevelColumnWidget");
static_assert(offsetof(UMarinerItemLevelColumnWidget, Bound_ContentRoot) == 0x0002B0, "Member 'UMarinerItemLevelColumnWidget::Bound_ContentRoot' has a wrong offset!");

// Class Mariner.MarinerDeadSpaceWidget
// 0x0008 (0x0238 - 0x0230)
class UMarinerDeadSpaceWidget : public UUserWidget
{
public:
	class USizeBox*                               Bound_SizeBox;                                     // 0x0230(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerDeadSpaceWidget">();
	}
	static class UMarinerDeadSpaceWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerDeadSpaceWidget>();
	}
};
static_assert(alignof(UMarinerDeadSpaceWidget) == 0x000008, "Wrong alignment on UMarinerDeadSpaceWidget");
static_assert(sizeof(UMarinerDeadSpaceWidget) == 0x000238, "Wrong size on UMarinerDeadSpaceWidget");
static_assert(offsetof(UMarinerDeadSpaceWidget, Bound_SizeBox) == 0x000230, "Member 'UMarinerDeadSpaceWidget::Bound_SizeBox' has a wrong offset!");

// Class Mariner.MarinerJumpPad
// 0x0108 (0x0320 - 0x0218)
class AMarinerJumpPad final : public AActor
{
public:
	bool                                          bShouldLaunchBots;                                 // 0x0218(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbortAIPathfindingWhenHit;                        // 0x0219(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1906[0x2];                                     // 0x021A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BotLaunchAngle;                                    // 0x021C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LaunchVelocity;                                    // 0x0220(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ItemLaunchVelocity;                                // 0x022C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpPadRadius;                                     // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpPadHeight;                                     // 0x023C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpPadZOffset;                                    // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CollectionsToLaunch;                               // 0x0244(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1907[0x3];                                     // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AkEventOnBeginPlay;                                // 0x0248(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEventOnEndPlay;                                  // 0x0250(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEventOnLaunchSFXPlayed;                          // 0x0258(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0260(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkComponent*                           AkAudioComponent;                                  // 0x0268(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        FXComponent;                                       // 0x0270(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerFastCapsuleComponent*           MarinerFastCapsuleForBotLaunch;                    // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                      CollisionCapsule;                                  // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UArrowComponent*                        DebugLaunchVelocityArrow;                          // 0x0288(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*               FXLaunch;                                          // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*               FXIdle;                                            // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NonPlayerVelocityMultiplier;                       // 0x02A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1908[0x4];                                     // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            JumpPadEffect;                                     // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarinerCharacter*                      MostRecentCharacterLaunched;                       // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LaunchCharacterCooldown_LatencyProtection;         // 0x02B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCurrentLaunchingCharacterIsBot;                   // 0x02BC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1909[0x3];                                     // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TWeakObjectPtr<class AMarinerCharacter>, float> CharacterLaunchRecord;                             // 0x02C0(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AActor>>          OverlappingNonCharacters;                          // 0x0310(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void OnActorLaunched(class AActor* Actor);
	void SetBotLaunchAngle(float NewBotLaunchAngle);

	bool DoesRequireSpecialLaunchLogic(class AActor* LaunchedActor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerJumpPad">();
	}
	static class AMarinerJumpPad* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerJumpPad>();
	}
};
static_assert(alignof(AMarinerJumpPad) == 0x000008, "Wrong alignment on AMarinerJumpPad");
static_assert(sizeof(AMarinerJumpPad) == 0x000320, "Wrong size on AMarinerJumpPad");
static_assert(offsetof(AMarinerJumpPad, bShouldLaunchBots) == 0x000218, "Member 'AMarinerJumpPad::bShouldLaunchBots' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, bAbortAIPathfindingWhenHit) == 0x000219, "Member 'AMarinerJumpPad::bAbortAIPathfindingWhenHit' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, BotLaunchAngle) == 0x00021C, "Member 'AMarinerJumpPad::BotLaunchAngle' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, LaunchVelocity) == 0x000220, "Member 'AMarinerJumpPad::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, ItemLaunchVelocity) == 0x00022C, "Member 'AMarinerJumpPad::ItemLaunchVelocity' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, JumpPadRadius) == 0x000238, "Member 'AMarinerJumpPad::JumpPadRadius' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, JumpPadHeight) == 0x00023C, "Member 'AMarinerJumpPad::JumpPadHeight' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, JumpPadZOffset) == 0x000240, "Member 'AMarinerJumpPad::JumpPadZOffset' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, CollectionsToLaunch) == 0x000244, "Member 'AMarinerJumpPad::CollectionsToLaunch' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, AkEventOnBeginPlay) == 0x000248, "Member 'AMarinerJumpPad::AkEventOnBeginPlay' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, AkEventOnEndPlay) == 0x000250, "Member 'AMarinerJumpPad::AkEventOnEndPlay' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, AkEventOnLaunchSFXPlayed) == 0x000258, "Member 'AMarinerJumpPad::AkEventOnLaunchSFXPlayed' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, DefaultSceneRoot) == 0x000260, "Member 'AMarinerJumpPad::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, AkAudioComponent) == 0x000268, "Member 'AMarinerJumpPad::AkAudioComponent' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, FXComponent) == 0x000270, "Member 'AMarinerJumpPad::FXComponent' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, MarinerFastCapsuleForBotLaunch) == 0x000278, "Member 'AMarinerJumpPad::MarinerFastCapsuleForBotLaunch' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, CollisionCapsule) == 0x000280, "Member 'AMarinerJumpPad::CollisionCapsule' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, DebugLaunchVelocityArrow) == 0x000288, "Member 'AMarinerJumpPad::DebugLaunchVelocityArrow' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, FXLaunch) == 0x000290, "Member 'AMarinerJumpPad::FXLaunch' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, FXIdle) == 0x000298, "Member 'AMarinerJumpPad::FXIdle' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, NonPlayerVelocityMultiplier) == 0x0002A0, "Member 'AMarinerJumpPad::NonPlayerVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, JumpPadEffect) == 0x0002A8, "Member 'AMarinerJumpPad::JumpPadEffect' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, MostRecentCharacterLaunched) == 0x0002B0, "Member 'AMarinerJumpPad::MostRecentCharacterLaunched' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, LaunchCharacterCooldown_LatencyProtection) == 0x0002B8, "Member 'AMarinerJumpPad::LaunchCharacterCooldown_LatencyProtection' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, bCurrentLaunchingCharacterIsBot) == 0x0002BC, "Member 'AMarinerJumpPad::bCurrentLaunchingCharacterIsBot' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, CharacterLaunchRecord) == 0x0002C0, "Member 'AMarinerJumpPad::CharacterLaunchRecord' has a wrong offset!");
static_assert(offsetof(AMarinerJumpPad, OverlappingNonCharacters) == 0x000310, "Member 'AMarinerJumpPad::OverlappingNonCharacters' has a wrong offset!");

// Class Mariner.MarinerLANLobbyGameMode
// 0x0000 (0x0300 - 0x0300)
class AMarinerLANLobbyGameMode final : public AGameMode
{
public:
	void RequestLaunchGame();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLANLobbyGameMode">();
	}
	static class AMarinerLANLobbyGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerLANLobbyGameMode>();
	}
};
static_assert(alignof(AMarinerLANLobbyGameMode) == 0x000008, "Wrong alignment on AMarinerLANLobbyGameMode");
static_assert(sizeof(AMarinerLANLobbyGameMode) == 0x000300, "Wrong size on AMarinerLANLobbyGameMode");

// Class Mariner.MarinerLANLobbyHUD
// 0x0000 (0x0450 - 0x0450)
class AMarinerLANLobbyHUD final : public AMarinerHUD
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLANLobbyHUD">();
	}
	static class AMarinerLANLobbyHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerLANLobbyHUD>();
	}
};
static_assert(alignof(AMarinerLANLobbyHUD) == 0x000008, "Wrong alignment on AMarinerLANLobbyHUD");
static_assert(sizeof(AMarinerLANLobbyHUD) == 0x000450, "Wrong size on AMarinerLANLobbyHUD");

// Class Mariner.MarinerLANLobbyPlayerController
// 0x0000 (0x0580 - 0x0580)
class AMarinerLANLobbyPlayerController final : public AMarinerBasePlayerController
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLANLobbyPlayerController">();
	}
	static class AMarinerLANLobbyPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerLANLobbyPlayerController>();
	}
};
static_assert(alignof(AMarinerLANLobbyPlayerController) == 0x000008, "Wrong alignment on AMarinerLANLobbyPlayerController");
static_assert(sizeof(AMarinerLANLobbyPlayerController) == 0x000580, "Wrong size on AMarinerLANLobbyPlayerController");

// Class Mariner.MarinerPlayerState
// 0x0268 (0x05A8 - 0x0340)
class AMarinerPlayerState : public APlayerState
{
public:
	uint8                                         Pad_190B[0x8];                                     // 0x0340(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnPawnClassSet;                                    // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPlayerNameSet;                                   // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPlayerStatChanged;                               // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnBotFakeProfileSkinSelectedDelegate;              // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnBotFakeProfileDataSet;                           // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMangoUserUpdated;                                // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCharacterRequestStateChanged;                    // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnSelectedCharacterChanged;                        // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCharacterRequestFailed;                          // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPlayerChangedTeam;                               // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCharacterSelected;                               // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnInitialRandomCharacterSet;                       // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCharacterReferenceUpdated;                       // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_190C[0x8];                                     // 0x0418(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bQuitter : 1;                                      // 0x0420(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         RejoinCount;                                       // 0x0421(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_190D[0x6];                                     // 0x0422(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerBotFakeProfileIndices          BotProfileIndices;                                 // 0x0428(0x0038)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	class UMarinerBotTypesData*                   BotTypesData;                                      // 0x0460(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_190E[0x8];                                     // 0x0468(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AMarinerCharacter>          PawnClass;                                         // 0x0470(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastTimeKnockedOut;                                // 0x0478(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastTimeReturned;                                  // 0x047C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CurrentOnlinePlatform;                             // 0x0480(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CurrentPlatformID_Insecure;                        // 0x0488(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSharingUsageData;                               // 0x0498(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSharingExternalUsageData;                       // 0x0499(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsUnderage;                                       // 0x049A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRequestedPawnClass;                            // 0x049B(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_190F[0x4];                                     // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SelectedCharacter;                                 // 0x04A0(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsIndependent;                                    // 0x04B0(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1910[0xB];                                     // 0x04B1(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         OnReactivatedByte;                                 // 0x04BC(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1911[0x3];                                     // 0x04BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamIndex;                                         // 0x04C0(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1912[0x4];                                     // 0x04C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlayerStat>                    Stats;                                             // 0x04C8(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	float                                         TimeSinceKnockedOutOtherPlayer;                    // 0x04D8(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1913[0x1C];                                    // 0x04DC(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerProfileObjectManager*           ProfileObjectManager;                              // 0x04F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1914[0x8];                                     // 0x0500(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      LoadedSelectedCharacter;                           // 0x0508(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1915[0x28];                                    // 0x0510(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InitialRandomCharacter;                            // 0x0538(0x0010)(Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1916[0x48];                                    // 0x0548(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPreGameReadyReplicationData           PreGameReadyEmoteData;                             // 0x0590(0x0010)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	struct FChatEmoteReplicationData              ChatEmoteRepData;                                  // 0x05A0(0x0002)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1917[0x6];                                     // 0x05A2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AurthorityOnPregameStateChanged(const class FName& NewPregameState);
	void BP_SetStatValue(class FName StatName, int32 Value);
	void BP_SetStatValueAsFloat(class FName StatName, float Value);
	bool CanPlayerSelectCharacter(const TSoftClassPtr<class UClass> Character);
	bool CheckIfPerformedDoubleKnockOut();
	void Client_OnCharacterRequestFailed(const class FString& RequestedCharacterString, const class FString& LastKnownSelectedCharacterString);
	void ClientInformAboutKnockout(class AMarinerPlayerState* KnockoutPlayerState, const class UDamageType* DamageType, class AMarinerPlayerState* FallPlayerState);
	void DoChatEmote(EMarinerInputActions InputAction);
	void DoPreGameReadyEmote(EMarinerInputActions InputAction);
	void Editor_ServerSetUniqueId(const class FString& InUniqueId);
	void IncrementFloatStatValue(class FName StatName, float Value, bool bValidForAchievement);
	void IncrementStatValue(class FName StatName, int32 Value, bool bValidForAchievement);
	void Multicast_SetPawnClass(TSubclassOf<class AMarinerCharacter> NewPawn, bool bFromClientRequest);
	void OnBotFakeProfileSkinUpdated(const int32 SelectedIndex);
	void OnDamageDealt(class AMarinerPlayerState* DamagedPlayer, float DamageDealt);
	void OnDamageRecieved(class AMarinerPlayerState* DamageDealingPlayer, float DamageDealt);
	void OnPregameStateChanged(const class FName NewPregameState);
	void OnRep_BotProfileIndices();
	void OnRep_ChatEmoteData();
	void OnRep_HasRequestedPawnClass();
	void OnRep_InitialRandomCharacter();
	void OnRep_OnReactivatedByte();
	void OnRep_PawnClass();
	void OnRep_PreGameEmoteData();
	void OnRep_SelectedCharacter();
	void OnRep_Stats(TArray<struct FPlayerStat>* OldStats);
	void OnRep_TeamIndex();
	void OnSelectedCharacterLoaded();
	void ScorePoints(int32 Points);
	void Server_DoChatEmote(EMarinerInputActions InputAction);
	void Server_DoPreGameReadyEmote(EMarinerInputActions InputAction);
	void Server_RequestPawnClass(const class FString& SoftObjectString);
	void Server_SetHasRequestedPawnClass(bool bHasRequested);
	void Server_SoftSelectPawnClass(const class FString& SoftObjectString);
	void ServerSetPawnClassAndPlayerName(TSubclassOf<class AMarinerCharacter> InPawn, bool bFromClientRequest, const class FString& InPlayerName);
	void ServerSetTeamIndex(const int32 NewTeamIndex);
	void SetIsIndependent(bool bNewIndependent);
	void SetPawnClass(TSubclassOf<class AMarinerCharacter> NewPawn, bool bFromClientRequest);
	void SetSelectedPawnClassLocal(const class FString& SoftObjectString);
	void SetTeamIndex(int32 NewTeamIndex);
	void UpdateTeamColors();

	class AMarinerCharacter* GetControlledCharacter() const;
	const class FName GetCurrentPlatform() const;
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> GetFakeBotActiveSkin() const;
	bool GetHasRequestedPawnClass() const;
	TSubclassOf<class AMarinerCharacter> GetPawnClass() const;
	class UMarinerProfileObjectManager* GetProfileObjectManager() const;
	float GetScore() const;
	const TSoftClassPtr<class UClass> GetSelectedCharacter() const;
	int32 GetStatValue(class FName StatName) const;
	float GetStatValueAsFloat(class FName StatName) const;
	class FText GetStatValueAsText(class FName StatName) const;
	int32 GetTeamIndex() const;
	bool IsBotTreatedLikePlayer() const;
	bool IsInActive() const;
	bool IsIndependent() const;
	bool IsStatFloatType(class FName StatName) const;
	bool ShouldTreatAsPlayer() const;
	class AMarinerCharacter* TryAndGetControlledCharacter() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPlayerState">();
	}
	static class AMarinerPlayerState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerPlayerState>();
	}
};
static_assert(alignof(AMarinerPlayerState) == 0x000008, "Wrong alignment on AMarinerPlayerState");
static_assert(sizeof(AMarinerPlayerState) == 0x0005A8, "Wrong size on AMarinerPlayerState");
static_assert(offsetof(AMarinerPlayerState, OnPawnClassSet) == 0x000348, "Member 'AMarinerPlayerState::OnPawnClassSet' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, OnPlayerNameSet) == 0x000358, "Member 'AMarinerPlayerState::OnPlayerNameSet' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, OnPlayerStatChanged) == 0x000368, "Member 'AMarinerPlayerState::OnPlayerStatChanged' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, OnBotFakeProfileSkinSelectedDelegate) == 0x000378, "Member 'AMarinerPlayerState::OnBotFakeProfileSkinSelectedDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, OnBotFakeProfileDataSet) == 0x000388, "Member 'AMarinerPlayerState::OnBotFakeProfileDataSet' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, OnMangoUserUpdated) == 0x000398, "Member 'AMarinerPlayerState::OnMangoUserUpdated' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, OnCharacterRequestStateChanged) == 0x0003A8, "Member 'AMarinerPlayerState::OnCharacterRequestStateChanged' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, OnSelectedCharacterChanged) == 0x0003B8, "Member 'AMarinerPlayerState::OnSelectedCharacterChanged' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, OnCharacterRequestFailed) == 0x0003C8, "Member 'AMarinerPlayerState::OnCharacterRequestFailed' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, OnPlayerChangedTeam) == 0x0003D8, "Member 'AMarinerPlayerState::OnPlayerChangedTeam' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, OnCharacterSelected) == 0x0003E8, "Member 'AMarinerPlayerState::OnCharacterSelected' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, OnInitialRandomCharacterSet) == 0x0003F8, "Member 'AMarinerPlayerState::OnInitialRandomCharacterSet' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, OnCharacterReferenceUpdated) == 0x000408, "Member 'AMarinerPlayerState::OnCharacterReferenceUpdated' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, RejoinCount) == 0x000421, "Member 'AMarinerPlayerState::RejoinCount' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, BotProfileIndices) == 0x000428, "Member 'AMarinerPlayerState::BotProfileIndices' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, BotTypesData) == 0x000460, "Member 'AMarinerPlayerState::BotTypesData' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, PawnClass) == 0x000470, "Member 'AMarinerPlayerState::PawnClass' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, LastTimeKnockedOut) == 0x000478, "Member 'AMarinerPlayerState::LastTimeKnockedOut' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, LastTimeReturned) == 0x00047C, "Member 'AMarinerPlayerState::LastTimeReturned' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, CurrentOnlinePlatform) == 0x000480, "Member 'AMarinerPlayerState::CurrentOnlinePlatform' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, CurrentPlatformID_Insecure) == 0x000488, "Member 'AMarinerPlayerState::CurrentPlatformID_Insecure' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, bIsSharingUsageData) == 0x000498, "Member 'AMarinerPlayerState::bIsSharingUsageData' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, bIsSharingExternalUsageData) == 0x000499, "Member 'AMarinerPlayerState::bIsSharingExternalUsageData' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, bIsUnderage) == 0x00049A, "Member 'AMarinerPlayerState::bIsUnderage' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, bHasRequestedPawnClass) == 0x00049B, "Member 'AMarinerPlayerState::bHasRequestedPawnClass' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, SelectedCharacter) == 0x0004A0, "Member 'AMarinerPlayerState::SelectedCharacter' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, bIsIndependent) == 0x0004B0, "Member 'AMarinerPlayerState::bIsIndependent' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, OnReactivatedByte) == 0x0004BC, "Member 'AMarinerPlayerState::OnReactivatedByte' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, TeamIndex) == 0x0004C0, "Member 'AMarinerPlayerState::TeamIndex' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, Stats) == 0x0004C8, "Member 'AMarinerPlayerState::Stats' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, TimeSinceKnockedOutOtherPlayer) == 0x0004D8, "Member 'AMarinerPlayerState::TimeSinceKnockedOutOtherPlayer' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, ProfileObjectManager) == 0x0004F8, "Member 'AMarinerPlayerState::ProfileObjectManager' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, LoadedSelectedCharacter) == 0x000508, "Member 'AMarinerPlayerState::LoadedSelectedCharacter' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, InitialRandomCharacter) == 0x000538, "Member 'AMarinerPlayerState::InitialRandomCharacter' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, PreGameReadyEmoteData) == 0x000590, "Member 'AMarinerPlayerState::PreGameReadyEmoteData' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerState, ChatEmoteRepData) == 0x0005A0, "Member 'AMarinerPlayerState::ChatEmoteRepData' has a wrong offset!");

// Class Mariner.MarinerProjectileFastOverlapResponseInterface
// 0x0000 (0x0028 - 0x0028)
class IMarinerProjectileFastOverlapResponseInterface final : public IInterface
{
public:
	void BeginProjectileFastOverlap(class AMarinerProjectile* OverlappedProjectile, const struct FHitResult& OverlapHit);
	void EndProjectileFastOverlap(class AMarinerProjectile* OverlappedProjectile, const struct FHitResult& OverlapHit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerProjectileFastOverlapResponseInterface">();
	}
	static class IMarinerProjectileFastOverlapResponseInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarinerProjectileFastOverlapResponseInterface>();
	}
};
static_assert(alignof(IMarinerProjectileFastOverlapResponseInterface) == 0x000008, "Wrong alignment on IMarinerProjectileFastOverlapResponseInterface");
static_assert(sizeof(IMarinerProjectileFastOverlapResponseInterface) == 0x000028, "Wrong size on IMarinerProjectileFastOverlapResponseInterface");

// Class Mariner.MarinerLANLobbyPlayerState
// 0x0000 (0x05A8 - 0x05A8)
class AMarinerLANLobbyPlayerState final : public AMarinerPlayerState
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLANLobbyPlayerState">();
	}
	static class AMarinerLANLobbyPlayerState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerLANLobbyPlayerState>();
	}
};
static_assert(alignof(AMarinerLANLobbyPlayerState) == 0x000008, "Wrong alignment on AMarinerLANLobbyPlayerState");
static_assert(sizeof(AMarinerLANLobbyPlayerState) == 0x0005A8, "Wrong size on AMarinerLANLobbyPlayerState");

// Class Mariner.MarinerLastMatchPlayersPanel
// 0x0028 (0x02D8 - 0x02B0)
class UMarinerLastMatchPlayersPanel : public UMarinerUserWidget
{
public:
	TSubclassOf<class UMarinerSocialWidget>       PlayerWidgetSubclass;                              // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerVerticalBox*                    Bound_ContentVerticalBox;                          // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1921[0x18];                                    // 0x02C0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMangoProfileUpdated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLastMatchPlayersPanel">();
	}
	static class UMarinerLastMatchPlayersPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLastMatchPlayersPanel>();
	}
};
static_assert(alignof(UMarinerLastMatchPlayersPanel) == 0x000008, "Wrong alignment on UMarinerLastMatchPlayersPanel");
static_assert(sizeof(UMarinerLastMatchPlayersPanel) == 0x0002D8, "Wrong size on UMarinerLastMatchPlayersPanel");
static_assert(offsetof(UMarinerLastMatchPlayersPanel, PlayerWidgetSubclass) == 0x0002B0, "Member 'UMarinerLastMatchPlayersPanel::PlayerWidgetSubclass' has a wrong offset!");
static_assert(offsetof(UMarinerLastMatchPlayersPanel, Bound_ContentVerticalBox) == 0x0002B8, "Member 'UMarinerLastMatchPlayersPanel::Bound_ContentVerticalBox' has a wrong offset!");

// Class Mariner.MarinerLastMatchPlayerWidget
// 0x0208 (0x38F0 - 0x36E8)
class UMarinerLastMatchPlayerWidget : public UMarinerSocialWidget
{
public:
	class UMarinerButton*                         Bound_InviteButton;                                // 0x36E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   InviteButtonText;                                  // 0x36F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   InviteSentText;                                    // 0x3708(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   OnPartyText;                                       // 0x3720(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 InviteErrorBox;                                    // 0x3738(0x0170)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class FString                                 PlayerName;                                        // 0x38A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InviteCooldownSeconds;                             // 0x38B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1922[0x34];                                    // 0x38BC(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetInviteButton();
	void SendInvite();
	void SetColorBySelection(bool bIsSelected);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLastMatchPlayerWidget">();
	}
	static class UMarinerLastMatchPlayerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLastMatchPlayerWidget>();
	}
};
static_assert(alignof(UMarinerLastMatchPlayerWidget) == 0x000008, "Wrong alignment on UMarinerLastMatchPlayerWidget");
static_assert(sizeof(UMarinerLastMatchPlayerWidget) == 0x0038F0, "Wrong size on UMarinerLastMatchPlayerWidget");
static_assert(offsetof(UMarinerLastMatchPlayerWidget, Bound_InviteButton) == 0x0036E8, "Member 'UMarinerLastMatchPlayerWidget::Bound_InviteButton' has a wrong offset!");
static_assert(offsetof(UMarinerLastMatchPlayerWidget, InviteButtonText) == 0x0036F0, "Member 'UMarinerLastMatchPlayerWidget::InviteButtonText' has a wrong offset!");
static_assert(offsetof(UMarinerLastMatchPlayerWidget, InviteSentText) == 0x003708, "Member 'UMarinerLastMatchPlayerWidget::InviteSentText' has a wrong offset!");
static_assert(offsetof(UMarinerLastMatchPlayerWidget, OnPartyText) == 0x003720, "Member 'UMarinerLastMatchPlayerWidget::OnPartyText' has a wrong offset!");
static_assert(offsetof(UMarinerLastMatchPlayerWidget, InviteErrorBox) == 0x003738, "Member 'UMarinerLastMatchPlayerWidget::InviteErrorBox' has a wrong offset!");
static_assert(offsetof(UMarinerLastMatchPlayerWidget, PlayerName) == 0x0038A8, "Member 'UMarinerLastMatchPlayerWidget::PlayerName' has a wrong offset!");
static_assert(offsetof(UMarinerLastMatchPlayerWidget, InviteCooldownSeconds) == 0x0038B8, "Member 'UMarinerLastMatchPlayerWidget::InviteCooldownSeconds' has a wrong offset!");

// Class Mariner.MarinerRocketTotemBorderDataAsset
// 0x0008 (0x00A0 - 0x0098)
class UMarinerRocketTotemBorderDataAsset final : public UMarinerCMSItemWithIconAndColor
{
public:
	class UTexture2D*                             BorderTexture;                                     // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRocketTotemBorderDataAsset">();
	}
	static class UMarinerRocketTotemBorderDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRocketTotemBorderDataAsset>();
	}
};
static_assert(alignof(UMarinerRocketTotemBorderDataAsset) == 0x000008, "Wrong alignment on UMarinerRocketTotemBorderDataAsset");
static_assert(sizeof(UMarinerRocketTotemBorderDataAsset) == 0x0000A0, "Wrong size on UMarinerRocketTotemBorderDataAsset");
static_assert(offsetof(UMarinerRocketTotemBorderDataAsset, BorderTexture) == 0x000098, "Member 'UMarinerRocketTotemBorderDataAsset::BorderTexture' has a wrong offset!");

// Class Mariner.MarinerLawnDartSplineContainer
// 0x0010 (0x0228 - 0x0218)
class AMarinerLawnDartSplineContainer final : public AActor
{
public:
	class USplineComponent*                       EntrySpline;                                       // 0x0218(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USplineComponent*                       ExitSpline;                                        // 0x0220(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLawnDartSplineContainer">();
	}
	static class AMarinerLawnDartSplineContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerLawnDartSplineContainer>();
	}
};
static_assert(alignof(AMarinerLawnDartSplineContainer) == 0x000008, "Wrong alignment on AMarinerLawnDartSplineContainer");
static_assert(sizeof(AMarinerLawnDartSplineContainer) == 0x000228, "Wrong size on AMarinerLawnDartSplineContainer");
static_assert(offsetof(AMarinerLawnDartSplineContainer, EntrySpline) == 0x000218, "Member 'AMarinerLawnDartSplineContainer::EntrySpline' has a wrong offset!");
static_assert(offsetof(AMarinerLawnDartSplineContainer, ExitSpline) == 0x000220, "Member 'AMarinerLawnDartSplineContainer::ExitSpline' has a wrong offset!");

// Class Mariner.MarinerLinkedPlatformWidget
// 0x0018 (0x02C8 - 0x02B0)
class UMarinerLinkedPlatformWidget : public UMarinerUserWidget
{
public:
	class UImage*                                 Bound_LinkedPlatformLogo;                          // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_LinkedPlatformName;                          // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1923[0x8];                                     // 0x02C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLinkedPlatformWidget">();
	}
	static class UMarinerLinkedPlatformWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLinkedPlatformWidget>();
	}
};
static_assert(alignof(UMarinerLinkedPlatformWidget) == 0x000008, "Wrong alignment on UMarinerLinkedPlatformWidget");
static_assert(sizeof(UMarinerLinkedPlatformWidget) == 0x0002C8, "Wrong size on UMarinerLinkedPlatformWidget");
static_assert(offsetof(UMarinerLinkedPlatformWidget, Bound_LinkedPlatformLogo) == 0x0002B0, "Member 'UMarinerLinkedPlatformWidget::Bound_LinkedPlatformLogo' has a wrong offset!");
static_assert(offsetof(UMarinerLinkedPlatformWidget, Bound_LinkedPlatformName) == 0x0002B8, "Member 'UMarinerLinkedPlatformWidget::Bound_LinkedPlatformName' has a wrong offset!");

// Class Mariner.MarinerPrompt
// 0x0150 (0x0400 - 0x02B0)
class UMarinerPrompt : public UMarinerUserWidget
{
public:
	TSubclassOf<class UMarinerGamepadPrompt>      GamepadPrompt;                                     // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMousePrompt>        MousePrompt;                                       // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerKeyboardPrompt>     KeyboardPrompt;                                    // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     Data;                                              // 0x02C8(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x03E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x03E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEditorShowGamepad;                                // 0x03E2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1924[0x5];                                     // 0x03E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          OnHighlightAudioEvent;                             // 0x03E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OnSelectedAudioEvent;                              // 0x03F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerBasePrompt*                     ActivePrompt;                                      // 0x03F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleInputBindingsChanged();
	void SetCustomInputWidget(class UObject* InputWidget);
	void SetInputAction(EMarinerInputActions InputAction);
	void SetInputDisplay(EMarinerPromptInputDisplay InputDisplay);
	void SetPrompt(const struct FMarinerPromptData& Prompt);
	void SetText(const class FText& Text);

	EMarinerInputActions GetInputAction() const;
	const struct FMarinerPromptData GetPrompt() const;
	bool IsAllowed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPrompt">();
	}
	static class UMarinerPrompt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPrompt>();
	}
};
static_assert(alignof(UMarinerPrompt) == 0x000008, "Wrong alignment on UMarinerPrompt");
static_assert(sizeof(UMarinerPrompt) == 0x000400, "Wrong size on UMarinerPrompt");
static_assert(offsetof(UMarinerPrompt, GamepadPrompt) == 0x0002B0, "Member 'UMarinerPrompt::GamepadPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerPrompt, MousePrompt) == 0x0002B8, "Member 'UMarinerPrompt::MousePrompt' has a wrong offset!");
static_assert(offsetof(UMarinerPrompt, KeyboardPrompt) == 0x0002C0, "Member 'UMarinerPrompt::KeyboardPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerPrompt, Data) == 0x0002C8, "Member 'UMarinerPrompt::Data' has a wrong offset!");
static_assert(offsetof(UMarinerPrompt, HorizontalAlignment) == 0x0003E0, "Member 'UMarinerPrompt::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UMarinerPrompt, VerticalAlignment) == 0x0003E1, "Member 'UMarinerPrompt::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UMarinerPrompt, bEditorShowGamepad) == 0x0003E2, "Member 'UMarinerPrompt::bEditorShowGamepad' has a wrong offset!");
static_assert(offsetof(UMarinerPrompt, OnHighlightAudioEvent) == 0x0003E8, "Member 'UMarinerPrompt::OnHighlightAudioEvent' has a wrong offset!");
static_assert(offsetof(UMarinerPrompt, OnSelectedAudioEvent) == 0x0003F0, "Member 'UMarinerPrompt::OnSelectedAudioEvent' has a wrong offset!");
static_assert(offsetof(UMarinerPrompt, ActivePrompt) == 0x0003F8, "Member 'UMarinerPrompt::ActivePrompt' has a wrong offset!");

// Class Mariner.MarinerPostGameResultsCharacterPortrait
// 0x0000 (0x02B0 - 0x02B0)
class UMarinerPostGameResultsCharacterPortrait final : public UMarinerUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPostGameResultsCharacterPortrait">();
	}
	static class UMarinerPostGameResultsCharacterPortrait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPostGameResultsCharacterPortrait>();
	}
};
static_assert(alignof(UMarinerPostGameResultsCharacterPortrait) == 0x000008, "Wrong alignment on UMarinerPostGameResultsCharacterPortrait");
static_assert(sizeof(UMarinerPostGameResultsCharacterPortrait) == 0x0002B0, "Wrong size on UMarinerPostGameResultsCharacterPortrait");

// Class Mariner.ItemLoadResponse
// 0x0198 (0x01C0 - 0x0028)
class UItemLoadResponse : public UObject
{
public:
	class UObject*                                LoadedItem;                                        // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerCollectionDataAsset*            Collection;                                        // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 AssetPath;                                         // 0x0038(0x0028)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoItem                             CMSItem;                                           // 0x0060(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMangoItemInventory                    InventoryItem;                                     // 0x00B0(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMangoPurchaseOffer                    ItemOffer;                                         // 0x00C8(0x00D8)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMangoProgressionCharacterItemUnlock   ItemUnlock;                                        // 0x01A0(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         BlastPassTier;                                     // 0x01B8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlastPassPaid;                                    // 0x01BC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInInventory;                                    // 0x01BD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsViewed;                                         // 0x01BE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1925[0x1];                                     // 0x01BF(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ItemLoadResponse">();
	}
	static class UItemLoadResponse* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemLoadResponse>();
	}
};
static_assert(alignof(UItemLoadResponse) == 0x000008, "Wrong alignment on UItemLoadResponse");
static_assert(sizeof(UItemLoadResponse) == 0x0001C0, "Wrong size on UItemLoadResponse");
static_assert(offsetof(UItemLoadResponse, LoadedItem) == 0x000028, "Member 'UItemLoadResponse::LoadedItem' has a wrong offset!");
static_assert(offsetof(UItemLoadResponse, Collection) == 0x000030, "Member 'UItemLoadResponse::Collection' has a wrong offset!");
static_assert(offsetof(UItemLoadResponse, AssetPath) == 0x000038, "Member 'UItemLoadResponse::AssetPath' has a wrong offset!");
static_assert(offsetof(UItemLoadResponse, CMSItem) == 0x000060, "Member 'UItemLoadResponse::CMSItem' has a wrong offset!");
static_assert(offsetof(UItemLoadResponse, InventoryItem) == 0x0000B0, "Member 'UItemLoadResponse::InventoryItem' has a wrong offset!");
static_assert(offsetof(UItemLoadResponse, ItemOffer) == 0x0000C8, "Member 'UItemLoadResponse::ItemOffer' has a wrong offset!");
static_assert(offsetof(UItemLoadResponse, ItemUnlock) == 0x0001A0, "Member 'UItemLoadResponse::ItemUnlock' has a wrong offset!");
static_assert(offsetof(UItemLoadResponse, BlastPassTier) == 0x0001B8, "Member 'UItemLoadResponse::BlastPassTier' has a wrong offset!");
static_assert(offsetof(UItemLoadResponse, bBlastPassPaid) == 0x0001BC, "Member 'UItemLoadResponse::bBlastPassPaid' has a wrong offset!");
static_assert(offsetof(UItemLoadResponse, bIsInInventory) == 0x0001BD, "Member 'UItemLoadResponse::bIsInInventory' has a wrong offset!");
static_assert(offsetof(UItemLoadResponse, bIsViewed) == 0x0001BE, "Member 'UItemLoadResponse::bIsViewed' has a wrong offset!");

// Class Mariner.MarinerRocketTrophySpawner
// 0x0028 (0x0240 - 0x0218)
class AMarinerRocketTrophySpawner final : public AActor
{
public:
	class UChildActorComponent*                   ChildActorComponent;                               // 0x0218(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AMarinerCollectableObject> RocketTrophy;                                      // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPrimitiveComponent*                    BoxComponent;                                      // 0x0230(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SpawnerID;                                         // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBlockedForSpawning;                             // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1926[0x3];                                     // 0x023D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBeginRespawnTimer(float Time);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRocketTrophySpawner">();
	}
	static class AMarinerRocketTrophySpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerRocketTrophySpawner>();
	}
};
static_assert(alignof(AMarinerRocketTrophySpawner) == 0x000008, "Wrong alignment on AMarinerRocketTrophySpawner");
static_assert(sizeof(AMarinerRocketTrophySpawner) == 0x000240, "Wrong size on AMarinerRocketTrophySpawner");
static_assert(offsetof(AMarinerRocketTrophySpawner, ChildActorComponent) == 0x000218, "Member 'AMarinerRocketTrophySpawner::ChildActorComponent' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTrophySpawner, StaticMeshComponent) == 0x000220, "Member 'AMarinerRocketTrophySpawner::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTrophySpawner, RocketTrophy) == 0x000228, "Member 'AMarinerRocketTrophySpawner::RocketTrophy' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTrophySpawner, BoxComponent) == 0x000230, "Member 'AMarinerRocketTrophySpawner::BoxComponent' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTrophySpawner, SpawnerID) == 0x000238, "Member 'AMarinerRocketTrophySpawner::SpawnerID' has a wrong offset!");
static_assert(offsetof(AMarinerRocketTrophySpawner, bIsBlockedForSpawning) == 0x00023C, "Member 'AMarinerRocketTrophySpawner::bIsBlockedForSpawning' has a wrong offset!");

// Class Mariner.MarinerLoadCMSItemInventoryData
// 0x0048 (0x0078 - 0x0030)
class UMarinerLoadCMSItemInventoryData final : public UBlueprintAsyncActionBase
{
public:
	UMulticastInlineDelegateProperty_             LoadFinished;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             LoadFailed;                                        // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FMangoItemInventory>            CMSItemInventoryInput;                             // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UItemLoadResponse*>              ItemsToLoad;                                       // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UMarinerLoadCMSItemInventoryData* LoadItemInventoryData(const class UObject* Param_WorldContextObject, const TArray<struct FMangoItemInventory>& ItemInventoryData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLoadCMSItemInventoryData">();
	}
	static class UMarinerLoadCMSItemInventoryData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLoadCMSItemInventoryData>();
	}
};
static_assert(alignof(UMarinerLoadCMSItemInventoryData) == 0x000008, "Wrong alignment on UMarinerLoadCMSItemInventoryData");
static_assert(sizeof(UMarinerLoadCMSItemInventoryData) == 0x000078, "Wrong size on UMarinerLoadCMSItemInventoryData");
static_assert(offsetof(UMarinerLoadCMSItemInventoryData, LoadFinished) == 0x000030, "Member 'UMarinerLoadCMSItemInventoryData::LoadFinished' has a wrong offset!");
static_assert(offsetof(UMarinerLoadCMSItemInventoryData, LoadFailed) == 0x000040, "Member 'UMarinerLoadCMSItemInventoryData::LoadFailed' has a wrong offset!");
static_assert(offsetof(UMarinerLoadCMSItemInventoryData, WorldContextObject) == 0x000050, "Member 'UMarinerLoadCMSItemInventoryData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UMarinerLoadCMSItemInventoryData, CMSItemInventoryInput) == 0x000058, "Member 'UMarinerLoadCMSItemInventoryData::CMSItemInventoryInput' has a wrong offset!");
static_assert(offsetof(UMarinerLoadCMSItemInventoryData, ItemsToLoad) == 0x000068, "Member 'UMarinerLoadCMSItemInventoryData::ItemsToLoad' has a wrong offset!");

// Class Mariner.AssetLoadResponse
// 0x0030 (0x0058 - 0x0028)
class UAssetLoadResponse final : public UObject
{
public:
	class UObject*                                LoadedAsset;                                       // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 AssetPath;                                         // 0x0030(0x0028)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetLoadResponse">();
	}
	static class UAssetLoadResponse* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetLoadResponse>();
	}
};
static_assert(alignof(UAssetLoadResponse) == 0x000008, "Wrong alignment on UAssetLoadResponse");
static_assert(sizeof(UAssetLoadResponse) == 0x000058, "Wrong size on UAssetLoadResponse");
static_assert(offsetof(UAssetLoadResponse, LoadedAsset) == 0x000028, "Member 'UAssetLoadResponse::LoadedAsset' has a wrong offset!");
static_assert(offsetof(UAssetLoadResponse, AssetPath) == 0x000030, "Member 'UAssetLoadResponse::AssetPath' has a wrong offset!");

// Class Mariner.MarinerSoundNodeLocalPlayer
// 0x0000 (0x0040 - 0x0040)
class UMarinerSoundNodeLocalPlayer final : public USoundNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSoundNodeLocalPlayer">();
	}
	static class UMarinerSoundNodeLocalPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSoundNodeLocalPlayer>();
	}
};
static_assert(alignof(UMarinerSoundNodeLocalPlayer) == 0x000008, "Wrong alignment on UMarinerSoundNodeLocalPlayer");
static_assert(sizeof(UMarinerSoundNodeLocalPlayer) == 0x000040, "Wrong size on UMarinerSoundNodeLocalPlayer");

// Class Mariner.MarinerLoadEquippedDataForCharacter
// 0x0070 (0x00A0 - 0x0030)
class UMarinerLoadEquippedDataForCharacter final : public UBlueprintAsyncActionBase
{
public:
	UMulticastInlineDelegateProperty_             LoadFinished;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             LoadFailed;                                        // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> EquippedSkinToLoad;                                // 0x0050(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                WorldContextObject;                                // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerPlayableCharacter*              CharacterDataInput;                                // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFrontendSkinUILoadResponse*            SkinToLoad;                                        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UItemLoadResponse*>              ItemsToLoad;                                       // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UMarinerLoadEquippedDataForCharacter* LoadEquippedDataForCharacter(const class UObject* Param_WorldContextObject, const class UMarinerPlayableCharacter* CharacterData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLoadEquippedDataForCharacter">();
	}
	static class UMarinerLoadEquippedDataForCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLoadEquippedDataForCharacter>();
	}
};
static_assert(alignof(UMarinerLoadEquippedDataForCharacter) == 0x000008, "Wrong alignment on UMarinerLoadEquippedDataForCharacter");
static_assert(sizeof(UMarinerLoadEquippedDataForCharacter) == 0x0000A0, "Wrong size on UMarinerLoadEquippedDataForCharacter");
static_assert(offsetof(UMarinerLoadEquippedDataForCharacter, LoadFinished) == 0x000030, "Member 'UMarinerLoadEquippedDataForCharacter::LoadFinished' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEquippedDataForCharacter, LoadFailed) == 0x000040, "Member 'UMarinerLoadEquippedDataForCharacter::LoadFailed' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEquippedDataForCharacter, EquippedSkinToLoad) == 0x000050, "Member 'UMarinerLoadEquippedDataForCharacter::EquippedSkinToLoad' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEquippedDataForCharacter, WorldContextObject) == 0x000078, "Member 'UMarinerLoadEquippedDataForCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEquippedDataForCharacter, CharacterDataInput) == 0x000080, "Member 'UMarinerLoadEquippedDataForCharacter::CharacterDataInput' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEquippedDataForCharacter, SkinToLoad) == 0x000088, "Member 'UMarinerLoadEquippedDataForCharacter::SkinToLoad' has a wrong offset!");
static_assert(offsetof(UMarinerLoadEquippedDataForCharacter, ItemsToLoad) == 0x000090, "Member 'UMarinerLoadEquippedDataForCharacter::ItemsToLoad' has a wrong offset!");

// Class Mariner.MarinerPreGameReadyEmote
// 0x0058 (0x00C8 - 0x0070)
class UMarinerPreGameReadyEmote final : public UMarinerCMSItemWithIcon
{
public:
	class UAnimMontage*                           ReadyEmote;                                        // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<TSoftObjectPtr<class USkeletalMesh>, class UAnimMontage*> ReadyEmoteOverrides;                               // 0x0078(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPreGameReadyEmote">();
	}
	static class UMarinerPreGameReadyEmote* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPreGameReadyEmote>();
	}
};
static_assert(alignof(UMarinerPreGameReadyEmote) == 0x000008, "Wrong alignment on UMarinerPreGameReadyEmote");
static_assert(sizeof(UMarinerPreGameReadyEmote) == 0x0000C8, "Wrong size on UMarinerPreGameReadyEmote");
static_assert(offsetof(UMarinerPreGameReadyEmote, ReadyEmote) == 0x000070, "Member 'UMarinerPreGameReadyEmote::ReadyEmote' has a wrong offset!");
static_assert(offsetof(UMarinerPreGameReadyEmote, ReadyEmoteOverrides) == 0x000078, "Member 'UMarinerPreGameReadyEmote::ReadyEmoteOverrides' has a wrong offset!");

// Class Mariner.FrontendSkinUILoadResponse
// 0x0030 (0x01F0 - 0x01C0)
class UFrontendSkinUILoadResponse final : public UItemLoadResponse
{
public:
	class UMarinerCharacterFrontendSkinUIData*    LoadedSkinUIData;                                  // 0x01C0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerCharacterFrontendSkinUIData> FrontendUIDataPath;                                // 0x01C8(0x0028)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UMarinerSkinCollectionDataAsset* GetSkinCollection() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FrontendSkinUILoadResponse">();
	}
	static class UFrontendSkinUILoadResponse* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFrontendSkinUILoadResponse>();
	}
};
static_assert(alignof(UFrontendSkinUILoadResponse) == 0x000008, "Wrong alignment on UFrontendSkinUILoadResponse");
static_assert(sizeof(UFrontendSkinUILoadResponse) == 0x0001F0, "Wrong size on UFrontendSkinUILoadResponse");
static_assert(offsetof(UFrontendSkinUILoadResponse, LoadedSkinUIData) == 0x0001C0, "Member 'UFrontendSkinUILoadResponse::LoadedSkinUIData' has a wrong offset!");
static_assert(offsetof(UFrontendSkinUILoadResponse, FrontendUIDataPath) == 0x0001C8, "Member 'UFrontendSkinUILoadResponse::FrontendUIDataPath' has a wrong offset!");

// Class Mariner.MarinerLoadFrontendSkinDataForCharacter
// 0x0038 (0x0068 - 0x0030)
class UMarinerLoadFrontendSkinDataForCharacter final : public UBlueprintAsyncActionBase
{
public:
	UMulticastInlineDelegateProperty_             LoadFinished;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerPlayableCharacter*              CharacterDataInput;                                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1927[0x8];                                     // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFrontendSkinUILoadResponse*>    ItemsToLoad;                                       // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UMarinerLoadFrontendSkinDataForCharacter* LoadSkinsForCharacter(const class UObject* Param_WorldContextObject, const class UMarinerPlayableCharacter* CharacterData, bool bOwnedItems, bool bUnownedItems, bool bProgressionItems, bool bBlastPassItems, bool bStoreOffers, bool bCollectionItems);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLoadFrontendSkinDataForCharacter">();
	}
	static class UMarinerLoadFrontendSkinDataForCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLoadFrontendSkinDataForCharacter>();
	}
};
static_assert(alignof(UMarinerLoadFrontendSkinDataForCharacter) == 0x000008, "Wrong alignment on UMarinerLoadFrontendSkinDataForCharacter");
static_assert(sizeof(UMarinerLoadFrontendSkinDataForCharacter) == 0x000068, "Wrong size on UMarinerLoadFrontendSkinDataForCharacter");
static_assert(offsetof(UMarinerLoadFrontendSkinDataForCharacter, LoadFinished) == 0x000030, "Member 'UMarinerLoadFrontendSkinDataForCharacter::LoadFinished' has a wrong offset!");
static_assert(offsetof(UMarinerLoadFrontendSkinDataForCharacter, WorldContextObject) == 0x000040, "Member 'UMarinerLoadFrontendSkinDataForCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UMarinerLoadFrontendSkinDataForCharacter, CharacterDataInput) == 0x000048, "Member 'UMarinerLoadFrontendSkinDataForCharacter::CharacterDataInput' has a wrong offset!");
static_assert(offsetof(UMarinerLoadFrontendSkinDataForCharacter, ItemsToLoad) == 0x000058, "Member 'UMarinerLoadFrontendSkinDataForCharacter::ItemsToLoad' has a wrong offset!");

// Class Mariner.MarinerLoadingScreen
// 0x0070 (0x0320 - 0x02B0)
class UMarinerLoadingScreen : public UMarinerUserWidget
{
public:
	class UImage*                                 Bound_LoadingImage;                                // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TipText;                                     // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerMediaPlayerWidget*              Bound_MediaPlayerWidget;                           // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerLoadingSkipWidget*              Bound_SkipWidget;                                  // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1929[0x50];                                    // 0x02D0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMovieCompleted();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLoadingScreen">();
	}
	static class UMarinerLoadingScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLoadingScreen>();
	}
};
static_assert(alignof(UMarinerLoadingScreen) == 0x000008, "Wrong alignment on UMarinerLoadingScreen");
static_assert(sizeof(UMarinerLoadingScreen) == 0x000320, "Wrong size on UMarinerLoadingScreen");
static_assert(offsetof(UMarinerLoadingScreen, Bound_LoadingImage) == 0x0002B0, "Member 'UMarinerLoadingScreen::Bound_LoadingImage' has a wrong offset!");
static_assert(offsetof(UMarinerLoadingScreen, Bound_TipText) == 0x0002B8, "Member 'UMarinerLoadingScreen::Bound_TipText' has a wrong offset!");
static_assert(offsetof(UMarinerLoadingScreen, Bound_MediaPlayerWidget) == 0x0002C0, "Member 'UMarinerLoadingScreen::Bound_MediaPlayerWidget' has a wrong offset!");
static_assert(offsetof(UMarinerLoadingScreen, Bound_SkipWidget) == 0x0002C8, "Member 'UMarinerLoadingScreen::Bound_SkipWidget' has a wrong offset!");

// Class Mariner.MarinerLoadTotemDataFromProfile
// 0x0458 (0x0488 - 0x0030)
class UMarinerLoadTotemDataFromProfile final : public UBlueprintAsyncActionBase
{
public:
	UMulticastInlineDelegateProperty_             TotemDataLoaded;                                   // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             TotemDataLoadFailed;                               // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMangoProfile                          Profile;                                           // 0x0058(0x02E0)(NativeAccessSpecifierPrivate)
	struct FLoadedTotemDataResponse               DataToLoad;                                        // 0x0338(0x0150)(NativeAccessSpecifierPrivate)

public:
	static class UMarinerLoadTotemDataFromProfile* LoadTotemDataForProfile(const class UObject* Param_WorldContextObject, const struct FMangoProfile& InProfile);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLoadTotemDataFromProfile">();
	}
	static class UMarinerLoadTotemDataFromProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLoadTotemDataFromProfile>();
	}
};
static_assert(alignof(UMarinerLoadTotemDataFromProfile) == 0x000008, "Wrong alignment on UMarinerLoadTotemDataFromProfile");
static_assert(sizeof(UMarinerLoadTotemDataFromProfile) == 0x000488, "Wrong size on UMarinerLoadTotemDataFromProfile");
static_assert(offsetof(UMarinerLoadTotemDataFromProfile, TotemDataLoaded) == 0x000030, "Member 'UMarinerLoadTotemDataFromProfile::TotemDataLoaded' has a wrong offset!");
static_assert(offsetof(UMarinerLoadTotemDataFromProfile, TotemDataLoadFailed) == 0x000040, "Member 'UMarinerLoadTotemDataFromProfile::TotemDataLoadFailed' has a wrong offset!");
static_assert(offsetof(UMarinerLoadTotemDataFromProfile, WorldContextObject) == 0x000050, "Member 'UMarinerLoadTotemDataFromProfile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UMarinerLoadTotemDataFromProfile, Profile) == 0x000058, "Member 'UMarinerLoadTotemDataFromProfile::Profile' has a wrong offset!");
static_assert(offsetof(UMarinerLoadTotemDataFromProfile, DataToLoad) == 0x000338, "Member 'UMarinerLoadTotemDataFromProfile::DataToLoad' has a wrong offset!");

// Class Mariner.MarinerSplineComponent
// 0x0070 (0x0540 - 0x04D0)
class UMarinerSplineComponent final : public USplineComponent
{
public:
	struct FMarinerSplineReplicationData          SplineReplicationData;                             // 0x04D0(0x0070)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)

public:
	void AuthoritySetSplineDuration(const float InDuration);
	void AuthoritySetStationaryEndpoints(bool bInStationaryEndpoints);
	void OnSplineReplicationDataChanged();

	int32 GetSplineID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSplineComponent">();
	}
	static class UMarinerSplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSplineComponent>();
	}
};
static_assert(alignof(UMarinerSplineComponent) == 0x000010, "Wrong alignment on UMarinerSplineComponent");
static_assert(sizeof(UMarinerSplineComponent) == 0x000540, "Wrong size on UMarinerSplineComponent");
static_assert(offsetof(UMarinerSplineComponent, SplineReplicationData) == 0x0004D0, "Member 'UMarinerSplineComponent::SplineReplicationData' has a wrong offset!");

// Class Mariner.MarinerLobbySlotWidget
// 0x0250 (0x0940 - 0x06F0)
class UMarinerLobbySlotWidget : public UMarinerSettingComboBox
{
public:
	TSubclassOf<class UMarinerMenuStackManager>   InviteStackManager;                                // 0x06F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           PlayerBackgroundColor;                             // 0x06F8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           PlayerTextColor;                                   // 0x0708(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           LocalPlayerBackgroundColor;                        // 0x0718(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           LocalPlayerTextColor;                              // 0x0728(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           BotBackgroundColor;                                // 0x0738(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           BotTextColor;                                      // 0x0748(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           EmptyBackgroundColor;                              // 0x0758(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           EmptyTextColor;                                    // 0x0768(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 LeavePartyConfirmDialog;                           // 0x0778(0x0170)(Edit, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UMarinerAvatarWidget*                   Bound_Avatar;                                      // 0x08E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_RocketbotIcon;                               // 0x08F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_LeaderImage;                                 // 0x08F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_EmptyText;                                   // 0x0900(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_192A[0x38];                                    // 0x0908(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LeavePartyConfirmed(const struct FKey& KeyPressed);
	void OnAddBotSelected();
	void OnBotDifficultyEasySelected();
	void OnBotDifficultyExtremeSelected();
	void OnBotDifficultyHardSelected();
	void OnBotDifficultyNormalSelected();
	void OnChangeVoiceStatus();
	void OnInviteSelected();
	void OnLeavePartySelected();
	void OnPromoteToPartyLeaderSelected();
	void OnRemoveBotSelected();
	void OnRemoveFromPartySelected();
	void OnReportPlayerCheatsSelected();
	void OnReportPlayerGriefingSelected();
	void OnReportPlayerInappropriateSelected();
	void OnReportPlayerOffensiveSelected();
	void OnSwitchTeamsSelected();
	void OnViewProfileSelected();
	void PlaySizeWarningAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLobbySlotWidget">();
	}
	static class UMarinerLobbySlotWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLobbySlotWidget>();
	}
};
static_assert(alignof(UMarinerLobbySlotWidget) == 0x000008, "Wrong alignment on UMarinerLobbySlotWidget");
static_assert(sizeof(UMarinerLobbySlotWidget) == 0x000940, "Wrong size on UMarinerLobbySlotWidget");
static_assert(offsetof(UMarinerLobbySlotWidget, InviteStackManager) == 0x0006F0, "Member 'UMarinerLobbySlotWidget::InviteStackManager' has a wrong offset!");
static_assert(offsetof(UMarinerLobbySlotWidget, PlayerBackgroundColor) == 0x0006F8, "Member 'UMarinerLobbySlotWidget::PlayerBackgroundColor' has a wrong offset!");
static_assert(offsetof(UMarinerLobbySlotWidget, PlayerTextColor) == 0x000708, "Member 'UMarinerLobbySlotWidget::PlayerTextColor' has a wrong offset!");
static_assert(offsetof(UMarinerLobbySlotWidget, LocalPlayerBackgroundColor) == 0x000718, "Member 'UMarinerLobbySlotWidget::LocalPlayerBackgroundColor' has a wrong offset!");
static_assert(offsetof(UMarinerLobbySlotWidget, LocalPlayerTextColor) == 0x000728, "Member 'UMarinerLobbySlotWidget::LocalPlayerTextColor' has a wrong offset!");
static_assert(offsetof(UMarinerLobbySlotWidget, BotBackgroundColor) == 0x000738, "Member 'UMarinerLobbySlotWidget::BotBackgroundColor' has a wrong offset!");
static_assert(offsetof(UMarinerLobbySlotWidget, BotTextColor) == 0x000748, "Member 'UMarinerLobbySlotWidget::BotTextColor' has a wrong offset!");
static_assert(offsetof(UMarinerLobbySlotWidget, EmptyBackgroundColor) == 0x000758, "Member 'UMarinerLobbySlotWidget::EmptyBackgroundColor' has a wrong offset!");
static_assert(offsetof(UMarinerLobbySlotWidget, EmptyTextColor) == 0x000768, "Member 'UMarinerLobbySlotWidget::EmptyTextColor' has a wrong offset!");
static_assert(offsetof(UMarinerLobbySlotWidget, LeavePartyConfirmDialog) == 0x000778, "Member 'UMarinerLobbySlotWidget::LeavePartyConfirmDialog' has a wrong offset!");
static_assert(offsetof(UMarinerLobbySlotWidget, Bound_Avatar) == 0x0008E8, "Member 'UMarinerLobbySlotWidget::Bound_Avatar' has a wrong offset!");
static_assert(offsetof(UMarinerLobbySlotWidget, Bound_RocketbotIcon) == 0x0008F0, "Member 'UMarinerLobbySlotWidget::Bound_RocketbotIcon' has a wrong offset!");
static_assert(offsetof(UMarinerLobbySlotWidget, Bound_LeaderImage) == 0x0008F8, "Member 'UMarinerLobbySlotWidget::Bound_LeaderImage' has a wrong offset!");
static_assert(offsetof(UMarinerLobbySlotWidget, Bound_EmptyText) == 0x000900, "Member 'UMarinerLobbySlotWidget::Bound_EmptyText' has a wrong offset!");

// Class Mariner.MarinerLocalMessage
// 0x00B0 (0x00D8 - 0x0028)
class UMarinerLocalMessage : public ULocalMessage
{
public:
	struct FMarinerMessageText                    MessageTextGroup;                                  // 0x0028(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   PlayerFacingMessageName;                           // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FName                                   MessageType;                                       // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                               MessageImage;                                      // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerMessageImage                   MessageImageGroup;                                 // 0x0098(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UUserWidget>                MessageDisplayWidget;                              // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerMessageStyle                          MessageStyle;                                      // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_192B[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MessageDurationOverride;                           // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          Sound;                                             // 0x00C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPlaySoundOnOptionalObjectAsCharacter;             // 0x00D0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerBroadcastByPlayerRule                 BroadcastByPlayerRule;                             // 0x00D1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_192C[0x6];                                     // 0x00D2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FMarinerMessageText Blueprint_GetText(class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject) const;
	void OnClientReceive(class APlayerController* LocalPC, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject) const;
	struct FMarinerMessageText ResolveMessage(class APlayerController* LocalPC, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLocalMessage">();
	}
	static class UMarinerLocalMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLocalMessage>();
	}
};
static_assert(alignof(UMarinerLocalMessage) == 0x000008, "Wrong alignment on UMarinerLocalMessage");
static_assert(sizeof(UMarinerLocalMessage) == 0x0000D8, "Wrong size on UMarinerLocalMessage");
static_assert(offsetof(UMarinerLocalMessage, MessageTextGroup) == 0x000028, "Member 'UMarinerLocalMessage::MessageTextGroup' has a wrong offset!");
static_assert(offsetof(UMarinerLocalMessage, PlayerFacingMessageName) == 0x000070, "Member 'UMarinerLocalMessage::PlayerFacingMessageName' has a wrong offset!");
static_assert(offsetof(UMarinerLocalMessage, MessageType) == 0x000088, "Member 'UMarinerLocalMessage::MessageType' has a wrong offset!");
static_assert(offsetof(UMarinerLocalMessage, MessageImage) == 0x000090, "Member 'UMarinerLocalMessage::MessageImage' has a wrong offset!");
static_assert(offsetof(UMarinerLocalMessage, MessageImageGroup) == 0x000098, "Member 'UMarinerLocalMessage::MessageImageGroup' has a wrong offset!");
static_assert(offsetof(UMarinerLocalMessage, MessageDisplayWidget) == 0x0000B8, "Member 'UMarinerLocalMessage::MessageDisplayWidget' has a wrong offset!");
static_assert(offsetof(UMarinerLocalMessage, MessageStyle) == 0x0000C0, "Member 'UMarinerLocalMessage::MessageStyle' has a wrong offset!");
static_assert(offsetof(UMarinerLocalMessage, MessageDurationOverride) == 0x0000C4, "Member 'UMarinerLocalMessage::MessageDurationOverride' has a wrong offset!");
static_assert(offsetof(UMarinerLocalMessage, Sound) == 0x0000C8, "Member 'UMarinerLocalMessage::Sound' has a wrong offset!");
static_assert(offsetof(UMarinerLocalMessage, bPlaySoundOnOptionalObjectAsCharacter) == 0x0000D0, "Member 'UMarinerLocalMessage::bPlaySoundOnOptionalObjectAsCharacter' has a wrong offset!");
static_assert(offsetof(UMarinerLocalMessage, BroadcastByPlayerRule) == 0x0000D1, "Member 'UMarinerLocalMessage::BroadcastByPlayerRule' has a wrong offset!");

// Class Mariner.MarinerPostGameVictoryPose
// 0x00B0 (0x0120 - 0x0070)
class UMarinerPostGameVictoryPose final : public UMarinerCMSItemWithIcon
{
public:
	class UAnimSequence*                          Victory;                                           // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          VictoryIdle;                                       // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<TSoftObjectPtr<class USkeletalMesh>, class UAnimSequence*> VictoryOverrides;                                  // 0x0080(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<TSoftObjectPtr<class USkeletalMesh>, class UAnimSequence*> VictoryIdleOverrides;                              // 0x00D0(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPostGameVictoryPose">();
	}
	static class UMarinerPostGameVictoryPose* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPostGameVictoryPose>();
	}
};
static_assert(alignof(UMarinerPostGameVictoryPose) == 0x000008, "Wrong alignment on UMarinerPostGameVictoryPose");
static_assert(sizeof(UMarinerPostGameVictoryPose) == 0x000120, "Wrong size on UMarinerPostGameVictoryPose");
static_assert(offsetof(UMarinerPostGameVictoryPose, Victory) == 0x000070, "Member 'UMarinerPostGameVictoryPose::Victory' has a wrong offset!");
static_assert(offsetof(UMarinerPostGameVictoryPose, VictoryIdle) == 0x000078, "Member 'UMarinerPostGameVictoryPose::VictoryIdle' has a wrong offset!");
static_assert(offsetof(UMarinerPostGameVictoryPose, VictoryOverrides) == 0x000080, "Member 'UMarinerPostGameVictoryPose::VictoryOverrides' has a wrong offset!");
static_assert(offsetof(UMarinerPostGameVictoryPose, VictoryIdleOverrides) == 0x0000D0, "Member 'UMarinerPostGameVictoryPose::VictoryIdleOverrides' has a wrong offset!");

// Class Mariner.MarinerProfileMenu
// 0x0008 (0x04E8 - 0x04E0)
class UMarinerProfileMenu : public UMarinerMenu
{
public:
	class UTextBlock*                             Bound_TextProfileHeader;                           // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerProfileMenu">();
	}
	static class UMarinerProfileMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerProfileMenu>();
	}
};
static_assert(alignof(UMarinerProfileMenu) == 0x000008, "Wrong alignment on UMarinerProfileMenu");
static_assert(sizeof(UMarinerProfileMenu) == 0x0004E8, "Wrong size on UMarinerProfileMenu");
static_assert(offsetof(UMarinerProfileMenu, Bound_TextProfileHeader) == 0x0004E0, "Member 'UMarinerProfileMenu::Bound_TextProfileHeader' has a wrong offset!");

// Class Mariner.MarinerLocalPlayer
// 0x0000 (0x0258 - 0x0258)
class UMarinerLocalPlayer final : public ULocalPlayer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLocalPlayer">();
	}
	static class UMarinerLocalPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLocalPlayer>();
	}
};
static_assert(alignof(UMarinerLocalPlayer) == 0x000008, "Wrong alignment on UMarinerLocalPlayer");
static_assert(sizeof(UMarinerLocalPlayer) == 0x000258, "Wrong size on UMarinerLocalPlayer");

// Class Mariner.MarinerLootCardDataAsset
// 0x0038 (0x0068 - 0x0030)
class UMarinerLootCardDataAsset final : public UDataAsset
{
public:
	class UTexture2D*                             ItemImageFront;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ItemShortDescriptionFront;                         // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ItemFullDescriptionBack;                           // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerLootCardDataAsset">();
	}
	static class UMarinerLootCardDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerLootCardDataAsset>();
	}
};
static_assert(alignof(UMarinerLootCardDataAsset) == 0x000008, "Wrong alignment on UMarinerLootCardDataAsset");
static_assert(sizeof(UMarinerLootCardDataAsset) == 0x000068, "Wrong size on UMarinerLootCardDataAsset");
static_assert(offsetof(UMarinerLootCardDataAsset, ItemImageFront) == 0x000030, "Member 'UMarinerLootCardDataAsset::ItemImageFront' has a wrong offset!");
static_assert(offsetof(UMarinerLootCardDataAsset, ItemShortDescriptionFront) == 0x000038, "Member 'UMarinerLootCardDataAsset::ItemShortDescriptionFront' has a wrong offset!");
static_assert(offsetof(UMarinerLootCardDataAsset, ItemFullDescriptionBack) == 0x000050, "Member 'UMarinerLootCardDataAsset::ItemFullDescriptionBack' has a wrong offset!");

// Class Mariner.MarinerRocketTotemShapeDataAsset
// 0x0028 (0x0098 - 0x0070)
class UMarinerRocketTotemShapeDataAsset final : public UMarinerCMSItemWithIcon
{
public:
	class UTexture2D*                             FlagShapeMask;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              IconOffset;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IconScale;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_192D[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMaterialOverride>              MaterialOverrides;                                 // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRocketTotemShapeDataAsset">();
	}
	static class UMarinerRocketTotemShapeDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRocketTotemShapeDataAsset>();
	}
};
static_assert(alignof(UMarinerRocketTotemShapeDataAsset) == 0x000008, "Wrong alignment on UMarinerRocketTotemShapeDataAsset");
static_assert(sizeof(UMarinerRocketTotemShapeDataAsset) == 0x000098, "Wrong size on UMarinerRocketTotemShapeDataAsset");
static_assert(offsetof(UMarinerRocketTotemShapeDataAsset, FlagShapeMask) == 0x000070, "Member 'UMarinerRocketTotemShapeDataAsset::FlagShapeMask' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemShapeDataAsset, IconOffset) == 0x000078, "Member 'UMarinerRocketTotemShapeDataAsset::IconOffset' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemShapeDataAsset, IconScale) == 0x000080, "Member 'UMarinerRocketTotemShapeDataAsset::IconScale' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemShapeDataAsset, MaterialOverrides) == 0x000088, "Member 'UMarinerRocketTotemShapeDataAsset::MaterialOverrides' has a wrong offset!");

// Class Mariner.MarinerMainArtifactsMenu
// 0x0290 (0x0770 - 0x04E0)
class UMarinerMainArtifactsMenu : public UMarinerMenu
{
public:
	class UMarinerVerticalBox*                    Bound_VerticalBoxRoot;                             // 0x04E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerLayeredButton*                  Bound_ButtonSocialPreset;                          // 0x04E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerLayeredButton*                  Bound_ButtonRankedPreset;                          // 0x04F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextRankedInfo;                              // 0x04F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            Bound_LoadSpinner;                                 // 0x0500(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerArtifactPreviewWidget*          Bound_ArtifactPreviewWidget;                       // 0x0508(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextBlockHeader;                             // 0x0510(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           Bound_ArtifactPresetPanel;                         // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerArtifactDetailsWidget*          Bound_ArtifactDetails;                             // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerArtifactsSubMenuButton> ArtifactSubMenuButtonWidgetSubclass;               // 0x0528(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     SelectPrompt;                                      // 0x0530(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     PresetPrompt;                                      // 0x0648(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_192E[0x8];                                     // 0x0760(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerPlayableCharacter*              CurrentCharacter;                                  // 0x0768(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnMangoProfileChanged();
	void OnPresetButtonSelected(class UMarinerLayeredButton* Instance);
	void OnSubMenuButtonHovered(class UMarinerLayeredButton* Instance, bool bFromKeyboard, bool bFromMouse);
	void SetCurrentCharacter(class UMarinerPlayableCharacter* InCurrentCharacter);

	class UMarinerPlayableCharacter* GetCurrentCharacter() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMainArtifactsMenu">();
	}
	static class UMarinerMainArtifactsMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMainArtifactsMenu>();
	}
};
static_assert(alignof(UMarinerMainArtifactsMenu) == 0x000008, "Wrong alignment on UMarinerMainArtifactsMenu");
static_assert(sizeof(UMarinerMainArtifactsMenu) == 0x000770, "Wrong size on UMarinerMainArtifactsMenu");
static_assert(offsetof(UMarinerMainArtifactsMenu, Bound_VerticalBoxRoot) == 0x0004E0, "Member 'UMarinerMainArtifactsMenu::Bound_VerticalBoxRoot' has a wrong offset!");
static_assert(offsetof(UMarinerMainArtifactsMenu, Bound_ButtonSocialPreset) == 0x0004E8, "Member 'UMarinerMainArtifactsMenu::Bound_ButtonSocialPreset' has a wrong offset!");
static_assert(offsetof(UMarinerMainArtifactsMenu, Bound_ButtonRankedPreset) == 0x0004F0, "Member 'UMarinerMainArtifactsMenu::Bound_ButtonRankedPreset' has a wrong offset!");
static_assert(offsetof(UMarinerMainArtifactsMenu, Bound_TextRankedInfo) == 0x0004F8, "Member 'UMarinerMainArtifactsMenu::Bound_TextRankedInfo' has a wrong offset!");
static_assert(offsetof(UMarinerMainArtifactsMenu, Bound_LoadSpinner) == 0x000500, "Member 'UMarinerMainArtifactsMenu::Bound_LoadSpinner' has a wrong offset!");
static_assert(offsetof(UMarinerMainArtifactsMenu, Bound_ArtifactPreviewWidget) == 0x000508, "Member 'UMarinerMainArtifactsMenu::Bound_ArtifactPreviewWidget' has a wrong offset!");
static_assert(offsetof(UMarinerMainArtifactsMenu, Bound_TextBlockHeader) == 0x000510, "Member 'UMarinerMainArtifactsMenu::Bound_TextBlockHeader' has a wrong offset!");
static_assert(offsetof(UMarinerMainArtifactsMenu, Bound_ArtifactPresetPanel) == 0x000518, "Member 'UMarinerMainArtifactsMenu::Bound_ArtifactPresetPanel' has a wrong offset!");
static_assert(offsetof(UMarinerMainArtifactsMenu, Bound_ArtifactDetails) == 0x000520, "Member 'UMarinerMainArtifactsMenu::Bound_ArtifactDetails' has a wrong offset!");
static_assert(offsetof(UMarinerMainArtifactsMenu, ArtifactSubMenuButtonWidgetSubclass) == 0x000528, "Member 'UMarinerMainArtifactsMenu::ArtifactSubMenuButtonWidgetSubclass' has a wrong offset!");
static_assert(offsetof(UMarinerMainArtifactsMenu, SelectPrompt) == 0x000530, "Member 'UMarinerMainArtifactsMenu::SelectPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerMainArtifactsMenu, PresetPrompt) == 0x000648, "Member 'UMarinerMainArtifactsMenu::PresetPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerMainArtifactsMenu, CurrentCharacter) == 0x000768, "Member 'UMarinerMainArtifactsMenu::CurrentCharacter' has a wrong offset!");

// Class Mariner.MarinerMainMenuHUD
// 0x0060 (0x04B0 - 0x0450)
class AMarinerMainMenuHUD final : public AMarinerHUD
{
public:
	uint8                                         Pad_1930[0x60];                                    // 0x0450(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMainMenuHUD">();
	}
	static class AMarinerMainMenuHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerMainMenuHUD>();
	}
};
static_assert(alignof(AMarinerMainMenuHUD) == 0x000008, "Wrong alignment on AMarinerMainMenuHUD");
static_assert(sizeof(AMarinerMainMenuHUD) == 0x0004B0, "Wrong size on AMarinerMainMenuHUD");

// Class Mariner.MarinerMainMenuPlayerController
// 0x0000 (0x0580 - 0x0580)
class AMarinerMainMenuPlayerController final : public AMarinerBasePlayerController
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMainMenuPlayerController">();
	}
	static class AMarinerMainMenuPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerMainMenuPlayerController>();
	}
};
static_assert(alignof(AMarinerMainMenuPlayerController) == 0x000008, "Wrong alignment on AMarinerMainMenuPlayerController");
static_assert(sizeof(AMarinerMainMenuPlayerController) == 0x000580, "Wrong size on AMarinerMainMenuPlayerController");

// Class Mariner.MarinerMainMenuPlayerState
// 0x0000 (0x05A8 - 0x05A8)
class AMarinerMainMenuPlayerState final : public AMarinerPlayerState
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMainMenuPlayerState">();
	}
	static class AMarinerMainMenuPlayerState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerMainMenuPlayerState>();
	}
};
static_assert(alignof(AMarinerMainMenuPlayerState) == 0x000008, "Wrong alignment on AMarinerMainMenuPlayerState");
static_assert(sizeof(AMarinerMainMenuPlayerState) == 0x0005A8, "Wrong size on AMarinerMainMenuPlayerState");

// Class Mariner.MarinerProjectileSpread
// 0x0070 (0x00A0 - 0x0030)
class UMarinerProjectileSpread final : public UDataAsset
{
public:
	bool                                          bOverlapNextSpread;                                // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1931[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayNextSpreadBy;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelaySpawnPathTime;                                // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepeatTimes;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpreadHasRadius;                                  // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpreadIsArc;                                      // 0x0041(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpreadIsFan;                                      // 0x0042(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpreadIsSpiral;                                   // 0x0043(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpreadIsSpokes;                                   // 0x0044(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpreadIsSockets;                                  // 0x0045(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanOffsetFromCenter;                              // 0x0046(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanHaveSpreadAngle;                               // 0x0047(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanHaveRotOriginOffset;                           // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanHaveFiringOrder;                               // 0x0049(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSetPathCount;                                  // 0x004A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanHaveXOffset;                                   // 0x004B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanHaveYOffset;                                   // 0x004C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanLoop;                                          // 0x004D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerSpreadType                            SpreadType;                                        // 0x004E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1932[0x1];                                     // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetXOffset;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OffsetYOffset;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OriginExtension;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RotOriginOffset;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HalfSpreadAngle;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FanSpawningWidth;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpreadRadius;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ArcDegrees;                                        // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerMultiShotFiringOrder                  FiringOrder;                                       // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1933[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PathCount;                                         // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DistanceBetweenPaths;                              // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RadialProgression;                                 // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OffsetFromCenter;                                  // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SpokeCount;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PathsPerSpoke;                                     // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1934[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SocketsToUse;                                      // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void GenerateTransforms(class UObject* WorldContextObject, const struct FTransform& SpawnTransform, TArray<struct FMultiProjectileSpawnData>* OutSpawnPaths, class USceneComponent* SocketSource) const;
	int32 GetPathCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerProjectileSpread">();
	}
	static class UMarinerProjectileSpread* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerProjectileSpread>();
	}
};
static_assert(alignof(UMarinerProjectileSpread) == 0x000008, "Wrong alignment on UMarinerProjectileSpread");
static_assert(sizeof(UMarinerProjectileSpread) == 0x0000A0, "Wrong size on UMarinerProjectileSpread");
static_assert(offsetof(UMarinerProjectileSpread, bOverlapNextSpread) == 0x000030, "Member 'UMarinerProjectileSpread::bOverlapNextSpread' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, DelayNextSpreadBy) == 0x000034, "Member 'UMarinerProjectileSpread::DelayNextSpreadBy' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, DelaySpawnPathTime) == 0x000038, "Member 'UMarinerProjectileSpread::DelaySpawnPathTime' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, RepeatTimes) == 0x00003C, "Member 'UMarinerProjectileSpread::RepeatTimes' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, bSpreadHasRadius) == 0x000040, "Member 'UMarinerProjectileSpread::bSpreadHasRadius' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, bSpreadIsArc) == 0x000041, "Member 'UMarinerProjectileSpread::bSpreadIsArc' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, bSpreadIsFan) == 0x000042, "Member 'UMarinerProjectileSpread::bSpreadIsFan' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, bSpreadIsSpiral) == 0x000043, "Member 'UMarinerProjectileSpread::bSpreadIsSpiral' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, bSpreadIsSpokes) == 0x000044, "Member 'UMarinerProjectileSpread::bSpreadIsSpokes' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, bSpreadIsSockets) == 0x000045, "Member 'UMarinerProjectileSpread::bSpreadIsSockets' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, bCanOffsetFromCenter) == 0x000046, "Member 'UMarinerProjectileSpread::bCanOffsetFromCenter' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, bCanHaveSpreadAngle) == 0x000047, "Member 'UMarinerProjectileSpread::bCanHaveSpreadAngle' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, bCanHaveRotOriginOffset) == 0x000048, "Member 'UMarinerProjectileSpread::bCanHaveRotOriginOffset' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, bCanHaveFiringOrder) == 0x000049, "Member 'UMarinerProjectileSpread::bCanHaveFiringOrder' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, bCanSetPathCount) == 0x00004A, "Member 'UMarinerProjectileSpread::bCanSetPathCount' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, bCanHaveXOffset) == 0x00004B, "Member 'UMarinerProjectileSpread::bCanHaveXOffset' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, bCanHaveYOffset) == 0x00004C, "Member 'UMarinerProjectileSpread::bCanHaveYOffset' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, bCanLoop) == 0x00004D, "Member 'UMarinerProjectileSpread::bCanLoop' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, SpreadType) == 0x00004E, "Member 'UMarinerProjectileSpread::SpreadType' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, OffsetXOffset) == 0x000050, "Member 'UMarinerProjectileSpread::OffsetXOffset' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, OffsetYOffset) == 0x000054, "Member 'UMarinerProjectileSpread::OffsetYOffset' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, OriginExtension) == 0x000058, "Member 'UMarinerProjectileSpread::OriginExtension' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, RotOriginOffset) == 0x00005C, "Member 'UMarinerProjectileSpread::RotOriginOffset' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, HalfSpreadAngle) == 0x000060, "Member 'UMarinerProjectileSpread::HalfSpreadAngle' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, FanSpawningWidth) == 0x000064, "Member 'UMarinerProjectileSpread::FanSpawningWidth' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, SpreadRadius) == 0x000068, "Member 'UMarinerProjectileSpread::SpreadRadius' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, ArcDegrees) == 0x00006C, "Member 'UMarinerProjectileSpread::ArcDegrees' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, FiringOrder) == 0x000070, "Member 'UMarinerProjectileSpread::FiringOrder' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, PathCount) == 0x000074, "Member 'UMarinerProjectileSpread::PathCount' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, DistanceBetweenPaths) == 0x000078, "Member 'UMarinerProjectileSpread::DistanceBetweenPaths' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, RadialProgression) == 0x00007C, "Member 'UMarinerProjectileSpread::RadialProgression' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, OffsetFromCenter) == 0x000080, "Member 'UMarinerProjectileSpread::OffsetFromCenter' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, SpokeCount) == 0x000084, "Member 'UMarinerProjectileSpread::SpokeCount' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, PathsPerSpoke) == 0x000088, "Member 'UMarinerProjectileSpread::PathsPerSpoke' has a wrong offset!");
static_assert(offsetof(UMarinerProjectileSpread, SocketsToUse) == 0x000090, "Member 'UMarinerProjectileSpread::SocketsToUse' has a wrong offset!");

// Class Mariner.VignettePlaylistDataAsset
// 0x0010 (0x0040 - 0x0030)
class UVignettePlaylistDataAsset final : public UPrimaryDataAsset
{
public:
	TArray<TSoftObjectPtr<class ULevelSequence>>  Vignettes;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VignettePlaylistDataAsset">();
	}
	static class UVignettePlaylistDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVignettePlaylistDataAsset>();
	}
};
static_assert(alignof(UVignettePlaylistDataAsset) == 0x000008, "Wrong alignment on UVignettePlaylistDataAsset");
static_assert(sizeof(UVignettePlaylistDataAsset) == 0x000040, "Wrong size on UVignettePlaylistDataAsset");
static_assert(offsetof(UVignettePlaylistDataAsset, Vignettes) == 0x000030, "Member 'UVignettePlaylistDataAsset::Vignettes' has a wrong offset!");

// Class Mariner.MarinerRootMotionMoveUpdateDefaults
// 0x0000 (0x0038 - 0x0038)
class UMarinerRootMotionMoveUpdateDefaults : public UMarinerMoveUpdateDefaults
{
public:
	static class FName GetOverrideAbilityRootMotionName();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRootMotionMoveUpdateDefaults">();
	}
	static class UMarinerRootMotionMoveUpdateDefaults* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRootMotionMoveUpdateDefaults>();
	}
};
static_assert(alignof(UMarinerRootMotionMoveUpdateDefaults) == 0x000008, "Wrong alignment on UMarinerRootMotionMoveUpdateDefaults");
static_assert(sizeof(UMarinerRootMotionMoveUpdateDefaults) == 0x000038, "Wrong size on UMarinerRootMotionMoveUpdateDefaults");

// Class Mariner.MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce
// 0x0030 (0x0068 - 0x0038)
class UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce final : public UMarinerRootMotionMoveUpdateDefaults
{
public:
	float                                         DefaultDuration;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultRestrictSpeedToExpected;                   // 0x003C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1937[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           DefaultPathOffsetCurve;                            // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DefaultTimeMappingCurve;                           // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionAccumulateMode                     DefaultAccumulateMode;                             // 0x0050(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 DefaultFinishVelocityParams_Mode;                  // 0x0051(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1938[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultFinishVelocityParams_ClampVelocity;         // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DefaultFinishVelocityParams_SetVelocity;           // 0x0058(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAbilityRootmotions;                       // 0x0064(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1939[0x3];                                     // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class FName GetMoveToDynamicForceRootMotionName();
	static float GetSmallValidDuration();
	static void ResetLocationForMoveToDynamicForceRootMotionLocal(class UMarinerCharacterMovement* OwningMovementComponent, const struct FVector& NewTargetLocation);
	static bool ValidDurationForMoveToDynamicForce(float DurationToTest);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce">();
	}
	static class UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce>();
	}
};
static_assert(alignof(UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce) == 0x000008, "Wrong alignment on UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce");
static_assert(sizeof(UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce) == 0x000068, "Wrong size on UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce, DefaultDuration) == 0x000038, "Member 'UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce::DefaultDuration' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce, bDefaultRestrictSpeedToExpected) == 0x00003C, "Member 'UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce::bDefaultRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce, DefaultPathOffsetCurve) == 0x000040, "Member 'UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce::DefaultPathOffsetCurve' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce, DefaultTimeMappingCurve) == 0x000048, "Member 'UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce::DefaultTimeMappingCurve' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce, DefaultAccumulateMode) == 0x000050, "Member 'UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce::DefaultAccumulateMode' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce, DefaultFinishVelocityParams_Mode) == 0x000051, "Member 'UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce::DefaultFinishVelocityParams_Mode' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce, DefaultFinishVelocityParams_ClampVelocity) == 0x000054, "Member 'UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce::DefaultFinishVelocityParams_ClampVelocity' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce, DefaultFinishVelocityParams_SetVelocity) == 0x000058, "Member 'UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce::DefaultFinishVelocityParams_SetVelocity' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce, bOverrideAbilityRootmotions) == 0x000064, "Member 'UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce::bOverrideAbilityRootmotions' has a wrong offset!");

// Class Mariner.MarinerMapDataAsset
// 0x0028 (0x0058 - 0x0030)
class UMarinerMapDataAsset final : public UDataAsset
{
public:
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	const class FString GetFullMapName() const;
	const class FString GetMapName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMapDataAsset">();
	}
	static class UMarinerMapDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMapDataAsset>();
	}
};
static_assert(alignof(UMarinerMapDataAsset) == 0x000008, "Wrong alignment on UMarinerMapDataAsset");
static_assert(sizeof(UMarinerMapDataAsset) == 0x000058, "Wrong size on UMarinerMapDataAsset");
static_assert(offsetof(UMarinerMapDataAsset, Level) == 0x000030, "Member 'UMarinerMapDataAsset::Level' has a wrong offset!");

// Class Mariner.MarinerRarityWidget
// 0x0010 (0x02C0 - 0x02B0)
class UMarinerRarityWidget : public UMarinerUserWidget
{
public:
	class UImage*                                 Bound_RarityImage;                                 // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_193C[0x8];                                     // 0x02B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitRarityWidget(class UMarinerItemLoaderButtonBase* Instance);
	void SetRarityBrush(const struct FSlateBrush& InBrush);
	void SetRarityColor(class UMarinerItemLoaderButtonBase* Instance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRarityWidget">();
	}
	static class UMarinerRarityWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRarityWidget>();
	}
};
static_assert(alignof(UMarinerRarityWidget) == 0x000008, "Wrong alignment on UMarinerRarityWidget");
static_assert(sizeof(UMarinerRarityWidget) == 0x0002C0, "Wrong size on UMarinerRarityWidget");
static_assert(offsetof(UMarinerRarityWidget, Bound_RarityImage) == 0x0002B0, "Member 'UMarinerRarityWidget::Bound_RarityImage' has a wrong offset!");

// Class Mariner.MarinerMapSelectButton
// 0x0050 (0x2FC8 - 0x2F78)
class UMarinerMapSelectButton : public UMarinerLayeredButton
{
public:
	class UPanelWidget*                           Bound_MapNameScaleBox;                             // 0x2F78(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            Bound_LoadingSpinner;                              // 0x2F80(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_193D[0x18];                                    // 0x2F88(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              MapTexture;                                        // 0x2FA0(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnMapImageLoadFinished();
	void SetMap(const struct FGuid& InMapId, bool bInShowMapText);

	const struct FGuid GetMapId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMapSelectButton">();
	}
	static class UMarinerMapSelectButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMapSelectButton>();
	}
};
static_assert(alignof(UMarinerMapSelectButton) == 0x000008, "Wrong alignment on UMarinerMapSelectButton");
static_assert(sizeof(UMarinerMapSelectButton) == 0x002FC8, "Wrong size on UMarinerMapSelectButton");
static_assert(offsetof(UMarinerMapSelectButton, Bound_MapNameScaleBox) == 0x002F78, "Member 'UMarinerMapSelectButton::Bound_MapNameScaleBox' has a wrong offset!");
static_assert(offsetof(UMarinerMapSelectButton, Bound_LoadingSpinner) == 0x002F80, "Member 'UMarinerMapSelectButton::Bound_LoadingSpinner' has a wrong offset!");
static_assert(offsetof(UMarinerMapSelectButton, MapTexture) == 0x002FA0, "Member 'UMarinerMapSelectButton::MapTexture' has a wrong offset!");

// Class Mariner.MarinerMatchmakingMapSelection
// 0x0030 (0x02E0 - 0x02B0)
class UMarinerMatchmakingMapSelection final : public UMarinerUserWidget
{
public:
	uint8                                         Pad_193F[0x30];                                    // 0x02B0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Init(const struct FGuid& InPlaylistId, const struct FGuid& InMapId, const struct FFilterModeArray& InModeIDs);
	void SetModeEnabled(int32 ModeIndex, bool bEnabled);

	int32 GetModeCount() const;
	bool GetModeData(int32 ModeIndex, class FText* ModeNameOut) const;
	bool GetModeEnabled(int32 ModeIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMatchmakingMapSelection">();
	}
	static class UMarinerMatchmakingMapSelection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMatchmakingMapSelection>();
	}
};
static_assert(alignof(UMarinerMatchmakingMapSelection) == 0x000008, "Wrong alignment on UMarinerMatchmakingMapSelection");
static_assert(sizeof(UMarinerMatchmakingMapSelection) == 0x0002E0, "Wrong size on UMarinerMatchmakingMapSelection");

// Class Mariner.MarinerPurchaseMessageBox
// 0x0158 (0x05B0 - 0x0458)
class UMarinerPurchaseMessageBox : public UMarinerMessageBoxBase
{
public:
	struct FSlateBrush                            RocketBucksIcon;                                   // 0x0458(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            RocketPartsIcon;                                   // 0x04E0(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FLinearColor                           RocketBucksColor;                                  // 0x0568(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           RocketPartsColor;                                  // 0x0578(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_ItemName;                                    // 0x0588(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_ItemDesc;                                    // 0x0590(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_LineBreak;                                   // 0x0598(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_CostValue;                                   // 0x05A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_CostIcon;                                    // 0x05A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	const struct FMarinerMessageBoxPurchaseData GetData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPurchaseMessageBox">();
	}
	static class UMarinerPurchaseMessageBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPurchaseMessageBox>();
	}
};
static_assert(alignof(UMarinerPurchaseMessageBox) == 0x000008, "Wrong alignment on UMarinerPurchaseMessageBox");
static_assert(sizeof(UMarinerPurchaseMessageBox) == 0x0005B0, "Wrong size on UMarinerPurchaseMessageBox");
static_assert(offsetof(UMarinerPurchaseMessageBox, RocketBucksIcon) == 0x000458, "Member 'UMarinerPurchaseMessageBox::RocketBucksIcon' has a wrong offset!");
static_assert(offsetof(UMarinerPurchaseMessageBox, RocketPartsIcon) == 0x0004E0, "Member 'UMarinerPurchaseMessageBox::RocketPartsIcon' has a wrong offset!");
static_assert(offsetof(UMarinerPurchaseMessageBox, RocketBucksColor) == 0x000568, "Member 'UMarinerPurchaseMessageBox::RocketBucksColor' has a wrong offset!");
static_assert(offsetof(UMarinerPurchaseMessageBox, RocketPartsColor) == 0x000578, "Member 'UMarinerPurchaseMessageBox::RocketPartsColor' has a wrong offset!");
static_assert(offsetof(UMarinerPurchaseMessageBox, Bound_ItemName) == 0x000588, "Member 'UMarinerPurchaseMessageBox::Bound_ItemName' has a wrong offset!");
static_assert(offsetof(UMarinerPurchaseMessageBox, Bound_ItemDesc) == 0x000590, "Member 'UMarinerPurchaseMessageBox::Bound_ItemDesc' has a wrong offset!");
static_assert(offsetof(UMarinerPurchaseMessageBox, Bound_LineBreak) == 0x000598, "Member 'UMarinerPurchaseMessageBox::Bound_LineBreak' has a wrong offset!");
static_assert(offsetof(UMarinerPurchaseMessageBox, Bound_CostValue) == 0x0005A0, "Member 'UMarinerPurchaseMessageBox::Bound_CostValue' has a wrong offset!");
static_assert(offsetof(UMarinerPurchaseMessageBox, Bound_CostIcon) == 0x0005A8, "Member 'UMarinerPurchaseMessageBox::Bound_CostIcon' has a wrong offset!");

// Class Mariner.MarinerMathUtils
// 0x0000 (0x0028 - 0x0028)
class UMarinerMathUtils final : public UBlueprintFunctionLibrary
{
public:
	static bool CalculateLaunchVelocity(const struct FVector& LaunchLocation, const struct FVector& TargetLocation, const float LaunchAngle, const float Gravity, struct FVector* OutLaunchVelocity);
	static bool CapsuleIntersectsBox(const struct FBox& Box, const struct FVector& CapsulePos1, const struct FVector& CapsulePos2, float SphereRadius, const struct FTransform& BoxTransform, struct FVector* OutIntersectionPoint, struct FVector* OutCollisionNormal);
	static bool CapsuleIntersectsCapsule(const struct FVector& Capsule1PosStart, const struct FVector& Capsule1PosEnd, float CapsuleRadius1, const struct FVector& Capsule2PosStart, const struct FVector& Capsule2PosEnd, float CapsuleRadius2, struct FVector* OutIntersectionPoint, struct FVector* OutCollisionNormal);
	static bool CapsuleIntersectsCapsuleCone(const struct FVector& CapsulePosStart, const struct FVector& CapsulePosEnd, const float CapsuleRadius, const struct FVector& CapsuleConePosOrigin, const struct FVector& CapsuleConeDirection, float CapsuleConeLength, const float CapsuleConeRadiusAtEnd, struct FVector* OutIntersectionPoint, struct FVector* OutCollisionNormal);
	static void GetCapsulePointsFromExtents(const class UCapsuleComponent* Capsule, struct FVector* OutCapsuleStartPoint, struct FVector* OutCapsuleEndPoint);
	static float GetDepenetrationDistanceFromHitResult(const struct FHitResult& Hit);
	static float GetPitchFromVector(const struct FVector& Vector);
	static struct FLinearColor HexToLinearColor(const class FString& HexColor);
	static float InterpTo(const float& Current, const float& Target, float DeltaTime, float InterpSpeed);
	static bool IsActorBehindPawn(const class AActor* Actor, const class APawn* Pawn);
	static bool IsPointWithinCone(const struct FVector& Point, const struct FVector& ConeOrigin, const struct FVector& ConeDirection, const float& CosConeHalfAngle, const float& ConeLength);
	static class FString LinearColorToHex(const struct FLinearColor& LinearColor);
	static bool LineIntersectsSphere(const struct FVector& LineOrigin, const struct FVector& LineDirection, const struct FVector& SphereCenter, const float SphereRadius, TArray<struct FVector>* OutIntersectionPoints);
	static bool LineSegmentIntersectsSphere(const struct FVector& SegmentStart, const struct FVector& SegmentEnd, const struct FVector& SphereCenter, const float SphereRadius, TArray<struct FVector>* OutIntersectionPoints);
	static bool PointInsideBox(const class UObject* WorldContextObject, const struct FVector& BoxExtents, const struct FRotator& BoxRotation, const struct FVector& BoxOrigin, const struct FVector& Point, int32 DebugLevel, bool bIsLikelyInside);
	static bool PointInsideCapsule(const struct FVector& Point, const struct FTransform& CapsuleTransform, const float FullCapsuleHeight, const float CapsuleRadius);
	static bool PointInsideCylinder(const struct FVector& Point, const struct FTransform& CylinderTransform, const float CylinderHeight, const float CylinderRadius);
	static bool PointInsideSphere(const struct FVector& Point, const struct FVector& SphereLocation, const float SphereRadius);
	static bool ProjectWorldToScreenBidirectional(class APlayerController* PlayerController, const struct FVector& WorldPosition, struct FVector2D* ScreenPosition, bool* bTargetBehindCamera, bool bPlayerViewportRelative);
	static bool RayIntersectsCapsule(const struct FVector& RayOrigin, const struct FVector& RayDirection, const struct FTransform& CapsuleTransform, const float FullCapsuleHeight, const float CapsuleRadius, TArray<struct FVector>* OutIntersectionPoints);
	static bool RayIntersectsCylinder(const struct FVector& RayOrigin, const struct FVector& RayDirection, const struct FTransform& CylinderTransform, const float CylinderHeight, const float CylinderRadius, const bool bAllowIntersectionWithCaps, TArray<struct FVector>* OutIntersectionPoints);
	static bool RayIntersectsSphere(const struct FVector& RayOrigin, const struct FVector& RayDirection, const struct FVector& SphereCenter, const float SphereRadius, TArray<struct FVector>* OutIntersectionPoints);
	static struct FVector RoundVector(const struct FVector& Vector);
	static bool SegmentIntersection2D(const struct FVector2D& SegmentStartA, const struct FVector2D& SegmentEndA, const struct FVector2D& SegmentStartB, const struct FVector2D& SegmentEndB, struct FVector2D* OutIntersectionPoint);
	static bool SegmentIntersectsBox(class UObject* WorldContextObject, const struct FVector& BoxExtents, const struct FRotator& BoxRotation, const struct FVector& BoxOrigin, const struct FVector& SegmentStart, const struct FVector& SegmentEnd, TArray<struct FVector>* OutIntersectionPoints, int32 DebugLevel, bool bDoesLikelyIntersect);
	static bool SlabSegmentIntersection(float BoxMin, float BoxMax, float Pos1, float Pos2, float* OutLastStartTime, float* OutLastEndTime);
	static bool SphereIntersectsBox(const struct FBox& Box, const struct FVector& SpherePos, float SphereRadiusSquared, const struct FTransform& BoxTransform, struct FVector* OutIntersectionPoint, struct FVector* OutCollisionNormal);
	static bool SphereIntersectsCapsule(const struct FVector& SpherePos, const struct FVector& CapsulePos1, const struct FVector& CapsulePos2, float SphereRadius, float CapsuleRadius, struct FVector* OutIntersectionPoint, struct FVector* OutCollisionNormal);
	static bool SphereIntersectsSphere(const struct FVector& Sphere1Pos, const struct FVector& Sphere2Pos, float Sphere1Radius, float Sphere2Radius, struct FVector* OutIntersectionPoint, struct FVector* OutCollisionNormal);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMathUtils">();
	}
	static class UMarinerMathUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMathUtils>();
	}
};
static_assert(alignof(UMarinerMathUtils) == 0x000008, "Wrong alignment on UMarinerMathUtils");
static_assert(sizeof(UMarinerMathUtils) == 0x000028, "Wrong size on UMarinerMathUtils");

// Class Mariner.MarinerMedalManagement
// 0x0040 (0x0540 - 0x0500)
class UMarinerMedalManagement final : public UMarinerMessageWidget
{
public:
	float                                         TimeToShowMedal;                                   // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MedalOffset;                                       // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeTransitionMedal;                               // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfMedalsToShow;                              // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StartPosition;                                     // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MedalSizeX;                                        // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MedalSizeY;                                        // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerMedalWidget>        PlayerMedalWidget;                                 // 0x0518(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           Bound_MedalPanel;                                  // 0x0520(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMarinerMedalWidget*>            PlayerMedals;                                      // 0x0528(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1962[0x8];                                     // 0x0538(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateMedal(class UMarinerLocalMessage* MessageCDO);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMedalManagement">();
	}
	static class UMarinerMedalManagement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMedalManagement>();
	}
};
static_assert(alignof(UMarinerMedalManagement) == 0x000010, "Wrong alignment on UMarinerMedalManagement");
static_assert(sizeof(UMarinerMedalManagement) == 0x000540, "Wrong size on UMarinerMedalManagement");
static_assert(offsetof(UMarinerMedalManagement, TimeToShowMedal) == 0x0004F8, "Member 'UMarinerMedalManagement::TimeToShowMedal' has a wrong offset!");
static_assert(offsetof(UMarinerMedalManagement, MedalOffset) == 0x0004FC, "Member 'UMarinerMedalManagement::MedalOffset' has a wrong offset!");
static_assert(offsetof(UMarinerMedalManagement, TimeTransitionMedal) == 0x000500, "Member 'UMarinerMedalManagement::TimeTransitionMedal' has a wrong offset!");
static_assert(offsetof(UMarinerMedalManagement, NumberOfMedalsToShow) == 0x000504, "Member 'UMarinerMedalManagement::NumberOfMedalsToShow' has a wrong offset!");
static_assert(offsetof(UMarinerMedalManagement, StartPosition) == 0x000508, "Member 'UMarinerMedalManagement::StartPosition' has a wrong offset!");
static_assert(offsetof(UMarinerMedalManagement, MedalSizeX) == 0x000510, "Member 'UMarinerMedalManagement::MedalSizeX' has a wrong offset!");
static_assert(offsetof(UMarinerMedalManagement, MedalSizeY) == 0x000514, "Member 'UMarinerMedalManagement::MedalSizeY' has a wrong offset!");
static_assert(offsetof(UMarinerMedalManagement, PlayerMedalWidget) == 0x000518, "Member 'UMarinerMedalManagement::PlayerMedalWidget' has a wrong offset!");
static_assert(offsetof(UMarinerMedalManagement, Bound_MedalPanel) == 0x000520, "Member 'UMarinerMedalManagement::Bound_MedalPanel' has a wrong offset!");
static_assert(offsetof(UMarinerMedalManagement, PlayerMedals) == 0x000528, "Member 'UMarinerMedalManagement::PlayerMedals' has a wrong offset!");

// Class Mariner.MarinerPostGameResultsScore
// 0x0000 (0x02B0 - 0x02B0)
class UMarinerPostGameResultsScore : public UMarinerUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPostGameResultsScore">();
	}
	static class UMarinerPostGameResultsScore* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPostGameResultsScore>();
	}
};
static_assert(alignof(UMarinerPostGameResultsScore) == 0x000008, "Wrong alignment on UMarinerPostGameResultsScore");
static_assert(sizeof(UMarinerPostGameResultsScore) == 0x0002B0, "Wrong size on UMarinerPostGameResultsScore");

// Class Mariner.MarinerRewardPreview
// 0x0000 (0x3058 - 0x3058)
class UMarinerRewardPreview : public UMarinerItemLoaderButtonBase
{
public:
	void PopulateRewardPreview(const struct FMangoReward& Reward);
	void PopulateUpcomingRewardPreview(bool bFeatured, int32 RewardLevel, const struct FMangoReward& Reward);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRewardPreview">();
	}
	static class UMarinerRewardPreview* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRewardPreview>();
	}
};
static_assert(alignof(UMarinerRewardPreview) == 0x000008, "Wrong alignment on UMarinerRewardPreview");
static_assert(sizeof(UMarinerRewardPreview) == 0x003058, "Wrong size on UMarinerRewardPreview");

// Class Mariner.MarinerMediaPlayerWidget
// 0x0050 (0x0280 - 0x0230)
class UMarinerMediaPlayerWidget : public UUserWidget
{
public:
	class UMediaPlayer*                           MediaPlayerInstance;                               // 0x0230(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseBlackBackground;                               // 0x0238(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1964[0x7];                                     // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 Bound_Video;                                       // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_Background;                                  // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1965[0x30];                                    // 0x0250(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MuteMovie(bool bInMuted);
	void OnMediaOpened(const class FString& OpenedUrl);
	void OnMediaOpenFailed(const class FString& FailedUrl);
	void OnMediaStopped();
	void PauseMovie(bool bInPaused);
	void PlayMovie(class UMediaSource* MediaSource, bool bLooping, TDelegate<void()> MovieCompletedCallback);
	void SetVolume(float InVolume);
	void StopMovie();

	bool IsMoviePaused() const;
	bool IsMoviePlaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMediaPlayerWidget">();
	}
	static class UMarinerMediaPlayerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMediaPlayerWidget>();
	}
};
static_assert(alignof(UMarinerMediaPlayerWidget) == 0x000008, "Wrong alignment on UMarinerMediaPlayerWidget");
static_assert(sizeof(UMarinerMediaPlayerWidget) == 0x000280, "Wrong size on UMarinerMediaPlayerWidget");
static_assert(offsetof(UMarinerMediaPlayerWidget, MediaPlayerInstance) == 0x000230, "Member 'UMarinerMediaPlayerWidget::MediaPlayerInstance' has a wrong offset!");
static_assert(offsetof(UMarinerMediaPlayerWidget, bUseBlackBackground) == 0x000238, "Member 'UMarinerMediaPlayerWidget::bUseBlackBackground' has a wrong offset!");
static_assert(offsetof(UMarinerMediaPlayerWidget, Bound_Video) == 0x000240, "Member 'UMarinerMediaPlayerWidget::Bound_Video' has a wrong offset!");
static_assert(offsetof(UMarinerMediaPlayerWidget, Bound_Background) == 0x000248, "Member 'UMarinerMediaPlayerWidget::Bound_Background' has a wrong offset!");

// Class Mariner.MarinerMegaBlastDirectorVolume
// 0x0050 (0x0268 - 0x0218)
class AMarinerMegaBlastDirectorVolume final : public AActor
{
public:
	EMarinerMegaBlastDirectorType                 DirectorType;                                      // 0x0218(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerMegaBlastDirectorVolumeShape          VolumeShape;                                       // 0x0219(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1968[0x2];                                     // 0x021A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StrengthRatio;                                     // 0x021C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        Directors;                                         // 0x0220(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UBoxComponent*                          BoxComponent;                                      // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x0238(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                       SphereComponent;                                   // 0x0240(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1969[0x10];                                    // 0x0248(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectionBasedDirectorDebugDrawArrowLength;        // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DirectorDebugDrawSize;                             // 0x025C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DirectorDebugDrawThickness;                        // 0x0260(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_196A[0x4];                                     // 0x0264(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMegaBlastDirectorVolume">();
	}
	static class AMarinerMegaBlastDirectorVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerMegaBlastDirectorVolume>();
	}
};
static_assert(alignof(AMarinerMegaBlastDirectorVolume) == 0x000008, "Wrong alignment on AMarinerMegaBlastDirectorVolume");
static_assert(sizeof(AMarinerMegaBlastDirectorVolume) == 0x000268, "Wrong size on AMarinerMegaBlastDirectorVolume");
static_assert(offsetof(AMarinerMegaBlastDirectorVolume, DirectorType) == 0x000218, "Member 'AMarinerMegaBlastDirectorVolume::DirectorType' has a wrong offset!");
static_assert(offsetof(AMarinerMegaBlastDirectorVolume, VolumeShape) == 0x000219, "Member 'AMarinerMegaBlastDirectorVolume::VolumeShape' has a wrong offset!");
static_assert(offsetof(AMarinerMegaBlastDirectorVolume, StrengthRatio) == 0x00021C, "Member 'AMarinerMegaBlastDirectorVolume::StrengthRatio' has a wrong offset!");
static_assert(offsetof(AMarinerMegaBlastDirectorVolume, Directors) == 0x000220, "Member 'AMarinerMegaBlastDirectorVolume::Directors' has a wrong offset!");
static_assert(offsetof(AMarinerMegaBlastDirectorVolume, BoxComponent) == 0x000230, "Member 'AMarinerMegaBlastDirectorVolume::BoxComponent' has a wrong offset!");
static_assert(offsetof(AMarinerMegaBlastDirectorVolume, CapsuleComponent) == 0x000238, "Member 'AMarinerMegaBlastDirectorVolume::CapsuleComponent' has a wrong offset!");
static_assert(offsetof(AMarinerMegaBlastDirectorVolume, SphereComponent) == 0x000240, "Member 'AMarinerMegaBlastDirectorVolume::SphereComponent' has a wrong offset!");
static_assert(offsetof(AMarinerMegaBlastDirectorVolume, DirectionBasedDirectorDebugDrawArrowLength) == 0x000258, "Member 'AMarinerMegaBlastDirectorVolume::DirectionBasedDirectorDebugDrawArrowLength' has a wrong offset!");
static_assert(offsetof(AMarinerMegaBlastDirectorVolume, DirectorDebugDrawSize) == 0x00025C, "Member 'AMarinerMegaBlastDirectorVolume::DirectorDebugDrawSize' has a wrong offset!");
static_assert(offsetof(AMarinerMegaBlastDirectorVolume, DirectorDebugDrawThickness) == 0x000260, "Member 'AMarinerMegaBlastDirectorVolume::DirectorDebugDrawThickness' has a wrong offset!");

// Class Mariner.MarinerMenuGlobals
// 0x02C0 (0x02F0 - 0x0030)
class UMarinerMenuGlobals final : public UDataAsset
{
public:
	TSubclassOf<class UMarinerInputOverlay>       InputOverlay;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerWatermark>          Watermark;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerLoadTransitionWidget> LoadTransition;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UMarinerMenuStackManager>> MenuStackManagers;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UMarinerMenuSequence>> MenuSequences;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UMarinerMenu>>       Menus;                                             // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSubclassOf<class UUserWidget>                MenuBackground;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerPlayerHeader>       PlayerHeader;                                      // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMessageBoxManager>  MessageBoxManager;                                 // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UMarinerAsyncUIFlowHandler>> AsyncUIFlowHandlers;                               // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerWidgetPool>         WidgetPool;                                        // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMarinerCulture>                CultureList;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UMarinerCreditsData*                    CreditsData;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     DefaultBackPrompt;                                 // 0x00C0(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     TTSPrompt;                                         // 0x01D8(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMenuGlobals">();
	}
	static class UMarinerMenuGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMenuGlobals>();
	}
};
static_assert(alignof(UMarinerMenuGlobals) == 0x000008, "Wrong alignment on UMarinerMenuGlobals");
static_assert(sizeof(UMarinerMenuGlobals) == 0x0002F0, "Wrong size on UMarinerMenuGlobals");
static_assert(offsetof(UMarinerMenuGlobals, InputOverlay) == 0x000030, "Member 'UMarinerMenuGlobals::InputOverlay' has a wrong offset!");
static_assert(offsetof(UMarinerMenuGlobals, Watermark) == 0x000038, "Member 'UMarinerMenuGlobals::Watermark' has a wrong offset!");
static_assert(offsetof(UMarinerMenuGlobals, LoadTransition) == 0x000040, "Member 'UMarinerMenuGlobals::LoadTransition' has a wrong offset!");
static_assert(offsetof(UMarinerMenuGlobals, MenuStackManagers) == 0x000048, "Member 'UMarinerMenuGlobals::MenuStackManagers' has a wrong offset!");
static_assert(offsetof(UMarinerMenuGlobals, MenuSequences) == 0x000058, "Member 'UMarinerMenuGlobals::MenuSequences' has a wrong offset!");
static_assert(offsetof(UMarinerMenuGlobals, Menus) == 0x000068, "Member 'UMarinerMenuGlobals::Menus' has a wrong offset!");
static_assert(offsetof(UMarinerMenuGlobals, MenuBackground) == 0x000078, "Member 'UMarinerMenuGlobals::MenuBackground' has a wrong offset!");
static_assert(offsetof(UMarinerMenuGlobals, PlayerHeader) == 0x000080, "Member 'UMarinerMenuGlobals::PlayerHeader' has a wrong offset!");
static_assert(offsetof(UMarinerMenuGlobals, MessageBoxManager) == 0x000088, "Member 'UMarinerMenuGlobals::MessageBoxManager' has a wrong offset!");
static_assert(offsetof(UMarinerMenuGlobals, AsyncUIFlowHandlers) == 0x000090, "Member 'UMarinerMenuGlobals::AsyncUIFlowHandlers' has a wrong offset!");
static_assert(offsetof(UMarinerMenuGlobals, WidgetPool) == 0x0000A0, "Member 'UMarinerMenuGlobals::WidgetPool' has a wrong offset!");
static_assert(offsetof(UMarinerMenuGlobals, CultureList) == 0x0000A8, "Member 'UMarinerMenuGlobals::CultureList' has a wrong offset!");
static_assert(offsetof(UMarinerMenuGlobals, CreditsData) == 0x0000B8, "Member 'UMarinerMenuGlobals::CreditsData' has a wrong offset!");
static_assert(offsetof(UMarinerMenuGlobals, DefaultBackPrompt) == 0x0000C0, "Member 'UMarinerMenuGlobals::DefaultBackPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerMenuGlobals, TTSPrompt) == 0x0001D8, "Member 'UMarinerMenuGlobals::TTSPrompt' has a wrong offset!");

// Class Mariner.MarinerMenuSequence
// 0x0270 (0x0730 - 0x04C0)
class UMarinerMenuSequence : public UMarinerMenuStackLayer
{
public:
	uint8                                         Pad_196B[0x8];                                     // 0x04C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UMarinerMenuStackLayer>> MenuSequence;                                      // 0x04C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bAllowSkip;                                        // 0x04D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowSkipAll;                                     // 0x04D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_196C[0x6];                                     // 0x04DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerPromptData                     SkipPrompt;                                        // 0x04E0(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     SkipAllPrompt;                                     // 0x05F8(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_196D[0x18];                                    // 0x0710(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerMenuStackLayer*                 PendingContentLayer;                               // 0x0728(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Advance();
	bool IsStepAllowed(TSubclassOf<class UMarinerMenuStackLayer> Layer);
	void OnContentLayerStateChange(class UMarinerAnimatedWidget* Widget, EWidgetAnimationState NewState);
	bool OnPopulateContentLayer(class UMarinerAnimatedWidget* Widget);
	void OnStepReached(TSubclassOf<class UMarinerMenuStackLayer> Layer);

	const TSubclassOf<class UMarinerMenuStackLayer> GetActiveStep() const;
	struct FMarinerMenuSequenceAssets GetAssets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMenuSequence">();
	}
	static class UMarinerMenuSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMenuSequence>();
	}
};
static_assert(alignof(UMarinerMenuSequence) == 0x000008, "Wrong alignment on UMarinerMenuSequence");
static_assert(sizeof(UMarinerMenuSequence) == 0x000730, "Wrong size on UMarinerMenuSequence");
static_assert(offsetof(UMarinerMenuSequence, MenuSequence) == 0x0004C8, "Member 'UMarinerMenuSequence::MenuSequence' has a wrong offset!");
static_assert(offsetof(UMarinerMenuSequence, bAllowSkip) == 0x0004D8, "Member 'UMarinerMenuSequence::bAllowSkip' has a wrong offset!");
static_assert(offsetof(UMarinerMenuSequence, bAllowSkipAll) == 0x0004D9, "Member 'UMarinerMenuSequence::bAllowSkipAll' has a wrong offset!");
static_assert(offsetof(UMarinerMenuSequence, SkipPrompt) == 0x0004E0, "Member 'UMarinerMenuSequence::SkipPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerMenuSequence, SkipAllPrompt) == 0x0005F8, "Member 'UMarinerMenuSequence::SkipAllPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerMenuSequence, PendingContentLayer) == 0x000728, "Member 'UMarinerMenuSequence::PendingContentLayer' has a wrong offset!");

// Class Mariner.MarinerPrivateMatchMenu
// 0x00A0 (0x0580 - 0x04E0)
class UMarinerPrivateMatchMenu : public UMarinerMenu
{
public:
	uint8                                         Pad_1971[0x8];                                     // 0x04E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerGridPanel*                      Bound_RootGrid;                                    // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPrivateMatchTeamWidget*         Bound_Team1;                                       // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_Separator;                                   // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPrivateMatchTeamWidget*         Bound_Team2;                                       // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerMapSelectButton*                Bound_MapButton;                                   // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerModeSelectButton*               Bound_ModeButton;                                  // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPaneSwitcher*                   Bound_StateSwitcher;                               // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerLayeredButton*                  Bound_StartButton;                                 // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_LoadingPanel;                                // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1972[0x50];                                    // 0x0530(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLeavePrivateMatchConfirm(const struct FKey& KeyPressed);
	void OnStartSelected(class UMarinerLayeredButton* Button);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPrivateMatchMenu">();
	}
	static class UMarinerPrivateMatchMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPrivateMatchMenu>();
	}
};
static_assert(alignof(UMarinerPrivateMatchMenu) == 0x000008, "Wrong alignment on UMarinerPrivateMatchMenu");
static_assert(sizeof(UMarinerPrivateMatchMenu) == 0x000580, "Wrong size on UMarinerPrivateMatchMenu");
static_assert(offsetof(UMarinerPrivateMatchMenu, Bound_RootGrid) == 0x0004E8, "Member 'UMarinerPrivateMatchMenu::Bound_RootGrid' has a wrong offset!");
static_assert(offsetof(UMarinerPrivateMatchMenu, Bound_Team1) == 0x0004F0, "Member 'UMarinerPrivateMatchMenu::Bound_Team1' has a wrong offset!");
static_assert(offsetof(UMarinerPrivateMatchMenu, Bound_Separator) == 0x0004F8, "Member 'UMarinerPrivateMatchMenu::Bound_Separator' has a wrong offset!");
static_assert(offsetof(UMarinerPrivateMatchMenu, Bound_Team2) == 0x000500, "Member 'UMarinerPrivateMatchMenu::Bound_Team2' has a wrong offset!");
static_assert(offsetof(UMarinerPrivateMatchMenu, Bound_MapButton) == 0x000508, "Member 'UMarinerPrivateMatchMenu::Bound_MapButton' has a wrong offset!");
static_assert(offsetof(UMarinerPrivateMatchMenu, Bound_ModeButton) == 0x000510, "Member 'UMarinerPrivateMatchMenu::Bound_ModeButton' has a wrong offset!");
static_assert(offsetof(UMarinerPrivateMatchMenu, Bound_StateSwitcher) == 0x000518, "Member 'UMarinerPrivateMatchMenu::Bound_StateSwitcher' has a wrong offset!");
static_assert(offsetof(UMarinerPrivateMatchMenu, Bound_StartButton) == 0x000520, "Member 'UMarinerPrivateMatchMenu::Bound_StartButton' has a wrong offset!");
static_assert(offsetof(UMarinerPrivateMatchMenu, Bound_LoadingPanel) == 0x000528, "Member 'UMarinerPrivateMatchMenu::Bound_LoadingPanel' has a wrong offset!");

// Class Mariner.MarinerRocketTotemCompanionDataAsset
// 0x0010 (0x0080 - 0x0070)
class UMarinerRocketTotemCompanionDataAsset final : public UMarinerCMSItemWithIcon
{
public:
	class USkeletalMesh*                          CompanionMesh;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UAnimInstance>              CompanionAnimBP;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRocketTotemCompanionDataAsset">();
	}
	static class UMarinerRocketTotemCompanionDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRocketTotemCompanionDataAsset>();
	}
};
static_assert(alignof(UMarinerRocketTotemCompanionDataAsset) == 0x000008, "Wrong alignment on UMarinerRocketTotemCompanionDataAsset");
static_assert(sizeof(UMarinerRocketTotemCompanionDataAsset) == 0x000080, "Wrong size on UMarinerRocketTotemCompanionDataAsset");
static_assert(offsetof(UMarinerRocketTotemCompanionDataAsset, CompanionMesh) == 0x000070, "Member 'UMarinerRocketTotemCompanionDataAsset::CompanionMesh' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemCompanionDataAsset, CompanionAnimBP) == 0x000078, "Member 'UMarinerRocketTotemCompanionDataAsset::CompanionAnimBP' has a wrong offset!");

// Class Mariner.MarinerMenuStackBaseWidget
// 0x0128 (0x0358 - 0x0230)
class UMarinerMenuStackBaseWidget : public UUserWidget
{
public:
	uint8                                         bIsCustomBackPromptEnabled : 1;                    // 0x0230(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1973[0x7];                                     // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerPromptData                     CustomBackPrompt;                                  // 0x0238(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UMarinerMenuStackManager*               Owner;                                             // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UMarinerMenuStackManager* GetStackManager();

	bool GetCustomBackPrompt(struct FMarinerPromptData* OutPrompt) const;
	struct FMarinerMenuStackBaseWidgetSetup GetWidgetSetup() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMenuStackBaseWidget">();
	}
	static class UMarinerMenuStackBaseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMenuStackBaseWidget>();
	}
};
static_assert(alignof(UMarinerMenuStackBaseWidget) == 0x000008, "Wrong alignment on UMarinerMenuStackBaseWidget");
static_assert(sizeof(UMarinerMenuStackBaseWidget) == 0x000358, "Wrong size on UMarinerMenuStackBaseWidget");
static_assert(offsetof(UMarinerMenuStackBaseWidget, CustomBackPrompt) == 0x000238, "Member 'UMarinerMenuStackBaseWidget::CustomBackPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerMenuStackBaseWidget, Owner) == 0x000350, "Member 'UMarinerMenuStackBaseWidget::Owner' has a wrong offset!");

// Class Mariner.MarinerMenuTooltipWidget
// 0x0000 (0x02B0 - 0x02B0)
class UMarinerMenuTooltipWidget : public UMarinerUserWidget
{
public:
	void EnableHeader(bool bEnabled);
	void Populate(const class FText& InDescription);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMenuTooltipWidget">();
	}
	static class UMarinerMenuTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMenuTooltipWidget>();
	}
};
static_assert(alignof(UMarinerMenuTooltipWidget) == 0x000008, "Wrong alignment on UMarinerMenuTooltipWidget");
static_assert(sizeof(UMarinerMenuTooltipWidget) == 0x0002B0, "Wrong size on UMarinerMenuTooltipWidget");

// Class Mariner.MarinerReturnTrailDataAsset
// 0x0040 (0x00B0 - 0x0070)
class UMarinerReturnTrailDataAsset final : public UMarinerCMSItemWithIcon
{
public:
	class UParticleSystem*                        ReturnTrailFX;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UParticleSystem>         ReturnTrail_FrontendVisualizerFX;                  // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ReturnTrailAudio;                                  // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerWeaponMontage*                  CharacterAnimation;                                // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerReturnTrailDataAsset">();
	}
	static class UMarinerReturnTrailDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerReturnTrailDataAsset>();
	}
};
static_assert(alignof(UMarinerReturnTrailDataAsset) == 0x000008, "Wrong alignment on UMarinerReturnTrailDataAsset");
static_assert(sizeof(UMarinerReturnTrailDataAsset) == 0x0000B0, "Wrong size on UMarinerReturnTrailDataAsset");
static_assert(offsetof(UMarinerReturnTrailDataAsset, ReturnTrailFX) == 0x000070, "Member 'UMarinerReturnTrailDataAsset::ReturnTrailFX' has a wrong offset!");
static_assert(offsetof(UMarinerReturnTrailDataAsset, ReturnTrail_FrontendVisualizerFX) == 0x000078, "Member 'UMarinerReturnTrailDataAsset::ReturnTrail_FrontendVisualizerFX' has a wrong offset!");
static_assert(offsetof(UMarinerReturnTrailDataAsset, ReturnTrailAudio) == 0x0000A0, "Member 'UMarinerReturnTrailDataAsset::ReturnTrailAudio' has a wrong offset!");
static_assert(offsetof(UMarinerReturnTrailDataAsset, CharacterAnimation) == 0x0000A8, "Member 'UMarinerReturnTrailDataAsset::CharacterAnimation' has a wrong offset!");

// Class Mariner.MarinerMessageBox
// 0x0038 (0x0490 - 0x0458)
class UMarinerMessageBox : public UMarinerMessageBoxBase
{
public:
	class UTextBlock*                             Bound_Header;                                      // 0x0458(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_Body;                                        // 0x0460(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_Timer;                                       // 0x0468(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_Icon;                                        // 0x0470(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                Bound_LoadingSpinner;                              // 0x0478(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1975[0x10];                                    // 0x0480(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayTimerUpdate();

	const struct FMarinerMessageBoxData GetData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMessageBox">();
	}
	static class UMarinerMessageBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMessageBox>();
	}
};
static_assert(alignof(UMarinerMessageBox) == 0x000008, "Wrong alignment on UMarinerMessageBox");
static_assert(sizeof(UMarinerMessageBox) == 0x000490, "Wrong size on UMarinerMessageBox");
static_assert(offsetof(UMarinerMessageBox, Bound_Header) == 0x000458, "Member 'UMarinerMessageBox::Bound_Header' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBox, Bound_Body) == 0x000460, "Member 'UMarinerMessageBox::Bound_Body' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBox, Bound_Timer) == 0x000468, "Member 'UMarinerMessageBox::Bound_Timer' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBox, Bound_Icon) == 0x000470, "Member 'UMarinerMessageBox::Bound_Icon' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBox, Bound_LoadingSpinner) == 0x000478, "Member 'UMarinerMessageBox::Bound_LoadingSpinner' has a wrong offset!");

// Class Mariner.MarinerSingleAnimationWidget
// 0x0020 (0x0250 - 0x0230)
class UMarinerSingleAnimationWidget : public UUserWidget
{
public:
	class UAkAudioEvent*                          PlayAnimationSFX;                                  // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Bound_Animation;                                   // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1976[0x10];                                    // 0x0240(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlaySingleAnimation(bool bPlayOnce, bool bRestoreState, TDelegate<void(class UMarinerSingleAnimationWidget* Instance)> OnCompletedEvent);

	bool IsSingleAnimationPlaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSingleAnimationWidget">();
	}
	static class UMarinerSingleAnimationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSingleAnimationWidget>();
	}
};
static_assert(alignof(UMarinerSingleAnimationWidget) == 0x000008, "Wrong alignment on UMarinerSingleAnimationWidget");
static_assert(sizeof(UMarinerSingleAnimationWidget) == 0x000250, "Wrong size on UMarinerSingleAnimationWidget");
static_assert(offsetof(UMarinerSingleAnimationWidget, PlayAnimationSFX) == 0x000230, "Member 'UMarinerSingleAnimationWidget::PlayAnimationSFX' has a wrong offset!");
static_assert(offsetof(UMarinerSingleAnimationWidget, Bound_Animation) == 0x000238, "Member 'UMarinerSingleAnimationWidget::Bound_Animation' has a wrong offset!");

// Class Mariner.MarinerMessageBoxPrompts
// 0x0068 (0x0098 - 0x0030)
class UMarinerMessageBoxPrompts : public UDataAsset
{
public:
	bool                                          bAllowAnyKey;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowConfirmPrompt;                                // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowSecondaryPrompt;                              // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowCancelPrompt;                                 // 0x0033(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1978[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerMessageBoxPrompt               ConfirmPrompt;                                     // 0x0038(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxPrompt               SecondaryPrompt;                                   // 0x0058(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxPrompt               CancelPrompt;                                      // 0x0078(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMessageBoxPrompts">();
	}
	static class UMarinerMessageBoxPrompts* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMessageBoxPrompts>();
	}
};
static_assert(alignof(UMarinerMessageBoxPrompts) == 0x000008, "Wrong alignment on UMarinerMessageBoxPrompts");
static_assert(sizeof(UMarinerMessageBoxPrompts) == 0x000098, "Wrong size on UMarinerMessageBoxPrompts");
static_assert(offsetof(UMarinerMessageBoxPrompts, bAllowAnyKey) == 0x000030, "Member 'UMarinerMessageBoxPrompts::bAllowAnyKey' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxPrompts, bShowConfirmPrompt) == 0x000031, "Member 'UMarinerMessageBoxPrompts::bShowConfirmPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxPrompts, bShowSecondaryPrompt) == 0x000032, "Member 'UMarinerMessageBoxPrompts::bShowSecondaryPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxPrompts, bShowCancelPrompt) == 0x000033, "Member 'UMarinerMessageBoxPrompts::bShowCancelPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxPrompts, ConfirmPrompt) == 0x000038, "Member 'UMarinerMessageBoxPrompts::ConfirmPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxPrompts, SecondaryPrompt) == 0x000058, "Member 'UMarinerMessageBoxPrompts::SecondaryPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerMessageBoxPrompts, CancelPrompt) == 0x000078, "Member 'UMarinerMessageBoxPrompts::CancelPrompt' has a wrong offset!");

// Class Mariner.MarinerModeDataAsset
// 0x01D0 (0x0200 - 0x0030)
class UMarinerModeDataAsset final : public UDataAsset
{
public:
	struct FSlateBrush                            Icon;                                              // 0x0030(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            PreviewImage;                                      // 0x00B8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FModeSummaryPanel>              SummaryPanels;                                     // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class FText>                ScoreboardStats;                                   // 0x0150(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class FText>                PostGameStats;                                     // 0x01A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	EMarinerAchievement                           LinkedAchievement;                                 // 0x01F0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerGameMode                              LinkedGameMode;                                    // 0x01F1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1979[0x2];                                     // 0x01F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrivateMatchMaxPartySize;                          // 0x01F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ModeSupportFlags;                                  // 0x01F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_197A[0x4];                                     // 0x01FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetHostCanEditBots() const;
	const struct FSlateBrush GetIcon() const;
	EMarinerGameMode GetLinkedGameMode() const;
	int32 GetModeSupportFlags() const;
	const TMap<class FName, class FText> GetPostGameStats() const;
	const struct FSlateBrush GetPreviewImage() const;
	int32 GetPrivateMatchMaxPartySize() const;
	const TMap<class FName, class FText> GetScoreboardStats() const;
	bool GetSupportsBots() const;
	bool GetSupportsTeams() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerModeDataAsset">();
	}
	static class UMarinerModeDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerModeDataAsset>();
	}
};
static_assert(alignof(UMarinerModeDataAsset) == 0x000008, "Wrong alignment on UMarinerModeDataAsset");
static_assert(sizeof(UMarinerModeDataAsset) == 0x000200, "Wrong size on UMarinerModeDataAsset");
static_assert(offsetof(UMarinerModeDataAsset, Icon) == 0x000030, "Member 'UMarinerModeDataAsset::Icon' has a wrong offset!");
static_assert(offsetof(UMarinerModeDataAsset, PreviewImage) == 0x0000B8, "Member 'UMarinerModeDataAsset::PreviewImage' has a wrong offset!");
static_assert(offsetof(UMarinerModeDataAsset, SummaryPanels) == 0x000140, "Member 'UMarinerModeDataAsset::SummaryPanels' has a wrong offset!");
static_assert(offsetof(UMarinerModeDataAsset, ScoreboardStats) == 0x000150, "Member 'UMarinerModeDataAsset::ScoreboardStats' has a wrong offset!");
static_assert(offsetof(UMarinerModeDataAsset, PostGameStats) == 0x0001A0, "Member 'UMarinerModeDataAsset::PostGameStats' has a wrong offset!");
static_assert(offsetof(UMarinerModeDataAsset, LinkedAchievement) == 0x0001F0, "Member 'UMarinerModeDataAsset::LinkedAchievement' has a wrong offset!");
static_assert(offsetof(UMarinerModeDataAsset, LinkedGameMode) == 0x0001F1, "Member 'UMarinerModeDataAsset::LinkedGameMode' has a wrong offset!");
static_assert(offsetof(UMarinerModeDataAsset, PrivateMatchMaxPartySize) == 0x0001F4, "Member 'UMarinerModeDataAsset::PrivateMatchMaxPartySize' has a wrong offset!");
static_assert(offsetof(UMarinerModeDataAsset, ModeSupportFlags) == 0x0001F8, "Member 'UMarinerModeDataAsset::ModeSupportFlags' has a wrong offset!");

// Class Mariner.MarinerSpringArmComponent
// 0x0070 (0x02F0 - 0x0280)
class UMarinerSpringArmComponent final : public USpringArmComponent
{
public:
	float                                         CameraCollisionZoomInSpeed;                        // 0x0280(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraCollisionZoomOutSpeed;                       // 0x0284(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmLengthBeamProbeSize;                            // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerSpringArmMode                         Mode;                                              // 0x028C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_197B[0x3];                                     // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerSpringArmFreeCameraProperties  FreeCameraProperties;                              // 0x0290(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerSpringArmOrientBehindOwnerProperties OrientBehindOwnerProperties;                       // 0x0298(0x0010)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               OrientationOffset;                                 // 0x02A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_197C[0x3C];                                    // 0x02B4(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyCameraLagPropertiesOverride(const struct FMarinerSpringArmCameraLagProperties& CameraLagProperties);
	void ClearAllCameraLagPropertiesOverrides();
	void ClearTargetArmLengthOverride();
	void RemoveCameraLagPropertiesOverride();
	void ServerUpdateProjectileSpawnLocation_Internal(const struct FVector_NetQuantize& Location);
	void SetLockedSocketTargetLocation(const struct FVector& LockedWorldLocation);
	void SetTargetArmLengthOverride(float NewTargetArmLength);

	struct FVector GetProjectileSpawnLocation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSpringArmComponent">();
	}
	static class UMarinerSpringArmComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSpringArmComponent>();
	}
};
static_assert(alignof(UMarinerSpringArmComponent) == 0x000010, "Wrong alignment on UMarinerSpringArmComponent");
static_assert(sizeof(UMarinerSpringArmComponent) == 0x0002F0, "Wrong size on UMarinerSpringArmComponent");
static_assert(offsetof(UMarinerSpringArmComponent, CameraCollisionZoomInSpeed) == 0x000280, "Member 'UMarinerSpringArmComponent::CameraCollisionZoomInSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerSpringArmComponent, CameraCollisionZoomOutSpeed) == 0x000284, "Member 'UMarinerSpringArmComponent::CameraCollisionZoomOutSpeed' has a wrong offset!");
static_assert(offsetof(UMarinerSpringArmComponent, ArmLengthBeamProbeSize) == 0x000288, "Member 'UMarinerSpringArmComponent::ArmLengthBeamProbeSize' has a wrong offset!");
static_assert(offsetof(UMarinerSpringArmComponent, Mode) == 0x00028C, "Member 'UMarinerSpringArmComponent::Mode' has a wrong offset!");
static_assert(offsetof(UMarinerSpringArmComponent, FreeCameraProperties) == 0x000290, "Member 'UMarinerSpringArmComponent::FreeCameraProperties' has a wrong offset!");
static_assert(offsetof(UMarinerSpringArmComponent, OrientBehindOwnerProperties) == 0x000298, "Member 'UMarinerSpringArmComponent::OrientBehindOwnerProperties' has a wrong offset!");
static_assert(offsetof(UMarinerSpringArmComponent, OrientationOffset) == 0x0002A8, "Member 'UMarinerSpringArmComponent::OrientationOffset' has a wrong offset!");

// Class Mariner.MarinerModeSelectButton
// 0x0028 (0x2FA0 - 0x2F78)
class UMarinerModeSelectButton : public UMarinerLayeredButton
{
public:
	class FText                                   MaxPartySizeTextFmt;                               // 0x2F78(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_197D[0x10];                                    // 0x2F90(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerModeSelectButton">();
	}
	static class UMarinerModeSelectButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerModeSelectButton>();
	}
};
static_assert(alignof(UMarinerModeSelectButton) == 0x000008, "Wrong alignment on UMarinerModeSelectButton");
static_assert(sizeof(UMarinerModeSelectButton) == 0x002FA0, "Wrong size on UMarinerModeSelectButton");
static_assert(offsetof(UMarinerModeSelectButton, MaxPartySizeTextFmt) == 0x002F78, "Member 'UMarinerModeSelectButton::MaxPartySizeTextFmt' has a wrong offset!");

// Class Mariner.MarinerMontageListenerInterface
// 0x0000 (0x0028 - 0x0028)
class IMarinerMontageListenerInterface final : public IInterface
{
public:
	void OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageStarted(class UAnimMontage* Montage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMontageListenerInterface">();
	}
	static class IMarinerMontageListenerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarinerMontageListenerInterface>();
	}
};
static_assert(alignof(IMarinerMontageListenerInterface) == 0x000008, "Wrong alignment on IMarinerMontageListenerInterface");
static_assert(sizeof(IMarinerMontageListenerInterface) == 0x000028, "Wrong size on IMarinerMontageListenerInterface");

// Class Mariner.MarinerSkinnableCueNotify_Actor
// 0x0008 (0x0290 - 0x0288)
class AMarinerSkinnableCueNotify_Actor final : public AGameplayCueNotify_Actor
{
public:
	class UMarinerCueSkinData_Base*               SkinData;                                          // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSkinnableCueNotify_Actor">();
	}
	static class AMarinerSkinnableCueNotify_Actor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerSkinnableCueNotify_Actor>();
	}
};
static_assert(alignof(AMarinerSkinnableCueNotify_Actor) == 0x000008, "Wrong alignment on AMarinerSkinnableCueNotify_Actor");
static_assert(sizeof(AMarinerSkinnableCueNotify_Actor) == 0x000290, "Wrong size on AMarinerSkinnableCueNotify_Actor");
static_assert(offsetof(AMarinerSkinnableCueNotify_Actor, SkinData) == 0x000288, "Member 'AMarinerSkinnableCueNotify_Actor::SkinData' has a wrong offset!");

// Class Mariner.MarinerMoveUpdate_TeleportDefaults
// 0x0008 (0x0040 - 0x0038)
class UMarinerMoveUpdate_TeleportDefaults final : public UMarinerMoveUpdateDefaults
{
public:
	float                                         DefaultMaxSpeedClamp;                              // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultResetJumps;                                // 0x003C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1980[0x3];                                     // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool IsPendingTeleport(class AMarinerCharacter* Character);
	static EMarinerTeleportRequestResponse RequestTeleport(class UMarinerCharacterMovement* OwningMovementComponent, TSubclassOf<class UMarinerMoveUpdate_TeleportDefaults> Defaults, TArray<struct FVector>& TeleportLocations, float OverrideMaxSpeedClamp, bool bOverrideResetJumps, bool bRejectTeleportRequestIfHoldingPriorityItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMoveUpdate_TeleportDefaults">();
	}
	static class UMarinerMoveUpdate_TeleportDefaults* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMoveUpdate_TeleportDefaults>();
	}
};
static_assert(alignof(UMarinerMoveUpdate_TeleportDefaults) == 0x000008, "Wrong alignment on UMarinerMoveUpdate_TeleportDefaults");
static_assert(sizeof(UMarinerMoveUpdate_TeleportDefaults) == 0x000040, "Wrong size on UMarinerMoveUpdate_TeleportDefaults");
static_assert(offsetof(UMarinerMoveUpdate_TeleportDefaults, DefaultMaxSpeedClamp) == 0x000038, "Member 'UMarinerMoveUpdate_TeleportDefaults::DefaultMaxSpeedClamp' has a wrong offset!");
static_assert(offsetof(UMarinerMoveUpdate_TeleportDefaults, bDefaultResetJumps) == 0x00003C, "Member 'UMarinerMoveUpdate_TeleportDefaults::bDefaultResetJumps' has a wrong offset!");

// Class Mariner.MarinerMoveUpdate_SwapActiveMeshDefaults
// 0x0010 (0x0048 - 0x0038)
class UMarinerMoveUpdate_SwapActiveMeshDefaults final : public UMarinerMoveUpdateDefaults
{
public:
	EMarinerChangeMeshEnum                        DefaultMeshTypeToSwap;                             // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1983[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultDelayBetweenSwap;                           // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultForcePerspective;                          // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultIsRevert;                                  // 0x0041(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1984[0x6];                                     // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void ApplyActiveMeshSwap(class UMarinerCharacterMovement* OwningMovementComponent, TSubclassOf<class UMarinerMoveUpdate_SwapActiveMeshDefaults> Defaults, class UMeshComponent* MeshToSwapTo, EMarinerChangeMeshEnum OverrideMeshTypeToSwap, float OverrideDelayBetweenSwap, bool bOverrideForcePerspective);
	static void RevertActiveMeshSwap(class UMarinerCharacterMovement* OwningMovementComponent, TSubclassOf<class UMarinerMoveUpdate_SwapActiveMeshDefaults> Defaults, class UMeshComponent* MeshToSwapTo, EMarinerChangeMeshEnum OverrideMeshTypeToSwap, float OverrideDelayBetweenSwap, bool bOverrideForcePerspective);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMoveUpdate_SwapActiveMeshDefaults">();
	}
	static class UMarinerMoveUpdate_SwapActiveMeshDefaults* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMoveUpdate_SwapActiveMeshDefaults>();
	}
};
static_assert(alignof(UMarinerMoveUpdate_SwapActiveMeshDefaults) == 0x000008, "Wrong alignment on UMarinerMoveUpdate_SwapActiveMeshDefaults");
static_assert(sizeof(UMarinerMoveUpdate_SwapActiveMeshDefaults) == 0x000048, "Wrong size on UMarinerMoveUpdate_SwapActiveMeshDefaults");
static_assert(offsetof(UMarinerMoveUpdate_SwapActiveMeshDefaults, DefaultMeshTypeToSwap) == 0x000038, "Member 'UMarinerMoveUpdate_SwapActiveMeshDefaults::DefaultMeshTypeToSwap' has a wrong offset!");
static_assert(offsetof(UMarinerMoveUpdate_SwapActiveMeshDefaults, DefaultDelayBetweenSwap) == 0x00003C, "Member 'UMarinerMoveUpdate_SwapActiveMeshDefaults::DefaultDelayBetweenSwap' has a wrong offset!");
static_assert(offsetof(UMarinerMoveUpdate_SwapActiveMeshDefaults, bDefaultForcePerspective) == 0x000040, "Member 'UMarinerMoveUpdate_SwapActiveMeshDefaults::bDefaultForcePerspective' has a wrong offset!");
static_assert(offsetof(UMarinerMoveUpdate_SwapActiveMeshDefaults, bDefaultIsRevert) == 0x000041, "Member 'UMarinerMoveUpdate_SwapActiveMeshDefaults::bDefaultIsRevert' has a wrong offset!");

// Class Mariner.MarinerSubtitleManager
// 0x0040 (0x0270 - 0x0230)
class UMarinerSubtitleManager : public UUserWidget
{
public:
	float                                         SubtitleDuration;                                  // 0x0230(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1989[0x4];                                     // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           Bound_SubtitlePanel;                               // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_SubtitleText;                                // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_198A[0x28];                                    // 0x0248(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAudioEvent(EAkCallbackType In_eType, class UAkCallbackInfo* In_pCallbackInfo);
	void OnUserSettingsChanged();
	void OnVoiceChatTextMessageReceived(const class FString& UserId, const class FString& Message);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSubtitleManager">();
	}
	static class UMarinerSubtitleManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSubtitleManager>();
	}
};
static_assert(alignof(UMarinerSubtitleManager) == 0x000008, "Wrong alignment on UMarinerSubtitleManager");
static_assert(sizeof(UMarinerSubtitleManager) == 0x000270, "Wrong size on UMarinerSubtitleManager");
static_assert(offsetof(UMarinerSubtitleManager, SubtitleDuration) == 0x000230, "Member 'UMarinerSubtitleManager::SubtitleDuration' has a wrong offset!");
static_assert(offsetof(UMarinerSubtitleManager, Bound_SubtitlePanel) == 0x000238, "Member 'UMarinerSubtitleManager::Bound_SubtitlePanel' has a wrong offset!");
static_assert(offsetof(UMarinerSubtitleManager, Bound_SubtitleText) == 0x000240, "Member 'UMarinerSubtitleManager::Bound_SubtitleText' has a wrong offset!");

// Class Mariner.MarinerMusicGlobals
// 0x0008 (0x0038 - 0x0030)
class UMarinerMusicGlobals final : public UDataAsset
{
public:
	TSubclassOf<class UMarinerMusicManager>       MusicManagerType;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMusicGlobals">();
	}
	static class UMarinerMusicGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMusicGlobals>();
	}
};
static_assert(alignof(UMarinerMusicGlobals) == 0x000008, "Wrong alignment on UMarinerMusicGlobals");
static_assert(sizeof(UMarinerMusicGlobals) == 0x000038, "Wrong size on UMarinerMusicGlobals");
static_assert(offsetof(UMarinerMusicGlobals, MusicManagerType) == 0x000030, "Member 'UMarinerMusicGlobals::MusicManagerType' has a wrong offset!");

// Class Mariner.MarinerMutePlayerCheckBox
// 0x0178 (0x0428 - 0x02B0)
class UMarinerMutePlayerCheckBox : public UMarinerUserWidget
{
public:
	struct FSlateBrush                            IconMicOn;                                         // 0x02B0(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            IconMicOff;                                        // 0x0338(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UImage*                                 Bound_MicIcon;                                     // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Bound_Highlight;                                   // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_PlayerNameText;                              // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_MuteStatusTextBlock;                         // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerCheckBox*                       Bound_MuteCheckBox;                                // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerButton*                         Bound_Button;                                      // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_198C[0x38];                                    // 0x03F0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnButtonClicked();
	void OnButtonHovered();
	void OnButtonUnhovered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMutePlayerCheckBox">();
	}
	static class UMarinerMutePlayerCheckBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMutePlayerCheckBox>();
	}
};
static_assert(alignof(UMarinerMutePlayerCheckBox) == 0x000008, "Wrong alignment on UMarinerMutePlayerCheckBox");
static_assert(sizeof(UMarinerMutePlayerCheckBox) == 0x000428, "Wrong size on UMarinerMutePlayerCheckBox");
static_assert(offsetof(UMarinerMutePlayerCheckBox, IconMicOn) == 0x0002B0, "Member 'UMarinerMutePlayerCheckBox::IconMicOn' has a wrong offset!");
static_assert(offsetof(UMarinerMutePlayerCheckBox, IconMicOff) == 0x000338, "Member 'UMarinerMutePlayerCheckBox::IconMicOff' has a wrong offset!");
static_assert(offsetof(UMarinerMutePlayerCheckBox, Bound_MicIcon) == 0x0003C0, "Member 'UMarinerMutePlayerCheckBox::Bound_MicIcon' has a wrong offset!");
static_assert(offsetof(UMarinerMutePlayerCheckBox, Bound_Highlight) == 0x0003C8, "Member 'UMarinerMutePlayerCheckBox::Bound_Highlight' has a wrong offset!");
static_assert(offsetof(UMarinerMutePlayerCheckBox, Bound_PlayerNameText) == 0x0003D0, "Member 'UMarinerMutePlayerCheckBox::Bound_PlayerNameText' has a wrong offset!");
static_assert(offsetof(UMarinerMutePlayerCheckBox, Bound_MuteStatusTextBlock) == 0x0003D8, "Member 'UMarinerMutePlayerCheckBox::Bound_MuteStatusTextBlock' has a wrong offset!");
static_assert(offsetof(UMarinerMutePlayerCheckBox, Bound_MuteCheckBox) == 0x0003E0, "Member 'UMarinerMutePlayerCheckBox::Bound_MuteCheckBox' has a wrong offset!");
static_assert(offsetof(UMarinerMutePlayerCheckBox, Bound_Button) == 0x0003E8, "Member 'UMarinerMutePlayerCheckBox::Bound_Button' has a wrong offset!");

// Class Mariner.MarinerTrialsFloatingText
// 0x0030 (0x0248 - 0x0218)
class AMarinerTrialsFloatingText final : public AActor
{
public:
	class UWidgetComponent*                       TextWidgetComponent;                               // 0x0218(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   TextContent;                                       // 0x0220(0x0018)(Edit, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	float                                         OscillationAmplitude;                              // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OscillationSpeed;                                  // 0x023C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UUserWidget>                TextWidgetClass;                                   // 0x0240(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTrialsFloatingText">();
	}
	static class AMarinerTrialsFloatingText* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerTrialsFloatingText>();
	}
};
static_assert(alignof(AMarinerTrialsFloatingText) == 0x000008, "Wrong alignment on AMarinerTrialsFloatingText");
static_assert(sizeof(AMarinerTrialsFloatingText) == 0x000248, "Wrong size on AMarinerTrialsFloatingText");
static_assert(offsetof(AMarinerTrialsFloatingText, TextWidgetComponent) == 0x000218, "Member 'AMarinerTrialsFloatingText::TextWidgetComponent' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingText, TextContent) == 0x000220, "Member 'AMarinerTrialsFloatingText::TextContent' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingText, OscillationAmplitude) == 0x000238, "Member 'AMarinerTrialsFloatingText::OscillationAmplitude' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingText, OscillationSpeed) == 0x00023C, "Member 'AMarinerTrialsFloatingText::OscillationSpeed' has a wrong offset!");
static_assert(offsetof(AMarinerTrialsFloatingText, TextWidgetClass) == 0x000240, "Member 'AMarinerTrialsFloatingText::TextWidgetClass' has a wrong offset!");

// Class Mariner.MarinerNativePurchaseMessageBox
// 0x0000 (0x0458 - 0x0458)
class UMarinerNativePurchaseMessageBox : public UMarinerMessageBoxBase
{
public:
	const struct FMarinerMessageBoxNativePurchaseData GetData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerNativePurchaseMessageBox">();
	}
	static class UMarinerNativePurchaseMessageBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerNativePurchaseMessageBox>();
	}
};
static_assert(alignof(UMarinerNativePurchaseMessageBox) == 0x000008, "Wrong alignment on UMarinerNativePurchaseMessageBox");
static_assert(sizeof(UMarinerNativePurchaseMessageBox) == 0x000458, "Wrong size on UMarinerNativePurchaseMessageBox");

// Class Mariner.MarinerNetworkHealthStatusWidget
// 0x0018 (0x0478 - 0x0460)
class UMarinerNetworkHealthStatusWidget final : public UMarinerHUDWidget
{
public:
	class UImage*                                 Bound_TimeoutWidget;                               // 0x0460(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_198D[0x10];                                    // 0x0468(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerNetworkHealthStatusWidget">();
	}
	static class UMarinerNetworkHealthStatusWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerNetworkHealthStatusWidget>();
	}
};
static_assert(alignof(UMarinerNetworkHealthStatusWidget) == 0x000008, "Wrong alignment on UMarinerNetworkHealthStatusWidget");
static_assert(sizeof(UMarinerNetworkHealthStatusWidget) == 0x000478, "Wrong size on UMarinerNetworkHealthStatusWidget");
static_assert(offsetof(UMarinerNetworkHealthStatusWidget, Bound_TimeoutWidget) == 0x000460, "Member 'UMarinerNetworkHealthStatusWidget::Bound_TimeoutWidget' has a wrong offset!");

// Class Mariner.MarinerTask_DeflectProjectile
// 0x0108 (0x0188 - 0x0080)
class UMarinerTask_DeflectProjectile final : public UAbilityTask
{
public:
	UMulticastInlineDelegateProperty_             OnProjectileDeflected;                             // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnProjectileSpawnFailed;                           // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnItemDeflected;                                   // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_198E[0xD8];                                    // 0x00B0(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_DeflectProjectile* DeflectProjectile(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, class UPrimitiveComponent* ProjectileDetectionComponent, const struct FHitResult& SweepResult, class AActor* OverlappedActor, const TArray<TSubclassOf<class AMarinerProjectile>>& ProjectileIgnoreTypeList, const TArray<TSubclassOf<class AMarinerItem>>& ItemIgnoreTypeList, bool bUseAimAssist, float MaxDeflectAngle, float AimAssistConeAngle, float MoveSpawnLocationTowardsCenterRatio, float SpawnBufferDistance, float AngleVersusDistanceAimAssistRatio, float AimAssistScoreAngleMax, float AimAssistScoreDistanceMax);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_DeflectProjectile">();
	}
	static class UMarinerTask_DeflectProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_DeflectProjectile>();
	}
};
static_assert(alignof(UMarinerTask_DeflectProjectile) == 0x000008, "Wrong alignment on UMarinerTask_DeflectProjectile");
static_assert(sizeof(UMarinerTask_DeflectProjectile) == 0x000188, "Wrong size on UMarinerTask_DeflectProjectile");
static_assert(offsetof(UMarinerTask_DeflectProjectile, OnProjectileDeflected) == 0x000080, "Member 'UMarinerTask_DeflectProjectile::OnProjectileDeflected' has a wrong offset!");
static_assert(offsetof(UMarinerTask_DeflectProjectile, OnProjectileSpawnFailed) == 0x000090, "Member 'UMarinerTask_DeflectProjectile::OnProjectileSpawnFailed' has a wrong offset!");
static_assert(offsetof(UMarinerTask_DeflectProjectile, OnItemDeflected) == 0x0000A0, "Member 'UMarinerTask_DeflectProjectile::OnItemDeflected' has a wrong offset!");

// Class Mariner.MarinerNewsGlobals
// 0x00A0 (0x00D0 - 0x0030)
class UMarinerNewsGlobals final : public UDataAsset
{
public:
	TMap<class FName, TSoftObjectPtr<class UTexture2D>> ImageTextureMappings;                              // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_1990[0x50];                                    // 0x0080(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool RequestImage(const class FName& ImageId, TDelegate<void(class FName& ImageId, class UTexture2D* Texture)> OnLoadedCallback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerNewsGlobals">();
	}
	static class UMarinerNewsGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerNewsGlobals>();
	}
};
static_assert(alignof(UMarinerNewsGlobals) == 0x000008, "Wrong alignment on UMarinerNewsGlobals");
static_assert(sizeof(UMarinerNewsGlobals) == 0x0000D0, "Wrong size on UMarinerNewsGlobals");
static_assert(offsetof(UMarinerNewsGlobals, ImageTextureMappings) == 0x000030, "Member 'UMarinerNewsGlobals::ImageTextureMappings' has a wrong offset!");

// Class Mariner.MarinerOfferButton
// 0x0188 (0x31E0 - 0x3058)
class UMarinerOfferButton : public UMarinerItemLoaderButtonBase
{
public:
	class UTextBlock*                             Bound_OwnedText;                                   // 0x3058(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_HardCurrencyPanel;                           // 0x3060(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_HardCurrencyText;                            // 0x3068(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_SoftCurrencyPanel;                           // 0x3070(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_SoftCurrencyText;                            // 0x3078(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_Icon;                                        // 0x3080(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_TotemImage;                                  // 0x3088(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_RarityText;                                  // 0x3090(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_RarityImage;                                 // 0x3098(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_RaritySymbol;                                // 0x30A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_EmotePanel;                                  // 0x30A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_EmoteCharacter;                              // 0x30B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_EmoteCategory;                               // 0x30B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            Bound_LoadingSpinner;                              // 0x30C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_OfferTypeGroup;                              // 0x30C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_OfferTypeText;                               // 0x30D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_BlastPassGroup;                              // 0x30D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_BlastPassTierText;                           // 0x30E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerButtonTimerWidget*              Bound_TimerWidget;                                 // 0x30E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_BannerGroup;                                 // 0x30F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_BannerText;                                  // 0x30F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_BannerBG;                                    // 0x3100(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1992[0xD8];                                    // 0x3108(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEmoteCharacterPortraitLoaded(const struct FSlateBrush& Brush);
	void OnInventoryChanged();
	void SetOffer(const struct FMangoPurchaseOffer& InOffer);

	const struct FMangoPurchaseOffer GetOffer() const;
	bool IsOfferOwned() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerOfferButton">();
	}
	static class UMarinerOfferButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerOfferButton>();
	}
};
static_assert(alignof(UMarinerOfferButton) == 0x000008, "Wrong alignment on UMarinerOfferButton");
static_assert(sizeof(UMarinerOfferButton) == 0x0031E0, "Wrong size on UMarinerOfferButton");
static_assert(offsetof(UMarinerOfferButton, Bound_OwnedText) == 0x003058, "Member 'UMarinerOfferButton::Bound_OwnedText' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_HardCurrencyPanel) == 0x003060, "Member 'UMarinerOfferButton::Bound_HardCurrencyPanel' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_HardCurrencyText) == 0x003068, "Member 'UMarinerOfferButton::Bound_HardCurrencyText' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_SoftCurrencyPanel) == 0x003070, "Member 'UMarinerOfferButton::Bound_SoftCurrencyPanel' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_SoftCurrencyText) == 0x003078, "Member 'UMarinerOfferButton::Bound_SoftCurrencyText' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_Icon) == 0x003080, "Member 'UMarinerOfferButton::Bound_Icon' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_TotemImage) == 0x003088, "Member 'UMarinerOfferButton::Bound_TotemImage' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_RarityText) == 0x003090, "Member 'UMarinerOfferButton::Bound_RarityText' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_RarityImage) == 0x003098, "Member 'UMarinerOfferButton::Bound_RarityImage' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_RaritySymbol) == 0x0030A0, "Member 'UMarinerOfferButton::Bound_RaritySymbol' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_EmotePanel) == 0x0030A8, "Member 'UMarinerOfferButton::Bound_EmotePanel' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_EmoteCharacter) == 0x0030B0, "Member 'UMarinerOfferButton::Bound_EmoteCharacter' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_EmoteCategory) == 0x0030B8, "Member 'UMarinerOfferButton::Bound_EmoteCategory' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_LoadingSpinner) == 0x0030C0, "Member 'UMarinerOfferButton::Bound_LoadingSpinner' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_OfferTypeGroup) == 0x0030C8, "Member 'UMarinerOfferButton::Bound_OfferTypeGroup' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_OfferTypeText) == 0x0030D0, "Member 'UMarinerOfferButton::Bound_OfferTypeText' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_BlastPassGroup) == 0x0030D8, "Member 'UMarinerOfferButton::Bound_BlastPassGroup' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_BlastPassTierText) == 0x0030E0, "Member 'UMarinerOfferButton::Bound_BlastPassTierText' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_TimerWidget) == 0x0030E8, "Member 'UMarinerOfferButton::Bound_TimerWidget' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_BannerGroup) == 0x0030F0, "Member 'UMarinerOfferButton::Bound_BannerGroup' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_BannerText) == 0x0030F8, "Member 'UMarinerOfferButton::Bound_BannerText' has a wrong offset!");
static_assert(offsetof(UMarinerOfferButton, Bound_BannerBG) == 0x003100, "Member 'UMarinerOfferButton::Bound_BannerBG' has a wrong offset!");

// Class Mariner.MarinerTrustedBotLauncherInterface
// 0x0000 (0x0028 - 0x0028)
class IMarinerTrustedBotLauncherInterface final : public IInterface
{
public:
	float PrepareBotForLaunch(class AMarinerCharacter* BotToLaunch);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTrustedBotLauncherInterface">();
	}
	static class IMarinerTrustedBotLauncherInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarinerTrustedBotLauncherInterface>();
	}
};
static_assert(alignof(IMarinerTrustedBotLauncherInterface) == 0x000008, "Wrong alignment on IMarinerTrustedBotLauncherInterface");
static_assert(sizeof(IMarinerTrustedBotLauncherInterface) == 0x000028, "Wrong size on IMarinerTrustedBotLauncherInterface");

// Class Mariner.MarinerOptionListMessageBox
// 0x0018 (0x0470 - 0x0458)
class UMarinerOptionListMessageBox : public UMarinerMessageBoxBase
{
public:
	TSubclassOf<class UMarinerSettingButton>      ButtonType;                                        // 0x0458(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_Header;                                      // 0x0460(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerGridPanel*                      Bound_ButtonPanel;                                 // 0x0468(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ButtonCallback(class UMarinerSettingBase* Instance);

	const struct FMarinerMessageBoxOptionListData GetData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerOptionListMessageBox">();
	}
	static class UMarinerOptionListMessageBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerOptionListMessageBox>();
	}
};
static_assert(alignof(UMarinerOptionListMessageBox) == 0x000008, "Wrong alignment on UMarinerOptionListMessageBox");
static_assert(sizeof(UMarinerOptionListMessageBox) == 0x000470, "Wrong size on UMarinerOptionListMessageBox");
static_assert(offsetof(UMarinerOptionListMessageBox, ButtonType) == 0x000458, "Member 'UMarinerOptionListMessageBox::ButtonType' has a wrong offset!");
static_assert(offsetof(UMarinerOptionListMessageBox, Bound_Header) == 0x000460, "Member 'UMarinerOptionListMessageBox::Bound_Header' has a wrong offset!");
static_assert(offsetof(UMarinerOptionListMessageBox, Bound_ButtonPanel) == 0x000468, "Member 'UMarinerOptionListMessageBox::Bound_ButtonPanel' has a wrong offset!");

// Class Mariner.MarinerOrderDetailsMessageBox
// 0x0000 (0x0458 - 0x0458)
class UMarinerOrderDetailsMessageBox : public UMarinerMessageBoxBase
{
public:
	const struct FMarinerMessageBoxOrderDetailsData GetData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerOrderDetailsMessageBox">();
	}
	static class UMarinerOrderDetailsMessageBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerOrderDetailsMessageBox>();
	}
};
static_assert(alignof(UMarinerOrderDetailsMessageBox) == 0x000008, "Wrong alignment on UMarinerOrderDetailsMessageBox");
static_assert(sizeof(UMarinerOrderDetailsMessageBox) == 0x000458, "Wrong size on UMarinerOrderDetailsMessageBox");

// Class Mariner.MarinerServerBrowser
// 0x0030 (0x02E0 - 0x02B0)
class UMarinerServerBrowser : public UMarinerUserWidget
{
public:
	TSubclassOf<class UMarinerServerWidget>       ServerWidgetClass;                                 // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScrollBox*                             SavedServerListBox;                                // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             SavedNoServersFoundTextBlock;                      // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UThrobber*                              SavedRefreshThrobber;                              // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             BP_OnFindSessionsComplete;                         // 0x02D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)

public:
	void RefreshServers();

	int32 GetNumServers() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerServerBrowser">();
	}
	static class UMarinerServerBrowser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerServerBrowser>();
	}
};
static_assert(alignof(UMarinerServerBrowser) == 0x000008, "Wrong alignment on UMarinerServerBrowser");
static_assert(sizeof(UMarinerServerBrowser) == 0x0002E0, "Wrong size on UMarinerServerBrowser");
static_assert(offsetof(UMarinerServerBrowser, ServerWidgetClass) == 0x0002B0, "Member 'UMarinerServerBrowser::ServerWidgetClass' has a wrong offset!");
static_assert(offsetof(UMarinerServerBrowser, SavedServerListBox) == 0x0002B8, "Member 'UMarinerServerBrowser::SavedServerListBox' has a wrong offset!");
static_assert(offsetof(UMarinerServerBrowser, SavedNoServersFoundTextBlock) == 0x0002C0, "Member 'UMarinerServerBrowser::SavedNoServersFoundTextBlock' has a wrong offset!");
static_assert(offsetof(UMarinerServerBrowser, SavedRefreshThrobber) == 0x0002C8, "Member 'UMarinerServerBrowser::SavedRefreshThrobber' has a wrong offset!");
static_assert(offsetof(UMarinerServerBrowser, BP_OnFindSessionsComplete) == 0x0002D0, "Member 'UMarinerServerBrowser::BP_OnFindSessionsComplete' has a wrong offset!");

// Class Mariner.MarinerOverlay
// 0x0020 (0x0150 - 0x0130)
class UMarinerOverlay final : public UOverlay
{
public:
	uint8                                         Pad_1994[0x20];                                    // 0x0130(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerOverlay">();
	}
	static class UMarinerOverlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerOverlay>();
	}
};
static_assert(alignof(UMarinerOverlay) == 0x000008, "Wrong alignment on UMarinerOverlay");
static_assert(sizeof(UMarinerOverlay) == 0x000150, "Wrong size on UMarinerOverlay");

// Class Mariner.MarinerPanelWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class IMarinerPanelWidgetInterface final : public IMarinerInputInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPanelWidgetInterface">();
	}
	static class IMarinerPanelWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarinerPanelWidgetInterface>();
	}
};
static_assert(alignof(IMarinerPanelWidgetInterface) == 0x000008, "Wrong alignment on IMarinerPanelWidgetInterface");
static_assert(sizeof(IMarinerPanelWidgetInterface) == 0x000028, "Wrong size on IMarinerPanelWidgetInterface");

// Class Mariner.MarinerStickyProjectile
// 0x0000 (0x08B0 - 0x08B0)
class AMarinerStickyProjectile final : public AMarinerProjectile
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerStickyProjectile">();
	}
	static class AMarinerStickyProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerStickyProjectile>();
	}
};
static_assert(alignof(AMarinerStickyProjectile) == 0x000010, "Wrong alignment on AMarinerStickyProjectile");
static_assert(sizeof(AMarinerStickyProjectile) == 0x0008B0, "Wrong size on AMarinerStickyProjectile");

// Class Mariner.MarinerPaneSwitcher
// 0x0068 (0x01A0 - 0x0138)
class UMarinerPaneSwitcher final : public UWidgetSwitcher
{
public:
	uint8                                         Pad_1995[0x20];                                    // 0x0138(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          OnChangedAudioEvent;                               // 0x0158(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       IndexForwardAnimationOut;                          // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       IndexForwardAnimationIn;                           // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       IndexBackwardAnimationOut;                         // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       IndexBackwardAnimationIn;                          // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       OnScreenAnimationIn;                               // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       OnScreenAnimationOut;                              // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1996[0x10];                                    // 0x0190(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AssignOwnerAndAnimations(class UUserWidget* AnimationOwner, class UWidgetAnimation* EnterScreenAnim, class UWidgetAnimation* LeaveScreenAnim, class UWidgetAnimation* ForwardAnimationIn, class UWidgetAnimation* ForwardAnimationOut, class UWidgetAnimation* BackwardAnimationIn, class UWidgetAnimation* BackwardAnimationOut);
	void Event_AnimationCompleted(class UWidgetAnimation* AnimationJustCompleted);

	bool GetIsAnimating() const;
	bool GetIsOnScreen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPaneSwitcher">();
	}
	static class UMarinerPaneSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPaneSwitcher>();
	}
};
static_assert(alignof(UMarinerPaneSwitcher) == 0x000008, "Wrong alignment on UMarinerPaneSwitcher");
static_assert(sizeof(UMarinerPaneSwitcher) == 0x0001A0, "Wrong size on UMarinerPaneSwitcher");
static_assert(offsetof(UMarinerPaneSwitcher, OnChangedAudioEvent) == 0x000158, "Member 'UMarinerPaneSwitcher::OnChangedAudioEvent' has a wrong offset!");
static_assert(offsetof(UMarinerPaneSwitcher, IndexForwardAnimationOut) == 0x000160, "Member 'UMarinerPaneSwitcher::IndexForwardAnimationOut' has a wrong offset!");
static_assert(offsetof(UMarinerPaneSwitcher, IndexForwardAnimationIn) == 0x000168, "Member 'UMarinerPaneSwitcher::IndexForwardAnimationIn' has a wrong offset!");
static_assert(offsetof(UMarinerPaneSwitcher, IndexBackwardAnimationOut) == 0x000170, "Member 'UMarinerPaneSwitcher::IndexBackwardAnimationOut' has a wrong offset!");
static_assert(offsetof(UMarinerPaneSwitcher, IndexBackwardAnimationIn) == 0x000178, "Member 'UMarinerPaneSwitcher::IndexBackwardAnimationIn' has a wrong offset!");
static_assert(offsetof(UMarinerPaneSwitcher, OnScreenAnimationIn) == 0x000180, "Member 'UMarinerPaneSwitcher::OnScreenAnimationIn' has a wrong offset!");
static_assert(offsetof(UMarinerPaneSwitcher, OnScreenAnimationOut) == 0x000188, "Member 'UMarinerPaneSwitcher::OnScreenAnimationOut' has a wrong offset!");

// Class Mariner.MarinerParticlePoolEntry
// 0x0018 (0x0040 - 0x0028)
class UMarinerParticlePoolEntry final : public UObject
{
public:
	class UParticleSystem*                        ParticleTemplate;                                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActive;                                         // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1997[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastActivatedTime;                                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*               ParticleComponent;                                 // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnParticleDone(class UParticleSystemComponent* Particles);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerParticlePoolEntry">();
	}
	static class UMarinerParticlePoolEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerParticlePoolEntry>();
	}
};
static_assert(alignof(UMarinerParticlePoolEntry) == 0x000008, "Wrong alignment on UMarinerParticlePoolEntry");
static_assert(sizeof(UMarinerParticlePoolEntry) == 0x000040, "Wrong size on UMarinerParticlePoolEntry");
static_assert(offsetof(UMarinerParticlePoolEntry, ParticleTemplate) == 0x000028, "Member 'UMarinerParticlePoolEntry::ParticleTemplate' has a wrong offset!");
static_assert(offsetof(UMarinerParticlePoolEntry, bIsActive) == 0x000030, "Member 'UMarinerParticlePoolEntry::bIsActive' has a wrong offset!");
static_assert(offsetof(UMarinerParticlePoolEntry, LastActivatedTime) == 0x000034, "Member 'UMarinerParticlePoolEntry::LastActivatedTime' has a wrong offset!");
static_assert(offsetof(UMarinerParticlePoolEntry, ParticleComponent) == 0x000038, "Member 'UMarinerParticlePoolEntry::ParticleComponent' has a wrong offset!");

// Class Mariner.MarinerMousePrompt
// 0x0038 (0x0410 - 0x03D8)
class UMarinerMousePrompt : public UMarinerBasePrompt
{
public:
	struct FMarinerLinearColorStates              BackgroundColors;                                  // 0x03D8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1998[0x8];                                     // 0x0408(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnButtonClicked();
	void OnButtonHovered();
	void OnButtonPressed();
	void OnButtonReleased();
	void OnButtonUnhovered();

	struct FMarinerMousePromptAssets GetPromptAssets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerMousePrompt">();
	}
	static class UMarinerMousePrompt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerMousePrompt>();
	}
};
static_assert(alignof(UMarinerMousePrompt) == 0x000008, "Wrong alignment on UMarinerMousePrompt");
static_assert(sizeof(UMarinerMousePrompt) == 0x000410, "Wrong size on UMarinerMousePrompt");
static_assert(offsetof(UMarinerMousePrompt, BackgroundColors) == 0x0003D8, "Member 'UMarinerMousePrompt::BackgroundColors' has a wrong offset!");

// Class Mariner.MarinerParticleComponentPool
// 0x0020 (0x0048 - 0x0028)
class UMarinerParticleComponentPool final : public UObject
{
public:
	TArray<class UMarinerParticlePoolEntry*>      PoolEntries;                                       // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         MaxInstances;                                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PreloadedInstances;                                // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        ParticleTemplate;                                  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void InitializePool(class UParticleSystem* EmitterTemplate, const int32 MaxCount, const int32 PreloadCount);
	void SpawnEmitter(const struct FVector& Position, const struct FRotator& Rotation, const bool bAllowForceReset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerParticleComponentPool">();
	}
	static class UMarinerParticleComponentPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerParticleComponentPool>();
	}
};
static_assert(alignof(UMarinerParticleComponentPool) == 0x000008, "Wrong alignment on UMarinerParticleComponentPool");
static_assert(sizeof(UMarinerParticleComponentPool) == 0x000048, "Wrong size on UMarinerParticleComponentPool");
static_assert(offsetof(UMarinerParticleComponentPool, PoolEntries) == 0x000028, "Member 'UMarinerParticleComponentPool::PoolEntries' has a wrong offset!");
static_assert(offsetof(UMarinerParticleComponentPool, MaxInstances) == 0x000038, "Member 'UMarinerParticleComponentPool::MaxInstances' has a wrong offset!");
static_assert(offsetof(UMarinerParticleComponentPool, PreloadedInstances) == 0x00003C, "Member 'UMarinerParticleComponentPool::PreloadedInstances' has a wrong offset!");
static_assert(offsetof(UMarinerParticleComponentPool, ParticleTemplate) == 0x000040, "Member 'UMarinerParticleComponentPool::ParticleTemplate' has a wrong offset!");

// Class Mariner.MarinerPartyWidget
// 0x01B0 (0x0460 - 0x02B0)
class UMarinerPartyWidget : public UMarinerUserWidget
{
public:
	class UMarinerGroupHeaderWidget*              Bound_PartyGroupHeader;                            // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerLayeredButton*                  Bound_LeavePartyButton;                            // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerSocialWidget>       FriendWidgetSubclass;                              // 0x02C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerVerticalBox*                    Bound_RootPanel;                                   // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerVerticalBox*                    Bound_ContentVerticalBox;                          // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 LeavePartyMessageBox;                              // 0x02D8(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_199A[0x18];                                    // 0x0448(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLeavePartyButtonClicked(class UMarinerLayeredButton* ButtonInstance);
	void OnLeavePartyConfirmed(const struct FKey& KeyPressed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPartyWidget">();
	}
	static class UMarinerPartyWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPartyWidget>();
	}
};
static_assert(alignof(UMarinerPartyWidget) == 0x000008, "Wrong alignment on UMarinerPartyWidget");
static_assert(sizeof(UMarinerPartyWidget) == 0x000460, "Wrong size on UMarinerPartyWidget");
static_assert(offsetof(UMarinerPartyWidget, Bound_PartyGroupHeader) == 0x0002B0, "Member 'UMarinerPartyWidget::Bound_PartyGroupHeader' has a wrong offset!");
static_assert(offsetof(UMarinerPartyWidget, Bound_LeavePartyButton) == 0x0002B8, "Member 'UMarinerPartyWidget::Bound_LeavePartyButton' has a wrong offset!");
static_assert(offsetof(UMarinerPartyWidget, FriendWidgetSubclass) == 0x0002C0, "Member 'UMarinerPartyWidget::FriendWidgetSubclass' has a wrong offset!");
static_assert(offsetof(UMarinerPartyWidget, Bound_RootPanel) == 0x0002C8, "Member 'UMarinerPartyWidget::Bound_RootPanel' has a wrong offset!");
static_assert(offsetof(UMarinerPartyWidget, Bound_ContentVerticalBox) == 0x0002D0, "Member 'UMarinerPartyWidget::Bound_ContentVerticalBox' has a wrong offset!");
static_assert(offsetof(UMarinerPartyWidget, LeavePartyMessageBox) == 0x0002D8, "Member 'UMarinerPartyWidget::LeavePartyMessageBox' has a wrong offset!");

// Class Mariner.MarinerTask_ApplyDamageOnTick
// 0x0040 (0x00C0 - 0x0080)
class UMarinerTask_ApplyDamageOnTick final : public UAbilityTask
{
public:
	UMulticastInlineDelegateProperty_             OnDamageAppliedToActor;                            // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_199B[0x30];                                    // 0x0090(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_ApplyDamageOnTick* CreateInstance(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, TSubclassOf<class UMarinerDamageType> AOEDamage, bool bCanHitSameActorsAgain, float Duration);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_ApplyDamageOnTick">();
	}
	static class UMarinerTask_ApplyDamageOnTick* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_ApplyDamageOnTick>();
	}
};
static_assert(alignof(UMarinerTask_ApplyDamageOnTick) == 0x000008, "Wrong alignment on UMarinerTask_ApplyDamageOnTick");
static_assert(sizeof(UMarinerTask_ApplyDamageOnTick) == 0x0000C0, "Wrong size on UMarinerTask_ApplyDamageOnTick");
static_assert(offsetof(UMarinerTask_ApplyDamageOnTick, OnDamageAppliedToActor) == 0x000080, "Member 'UMarinerTask_ApplyDamageOnTick::OnDamageAppliedToActor' has a wrong offset!");

// Class Mariner.MarinerPinComponent
// 0x0020 (0x0400 - 0x03E0)
class UMarinerPinComponent final : public UPrimitiveComponent
{
public:
	struct FVector                                WorldOffset;                                       // 0x03D8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnlyCreateForOwner;                               // 0x03E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_199D[0x3];                                     // 0x03E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerBasePinWidget>      PinWidgetClass;                                    // 0x03E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerBasePinWidget*                  PinWidget;                                         // 0x03F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_199E[0x8];                                     // 0x03F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLocalPlayerPawnSet(class APawn* InPawn);

	class UMarinerBasePinWidget* GetPinWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPinComponent">();
	}
	static class UMarinerPinComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPinComponent>();
	}
};
static_assert(alignof(UMarinerPinComponent) == 0x000010, "Wrong alignment on UMarinerPinComponent");
static_assert(sizeof(UMarinerPinComponent) == 0x000400, "Wrong size on UMarinerPinComponent");
static_assert(offsetof(UMarinerPinComponent, WorldOffset) == 0x0003D8, "Member 'UMarinerPinComponent::WorldOffset' has a wrong offset!");
static_assert(offsetof(UMarinerPinComponent, bOnlyCreateForOwner) == 0x0003E4, "Member 'UMarinerPinComponent::bOnlyCreateForOwner' has a wrong offset!");
static_assert(offsetof(UMarinerPinComponent, PinWidgetClass) == 0x0003E8, "Member 'UMarinerPinComponent::PinWidgetClass' has a wrong offset!");
static_assert(offsetof(UMarinerPinComponent, PinWidget) == 0x0003F0, "Member 'UMarinerPinComponent::PinWidget' has a wrong offset!");

// Class Mariner.MarinerPlayableCharacter
// 0x0170 (0x01A0 - 0x0030)
class UMarinerPlayableCharacter final : public UDataAsset
{
public:
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CharacterLiteClass;                                // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerSkinCollectionDataAsset*        DefaultSkinCollection;                             // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMarinerSkinCollectionDataAsset*> RandomBotSkinCollectionList;                       // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UMarinerSkinCollectionDataAsset*> SkinData;                                          // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EMarinerCharacterLockState                    E3_18_LockState;                                   // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerCharacterLockState                    BetaLockState;                                     // 0x00A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199F[0x6];                                     // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerCharacterEmotes*                ChatEmotes;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerCharacterEmotes*                VictoryEmotes;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerCharacterEmotes*                PreGameEmotes;                                     // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerBaseCharacterUIData> BaseUIData;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   CharacterName;                                     // 0x00D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsIndependentCharacter;                           // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19A0[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CharacterCustomizationScale;                       // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EMarinerInputActions, class UMarinerChatEmote*> DefaultChatEmotes;                                 // 0x00F0(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<EMarinerInputActions, class UMarinerPreGameReadyEmote*> DefaultPreGameEmotes;                              // 0x0140(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UMarinerPostGameVictoryPose*            DefaultVictoryEmote;                               // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19A1[0x8];                                     // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMarinerSkinCollectionDataAsset* GetRandomBotSkinCollection(int32* OutSelectedIndex);

	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> GetActiveSkin(class UObject* WorldContextObject) const;
	const class UMarinerSkinCollectionDataAsset* GetActiveSkinForProfile(class UObject* WorldContextObject, const struct FMangoProfile& Profile) const;
	TSubclassOf<class UMarinerBaseCharacterUIData> GetBaseUIData() const;
	EMarinerCharacterLockState GetCharacterLockState(class UObject* WorldContextObject, EMarinerEnabledCharacterFilter Filter) const;
	bool GetIsIndependentCharacter() const;
	const class UMarinerSkinCollectionDataAsset* GetSkinByEngineID(const class FString& EngineId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPlayableCharacter">();
	}
	static class UMarinerPlayableCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPlayableCharacter>();
	}
};
static_assert(alignof(UMarinerPlayableCharacter) == 0x000008, "Wrong alignment on UMarinerPlayableCharacter");
static_assert(sizeof(UMarinerPlayableCharacter) == 0x0001A0, "Wrong size on UMarinerPlayableCharacter");
static_assert(offsetof(UMarinerPlayableCharacter, CharacterClass) == 0x000030, "Member 'UMarinerPlayableCharacter::CharacterClass' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, CharacterLiteClass) == 0x000058, "Member 'UMarinerPlayableCharacter::CharacterLiteClass' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, DefaultSkinCollection) == 0x000080, "Member 'UMarinerPlayableCharacter::DefaultSkinCollection' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, RandomBotSkinCollectionList) == 0x000088, "Member 'UMarinerPlayableCharacter::RandomBotSkinCollectionList' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, SkinData) == 0x000098, "Member 'UMarinerPlayableCharacter::SkinData' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, E3_18_LockState) == 0x0000A8, "Member 'UMarinerPlayableCharacter::E3_18_LockState' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, BetaLockState) == 0x0000A9, "Member 'UMarinerPlayableCharacter::BetaLockState' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, ChatEmotes) == 0x0000B0, "Member 'UMarinerPlayableCharacter::ChatEmotes' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, VictoryEmotes) == 0x0000B8, "Member 'UMarinerPlayableCharacter::VictoryEmotes' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, PreGameEmotes) == 0x0000C0, "Member 'UMarinerPlayableCharacter::PreGameEmotes' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, BaseUIData) == 0x0000C8, "Member 'UMarinerPlayableCharacter::BaseUIData' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, CharacterName) == 0x0000D0, "Member 'UMarinerPlayableCharacter::CharacterName' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, bIsIndependentCharacter) == 0x0000E8, "Member 'UMarinerPlayableCharacter::bIsIndependentCharacter' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, CharacterCustomizationScale) == 0x0000EC, "Member 'UMarinerPlayableCharacter::CharacterCustomizationScale' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, DefaultChatEmotes) == 0x0000F0, "Member 'UMarinerPlayableCharacter::DefaultChatEmotes' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, DefaultPreGameEmotes) == 0x000140, "Member 'UMarinerPlayableCharacter::DefaultPreGameEmotes' has a wrong offset!");
static_assert(offsetof(UMarinerPlayableCharacter, DefaultVictoryEmote) == 0x000190, "Member 'UMarinerPlayableCharacter::DefaultVictoryEmote' has a wrong offset!");

// Class Mariner.MarinerPlayerCameraManager
// 0x0090 (0x2760 - 0x26D0)
class AMarinerPlayerCameraManager final : public APlayerCameraManager
{
public:
	TArray<class AMarinerCameraLensEffect*>       PooledCameraLensEffects;                           // 0x26C8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19A4[0x88];                                    // 0x26D8(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void PreallocateCameraLensEffectForController(class APlayerController* PlayerController, TSubclassOf<class AMarinerCameraLensEffect> LensEffectEmitterClass);
	static void PreallocateCameraLensEffectForLocalPlayer(class UObject* WorldContextObject, TSubclassOf<class AMarinerCameraLensEffect> LensEffectEmitterClass);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPlayerCameraManager">();
	}
	static class AMarinerPlayerCameraManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerPlayerCameraManager>();
	}
};
static_assert(alignof(AMarinerPlayerCameraManager) == 0x000010, "Wrong alignment on AMarinerPlayerCameraManager");
static_assert(sizeof(AMarinerPlayerCameraManager) == 0x002760, "Wrong size on AMarinerPlayerCameraManager");
static_assert(offsetof(AMarinerPlayerCameraManager, PooledCameraLensEffects) == 0x0026C8, "Member 'AMarinerPlayerCameraManager::PooledCameraLensEffects' has a wrong offset!");

// Class Mariner.MarinerScreenWipeWidget
// 0x0020 (0x0250 - 0x0230)
class UMarinerScreenWipeWidget : public UUserWidget
{
public:
	uint8                                         Pad_19A5[0x10];                                    // 0x0230(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Bound_WipeAnimation;                               // 0x0240(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19A6[0x8];                                     // 0x0248(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerScreenWipeWidget">();
	}
	static class UMarinerScreenWipeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerScreenWipeWidget>();
	}
};
static_assert(alignof(UMarinerScreenWipeWidget) == 0x000008, "Wrong alignment on UMarinerScreenWipeWidget");
static_assert(sizeof(UMarinerScreenWipeWidget) == 0x000250, "Wrong size on UMarinerScreenWipeWidget");
static_assert(offsetof(UMarinerScreenWipeWidget, Bound_WipeAnimation) == 0x000240, "Member 'UMarinerScreenWipeWidget::Bound_WipeAnimation' has a wrong offset!");

// Class Mariner.MarinerPlayerHeader
// 0x0030 (0x02E0 - 0x02B0)
class UMarinerPlayerHeader : public UMarinerUserWidget
{
public:
	class UMarinerAnimatedWidget*                 Bound_MatchmakingSpinner;                          // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            Bound_IntermissionCountdown;                       // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerProfileWidget*                  Bound_ProfileWidget;                               // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19A7[0x18];                                    // 0x02C8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnIntermissionEnded();
	void OnIntermissionStarted();
	void SetIsOnGameTabs(bool bGameTabs);
	void SetPartyWidgetEnabled(bool bEnabled);
	void SetProfileWidgetEnabled(bool bEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPlayerHeader">();
	}
	static class UMarinerPlayerHeader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPlayerHeader>();
	}
};
static_assert(alignof(UMarinerPlayerHeader) == 0x000008, "Wrong alignment on UMarinerPlayerHeader");
static_assert(sizeof(UMarinerPlayerHeader) == 0x0002E0, "Wrong size on UMarinerPlayerHeader");
static_assert(offsetof(UMarinerPlayerHeader, Bound_MatchmakingSpinner) == 0x0002B0, "Member 'UMarinerPlayerHeader::Bound_MatchmakingSpinner' has a wrong offset!");
static_assert(offsetof(UMarinerPlayerHeader, Bound_IntermissionCountdown) == 0x0002B8, "Member 'UMarinerPlayerHeader::Bound_IntermissionCountdown' has a wrong offset!");
static_assert(offsetof(UMarinerPlayerHeader, Bound_ProfileWidget) == 0x0002C0, "Member 'UMarinerPlayerHeader::Bound_ProfileWidget' has a wrong offset!");

// Class Mariner.MarinerPlayerStateCharacterSpawner
// 0x0090 (0x0368 - 0x02D8)
class AMarinerPlayerStateCharacterSpawner : public AMarinerCharacterSpawner
{
public:
	class UWidgetComponent*                       WidgetComponent;                                   // 0x02D8(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*               SelectionVFXComponent;                             // 0x02E0(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        LocalPlayerSelectedVFX;                            // 0x02E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        TeamMateSelectedVFX;                               // 0x02F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          LocalPlayerSelectedSFX;                            // 0x02F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          TeamMateSelectedSFX;                               // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WidgetDistanceOffsetFromActor;                     // 0x0308(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WidgetZOffsetFromActor;                            // 0x030C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         WidgetComponentSortPriority;                       // 0x0310(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerHostility                             Team;                                              // 0x0314(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19A8[0x3];                                     // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InstanceId;                                        // 0x0318(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19A9[0x4];                                     // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerPlayerState*                    AssociatedPlayerState;                             // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19AA[0x40];                                    // 0x0328(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMatchStateChanged(const class FName& NewMatchState);
	void OnPlayerStateCharacterRequestFailed(const class FString& RequestedCharacterString, const class FString& LastSeenSelectedCharacter);
	void OnPlayerStateCharacterSelected(class AMarinerPlayerState* InPlayerState, TSoftClassPtr<class UClass> SelectedCharacter);
	void OnPlayerStateCharacterUpdated(bool bClearDelayAyncLoadHandle);
	void OnPlayerStateSelectedCharacterChanged(const class FString& SelectedCharacter);
	void OnPlayerStateSelectedCharacterRequestStateChanged();
	void OnPregameStateChanged(const class FName NewPregameState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPlayerStateCharacterSpawner">();
	}
	static class AMarinerPlayerStateCharacterSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerPlayerStateCharacterSpawner>();
	}
};
static_assert(alignof(AMarinerPlayerStateCharacterSpawner) == 0x000008, "Wrong alignment on AMarinerPlayerStateCharacterSpawner");
static_assert(sizeof(AMarinerPlayerStateCharacterSpawner) == 0x000368, "Wrong size on AMarinerPlayerStateCharacterSpawner");
static_assert(offsetof(AMarinerPlayerStateCharacterSpawner, WidgetComponent) == 0x0002D8, "Member 'AMarinerPlayerStateCharacterSpawner::WidgetComponent' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerStateCharacterSpawner, SelectionVFXComponent) == 0x0002E0, "Member 'AMarinerPlayerStateCharacterSpawner::SelectionVFXComponent' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerStateCharacterSpawner, LocalPlayerSelectedVFX) == 0x0002E8, "Member 'AMarinerPlayerStateCharacterSpawner::LocalPlayerSelectedVFX' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerStateCharacterSpawner, TeamMateSelectedVFX) == 0x0002F0, "Member 'AMarinerPlayerStateCharacterSpawner::TeamMateSelectedVFX' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerStateCharacterSpawner, LocalPlayerSelectedSFX) == 0x0002F8, "Member 'AMarinerPlayerStateCharacterSpawner::LocalPlayerSelectedSFX' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerStateCharacterSpawner, TeamMateSelectedSFX) == 0x000300, "Member 'AMarinerPlayerStateCharacterSpawner::TeamMateSelectedSFX' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerStateCharacterSpawner, WidgetDistanceOffsetFromActor) == 0x000308, "Member 'AMarinerPlayerStateCharacterSpawner::WidgetDistanceOffsetFromActor' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerStateCharacterSpawner, WidgetZOffsetFromActor) == 0x00030C, "Member 'AMarinerPlayerStateCharacterSpawner::WidgetZOffsetFromActor' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerStateCharacterSpawner, WidgetComponentSortPriority) == 0x000310, "Member 'AMarinerPlayerStateCharacterSpawner::WidgetComponentSortPriority' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerStateCharacterSpawner, Team) == 0x000314, "Member 'AMarinerPlayerStateCharacterSpawner::Team' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerStateCharacterSpawner, InstanceId) == 0x000318, "Member 'AMarinerPlayerStateCharacterSpawner::InstanceId' has a wrong offset!");
static_assert(offsetof(AMarinerPlayerStateCharacterSpawner, AssociatedPlayerState) == 0x000320, "Member 'AMarinerPlayerStateCharacterSpawner::AssociatedPlayerState' has a wrong offset!");

// Class Mariner.MarinerPlaylistGlobals
// 0x00F8 (0x0128 - 0x0030)
class UMarinerPlaylistGlobals final : public UDataAsset
{
public:
	class FText                                   CrossplayEnabledText;                              // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   CrossplayPCOnlyText;                               // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   CrossplayConsoleOnlyText;                          // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FLinearColor                           CrossplayTextColor;                                // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, struct FSlateBrush>         IconMappings;                                      // 0x0088(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FSlateBrush>         MaterialMappings;                                  // 0x00D8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void BuildMapModeDataMap(const struct FMangoPlaylist& Playlist, TMap<struct FGuid, struct FFilterModeArray>* OutDataMap);
	struct FMarinerMenuButtonData ConvertPlaylistToMenuButtonData(const struct FMangoPlaylist& Playlist, EMarinerCrossplayState CrossplayState);

	bool GetIcon(const class FName& IconID, struct FSlateBrush* IconBrushOut) const;
	bool GetMaterial(const class FName& MaterialID, struct FSlateBrush* MaterialOut) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPlaylistGlobals">();
	}
	static class UMarinerPlaylistGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPlaylistGlobals>();
	}
};
static_assert(alignof(UMarinerPlaylistGlobals) == 0x000008, "Wrong alignment on UMarinerPlaylistGlobals");
static_assert(sizeof(UMarinerPlaylistGlobals) == 0x000128, "Wrong size on UMarinerPlaylistGlobals");
static_assert(offsetof(UMarinerPlaylistGlobals, CrossplayEnabledText) == 0x000030, "Member 'UMarinerPlaylistGlobals::CrossplayEnabledText' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistGlobals, CrossplayPCOnlyText) == 0x000048, "Member 'UMarinerPlaylistGlobals::CrossplayPCOnlyText' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistGlobals, CrossplayConsoleOnlyText) == 0x000060, "Member 'UMarinerPlaylistGlobals::CrossplayConsoleOnlyText' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistGlobals, CrossplayTextColor) == 0x000078, "Member 'UMarinerPlaylistGlobals::CrossplayTextColor' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistGlobals, IconMappings) == 0x000088, "Member 'UMarinerPlaylistGlobals::IconMappings' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistGlobals, MaterialMappings) == 0x0000D8, "Member 'UMarinerPlaylistGlobals::MaterialMappings' has a wrong offset!");

// Class Mariner.MarinerRankWidget
// 0x0048 (0x0278 - 0x0230)
class UMarinerRankWidget : public UUserWidget
{
public:
	class UImage*                                 Bound_RankImage;                                   // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_RankText;                                    // 0x0238(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseSmallRankImage;                                // 0x0240(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19AE[0x1F];                                    // 0x0241(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerPlayerState*                    OwningPlayerState;                                 // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19AF[0x10];                                    // 0x0268(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitRankWidget(class AMarinerPlayerState* MarinerPlayerState, const struct FGuid& PlaylistUniqueId);
	void OnOwnerMangoUserUpdated(class AMarinerPlayerState* PlayerState);
	void PopulateLocalPlayerRankByPlaylist(const struct FGuid& PlaylistUniqueId);
	void PopulateRankByValue(int32 Rank, bool bRankedSession);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRankWidget">();
	}
	static class UMarinerRankWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRankWidget>();
	}
};
static_assert(alignof(UMarinerRankWidget) == 0x000008, "Wrong alignment on UMarinerRankWidget");
static_assert(sizeof(UMarinerRankWidget) == 0x000278, "Wrong size on UMarinerRankWidget");
static_assert(offsetof(UMarinerRankWidget, Bound_RankImage) == 0x000230, "Member 'UMarinerRankWidget::Bound_RankImage' has a wrong offset!");
static_assert(offsetof(UMarinerRankWidget, Bound_RankText) == 0x000238, "Member 'UMarinerRankWidget::Bound_RankText' has a wrong offset!");
static_assert(offsetof(UMarinerRankWidget, bUseSmallRankImage) == 0x000240, "Member 'UMarinerRankWidget::bUseSmallRankImage' has a wrong offset!");
static_assert(offsetof(UMarinerRankWidget, OwningPlayerState) == 0x000260, "Member 'UMarinerRankWidget::OwningPlayerState' has a wrong offset!");

// Class Mariner.MarinerPlaylistLockedWidget
// 0x0080 (0x02B0 - 0x0230)
class UMarinerPlaylistLockedWidget : public UUserWidget
{
public:
	TMap<EMarinerPlaylistType, class FText>       HeaderTextMap;                                     // 0x0230(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   GamesRemainingText;                                // 0x0280(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_Header;                                      // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_GamesRemaining;                              // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19B1[0x8];                                     // 0x02A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Refresh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPlaylistLockedWidget">();
	}
	static class UMarinerPlaylistLockedWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPlaylistLockedWidget>();
	}
};
static_assert(alignof(UMarinerPlaylistLockedWidget) == 0x000008, "Wrong alignment on UMarinerPlaylistLockedWidget");
static_assert(sizeof(UMarinerPlaylistLockedWidget) == 0x0002B0, "Wrong size on UMarinerPlaylistLockedWidget");
static_assert(offsetof(UMarinerPlaylistLockedWidget, HeaderTextMap) == 0x000230, "Member 'UMarinerPlaylistLockedWidget::HeaderTextMap' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistLockedWidget, GamesRemainingText) == 0x000280, "Member 'UMarinerPlaylistLockedWidget::GamesRemainingText' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistLockedWidget, Bound_Header) == 0x000298, "Member 'UMarinerPlaylistLockedWidget::Bound_Header' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistLockedWidget, Bound_GamesRemaining) == 0x0002A0, "Member 'UMarinerPlaylistLockedWidget::Bound_GamesRemaining' has a wrong offset!");

// Class Mariner.MarinerSettingCheckBox
// 0x0358 (0x07F8 - 0x04A0)
class UMarinerSettingCheckBox : public UMarinerSettingBase
{
public:
	UMulticastInlineDelegateProperty_             OnCheckBoxStateInit;                               // 0x04A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnCheckStateChanged;                               // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         bIsLabelColorEnabled : 1;                          // 0x04C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsBackgroundColorEnabled : 1;                     // 0x04C0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_19B2[0x3];                                     // 0x04C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LabelCheckedColor;                                 // 0x04C4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           LabelUncheckedColor;                               // 0x04D4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           BackgroundCheckedColor;                            // 0x04E4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           BackgroundUncheckedColor;                          // 0x04F4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasEnableConfirmation;                            // 0x0504(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasDisableConfirmation;                           // 0x0505(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19B3[0x2];                                     // 0x0506(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerMessageBoxData                 EnableConfirmMessageBox;                           // 0x0508(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 DisableConfirmMessageBox;                          // 0x0678(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          CheckedSFX;                                        // 0x07E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          UncheckedSFX;                                      // 0x07F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool SetChecked(bool bValue);

	struct FMarinerSettingCheckBoxAssets GetAssets() const;
	struct FMarinerMessageBoxData GetConfirmOverride(bool bEnabled) const;
	bool IsStateChangeAllowed(bool bNewValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSettingCheckBox">();
	}
	static class UMarinerSettingCheckBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSettingCheckBox>();
	}
};
static_assert(alignof(UMarinerSettingCheckBox) == 0x000008, "Wrong alignment on UMarinerSettingCheckBox");
static_assert(sizeof(UMarinerSettingCheckBox) == 0x0007F8, "Wrong size on UMarinerSettingCheckBox");
static_assert(offsetof(UMarinerSettingCheckBox, OnCheckBoxStateInit) == 0x0004A0, "Member 'UMarinerSettingCheckBox::OnCheckBoxStateInit' has a wrong offset!");
static_assert(offsetof(UMarinerSettingCheckBox, OnCheckStateChanged) == 0x0004B0, "Member 'UMarinerSettingCheckBox::OnCheckStateChanged' has a wrong offset!");
static_assert(offsetof(UMarinerSettingCheckBox, LabelCheckedColor) == 0x0004C4, "Member 'UMarinerSettingCheckBox::LabelCheckedColor' has a wrong offset!");
static_assert(offsetof(UMarinerSettingCheckBox, LabelUncheckedColor) == 0x0004D4, "Member 'UMarinerSettingCheckBox::LabelUncheckedColor' has a wrong offset!");
static_assert(offsetof(UMarinerSettingCheckBox, BackgroundCheckedColor) == 0x0004E4, "Member 'UMarinerSettingCheckBox::BackgroundCheckedColor' has a wrong offset!");
static_assert(offsetof(UMarinerSettingCheckBox, BackgroundUncheckedColor) == 0x0004F4, "Member 'UMarinerSettingCheckBox::BackgroundUncheckedColor' has a wrong offset!");
static_assert(offsetof(UMarinerSettingCheckBox, bHasEnableConfirmation) == 0x000504, "Member 'UMarinerSettingCheckBox::bHasEnableConfirmation' has a wrong offset!");
static_assert(offsetof(UMarinerSettingCheckBox, bHasDisableConfirmation) == 0x000505, "Member 'UMarinerSettingCheckBox::bHasDisableConfirmation' has a wrong offset!");
static_assert(offsetof(UMarinerSettingCheckBox, EnableConfirmMessageBox) == 0x000508, "Member 'UMarinerSettingCheckBox::EnableConfirmMessageBox' has a wrong offset!");
static_assert(offsetof(UMarinerSettingCheckBox, DisableConfirmMessageBox) == 0x000678, "Member 'UMarinerSettingCheckBox::DisableConfirmMessageBox' has a wrong offset!");
static_assert(offsetof(UMarinerSettingCheckBox, CheckedSFX) == 0x0007E8, "Member 'UMarinerSettingCheckBox::CheckedSFX' has a wrong offset!");
static_assert(offsetof(UMarinerSettingCheckBox, UncheckedSFX) == 0x0007F0, "Member 'UMarinerSettingCheckBox::UncheckedSFX' has a wrong offset!");

// Class Mariner.MarinerPlaylistMenu
// 0x0570 (0x0A50 - 0x04E0)
class UMarinerPlaylistMenu : public UMarinerMenu
{
public:
	bool                                          bFilterPlaylists;                                  // 0x04E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerPlaylistType                          PlaylistFilter;                                    // 0x04E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19B5[0x6];                                     // 0x04E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerPlaylistButton>     PlaylistButtonType;                                // 0x04E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerMenuStackLayer>     DebugPlayMenuType;                                 // 0x04F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EMatchmakingInteractionState, class FText> InteractionStateTooltip;                           // 0x04F8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 TutorialConfirmMessageBox;                         // 0x0548(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarinerServerTravelConfig             TutorialServerTravelConfig;                        // 0x06B8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     ConfirmPrompt;                                     // 0x06F8(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     ReplayTutorialPrompt;                              // 0x0810(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     DebugPlayMenuPrompt;                               // 0x0928(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UMarinerGridPanel*                      Bound_ButtonGrid;                                  // 0x0A40(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19B6[0x8];                                     // 0x0A48(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAbandonmentPenaltyExpired();
	void OnPresenceChanged();
	void OnUpdatePartyBusyState(EMangoPartyBusyState State);
	void RebuildPlaylistMenu();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPlaylistMenu">();
	}
	static class UMarinerPlaylistMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPlaylistMenu>();
	}
};
static_assert(alignof(UMarinerPlaylistMenu) == 0x000008, "Wrong alignment on UMarinerPlaylistMenu");
static_assert(sizeof(UMarinerPlaylistMenu) == 0x000A50, "Wrong size on UMarinerPlaylistMenu");
static_assert(offsetof(UMarinerPlaylistMenu, bFilterPlaylists) == 0x0004E0, "Member 'UMarinerPlaylistMenu::bFilterPlaylists' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistMenu, PlaylistFilter) == 0x0004E1, "Member 'UMarinerPlaylistMenu::PlaylistFilter' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistMenu, PlaylistButtonType) == 0x0004E8, "Member 'UMarinerPlaylistMenu::PlaylistButtonType' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistMenu, DebugPlayMenuType) == 0x0004F0, "Member 'UMarinerPlaylistMenu::DebugPlayMenuType' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistMenu, InteractionStateTooltip) == 0x0004F8, "Member 'UMarinerPlaylistMenu::InteractionStateTooltip' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistMenu, TutorialConfirmMessageBox) == 0x000548, "Member 'UMarinerPlaylistMenu::TutorialConfirmMessageBox' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistMenu, TutorialServerTravelConfig) == 0x0006B8, "Member 'UMarinerPlaylistMenu::TutorialServerTravelConfig' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistMenu, ConfirmPrompt) == 0x0006F8, "Member 'UMarinerPlaylistMenu::ConfirmPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistMenu, ReplayTutorialPrompt) == 0x000810, "Member 'UMarinerPlaylistMenu::ReplayTutorialPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistMenu, DebugPlayMenuPrompt) == 0x000928, "Member 'UMarinerPlaylistMenu::DebugPlayMenuPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerPlaylistMenu, Bound_ButtonGrid) == 0x000A40, "Member 'UMarinerPlaylistMenu::Bound_ButtonGrid' has a wrong offset!");

// Class Mariner.MarinerPoolingCharacterData
// 0x0018 (0x0048 - 0x0030)
class UMarinerPoolingCharacterData : public UDataAsset
{
public:
	int32                                         ParticleSystemsPreallocated;                       // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B7[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AMarinerCameraLensEffect>> CameraLensEffectTypesToPool;                       // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPoolingCharacterData">();
	}
	static class UMarinerPoolingCharacterData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPoolingCharacterData>();
	}
};
static_assert(alignof(UMarinerPoolingCharacterData) == 0x000008, "Wrong alignment on UMarinerPoolingCharacterData");
static_assert(sizeof(UMarinerPoolingCharacterData) == 0x000048, "Wrong size on UMarinerPoolingCharacterData");
static_assert(offsetof(UMarinerPoolingCharacterData, ParticleSystemsPreallocated) == 0x000030, "Member 'UMarinerPoolingCharacterData::ParticleSystemsPreallocated' has a wrong offset!");
static_assert(offsetof(UMarinerPoolingCharacterData, CameraLensEffectTypesToPool) == 0x000038, "Member 'UMarinerPoolingCharacterData::CameraLensEffectTypesToPool' has a wrong offset!");

// Class Mariner.MarinerPoolingManager
// 0x0068 (0x0090 - 0x0028)
class UMarinerPoolingManager final : public UObject
{
public:
	TArray<class UMarinerParticleSystemComponent*> ParticleSystemComponentPool;                       // 0x0028(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<TSubclassOf<class UMarinerPoolingCharacterData>, int32> ActivePoolingData;                                 // 0x0038(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19B8[0x8];                                     // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool Tick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPoolingManager">();
	}
	static class UMarinerPoolingManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPoolingManager>();
	}
};
static_assert(alignof(UMarinerPoolingManager) == 0x000008, "Wrong alignment on UMarinerPoolingManager");
static_assert(sizeof(UMarinerPoolingManager) == 0x000090, "Wrong size on UMarinerPoolingManager");
static_assert(offsetof(UMarinerPoolingManager, ParticleSystemComponentPool) == 0x000028, "Member 'UMarinerPoolingManager::ParticleSystemComponentPool' has a wrong offset!");
static_assert(offsetof(UMarinerPoolingManager, ActivePoolingData) == 0x000038, "Member 'UMarinerPoolingManager::ActivePoolingData' has a wrong offset!");

// Class Mariner.MarinerSphereArenaBoundary
// 0x0008 (0x0290 - 0x0288)
class AMarinerSphereArenaBoundary final : public AMarinerArenaBoundary
{
public:
	float                                         KnockoutSphereRadius;                              // 0x0288(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19BA[0x4];                                     // 0x028C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSphereArenaBoundary">();
	}
	static class AMarinerSphereArenaBoundary* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerSphereArenaBoundary>();
	}
};
static_assert(alignof(AMarinerSphereArenaBoundary) == 0x000008, "Wrong alignment on AMarinerSphereArenaBoundary");
static_assert(sizeof(AMarinerSphereArenaBoundary) == 0x000290, "Wrong size on AMarinerSphereArenaBoundary");
static_assert(offsetof(AMarinerSphereArenaBoundary, KnockoutSphereRadius) == 0x000288, "Member 'AMarinerSphereArenaBoundary::KnockoutSphereRadius' has a wrong offset!");

// Class Mariner.MarinerPostgameManager
// 0x0070 (0x0288 - 0x0218)
class AMarinerPostgameManager : public AActor
{
public:
	UMulticastInlineDelegateProperty_             OnMatchResultsDisplayed;                           // 0x0218(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class ACameraActor>               PlayerTeamWinCamera;                               // 0x0228(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ACameraActor>               EnemyTeamWinCamera;                                // 0x0230(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ACameraActor>               LocalPlayerCamera;                                 // 0x0238(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FViewTargetTransitionParams            MatchResultCameraBlend;                            // 0x0240(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_19BB[0x8];                                     // 0x0250(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMarinerPlayerState*>            PendingPlayerStates;                               // 0x0258(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMarinerWorldUIPlayerData>      FriendlyPlayerData;                                // 0x0268(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMarinerWorldUIPlayerData>      EnemyPlayerData;                                   // 0x0278(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class AMarinerPostgameManager* GetInstance(const class UObject* WorldContextObject);

	void OnAnySpawnerCharacterLoaded(class AMarinerCharacterSpawner* Spawner);
	void OnLocalPlayerStateReplicated(class AMarinerPlayerController* ControllerHostingState);
	void OnPlayerAdded(class APlayerState* AddedPlayer);
	void OnPlayerChangedTeam(class AMarinerPlayerState* PlayerChangedTeam);
	void OnPlayerRemoved(class APlayerState* RemovedPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPostgameManager">();
	}
	static class AMarinerPostgameManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerPostgameManager>();
	}
};
static_assert(alignof(AMarinerPostgameManager) == 0x000008, "Wrong alignment on AMarinerPostgameManager");
static_assert(sizeof(AMarinerPostgameManager) == 0x000288, "Wrong size on AMarinerPostgameManager");
static_assert(offsetof(AMarinerPostgameManager, OnMatchResultsDisplayed) == 0x000218, "Member 'AMarinerPostgameManager::OnMatchResultsDisplayed' has a wrong offset!");
static_assert(offsetof(AMarinerPostgameManager, PlayerTeamWinCamera) == 0x000228, "Member 'AMarinerPostgameManager::PlayerTeamWinCamera' has a wrong offset!");
static_assert(offsetof(AMarinerPostgameManager, EnemyTeamWinCamera) == 0x000230, "Member 'AMarinerPostgameManager::EnemyTeamWinCamera' has a wrong offset!");
static_assert(offsetof(AMarinerPostgameManager, LocalPlayerCamera) == 0x000238, "Member 'AMarinerPostgameManager::LocalPlayerCamera' has a wrong offset!");
static_assert(offsetof(AMarinerPostgameManager, MatchResultCameraBlend) == 0x000240, "Member 'AMarinerPostgameManager::MatchResultCameraBlend' has a wrong offset!");
static_assert(offsetof(AMarinerPostgameManager, PendingPlayerStates) == 0x000258, "Member 'AMarinerPostgameManager::PendingPlayerStates' has a wrong offset!");
static_assert(offsetof(AMarinerPostgameManager, FriendlyPlayerData) == 0x000268, "Member 'AMarinerPostgameManager::FriendlyPlayerData' has a wrong offset!");
static_assert(offsetof(AMarinerPostgameManager, EnemyPlayerData) == 0x000278, "Member 'AMarinerPostgameManager::EnemyPlayerData' has a wrong offset!");

// Class Mariner.MarinerPostGameRankProgressMenu
// 0x0000 (0x04E0 - 0x04E0)
class UMarinerPostGameRankProgressMenu : public UMarinerMenu
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPostGameRankProgressMenu">();
	}
	static class UMarinerPostGameRankProgressMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPostGameRankProgressMenu>();
	}
};
static_assert(alignof(UMarinerPostGameRankProgressMenu) == 0x000008, "Wrong alignment on UMarinerPostGameRankProgressMenu");
static_assert(sizeof(UMarinerPostGameRankProgressMenu) == 0x0004E0, "Wrong size on UMarinerPostGameRankProgressMenu");

// Class Mariner.MarinerPostGameResultsMenu
// 0x0010 (0x04F0 - 0x04E0)
class UMarinerPostGameResultsMenu : public UMarinerMenu
{
public:
	class UMarinerPostGameResultsScore*           Bound_FriendTeamScore;                             // 0x04E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPostGameResultsScore*           Bound_EnemyTeamScore;                              // 0x04E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPostGameResultsMenu">();
	}
	static class UMarinerPostGameResultsMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPostGameResultsMenu>();
	}
};
static_assert(alignof(UMarinerPostGameResultsMenu) == 0x000008, "Wrong alignment on UMarinerPostGameResultsMenu");
static_assert(sizeof(UMarinerPostGameResultsMenu) == 0x0004F0, "Wrong size on UMarinerPostGameResultsMenu");
static_assert(offsetof(UMarinerPostGameResultsMenu, Bound_FriendTeamScore) == 0x0004E0, "Member 'UMarinerPostGameResultsMenu::Bound_FriendTeamScore' has a wrong offset!");
static_assert(offsetof(UMarinerPostGameResultsMenu, Bound_EnemyTeamScore) == 0x0004E8, "Member 'UMarinerPostGameResultsMenu::Bound_EnemyTeamScore' has a wrong offset!");

// Class Mariner.MarinerPostGameSequence
// 0x0408 (0x0B38 - 0x0730)
class UMarinerPostGameSequence : public UMarinerMenuSequence
{
public:
	float                                         LoadTimeoutDuration;                               // 0x0730(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAchievementsEnabled;                              // 0x0734(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19BC[0x403];                                   // 0x0735(0x0403)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnableWorldUI(bool bEnabled);
	void GetParsedQuestsAndBattlePassRewards(TArray<struct FMangoReward>* OutRewards);
	void GetParsedRewards(TArray<struct FMangoReward>* OutRewards);
	void OnMatchEndDataSet(const struct FMatchEnd& InMatchEndData);
	void OnRequestComplete(bool bResultSuccess);
	void ParseMangoRewards(const struct FMangoRewards& MangoRewards, TArray<struct FMangoReward>* OutParsedRewards);
	void RequestLocalPlayerCamera();
	void RequestMatchResultCamera(EMarinerGameOutcome Outcome);
	void SeamlessTravelToMainMenu();
	void SetAchievementsEnabled(bool bEnabled);
	void ShowWorldUILocalPlayerOnly(bool bEnabled);

	const struct FMarinerPostGameData GetLocalPlayerPostGameData() const;
	const struct FMatchEnd GetMatchEndData() const;
	bool GetMatchResultLocalQuests(TArray<struct FMarinerQuestProgress>* OutQuests) const;
	bool GetMatchResultLocalQuestsWithProgress(TArray<struct FMarinerQuestProgress>* OutQuests) const;
	const struct FMangoMatchResultResponse GetMatchResultResponse() const;
	bool IsRequestComplete(bool* bResultSuccess) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPostGameSequence">();
	}
	static class UMarinerPostGameSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPostGameSequence>();
	}
};
static_assert(alignof(UMarinerPostGameSequence) == 0x000008, "Wrong alignment on UMarinerPostGameSequence");
static_assert(sizeof(UMarinerPostGameSequence) == 0x000B38, "Wrong size on UMarinerPostGameSequence");
static_assert(offsetof(UMarinerPostGameSequence, LoadTimeoutDuration) == 0x000730, "Member 'UMarinerPostGameSequence::LoadTimeoutDuration' has a wrong offset!");
static_assert(offsetof(UMarinerPostGameSequence, bAchievementsEnabled) == 0x000734, "Member 'UMarinerPostGameSequence::bAchievementsEnabled' has a wrong offset!");

// Class Mariner.MarinerPostGameStatsMenu
// 0x00C8 (0x05A8 - 0x04E0)
class UMarinerPostGameStatsMenu : public UMarinerMenu
{
public:
	class UMarinerVerticalBox*                    Bound_VerticalBoxPlayerTeamGroup;                  // 0x04E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerVerticalBox*                    Bound_VerticalBoxEnemyTeamGroup;                   // 0x04E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextPlayerTeamTeamWon;                       // 0x04F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextEnemyTeamTeamWon;                        // 0x04F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextDrawGame;                                // 0x0500(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUniformGridPanel*                      Bound_UniformGridPlayerTeamHeaders;                // 0x0508(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUniformGridPanel*                      Bound_UniformGridEnemyTeamHeaders;                 // 0x0510(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerPostGameStatHeader> PostGameStatHeader;                                // 0x0518(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19BF[0x88];                                    // 0x0520(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PopulatePostGameStats();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPostGameStatsMenu">();
	}
	static class UMarinerPostGameStatsMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPostGameStatsMenu>();
	}
};
static_assert(alignof(UMarinerPostGameStatsMenu) == 0x000008, "Wrong alignment on UMarinerPostGameStatsMenu");
static_assert(sizeof(UMarinerPostGameStatsMenu) == 0x0005A8, "Wrong size on UMarinerPostGameStatsMenu");
static_assert(offsetof(UMarinerPostGameStatsMenu, Bound_VerticalBoxPlayerTeamGroup) == 0x0004E0, "Member 'UMarinerPostGameStatsMenu::Bound_VerticalBoxPlayerTeamGroup' has a wrong offset!");
static_assert(offsetof(UMarinerPostGameStatsMenu, Bound_VerticalBoxEnemyTeamGroup) == 0x0004E8, "Member 'UMarinerPostGameStatsMenu::Bound_VerticalBoxEnemyTeamGroup' has a wrong offset!");
static_assert(offsetof(UMarinerPostGameStatsMenu, Bound_TextPlayerTeamTeamWon) == 0x0004F0, "Member 'UMarinerPostGameStatsMenu::Bound_TextPlayerTeamTeamWon' has a wrong offset!");
static_assert(offsetof(UMarinerPostGameStatsMenu, Bound_TextEnemyTeamTeamWon) == 0x0004F8, "Member 'UMarinerPostGameStatsMenu::Bound_TextEnemyTeamTeamWon' has a wrong offset!");
static_assert(offsetof(UMarinerPostGameStatsMenu, Bound_TextDrawGame) == 0x000500, "Member 'UMarinerPostGameStatsMenu::Bound_TextDrawGame' has a wrong offset!");
static_assert(offsetof(UMarinerPostGameStatsMenu, Bound_UniformGridPlayerTeamHeaders) == 0x000508, "Member 'UMarinerPostGameStatsMenu::Bound_UniformGridPlayerTeamHeaders' has a wrong offset!");
static_assert(offsetof(UMarinerPostGameStatsMenu, Bound_UniformGridEnemyTeamHeaders) == 0x000510, "Member 'UMarinerPostGameStatsMenu::Bound_UniformGridEnemyTeamHeaders' has a wrong offset!");
static_assert(offsetof(UMarinerPostGameStatsMenu, PostGameStatHeader) == 0x000518, "Member 'UMarinerPostGameStatsMenu::PostGameStatHeader' has a wrong offset!");

// Class Mariner.MarinerPregameManager
// 0x0038 (0x0250 - 0x0218)
class AMarinerPregameManager : public AActor
{
public:
	uint8                                         Pad_19C0[0x18];                                    // 0x0218(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarinerWorldUIPlayerData>      FriendlyPlayerData;                                // 0x0230(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMarinerWorldUIPlayerData>      EnemyPlayerData;                                   // 0x0240(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class AMarinerPregameManager* GetInstance(const class UObject* WorldContextObject);

	void OnLocalPlayerStateReplicated(class AMarinerPlayerController* ControllerHostingState);
	void OnPlayerAdded(class APlayerState* AddedPlayer);
	void OnPlayerChangedTeam(class AMarinerPlayerState* PlayerChangedTeam);
	void OnPlayerRemoved(class APlayerState* RemovedPlayer);
	void OnPregameStateChanged(class FName NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPregameManager">();
	}
	static class AMarinerPregameManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerPregameManager>();
	}
};
static_assert(alignof(AMarinerPregameManager) == 0x000008, "Wrong alignment on AMarinerPregameManager");
static_assert(sizeof(AMarinerPregameManager) == 0x000250, "Wrong size on AMarinerPregameManager");
static_assert(offsetof(AMarinerPregameManager, FriendlyPlayerData) == 0x000230, "Member 'AMarinerPregameManager::FriendlyPlayerData' has a wrong offset!");
static_assert(offsetof(AMarinerPregameManager, EnemyPlayerData) == 0x000240, "Member 'AMarinerPregameManager::EnemyPlayerData' has a wrong offset!");

// Class Mariner.MarinerPrivateMatchTeamWidget
// 0x0028 (0x02D8 - 0x02B0)
class UMarinerPrivateMatchTeamWidget : public UMarinerUserWidget
{
public:
	TSubclassOf<class UMarinerLobbySlotWidget>    SlotWidgetType;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TeamName;                                    // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerVerticalBox*                    Bound_TeamPanel;                                   // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_SizeWarning;                                 // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19C1[0x8];                                     // 0x02D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPrivateMatchTeamWidget">();
	}
	static class UMarinerPrivateMatchTeamWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPrivateMatchTeamWidget>();
	}
};
static_assert(alignof(UMarinerPrivateMatchTeamWidget) == 0x000008, "Wrong alignment on UMarinerPrivateMatchTeamWidget");
static_assert(sizeof(UMarinerPrivateMatchTeamWidget) == 0x0002D8, "Wrong size on UMarinerPrivateMatchTeamWidget");
static_assert(offsetof(UMarinerPrivateMatchTeamWidget, SlotWidgetType) == 0x0002B0, "Member 'UMarinerPrivateMatchTeamWidget::SlotWidgetType' has a wrong offset!");
static_assert(offsetof(UMarinerPrivateMatchTeamWidget, Bound_TeamName) == 0x0002B8, "Member 'UMarinerPrivateMatchTeamWidget::Bound_TeamName' has a wrong offset!");
static_assert(offsetof(UMarinerPrivateMatchTeamWidget, Bound_TeamPanel) == 0x0002C0, "Member 'UMarinerPrivateMatchTeamWidget::Bound_TeamPanel' has a wrong offset!");
static_assert(offsetof(UMarinerPrivateMatchTeamWidget, Bound_SizeWarning) == 0x0002C8, "Member 'UMarinerPrivateMatchTeamWidget::Bound_SizeWarning' has a wrong offset!");

// Class Mariner.MarinerProfileObjectManager
// 0x05C0 (0x0670 - 0x00B0)
class UMarinerProfileObjectManager final : public UActorComponent
{
public:
	UMulticastInlineDelegateProperty_             OnProfilePregameEmotesLoadedDelegate;              // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnProfileTotemDataLoadedDelegate;                  // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnProfileCharacterDataLoadedDelegate;              // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnAllDataLoadedDelegate;                           // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_19C2[0x528];                                   // 0x00F0(0x0528)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UAnimInstance>              AnimBP3P;                                          // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarinerPlayerState*                    OwningPlayerState;                                 // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19C3[0x30];                                    // 0x0628(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarinerProfileObjectManager*>   ProxyObjectManagersToNotify;                       // 0x0658(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UMarinerProfileObjectManager*           SourceProfileObjectManager;                        // 0x0668(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void DebugOnArtifactLoaded();
	void DebugOnChatEmoteLoaded();
	void DebugOnMegaBlastLoaded();
	void DebugOnPreGameEmoteLoaded();
	void DebugOnReturnTrailLoaded();
	void DebugOnSkinCollectionAnimBPLoaded();
	void DebugOnSkinCollectionMembersLoaded();
	void DebugOnVictoryPoseLoaded();
	void Dedi_OnArtifactLoaded(TSubclassOf<class AMarinerCharacter> LoadedCharacterClass);
	void Dedi_StartLoadProfileObjects();
	class UMarinerChatEmote* GetChatEmoteByInput(EMarinerInputActions InputAction);
	class UAnimMontage* GetPregameReadyEmoteByInput(EMarinerInputActions InputAction);
	void Init(class AMarinerPlayerState* NewOwningPlayerState);
	void MulticastSetDebugArtifact(const class FString& ArtifactPath);
	void MulticastSetDebugChatEmote(const int32 Slot, const class FString& ChatEmotePath);
	void MulticastSetDebugMegaBlast(const class FString& MegaBlastPath);
	void MulticastSetDebugPreGameEmote(const int32 Slot, const class FString& PreGameEmotePath);
	void MulticastSetDebugReturnTrail(const class FString& ReturnTrailPath);
	void MulticastSetDebugSkin(class UMarinerSkinCollectionDataAsset* SkinToLoad);
	void MulticastSetDebugVictoryPose(const class FString& VictoryPosePath);
	void OnBotTreatedAsPlayerCharacterObjectsLoaded(TSubclassOf<class AMarinerCharacter> LoadedCharacterClass);
	void OnCharacterObjectsLoaded(TSubclassOf<class AMarinerCharacter> LoadedCharacterClass);
	void OnOwnerMangoUserUpdated(class AMarinerPlayerState* PlayerState);
	void OnPawnClassChanged();
	void OnPawnPossessed(class AMarinerPlayerController* PossessingController, class APawn* PossessedPawn);
	void OnPlayerLeftGame(class APlayerState* LeavingPlayerState);
	void OnPreGameEmotesLoaded();
	void OnPreGameEmotesSkinLoaded();
	void OnSelectedCharacterChanged(const class FString& RequestedCharacterData);
	void OnSkinAnimBPLoaded(TSubclassOf<class AMarinerCharacter> LoadedCharacterClass);
	void OnSkinCollectionMembersLoaded(TSubclassOf<class AMarinerCharacter> LoadedCharacterClass);
	void OnTotemObjectsLoaded();
	void RegisterProxyManagersToNotify(class UMarinerProfileObjectManager* ProxyProfile);
	void SetIsUsingProxyPlayerState(bool bIsProxy, class UMarinerProfileObjectManager* SourcePOM);
	void SetupBindings(class AMarinerPlayerState* PlayerState);
	void StartLoadCharacterObjects();
	void StartLoadProfileObjects();

	class UMarinerAbilitySkinMap* GetAbilitySkins() const;
	TSubclassOf<class UAnimInstance> GetAnimBP() const;
	class UMarinerArtifactDataAsset* GetArtifact(EMangoItemType ItemType) const;
	TMap<EMangoItemType, class UMarinerArtifactDataAsset*> GetArtifacts() const;
	const TMap<EMarinerInputActions, class UMarinerChatEmote*> GetChatEmotes() const;
	class UMarinerCueSkinMap* GetCueSkins() const;
	class UMarinerCharacterFrontendSkinUIData* GetFrontendUIData() const;
	class UMarinerMegaBlastDataAsset* GetMegaBlast() const;
	class UMarinerPostGameVictoryPose* GetPostGameVictoryPose() const;
	class UMarinerReturnTrailDataAsset* GetReturnTrail() const;
	class UMarinerSkinCollectionDataAsset* GetSkinCollection() const;
	class UMarinerSkinDataAsset* GetSkinDataAsset() const;
	class UMarinerSkinUIData* GetSkinUIData() const;
	class UMarinerRocketTotemBorderDataAsset* GetTotemBorder() const;
	class UMarinerRocketTotemCompanionDataAsset* GetTotemCompanion() const;
	class UMarinerRocketTotemPatternDataAsset* GetTotemPattern() const;
	class UMarinerRocketTotemShapeDataAsset* GetTotemShape() const;
	class UMarinerRocketTotemStandDataAsset* GetTotemStand() const;
	class UMarinerRocketTotemSymbolsDataAsset* GetTotemSymbol() const;
	class UMarinerRocketTotemVFXDataAsset* GetTotemVFX() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerProfileObjectManager">();
	}
	static class UMarinerProfileObjectManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerProfileObjectManager>();
	}
};
static_assert(alignof(UMarinerProfileObjectManager) == 0x000008, "Wrong alignment on UMarinerProfileObjectManager");
static_assert(sizeof(UMarinerProfileObjectManager) == 0x000670, "Wrong size on UMarinerProfileObjectManager");
static_assert(offsetof(UMarinerProfileObjectManager, OnProfilePregameEmotesLoadedDelegate) == 0x0000B0, "Member 'UMarinerProfileObjectManager::OnProfilePregameEmotesLoadedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerProfileObjectManager, OnProfileTotemDataLoadedDelegate) == 0x0000C0, "Member 'UMarinerProfileObjectManager::OnProfileTotemDataLoadedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerProfileObjectManager, OnProfileCharacterDataLoadedDelegate) == 0x0000D0, "Member 'UMarinerProfileObjectManager::OnProfileCharacterDataLoadedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerProfileObjectManager, OnAllDataLoadedDelegate) == 0x0000E0, "Member 'UMarinerProfileObjectManager::OnAllDataLoadedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerProfileObjectManager, AnimBP3P) == 0x000618, "Member 'UMarinerProfileObjectManager::AnimBP3P' has a wrong offset!");
static_assert(offsetof(UMarinerProfileObjectManager, OwningPlayerState) == 0x000620, "Member 'UMarinerProfileObjectManager::OwningPlayerState' has a wrong offset!");
static_assert(offsetof(UMarinerProfileObjectManager, ProxyObjectManagersToNotify) == 0x000658, "Member 'UMarinerProfileObjectManager::ProxyObjectManagersToNotify' has a wrong offset!");
static_assert(offsetof(UMarinerProfileObjectManager, SourceProfileObjectManager) == 0x000668, "Member 'UMarinerProfileObjectManager::SourceProfileObjectManager' has a wrong offset!");

// Class Mariner.MarinerProfileWidget
// 0x0070 (0x0488 - 0x0418)
class UMarinerProfileWidget : public UMarinerAnimatedWidget
{
public:
	class UMarinerAvatarWidget*                   Bound_Avatar;                                      // 0x0418(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         Bound_PartyHorizontalBox;                          // 0x0420(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_PlayerName;                                  // 0x0428(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextExtraPlayers;                            // 0x0430(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_ImagePartyOverflow;                          // 0x0438(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19CA[0x48];                                    // 0x0440(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerProfileWidget">();
	}
	static class UMarinerProfileWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerProfileWidget>();
	}
};
static_assert(alignof(UMarinerProfileWidget) == 0x000008, "Wrong alignment on UMarinerProfileWidget");
static_assert(sizeof(UMarinerProfileWidget) == 0x000488, "Wrong size on UMarinerProfileWidget");
static_assert(offsetof(UMarinerProfileWidget, Bound_Avatar) == 0x000418, "Member 'UMarinerProfileWidget::Bound_Avatar' has a wrong offset!");
static_assert(offsetof(UMarinerProfileWidget, Bound_PartyHorizontalBox) == 0x000420, "Member 'UMarinerProfileWidget::Bound_PartyHorizontalBox' has a wrong offset!");
static_assert(offsetof(UMarinerProfileWidget, Bound_PlayerName) == 0x000428, "Member 'UMarinerProfileWidget::Bound_PlayerName' has a wrong offset!");
static_assert(offsetof(UMarinerProfileWidget, Bound_TextExtraPlayers) == 0x000430, "Member 'UMarinerProfileWidget::Bound_TextExtraPlayers' has a wrong offset!");
static_assert(offsetof(UMarinerProfileWidget, Bound_ImagePartyOverflow) == 0x000438, "Member 'UMarinerProfileWidget::Bound_ImagePartyOverflow' has a wrong offset!");

// Class Mariner.MarinerProgressionRewardPreview
// 0x0030 (0x0328 - 0x02F8)
class UMarinerProgressionRewardPreview : public UMarinerAnimatedProgressWidget
{
public:
	class UMarinerRewardPreview*                  Bound_CurrentRewardPreview;                        // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerRewardPreview*                  Bound_UpcomingRewardPreview;                       // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerRewardPreview*                  Bound_FeatureRewardPreview;                        // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19CB[0x18];                                    // 0x0310(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideUpcomingAndFeaturePreviews();
	void InitAnimatedCharacterProgressionPreview(const class UMarinerPlayableCharacter* Character, const struct FMangoMatchCharacterProgression& CharacterProgression, float DurationPerLevelInSeconds, float FinalDelayInSeconds);
	void InitCharacterProgressionPreview(const class UMarinerPlayableCharacter* Character, const struct FMangoMatchCharacterProgression& CharacterProgression, bool bShowEndValues);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerProgressionRewardPreview">();
	}
	static class UMarinerProgressionRewardPreview* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerProgressionRewardPreview>();
	}
};
static_assert(alignof(UMarinerProgressionRewardPreview) == 0x000008, "Wrong alignment on UMarinerProgressionRewardPreview");
static_assert(sizeof(UMarinerProgressionRewardPreview) == 0x000328, "Wrong size on UMarinerProgressionRewardPreview");
static_assert(offsetof(UMarinerProgressionRewardPreview, Bound_CurrentRewardPreview) == 0x0002F8, "Member 'UMarinerProgressionRewardPreview::Bound_CurrentRewardPreview' has a wrong offset!");
static_assert(offsetof(UMarinerProgressionRewardPreview, Bound_UpcomingRewardPreview) == 0x000300, "Member 'UMarinerProgressionRewardPreview::Bound_UpcomingRewardPreview' has a wrong offset!");
static_assert(offsetof(UMarinerProgressionRewardPreview, Bound_FeatureRewardPreview) == 0x000308, "Member 'UMarinerProgressionRewardPreview::Bound_FeatureRewardPreview' has a wrong offset!");

// Class Mariner.MarinerProjectileFlux
// 0x02A0 (0x0B50 - 0x08B0)
class AMarinerProjectileFlux final : public AMarinerProjectile
{
public:
	uint8                                         Pad_19CD[0x8];                                     // 0x08B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnEnteredStateDelegate;                            // 0x08B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnExitedStateDelegate;                             // 0x08C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnDroppedItemDelegate;                             // 0x08D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnPickedUpItemDelegate;                            // 0x08E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EMarinerFluxProjectileState                   CurrentState;                                      // 0x08F8(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19CE[0x3];                                     // 0x08F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArcBouncePlaneConstraintYaw;                       // 0x08FC(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19CF[0x4];                                     // 0x0900(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerFluxProjectileStateData        DefaultStateData;                                  // 0x0904(0x000C)(Edit, DisableEditOnInstance, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerFluxProjectileStateData        BouncingStateData;                                 // 0x0910(0x000C)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerFluxProjectileStateData        GuidingStateData;                                  // 0x091C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerFluxProjectileStateData        AutoHomingStateData;                               // 0x0928(0x000C)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerFluxProjectileStateData        GuidedHomingStateData;                             // 0x0934(0x000C)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarinerFluxProjectileStateData        FetchingStateData;                                 // 0x0940(0x000C)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         RetriggerableBounceSoundDelay;                     // 0x094C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          BounceSound;                                       // 0x0950(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BouncingLifetime;                                  // 0x0958(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRangeWhileBouncing;                             // 0x095C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRangeWhileBouncingCheckFrequency;               // 0x0960(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GuidingExtensionPaddingAlongLookRay;               // 0x0964(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GuidedMaxSpeed;                                    // 0x0968(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           InstigatorGuidingTag;                              // 0x096C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxAttackHomingTime;                               // 0x0974(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HomingExplodeDelay;                                // 0x0978(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerHomingPolicy                          AutoHomingPolicy;                                  // 0x097C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19D0[0x3];                                     // 0x097D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoHomingMaxRotationalSpeedInDegrees;             // 0x0980(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutoHomingTurnThresholdBeforeUsingUpVector;        // 0x0984(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutoHomingAccelerationMagnitude;                   // 0x0988(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutoHomingProximity;                               // 0x098C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerHomingPolicy                          GuidedHomingPolicy;                                // 0x0990(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19D1[0x3];                                     // 0x0991(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GuidedHomingMaxRotationalSpeedInDegrees;           // 0x0994(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GuidedHomingTurnThresholdBeforeUsingUpVector;      // 0x0998(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GuidedHomingAccelerationMagnitude;                 // 0x099C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumFetchDistance;                              // 0x09A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19D2[0x4];                                     // 0x09A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           FetchableItemTypeBlacklist;                        // 0x09A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	EMarinerHomingPolicy                          FetchingHomingPolicy;                              // 0x09B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19D3[0x3];                                     // 0x09B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FetchingMaxRotationalSpeedInDegrees;               // 0x09BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FetchingTurnThresholdBeforeUsingUpVector;          // 0x09C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FetchingHomingAccelerationMagnitude;               // 0x09C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FetchingMaxSpeed;                                  // 0x09C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InstigatorDropItemProximityCheckFrequency;         // 0x09CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GiveItemDistance;                                  // 0x09D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FetchItemProximity;                                // 0x09D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DropItemOnInstigatorUnableToReceiveDelay;          // 0x09D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldDisableIfInstigatorKOedWhileFetching;       // 0x09DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19D4[0x3];                                     // 0x09DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AMarinerItem>            CachedFetchingTarget;                              // 0x09E0(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   FetchedItemVisualComponent;                        // 0x09E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AMarinerCharacter>       CachedAutoHomingTarget;                            // 0x09F0(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AMarinerCharacter>       CachedGuidedHomingTarget;                          // 0x09F8(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DelayBeforeDestroyStuckInPlace;                    // 0x0A00(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxDistanceConsideredStuckInPlace;                 // 0x0A04(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19D5[0x128];                                   // 0x0A08(0x0128)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AMarinerProjectileFlux>> CachedFluxProjectileArray;                         // 0x0B30(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_19D6[0x10];                                    // 0x0B40(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AuthorityAdvanceToState(const EMarinerFluxProjectileState& RequestedState);
	void AuthorityClearFetchingTarget();
	bool AuthorityFallbackToState();
	void AuthorityOnGuidedHomingTargetLost();
	void AuthorityTryDestroyFetchingTarget();
	struct FVector BP_GetItemAttachPointLocation();
	bool BP_OverrideCanTraverseToState(EMarinerFluxProjectileState StateRequestingEnter, EMarinerFluxProjectileState MyCurrentState);
	void CheckInstigatorMaxProximity();
	void DropItemNearInstigator();
	void ExplodeAfterDroppingItemNearCharacter();
	void ExplodeAfterHomingStopDelay();
	void GetCurrentStateExec(EMarinerFluxProjectileState* OutStateExec);
	void MulticastSetGuidedHomingTarget(class AMarinerCharacter* AimTarget);
	void MulticastTransitionState(EMarinerFluxProjectileState RequestedState, float PreviousTransitionTimeStamp);
	void OnAuthorityCharacterInstigatorKnockedOutWhileFetching();
	void OnFetchedItemPickedUp(class AMarinerItem* Item, class AMarinerCharacter* NewItemCarrier);
	void OnInstigatorAcquiredHomingTarget(class AActor* PotentialGuidedHomingTarget);
	void OnInstigatorLostHomingTarget(class AActor* PreviousAimAssistTarget);
	void OnInstigatorSwappedHomingTarget(class AActor* PreviousAimAssistTarget, class AActor* NewPotentialGuidedHomingTarget);
	void OnPlayProjectileBounceSound();
	void OnProjectileBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void OnRep_ArcBouncePlaneConstraintYaw();
	void OnRep_CachedAutoHomingTarget();
	void OnRep_CachedFetchingTarget();
	void OnRep_CachedGuidedHomingTarget();
	void StopAtCloseHomingTarget();

	EMarinerFluxProjectileState GetCurrentState() const;
	class AMarinerItem* GetFetchedItem() const;
	class UMarinerFluxProjectileMoveComponent* GetFluxMovementComponent() const;
	bool IsAnyOtherFluxProjectileFetching() const;
	bool IsAutoHoming() const;
	bool IsBouncing() const;
	bool IsFetching() const;
	bool IsGuidedHoming() const;
	bool IsGuiding() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerProjectileFlux">();
	}
	static class AMarinerProjectileFlux* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerProjectileFlux>();
	}
};
static_assert(alignof(AMarinerProjectileFlux) == 0x000010, "Wrong alignment on AMarinerProjectileFlux");
static_assert(sizeof(AMarinerProjectileFlux) == 0x000B50, "Wrong size on AMarinerProjectileFlux");
static_assert(offsetof(AMarinerProjectileFlux, OnEnteredStateDelegate) == 0x0008B8, "Member 'AMarinerProjectileFlux::OnEnteredStateDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, OnExitedStateDelegate) == 0x0008C8, "Member 'AMarinerProjectileFlux::OnExitedStateDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, OnDroppedItemDelegate) == 0x0008D8, "Member 'AMarinerProjectileFlux::OnDroppedItemDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, OnPickedUpItemDelegate) == 0x0008E8, "Member 'AMarinerProjectileFlux::OnPickedUpItemDelegate' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, CurrentState) == 0x0008F8, "Member 'AMarinerProjectileFlux::CurrentState' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, ArcBouncePlaneConstraintYaw) == 0x0008FC, "Member 'AMarinerProjectileFlux::ArcBouncePlaneConstraintYaw' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, DefaultStateData) == 0x000904, "Member 'AMarinerProjectileFlux::DefaultStateData' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, BouncingStateData) == 0x000910, "Member 'AMarinerProjectileFlux::BouncingStateData' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, GuidingStateData) == 0x00091C, "Member 'AMarinerProjectileFlux::GuidingStateData' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, AutoHomingStateData) == 0x000928, "Member 'AMarinerProjectileFlux::AutoHomingStateData' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, GuidedHomingStateData) == 0x000934, "Member 'AMarinerProjectileFlux::GuidedHomingStateData' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, FetchingStateData) == 0x000940, "Member 'AMarinerProjectileFlux::FetchingStateData' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, RetriggerableBounceSoundDelay) == 0x00094C, "Member 'AMarinerProjectileFlux::RetriggerableBounceSoundDelay' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, BounceSound) == 0x000950, "Member 'AMarinerProjectileFlux::BounceSound' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, BouncingLifetime) == 0x000958, "Member 'AMarinerProjectileFlux::BouncingLifetime' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, MaxRangeWhileBouncing) == 0x00095C, "Member 'AMarinerProjectileFlux::MaxRangeWhileBouncing' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, MaxRangeWhileBouncingCheckFrequency) == 0x000960, "Member 'AMarinerProjectileFlux::MaxRangeWhileBouncingCheckFrequency' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, GuidingExtensionPaddingAlongLookRay) == 0x000964, "Member 'AMarinerProjectileFlux::GuidingExtensionPaddingAlongLookRay' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, GuidedMaxSpeed) == 0x000968, "Member 'AMarinerProjectileFlux::GuidedMaxSpeed' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, InstigatorGuidingTag) == 0x00096C, "Member 'AMarinerProjectileFlux::InstigatorGuidingTag' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, MaxAttackHomingTime) == 0x000974, "Member 'AMarinerProjectileFlux::MaxAttackHomingTime' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, HomingExplodeDelay) == 0x000978, "Member 'AMarinerProjectileFlux::HomingExplodeDelay' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, AutoHomingPolicy) == 0x00097C, "Member 'AMarinerProjectileFlux::AutoHomingPolicy' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, AutoHomingMaxRotationalSpeedInDegrees) == 0x000980, "Member 'AMarinerProjectileFlux::AutoHomingMaxRotationalSpeedInDegrees' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, AutoHomingTurnThresholdBeforeUsingUpVector) == 0x000984, "Member 'AMarinerProjectileFlux::AutoHomingTurnThresholdBeforeUsingUpVector' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, AutoHomingAccelerationMagnitude) == 0x000988, "Member 'AMarinerProjectileFlux::AutoHomingAccelerationMagnitude' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, AutoHomingProximity) == 0x00098C, "Member 'AMarinerProjectileFlux::AutoHomingProximity' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, GuidedHomingPolicy) == 0x000990, "Member 'AMarinerProjectileFlux::GuidedHomingPolicy' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, GuidedHomingMaxRotationalSpeedInDegrees) == 0x000994, "Member 'AMarinerProjectileFlux::GuidedHomingMaxRotationalSpeedInDegrees' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, GuidedHomingTurnThresholdBeforeUsingUpVector) == 0x000998, "Member 'AMarinerProjectileFlux::GuidedHomingTurnThresholdBeforeUsingUpVector' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, GuidedHomingAccelerationMagnitude) == 0x00099C, "Member 'AMarinerProjectileFlux::GuidedHomingAccelerationMagnitude' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, MinimumFetchDistance) == 0x0009A0, "Member 'AMarinerProjectileFlux::MinimumFetchDistance' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, FetchableItemTypeBlacklist) == 0x0009A8, "Member 'AMarinerProjectileFlux::FetchableItemTypeBlacklist' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, FetchingHomingPolicy) == 0x0009B8, "Member 'AMarinerProjectileFlux::FetchingHomingPolicy' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, FetchingMaxRotationalSpeedInDegrees) == 0x0009BC, "Member 'AMarinerProjectileFlux::FetchingMaxRotationalSpeedInDegrees' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, FetchingTurnThresholdBeforeUsingUpVector) == 0x0009C0, "Member 'AMarinerProjectileFlux::FetchingTurnThresholdBeforeUsingUpVector' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, FetchingHomingAccelerationMagnitude) == 0x0009C4, "Member 'AMarinerProjectileFlux::FetchingHomingAccelerationMagnitude' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, FetchingMaxSpeed) == 0x0009C8, "Member 'AMarinerProjectileFlux::FetchingMaxSpeed' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, InstigatorDropItemProximityCheckFrequency) == 0x0009CC, "Member 'AMarinerProjectileFlux::InstigatorDropItemProximityCheckFrequency' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, GiveItemDistance) == 0x0009D0, "Member 'AMarinerProjectileFlux::GiveItemDistance' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, FetchItemProximity) == 0x0009D4, "Member 'AMarinerProjectileFlux::FetchItemProximity' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, DropItemOnInstigatorUnableToReceiveDelay) == 0x0009D8, "Member 'AMarinerProjectileFlux::DropItemOnInstigatorUnableToReceiveDelay' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, bShouldDisableIfInstigatorKOedWhileFetching) == 0x0009DC, "Member 'AMarinerProjectileFlux::bShouldDisableIfInstigatorKOedWhileFetching' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, CachedFetchingTarget) == 0x0009E0, "Member 'AMarinerProjectileFlux::CachedFetchingTarget' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, FetchedItemVisualComponent) == 0x0009E8, "Member 'AMarinerProjectileFlux::FetchedItemVisualComponent' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, CachedAutoHomingTarget) == 0x0009F0, "Member 'AMarinerProjectileFlux::CachedAutoHomingTarget' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, CachedGuidedHomingTarget) == 0x0009F8, "Member 'AMarinerProjectileFlux::CachedGuidedHomingTarget' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, DelayBeforeDestroyStuckInPlace) == 0x000A00, "Member 'AMarinerProjectileFlux::DelayBeforeDestroyStuckInPlace' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, MaxDistanceConsideredStuckInPlace) == 0x000A04, "Member 'AMarinerProjectileFlux::MaxDistanceConsideredStuckInPlace' has a wrong offset!");
static_assert(offsetof(AMarinerProjectileFlux, CachedFluxProjectileArray) == 0x000B30, "Member 'AMarinerProjectileFlux::CachedFluxProjectileArray' has a wrong offset!");

// Class Mariner.MarinerCustomProjectionInterface
// 0x0000 (0x0028 - 0x0028)
class IMarinerCustomProjectionInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerCustomProjectionInterface">();
	}
	static class IMarinerCustomProjectionInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarinerCustomProjectionInterface>();
	}
};
static_assert(alignof(IMarinerCustomProjectionInterface) == 0x000008, "Wrong alignment on IMarinerCustomProjectionInterface");
static_assert(sizeof(IMarinerCustomProjectionInterface) == 0x000028, "Wrong size on IMarinerCustomProjectionInterface");

// Class Mariner.MarinerPromptBanner
// 0x0060 (0x0310 - 0x02B0)
class UMarinerPromptBanner : public UMarinerUserWidget
{
public:
	TSubclassOf<class UMarinerPrompt>             PromptWidget;                                      // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPromptOrientationHorizontal;                      // 0x02B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          PanelHorizontalAlignment;                          // 0x02B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            PanelVerticalAlignment;                            // 0x02BA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStretch                                      PanelStretch;                                      // 0x02BB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UserSpecifiedScale;                                // 0x02BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PromptSpacing;                                     // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19D8[0x4];                                     // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarinerPromptData>             PromptList;                                        // 0x02C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bEditorShowGamepad;                                // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19D9[0x7];                                     // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetSwitcher*                        Bound_PromptSwitcher;                              // 0x02E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         Bound_PromptHorizontalPane;                        // 0x02E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           Bound_PromptVerticalPane;                          // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMarinerPrompt*>                 PromptInstances;                                   // 0x02F8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19DA[0x8];                                     // 0x0308(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddPrompt(const struct FMarinerPromptData& Data);
	void ClearAllPrompts();
	bool ClearPrompt(EMarinerInputActions InputAction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPromptBanner">();
	}
	static class UMarinerPromptBanner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPromptBanner>();
	}
};
static_assert(alignof(UMarinerPromptBanner) == 0x000008, "Wrong alignment on UMarinerPromptBanner");
static_assert(sizeof(UMarinerPromptBanner) == 0x000310, "Wrong size on UMarinerPromptBanner");
static_assert(offsetof(UMarinerPromptBanner, PromptWidget) == 0x0002B0, "Member 'UMarinerPromptBanner::PromptWidget' has a wrong offset!");
static_assert(offsetof(UMarinerPromptBanner, bPromptOrientationHorizontal) == 0x0002B8, "Member 'UMarinerPromptBanner::bPromptOrientationHorizontal' has a wrong offset!");
static_assert(offsetof(UMarinerPromptBanner, PanelHorizontalAlignment) == 0x0002B9, "Member 'UMarinerPromptBanner::PanelHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UMarinerPromptBanner, PanelVerticalAlignment) == 0x0002BA, "Member 'UMarinerPromptBanner::PanelVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UMarinerPromptBanner, PanelStretch) == 0x0002BB, "Member 'UMarinerPromptBanner::PanelStretch' has a wrong offset!");
static_assert(offsetof(UMarinerPromptBanner, UserSpecifiedScale) == 0x0002BC, "Member 'UMarinerPromptBanner::UserSpecifiedScale' has a wrong offset!");
static_assert(offsetof(UMarinerPromptBanner, PromptSpacing) == 0x0002C0, "Member 'UMarinerPromptBanner::PromptSpacing' has a wrong offset!");
static_assert(offsetof(UMarinerPromptBanner, PromptList) == 0x0002C8, "Member 'UMarinerPromptBanner::PromptList' has a wrong offset!");
static_assert(offsetof(UMarinerPromptBanner, bEditorShowGamepad) == 0x0002D8, "Member 'UMarinerPromptBanner::bEditorShowGamepad' has a wrong offset!");
static_assert(offsetof(UMarinerPromptBanner, Bound_PromptSwitcher) == 0x0002E0, "Member 'UMarinerPromptBanner::Bound_PromptSwitcher' has a wrong offset!");
static_assert(offsetof(UMarinerPromptBanner, Bound_PromptHorizontalPane) == 0x0002E8, "Member 'UMarinerPromptBanner::Bound_PromptHorizontalPane' has a wrong offset!");
static_assert(offsetof(UMarinerPromptBanner, Bound_PromptVerticalPane) == 0x0002F0, "Member 'UMarinerPromptBanner::Bound_PromptVerticalPane' has a wrong offset!");
static_assert(offsetof(UMarinerPromptBanner, PromptInstances) == 0x0002F8, "Member 'UMarinerPromptBanner::PromptInstances' has a wrong offset!");

// Class Mariner.MarinerQuestRewardMessageBox
// 0x0000 (0x0458 - 0x0458)
class UMarinerQuestRewardMessageBox : public UMarinerMessageBoxBase
{
public:
	const struct FMarinerMessageBoxQuestRewardData GetData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerQuestRewardMessageBox">();
	}
	static class UMarinerQuestRewardMessageBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerQuestRewardMessageBox>();
	}
};
static_assert(alignof(UMarinerQuestRewardMessageBox) == 0x000008, "Wrong alignment on UMarinerQuestRewardMessageBox");
static_assert(sizeof(UMarinerQuestRewardMessageBox) == 0x000458, "Wrong size on UMarinerQuestRewardMessageBox");

// Class Mariner.MarinerRarityDataAsset
// 0x0030 (0x0060 - 0x0030)
class UMarinerRarityDataAsset final : public UDataAsset
{
public:
	class FText                                   DisplayName;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DB[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRarityDataAsset">();
	}
	static class UMarinerRarityDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRarityDataAsset>();
	}
};
static_assert(alignof(UMarinerRarityDataAsset) == 0x000008, "Wrong alignment on UMarinerRarityDataAsset");
static_assert(sizeof(UMarinerRarityDataAsset) == 0x000060, "Wrong size on UMarinerRarityDataAsset");
static_assert(offsetof(UMarinerRarityDataAsset, DisplayName) == 0x000030, "Member 'UMarinerRarityDataAsset::DisplayName' has a wrong offset!");
static_assert(offsetof(UMarinerRarityDataAsset, Color) == 0x000048, "Member 'UMarinerRarityDataAsset::Color' has a wrong offset!");
static_assert(offsetof(UMarinerRarityDataAsset, SortID) == 0x000058, "Member 'UMarinerRarityDataAsset::SortID' has a wrong offset!");

// Class Mariner.MarinerRealityObjectManager
// 0x0018 (0x0040 - 0x0028)
class UMarinerRealityObjectManager final : public UObject
{
public:
	UMulticastInlineDelegateProperty_             OnRealityChanged;                                  // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DC[0x8];                                     // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeLocalReality(EMarinerRealityState NewReality);
	void ResetReality();

	const EMarinerRealityState GetCurrentReality() const;
	bool IsLocalPlayerDefaultReality() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRealityObjectManager">();
	}
	static class UMarinerRealityObjectManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRealityObjectManager>();
	}
};
static_assert(alignof(UMarinerRealityObjectManager) == 0x000008, "Wrong alignment on UMarinerRealityObjectManager");
static_assert(sizeof(UMarinerRealityObjectManager) == 0x000040, "Wrong size on UMarinerRealityObjectManager");
static_assert(offsetof(UMarinerRealityObjectManager, OnRealityChanged) == 0x000028, "Member 'UMarinerRealityObjectManager::OnRealityChanged' has a wrong offset!");

// Class Mariner.MarinerRewardButton
// 0x0460 (0x34B8 - 0x3058)
class UMarinerRewardButton : public UMarinerItemLoaderButtonBase
{
public:
	struct FSlateBrush                            XPImage;                                           // 0x3058(0x0088)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   XPLabel;                                           // 0x30E0(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FRewardCurrencyTier>            RocketbucksTiers;                                  // 0x30F8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   RocketbucksLabel;                                  // 0x3108(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            RocketbucksNameIcon;                               // 0x3120(0x0088)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FRewardCurrencyTier>            RocketpartsTiers;                                  // 0x31A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   RocketpartsLabel;                                  // 0x31B8(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            RocketpartsNameIcon;                               // 0x31D0(0x0088)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            XPBonusPersonalImage;                              // 0x3258(0x0088)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   XPBonusPersonalLabel;                              // 0x32E0(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            XPBonusPartyImage;                                 // 0x32F8(0x0088)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   XPBonusPartyLabel;                                 // 0x3380(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   BlastPassLabel;                                    // 0x3398(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   BlastPassSeasonFmt;                                // 0x33B0(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_ItemImage;                                   // 0x33C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_RarityImage;                                 // 0x33D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            Bound_LoadingSpinner;                              // 0x33D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_EmotePanel;                                  // 0x33E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_EmoteCharacter;                              // 0x33E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_EmoteCategory;                               // 0x33F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_ItemDescription;                             // 0x33F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_ItemAuxDescription;                          // 0x3400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_RarityText;                                  // 0x3408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_RaritySymbol;                                // 0x3410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Bound_NameIcon;                                    // 0x3418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_OfferTypeGroup;                              // 0x3420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_OfferTypeText;                               // 0x3428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_DuplicatePanel;                              // 0x3430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_DuplicatePartsValue;                         // 0x3438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_TeaserPanel;                                 // 0x3440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19DD[0x70];                                    // 0x3448(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEmoteCharacterPortraitLoaded(const struct FSlateBrush& Brush);
	void PopulateBlastPass(const class FString& OfferId, const struct FMangoOrderBlastpass& BlastPassOrder);
	void PopulateBlastPassReward(const struct FMangoBlastPassReward& Reward);
	void PopulateItem(const struct FMangoItem& Item, int32 DupRocketpartsValue);
	void PopulateMangoReward(const struct FMangoReward& Reward);
	void PopulateNativeOffer(const struct FMangoNativeOffer& Nativeoffer);
	void PopulateQuestReward(const struct FMangoQuestReward& Reward);
	void PopulateRocketbucks(int32 RocketBucks);
	void PopulateRocketparts(int32 RocketParts);
	void PopulateUIItemData(const struct FMarinerUIItemButtonData& UIItemButtonData);
	void PopulateXP(int32 Xp);
	void PopulateXPBonus(EMangoBlastPassXPBonusType BonusType, int32 BonusPct);

	class UImage* GetRarityImage() const;
	const struct FMarinerUIItemButtonData GetUIItemButtonData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRewardButton">();
	}
	static class UMarinerRewardButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRewardButton>();
	}
};
static_assert(alignof(UMarinerRewardButton) == 0x000008, "Wrong alignment on UMarinerRewardButton");
static_assert(sizeof(UMarinerRewardButton) == 0x0034B8, "Wrong size on UMarinerRewardButton");
static_assert(offsetof(UMarinerRewardButton, XPImage) == 0x003058, "Member 'UMarinerRewardButton::XPImage' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, XPLabel) == 0x0030E0, "Member 'UMarinerRewardButton::XPLabel' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, RocketbucksTiers) == 0x0030F8, "Member 'UMarinerRewardButton::RocketbucksTiers' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, RocketbucksLabel) == 0x003108, "Member 'UMarinerRewardButton::RocketbucksLabel' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, RocketbucksNameIcon) == 0x003120, "Member 'UMarinerRewardButton::RocketbucksNameIcon' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, RocketpartsTiers) == 0x0031A8, "Member 'UMarinerRewardButton::RocketpartsTiers' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, RocketpartsLabel) == 0x0031B8, "Member 'UMarinerRewardButton::RocketpartsLabel' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, RocketpartsNameIcon) == 0x0031D0, "Member 'UMarinerRewardButton::RocketpartsNameIcon' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, XPBonusPersonalImage) == 0x003258, "Member 'UMarinerRewardButton::XPBonusPersonalImage' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, XPBonusPersonalLabel) == 0x0032E0, "Member 'UMarinerRewardButton::XPBonusPersonalLabel' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, XPBonusPartyImage) == 0x0032F8, "Member 'UMarinerRewardButton::XPBonusPartyImage' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, XPBonusPartyLabel) == 0x003380, "Member 'UMarinerRewardButton::XPBonusPartyLabel' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, BlastPassLabel) == 0x003398, "Member 'UMarinerRewardButton::BlastPassLabel' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, BlastPassSeasonFmt) == 0x0033B0, "Member 'UMarinerRewardButton::BlastPassSeasonFmt' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_ItemImage) == 0x0033C8, "Member 'UMarinerRewardButton::Bound_ItemImage' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_RarityImage) == 0x0033D0, "Member 'UMarinerRewardButton::Bound_RarityImage' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_LoadingSpinner) == 0x0033D8, "Member 'UMarinerRewardButton::Bound_LoadingSpinner' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_EmotePanel) == 0x0033E0, "Member 'UMarinerRewardButton::Bound_EmotePanel' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_EmoteCharacter) == 0x0033E8, "Member 'UMarinerRewardButton::Bound_EmoteCharacter' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_EmoteCategory) == 0x0033F0, "Member 'UMarinerRewardButton::Bound_EmoteCategory' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_ItemDescription) == 0x0033F8, "Member 'UMarinerRewardButton::Bound_ItemDescription' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_ItemAuxDescription) == 0x003400, "Member 'UMarinerRewardButton::Bound_ItemAuxDescription' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_RarityText) == 0x003408, "Member 'UMarinerRewardButton::Bound_RarityText' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_RaritySymbol) == 0x003410, "Member 'UMarinerRewardButton::Bound_RaritySymbol' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_NameIcon) == 0x003418, "Member 'UMarinerRewardButton::Bound_NameIcon' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_OfferTypeGroup) == 0x003420, "Member 'UMarinerRewardButton::Bound_OfferTypeGroup' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_OfferTypeText) == 0x003428, "Member 'UMarinerRewardButton::Bound_OfferTypeText' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_DuplicatePanel) == 0x003430, "Member 'UMarinerRewardButton::Bound_DuplicatePanel' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_DuplicatePartsValue) == 0x003438, "Member 'UMarinerRewardButton::Bound_DuplicatePartsValue' has a wrong offset!");
static_assert(offsetof(UMarinerRewardButton, Bound_TeaserPanel) == 0x003440, "Member 'UMarinerRewardButton::Bound_TeaserPanel' has a wrong offset!");

// Class Mariner.MarinerRewardsPreview
// 0x0018 (0x0310 - 0x02F8)
class UMarinerRewardsPreview : public UMarinerPagedVerticalBox
{
public:
	TSubclassOf<class UMarinerRewardPreview>      RewardPreviewSubclass;                             // 0x02F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19E0[0x10];                                    // 0x0300(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitRewardsPreview(const struct FMangoQuestReward& InRewards, const struct FMangoQuest& InQuest);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRewardsPreview">();
	}
	static class UMarinerRewardsPreview* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRewardsPreview>();
	}
};
static_assert(alignof(UMarinerRewardsPreview) == 0x000008, "Wrong alignment on UMarinerRewardsPreview");
static_assert(sizeof(UMarinerRewardsPreview) == 0x000310, "Wrong size on UMarinerRewardsPreview");
static_assert(offsetof(UMarinerRewardsPreview, RewardPreviewSubclass) == 0x0002F8, "Member 'UMarinerRewardsPreview::RewardPreviewSubclass' has a wrong offset!");

// Class Mariner.MarinerRocketTotemCompanionAnim
// 0x0010 (0x0280 - 0x0270)
class UMarinerRocketTotemCompanionAnim : public UAnimInstance
{
public:
	bool                                          bStartAnim;                                        // 0x0268(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPlayVictory;                                      // 0x0269(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPostGame;                                         // 0x026A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19E1[0x5];                                     // 0x026B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerRocketTotem*                    OwningTotem;                                       // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CheckForPostGame();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRocketTotemCompanionAnim">();
	}
	static class UMarinerRocketTotemCompanionAnim* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRocketTotemCompanionAnim>();
	}
};
static_assert(alignof(UMarinerRocketTotemCompanionAnim) == 0x000010, "Wrong alignment on UMarinerRocketTotemCompanionAnim");
static_assert(sizeof(UMarinerRocketTotemCompanionAnim) == 0x000280, "Wrong size on UMarinerRocketTotemCompanionAnim");
static_assert(offsetof(UMarinerRocketTotemCompanionAnim, bStartAnim) == 0x000268, "Member 'UMarinerRocketTotemCompanionAnim::bStartAnim' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemCompanionAnim, bPlayVictory) == 0x000269, "Member 'UMarinerRocketTotemCompanionAnim::bPlayVictory' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemCompanionAnim, bPostGame) == 0x00026A, "Member 'UMarinerRocketTotemCompanionAnim::bPostGame' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemCompanionAnim, OwningTotem) == 0x000270, "Member 'UMarinerRocketTotemCompanionAnim::OwningTotem' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemCompanionAnim, SkeletalMesh) == 0x000278, "Member 'UMarinerRocketTotemCompanionAnim::SkeletalMesh' has a wrong offset!");

// Class Mariner.MarinerRocketTotemPatternDataAsset
// 0x0030 (0x00C8 - 0x0098)
class UMarinerRocketTotemPatternDataAsset final : public UMarinerCMSItemWithIconAndColor
{
public:
	class UTexture2D*                             FlagPatternTexture;                                // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerPBRProperties                  SecondaryVisualProperties;                         // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRocketTotemPatternDataAsset">();
	}
	static class UMarinerRocketTotemPatternDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRocketTotemPatternDataAsset>();
	}
};
static_assert(alignof(UMarinerRocketTotemPatternDataAsset) == 0x000008, "Wrong alignment on UMarinerRocketTotemPatternDataAsset");
static_assert(sizeof(UMarinerRocketTotemPatternDataAsset) == 0x0000C8, "Wrong size on UMarinerRocketTotemPatternDataAsset");
static_assert(offsetof(UMarinerRocketTotemPatternDataAsset, FlagPatternTexture) == 0x000098, "Member 'UMarinerRocketTotemPatternDataAsset::FlagPatternTexture' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemPatternDataAsset, SecondaryVisualProperties) == 0x0000A0, "Member 'UMarinerRocketTotemPatternDataAsset::SecondaryVisualProperties' has a wrong offset!");

// Class Mariner.MarinerRocketTotemStandDataAsset
// 0x0028 (0x0098 - 0x0070)
class UMarinerRocketTotemStandDataAsset final : public UMarinerCMSItemWithIcon
{
public:
	class UStaticMesh*                            StandMesh;                                         // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMaterialOverride>              MaterialOverrides;                                 // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AActor>>             FXActorsToSpawn;                                   // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRocketTotemStandDataAsset">();
	}
	static class UMarinerRocketTotemStandDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRocketTotemStandDataAsset>();
	}
};
static_assert(alignof(UMarinerRocketTotemStandDataAsset) == 0x000008, "Wrong alignment on UMarinerRocketTotemStandDataAsset");
static_assert(sizeof(UMarinerRocketTotemStandDataAsset) == 0x000098, "Wrong size on UMarinerRocketTotemStandDataAsset");
static_assert(offsetof(UMarinerRocketTotemStandDataAsset, StandMesh) == 0x000070, "Member 'UMarinerRocketTotemStandDataAsset::StandMesh' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemStandDataAsset, MaterialOverrides) == 0x000078, "Member 'UMarinerRocketTotemStandDataAsset::MaterialOverrides' has a wrong offset!");
static_assert(offsetof(UMarinerRocketTotemStandDataAsset, FXActorsToSpawn) == 0x000088, "Member 'UMarinerRocketTotemStandDataAsset::FXActorsToSpawn' has a wrong offset!");

// Class Mariner.MarinerRootMotionMoveUpdateDefaults_ConstantForce
// 0x0040 (0x0078 - 0x0038)
class UMarinerRootMotionMoveUpdateDefaults_ConstantForce final : public UMarinerRootMotionMoveUpdateDefaults
{
public:
	struct FVector                                DefaultWorldDirection;                             // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultDuration;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultIsAdditive;                                // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E2[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DefaultStrengthOverTime;                           // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultStrength;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 DefaultVelocityOnFinishMode;                       // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E3[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultClampVelocityOnFinish;                      // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DefaultSetVelocityOnFinish;                        // 0x0064(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldOverrideAbilityRootmotions;                 // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E4[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void ApplyConstantForceRootMotion(class UMarinerCharacterMovement* OwningMovementComponent, TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_ConstantForce> Defaults, const struct FVector& WorldDirection, float Duration, bool bIsAdditive, class UCurveFloat* StrengthOverTime, float Strength, ERootMotionFinishVelocityMode VelocityOnFinishMode, float ClampVelocityOnFinish, const struct FVector& SetVelocityOnFinish);
	static class FName GetConstantForceRootMotionName();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRootMotionMoveUpdateDefaults_ConstantForce">();
	}
	static class UMarinerRootMotionMoveUpdateDefaults_ConstantForce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRootMotionMoveUpdateDefaults_ConstantForce>();
	}
};
static_assert(alignof(UMarinerRootMotionMoveUpdateDefaults_ConstantForce) == 0x000008, "Wrong alignment on UMarinerRootMotionMoveUpdateDefaults_ConstantForce");
static_assert(sizeof(UMarinerRootMotionMoveUpdateDefaults_ConstantForce) == 0x000078, "Wrong size on UMarinerRootMotionMoveUpdateDefaults_ConstantForce");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_ConstantForce, DefaultWorldDirection) == 0x000038, "Member 'UMarinerRootMotionMoveUpdateDefaults_ConstantForce::DefaultWorldDirection' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_ConstantForce, DefaultDuration) == 0x000044, "Member 'UMarinerRootMotionMoveUpdateDefaults_ConstantForce::DefaultDuration' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_ConstantForce, bDefaultIsAdditive) == 0x000048, "Member 'UMarinerRootMotionMoveUpdateDefaults_ConstantForce::bDefaultIsAdditive' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_ConstantForce, DefaultStrengthOverTime) == 0x000050, "Member 'UMarinerRootMotionMoveUpdateDefaults_ConstantForce::DefaultStrengthOverTime' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_ConstantForce, DefaultStrength) == 0x000058, "Member 'UMarinerRootMotionMoveUpdateDefaults_ConstantForce::DefaultStrength' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_ConstantForce, DefaultVelocityOnFinishMode) == 0x00005C, "Member 'UMarinerRootMotionMoveUpdateDefaults_ConstantForce::DefaultVelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_ConstantForce, DefaultClampVelocityOnFinish) == 0x000060, "Member 'UMarinerRootMotionMoveUpdateDefaults_ConstantForce::DefaultClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_ConstantForce, DefaultSetVelocityOnFinish) == 0x000064, "Member 'UMarinerRootMotionMoveUpdateDefaults_ConstantForce::DefaultSetVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_ConstantForce, bShouldOverrideAbilityRootmotions) == 0x000070, "Member 'UMarinerRootMotionMoveUpdateDefaults_ConstantForce::bShouldOverrideAbilityRootmotions' has a wrong offset!");

// Class Mariner.MarinerRootMotionMoveUpdateDefaults_LerpToSpeed
// 0x0020 (0x0058 - 0x0038)
class UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed final : public UMarinerRootMotionMoveUpdateDefaults
{
public:
	float                                         DefaultDuration;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultExtendedDurationOnStop;                     // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DefaultVelocityChangeOverTimeCurve;                // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultStartingVelocityMagnitude;                  // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultTargetVelocityMagnitude;                    // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerLerpToSpeedRootMotionPolicy           DefaultLerpTowardsTargetPolicy;                    // 0x0050(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E7[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class FName GetLerpToSpeedRootMotionName();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRootMotionMoveUpdateDefaults_LerpToSpeed">();
	}
	static class UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed>();
	}
};
static_assert(alignof(UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed) == 0x000008, "Wrong alignment on UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed");
static_assert(sizeof(UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed) == 0x000058, "Wrong size on UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed, DefaultDuration) == 0x000038, "Member 'UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed::DefaultDuration' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed, DefaultExtendedDurationOnStop) == 0x00003C, "Member 'UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed::DefaultExtendedDurationOnStop' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed, DefaultVelocityChangeOverTimeCurve) == 0x000040, "Member 'UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed::DefaultVelocityChangeOverTimeCurve' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed, DefaultStartingVelocityMagnitude) == 0x000048, "Member 'UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed::DefaultStartingVelocityMagnitude' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed, DefaultTargetVelocityMagnitude) == 0x00004C, "Member 'UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed::DefaultTargetVelocityMagnitude' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed, DefaultLerpTowardsTargetPolicy) == 0x000050, "Member 'UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed::DefaultLerpTowardsTargetPolicy' has a wrong offset!");

// Class Mariner.MarinerRootMotionMoveUpdateDefaults_SlowToStop
// 0x0018 (0x0050 - 0x0038)
class UMarinerRootMotionMoveUpdateDefaults_SlowToStop final : public UMarinerRootMotionMoveUpdateDefaults
{
public:
	float                                         DefaultDuration;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E8[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DefaultDecelerationCurve;                          // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultStartingCharacterSpeed;                     // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E9[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class FName GetSlowToStopRootMotionName();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerRootMotionMoveUpdateDefaults_SlowToStop">();
	}
	static class UMarinerRootMotionMoveUpdateDefaults_SlowToStop* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerRootMotionMoveUpdateDefaults_SlowToStop>();
	}
};
static_assert(alignof(UMarinerRootMotionMoveUpdateDefaults_SlowToStop) == 0x000008, "Wrong alignment on UMarinerRootMotionMoveUpdateDefaults_SlowToStop");
static_assert(sizeof(UMarinerRootMotionMoveUpdateDefaults_SlowToStop) == 0x000050, "Wrong size on UMarinerRootMotionMoveUpdateDefaults_SlowToStop");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_SlowToStop, DefaultDuration) == 0x000038, "Member 'UMarinerRootMotionMoveUpdateDefaults_SlowToStop::DefaultDuration' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_SlowToStop, DefaultDecelerationCurve) == 0x000040, "Member 'UMarinerRootMotionMoveUpdateDefaults_SlowToStop::DefaultDecelerationCurve' has a wrong offset!");
static_assert(offsetof(UMarinerRootMotionMoveUpdateDefaults_SlowToStop, DefaultStartingCharacterSpeed) == 0x000048, "Member 'UMarinerRootMotionMoveUpdateDefaults_SlowToStop::DefaultStartingCharacterSpeed' has a wrong offset!");

// Class Mariner.MarinerSafeToLeaveInfoWidget
// 0x0048 (0x04A8 - 0x0460)
class UMarinerSafeToLeaveInfoWidget final : public UMarinerHUDWidget
{
public:
	int32                                         OnScreenTime;                                      // 0x0460(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19EA[0x4];                                     // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SessionIsSafeToLeave;                              // 0x0468(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SessionIsSafeToLeaveWithEarlyDisconnect;           // 0x0480(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_TextInfo;                                    // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19EB[0x8];                                     // 0x04A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGameSafeToLeave(bool bEarlyDisconnect);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSafeToLeaveInfoWidget">();
	}
	static class UMarinerSafeToLeaveInfoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSafeToLeaveInfoWidget>();
	}
};
static_assert(alignof(UMarinerSafeToLeaveInfoWidget) == 0x000008, "Wrong alignment on UMarinerSafeToLeaveInfoWidget");
static_assert(sizeof(UMarinerSafeToLeaveInfoWidget) == 0x0004A8, "Wrong size on UMarinerSafeToLeaveInfoWidget");
static_assert(offsetof(UMarinerSafeToLeaveInfoWidget, OnScreenTime) == 0x000460, "Member 'UMarinerSafeToLeaveInfoWidget::OnScreenTime' has a wrong offset!");
static_assert(offsetof(UMarinerSafeToLeaveInfoWidget, SessionIsSafeToLeave) == 0x000468, "Member 'UMarinerSafeToLeaveInfoWidget::SessionIsSafeToLeave' has a wrong offset!");
static_assert(offsetof(UMarinerSafeToLeaveInfoWidget, SessionIsSafeToLeaveWithEarlyDisconnect) == 0x000480, "Member 'UMarinerSafeToLeaveInfoWidget::SessionIsSafeToLeaveWithEarlyDisconnect' has a wrong offset!");
static_assert(offsetof(UMarinerSafeToLeaveInfoWidget, Bound_TextInfo) == 0x000498, "Member 'UMarinerSafeToLeaveInfoWidget::Bound_TextInfo' has a wrong offset!");

// Class Mariner.MarinerScaleBox
// 0x0020 (0x0160 - 0x0140)
class UMarinerScaleBox final : public UScaleBox
{
public:
	uint8                                         Pad_19EC[0x20];                                    // 0x0140(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerScaleBox">();
	}
	static class UMarinerScaleBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerScaleBox>();
	}
};
static_assert(alignof(UMarinerScaleBox) == 0x000008, "Wrong alignment on UMarinerScaleBox");
static_assert(sizeof(UMarinerScaleBox) == 0x000160, "Wrong size on UMarinerScaleBox");

// Class Mariner.MarinerScoreboardIndividualStat
// 0x0018 (0x0248 - 0x0230)
class UMarinerScoreboardIndividualStat final : public UUserWidget
{
public:
	class UTextBlock*                             Bound_StatName;                                    // 0x0230(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_StatValue;                                   // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19ED[0x8];                                     // 0x0240(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerScoreboardIndividualStat">();
	}
	static class UMarinerScoreboardIndividualStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerScoreboardIndividualStat>();
	}
};
static_assert(alignof(UMarinerScoreboardIndividualStat) == 0x000008, "Wrong alignment on UMarinerScoreboardIndividualStat");
static_assert(sizeof(UMarinerScoreboardIndividualStat) == 0x000248, "Wrong size on UMarinerScoreboardIndividualStat");
static_assert(offsetof(UMarinerScoreboardIndividualStat, Bound_StatName) == 0x000230, "Member 'UMarinerScoreboardIndividualStat::Bound_StatName' has a wrong offset!");
static_assert(offsetof(UMarinerScoreboardIndividualStat, Bound_StatValue) == 0x000238, "Member 'UMarinerScoreboardIndividualStat::Bound_StatValue' has a wrong offset!");

// Class Mariner.MarinerScoreboardStats
// 0x0100 (0x0330 - 0x0230)
class UMarinerScoreboardStats final : public UUserWidget
{
public:
	class UUniformGridPanel*                      Bound_StatRoot;                                    // 0x0230(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19EE[0xF8];                                    // 0x0238(0x00F8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerStateReplicated(class AMarinerPlayerController* ControllerHostingState);
	void OnStatChanged(class AMarinerPlayerState* PlayerWithStatChange, class FName StatName, int32 StatValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerScoreboardStats">();
	}
	static class UMarinerScoreboardStats* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerScoreboardStats>();
	}
};
static_assert(alignof(UMarinerScoreboardStats) == 0x000008, "Wrong alignment on UMarinerScoreboardStats");
static_assert(sizeof(UMarinerScoreboardStats) == 0x000330, "Wrong size on UMarinerScoreboardStats");
static_assert(offsetof(UMarinerScoreboardStats, Bound_StatRoot) == 0x000230, "Member 'UMarinerScoreboardStats::Bound_StatRoot' has a wrong offset!");

// Class Mariner.MarinerScrollBox
// 0x0028 (0x08A8 - 0x0880)
class UMarinerScrollBox final : public UScrollBox
{
public:
	uint8                                         Pad_19F0[0x20];                                    // 0x0880(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bWrap;                                             // 0x08A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanHighlightInternalWidgets;                      // 0x08A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseAltInput;                                      // 0x08A2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19F1[0x1];                                     // 0x08A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScrollSpeed;                                       // 0x08A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ClearHighlighting();
	void HighlightWidgetViaIndex(int32 Param_Index);
	void ScrollByAmount(float Amount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerScrollBox">();
	}
	static class UMarinerScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerScrollBox>();
	}
};
static_assert(alignof(UMarinerScrollBox) == 0x000008, "Wrong alignment on UMarinerScrollBox");
static_assert(sizeof(UMarinerScrollBox) == 0x0008A8, "Wrong size on UMarinerScrollBox");
static_assert(offsetof(UMarinerScrollBox, bWrap) == 0x0008A0, "Member 'UMarinerScrollBox::bWrap' has a wrong offset!");
static_assert(offsetof(UMarinerScrollBox, bCanHighlightInternalWidgets) == 0x0008A1, "Member 'UMarinerScrollBox::bCanHighlightInternalWidgets' has a wrong offset!");
static_assert(offsetof(UMarinerScrollBox, bUseAltInput) == 0x0008A2, "Member 'UMarinerScrollBox::bUseAltInput' has a wrong offset!");
static_assert(offsetof(UMarinerScrollBox, ScrollSpeed) == 0x0008A4, "Member 'UMarinerScrollBox::ScrollSpeed' has a wrong offset!");

// Class Mariner.MarinerServerWidget
// 0x0058 (0x0308 - 0x02B0)
class UMarinerServerWidget : public UMarinerUserWidget
{
public:
	uint8                                         Pad_19F2[0x58];                                    // 0x02B0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Join();
	void OnServerWidgetCreated(const class FText& Param_Name, const class FText& Ping, const class FText& PlayerCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerServerWidget">();
	}
	static class UMarinerServerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerServerWidget>();
	}
};
static_assert(alignof(UMarinerServerWidget) == 0x000008, "Wrong alignment on UMarinerServerWidget");
static_assert(sizeof(UMarinerServerWidget) == 0x000308, "Wrong size on UMarinerServerWidget");

// Class Mariner.MarinerServiceInterruptWidget
// 0x0028 (0x0440 - 0x0418)
class UMarinerServiceInterruptWidget : public UMarinerAnimatedWidget
{
public:
	class FText                                   LobbyServiceInterruptText;                         // 0x0418(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_MessageText;                                 // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19F3[0x8];                                     // 0x0438(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerServiceInterruptWidget">();
	}
	static class UMarinerServiceInterruptWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerServiceInterruptWidget>();
	}
};
static_assert(alignof(UMarinerServiceInterruptWidget) == 0x000008, "Wrong alignment on UMarinerServiceInterruptWidget");
static_assert(sizeof(UMarinerServiceInterruptWidget) == 0x000440, "Wrong size on UMarinerServiceInterruptWidget");
static_assert(offsetof(UMarinerServiceInterruptWidget, LobbyServiceInterruptText) == 0x000418, "Member 'UMarinerServiceInterruptWidget::LobbyServiceInterruptText' has a wrong offset!");
static_assert(offsetof(UMarinerServiceInterruptWidget, Bound_MessageText) == 0x000430, "Member 'UMarinerServiceInterruptWidget::Bound_MessageText' has a wrong offset!");

// Class Mariner.MarinerSettingButton
// 0x0018 (0x04B8 - 0x04A0)
class UMarinerSettingButton : public UMarinerSettingBase
{
public:
	UMulticastInlineDelegateProperty_             OnSelected;                                        // 0x04A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SelectedSFX;                                       // 0x04B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void HandleSelected();

	struct FMarinerSettingButtonAssets GetAssets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSettingButton">();
	}
	static class UMarinerSettingButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSettingButton>();
	}
};
static_assert(alignof(UMarinerSettingButton) == 0x000008, "Wrong alignment on UMarinerSettingButton");
static_assert(sizeof(UMarinerSettingButton) == 0x0004B8, "Wrong size on UMarinerSettingButton");
static_assert(offsetof(UMarinerSettingButton, OnSelected) == 0x0004A0, "Member 'UMarinerSettingButton::OnSelected' has a wrong offset!");
static_assert(offsetof(UMarinerSettingButton, SelectedSFX) == 0x0004B0, "Member 'UMarinerSettingButton::SelectedSFX' has a wrong offset!");

// Class Mariner.MarinerSettingKeyBinding
// 0x00B0 (0x0550 - 0x04A0)
class UMarinerSettingKeyBinding : public UMarinerSettingBase
{
public:
	TArray<EMarinerInputActions>                  ActionList;                                        // 0x04A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKey>                           BindingExceptions;                                 // 0x04B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKey>                           MenuActionExceptions;                              // 0x04C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FLinearColor                           UnboundLabelColor;                                 // 0x04D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           UnboundBackgroundColor;                            // 0x04E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnKeyBindingInit;                                  // 0x04F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnKeyBindingChanged;                               // 0x0500(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          SelectedSFX;                                       // 0x0510(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19F4[0x38];                                    // 0x0518(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckBindingInUse(const struct FKey& Binding);
	void HandleInputBindingsChanged();
	void InUseCancelCallback(const struct FKey& Key);
	void InUseConfirmCallback(const struct FKey& Key);
	void MenuActionCallBack(const struct FKey& Key);
	void SetBinding(const struct FKey& Binding);
	void ShowBindingMessageBox();
	void ShowInUseMessageBox(const struct FKey& Key, EMarinerInputActions PrevBoundAction);
	void ShowMenuActionMessageBox();

	struct FMarinerSettingKeyBindingAssets GetAssets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSettingKeyBinding">();
	}
	static class UMarinerSettingKeyBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSettingKeyBinding>();
	}
};
static_assert(alignof(UMarinerSettingKeyBinding) == 0x000008, "Wrong alignment on UMarinerSettingKeyBinding");
static_assert(sizeof(UMarinerSettingKeyBinding) == 0x000550, "Wrong size on UMarinerSettingKeyBinding");
static_assert(offsetof(UMarinerSettingKeyBinding, ActionList) == 0x0004A0, "Member 'UMarinerSettingKeyBinding::ActionList' has a wrong offset!");
static_assert(offsetof(UMarinerSettingKeyBinding, BindingExceptions) == 0x0004B0, "Member 'UMarinerSettingKeyBinding::BindingExceptions' has a wrong offset!");
static_assert(offsetof(UMarinerSettingKeyBinding, MenuActionExceptions) == 0x0004C0, "Member 'UMarinerSettingKeyBinding::MenuActionExceptions' has a wrong offset!");
static_assert(offsetof(UMarinerSettingKeyBinding, UnboundLabelColor) == 0x0004D0, "Member 'UMarinerSettingKeyBinding::UnboundLabelColor' has a wrong offset!");
static_assert(offsetof(UMarinerSettingKeyBinding, UnboundBackgroundColor) == 0x0004E0, "Member 'UMarinerSettingKeyBinding::UnboundBackgroundColor' has a wrong offset!");
static_assert(offsetof(UMarinerSettingKeyBinding, OnKeyBindingInit) == 0x0004F0, "Member 'UMarinerSettingKeyBinding::OnKeyBindingInit' has a wrong offset!");
static_assert(offsetof(UMarinerSettingKeyBinding, OnKeyBindingChanged) == 0x000500, "Member 'UMarinerSettingKeyBinding::OnKeyBindingChanged' has a wrong offset!");
static_assert(offsetof(UMarinerSettingKeyBinding, SelectedSFX) == 0x000510, "Member 'UMarinerSettingKeyBinding::SelectedSFX' has a wrong offset!");

// Class Mariner.MarinerSettingsGlobals
// 0x00A0 (0x00D0 - 0x0030)
class UMarinerSettingsGlobals final : public UDataAsset
{
public:
	bool                                          bShowNetworkInformation;                           // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPartyIsPrivate;                                   // 0x0031(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerCrossplayState                        CrossplayState;                                    // 0x0032(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F6[0x1];                                     // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScreenPercentage;                                  // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AntiAliasingQuality;                               // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PostProcessingQuality;                             // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureQuality;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowQuality;                                     // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectsQuality;                                    // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SSRQuality;                                        // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameRate;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVSync;                                            // 0x0054(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWindowMode                                   FullscreenMode;                                    // 0x0055(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F7[0x2];                                     // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Gamma;                                             // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalFOV;                                     // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasterVolume;                                      // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MusicVolume;                                       // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SFXVolume;                                         // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceVolume;                                       // 0x006C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceChatVolume;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVoiceChatEnabled;                                 // 0x0074(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPushToTalkEnabled;                                // 0x0075(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F8[0x2];                                     // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SensitivityBehavior;                               // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStickAcceleration;                                // 0x007C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerAimAssistState                        AimAssistState;                                    // 0x007D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F9[0x2];                                     // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FastTurnState;                                     // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVibration;                                        // 0x0084(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHorizontalInvert;                                 // 0x0085(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVerticalInvert;                                   // 0x0086(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19FA[0x1];                                     // 0x0087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ButtonLayout;                                      // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControllerAxialDeadzone;                           // 0x008C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControllerInnerRadialDeadzone;                     // 0x0090(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControllerOuterRadialDeadzone;                     // 0x0094(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControllerMenuDeadzone;                            // 0x0098(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseSensitivityX;                                 // 0x009C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseSensitivityY;                                 // 0x00A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MouseSensitivityRange;                             // 0x00A4(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19FB[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            MouseSensitivityCurve;                             // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MouseInvertedX;                                    // 0x00B8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MouseInvertedY;                                    // 0x00B9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNarrationEnabled;                                 // 0x00BA(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowInGameIcons;                                  // 0x00BB(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubtitlesEnabled;                                 // 0x00BC(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTextToSpeechEnabled;                              // 0x00BD(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpeechToTextEnabled;                              // 0x00BE(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EColorVisionDeficiency                        ColorDeficiency;                                   // 0x00BF(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorDeficiencySeverity;                           // 0x00C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MenuNarrationVolume;                               // 0x00C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShareUsageData;                                   // 0x00C8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShareExternalUsageData;                           // 0x00C9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19FC[0x6];                                     // 0x00CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSettingsGlobals">();
	}
	static class UMarinerSettingsGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSettingsGlobals>();
	}
};
static_assert(alignof(UMarinerSettingsGlobals) == 0x000008, "Wrong alignment on UMarinerSettingsGlobals");
static_assert(sizeof(UMarinerSettingsGlobals) == 0x0000D0, "Wrong size on UMarinerSettingsGlobals");
static_assert(offsetof(UMarinerSettingsGlobals, bShowNetworkInformation) == 0x000030, "Member 'UMarinerSettingsGlobals::bShowNetworkInformation' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, bPartyIsPrivate) == 0x000031, "Member 'UMarinerSettingsGlobals::bPartyIsPrivate' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, CrossplayState) == 0x000032, "Member 'UMarinerSettingsGlobals::CrossplayState' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, ScreenPercentage) == 0x000034, "Member 'UMarinerSettingsGlobals::ScreenPercentage' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, AntiAliasingQuality) == 0x000038, "Member 'UMarinerSettingsGlobals::AntiAliasingQuality' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, PostProcessingQuality) == 0x00003C, "Member 'UMarinerSettingsGlobals::PostProcessingQuality' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, TextureQuality) == 0x000040, "Member 'UMarinerSettingsGlobals::TextureQuality' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, ShadowQuality) == 0x000044, "Member 'UMarinerSettingsGlobals::ShadowQuality' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, EffectsQuality) == 0x000048, "Member 'UMarinerSettingsGlobals::EffectsQuality' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, SSRQuality) == 0x00004C, "Member 'UMarinerSettingsGlobals::SSRQuality' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, FrameRate) == 0x000050, "Member 'UMarinerSettingsGlobals::FrameRate' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, bVSync) == 0x000054, "Member 'UMarinerSettingsGlobals::bVSync' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, FullscreenMode) == 0x000055, "Member 'UMarinerSettingsGlobals::FullscreenMode' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, Gamma) == 0x000058, "Member 'UMarinerSettingsGlobals::Gamma' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, HorizontalFOV) == 0x00005C, "Member 'UMarinerSettingsGlobals::HorizontalFOV' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, MasterVolume) == 0x000060, "Member 'UMarinerSettingsGlobals::MasterVolume' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, MusicVolume) == 0x000064, "Member 'UMarinerSettingsGlobals::MusicVolume' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, SFXVolume) == 0x000068, "Member 'UMarinerSettingsGlobals::SFXVolume' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, VoiceVolume) == 0x00006C, "Member 'UMarinerSettingsGlobals::VoiceVolume' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, VoiceChatVolume) == 0x000070, "Member 'UMarinerSettingsGlobals::VoiceChatVolume' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, bVoiceChatEnabled) == 0x000074, "Member 'UMarinerSettingsGlobals::bVoiceChatEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, bPushToTalkEnabled) == 0x000075, "Member 'UMarinerSettingsGlobals::bPushToTalkEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, SensitivityBehavior) == 0x000078, "Member 'UMarinerSettingsGlobals::SensitivityBehavior' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, bStickAcceleration) == 0x00007C, "Member 'UMarinerSettingsGlobals::bStickAcceleration' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, AimAssistState) == 0x00007D, "Member 'UMarinerSettingsGlobals::AimAssistState' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, FastTurnState) == 0x000080, "Member 'UMarinerSettingsGlobals::FastTurnState' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, bVibration) == 0x000084, "Member 'UMarinerSettingsGlobals::bVibration' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, bHorizontalInvert) == 0x000085, "Member 'UMarinerSettingsGlobals::bHorizontalInvert' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, bVerticalInvert) == 0x000086, "Member 'UMarinerSettingsGlobals::bVerticalInvert' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, ButtonLayout) == 0x000088, "Member 'UMarinerSettingsGlobals::ButtonLayout' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, ControllerAxialDeadzone) == 0x00008C, "Member 'UMarinerSettingsGlobals::ControllerAxialDeadzone' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, ControllerInnerRadialDeadzone) == 0x000090, "Member 'UMarinerSettingsGlobals::ControllerInnerRadialDeadzone' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, ControllerOuterRadialDeadzone) == 0x000094, "Member 'UMarinerSettingsGlobals::ControllerOuterRadialDeadzone' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, ControllerMenuDeadzone) == 0x000098, "Member 'UMarinerSettingsGlobals::ControllerMenuDeadzone' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, MouseSensitivityX) == 0x00009C, "Member 'UMarinerSettingsGlobals::MouseSensitivityX' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, MouseSensitivityY) == 0x0000A0, "Member 'UMarinerSettingsGlobals::MouseSensitivityY' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, MouseSensitivityRange) == 0x0000A4, "Member 'UMarinerSettingsGlobals::MouseSensitivityRange' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, MouseSensitivityCurve) == 0x0000B0, "Member 'UMarinerSettingsGlobals::MouseSensitivityCurve' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, MouseInvertedX) == 0x0000B8, "Member 'UMarinerSettingsGlobals::MouseInvertedX' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, MouseInvertedY) == 0x0000B9, "Member 'UMarinerSettingsGlobals::MouseInvertedY' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, bNarrationEnabled) == 0x0000BA, "Member 'UMarinerSettingsGlobals::bNarrationEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, bShowInGameIcons) == 0x0000BB, "Member 'UMarinerSettingsGlobals::bShowInGameIcons' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, bSubtitlesEnabled) == 0x0000BC, "Member 'UMarinerSettingsGlobals::bSubtitlesEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, bTextToSpeechEnabled) == 0x0000BD, "Member 'UMarinerSettingsGlobals::bTextToSpeechEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, bSpeechToTextEnabled) == 0x0000BE, "Member 'UMarinerSettingsGlobals::bSpeechToTextEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, ColorDeficiency) == 0x0000BF, "Member 'UMarinerSettingsGlobals::ColorDeficiency' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, ColorDeficiencySeverity) == 0x0000C0, "Member 'UMarinerSettingsGlobals::ColorDeficiencySeverity' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, MenuNarrationVolume) == 0x0000C4, "Member 'UMarinerSettingsGlobals::MenuNarrationVolume' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, bShareUsageData) == 0x0000C8, "Member 'UMarinerSettingsGlobals::bShareUsageData' has a wrong offset!");
static_assert(offsetof(UMarinerSettingsGlobals, bShareExternalUsageData) == 0x0000C9, "Member 'UMarinerSettingsGlobals::bShareExternalUsageData' has a wrong offset!");

// Class Mariner.MarinerPlatformSettingsGlobals
// 0x0020 (0x0050 - 0x0030)
class UMarinerPlatformSettingsGlobals final : public UDataAsset
{
public:
	class UMarinerSettingsGlobals*                PCSettings;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerSettingsGlobals*                X1Settings;                                        // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerSettingsGlobals*                PS4Settings;                                       // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerSettingsGlobals*                SwitchSettings;                                    // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerPlatformSettingsGlobals">();
	}
	static class UMarinerPlatformSettingsGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerPlatformSettingsGlobals>();
	}
};
static_assert(alignof(UMarinerPlatformSettingsGlobals) == 0x000008, "Wrong alignment on UMarinerPlatformSettingsGlobals");
static_assert(sizeof(UMarinerPlatformSettingsGlobals) == 0x000050, "Wrong size on UMarinerPlatformSettingsGlobals");
static_assert(offsetof(UMarinerPlatformSettingsGlobals, PCSettings) == 0x000030, "Member 'UMarinerPlatformSettingsGlobals::PCSettings' has a wrong offset!");
static_assert(offsetof(UMarinerPlatformSettingsGlobals, X1Settings) == 0x000038, "Member 'UMarinerPlatformSettingsGlobals::X1Settings' has a wrong offset!");
static_assert(offsetof(UMarinerPlatformSettingsGlobals, PS4Settings) == 0x000040, "Member 'UMarinerPlatformSettingsGlobals::PS4Settings' has a wrong offset!");
static_assert(offsetof(UMarinerPlatformSettingsGlobals, SwitchSettings) == 0x000048, "Member 'UMarinerPlatformSettingsGlobals::SwitchSettings' has a wrong offset!");

// Class Mariner.MarinerSettingSlider
// 0x0040 (0x04E0 - 0x04A0)
class UMarinerSettingSlider : public UMarinerSettingBase
{
public:
	struct FVector2D                              DisplayRange;                                      // 0x04A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DisplayDecimals;                                   // 0x04A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StepSize;                                          // 0x04AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnSliderValueInit;                                 // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastInlineDelegateProperty_             OnSliderValueChanged;                              // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          SlideLeftSFX;                                      // 0x04D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          SlideRightSFX;                                     // 0x04D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetDisplayRange(const struct FVector2D& InRange);
	void SetValue(float Value);
	void SetValueByDisplayRange(float Value);
	void SliderValueChangedCB(float NewValue);

	struct FMarinerSettingSliderAssets GetAssets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSettingSlider">();
	}
	static class UMarinerSettingSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSettingSlider>();
	}
};
static_assert(alignof(UMarinerSettingSlider) == 0x000008, "Wrong alignment on UMarinerSettingSlider");
static_assert(sizeof(UMarinerSettingSlider) == 0x0004E0, "Wrong size on UMarinerSettingSlider");
static_assert(offsetof(UMarinerSettingSlider, DisplayRange) == 0x0004A0, "Member 'UMarinerSettingSlider::DisplayRange' has a wrong offset!");
static_assert(offsetof(UMarinerSettingSlider, DisplayDecimals) == 0x0004A8, "Member 'UMarinerSettingSlider::DisplayDecimals' has a wrong offset!");
static_assert(offsetof(UMarinerSettingSlider, StepSize) == 0x0004AC, "Member 'UMarinerSettingSlider::StepSize' has a wrong offset!");
static_assert(offsetof(UMarinerSettingSlider, OnSliderValueInit) == 0x0004B0, "Member 'UMarinerSettingSlider::OnSliderValueInit' has a wrong offset!");
static_assert(offsetof(UMarinerSettingSlider, OnSliderValueChanged) == 0x0004C0, "Member 'UMarinerSettingSlider::OnSliderValueChanged' has a wrong offset!");
static_assert(offsetof(UMarinerSettingSlider, SlideLeftSFX) == 0x0004D0, "Member 'UMarinerSettingSlider::SlideLeftSFX' has a wrong offset!");
static_assert(offsetof(UMarinerSettingSlider, SlideRightSFX) == 0x0004D8, "Member 'UMarinerSettingSlider::SlideRightSFX' has a wrong offset!");

// Class Mariner.MarinerSizeBox
// 0x0020 (0x0178 - 0x0158)
class UMarinerSizeBox final : public USizeBox
{
public:
	uint8                                         Pad_19FD[0x20];                                    // 0x0158(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSizeBox">();
	}
	static class UMarinerSizeBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSizeBox>();
	}
};
static_assert(alignof(UMarinerSizeBox) == 0x000008, "Wrong alignment on UMarinerSizeBox");
static_assert(sizeof(UMarinerSizeBox) == 0x000178, "Wrong size on UMarinerSizeBox");

// Class Mariner.MarinerSkeletalMeshComponent
// 0x0020 (0x0AC0 - 0x0AA0)
class UMarinerSkeletalMeshComponent final : public USkeletalMeshComponent
{
public:
	struct FProjectionParameters                  CustomProjection;                                  // 0x0AA0(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19FE[0x8];                                     // 0x0AB8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSkeletalMeshComponent">();
	}
	static class UMarinerSkeletalMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSkeletalMeshComponent>();
	}
};
static_assert(alignof(UMarinerSkeletalMeshComponent) == 0x000010, "Wrong alignment on UMarinerSkeletalMeshComponent");
static_assert(sizeof(UMarinerSkeletalMeshComponent) == 0x000AC0, "Wrong size on UMarinerSkeletalMeshComponent");
static_assert(offsetof(UMarinerSkeletalMeshComponent, CustomProjection) == 0x000AA0, "Member 'UMarinerSkeletalMeshComponent::CustomProjection' has a wrong offset!");

// Class Mariner.MarinerSkinBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UMarinerSkinBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ApplyMaterialOverridesToSkeletalMesh(class USkeletalMeshComponent* Component, const TArray<struct FMaterialOverride>& MaterialOverrides);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSkinBlueprintLibrary">();
	}
	static class UMarinerSkinBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSkinBlueprintLibrary>();
	}
};
static_assert(alignof(UMarinerSkinBlueprintLibrary) == 0x000008, "Wrong alignment on UMarinerSkinBlueprintLibrary");
static_assert(sizeof(UMarinerSkinBlueprintLibrary) == 0x000028, "Wrong size on UMarinerSkinBlueprintLibrary");

// Class Mariner.MarinerSkinCollectionDataAsset
// 0x00F0 (0x0158 - 0x0068)
class UMarinerSkinCollectionDataAsset final : public UMarinerCMSItemDataAsset
{
public:
	TSoftObjectPtr<class UMarinerSkinDataAsset>   SkinAsset;                                         // 0x0068(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   UIData;                                            // 0x0090(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMarinerCharacterFrontendSkinUIData> FrontendUIData;                                    // 0x00B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMarinerSkinUIData>      SkinUIData;                                        // 0x00E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMarinerAbilitySkinMap>  AbilitySkins;                                      // 0x0108(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMarinerCueSkinMap>      CueSkins;                                          // 0x0130(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void LoadLargePortraitAsync(const TDelegate<void(struct FSlateBrush& Brush)>& Callback);
	void LoadSmallPortraitAsync(const TDelegate<void(struct FSlateBrush& Brush)>& Callback);

	const TSoftObjectPtr<class UMarinerAbilitySkinMap> GetAbilitySkins() const;
	const TSoftObjectPtr<class UMarinerCueSkinMap> GetCueSkins() const;
	const TSoftObjectPtr<class UMarinerCharacterFrontendSkinUIData> GetFrontendUIData() const;
	class UTexture* GetPortraitBackground() const;
	const TSoftObjectPtr<class UMarinerSkinDataAsset> GetSkinAsset() const;
	const TSoftObjectPtr<class UMarinerSkinUIData> GetSkinUIData() const;
	class UMarinerSkinUIData* GetSkinUIData_ForceLoaded() const;
	const TSoftClassPtr<class UClass> GetUIData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSkinCollectionDataAsset">();
	}
	static class UMarinerSkinCollectionDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSkinCollectionDataAsset>();
	}
};
static_assert(alignof(UMarinerSkinCollectionDataAsset) == 0x000008, "Wrong alignment on UMarinerSkinCollectionDataAsset");
static_assert(sizeof(UMarinerSkinCollectionDataAsset) == 0x000158, "Wrong size on UMarinerSkinCollectionDataAsset");
static_assert(offsetof(UMarinerSkinCollectionDataAsset, SkinAsset) == 0x000068, "Member 'UMarinerSkinCollectionDataAsset::SkinAsset' has a wrong offset!");
static_assert(offsetof(UMarinerSkinCollectionDataAsset, UIData) == 0x000090, "Member 'UMarinerSkinCollectionDataAsset::UIData' has a wrong offset!");
static_assert(offsetof(UMarinerSkinCollectionDataAsset, FrontendUIData) == 0x0000B8, "Member 'UMarinerSkinCollectionDataAsset::FrontendUIData' has a wrong offset!");
static_assert(offsetof(UMarinerSkinCollectionDataAsset, SkinUIData) == 0x0000E0, "Member 'UMarinerSkinCollectionDataAsset::SkinUIData' has a wrong offset!");
static_assert(offsetof(UMarinerSkinCollectionDataAsset, AbilitySkins) == 0x000108, "Member 'UMarinerSkinCollectionDataAsset::AbilitySkins' has a wrong offset!");
static_assert(offsetof(UMarinerSkinCollectionDataAsset, CueSkins) == 0x000130, "Member 'UMarinerSkinCollectionDataAsset::CueSkins' has a wrong offset!");

// Class Mariner.MarinerSkinUIData
// 0x0128 (0x0158 - 0x0030)
class UMarinerSkinUIData final : public UDataAsset
{
public:
	class FText                                   CharacterName;                                     // 0x0030(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            LargePortrait;                                     // 0x0048(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            SmallPortrait;                                     // 0x00D0(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSkinUIData">();
	}
	static class UMarinerSkinUIData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSkinUIData>();
	}
};
static_assert(alignof(UMarinerSkinUIData) == 0x000008, "Wrong alignment on UMarinerSkinUIData");
static_assert(sizeof(UMarinerSkinUIData) == 0x000158, "Wrong size on UMarinerSkinUIData");
static_assert(offsetof(UMarinerSkinUIData, CharacterName) == 0x000030, "Member 'UMarinerSkinUIData::CharacterName' has a wrong offset!");
static_assert(offsetof(UMarinerSkinUIData, LargePortrait) == 0x000048, "Member 'UMarinerSkinUIData::LargePortrait' has a wrong offset!");
static_assert(offsetof(UMarinerSkinUIData, SmallPortrait) == 0x0000D0, "Member 'UMarinerSkinUIData::SmallPortrait' has a wrong offset!");

// Class Mariner.MarinerSlider
// 0x0018 (0x0510 - 0x04F8)
class UMarinerSlider final : public USlider
{
public:
	uint8                                         Pad_19FF[0x8];                                     // 0x04F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          SlideLeftSFX;                                      // 0x0500(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SlideRightSFX;                                     // 0x0508(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSlider">();
	}
	static class UMarinerSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSlider>();
	}
};
static_assert(alignof(UMarinerSlider) == 0x000008, "Wrong alignment on UMarinerSlider");
static_assert(sizeof(UMarinerSlider) == 0x000510, "Wrong size on UMarinerSlider");
static_assert(offsetof(UMarinerSlider, SlideLeftSFX) == 0x000500, "Member 'UMarinerSlider::SlideLeftSFX' has a wrong offset!");
static_assert(offsetof(UMarinerSlider, SlideRightSFX) == 0x000508, "Member 'UMarinerSlider::SlideRightSFX' has a wrong offset!");

// Class Mariner.MarinerSocialDropdownHeader
// 0x0008 (0x02B8 - 0x02B0)
class UMarinerSocialDropdownHeader : public UMarinerUserWidget
{
public:
	class UVerticalBox*                           Bound_RootVerticalBox;                             // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSocialDropdownHeader">();
	}
	static class UMarinerSocialDropdownHeader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSocialDropdownHeader>();
	}
};
static_assert(alignof(UMarinerSocialDropdownHeader) == 0x000008, "Wrong alignment on UMarinerSocialDropdownHeader");
static_assert(sizeof(UMarinerSocialDropdownHeader) == 0x0002B8, "Wrong size on UMarinerSocialDropdownHeader");
static_assert(offsetof(UMarinerSocialDropdownHeader, Bound_RootVerticalBox) == 0x0002B0, "Member 'UMarinerSocialDropdownHeader::Bound_RootVerticalBox' has a wrong offset!");

// Class Mariner.MarinerSocialRequestsWidget
// 0x0038 (0x0330 - 0x02F8)
class UMarinerSocialRequestsWidget : public UMarinerPagedVerticalBox
{
public:
	class FText                                   RequestHeader;                                     // 0x02F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	EMarinerSocialRequestsWidgetType              SocialRequestType;                                 // 0x0310(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A00[0x7];                                     // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             Bound_TextHeader;                                  // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerSocialWidget>       SocialWidgetSubclass;                              // 0x0320(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A01[0x8];                                     // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSocialRequestCanceled(class UMarinerSocialWidget* SocialWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSocialRequestsWidget">();
	}
	static class UMarinerSocialRequestsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSocialRequestsWidget>();
	}
};
static_assert(alignof(UMarinerSocialRequestsWidget) == 0x000008, "Wrong alignment on UMarinerSocialRequestsWidget");
static_assert(sizeof(UMarinerSocialRequestsWidget) == 0x000330, "Wrong size on UMarinerSocialRequestsWidget");
static_assert(offsetof(UMarinerSocialRequestsWidget, RequestHeader) == 0x0002F8, "Member 'UMarinerSocialRequestsWidget::RequestHeader' has a wrong offset!");
static_assert(offsetof(UMarinerSocialRequestsWidget, SocialRequestType) == 0x000310, "Member 'UMarinerSocialRequestsWidget::SocialRequestType' has a wrong offset!");
static_assert(offsetof(UMarinerSocialRequestsWidget, Bound_TextHeader) == 0x000318, "Member 'UMarinerSocialRequestsWidget::Bound_TextHeader' has a wrong offset!");
static_assert(offsetof(UMarinerSocialRequestsWidget, SocialWidgetSubclass) == 0x000320, "Member 'UMarinerSocialRequestsWidget::SocialWidgetSubclass' has a wrong offset!");

// Class Mariner.MarinerSpawnLocation
// 0x0008 (0x0220 - 0x0218)
class AMarinerSpawnLocation : public AActor
{
public:
	class FName                                   LocationName;                                      // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSpawnLocation">();
	}
	static class AMarinerSpawnLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerSpawnLocation>();
	}
};
static_assert(alignof(AMarinerSpawnLocation) == 0x000008, "Wrong alignment on AMarinerSpawnLocation");
static_assert(sizeof(AMarinerSpawnLocation) == 0x000220, "Wrong size on AMarinerSpawnLocation");
static_assert(offsetof(AMarinerSpawnLocation, LocationName) == 0x000218, "Member 'AMarinerSpawnLocation::LocationName' has a wrong offset!");

// Class Mariner.MarinerSpectatorPawn
// 0x0000 (0x02A0 - 0x02A0)
class AMarinerSpectatorPawn final : public ASpectatorPawn
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSpectatorPawn">();
	}
	static class AMarinerSpectatorPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerSpectatorPawn>();
	}
};
static_assert(alignof(AMarinerSpectatorPawn) == 0x000008, "Wrong alignment on AMarinerSpectatorPawn");
static_assert(sizeof(AMarinerSpectatorPawn) == 0x0002A0, "Wrong size on AMarinerSpectatorPawn");

// Class Mariner.MarinerSphereComponent
// 0x0010 (0x0410 - 0x0400)
class UMarinerSphereComponent final : public USphereComponent
{
public:
	class UMaterialInterface*                     MeshMaterial;                                      // 0x03F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRenderWireFrame;                                  // 0x0400(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A02[0xF];                                     // 0x0401(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSphereComponent">();
	}
	static class UMarinerSphereComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSphereComponent>();
	}
};
static_assert(alignof(UMarinerSphereComponent) == 0x000010, "Wrong alignment on UMarinerSphereComponent");
static_assert(sizeof(UMarinerSphereComponent) == 0x000410, "Wrong size on UMarinerSphereComponent");
static_assert(offsetof(UMarinerSphereComponent, MeshMaterial) == 0x0003F8, "Member 'UMarinerSphereComponent::MeshMaterial' has a wrong offset!");
static_assert(offsetof(UMarinerSphereComponent, bRenderWireFrame) == 0x000400, "Member 'UMarinerSphereComponent::bRenderWireFrame' has a wrong offset!");

// Class Mariner.MarinerSpikeTrap
// 0x00A8 (0x02C0 - 0x0218)
class AMarinerSpikeTrap final : public AActor
{
public:
	EMarinerSpikeTrapMovementState                CurrentSpikeTrapMovementState;                     // 0x0218(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A03[0x7];                                     // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SpikeTrapTimeline;                                 // 0x0220(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            PlatformMovementCurve;                             // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IdleInTopDuration;                                 // 0x0230(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IdleInDownDuration;                                // 0x0234(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveToTopDuration;                                 // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveToDownDuration;                                // 0x023C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerDamageType>         DamageTypeCharacter;                               // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerDamageType>         DamageTypeItems;                                   // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        ParticleSystem;                                    // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ParticleSystemLocationOffset;                      // 0x0258(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ParticleSystemScale;                               // 0x0264(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                   ChildActorComponent;                               // 0x0270(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   MovingPlatform;                                    // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   Spikes;                                            // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBoxComponent*                          DamageVolume;                                      // 0x0288(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                   MovingPlatformTopPointPosition;                    // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChildActorComponent*                   MovingPlatformDownPointPosition;                   // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A04[0x20];                                    // 0x02A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CauseDamage(class AActor* DamagedActor, TSubclassOf<class UMarinerDamageType> TargetDamageType);
	void ChangeState(const EMarinerSpikeTrapMovementState& NewESpikeTrapMovementState);
	void OnDamageVolumeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnMovementStateChanged(const EMarinerSpikeTrapMovementState& NewESpikeTrapMovementState);
	void OnTimelineEnded();
	void TimelineFloatReturn(float Alpha);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSpikeTrap">();
	}
	static class AMarinerSpikeTrap* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerSpikeTrap>();
	}
};
static_assert(alignof(AMarinerSpikeTrap) == 0x000008, "Wrong alignment on AMarinerSpikeTrap");
static_assert(sizeof(AMarinerSpikeTrap) == 0x0002C0, "Wrong size on AMarinerSpikeTrap");
static_assert(offsetof(AMarinerSpikeTrap, CurrentSpikeTrapMovementState) == 0x000218, "Member 'AMarinerSpikeTrap::CurrentSpikeTrapMovementState' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, SpikeTrapTimeline) == 0x000220, "Member 'AMarinerSpikeTrap::SpikeTrapTimeline' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, PlatformMovementCurve) == 0x000228, "Member 'AMarinerSpikeTrap::PlatformMovementCurve' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, IdleInTopDuration) == 0x000230, "Member 'AMarinerSpikeTrap::IdleInTopDuration' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, IdleInDownDuration) == 0x000234, "Member 'AMarinerSpikeTrap::IdleInDownDuration' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, MoveToTopDuration) == 0x000238, "Member 'AMarinerSpikeTrap::MoveToTopDuration' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, MoveToDownDuration) == 0x00023C, "Member 'AMarinerSpikeTrap::MoveToDownDuration' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, DamageTypeCharacter) == 0x000240, "Member 'AMarinerSpikeTrap::DamageTypeCharacter' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, DamageTypeItems) == 0x000248, "Member 'AMarinerSpikeTrap::DamageTypeItems' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, ParticleSystem) == 0x000250, "Member 'AMarinerSpikeTrap::ParticleSystem' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, ParticleSystemLocationOffset) == 0x000258, "Member 'AMarinerSpikeTrap::ParticleSystemLocationOffset' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, ParticleSystemScale) == 0x000264, "Member 'AMarinerSpikeTrap::ParticleSystemScale' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, ChildActorComponent) == 0x000270, "Member 'AMarinerSpikeTrap::ChildActorComponent' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, MovingPlatform) == 0x000278, "Member 'AMarinerSpikeTrap::MovingPlatform' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, Spikes) == 0x000280, "Member 'AMarinerSpikeTrap::Spikes' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, DamageVolume) == 0x000288, "Member 'AMarinerSpikeTrap::DamageVolume' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, MovingPlatformTopPointPosition) == 0x000290, "Member 'AMarinerSpikeTrap::MovingPlatformTopPointPosition' has a wrong offset!");
static_assert(offsetof(AMarinerSpikeTrap, MovingPlatformDownPointPosition) == 0x000298, "Member 'AMarinerSpikeTrap::MovingPlatformDownPointPosition' has a wrong offset!");

// Class Mariner.MarinerSplineFollowActor
// 0x0128 (0x0340 - 0x0218)
class AMarinerSplineFollowActor final : public AActor
{
public:
	uint8                                         Pad_1A06[0x8];                                     // 0x0218(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkComponent*                           AkAudioComponent;                                  // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerFollowSplineMovement*           SplineMovementComponent;                           // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerFastBoxComponent>   FastCollisionComponentClassType;                   // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UStaticMeshComponent>       VisualOffsetComponentClassType;                    // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           AbilitiesToEnd;                                    // 0x0248(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	float                                         MoveCharacterDegreesFromUpClamp;                   // 0x0258(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveCharacterDistance;                             // 0x025C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerDamageType>         ImpactDamageType;                                  // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            ImpactGameplayEffect;                              // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce> MoveCharacterRootMotionData;                       // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AffectCharactersCooldown;                          // 0x0278(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A07[0x4];                                     // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<float, class USceneComponent*>           OffsetRatioActorComponentMap;                      // 0x0280(0x0050)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A08[0x70];                                    // 0x02D0(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddMoveableActorComponents();
	struct FVector BP_CalculateOverlappingItemImpulseVelocity(class AMarinerItem* ItemToImpulse, const struct FVector& ItemLocation, class UPrimitiveComponent* OverlappedOwnedComponent, const struct FVector& HitComponentForwardDirection, const struct FVector& VectorFromComponentToItem);
	void BP_HandleSplineMovementCompletion(bool bHasSplineReachedEnd, float CurrentAuthoritativeProgressRatio);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSplineFollowActor">();
	}
	static class AMarinerSplineFollowActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerSplineFollowActor>();
	}
};
static_assert(alignof(AMarinerSplineFollowActor) == 0x000008, "Wrong alignment on AMarinerSplineFollowActor");
static_assert(sizeof(AMarinerSplineFollowActor) == 0x000340, "Wrong size on AMarinerSplineFollowActor");
static_assert(offsetof(AMarinerSplineFollowActor, SkeletalMeshComponent) == 0x000220, "Member 'AMarinerSplineFollowActor::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(AMarinerSplineFollowActor, AkAudioComponent) == 0x000228, "Member 'AMarinerSplineFollowActor::AkAudioComponent' has a wrong offset!");
static_assert(offsetof(AMarinerSplineFollowActor, SplineMovementComponent) == 0x000230, "Member 'AMarinerSplineFollowActor::SplineMovementComponent' has a wrong offset!");
static_assert(offsetof(AMarinerSplineFollowActor, FastCollisionComponentClassType) == 0x000238, "Member 'AMarinerSplineFollowActor::FastCollisionComponentClassType' has a wrong offset!");
static_assert(offsetof(AMarinerSplineFollowActor, VisualOffsetComponentClassType) == 0x000240, "Member 'AMarinerSplineFollowActor::VisualOffsetComponentClassType' has a wrong offset!");
static_assert(offsetof(AMarinerSplineFollowActor, AbilitiesToEnd) == 0x000248, "Member 'AMarinerSplineFollowActor::AbilitiesToEnd' has a wrong offset!");
static_assert(offsetof(AMarinerSplineFollowActor, MoveCharacterDegreesFromUpClamp) == 0x000258, "Member 'AMarinerSplineFollowActor::MoveCharacterDegreesFromUpClamp' has a wrong offset!");
static_assert(offsetof(AMarinerSplineFollowActor, MoveCharacterDistance) == 0x00025C, "Member 'AMarinerSplineFollowActor::MoveCharacterDistance' has a wrong offset!");
static_assert(offsetof(AMarinerSplineFollowActor, ImpactDamageType) == 0x000260, "Member 'AMarinerSplineFollowActor::ImpactDamageType' has a wrong offset!");
static_assert(offsetof(AMarinerSplineFollowActor, ImpactGameplayEffect) == 0x000268, "Member 'AMarinerSplineFollowActor::ImpactGameplayEffect' has a wrong offset!");
static_assert(offsetof(AMarinerSplineFollowActor, MoveCharacterRootMotionData) == 0x000270, "Member 'AMarinerSplineFollowActor::MoveCharacterRootMotionData' has a wrong offset!");
static_assert(offsetof(AMarinerSplineFollowActor, AffectCharactersCooldown) == 0x000278, "Member 'AMarinerSplineFollowActor::AffectCharactersCooldown' has a wrong offset!");
static_assert(offsetof(AMarinerSplineFollowActor, OffsetRatioActorComponentMap) == 0x000280, "Member 'AMarinerSplineFollowActor::OffsetRatioActorComponentMap' has a wrong offset!");

// Class Mariner.MarinerSplineFollowingProp
// 0x0010 (0x0298 - 0x0288)
class AMarinerSplineFollowingProp final : public AMarinerAbilitySystemProp
{
public:
	EMarinerDamagedWhileFollowingSplineResponse   DamageResponse;                                    // 0x0288(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A0C[0x7];                                     // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerFollowSplineMovement*           FollowSplineMovement;                              // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UMarinerFollowSplineMovement* GetFollowSplineMovementComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSplineFollowingProp">();
	}
	static class AMarinerSplineFollowingProp* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerSplineFollowingProp>();
	}
};
static_assert(alignof(AMarinerSplineFollowingProp) == 0x000008, "Wrong alignment on AMarinerSplineFollowingProp");
static_assert(sizeof(AMarinerSplineFollowingProp) == 0x000298, "Wrong size on AMarinerSplineFollowingProp");
static_assert(offsetof(AMarinerSplineFollowingProp, DamageResponse) == 0x000288, "Member 'AMarinerSplineFollowingProp::DamageResponse' has a wrong offset!");
static_assert(offsetof(AMarinerSplineFollowingProp, FollowSplineMovement) == 0x000290, "Member 'AMarinerSplineFollowingProp::FollowSplineMovement' has a wrong offset!");

// Class Mariner.MarinerStartScreenMenu
// 0x00B8 (0x0598 - 0x04E0)
class UMarinerStartScreenMenu : public UMarinerMenu
{
public:
	struct FMarinerPlatformText                   StartText;                                         // 0x04E0(0x0078)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UMarinerPaneSwitcher*                   Bound_PaneSwitcher;                                // 0x0558(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           Bound_NotConnectingPanel;                          // 0x0560(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerPrompt*                         Bound_StartPrompt;                                 // 0x0568(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           Bound_ConnectingPanel;                             // 0x0570(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_ConnectingText;                              // 0x0578(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerButton*                         Bound_SkipButton;                                  // 0x0580(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_StartText;                                   // 0x0588(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A0D[0x8];                                     // 0x0590(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool OnLoginComplete();
	void OnQuitGameConfirmed(const struct FKey& KeyPressed);
	void OnSkipButtonClicked();

	bool IsLoggingIn() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerStartScreenMenu">();
	}
	static class UMarinerStartScreenMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerStartScreenMenu>();
	}
};
static_assert(alignof(UMarinerStartScreenMenu) == 0x000008, "Wrong alignment on UMarinerStartScreenMenu");
static_assert(sizeof(UMarinerStartScreenMenu) == 0x000598, "Wrong size on UMarinerStartScreenMenu");
static_assert(offsetof(UMarinerStartScreenMenu, StartText) == 0x0004E0, "Member 'UMarinerStartScreenMenu::StartText' has a wrong offset!");
static_assert(offsetof(UMarinerStartScreenMenu, Bound_PaneSwitcher) == 0x000558, "Member 'UMarinerStartScreenMenu::Bound_PaneSwitcher' has a wrong offset!");
static_assert(offsetof(UMarinerStartScreenMenu, Bound_NotConnectingPanel) == 0x000560, "Member 'UMarinerStartScreenMenu::Bound_NotConnectingPanel' has a wrong offset!");
static_assert(offsetof(UMarinerStartScreenMenu, Bound_StartPrompt) == 0x000568, "Member 'UMarinerStartScreenMenu::Bound_StartPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerStartScreenMenu, Bound_ConnectingPanel) == 0x000570, "Member 'UMarinerStartScreenMenu::Bound_ConnectingPanel' has a wrong offset!");
static_assert(offsetof(UMarinerStartScreenMenu, Bound_ConnectingText) == 0x000578, "Member 'UMarinerStartScreenMenu::Bound_ConnectingText' has a wrong offset!");
static_assert(offsetof(UMarinerStartScreenMenu, Bound_SkipButton) == 0x000580, "Member 'UMarinerStartScreenMenu::Bound_SkipButton' has a wrong offset!");
static_assert(offsetof(UMarinerStartScreenMenu, Bound_StartText) == 0x000588, "Member 'UMarinerStartScreenMenu::Bound_StartText' has a wrong offset!");

// Class Mariner.MarinerStatsFrame
// 0x0008 (0x02B8 - 0x02B0)
class UMarinerStatsFrame : public UMarinerUserWidget
{
public:
	class UMarinerPlayerPostGameWidget*           Bound_PlayerPostGameWidget;                        // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void PopulatePlayerStats(const struct FMatchEnd& MatchEndData, const struct FMatchEndPlayer& MatchEndPlayerData, bool bIsLocalPlayer, bool bIsClientTeam, int32 Rank);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerStatsFrame">();
	}
	static class UMarinerStatsFrame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerStatsFrame>();
	}
};
static_assert(alignof(UMarinerStatsFrame) == 0x000008, "Wrong alignment on UMarinerStatsFrame");
static_assert(sizeof(UMarinerStatsFrame) == 0x0002B8, "Wrong size on UMarinerStatsFrame");
static_assert(offsetof(UMarinerStatsFrame, Bound_PlayerPostGameWidget) == 0x0002B0, "Member 'UMarinerStatsFrame::Bound_PlayerPostGameWidget' has a wrong offset!");

// Class Mariner.MarinerStatWidget
// 0x0080 (0x0330 - 0x02B0)
class UMarinerStatWidget : public UMarinerUserWidget
{
public:
	EMarinerStatWidgetType                        WidgetType;                                        // 0x02B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A0F[0x7];                                     // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatMetric;                                        // 0x02B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMangoStatGroupType                           StatGroupType;                                     // 0x02C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMangoStatType                                StatType;                                          // 0x02C9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A10[0x6];                                     // 0x02CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EMarinerStatWidgetType, class FText>     StatName;                                          // 0x02D0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextStatName;                                // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextStatValue;                               // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerStatWidget">();
	}
	static class UMarinerStatWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerStatWidget>();
	}
};
static_assert(alignof(UMarinerStatWidget) == 0x000008, "Wrong alignment on UMarinerStatWidget");
static_assert(sizeof(UMarinerStatWidget) == 0x000330, "Wrong size on UMarinerStatWidget");
static_assert(offsetof(UMarinerStatWidget, WidgetType) == 0x0002B0, "Member 'UMarinerStatWidget::WidgetType' has a wrong offset!");
static_assert(offsetof(UMarinerStatWidget, StatMetric) == 0x0002B8, "Member 'UMarinerStatWidget::StatMetric' has a wrong offset!");
static_assert(offsetof(UMarinerStatWidget, StatGroupType) == 0x0002C8, "Member 'UMarinerStatWidget::StatGroupType' has a wrong offset!");
static_assert(offsetof(UMarinerStatWidget, StatType) == 0x0002C9, "Member 'UMarinerStatWidget::StatType' has a wrong offset!");
static_assert(offsetof(UMarinerStatWidget, StatName) == 0x0002D0, "Member 'UMarinerStatWidget::StatName' has a wrong offset!");
static_assert(offsetof(UMarinerStatWidget, Bound_TextStatName) == 0x000320, "Member 'UMarinerStatWidget::Bound_TextStatName' has a wrong offset!");
static_assert(offsetof(UMarinerStatWidget, Bound_TextStatValue) == 0x000328, "Member 'UMarinerStatWidget::Bound_TextStatValue' has a wrong offset!");

// Class Mariner.MarinerStoreGlobals
// 0x0068 (0x0098 - 0x0030)
class UMarinerStoreGlobals final : public UDataAsset
{
public:
	TMap<class FName, struct FMarinerStoreIconData> ImageMappings;                                     // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   BundleItemTypeName;                                // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	bool GetImage(const class FName& ImageId, bool bUseDefaultBrush, struct FSlateBrush* ImageBrushOut) const;
	bool GetOfferTypeName(const struct FMangoPurchaseOffer& InOffer, class FText* OutOfferName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerStoreGlobals">();
	}
	static class UMarinerStoreGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerStoreGlobals>();
	}
};
static_assert(alignof(UMarinerStoreGlobals) == 0x000008, "Wrong alignment on UMarinerStoreGlobals");
static_assert(sizeof(UMarinerStoreGlobals) == 0x000098, "Wrong size on UMarinerStoreGlobals");
static_assert(offsetof(UMarinerStoreGlobals, ImageMappings) == 0x000030, "Member 'UMarinerStoreGlobals::ImageMappings' has a wrong offset!");
static_assert(offsetof(UMarinerStoreGlobals, BundleItemTypeName) == 0x000080, "Member 'UMarinerStoreGlobals::BundleItemTypeName' has a wrong offset!");

// Class Mariner.MarinerStoreRootMenu
// 0x03E0 (0x08C0 - 0x04E0)
class UMarinerStoreRootMenu : public UMarinerMenu
{
public:
	TSubclassOf<class UMarinerOfferButton>        FeaturedOfferPrimaryButtonType;                    // 0x04E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerOfferButton>        FeaturedOfferSecondaryButtonType;                  // 0x04E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxPrimaryOffers;                                  // 0x04F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxSecondaryOffers;                                // 0x04F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     PurchaseOfferPrompt;                               // 0x04F8(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerPromptData                     ButtonGenericPrompt;                               // 0x0610(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMarinerMessageBoxData                 ItemUnavailableMessageBox;                         // 0x0728(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_RootPanel;                                   // 0x0898(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_FeaturedPrimaryPanel;                        // 0x08A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Bound_FeaturedSecondaryPanel;                      // 0x08A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerLayeredButton*                  Bound_UpsellButton;                                // 0x08B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A14[0x8];                                     // 0x08B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGameVersionChanged(EMarinerGameVersion NewVersion);
	void OnInventoryChanged();
	void OnOfferSelected(class UMarinerLayeredButton* Instance);
	void OnOfferStateChanged(const TArray<struct FMangoPurchaseOffer>& StartingOffers, const TArray<struct FMangoPurchaseOffer>& EndingOffers);
	void OnPurchaseFlowComplete(bool bOfferPurchased);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerStoreRootMenu">();
	}
	static class UMarinerStoreRootMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerStoreRootMenu>();
	}
};
static_assert(alignof(UMarinerStoreRootMenu) == 0x000008, "Wrong alignment on UMarinerStoreRootMenu");
static_assert(sizeof(UMarinerStoreRootMenu) == 0x0008C0, "Wrong size on UMarinerStoreRootMenu");
static_assert(offsetof(UMarinerStoreRootMenu, FeaturedOfferPrimaryButtonType) == 0x0004E0, "Member 'UMarinerStoreRootMenu::FeaturedOfferPrimaryButtonType' has a wrong offset!");
static_assert(offsetof(UMarinerStoreRootMenu, FeaturedOfferSecondaryButtonType) == 0x0004E8, "Member 'UMarinerStoreRootMenu::FeaturedOfferSecondaryButtonType' has a wrong offset!");
static_assert(offsetof(UMarinerStoreRootMenu, MaxPrimaryOffers) == 0x0004F0, "Member 'UMarinerStoreRootMenu::MaxPrimaryOffers' has a wrong offset!");
static_assert(offsetof(UMarinerStoreRootMenu, MaxSecondaryOffers) == 0x0004F4, "Member 'UMarinerStoreRootMenu::MaxSecondaryOffers' has a wrong offset!");
static_assert(offsetof(UMarinerStoreRootMenu, PurchaseOfferPrompt) == 0x0004F8, "Member 'UMarinerStoreRootMenu::PurchaseOfferPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerStoreRootMenu, ButtonGenericPrompt) == 0x000610, "Member 'UMarinerStoreRootMenu::ButtonGenericPrompt' has a wrong offset!");
static_assert(offsetof(UMarinerStoreRootMenu, ItemUnavailableMessageBox) == 0x000728, "Member 'UMarinerStoreRootMenu::ItemUnavailableMessageBox' has a wrong offset!");
static_assert(offsetof(UMarinerStoreRootMenu, Bound_RootPanel) == 0x000898, "Member 'UMarinerStoreRootMenu::Bound_RootPanel' has a wrong offset!");
static_assert(offsetof(UMarinerStoreRootMenu, Bound_FeaturedPrimaryPanel) == 0x0008A0, "Member 'UMarinerStoreRootMenu::Bound_FeaturedPrimaryPanel' has a wrong offset!");
static_assert(offsetof(UMarinerStoreRootMenu, Bound_FeaturedSecondaryPanel) == 0x0008A8, "Member 'UMarinerStoreRootMenu::Bound_FeaturedSecondaryPanel' has a wrong offset!");
static_assert(offsetof(UMarinerStoreRootMenu, Bound_UpsellButton) == 0x0008B0, "Member 'UMarinerStoreRootMenu::Bound_UpsellButton' has a wrong offset!");

// Class Mariner.MarinerSubArtifactsMenu
// 0x0048 (0x1328 - 0x12E0)
class UMarinerSubArtifactsMenu : public UMarinerInventoryBaseMenu
{
public:
	class UMarinerVerticalBox*                    Bound_VerticalBoxRoot;                             // 0x12E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScrollBox*                             Bound_RootScrollBox;                               // 0x12E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TextHeader;                                  // 0x12F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerArtifactDetailsWidget*          Bound_ArtifactDetails;                             // 0x12F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerArtifactPreviewWidget*          Bound_ArtifactPreviewWidget;                       // 0x1300(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerArtifactInfoSmallWidget> ArtifactInfoSmallWidgetSubclass;                   // 0x1308(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A15[0x8];                                     // 0x1310(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerArtifactDataAsset*              PreviewArtifact;                                   // 0x1318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarinerItemLoadResponseButton*         CurrentHoveredButton;                              // 0x1320(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnArtifactWidgetHover(class UMarinerLayeredButton* Instance, bool bFromKeyboard, bool bFromMouse);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSubArtifactsMenu">();
	}
	static class UMarinerSubArtifactsMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerSubArtifactsMenu>();
	}
};
static_assert(alignof(UMarinerSubArtifactsMenu) == 0x000008, "Wrong alignment on UMarinerSubArtifactsMenu");
static_assert(sizeof(UMarinerSubArtifactsMenu) == 0x001328, "Wrong size on UMarinerSubArtifactsMenu");
static_assert(offsetof(UMarinerSubArtifactsMenu, Bound_VerticalBoxRoot) == 0x0012E0, "Member 'UMarinerSubArtifactsMenu::Bound_VerticalBoxRoot' has a wrong offset!");
static_assert(offsetof(UMarinerSubArtifactsMenu, Bound_RootScrollBox) == 0x0012E8, "Member 'UMarinerSubArtifactsMenu::Bound_RootScrollBox' has a wrong offset!");
static_assert(offsetof(UMarinerSubArtifactsMenu, Bound_TextHeader) == 0x0012F0, "Member 'UMarinerSubArtifactsMenu::Bound_TextHeader' has a wrong offset!");
static_assert(offsetof(UMarinerSubArtifactsMenu, Bound_ArtifactDetails) == 0x0012F8, "Member 'UMarinerSubArtifactsMenu::Bound_ArtifactDetails' has a wrong offset!");
static_assert(offsetof(UMarinerSubArtifactsMenu, Bound_ArtifactPreviewWidget) == 0x001300, "Member 'UMarinerSubArtifactsMenu::Bound_ArtifactPreviewWidget' has a wrong offset!");
static_assert(offsetof(UMarinerSubArtifactsMenu, ArtifactInfoSmallWidgetSubclass) == 0x001308, "Member 'UMarinerSubArtifactsMenu::ArtifactInfoSmallWidgetSubclass' has a wrong offset!");
static_assert(offsetof(UMarinerSubArtifactsMenu, PreviewArtifact) == 0x001318, "Member 'UMarinerSubArtifactsMenu::PreviewArtifact' has a wrong offset!");
static_assert(offsetof(UMarinerSubArtifactsMenu, CurrentHoveredButton) == 0x001320, "Member 'UMarinerSubArtifactsMenu::CurrentHoveredButton' has a wrong offset!");

// Class Mariner.MarinerSynchronousPickup
// 0x0078 (0x0290 - 0x0218)
class AMarinerSynchronousPickup final : public AActor
{
public:
	class USceneComponent*                        RootSceneComponent;                                // 0x0218(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                       SphereCollision;                                   // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerFastSphereComponent*            FastCollision;                                     // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*               ParticleSystemComponent;                           // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        SpawnParticle;                                     // 0x0238(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        DespawnParticle;                                   // 0x0240(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        PickupParticle;                                    // 0x0248(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                            StaticMesh;                                        // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   FlickerParameter;                                  // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkComponent*                           AudioComponent;                                    // 0x0260(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          PickupSound;                                       // 0x0268(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnlyPlaySoundOnLocalPlayerPickup;                 // 0x0270(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A17[0x3];                                     // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnSetIndex;                                     // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A18[0x8];                                     // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AMarinerPlayerState>     PickedUpBy;                                        // 0x0280(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarinerPickupState                           LocalState;                                        // 0x0288(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A19[0x7];                                     // 0x0289(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnBeginFading();
	void BP_OnDespawn();
	void BP_OnPickedUp(class AMarinerPlayerState* PlayerWhoPickedUp);
	void BP_OnSpawn();

	bool BP_CanBePickedUp(class AMarinerCharacter* InPawn) const;
	class AMarinerPlayerState* GetPickedUpBy() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSynchronousPickup">();
	}
	static class AMarinerSynchronousPickup* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerSynchronousPickup>();
	}
};
static_assert(alignof(AMarinerSynchronousPickup) == 0x000008, "Wrong alignment on AMarinerSynchronousPickup");
static_assert(sizeof(AMarinerSynchronousPickup) == 0x000290, "Wrong size on AMarinerSynchronousPickup");
static_assert(offsetof(AMarinerSynchronousPickup, RootSceneComponent) == 0x000218, "Member 'AMarinerSynchronousPickup::RootSceneComponent' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickup, SphereCollision) == 0x000220, "Member 'AMarinerSynchronousPickup::SphereCollision' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickup, FastCollision) == 0x000228, "Member 'AMarinerSynchronousPickup::FastCollision' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickup, ParticleSystemComponent) == 0x000230, "Member 'AMarinerSynchronousPickup::ParticleSystemComponent' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickup, SpawnParticle) == 0x000238, "Member 'AMarinerSynchronousPickup::SpawnParticle' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickup, DespawnParticle) == 0x000240, "Member 'AMarinerSynchronousPickup::DespawnParticle' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickup, PickupParticle) == 0x000248, "Member 'AMarinerSynchronousPickup::PickupParticle' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickup, StaticMesh) == 0x000250, "Member 'AMarinerSynchronousPickup::StaticMesh' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickup, FlickerParameter) == 0x000258, "Member 'AMarinerSynchronousPickup::FlickerParameter' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickup, AudioComponent) == 0x000260, "Member 'AMarinerSynchronousPickup::AudioComponent' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickup, PickupSound) == 0x000268, "Member 'AMarinerSynchronousPickup::PickupSound' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickup, bOnlyPlaySoundOnLocalPlayerPickup) == 0x000270, "Member 'AMarinerSynchronousPickup::bOnlyPlaySoundOnLocalPlayerPickup' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickup, SpawnSetIndex) == 0x000274, "Member 'AMarinerSynchronousPickup::SpawnSetIndex' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickup, PickedUpBy) == 0x000280, "Member 'AMarinerSynchronousPickup::PickedUpBy' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickup, LocalState) == 0x000288, "Member 'AMarinerSynchronousPickup::LocalState' has a wrong offset!");

// Class Mariner.MarinerSynchronousPickupManager
// 0x0088 (0x02A0 - 0x0218)
class AMarinerSynchronousPickupManager final : public AActor
{
public:
	UMulticastInlineDelegateProperty_             OnPickupCollected;                                 // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USceneComponent*                        RootSceneComponent;                                // 0x0228(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerInstancedMeshComponent*         InstancedMeshComponent;                            // 0x0230(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A1B[0x8];                                     // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeFlickerDuration;                               // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCurrentFlickerVisibility;                         // 0x0244(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A1C[0x3];                                     // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AMarinerSynchronousPickup>  PickupType;                                        // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A1D[0x20];                                    // 0x0250(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerSynchronousPickupsPayload      NonDormantPickupsPayload;                          // 0x0270(0x0028)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A1E[0x8];                                     // 0x0298(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeactivatePickups();
	void InitiateFadeOnActivePickups();
	void OnLocalPlayerRealityChanged(EMarinerRealityState OldReality, EMarinerRealityState NewReality);
	void OnRep_NonDormantPickupsPayload(const struct FMarinerSynchronousPickupsPayload& PreviousState);
	bool SpawnAllPickups();
	bool SpawnPickups(int32 SetIndexToSpawn);

	const EMarinerPickupState GetNonDormantPickupState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerSynchronousPickupManager">();
	}
	static class AMarinerSynchronousPickupManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerSynchronousPickupManager>();
	}
};
static_assert(alignof(AMarinerSynchronousPickupManager) == 0x000008, "Wrong alignment on AMarinerSynchronousPickupManager");
static_assert(sizeof(AMarinerSynchronousPickupManager) == 0x0002A0, "Wrong size on AMarinerSynchronousPickupManager");
static_assert(offsetof(AMarinerSynchronousPickupManager, OnPickupCollected) == 0x000218, "Member 'AMarinerSynchronousPickupManager::OnPickupCollected' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickupManager, RootSceneComponent) == 0x000228, "Member 'AMarinerSynchronousPickupManager::RootSceneComponent' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickupManager, InstancedMeshComponent) == 0x000230, "Member 'AMarinerSynchronousPickupManager::InstancedMeshComponent' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickupManager, FadeFlickerDuration) == 0x000240, "Member 'AMarinerSynchronousPickupManager::FadeFlickerDuration' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickupManager, bCurrentFlickerVisibility) == 0x000244, "Member 'AMarinerSynchronousPickupManager::bCurrentFlickerVisibility' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickupManager, PickupType) == 0x000248, "Member 'AMarinerSynchronousPickupManager::PickupType' has a wrong offset!");
static_assert(offsetof(AMarinerSynchronousPickupManager, NonDormantPickupsPayload) == 0x000270, "Member 'AMarinerSynchronousPickupManager::NonDormantPickupsPayload' has a wrong offset!");

// Class Mariner.MarinerTask_ApplyAreaOfEffectDamage
// 0x0028 (0x00A8 - 0x0080)
class UMarinerTask_ApplyAreaOfEffectDamage final : public UAbilityTask
{
public:
	uint8                                         Pad_1A20[0x28];                                    // 0x0080(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_ApplyAreaOfEffectDamage* ApplyAreaOfEffectDamage(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, TSubclassOf<class UMarinerDamageType> AOEDamageType, const struct FVector& Origin, const TArray<class AActor*>& IgnoreActors);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_ApplyAreaOfEffectDamage">();
	}
	static class UMarinerTask_ApplyAreaOfEffectDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_ApplyAreaOfEffectDamage>();
	}
};
static_assert(alignof(UMarinerTask_ApplyAreaOfEffectDamage) == 0x000008, "Wrong alignment on UMarinerTask_ApplyAreaOfEffectDamage");
static_assert(sizeof(UMarinerTask_ApplyAreaOfEffectDamage) == 0x0000A8, "Wrong size on UMarinerTask_ApplyAreaOfEffectDamage");

// Class Mariner.MarinerTask_ApplyRecovery
// 0x0038 (0x00B8 - 0x0080)
class UMarinerTask_ApplyRecovery final : public UAbilityTask
{
public:
	uint8                                         Pad_1A22[0x18];                                    // 0x0080(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             RecoveryAppliedDelegate;                           // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A23[0x10];                                    // 0x00A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_ApplyRecovery* ApplyRecovery(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool bResetJumpCount, float MaximumVelocity);
	static class UMarinerTask_ApplyRecovery* ApplyRecoverySynced(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool bResetJumpCount, TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults> LerpToSpeedRootMotionDefaults);

	void RecoveryAppliedCallback(const class FName& InRootMotionName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_ApplyRecovery">();
	}
	static class UMarinerTask_ApplyRecovery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_ApplyRecovery>();
	}
};
static_assert(alignof(UMarinerTask_ApplyRecovery) == 0x000008, "Wrong alignment on UMarinerTask_ApplyRecovery");
static_assert(sizeof(UMarinerTask_ApplyRecovery) == 0x0000B8, "Wrong size on UMarinerTask_ApplyRecovery");
static_assert(offsetof(UMarinerTask_ApplyRecovery, RecoveryAppliedDelegate) == 0x000098, "Member 'UMarinerTask_ApplyRecovery::RecoveryAppliedDelegate' has a wrong offset!");

// Class Mariner.MarinerTask_ApplyRootMotionMoveToDynamicForce
// 0x00B0 (0x0168 - 0x00B8)
class UMarinerTask_ApplyRootMotionMoveToDynamicForce final : public UAbilityTask_ApplyRootMotion_Base
{
public:
	UMulticastInlineDelegateProperty_             NotifyInfoDelegate;                                // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       AimDataHandle;                                     // 0x00C8(0x0028)(Net, Protected, NativeAccessSpecifierProtected)
	float                                         Duration;                                          // 0x00F0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveRange;                                         // 0x00F4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            PathProgressionCurve;                              // 0x00F8(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRestrictSpeedToExpected;                          // 0x0100(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A26[0x3];                                     // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageOverlapSphereRadius;                         // 0x0104(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AActor>>             ActorTypesNotToDamageOverlap;                      // 0x0108(0x0010)(Net, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AActor>>             NonDamageableActorTypesToIgnoreHit;                // 0x0118(0x0010)(Net, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	ECollisionChannel                             DamageSphereCollisionChannel;                      // 0x0128(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A27[0x7];                                     // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       DamageSphereComponent;                             // 0x0130(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A28[0x30];                                    // 0x0138(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_ApplyRootMotionMoveToDynamicForce* CreateInstance(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, struct FGameplayAbilityTargetDataHandle& Param_AimDataHandle, float Param_Duration, float Param_MoveRange, class UCurveFloat* Param_PathProgressionCurve, float ClampVelocityOnFinish, bool Param_bRestrictSpeedToExpected, const TArray<TSubclassOf<class AActor>>& Param_NonDamageableActorTypesToIgnoreHit, bool bDrawDebug);
	static class UMarinerTask_ApplyRootMotionMoveToDynamicForce* CreateInstanceWithDamageSphere(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, struct FGameplayAbilityTargetDataHandle& Param_AimDataHandle, float Param_Duration, float Param_MoveRange, class UCurveFloat* Param_PathProgressionCurve, float ClampVelocityOnFinish, bool Param_bRestrictSpeedToExpected, ECollisionChannel Param_DamageSphereCollisionChannel, float Param_DamageOverlapSphereRadius, const TArray<TSubclassOf<class AActor>>& Param_ActorTypesNotToDamageOverlap, const TArray<TSubclassOf<class AActor>>& Param_NonDamageableActorTypesToIgnoreHit, bool bDrawDebug);

	void FinishTask();
	void InterruptRootMotion();
	void OnAvatarActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnDamageSphereOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnImpendingMegablast(const class UMarinerDamageableComponent* RelevantDamageableComponent, const class AMarinerCharacter* CharacterExpectingMegablast);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_ApplyRootMotionMoveToDynamicForce">();
	}
	static class UMarinerTask_ApplyRootMotionMoveToDynamicForce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_ApplyRootMotionMoveToDynamicForce>();
	}
};
static_assert(alignof(UMarinerTask_ApplyRootMotionMoveToDynamicForce) == 0x000008, "Wrong alignment on UMarinerTask_ApplyRootMotionMoveToDynamicForce");
static_assert(sizeof(UMarinerTask_ApplyRootMotionMoveToDynamicForce) == 0x000168, "Wrong size on UMarinerTask_ApplyRootMotionMoveToDynamicForce");
static_assert(offsetof(UMarinerTask_ApplyRootMotionMoveToDynamicForce, NotifyInfoDelegate) == 0x0000B8, "Member 'UMarinerTask_ApplyRootMotionMoveToDynamicForce::NotifyInfoDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ApplyRootMotionMoveToDynamicForce, AimDataHandle) == 0x0000C8, "Member 'UMarinerTask_ApplyRootMotionMoveToDynamicForce::AimDataHandle' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ApplyRootMotionMoveToDynamicForce, Duration) == 0x0000F0, "Member 'UMarinerTask_ApplyRootMotionMoveToDynamicForce::Duration' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ApplyRootMotionMoveToDynamicForce, MoveRange) == 0x0000F4, "Member 'UMarinerTask_ApplyRootMotionMoveToDynamicForce::MoveRange' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ApplyRootMotionMoveToDynamicForce, PathProgressionCurve) == 0x0000F8, "Member 'UMarinerTask_ApplyRootMotionMoveToDynamicForce::PathProgressionCurve' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ApplyRootMotionMoveToDynamicForce, bRestrictSpeedToExpected) == 0x000100, "Member 'UMarinerTask_ApplyRootMotionMoveToDynamicForce::bRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ApplyRootMotionMoveToDynamicForce, DamageOverlapSphereRadius) == 0x000104, "Member 'UMarinerTask_ApplyRootMotionMoveToDynamicForce::DamageOverlapSphereRadius' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ApplyRootMotionMoveToDynamicForce, ActorTypesNotToDamageOverlap) == 0x000108, "Member 'UMarinerTask_ApplyRootMotionMoveToDynamicForce::ActorTypesNotToDamageOverlap' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ApplyRootMotionMoveToDynamicForce, NonDamageableActorTypesToIgnoreHit) == 0x000118, "Member 'UMarinerTask_ApplyRootMotionMoveToDynamicForce::NonDamageableActorTypesToIgnoreHit' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ApplyRootMotionMoveToDynamicForce, DamageSphereCollisionChannel) == 0x000128, "Member 'UMarinerTask_ApplyRootMotionMoveToDynamicForce::DamageSphereCollisionChannel' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ApplyRootMotionMoveToDynamicForce, DamageSphereComponent) == 0x000130, "Member 'UMarinerTask_ApplyRootMotionMoveToDynamicForce::DamageSphereComponent' has a wrong offset!");

// Class Mariner.MarinerTask_ApplyRootMotionSlowToStop
// 0x0028 (0x00E0 - 0x00B8)
class UMarinerTask_ApplyRootMotionSlowToStop final : public UAbilityTask_ApplyRootMotion_Base
{
public:
	UMulticastInlineDelegateProperty_             OnFinished;                                        // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x00C8(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A30[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DecelerationCurve;                                 // 0x00D0(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A31[0x8];                                     // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_ApplyRootMotionSlowToStop* CreateInstance(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, float Param_Duration, class UCurveFloat* Param_DecelerationCurve);

	void EndStopEarly();
	void OnImpendingMegablast(const class UMarinerDamageableComponent* RelevantDamageableComponent, const class AMarinerCharacter* CharacterExpectingMegablast);
	void OnRep_Duration();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_ApplyRootMotionSlowToStop">();
	}
	static class UMarinerTask_ApplyRootMotionSlowToStop* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_ApplyRootMotionSlowToStop>();
	}
};
static_assert(alignof(UMarinerTask_ApplyRootMotionSlowToStop) == 0x000008, "Wrong alignment on UMarinerTask_ApplyRootMotionSlowToStop");
static_assert(sizeof(UMarinerTask_ApplyRootMotionSlowToStop) == 0x0000E0, "Wrong size on UMarinerTask_ApplyRootMotionSlowToStop");
static_assert(offsetof(UMarinerTask_ApplyRootMotionSlowToStop, OnFinished) == 0x0000B8, "Member 'UMarinerTask_ApplyRootMotionSlowToStop::OnFinished' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ApplyRootMotionSlowToStop, Duration) == 0x0000C8, "Member 'UMarinerTask_ApplyRootMotionSlowToStop::Duration' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ApplyRootMotionSlowToStop, DecelerationCurve) == 0x0000D0, "Member 'UMarinerTask_ApplyRootMotionSlowToStop::DecelerationCurve' has a wrong offset!");

// Class Mariner.MarinerTask_DropItems
// 0x0008 (0x0088 - 0x0080)
class UMarinerTask_DropItems final : public UAbilityTask
{
public:
	uint8                                         Pad_1A33[0x8];                                     // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_DropItems* DropItemsByPriority(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool bPriorityStatusToRemove);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_DropItems">();
	}
	static class UMarinerTask_DropItems* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_DropItems>();
	}
};
static_assert(alignof(UMarinerTask_DropItems) == 0x000008, "Wrong alignment on UMarinerTask_DropItems");
static_assert(sizeof(UMarinerTask_DropItems) == 0x000088, "Wrong size on UMarinerTask_DropItems");

// Class Mariner.MarinerTask_LaunchCharacter
// 0x0018 (0x0098 - 0x0080)
class UMarinerTask_LaunchCharacter final : public UAbilityTask
{
public:
	UMulticastInlineDelegateProperty_             OnResolvedDelegate;                                // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A35[0x8];                                     // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_LaunchCharacter* LaunchCharacter(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, float LaunchUpStrength, float LaunchForwardStrength);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_LaunchCharacter">();
	}
	static class UMarinerTask_LaunchCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_LaunchCharacter>();
	}
};
static_assert(alignof(UMarinerTask_LaunchCharacter) == 0x000008, "Wrong alignment on UMarinerTask_LaunchCharacter");
static_assert(sizeof(UMarinerTask_LaunchCharacter) == 0x000098, "Wrong size on UMarinerTask_LaunchCharacter");
static_assert(offsetof(UMarinerTask_LaunchCharacter, OnResolvedDelegate) == 0x000080, "Member 'UMarinerTask_LaunchCharacter::OnResolvedDelegate' has a wrong offset!");

// Class Mariner.MarinerTask_LimitItemUsage
// 0x0018 (0x0098 - 0x0080)
class UMarinerTask_LimitItemUsage final : public UAbilityTask
{
public:
	UMulticastInlineDelegateProperty_             OnAvatarPickedUpItem;                              // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A36[0x8];                                     // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_LimitItemUsage* LimitItemUsage(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool bShouldPreventItemUsage, EMarinerItemSlotsToLimit SlotsToPreventPickUpsIn, EMarinerItemSlotsToLimit SlotsToImmediatelyDropContentsFrom);

	void OnItemPickedUp(class AMarinerCharacter* CatchingCharacter, EMarinerItemSlot ItemSlot);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_LimitItemUsage">();
	}
	static class UMarinerTask_LimitItemUsage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_LimitItemUsage>();
	}
};
static_assert(alignof(UMarinerTask_LimitItemUsage) == 0x000008, "Wrong alignment on UMarinerTask_LimitItemUsage");
static_assert(sizeof(UMarinerTask_LimitItemUsage) == 0x000098, "Wrong size on UMarinerTask_LimitItemUsage");
static_assert(offsetof(UMarinerTask_LimitItemUsage, OnAvatarPickedUpItem) == 0x000080, "Member 'UMarinerTask_LimitItemUsage::OnAvatarPickedUpItem' has a wrong offset!");

// Class Mariner.MarinerTask_ListenForDamageTaken
// 0x0060 (0x00E0 - 0x0080)
class UMarinerTask_ListenForDamageTaken final : public UAbilityTask
{
public:
	UMulticastInlineDelegateProperty_             OnDamageThresholdHit;                              // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnFailedToHitThreshold;                            // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         AccumulatedDamage;                                 // 0x00A0(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageThreshold;                                   // 0x00A4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A39[0x38];                                    // 0x00A8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_ListenForDamageTaken* ListenForDamageTaken(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, float Param_DamageThreshold, float TimeOutDuration, float ResetAccumulationTimerDuration, bool bListenToIncomingDamageVsDamageTaken);
	static class UMarinerTask_ListenForDamageTaken* ListenForDamageTakenRollingPeriod(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, float Param_DamageThreshold, float TimeOutDuration, float RollingTimePeriod);

	float GetAccumulatedRollingDamage();
	void OnAvatarTakeDamage(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void OnRep_AccumulatedDamage();
	void OnResetAccumulationTimerExpired();
	void OnThresholdHit();
	void OnTimeOut();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_ListenForDamageTaken">();
	}
	static class UMarinerTask_ListenForDamageTaken* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_ListenForDamageTaken>();
	}
};
static_assert(alignof(UMarinerTask_ListenForDamageTaken) == 0x000008, "Wrong alignment on UMarinerTask_ListenForDamageTaken");
static_assert(sizeof(UMarinerTask_ListenForDamageTaken) == 0x0000E0, "Wrong size on UMarinerTask_ListenForDamageTaken");
static_assert(offsetof(UMarinerTask_ListenForDamageTaken, OnDamageThresholdHit) == 0x000080, "Member 'UMarinerTask_ListenForDamageTaken::OnDamageThresholdHit' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForDamageTaken, OnFailedToHitThreshold) == 0x000090, "Member 'UMarinerTask_ListenForDamageTaken::OnFailedToHitThreshold' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForDamageTaken, AccumulatedDamage) == 0x0000A0, "Member 'UMarinerTask_ListenForDamageTaken::AccumulatedDamage' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForDamageTaken, DamageThreshold) == 0x0000A4, "Member 'UMarinerTask_ListenForDamageTaken::DamageThreshold' has a wrong offset!");

// Class Mariner.MarinerTask_ListenForFastOverlaps
// 0x00E8 (0x0168 - 0x0080)
class UMarinerTask_ListenForFastOverlaps final : public UAbilityTask
{
public:
	UMulticastInlineDelegateProperty_             OnOverlapDelegate;                                 // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnBeginOverlapDelegate;                            // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnEndOverlapDelegate;                              // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnFastOverlapOriginLostDelegate;                   // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FVector                                OverlapOrigin;                                     // 0x00C0(0x000C)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  OverlapOriginActor;                                // 0x00CC(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UMovementComponent>      OverlapOriginMovementComponent;                    // 0x00D4(0x0008)(ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OverlapRadius;                                     // 0x00DC(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             OverlapCollisionChannel;                           // 0x00E0(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         FastCollisionCollection;                           // 0x00E1(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A3D[0x6];                                     // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x00E8(0x0010)(Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           IgnoreActorTypes;                                  // 0x00F8(0x0010)(Net, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bManagedOverlapsEnabled;                           // 0x0108(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A3E[0x57];                                    // 0x0109(0x0057)(Fixing Size After Last Property [ Dumper-7 ])
	EMarinerFastOverlapTaskType                   OverlapBehaviorType;                               // 0x0160(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A3F[0x7];                                     // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_ListenForFastOverlaps* ListenForFastSphereOverlapsAtActorLocation(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool Param_bManagedOverlapsEnabled, bool bSimulateOnNonOwningClients, class AActor* Param_OverlapOriginActor, float Param_OverlapRadius, ECollisionChannel Param_OverlapCollisionChannel, uint8 Param_FastCollisionCollection, const TArray<class AActor*>& Param_IgnoreActors, const TArray<TSoftClassPtr<class UClass>>& Param_IgnoreActorTypes);
	static class UMarinerTask_ListenForFastOverlaps* ListenForFastSphereOverlapsAtLocation(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool Param_bManagedOverlapsEnabled, bool bSimulateOnNonOwningClients, const struct FVector& Param_OverlapOrigin, float Param_OverlapRadius, ECollisionChannel Param_OverlapCollisionChannel, uint8 Param_FastCollisionCollection, const TArray<class AActor*>& Param_IgnoreActors, const TArray<TSoftClassPtr<class UClass>>& Param_IgnoreActorTypes);
	static class UMarinerTask_ListenForFastOverlaps* ListenForFastSphereOverlapsAtMovingActorLocation(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool Param_bManagedOverlapsEnabled, bool bSimulateOnNonOwningClients, class UMovementComponent* Param_OverlapOriginMovementComponent, float Param_OverlapRadius, ECollisionChannel Param_OverlapCollisionChannel, uint8 Param_FastCollisionCollection, const TArray<class AActor*>& Param_IgnoreActors, const TArray<TSoftClassPtr<class UClass>>& Param_IgnoreActorTypes);

	void FinishTask();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_ListenForFastOverlaps">();
	}
	static class UMarinerTask_ListenForFastOverlaps* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_ListenForFastOverlaps>();
	}
};
static_assert(alignof(UMarinerTask_ListenForFastOverlaps) == 0x000008, "Wrong alignment on UMarinerTask_ListenForFastOverlaps");
static_assert(sizeof(UMarinerTask_ListenForFastOverlaps) == 0x000168, "Wrong size on UMarinerTask_ListenForFastOverlaps");
static_assert(offsetof(UMarinerTask_ListenForFastOverlaps, OnOverlapDelegate) == 0x000080, "Member 'UMarinerTask_ListenForFastOverlaps::OnOverlapDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForFastOverlaps, OnBeginOverlapDelegate) == 0x000090, "Member 'UMarinerTask_ListenForFastOverlaps::OnBeginOverlapDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForFastOverlaps, OnEndOverlapDelegate) == 0x0000A0, "Member 'UMarinerTask_ListenForFastOverlaps::OnEndOverlapDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForFastOverlaps, OnFastOverlapOriginLostDelegate) == 0x0000B0, "Member 'UMarinerTask_ListenForFastOverlaps::OnFastOverlapOriginLostDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForFastOverlaps, OverlapOrigin) == 0x0000C0, "Member 'UMarinerTask_ListenForFastOverlaps::OverlapOrigin' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForFastOverlaps, OverlapOriginActor) == 0x0000CC, "Member 'UMarinerTask_ListenForFastOverlaps::OverlapOriginActor' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForFastOverlaps, OverlapOriginMovementComponent) == 0x0000D4, "Member 'UMarinerTask_ListenForFastOverlaps::OverlapOriginMovementComponent' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForFastOverlaps, OverlapRadius) == 0x0000DC, "Member 'UMarinerTask_ListenForFastOverlaps::OverlapRadius' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForFastOverlaps, OverlapCollisionChannel) == 0x0000E0, "Member 'UMarinerTask_ListenForFastOverlaps::OverlapCollisionChannel' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForFastOverlaps, FastCollisionCollection) == 0x0000E1, "Member 'UMarinerTask_ListenForFastOverlaps::FastCollisionCollection' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForFastOverlaps, IgnoreActors) == 0x0000E8, "Member 'UMarinerTask_ListenForFastOverlaps::IgnoreActors' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForFastOverlaps, IgnoreActorTypes) == 0x0000F8, "Member 'UMarinerTask_ListenForFastOverlaps::IgnoreActorTypes' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForFastOverlaps, bManagedOverlapsEnabled) == 0x000108, "Member 'UMarinerTask_ListenForFastOverlaps::bManagedOverlapsEnabled' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForFastOverlaps, OverlapBehaviorType) == 0x000160, "Member 'UMarinerTask_ListenForFastOverlaps::OverlapBehaviorType' has a wrong offset!");

// Class Mariner.MarinerTask_ListenForGameplayEffectRemoved
// 0x0060 (0x00E0 - 0x0080)
class UMarinerTask_ListenForGameplayEffectRemoved final : public UAbilityTask
{
public:
	UMulticastInlineDelegateProperty_             OnGameplayEffectRemovedDelegate;                   // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnGameplayEffectListenFinished;                    // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnGameplayEffectListenFailed;                      // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A46[0x30];                                    // 0x00B0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_ListenForGameplayEffectRemoved* ListenForGameplayEffectRemoved(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool bEndOnAllGameplayEffectStacksRemoved, bool bApplyGameplayEffectOnStartListening, class AMarinerCharacter* TargetCharacter, TSubclassOf<class UGameplayEffect> GameplayEffectToListenFor);

	void ApplyGameplayEffect();
	void FinishTask();
	void OnAnyGameplayEffectRemoved(const struct FActiveGameplayEffect& RemovedEffect);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_ListenForGameplayEffectRemoved">();
	}
	static class UMarinerTask_ListenForGameplayEffectRemoved* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_ListenForGameplayEffectRemoved>();
	}
};
static_assert(alignof(UMarinerTask_ListenForGameplayEffectRemoved) == 0x000008, "Wrong alignment on UMarinerTask_ListenForGameplayEffectRemoved");
static_assert(sizeof(UMarinerTask_ListenForGameplayEffectRemoved) == 0x0000E0, "Wrong size on UMarinerTask_ListenForGameplayEffectRemoved");
static_assert(offsetof(UMarinerTask_ListenForGameplayEffectRemoved, OnGameplayEffectRemovedDelegate) == 0x000080, "Member 'UMarinerTask_ListenForGameplayEffectRemoved::OnGameplayEffectRemovedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForGameplayEffectRemoved, OnGameplayEffectListenFinished) == 0x000090, "Member 'UMarinerTask_ListenForGameplayEffectRemoved::OnGameplayEffectListenFinished' has a wrong offset!");
static_assert(offsetof(UMarinerTask_ListenForGameplayEffectRemoved, OnGameplayEffectListenFailed) == 0x0000A0, "Member 'UMarinerTask_ListenForGameplayEffectRemoved::OnGameplayEffectListenFailed' has a wrong offset!");

// Class Mariner.MarinerTask_PlayMontageAndWait
// 0x0078 (0x00F8 - 0x0080)
class UMarinerTask_PlayMontageAndWait final : public UAbilityTask
{
public:
	uint8                                         Pad_1A48[0x8];                                     // 0x0080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnCompleted;                                       // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnBlendOut;                                        // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnInterrupted;                                     // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnCancelled;                                       // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMarinerCharacterMontage*               MontageToPlay;                                     // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A49[0x28];                                    // 0x00D0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_PlayMontageAndWait* CreateInstance(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, class UMarinerCharacterMontage* Param_MontageToPlay, float MaxWaitTimeTillCompletion);

	void OnAnimNotifyCharacterEvent(EAnimNotifyCharacterEventType EventType);
	void OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageInterrupted();
	void OnMontageStarted(class UAnimMontage* Montage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_PlayMontageAndWait">();
	}
	static class UMarinerTask_PlayMontageAndWait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_PlayMontageAndWait>();
	}
};
static_assert(alignof(UMarinerTask_PlayMontageAndWait) == 0x000008, "Wrong alignment on UMarinerTask_PlayMontageAndWait");
static_assert(sizeof(UMarinerTask_PlayMontageAndWait) == 0x0000F8, "Wrong size on UMarinerTask_PlayMontageAndWait");
static_assert(offsetof(UMarinerTask_PlayMontageAndWait, OnCompleted) == 0x000088, "Member 'UMarinerTask_PlayMontageAndWait::OnCompleted' has a wrong offset!");
static_assert(offsetof(UMarinerTask_PlayMontageAndWait, OnBlendOut) == 0x000098, "Member 'UMarinerTask_PlayMontageAndWait::OnBlendOut' has a wrong offset!");
static_assert(offsetof(UMarinerTask_PlayMontageAndWait, OnInterrupted) == 0x0000A8, "Member 'UMarinerTask_PlayMontageAndWait::OnInterrupted' has a wrong offset!");
static_assert(offsetof(UMarinerTask_PlayMontageAndWait, OnCancelled) == 0x0000B8, "Member 'UMarinerTask_PlayMontageAndWait::OnCancelled' has a wrong offset!");
static_assert(offsetof(UMarinerTask_PlayMontageAndWait, MontageToPlay) == 0x0000C8, "Member 'UMarinerTask_PlayMontageAndWait::MontageToPlay' has a wrong offset!");

// Class Mariner.MarinerTask_SpawnActor
// 0x0080 (0x0100 - 0x0080)
class UMarinerTask_SpawnActor final : public UAbilityTask
{
public:
	UMulticastInlineDelegateProperty_             OnSuccessfulSpawn;                                 // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnFailureToSpawn;                                  // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4D[0x50];                                    // 0x00A0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorSpawned;                                      // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AActor>                     ActorType;                                         // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UMarinerTask_SpawnActor* SpawnActor(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, TSubclassOf<class AActor> Param_ActorType, const struct FVector& DesiredLocation, const struct FRotator& DesiredRotation, bool bIsPositioningRelativeToCaster);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_SpawnActor">();
	}
	static class UMarinerTask_SpawnActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_SpawnActor>();
	}
};
static_assert(alignof(UMarinerTask_SpawnActor) == 0x000008, "Wrong alignment on UMarinerTask_SpawnActor");
static_assert(sizeof(UMarinerTask_SpawnActor) == 0x000100, "Wrong size on UMarinerTask_SpawnActor");
static_assert(offsetof(UMarinerTask_SpawnActor, OnSuccessfulSpawn) == 0x000080, "Member 'UMarinerTask_SpawnActor::OnSuccessfulSpawn' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnActor, OnFailureToSpawn) == 0x000090, "Member 'UMarinerTask_SpawnActor::OnFailureToSpawn' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnActor, ActorSpawned) == 0x0000F0, "Member 'UMarinerTask_SpawnActor::ActorSpawned' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnActor, ActorType) == 0x0000F8, "Member 'UMarinerTask_SpawnActor::ActorType' has a wrong offset!");

// Class Mariner.MarinerTask_SpawnAimingReticle
// 0x0158 (0x01D8 - 0x0080)
class UMarinerTask_SpawnAimingReticle final : public UAbilityTask
{
public:
	UMulticastInlineDelegateProperty_             OnCompleted;                                       // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnFailed;                                          // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnReticleEnteredDamageableDelegate;                // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnReticleExitedDamageableDelegate;                 // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnReticleTouchedDamageableChangedDelegate;         // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnReticleEnteredAnythingDelegate;                  // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnReticleExitedAnythingDelegate;                   // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ReticleActorType;                                  // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A4F[0x10];                                    // 0x00F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      ReticleCapsuleTracer;                              // 0x0108(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                       ReticleDamageableSphereTracer;                     // 0x0110(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 SpawnedAimingReticle;                              // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A50[0x9C];                                    // 0x0120(0x009C)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  DamageableTouchedActor;                            // 0x01BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A51[0x14];                                    // 0x01C4(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_SpawnAimingReticle* CreateInstanceUsingCapsuleFromActorAsMask(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, TSubclassOf<class AActor> Param_ReticleActorType, float MinimumReticleRenderDistance, float MaximumReticleDistance, float CapsuleTracerRadiusModifier, float CapsuleTracerHalfHeightModifier, const TArray<TSubclassOf<class AActor>>& CapsuleTracerClassesToIgnoreHits, bool bSpinOnTouchAnything, float ReticleSpinDegreesPerSecond, bool bUseDamageSphere, float SphereDamageableTracerRadius, ECollisionChannel DamageSphereTracerCollisionChannel, const TArray<TSubclassOf<class AActor>>& DamageableSphereActorTypeWhitelist, bool bAlwaysPlaceReticleAtMaxRange, bool bDrawDebug);

	void FinishTask();
	float FreezeReticle();
	void UpdateReticleRange(float NewRange);

	class AActor* GetDamagableTouched() const;
	const struct FVector GetFurthestNonDamageableImpactPoint() const;
	class AMarinerCharacter* GetLastCharacterReticleOverlapped() const;
	class AActor* GetReticleActor() const;
	bool IsReticleTouchingAnything() const;
	bool IsReticleTouchingDamagable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_SpawnAimingReticle">();
	}
	static class UMarinerTask_SpawnAimingReticle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_SpawnAimingReticle>();
	}
};
static_assert(alignof(UMarinerTask_SpawnAimingReticle) == 0x000008, "Wrong alignment on UMarinerTask_SpawnAimingReticle");
static_assert(sizeof(UMarinerTask_SpawnAimingReticle) == 0x0001D8, "Wrong size on UMarinerTask_SpawnAimingReticle");
static_assert(offsetof(UMarinerTask_SpawnAimingReticle, OnCompleted) == 0x000080, "Member 'UMarinerTask_SpawnAimingReticle::OnCompleted' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnAimingReticle, OnFailed) == 0x000090, "Member 'UMarinerTask_SpawnAimingReticle::OnFailed' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnAimingReticle, OnReticleEnteredDamageableDelegate) == 0x0000A0, "Member 'UMarinerTask_SpawnAimingReticle::OnReticleEnteredDamageableDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnAimingReticle, OnReticleExitedDamageableDelegate) == 0x0000B0, "Member 'UMarinerTask_SpawnAimingReticle::OnReticleExitedDamageableDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnAimingReticle, OnReticleTouchedDamageableChangedDelegate) == 0x0000C0, "Member 'UMarinerTask_SpawnAimingReticle::OnReticleTouchedDamageableChangedDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnAimingReticle, OnReticleEnteredAnythingDelegate) == 0x0000D0, "Member 'UMarinerTask_SpawnAimingReticle::OnReticleEnteredAnythingDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnAimingReticle, OnReticleExitedAnythingDelegate) == 0x0000E0, "Member 'UMarinerTask_SpawnAimingReticle::OnReticleExitedAnythingDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnAimingReticle, ReticleActorType) == 0x0000F0, "Member 'UMarinerTask_SpawnAimingReticle::ReticleActorType' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnAimingReticle, ReticleCapsuleTracer) == 0x000108, "Member 'UMarinerTask_SpawnAimingReticle::ReticleCapsuleTracer' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnAimingReticle, ReticleDamageableSphereTracer) == 0x000110, "Member 'UMarinerTask_SpawnAimingReticle::ReticleDamageableSphereTracer' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnAimingReticle, SpawnedAimingReticle) == 0x000118, "Member 'UMarinerTask_SpawnAimingReticle::SpawnedAimingReticle' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnAimingReticle, DamageableTouchedActor) == 0x0001BC, "Member 'UMarinerTask_SpawnAimingReticle::DamageableTouchedActor' has a wrong offset!");

// Class Mariner.MarinerTask_SpawnMultiProjectile
// 0x0090 (0x01B0 - 0x0120)
class alignas(0x10) UMarinerTask_SpawnMultiProjectile final : public UMarinerTask_SpawnProjectile_Base
{
public:
	UMulticastInlineDelegateProperty_             OnAllProjectilesFinishedSpawning;                  // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UMarinerProjectileSpread>> ProjectileSpreads;                                 // 0x0130(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	int32                                         CalculatedProjectileQuantity;                      // 0x0140(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A56[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SpawnTimer;                                        // 0x0148(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ProjectilesCreated;                                // 0x0150(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A57[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMultiProjectileSpawnData>      SpawnPaths;                                        // 0x0158(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         SpawnPathBatchingTimeTolerance;                    // 0x0168(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A58[0x44];                                    // 0x016C(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_SpawnMultiProjectile* SpawnMultiProjectile(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const TSubclassOf<class AMarinerProjectile>& DefaultProjectileType, const TArray<TSubclassOf<class UMarinerProjectileSpread>>& Param_ProjectileSpreads, struct FGameplayAbilityTargetDataHandle& AimDataHandle, EMarinerSpawnSocketSource SocketSource, class FName SocketToSpawnAt, float Param_SpawnPathBatchingTimeTolerance);
	static class UMarinerTask_SpawnMultiProjectile* SpawnMultiProjectileWithPool(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const TSubclassOf<class AMarinerProjectile>& DefaultProjectileType, const TArray<TSubclassOf<class UMarinerProjectileSpread>>& Param_ProjectileSpreads, struct FGameplayAbilityTargetDataHandle& AimDataHandle, EMarinerSpawnSocketSource SocketSource, class FName SocketToSpawnAt, float Param_SpawnPathBatchingTimeTolerance, int32 OptionalMaximumProjectilesToSpawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_SpawnMultiProjectile">();
	}
	static class UMarinerTask_SpawnMultiProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_SpawnMultiProjectile>();
	}
};
static_assert(alignof(UMarinerTask_SpawnMultiProjectile) == 0x000010, "Wrong alignment on UMarinerTask_SpawnMultiProjectile");
static_assert(sizeof(UMarinerTask_SpawnMultiProjectile) == 0x0001B0, "Wrong size on UMarinerTask_SpawnMultiProjectile");
static_assert(offsetof(UMarinerTask_SpawnMultiProjectile, OnAllProjectilesFinishedSpawning) == 0x000120, "Member 'UMarinerTask_SpawnMultiProjectile::OnAllProjectilesFinishedSpawning' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnMultiProjectile, ProjectileSpreads) == 0x000130, "Member 'UMarinerTask_SpawnMultiProjectile::ProjectileSpreads' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnMultiProjectile, CalculatedProjectileQuantity) == 0x000140, "Member 'UMarinerTask_SpawnMultiProjectile::CalculatedProjectileQuantity' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnMultiProjectile, SpawnTimer) == 0x000148, "Member 'UMarinerTask_SpawnMultiProjectile::SpawnTimer' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnMultiProjectile, ProjectilesCreated) == 0x000150, "Member 'UMarinerTask_SpawnMultiProjectile::ProjectilesCreated' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnMultiProjectile, SpawnPaths) == 0x000158, "Member 'UMarinerTask_SpawnMultiProjectile::SpawnPaths' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnMultiProjectile, SpawnPathBatchingTimeTolerance) == 0x000168, "Member 'UMarinerTask_SpawnMultiProjectile::SpawnPathBatchingTimeTolerance' has a wrong offset!");

// Class Mariner.MarinerTask_SpawnProjectile
// 0x0010 (0x0130 - 0x0120)
class UMarinerTask_SpawnProjectile final : public UMarinerTask_SpawnProjectile_Base
{
public:
	uint8                                         Pad_1A5C[0x10];                                    // 0x0120(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_SpawnProjectile* SpawnProjectile(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const TSubclassOf<class AMarinerProjectile>& DefaultProjectileType, struct FGameplayAbilityTargetDataHandle& AimDataHandle, EMarinerSpawnSocketSource SocketSource, class FName SocketToSpawnAt, const struct FVector& SpawnLocationOffset);
	static class UMarinerTask_SpawnProjectile* SpawnProjectileWithPool(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const TSubclassOf<class AMarinerProjectile>& DefaultProjectileType, struct FGameplayAbilityTargetDataHandle& AimDataHandle, EMarinerSpawnSocketSource SocketSource, class FName SocketToSpawnAt, const struct FVector& SpawnLocationOffset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_SpawnProjectile">();
	}
	static class UMarinerTask_SpawnProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_SpawnProjectile>();
	}
};
static_assert(alignof(UMarinerTask_SpawnProjectile) == 0x000008, "Wrong alignment on UMarinerTask_SpawnProjectile");
static_assert(sizeof(UMarinerTask_SpawnProjectile) == 0x000130, "Wrong size on UMarinerTask_SpawnProjectile");

// Class Mariner.MarinerTask_SpawnProjectileAtSafeLocation
// 0x0060 (0x0180 - 0x0120)
class alignas(0x10) UMarinerTask_SpawnProjectileAtSafeLocation final : public UMarinerTask_SpawnProjectile_Base
{
public:
	uint8                                         Pad_1A5F[0x8];                                     // 0x0120(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CapsuleSource;                                     // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A60[0x8];                                     // 0x0130(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0138(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A61[0x38];                                    // 0x0148(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_SpawnProjectileAtSafeLocation* SpawnGroundedProjectile(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const TSubclassOf<class AMarinerProjectile>& DefaultProjectileType, EMarinerSpawnSocketSource SocketSource, const struct FVector& SweepFromOrigin, const struct FVector& SweepDirection, float MaxSpawnDistance, float SweepCapsuleHalfHeightScale, float SweepCapsuleRadiusScale, class AActor* Param_CapsuleSource, ETraceTypeQuery TraceChannel, const TArray<class AActor*>& Param_IgnoredActors, const struct FVector& HitLocationSpawnOffset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_SpawnProjectileAtSafeLocation">();
	}
	static class UMarinerTask_SpawnProjectileAtSafeLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_SpawnProjectileAtSafeLocation>();
	}
};
static_assert(alignof(UMarinerTask_SpawnProjectileAtSafeLocation) == 0x000010, "Wrong alignment on UMarinerTask_SpawnProjectileAtSafeLocation");
static_assert(sizeof(UMarinerTask_SpawnProjectileAtSafeLocation) == 0x000180, "Wrong size on UMarinerTask_SpawnProjectileAtSafeLocation");
static_assert(offsetof(UMarinerTask_SpawnProjectileAtSafeLocation, CapsuleSource) == 0x000128, "Member 'UMarinerTask_SpawnProjectileAtSafeLocation::CapsuleSource' has a wrong offset!");
static_assert(offsetof(UMarinerTask_SpawnProjectileAtSafeLocation, IgnoredActors) == 0x000138, "Member 'UMarinerTask_SpawnProjectileAtSafeLocation::IgnoredActors' has a wrong offset!");

// Class Mariner.MarinerTask_TeleportToActor
// 0x0098 (0x0118 - 0x0080)
class UMarinerTask_TeleportToActor final : public UAbilityTask
{
public:
	UMulticastInlineDelegateProperty_             OnTeleportationStarted;                            // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnTeleportationFinished;                           // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnTeleportationFailed;                             // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnSwapPartialFailed;                               // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A65[0x58];                                    // 0x00C0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarinerTask_TeleportToActor* SwapActors(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const struct FGameplayAbilityActorInfo& ActorToTeleportInfo, class AActor* TeleportationTarget, bool bPlaceSecondActorNearestDownLocation, bool bDestroyTargetOnFailedSwap, const struct FVector& TeleportDestinationOffset, const struct FVector& SecondDestinationOffset, float MaxSwapProbeDepth, float StartSwapProbeHeightAboveActorLoc, float MaxVelocityAfterTeleport, float CapsuleHalfHeightScale, float CapsuleRadiusScale, ETraceTypeQuery TraceChannel, const TArray<struct FVector>& BackupLocations);
	static class UMarinerTask_TeleportToActor* TeleportToActor(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const struct FGameplayAbilityActorInfo& ActorToTeleportInfo, class AActor* TeleportationTarget, EMarinerTeleportBehavior TeleportBehavior, const struct FVector& TeleportDestinationOffset, float MaxVelocityAfterTeleport, const TArray<struct FVector>& BackupLocations);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_TeleportToActor">();
	}
	static class UMarinerTask_TeleportToActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_TeleportToActor>();
	}
};
static_assert(alignof(UMarinerTask_TeleportToActor) == 0x000008, "Wrong alignment on UMarinerTask_TeleportToActor");
static_assert(sizeof(UMarinerTask_TeleportToActor) == 0x000118, "Wrong size on UMarinerTask_TeleportToActor");
static_assert(offsetof(UMarinerTask_TeleportToActor, OnTeleportationStarted) == 0x000080, "Member 'UMarinerTask_TeleportToActor::OnTeleportationStarted' has a wrong offset!");
static_assert(offsetof(UMarinerTask_TeleportToActor, OnTeleportationFinished) == 0x000090, "Member 'UMarinerTask_TeleportToActor::OnTeleportationFinished' has a wrong offset!");
static_assert(offsetof(UMarinerTask_TeleportToActor, OnTeleportationFailed) == 0x0000A0, "Member 'UMarinerTask_TeleportToActor::OnTeleportationFailed' has a wrong offset!");
static_assert(offsetof(UMarinerTask_TeleportToActor, OnSwapPartialFailed) == 0x0000B0, "Member 'UMarinerTask_TeleportToActor::OnSwapPartialFailed' has a wrong offset!");

// Class Mariner.MarinerTask_WaitForAimData
// 0x0010 (0x0090 - 0x0080)
class UMarinerTask_WaitForAimData final : public UAbilityTask
{
public:
	UMulticastInlineDelegateProperty_             OnCompleted;                                       // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UMarinerTask_WaitForAimData* WaitForAimData(class UGameplayAbility* OwningAbility, class FName TaskInstanceName);

	void OnAimDataReceived(const struct FGameplayAbilityTargetDataHandle& AimDataHandle, const struct FGameplayTag& ActivationTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTask_WaitForAimData">();
	}
	static class UMarinerTask_WaitForAimData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTask_WaitForAimData>();
	}
};
static_assert(alignof(UMarinerTask_WaitForAimData) == 0x000008, "Wrong alignment on UMarinerTask_WaitForAimData");
static_assert(sizeof(UMarinerTask_WaitForAimData) == 0x000090, "Wrong size on UMarinerTask_WaitForAimData");
static_assert(offsetof(UMarinerTask_WaitForAimData, OnCompleted) == 0x000080, "Member 'UMarinerTask_WaitForAimData::OnCompleted' has a wrong offset!");

// Class Mariner.MarinerTeamAffiliatedObjectInterface
// 0x0000 (0x0028 - 0x0028)
class IMarinerTeamAffiliatedObjectInterface final : public IInterface
{
public:
	void SetTeamIndex(int32 InTeamIndex);
	void UpdateTeamColors();

	int32 GetTeamIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTeamAffiliatedObjectInterface">();
	}
	static class IMarinerTeamAffiliatedObjectInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarinerTeamAffiliatedObjectInterface>();
	}
};
static_assert(alignof(IMarinerTeamAffiliatedObjectInterface) == 0x000008, "Wrong alignment on IMarinerTeamAffiliatedObjectInterface");
static_assert(sizeof(IMarinerTeamAffiliatedObjectInterface) == 0x000028, "Wrong size on IMarinerTeamAffiliatedObjectInterface");

// Class Mariner.MarinerTeamStart
// 0x0008 (0x0250 - 0x0248)
class AMarinerTeamStart final : public APlayerStart
{
public:
	int32                                         SpawnTeam;                                         // 0x0248(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bNotForPlayers : 1;                                // 0x024C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNotForBots : 1;                                   // 0x024C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1A6A[0x3];                                     // 0x024D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTeamStart">();
	}
	static class AMarinerTeamStart* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerTeamStart>();
	}
};
static_assert(alignof(AMarinerTeamStart) == 0x000008, "Wrong alignment on AMarinerTeamStart");
static_assert(sizeof(AMarinerTeamStart) == 0x000250, "Wrong size on AMarinerTeamStart");
static_assert(offsetof(AMarinerTeamStart, SpawnTeam) == 0x000248, "Member 'AMarinerTeamStart::SpawnTeam' has a wrong offset!");

// Class Mariner.MarinerTeleportReturnDebugActor
// 0x0010 (0x0228 - 0x0218)
class AMarinerTeleportReturnDebugActor final : public AActor
{
public:
	class UDataTable*                             TeleportReturnDataTable;                           // 0x0218(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 DebugSphereColor;                                  // 0x0220(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DebugSphereRadius;                                 // 0x0224(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTeleportReturnDebugActor">();
	}
	static class AMarinerTeleportReturnDebugActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerTeleportReturnDebugActor>();
	}
};
static_assert(alignof(AMarinerTeleportReturnDebugActor) == 0x000008, "Wrong alignment on AMarinerTeleportReturnDebugActor");
static_assert(sizeof(AMarinerTeleportReturnDebugActor) == 0x000228, "Wrong size on AMarinerTeleportReturnDebugActor");
static_assert(offsetof(AMarinerTeleportReturnDebugActor, TeleportReturnDataTable) == 0x000218, "Member 'AMarinerTeleportReturnDebugActor::TeleportReturnDataTable' has a wrong offset!");
static_assert(offsetof(AMarinerTeleportReturnDebugActor, DebugSphereColor) == 0x000220, "Member 'AMarinerTeleportReturnDebugActor::DebugSphereColor' has a wrong offset!");
static_assert(offsetof(AMarinerTeleportReturnDebugActor, DebugSphereRadius) == 0x000224, "Member 'AMarinerTeleportReturnDebugActor::DebugSphereRadius' has a wrong offset!");

// Class Mariner.MarinerTextWidgetStyle
// 0x0000 (0x0298 - 0x0298)
class UMarinerTextWidgetStyle : public UTextBlockWidgetStyle
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTextWidgetStyle">();
	}
	static class UMarinerTextWidgetStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTextWidgetStyle>();
	}
};
static_assert(alignof(UMarinerTextWidgetStyle) == 0x000008, "Wrong alignment on UMarinerTextWidgetStyle");
static_assert(sizeof(UMarinerTextWidgetStyle) == 0x000298, "Wrong size on UMarinerTextWidgetStyle");

// Class Mariner.MarinerTimedItemSpawner
// 0x0018 (0x02D0 - 0x02B8)
class AMarinerTimedItemSpawner final : public AMarinerBaseItemSpawner
{
public:
	uint8                                         Pad_1A6B[0x8];                                     // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RespawnTime;                                       // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           RespawnTimerCueTag;                                // 0x02C4(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A6C[0x4];                                     // 0x02CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTimedItemSpawner">();
	}
	static class AMarinerTimedItemSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerTimedItemSpawner>();
	}
};
static_assert(alignof(AMarinerTimedItemSpawner) == 0x000008, "Wrong alignment on AMarinerTimedItemSpawner");
static_assert(sizeof(AMarinerTimedItemSpawner) == 0x0002D0, "Wrong size on AMarinerTimedItemSpawner");
static_assert(offsetof(AMarinerTimedItemSpawner, RespawnTime) == 0x0002C0, "Member 'AMarinerTimedItemSpawner::RespawnTime' has a wrong offset!");
static_assert(offsetof(AMarinerTimedItemSpawner, RespawnTimerCueTag) == 0x0002C4, "Member 'AMarinerTimedItemSpawner::RespawnTimerCueTag' has a wrong offset!");

// Class Mariner.MarinerTimerWidget
// 0x00C0 (0x02F0 - 0x0230)
class UMarinerTimerWidget : public UUserWidget
{
public:
	UMulticastInlineDelegateProperty_             OnCountdownExpired;                                // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FText                                   FormatText;                                        // 0x0240(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateColor                            TimerTextColor;                                    // 0x0258(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateFontInfo                         TimerTextFont;                                     // 0x0280(0x0050)(Edit, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextJustify                                  TimerTextJustify;                                  // 0x02D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A6D[0x7];                                     // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             Bound_TimerText;                                   // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A6E[0x10];                                    // 0x02E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RefreshTimer();
	void StartCountdownTimer(float TimeRemainingSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTimerWidget">();
	}
	static class UMarinerTimerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTimerWidget>();
	}
};
static_assert(alignof(UMarinerTimerWidget) == 0x000008, "Wrong alignment on UMarinerTimerWidget");
static_assert(sizeof(UMarinerTimerWidget) == 0x0002F0, "Wrong size on UMarinerTimerWidget");
static_assert(offsetof(UMarinerTimerWidget, OnCountdownExpired) == 0x000230, "Member 'UMarinerTimerWidget::OnCountdownExpired' has a wrong offset!");
static_assert(offsetof(UMarinerTimerWidget, FormatText) == 0x000240, "Member 'UMarinerTimerWidget::FormatText' has a wrong offset!");
static_assert(offsetof(UMarinerTimerWidget, TimerTextColor) == 0x000258, "Member 'UMarinerTimerWidget::TimerTextColor' has a wrong offset!");
static_assert(offsetof(UMarinerTimerWidget, TimerTextFont) == 0x000280, "Member 'UMarinerTimerWidget::TimerTextFont' has a wrong offset!");
static_assert(offsetof(UMarinerTimerWidget, TimerTextJustify) == 0x0002D0, "Member 'UMarinerTimerWidget::TimerTextJustify' has a wrong offset!");
static_assert(offsetof(UMarinerTimerWidget, Bound_TimerText) == 0x0002D8, "Member 'UMarinerTimerWidget::Bound_TimerText' has a wrong offset!");

// Class Mariner.MarinerTotemFlagTextures
// 0x0018 (0x0040 - 0x0028)
class UMarinerTotemFlagTextures final : public UObject
{
public:
	class UTexture*                               ColorTexture;                                      // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               RoughMetalNRMTexture;                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               EmissiveTexture;                                   // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ConfigureMaterialUsingTextures(class UMaterialInstanceDynamic* MaterialToConfigure);
	class UMaterialInstanceDynamic* GetBakedMaterial();
	class UMaterialInstanceDynamic* GetBakedUIMaterial();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTotemFlagTextures">();
	}
	static class UMarinerTotemFlagTextures* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTotemFlagTextures>();
	}
};
static_assert(alignof(UMarinerTotemFlagTextures) == 0x000008, "Wrong alignment on UMarinerTotemFlagTextures");
static_assert(sizeof(UMarinerTotemFlagTextures) == 0x000040, "Wrong size on UMarinerTotemFlagTextures");
static_assert(offsetof(UMarinerTotemFlagTextures, ColorTexture) == 0x000028, "Member 'UMarinerTotemFlagTextures::ColorTexture' has a wrong offset!");
static_assert(offsetof(UMarinerTotemFlagTextures, RoughMetalNRMTexture) == 0x000030, "Member 'UMarinerTotemFlagTextures::RoughMetalNRMTexture' has a wrong offset!");
static_assert(offsetof(UMarinerTotemFlagTextures, EmissiveTexture) == 0x000038, "Member 'UMarinerTotemFlagTextures::EmissiveTexture' has a wrong offset!");

// Class Mariner.MarinerTotemRenderUtilities
// 0x0000 (0x0028 - 0x0028)
class UMarinerTotemRenderUtilities final : public UObject
{
public:
	static class UMaterialInstanceDynamic* GenerateTotemFlagPreviewFromCollection(class UObject* WorldContextObject, const struct FMarinerRocketTotemCollection& TotemCollection);
	static class UMarinerTotemFlagTextures* RenderTotemFlagFromCollection(class UObject* WorldContextObject, const struct FMarinerRocketTotemCollection& TotemCollection, class UMarinerTotemFlagTextures* ExistingTextures);
	static void SetBorderRenderParameters(const class UMarinerRocketTotemBorderDataAsset* DataAsset, class UMaterialInstanceDynamic* Renderer);
	static void SetBorderRenderParametersFromCollection(const struct FMarinerRocketTotemCollection& TotemCollection, class UMaterialInstanceDynamic* Renderer);
	static void SetIconRenderParameters(const class UMarinerRocketTotemSymbolsDataAsset* DataAsset, class UMaterialInstanceDynamic* Renderer);
	static void SetIconRenderParametersFromCollection(const struct FMarinerRocketTotemCollection& TotemCollection, class UMaterialInstanceDynamic* Renderer);
	static void SetPatternRenderParameters(const class UMarinerRocketTotemPatternDataAsset* DataAsset, class UMaterialInstanceDynamic* Renderer);
	static void SetPatternRenderParametersFromCollection(const struct FMarinerRocketTotemCollection& TotemCollection, class UMaterialInstanceDynamic* Renderer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTotemRenderUtilities">();
	}
	static class UMarinerTotemRenderUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTotemRenderUtilities>();
	}
};
static_assert(alignof(UMarinerTotemRenderUtilities) == 0x000008, "Wrong alignment on UMarinerTotemRenderUtilities");
static_assert(sizeof(UMarinerTotemRenderUtilities) == 0x000028, "Wrong size on UMarinerTotemRenderUtilities");

// Class Mariner.MarinerTrailComponent
// 0x0020 (0x0690 - 0x0670)
class UMarinerTrailComponent final : public UMarinerParticleSystemComponent
{
public:
	class FName                                   ParticleMaterialColorName;                         // 0x0668(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6F[0x20];                                    // 0x0670(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTrailColor(const struct FColor& NewTrailColor);
	void SetTrailDisplay(bool bNewTrailDisplay);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTrailComponent">();
	}
	static class UMarinerTrailComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTrailComponent>();
	}
};
static_assert(alignof(UMarinerTrailComponent) == 0x000010, "Wrong alignment on UMarinerTrailComponent");
static_assert(sizeof(UMarinerTrailComponent) == 0x000690, "Wrong size on UMarinerTrailComponent");
static_assert(offsetof(UMarinerTrailComponent, ParticleMaterialColorName) == 0x000668, "Member 'UMarinerTrailComponent::ParticleMaterialColorName' has a wrong offset!");

// Class Mariner.MarinerTrainColliderSkeletalActor
// 0x00A8 (0x0348 - 0x02A0)
class AMarinerTrainColliderSkeletalActor final : public ASkeletalMeshActor
{
public:
	class UAkComponent*                           AkAudioComponent;                                  // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           AbilitiesToEnd;                                    // 0x02A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerDamageType>         TrainDamageType;                                   // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            TrainImpactGameplayEffect;                         // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce> RootMotionMoveDefaults;                            // 0x02C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TrainRootMotionVerticalForce;                      // 0x02D0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RootMotionForwardScalar;                           // 0x02DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeBetweenHitsDelayDuration;                      // 0x02E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A70[0x64];                                    // 0x02E4(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTrainHitDetected(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTrainColliderSkeletalActor">();
	}
	static class AMarinerTrainColliderSkeletalActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerTrainColliderSkeletalActor>();
	}
};
static_assert(alignof(AMarinerTrainColliderSkeletalActor) == 0x000008, "Wrong alignment on AMarinerTrainColliderSkeletalActor");
static_assert(sizeof(AMarinerTrainColliderSkeletalActor) == 0x000348, "Wrong size on AMarinerTrainColliderSkeletalActor");
static_assert(offsetof(AMarinerTrainColliderSkeletalActor, AkAudioComponent) == 0x0002A0, "Member 'AMarinerTrainColliderSkeletalActor::AkAudioComponent' has a wrong offset!");
static_assert(offsetof(AMarinerTrainColliderSkeletalActor, AbilitiesToEnd) == 0x0002A8, "Member 'AMarinerTrainColliderSkeletalActor::AbilitiesToEnd' has a wrong offset!");
static_assert(offsetof(AMarinerTrainColliderSkeletalActor, TrainDamageType) == 0x0002B8, "Member 'AMarinerTrainColliderSkeletalActor::TrainDamageType' has a wrong offset!");
static_assert(offsetof(AMarinerTrainColliderSkeletalActor, TrainImpactGameplayEffect) == 0x0002C0, "Member 'AMarinerTrainColliderSkeletalActor::TrainImpactGameplayEffect' has a wrong offset!");
static_assert(offsetof(AMarinerTrainColliderSkeletalActor, RootMotionMoveDefaults) == 0x0002C8, "Member 'AMarinerTrainColliderSkeletalActor::RootMotionMoveDefaults' has a wrong offset!");
static_assert(offsetof(AMarinerTrainColliderSkeletalActor, TrainRootMotionVerticalForce) == 0x0002D0, "Member 'AMarinerTrainColliderSkeletalActor::TrainRootMotionVerticalForce' has a wrong offset!");
static_assert(offsetof(AMarinerTrainColliderSkeletalActor, RootMotionForwardScalar) == 0x0002DC, "Member 'AMarinerTrainColliderSkeletalActor::RootMotionForwardScalar' has a wrong offset!");
static_assert(offsetof(AMarinerTrainColliderSkeletalActor, TimeBetweenHitsDelayDuration) == 0x0002E0, "Member 'AMarinerTrainColliderSkeletalActor::TimeBetweenHitsDelayDuration' has a wrong offset!");

// Class Mariner.MarinerTreasureRocketDisplayDataAsset
// 0x0038 (0x0068 - 0x0030)
class UMarinerTreasureRocketDisplayDataAsset final : public UDataAsset
{
public:
	class USkeletalMesh*                          DisplayRocket;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             DisplayIcon;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        LaunchFX;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        ExplodeFX;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMaterialOverride>              MaterialOverrides;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UAnimInstance>              AnimBP;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTreasureRocketDisplayDataAsset">();
	}
	static class UMarinerTreasureRocketDisplayDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTreasureRocketDisplayDataAsset>();
	}
};
static_assert(alignof(UMarinerTreasureRocketDisplayDataAsset) == 0x000008, "Wrong alignment on UMarinerTreasureRocketDisplayDataAsset");
static_assert(sizeof(UMarinerTreasureRocketDisplayDataAsset) == 0x000068, "Wrong size on UMarinerTreasureRocketDisplayDataAsset");
static_assert(offsetof(UMarinerTreasureRocketDisplayDataAsset, DisplayRocket) == 0x000030, "Member 'UMarinerTreasureRocketDisplayDataAsset::DisplayRocket' has a wrong offset!");
static_assert(offsetof(UMarinerTreasureRocketDisplayDataAsset, DisplayIcon) == 0x000038, "Member 'UMarinerTreasureRocketDisplayDataAsset::DisplayIcon' has a wrong offset!");
static_assert(offsetof(UMarinerTreasureRocketDisplayDataAsset, LaunchFX) == 0x000040, "Member 'UMarinerTreasureRocketDisplayDataAsset::LaunchFX' has a wrong offset!");
static_assert(offsetof(UMarinerTreasureRocketDisplayDataAsset, ExplodeFX) == 0x000048, "Member 'UMarinerTreasureRocketDisplayDataAsset::ExplodeFX' has a wrong offset!");
static_assert(offsetof(UMarinerTreasureRocketDisplayDataAsset, MaterialOverrides) == 0x000050, "Member 'UMarinerTreasureRocketDisplayDataAsset::MaterialOverrides' has a wrong offset!");
static_assert(offsetof(UMarinerTreasureRocketDisplayDataAsset, AnimBP) == 0x000060, "Member 'UMarinerTreasureRocketDisplayDataAsset::AnimBP' has a wrong offset!");

// Class Mariner.MarinerTrialsButton
// 0x0020 (0x2F98 - 0x2F78)
class UMarinerTrialsButton : public UMarinerLayeredButton
{
public:
	uint8                                         Pad_1A72[0x20];                                    // 0x2F78(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTrialsButton">();
	}
	static class UMarinerTrialsButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTrialsButton>();
	}
};
static_assert(alignof(UMarinerTrialsButton) == 0x000008, "Wrong alignment on UMarinerTrialsButton");
static_assert(sizeof(UMarinerTrialsButton) == 0x002F98, "Wrong size on UMarinerTrialsButton");

// Class Mariner.MarinerTrialsGameMode
// 0x0000 (0x0540 - 0x0540)
class AMarinerTrialsGameMode final : public AMarinerGameMode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTrialsGameMode">();
	}
	static class AMarinerTrialsGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerTrialsGameMode>();
	}
};
static_assert(alignof(AMarinerTrialsGameMode) == 0x000008, "Wrong alignment on AMarinerTrialsGameMode");
static_assert(sizeof(AMarinerTrialsGameMode) == 0x000540, "Wrong size on AMarinerTrialsGameMode");

// Class Mariner.MarinerTrialsGameState
// 0x0010 (0x08D0 - 0x08C0)
class AMarinerTrialsGameState : public AMarinerGameState
{
public:
	uint8                                         Pad_1A73[0x10];                                    // 0x08C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginTravel();
	void RetryClicked();
	void SetTimerPaused(bool bPauseTimer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTrialsGameState">();
	}
	static class AMarinerTrialsGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerTrialsGameState>();
	}
};
static_assert(alignof(AMarinerTrialsGameState) == 0x000008, "Wrong alignment on AMarinerTrialsGameState");
static_assert(sizeof(AMarinerTrialsGameState) == 0x0008D0, "Wrong size on AMarinerTrialsGameState");

// Class Mariner.MarinerTrialsMenu
// 0x0010 (0x04F0 - 0x04E0)
class UMarinerTrialsMenu : public UMarinerMenu
{
public:
	TSubclassOf<class UMarinerTrialsButton>       TrialsButtonWidget;                                // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarinerGridPanel*                      Bound_TrialsGrid;                                  // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnModeSelected(class UMarinerLayeredButton* Instance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTrialsMenu">();
	}
	static class UMarinerTrialsMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTrialsMenu>();
	}
};
static_assert(alignof(UMarinerTrialsMenu) == 0x000008, "Wrong alignment on UMarinerTrialsMenu");
static_assert(sizeof(UMarinerTrialsMenu) == 0x0004F0, "Wrong size on UMarinerTrialsMenu");
static_assert(offsetof(UMarinerTrialsMenu, TrialsButtonWidget) == 0x0004E0, "Member 'UMarinerTrialsMenu::TrialsButtonWidget' has a wrong offset!");
static_assert(offsetof(UMarinerTrialsMenu, Bound_TrialsGrid) == 0x0004E8, "Member 'UMarinerTrialsMenu::Bound_TrialsGrid' has a wrong offset!");

// Class Mariner.MarinerTrialsPostGameMenu
// 0x0020 (0x0500 - 0x04E0)
class UMarinerTrialsPostGameMenu : public UMarinerMenu
{
public:
	class UMarinerPaneSwitcher*                   Bound_HeaderPaneSwitcher;                          // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TrialCompleteText;                           // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TrialFailedText;                             // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_TimerText;                                   // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTrialsPostGameMenu">();
	}
	static class UMarinerTrialsPostGameMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTrialsPostGameMenu>();
	}
};
static_assert(alignof(UMarinerTrialsPostGameMenu) == 0x000008, "Wrong alignment on UMarinerTrialsPostGameMenu");
static_assert(sizeof(UMarinerTrialsPostGameMenu) == 0x000500, "Wrong size on UMarinerTrialsPostGameMenu");
static_assert(offsetof(UMarinerTrialsPostGameMenu, Bound_HeaderPaneSwitcher) == 0x0004E0, "Member 'UMarinerTrialsPostGameMenu::Bound_HeaderPaneSwitcher' has a wrong offset!");
static_assert(offsetof(UMarinerTrialsPostGameMenu, Bound_TrialCompleteText) == 0x0004E8, "Member 'UMarinerTrialsPostGameMenu::Bound_TrialCompleteText' has a wrong offset!");
static_assert(offsetof(UMarinerTrialsPostGameMenu, Bound_TrialFailedText) == 0x0004F0, "Member 'UMarinerTrialsPostGameMenu::Bound_TrialFailedText' has a wrong offset!");
static_assert(offsetof(UMarinerTrialsPostGameMenu, Bound_TimerText) == 0x0004F8, "Member 'UMarinerTrialsPostGameMenu::Bound_TimerText' has a wrong offset!");

// Class Mariner.MarinerTrialsPostGameSequence
// 0x0028 (0x0B60 - 0x0B38)
class UMarinerTrialsPostGameSequence : public UMarinerPostGameSequence
{
public:
	TSubclassOf<class UMarinerMenuStackManager>   TrialsStackManager;                                // 0x0B38(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMarinerIDTag>              TrialsTab;                                         // 0x0B40(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UMarinerMenuStackLayer>> TrialsMenuList;                                    // 0x0B48(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A74[0x8];                                     // 0x0B58(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginRestartTravel();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTrialsPostGameSequence">();
	}
	static class UMarinerTrialsPostGameSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTrialsPostGameSequence>();
	}
};
static_assert(alignof(UMarinerTrialsPostGameSequence) == 0x000008, "Wrong alignment on UMarinerTrialsPostGameSequence");
static_assert(sizeof(UMarinerTrialsPostGameSequence) == 0x000B60, "Wrong size on UMarinerTrialsPostGameSequence");
static_assert(offsetof(UMarinerTrialsPostGameSequence, TrialsStackManager) == 0x000B38, "Member 'UMarinerTrialsPostGameSequence::TrialsStackManager' has a wrong offset!");
static_assert(offsetof(UMarinerTrialsPostGameSequence, TrialsTab) == 0x000B40, "Member 'UMarinerTrialsPostGameSequence::TrialsTab' has a wrong offset!");
static_assert(offsetof(UMarinerTrialsPostGameSequence, TrialsMenuList) == 0x000B48, "Member 'UMarinerTrialsPostGameSequence::TrialsMenuList' has a wrong offset!");

// Class Mariner.MarinerTrialsTimerWidget
// 0x0008 (0x02B8 - 0x02B0)
class UMarinerTrialsTimerWidget final : public UMarinerUserWidget
{
public:
	class UTextBlock*                             Bound_ClockText;                                   // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTrialsTimerWidget">();
	}
	static class UMarinerTrialsTimerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTrialsTimerWidget>();
	}
};
static_assert(alignof(UMarinerTrialsTimerWidget) == 0x000008, "Wrong alignment on UMarinerTrialsTimerWidget");
static_assert(sizeof(UMarinerTrialsTimerWidget) == 0x0002B8, "Wrong size on UMarinerTrialsTimerWidget");
static_assert(offsetof(UMarinerTrialsTimerWidget, Bound_ClockText) == 0x0002B0, "Member 'UMarinerTrialsTimerWidget::Bound_ClockText' has a wrong offset!");

// Class Mariner.MarinerTTSDialogBase
// 0x0000 (0x02B0 - 0x02B0)
class UMarinerTTSDialogBase : public UMarinerUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTTSDialogBase">();
	}
	static class UMarinerTTSDialogBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTTSDialogBase>();
	}
};
static_assert(alignof(UMarinerTTSDialogBase) == 0x000008, "Wrong alignment on UMarinerTTSDialogBase");
static_assert(sizeof(UMarinerTTSDialogBase) == 0x0002B0, "Wrong size on UMarinerTTSDialogBase");

// Class Mariner.MarinerTTSDialogConsole
// 0x0020 (0x02D0 - 0x02B0)
class UMarinerTTSDialogConsole final : public UMarinerTTSDialogBase
{
public:
	uint8                                         Pad_1A75[0x20];                                    // 0x02B0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnVKeyboardTextCommited(const class FText& Text, ETextCommit CommitMethod);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTTSDialogConsole">();
	}
	static class UMarinerTTSDialogConsole* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTTSDialogConsole>();
	}
};
static_assert(alignof(UMarinerTTSDialogConsole) == 0x000008, "Wrong alignment on UMarinerTTSDialogConsole");
static_assert(sizeof(UMarinerTTSDialogConsole) == 0x0002D0, "Wrong size on UMarinerTTSDialogConsole");

// Class Mariner.MarinerTTSDialogPC
// 0x0008 (0x02B8 - 0x02B0)
class UMarinerTTSDialogPC : public UMarinerTTSDialogBase
{
public:
	class UMarinerEditableTextBox*                TextWidget;                                        // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnWidgetTextCommited(const class FText& Text, ETextCommit CommitMethod);
	void SendText(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTTSDialogPC">();
	}
	static class UMarinerTTSDialogPC* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTTSDialogPC>();
	}
};
static_assert(alignof(UMarinerTTSDialogPC) == 0x000008, "Wrong alignment on UMarinerTTSDialogPC");
static_assert(sizeof(UMarinerTTSDialogPC) == 0x0002B8, "Wrong size on UMarinerTTSDialogPC");
static_assert(offsetof(UMarinerTTSDialogPC, TextWidget) == 0x0002B0, "Member 'UMarinerTTSDialogPC::TextWidget' has a wrong offset!");

// Class Mariner.MarinerTugOfWarCaptureVolume
// 0x0060 (0x0280 - 0x0220)
class UMarinerTugOfWarCaptureVolume final : public UMarinerCaptureVolumeBase
{
public:
	float                                         CaptureAmount;                                     // 0x0220(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A78[0x4];                                     // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class APlayerState*, float>              PlayersCaptureAmount;                              // 0x0228(0x0050)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bShouldReportCaptureDuration;                      // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A79[0x7];                                     // 0x0279(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_CaptureAmount();

	float GetCapturePercentage(int32 TeamIndex) const;
	class APlayerState* GetMostValuableOverlappingPlayer() const;
	bool IsCaptured() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerTugOfWarCaptureVolume">();
	}
	static class UMarinerTugOfWarCaptureVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerTugOfWarCaptureVolume>();
	}
};
static_assert(alignof(UMarinerTugOfWarCaptureVolume) == 0x000008, "Wrong alignment on UMarinerTugOfWarCaptureVolume");
static_assert(sizeof(UMarinerTugOfWarCaptureVolume) == 0x000280, "Wrong size on UMarinerTugOfWarCaptureVolume");
static_assert(offsetof(UMarinerTugOfWarCaptureVolume, CaptureAmount) == 0x000220, "Member 'UMarinerTugOfWarCaptureVolume::CaptureAmount' has a wrong offset!");
static_assert(offsetof(UMarinerTugOfWarCaptureVolume, PlayersCaptureAmount) == 0x000228, "Member 'UMarinerTugOfWarCaptureVolume::PlayersCaptureAmount' has a wrong offset!");
static_assert(offsetof(UMarinerTugOfWarCaptureVolume, bShouldReportCaptureDuration) == 0x000278, "Member 'UMarinerTugOfWarCaptureVolume::bShouldReportCaptureDuration' has a wrong offset!");

// Class Mariner.MarinerUIBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UMarinerUIBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ChangePlatformUser(const class UObject* WorldContextObject);
	static class FString Conv_GuidToStringLower(const struct FGuid& InGuid);
	static struct FMarinerBindingTypeData GetBindingTypeDataFromInputAction(EMarinerInputActions InAction);
	static struct FKey GetGamepadKeyFromInputActionBinding(EMarinerInputActions InAction);
	static EMarinerInputActions GetInputActionFromBindingTypeData(const struct FMarinerBindingTypeData& InBindingTypeData);
	static EMarinerInputActions GetInputActionFromInputName(const class FName& InName);
	static class FName GetInputNameFromInputAction(EMarinerInputActions InAction);
	static class FString MangoIdToString(const struct FMangoId& MangoId);
	static void RemapController(const struct FMarinerControllerConfiguration& Configuration);
	static void RemapControllerCompletly(class UDataTable* Configuration);
	static void SaveKeyMappings();
	static void SwapControllerAction(EMarinerInputActions FirstAction, EMarinerInputActions SecondAction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerUIBlueprintLibrary">();
	}
	static class UMarinerUIBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerUIBlueprintLibrary>();
	}
};
static_assert(alignof(UMarinerUIBlueprintLibrary) == 0x000008, "Wrong alignment on UMarinerUIBlueprintLibrary");
static_assert(sizeof(UMarinerUIBlueprintLibrary) == 0x000028, "Wrong size on UMarinerUIBlueprintLibrary");

// Class Mariner.MarinerUIArtifactsForTypeData
// 0x00C8 (0x00F0 - 0x0028)
class UMarinerUIArtifactsForTypeData final : public UObject
{
public:
	uint8                                         Pad_1A7F[0x70];                                    // 0x0028(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UItemLoadResponse*, class UMarinerArtifactDataAsset*> LoadedArtifacts;                                   // 0x0098(0x0050)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UMarinerLoadAllItemsFromCMSByType*      LoadObject;                                        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void LoadFromCMSFailed();
	void LoadFromCMSFinished(const TArray<class UItemLoadResponse*>& LoadedDataResponse, const TSoftObjectPtr<class UMarinerGameInstance> MarinerGameInstance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerUIArtifactsForTypeData">();
	}
	static class UMarinerUIArtifactsForTypeData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerUIArtifactsForTypeData>();
	}
};
static_assert(alignof(UMarinerUIArtifactsForTypeData) == 0x000008, "Wrong alignment on UMarinerUIArtifactsForTypeData");
static_assert(sizeof(UMarinerUIArtifactsForTypeData) == 0x0000F0, "Wrong size on UMarinerUIArtifactsForTypeData");
static_assert(offsetof(UMarinerUIArtifactsForTypeData, LoadedArtifacts) == 0x000098, "Member 'UMarinerUIArtifactsForTypeData::LoadedArtifacts' has a wrong offset!");
static_assert(offsetof(UMarinerUIArtifactsForTypeData, LoadObject) == 0x0000E8, "Member 'UMarinerUIArtifactsForTypeData::LoadObject' has a wrong offset!");

// Class Mariner.MarinerUIHelpers
// 0x0000 (0x0028 - 0x0028)
class UMarinerUIHelpers final : public UBlueprintFunctionLibrary
{
public:
	static void CopyToClipboard(const class FString& StringToCopy);
	static class UUserWidget* CreateWidgetWithOwner(TSubclassOf<class UUserWidget> UserWidgetClass, class UWidget* OwningWidget);
	static bool EnterInGameStore(const class UObject* WorldContextObject, bool bEntered);
	static bool Equal_ItemLoadResponse(const class UItemLoadResponse* A, const class UItemLoadResponse* B);
	static bool Equal_MangoProgressionCharacterItemUnlock(const struct FMangoProgressionCharacterItemUnlock& A, const struct FMangoProgressionCharacterItemUnlock& B);
	static class FText FormatEventTimeRemaining(float TimeInSeconds);
	static class FText FormatTimeRemaining(float TimeInSeconds);
	static int32 GetClosestResolution(const TArray<struct FIntPoint>& ResolutionList, const struct FIntPoint& Resolution);
	static EMatchmakingInteractionState GetMatchmakingInteractionState(const class UObject* WorldContextObject);
	static EPlaylistInteractionState GetPlaylistInteractionState(const class UObject* WorldContextObject, const struct FMangoPlaylist& InPlaylist, EMatchmakingInteractionState* OutMatchmakingState);
	static class FString GetTruncatedUserName(const class FString& UserName);
	static float GetWidgetAnimationLength(class UWidgetAnimation* WidgetAnimation);
	static class UMarinerMenuStackLayer* GetWidgetOwningLayer(const class UWidget* Widget);
	static bool IsEUBuild(const class UObject* WorldContextObject);
	static bool IsPracticeModeAllowed(const class UObject* WorldContextObject);
	static bool NotEqual_ItemLoadResponse(const class UItemLoadResponse* A, const class UItemLoadResponse* B);
	static bool NotEqual_MangoProgressionCharacterItemUnlock(const struct FMangoProgressionCharacterItemUnlock& A, const struct FMangoProgressionCharacterItemUnlock& B);
	static bool SendTextToSpeechMessage(const class UObject* WorldContextObject, const class FString& TextToSend);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerUIHelpers">();
	}
	static class UMarinerUIHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerUIHelpers>();
	}
};
static_assert(alignof(UMarinerUIHelpers) == 0x000008, "Wrong alignment on UMarinerUIHelpers");
static_assert(sizeof(UMarinerUIHelpers) == 0x000028, "Wrong size on UMarinerUIHelpers");

// Class Mariner.MarinerUniformGridPanel
// 0x0030 (0x0178 - 0x0148)
class UMarinerUniformGridPanel final : public UUniformGridPanel
{
public:
	uint8                                         Pad_1A8E[0x20];                                    // 0x0148(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bWrapHorizontally;                                 // 0x0168(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWrapVertically;                                   // 0x0169(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8F[0x2];                                     // 0x016A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              StartingCoordinate;                                // 0x016C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A90[0x4];                                     // 0x0174(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearHighlighting();
	void SetHighlightedSlot(int32 Column, int32 Row, bool bForce);

	class UWidget* GetHighlightedWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerUniformGridPanel">();
	}
	static class UMarinerUniformGridPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerUniformGridPanel>();
	}
};
static_assert(alignof(UMarinerUniformGridPanel) == 0x000008, "Wrong alignment on UMarinerUniformGridPanel");
static_assert(sizeof(UMarinerUniformGridPanel) == 0x000178, "Wrong size on UMarinerUniformGridPanel");
static_assert(offsetof(UMarinerUniformGridPanel, bWrapHorizontally) == 0x000168, "Member 'UMarinerUniformGridPanel::bWrapHorizontally' has a wrong offset!");
static_assert(offsetof(UMarinerUniformGridPanel, bWrapVertically) == 0x000169, "Member 'UMarinerUniformGridPanel::bWrapVertically' has a wrong offset!");
static_assert(offsetof(UMarinerUniformGridPanel, StartingCoordinate) == 0x00016C, "Member 'UMarinerUniformGridPanel::StartingCoordinate' has a wrong offset!");

// Class Mariner.MarinerVerticalBox
// 0x0028 (0x0158 - 0x0130)
class UMarinerVerticalBox final : public UVerticalBox
{
public:
	uint8                                         Pad_1A92[0x20];                                    // 0x0130(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bWrap;                                             // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bConsumeHorizontalInput;                           // 0x0151(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bConsumeVerticalInput;                             // 0x0152(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A93[0x5];                                     // 0x0153(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearHighlighting();
	void HighlightWidgetViaIndex(int32 Param_Index);

	class UWidget* GetHighlightedWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerVerticalBox">();
	}
	static class UMarinerVerticalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerVerticalBox>();
	}
};
static_assert(alignof(UMarinerVerticalBox) == 0x000008, "Wrong alignment on UMarinerVerticalBox");
static_assert(sizeof(UMarinerVerticalBox) == 0x000158, "Wrong size on UMarinerVerticalBox");
static_assert(offsetof(UMarinerVerticalBox, bWrap) == 0x000150, "Member 'UMarinerVerticalBox::bWrap' has a wrong offset!");
static_assert(offsetof(UMarinerVerticalBox, bConsumeHorizontalInput) == 0x000151, "Member 'UMarinerVerticalBox::bConsumeHorizontalInput' has a wrong offset!");
static_assert(offsetof(UMarinerVerticalBox, bConsumeVerticalInput) == 0x000152, "Member 'UMarinerVerticalBox::bConsumeVerticalInput' has a wrong offset!");

// Class Mariner.MarinerVerticalBoxStatsWidget
// 0x0010 (0x02C0 - 0x02B0)
class UMarinerVerticalBoxStatsWidget final : public UMarinerUserWidget
{
public:
	class UTextBlock*                             Bound_TextStatGroupName;                           // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           Bound_RootVerticalBox;                             // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerVerticalBoxStatsWidget">();
	}
	static class UMarinerVerticalBoxStatsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerVerticalBoxStatsWidget>();
	}
};
static_assert(alignof(UMarinerVerticalBoxStatsWidget) == 0x000008, "Wrong alignment on UMarinerVerticalBoxStatsWidget");
static_assert(sizeof(UMarinerVerticalBoxStatsWidget) == 0x0002C0, "Wrong size on UMarinerVerticalBoxStatsWidget");
static_assert(offsetof(UMarinerVerticalBoxStatsWidget, Bound_TextStatGroupName) == 0x0002B0, "Member 'UMarinerVerticalBoxStatsWidget::Bound_TextStatGroupName' has a wrong offset!");
static_assert(offsetof(UMarinerVerticalBoxStatsWidget, Bound_RootVerticalBox) == 0x0002B8, "Member 'UMarinerVerticalBoxStatsWidget::Bound_RootVerticalBox' has a wrong offset!");

// Class Mariner.MarinerVoiceChatPlayerWidget
// 0x0168 (0x0418 - 0x02B0)
class UMarinerVoiceChatPlayerWidget : public UMarinerUserWidget
{
public:
	struct FSlateBrush                            IconMicOn;                                         // 0x02B0(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            IconMicOff;                                        // 0x0338(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UImage*                                 Bound_ImageMic;                                    // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Bound_TextPlayerName;                              // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A94[0x48];                                    // 0x03D0(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerTalking(const class FString& ChannelName, const class FString& PlayerName, bool bIsTalking);
	void OnUserSettingsChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerVoiceChatPlayerWidget">();
	}
	static class UMarinerVoiceChatPlayerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerVoiceChatPlayerWidget>();
	}
};
static_assert(alignof(UMarinerVoiceChatPlayerWidget) == 0x000008, "Wrong alignment on UMarinerVoiceChatPlayerWidget");
static_assert(sizeof(UMarinerVoiceChatPlayerWidget) == 0x000418, "Wrong size on UMarinerVoiceChatPlayerWidget");
static_assert(offsetof(UMarinerVoiceChatPlayerWidget, IconMicOn) == 0x0002B0, "Member 'UMarinerVoiceChatPlayerWidget::IconMicOn' has a wrong offset!");
static_assert(offsetof(UMarinerVoiceChatPlayerWidget, IconMicOff) == 0x000338, "Member 'UMarinerVoiceChatPlayerWidget::IconMicOff' has a wrong offset!");
static_assert(offsetof(UMarinerVoiceChatPlayerWidget, Bound_ImageMic) == 0x0003C0, "Member 'UMarinerVoiceChatPlayerWidget::Bound_ImageMic' has a wrong offset!");
static_assert(offsetof(UMarinerVoiceChatPlayerWidget, Bound_TextPlayerName) == 0x0003C8, "Member 'UMarinerVoiceChatPlayerWidget::Bound_TextPlayerName' has a wrong offset!");

// Class Mariner.MarinerVoiceOverGlobals
// 0x0078 (0x00A8 - 0x0030)
class UMarinerVoiceOverGlobals final : public UDataAsset
{
public:
	TSoftObjectPtr<class UAkAudioBank>            VoiceOverBankType;                                 // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            LanguageMap;                                       // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerVoiceOverGlobals">();
	}
	static class UMarinerVoiceOverGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerVoiceOverGlobals>();
	}
};
static_assert(alignof(UMarinerVoiceOverGlobals) == 0x000008, "Wrong alignment on UMarinerVoiceOverGlobals");
static_assert(sizeof(UMarinerVoiceOverGlobals) == 0x0000A8, "Wrong size on UMarinerVoiceOverGlobals");
static_assert(offsetof(UMarinerVoiceOverGlobals, VoiceOverBankType) == 0x000030, "Member 'UMarinerVoiceOverGlobals::VoiceOverBankType' has a wrong offset!");
static_assert(offsetof(UMarinerVoiceOverGlobals, LanguageMap) == 0x000058, "Member 'UMarinerVoiceOverGlobals::LanguageMap' has a wrong offset!");

// Class Mariner.MarinerVoiceOverManager
// 0x0068 (0x0090 - 0x0028)
class alignas(0x10) UMarinerVoiceOverManager final : public UObject
{
public:
	uint8                                         Pad_1A96[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnVoiceOverManagerAudioCallbackDelegate;           // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A97[0x30];                                    // 0x0040(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioBank*                           VoiceOverBank;                                     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A98[0x18];                                    // 0x0078(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAudioEvent(const EAkCallbackType In_eType, class UAkCallbackInfo* In_pCallbackInfo);
	void PlayVoiceOver(class UAkAudioEvent* AkEvent);
	void PlayVoiceOverIfQueueIsEmpty(class UAkAudioEvent* AkEvent);
	void QueueVoiceOver(class UAkAudioEvent* AkEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerVoiceOverManager">();
	}
	static class UMarinerVoiceOverManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerVoiceOverManager>();
	}
};
static_assert(alignof(UMarinerVoiceOverManager) == 0x000010, "Wrong alignment on UMarinerVoiceOverManager");
static_assert(sizeof(UMarinerVoiceOverManager) == 0x000090, "Wrong size on UMarinerVoiceOverManager");
static_assert(offsetof(UMarinerVoiceOverManager, OnVoiceOverManagerAudioCallbackDelegate) == 0x000030, "Member 'UMarinerVoiceOverManager::OnVoiceOverManagerAudioCallbackDelegate' has a wrong offset!");
static_assert(offsetof(UMarinerVoiceOverManager, VoiceOverBank) == 0x000070, "Member 'UMarinerVoiceOverManager::VoiceOverBank' has a wrong offset!");

// Class Mariner.MarinerWatermark
// 0x0028 (0x0258 - 0x0230)
class UMarinerWatermark : public UUserWidget
{
public:
	class UTextBlock*                             Bound_HeaderText;                                  // 0x0230(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_SubText;                                     // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_MangoId;                                     // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Bound_Realm;                                       // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A9A[0x8];                                     // 0x0250(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerWatermark">();
	}
	static class UMarinerWatermark* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerWatermark>();
	}
};
static_assert(alignof(UMarinerWatermark) == 0x000008, "Wrong alignment on UMarinerWatermark");
static_assert(sizeof(UMarinerWatermark) == 0x000258, "Wrong size on UMarinerWatermark");
static_assert(offsetof(UMarinerWatermark, Bound_HeaderText) == 0x000230, "Member 'UMarinerWatermark::Bound_HeaderText' has a wrong offset!");
static_assert(offsetof(UMarinerWatermark, Bound_SubText) == 0x000238, "Member 'UMarinerWatermark::Bound_SubText' has a wrong offset!");
static_assert(offsetof(UMarinerWatermark, Bound_MangoId) == 0x000240, "Member 'UMarinerWatermark::Bound_MangoId' has a wrong offset!");
static_assert(offsetof(UMarinerWatermark, Bound_Realm) == 0x000248, "Member 'UMarinerWatermark::Bound_Realm' has a wrong offset!");

// Class Mariner.MarinerWeaponAnimInstance
// 0x0010 (0x0280 - 0x0270)
class UMarinerWeaponAnimInstance final : public UAnimInstance
{
public:
	bool                                          bIsThirdPerson;                                    // 0x0268(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A9B[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SourceMesh;                                        // 0x0270(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A9C[0x8];                                     // 0x0278(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeWeaponAnimBP(class AMarinerCharacter* Character);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerWeaponAnimInstance">();
	}
	static class UMarinerWeaponAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerWeaponAnimInstance>();
	}
};
static_assert(alignof(UMarinerWeaponAnimInstance) == 0x000010, "Wrong alignment on UMarinerWeaponAnimInstance");
static_assert(sizeof(UMarinerWeaponAnimInstance) == 0x000280, "Wrong size on UMarinerWeaponAnimInstance");
static_assert(offsetof(UMarinerWeaponAnimInstance, bIsThirdPerson) == 0x000268, "Member 'UMarinerWeaponAnimInstance::bIsThirdPerson' has a wrong offset!");
static_assert(offsetof(UMarinerWeaponAnimInstance, SourceMesh) == 0x000270, "Member 'UMarinerWeaponAnimInstance::SourceMesh' has a wrong offset!");

// Class Mariner.MarinerWeaponMontage
// 0x0010 (0x0050 - 0x0040)
class UMarinerWeaponMontage final : public UMarinerCharacterMontage
{
public:
	class UAnimMontage*                           FirstPersonWeaponMontage;                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ThirdPersonWeaponMontage;                          // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerWeaponMontage">();
	}
	static class UMarinerWeaponMontage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerWeaponMontage>();
	}
};
static_assert(alignof(UMarinerWeaponMontage) == 0x000008, "Wrong alignment on UMarinerWeaponMontage");
static_assert(sizeof(UMarinerWeaponMontage) == 0x000050, "Wrong size on UMarinerWeaponMontage");
static_assert(offsetof(UMarinerWeaponMontage, FirstPersonWeaponMontage) == 0x000040, "Member 'UMarinerWeaponMontage::FirstPersonWeaponMontage' has a wrong offset!");
static_assert(offsetof(UMarinerWeaponMontage, ThirdPersonWeaponMontage) == 0x000048, "Member 'UMarinerWeaponMontage::ThirdPersonWeaponMontage' has a wrong offset!");

// Class Mariner.MarinerWidgetPool
// 0x0060 (0x0088 - 0x0028)
class UMarinerWidgetPool : public UObject
{
public:
	TArray<struct FWidgetPoolData>                InitialPoolData;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class UUserWidget>, struct FWidgetPoolType> WidgetPoolGroup;                                   // 0x0038(0x0050)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void CreatePool(const struct FWidgetPoolData& PoolData);
	void DestroyAllPools();
	void DestroyPool(TSubclassOf<class UUserWidget> WidgetType);
	class UUserWidget* GetWidgetFromPool(TSubclassOf<class UUserWidget> WidgetType, class UWidget* NewOwner);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerWidgetPool">();
	}
	static class UMarinerWidgetPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerWidgetPool>();
	}
};
static_assert(alignof(UMarinerWidgetPool) == 0x000008, "Wrong alignment on UMarinerWidgetPool");
static_assert(sizeof(UMarinerWidgetPool) == 0x000088, "Wrong size on UMarinerWidgetPool");
static_assert(offsetof(UMarinerWidgetPool, InitialPoolData) == 0x000028, "Member 'UMarinerWidgetPool::InitialPoolData' has a wrong offset!");
static_assert(offsetof(UMarinerWidgetPool, WidgetPoolGroup) == 0x000038, "Member 'UMarinerWidgetPool::WidgetPoolGroup' has a wrong offset!");

// Class Mariner.MarinerWidgetSwitcher
// 0x0018 (0x0150 - 0x0138)
class UMarinerWidgetSwitcher final : public UWidgetSwitcher
{
public:
	TArray<class UPanelSlot*>                     ActualSlots;                                       // 0x0138(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A9D[0x8];                                     // 0x0148(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerWidgetSwitcher">();
	}
	static class UMarinerWidgetSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerWidgetSwitcher>();
	}
};
static_assert(alignof(UMarinerWidgetSwitcher) == 0x000008, "Wrong alignment on UMarinerWidgetSwitcher");
static_assert(sizeof(UMarinerWidgetSwitcher) == 0x000150, "Wrong size on UMarinerWidgetSwitcher");
static_assert(offsetof(UMarinerWidgetSwitcher, ActualSlots) == 0x000138, "Member 'UMarinerWidgetSwitcher::ActualSlots' has a wrong offset!");

// Class Mariner.MarinerWrapBox
// 0x0020 (0x0140 - 0x0120)
class UMarinerWrapBox final : public UPanelWidget
{
public:
	struct FVector2D                              InnerSlotPadding;                                  // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9E[0x17];                                    // 0x0129(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMarinerWrapBoxSlot* AddChildWrapBox(class UWidget* Content);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetInnerSlotPadding(const struct FVector2D& InPadding);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarinerWrapBox">();
	}
	static class UMarinerWrapBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarinerWrapBox>();
	}
};
static_assert(alignof(UMarinerWrapBox) == 0x000008, "Wrong alignment on UMarinerWrapBox");
static_assert(sizeof(UMarinerWrapBox) == 0x000140, "Wrong size on UMarinerWrapBox");
static_assert(offsetof(UMarinerWrapBox, InnerSlotPadding) == 0x000120, "Member 'UMarinerWrapBox::InnerSlotPadding' has a wrong offset!");
static_assert(offsetof(UMarinerWrapBox, HorizontalAlignment) == 0x000128, "Member 'UMarinerWrapBox::HorizontalAlignment' has a wrong offset!");

// Class Mariner.NavArea_MarinerDoubleJump
// 0x0000 (0x0048 - 0x0048)
class UNavArea_MarinerDoubleJump final : public UNavArea
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavArea_MarinerDoubleJump">();
	}
	static class UNavArea_MarinerDoubleJump* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavArea_MarinerDoubleJump>();
	}
};
static_assert(alignof(UNavArea_MarinerDoubleJump) == 0x000008, "Wrong alignment on UNavArea_MarinerDoubleJump");
static_assert(sizeof(UNavArea_MarinerDoubleJump) == 0x000048, "Wrong size on UNavArea_MarinerDoubleJump");

// Class Mariner.NavArea_MarinerJump
// 0x0000 (0x0048 - 0x0048)
class UNavArea_MarinerJump final : public UNavArea
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavArea_MarinerJump">();
	}
	static class UNavArea_MarinerJump* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavArea_MarinerJump>();
	}
};
static_assert(alignof(UNavArea_MarinerJump) == 0x000008, "Wrong alignment on UNavArea_MarinerJump");
static_assert(sizeof(UNavArea_MarinerJump) == 0x000048, "Wrong size on UNavArea_MarinerJump");

// Class Mariner.NavArea_MarinerRocketJump
// 0x0000 (0x0048 - 0x0048)
class UNavArea_MarinerRocketJump final : public UNavArea
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavArea_MarinerRocketJump">();
	}
	static class UNavArea_MarinerRocketJump* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavArea_MarinerRocketJump>();
	}
};
static_assert(alignof(UNavArea_MarinerRocketJump) == 0x000008, "Wrong alignment on UNavArea_MarinerRocketJump");
static_assert(sizeof(UNavArea_MarinerRocketJump) == 0x000048, "Wrong size on UNavArea_MarinerRocketJump");

}

