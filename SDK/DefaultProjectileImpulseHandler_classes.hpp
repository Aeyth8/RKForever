#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DefaultProjectileImpulseHandler

#include "Basic.hpp"

#include "BaseImpulseHandler_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass DefaultProjectileImpulseHandler.DefaultProjectileImpulseHandler_C
// 0x0010 (0x0058 - 0x0048)
class UDefaultProjectileImpulseHandler_C : public UBaseImpulseHandler_C
{
public:
	float                                         SpikeImpulse;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpikeDistance;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpikeAngle;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool IsSpikeImpulse(class UObject* Projectile, const struct FVector& HitLocation, class UObject* DamagedActor, float DirectionPitch, bool IsFalling, class UObject* Instigator) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DefaultProjectileImpulseHandler_C">();
	}
	static class UDefaultProjectileImpulseHandler_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDefaultProjectileImpulseHandler_C>();
	}
};
static_assert(alignof(UDefaultProjectileImpulseHandler_C) == 0x000008, "Wrong alignment on UDefaultProjectileImpulseHandler_C");
static_assert(sizeof(UDefaultProjectileImpulseHandler_C) == 0x000058, "Wrong size on UDefaultProjectileImpulseHandler_C");
static_assert(offsetof(UDefaultProjectileImpulseHandler_C, SpikeImpulse) == 0x000048, "Member 'UDefaultProjectileImpulseHandler_C::SpikeImpulse' has a wrong offset!");
static_assert(offsetof(UDefaultProjectileImpulseHandler_C, SpikeDistance) == 0x00004C, "Member 'UDefaultProjectileImpulseHandler_C::SpikeDistance' has a wrong offset!");
static_assert(offsetof(UDefaultProjectileImpulseHandler_C, SpikeAngle) == 0x000050, "Member 'UDefaultProjectileImpulseHandler_C::SpikeAngle' has a wrong offset!");

}

