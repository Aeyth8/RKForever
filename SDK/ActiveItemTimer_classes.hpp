#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ActiveItemTimer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mariner_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ActiveItemTimer.ActiveItemTimer_C
// 0x0028 (0x0260 - 0x0238)
class UActiveItemTimer_C final : public UMarinerActiveItemWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 ItemIcon;                                          // 0x0240(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMarinerCircleProgress*                 TimerCircle;                                       // 0x0248(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FTimerHandle                           Timer;                                             // 0x0250(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         TimerDuration;                                     // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ActiveItemTimer(int32 EntryPoint);
	void CustomEvent_0(const class AMarinerCharacter* KnockOutInstigator, const bool bWasMegablast);
	void OnItemSet(const struct FSlateBrush& Icon, float Duration);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void TimerComplete();
	void SetActiveTimer(float Duration);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ActiveItemTimer_C">();
	}
	static class UActiveItemTimer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveItemTimer_C>();
	}
};
static_assert(alignof(UActiveItemTimer_C) == 0x000008, "Wrong alignment on UActiveItemTimer_C");
static_assert(sizeof(UActiveItemTimer_C) == 0x000260, "Wrong size on UActiveItemTimer_C");
static_assert(offsetof(UActiveItemTimer_C, UberGraphFrame) == 0x000238, "Member 'UActiveItemTimer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UActiveItemTimer_C, ItemIcon) == 0x000240, "Member 'UActiveItemTimer_C::ItemIcon' has a wrong offset!");
static_assert(offsetof(UActiveItemTimer_C, TimerCircle) == 0x000248, "Member 'UActiveItemTimer_C::TimerCircle' has a wrong offset!");
static_assert(offsetof(UActiveItemTimer_C, Timer) == 0x000250, "Member 'UActiveItemTimer_C::Timer' has a wrong offset!");
static_assert(offsetof(UActiveItemTimer_C, TimerDuration) == 0x000258, "Member 'UActiveItemTimer_C::TimerDuration' has a wrong offset!");

}

