#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BaseImpulseHandler

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BaseImpulseHandler.BaseImpulseHandler_C.GetMinimumLaunchAngleVector
// 0x007C (0x007C - 0x0000)
struct BaseImpulseHandler_C_GetMinimumLaunchAngleVector final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize2D_ReturnValue;                      // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24DB[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BaseImpulseHandler_C_GetMinimumLaunchAngleVector) == 0x000004, "Wrong alignment on BaseImpulseHandler_C_GetMinimumLaunchAngleVector");
static_assert(sizeof(BaseImpulseHandler_C_GetMinimumLaunchAngleVector) == 0x00007C, "Wrong size on BaseImpulseHandler_C_GetMinimumLaunchAngleVector");
static_assert(offsetof(BaseImpulseHandler_C_GetMinimumLaunchAngleVector, Direction) == 0x000000, "Member 'BaseImpulseHandler_C_GetMinimumLaunchAngleVector::Direction' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetMinimumLaunchAngleVector, ReturnValue) == 0x00000C, "Member 'BaseImpulseHandler_C_GetMinimumLaunchAngleVector::ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetMinimumLaunchAngleVector, CallFunc_NegateVector_ReturnValue) == 0x000018, "Member 'BaseImpulseHandler_C_GetMinimumLaunchAngleVector::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetMinimumLaunchAngleVector, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'BaseImpulseHandler_C_GetMinimumLaunchAngleVector::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetMinimumLaunchAngleVector, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000028, "Member 'BaseImpulseHandler_C_GetMinimumLaunchAngleVector::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetMinimumLaunchAngleVector, CallFunc_GetUpVector_ReturnValue) == 0x000030, "Member 'BaseImpulseHandler_C_GetMinimumLaunchAngleVector::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetMinimumLaunchAngleVector, CallFunc_Normal2D_ReturnValue) == 0x00003C, "Member 'BaseImpulseHandler_C_GetMinimumLaunchAngleVector::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetMinimumLaunchAngleVector, CallFunc_Cross_VectorVector_ReturnValue) == 0x000044, "Member 'BaseImpulseHandler_C_GetMinimumLaunchAngleVector::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetMinimumLaunchAngleVector, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000050, "Member 'BaseImpulseHandler_C_GetMinimumLaunchAngleVector::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetMinimumLaunchAngleVector, CallFunc_VSize2D_ReturnValue) == 0x00005C, "Member 'BaseImpulseHandler_C_GetMinimumLaunchAngleVector::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetMinimumLaunchAngleVector, CallFunc_RotateAngleAxis_ReturnValue) == 0x000060, "Member 'BaseImpulseHandler_C_GetMinimumLaunchAngleVector::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetMinimumLaunchAngleVector, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x00006C, "Member 'BaseImpulseHandler_C_GetMinimumLaunchAngleVector::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetMinimumLaunchAngleVector, CallFunc_SelectVector_ReturnValue) == 0x000070, "Member 'BaseImpulseHandler_C_GetMinimumLaunchAngleVector::CallFunc_SelectVector_ReturnValue' has a wrong offset!");

// Function BaseImpulseHandler.BaseImpulseHandler_C.IsDirectionBelowMinimumAngle
// 0x0038 (0x0038 - 0x0000)
struct BaseImpulseHandler_C_IsDirectionBelowMinimumAngle final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24DC[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegCos_ReturnValue;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24DD[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BaseImpulseHandler_C_IsDirectionBelowMinimumAngle) == 0x000004, "Wrong alignment on BaseImpulseHandler_C_IsDirectionBelowMinimumAngle");
static_assert(sizeof(BaseImpulseHandler_C_IsDirectionBelowMinimumAngle) == 0x000038, "Wrong size on BaseImpulseHandler_C_IsDirectionBelowMinimumAngle");
static_assert(offsetof(BaseImpulseHandler_C_IsDirectionBelowMinimumAngle, Direction) == 0x000000, "Member 'BaseImpulseHandler_C_IsDirectionBelowMinimumAngle::Direction' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_IsDirectionBelowMinimumAngle, Return) == 0x00000C, "Member 'BaseImpulseHandler_C_IsDirectionBelowMinimumAngle::Return' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_IsDirectionBelowMinimumAngle, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'BaseImpulseHandler_C_IsDirectionBelowMinimumAngle::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_IsDirectionBelowMinimumAngle, CallFunc_GetUpVector_ReturnValue) == 0x000014, "Member 'BaseImpulseHandler_C_IsDirectionBelowMinimumAngle::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_IsDirectionBelowMinimumAngle, CallFunc_DegCos_ReturnValue) == 0x000020, "Member 'BaseImpulseHandler_C_IsDirectionBelowMinimumAngle::CallFunc_DegCos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_IsDirectionBelowMinimumAngle, CallFunc_Dot_VectorVector_ReturnValue) == 0x000024, "Member 'BaseImpulseHandler_C_IsDirectionBelowMinimumAngle::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_IsDirectionBelowMinimumAngle, CallFunc_Less_FloatFloat_ReturnValue) == 0x000028, "Member 'BaseImpulseHandler_C_IsDirectionBelowMinimumAngle::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_IsDirectionBelowMinimumAngle, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'BaseImpulseHandler_C_IsDirectionBelowMinimumAngle::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_IsDirectionBelowMinimumAngle, CallFunc_SelectFloat_ReturnValue) == 0x000030, "Member 'BaseImpulseHandler_C_IsDirectionBelowMinimumAngle::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_IsDirectionBelowMinimumAngle, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000034, "Member 'BaseImpulseHandler_C_IsDirectionBelowMinimumAngle::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BaseImpulseHandler.BaseImpulseHandler_C.BP_OverrideDamageImpulseOrigin
// 0x0090 (0x0090 - 0x0000)
struct BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin final
{
public:
	const class AActor*                           DamagedActor;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DamageOrigin;                                      // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DamageHitPoint;                                    // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsAOEDamage;                                      // 0x0020(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24DE[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AController*                      DamageInstigator;                                  // 0x0028(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class AActor*                           DamageSourceActor;                                 // 0x0030(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0038(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24DF[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BP_OverrideDamageImpulseOrigin_ReturnValue; // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24E0[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24E1[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24E2[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      K2Node_DynamicCast_AsMariner_Character;            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24E3[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default;                             // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin) == 0x000008, "Wrong alignment on BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin");
static_assert(sizeof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin) == 0x000090, "Wrong size on BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, DamagedActor) == 0x000000, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::DamagedActor' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, DamageOrigin) == 0x000008, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::DamageOrigin' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, DamageHitPoint) == 0x000014, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::DamageHitPoint' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, bIsAOEDamage) == 0x000020, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::bIsAOEDamage' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, DamageInstigator) == 0x000028, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::DamageInstigator' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, DamageSourceActor) == 0x000030, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::DamageSourceActor' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, ReturnValue) == 0x000038, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, Temp_bool_Variable) == 0x000044, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, CallFunc_BP_OverrideDamageImpulseOrigin_ReturnValue) == 0x000048, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::CallFunc_BP_OverrideDamageImpulseOrigin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000058, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000064, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000070, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, K2Node_DynamicCast_AsMariner_Character) == 0x000078, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::K2Node_DynamicCast_AsMariner_Character' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin, K2Node_Select_Default) == 0x000084, "Member 'BaseImpulseHandler_C_BP_OverrideDamageImpulseOrigin::K2Node_Select_Default' has a wrong offset!");

// Function BaseImpulseHandler.BaseImpulseHandler_C.BP_CalculateDamageImpulseVector
// 0x00B8 (0x00B8 - 0x0000)
struct BaseImpulseHandler_C_BP_CalculateDamageImpulseVector final
{
public:
	const class AActor*                           DamagedActor;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageImpulse;                                     // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DamageOrigin;                                      // 0x000C(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DamageDirection;                                   // 0x0018(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsAOEDamage;                                      // 0x0024(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24E4[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	const class AController*                      DamageInstigator;                                  // 0x0028(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class AActor*                           DamageSourceActor;                                 // 0x0030(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0038(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24E5[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BP_CalculateDamageImpulseVector_ReturnValue; // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorEyesViewPoint_OutLocation;        // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetActorEyesViewPoint_OutRotation;        // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24E6[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRocketJumpDirectionAdjusted_NewDirection; // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRocketJumpDirectionAdjusted_AdjustedPitchRatio; // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24E7[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default;                             // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector) == 0x000008, "Wrong alignment on BaseImpulseHandler_C_BP_CalculateDamageImpulseVector");
static_assert(sizeof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector) == 0x0000B8, "Wrong size on BaseImpulseHandler_C_BP_CalculateDamageImpulseVector");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, DamagedActor) == 0x000000, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::DamagedActor' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, DamageImpulse) == 0x000008, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::DamageImpulse' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, DamageOrigin) == 0x00000C, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::DamageOrigin' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, DamageDirection) == 0x000018, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::DamageDirection' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, bIsAOEDamage) == 0x000024, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::bIsAOEDamage' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, DamageInstigator) == 0x000028, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::DamageInstigator' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, DamageSourceActor) == 0x000030, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::DamageSourceActor' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, ReturnValue) == 0x000038, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, Temp_bool_Variable) == 0x000044, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, CallFunc_BP_CalculateDamageImpulseVector_ReturnValue) == 0x000048, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::CallFunc_BP_CalculateDamageImpulseVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, CallFunc_GetActorEyesViewPoint_OutLocation) == 0x000054, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::CallFunc_GetActorEyesViewPoint_OutLocation' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, CallFunc_GetActorEyesViewPoint_OutRotation) == 0x000060, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::CallFunc_GetActorEyesViewPoint_OutRotation' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00006C, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, CallFunc_GetForwardVector_ReturnValue) == 0x000070, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00007C, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, CallFunc_GetRocketJumpDirectionAdjusted_NewDirection) == 0x000088, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::CallFunc_GetRocketJumpDirectionAdjusted_NewDirection' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, CallFunc_GetRocketJumpDirectionAdjusted_AdjustedPitchRatio) == 0x000094, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::CallFunc_GetRocketJumpDirectionAdjusted_AdjustedPitchRatio' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000098, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000A4, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_BP_CalculateDamageImpulseVector, K2Node_Select_Default) == 0x0000A8, "Member 'BaseImpulseHandler_C_BP_CalculateDamageImpulseVector::K2Node_Select_Default' has a wrong offset!");

// Function BaseImpulseHandler.BaseImpulseHandler_C.GetRocketJumpDirectionAdjusted
// 0x00C0 (0x00C0 - 0x0000)
struct BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OriginalDirection;                                 // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewDirection;                                      // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdjustedPitchRatio;                                // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UnadjustedImpulseVector;                           // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            RocketJumpCurve;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchUpFromDown;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartVectorToSpinUp;                               // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PitchSpinAxis;                                     // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24E8[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CallFunc_GetRocketJumpCurveToUse_Curve;            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_2;                     // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted) == 0x000008, "Wrong alignment on BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted");
static_assert(sizeof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted) == 0x0000C0, "Wrong size on BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, Pawn) == 0x000000, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::Pawn' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, OriginalDirection) == 0x000008, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::OriginalDirection' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, NewDirection) == 0x000014, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::NewDirection' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, AdjustedPitchRatio) == 0x000020, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::AdjustedPitchRatio' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, UnadjustedImpulseVector) == 0x000024, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::UnadjustedImpulseVector' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, RocketJumpCurve) == 0x000030, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::RocketJumpCurve' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, PitchUpFromDown) == 0x000038, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::PitchUpFromDown' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, StartVectorToSpinUp) == 0x00003C, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::StartVectorToSpinUp' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, PitchSpinAxis) == 0x000048, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::PitchSpinAxis' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, CallFunc_Normal_ReturnValue) == 0x000054, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, CallFunc_GetActorRightVector_ReturnValue) == 0x000060, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, CallFunc_Normal_ReturnValue_1) == 0x00006C, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, CallFunc_Dot_VectorVector_ReturnValue) == 0x000078, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00007C, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, CallFunc_DegAcos_ReturnValue) == 0x000088, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, CallFunc_GetRocketJumpCurveToUse_Curve) == 0x000090, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::CallFunc_GetRocketJumpCurveToUse_Curve' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000098, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, CallFunc_GetFloatValue_ReturnValue) == 0x00009C, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000A0, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, CallFunc_RotateAngleAxis_ReturnValue) == 0x0000A4, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted, CallFunc_Normal_ReturnValue_2) == 0x0000B0, "Member 'BaseImpulseHandler_C_GetRocketJumpDirectionAdjusted::CallFunc_Normal_ReturnValue_2' has a wrong offset!");

// Function BaseImpulseHandler.BaseImpulseHandler_C.GetRocketJumpCurveToUse
// 0x0048 (0x0048 - 0x0000)
struct BaseImpulseHandler_C_GetRocketJumpCurveToUse final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Artifact31Curve;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            DefaultCurve;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24E9[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface; // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24EA[0x5];                                     // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BaseImpulseHandler_C_GetRocketJumpCurveToUse) == 0x000008, "Wrong alignment on BaseImpulseHandler_C_GetRocketJumpCurveToUse");
static_assert(sizeof(BaseImpulseHandler_C_GetRocketJumpCurveToUse) == 0x000048, "Wrong size on BaseImpulseHandler_C_GetRocketJumpCurveToUse");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpCurveToUse, Pawn) == 0x000000, "Member 'BaseImpulseHandler_C_GetRocketJumpCurveToUse::Pawn' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpCurveToUse, Curve) == 0x000008, "Member 'BaseImpulseHandler_C_GetRocketJumpCurveToUse::Curve' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpCurveToUse, Artifact31Curve) == 0x000010, "Member 'BaseImpulseHandler_C_GetRocketJumpCurveToUse::Artifact31Curve' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpCurveToUse, DefaultCurve) == 0x000018, "Member 'BaseImpulseHandler_C_GetRocketJumpCurveToUse::DefaultCurve' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpCurveToUse, Temp_bool_Variable) == 0x000020, "Member 'BaseImpulseHandler_C_GetRocketJumpCurveToUse::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpCurveToUse, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface) == 0x000028, "Member 'BaseImpulseHandler_C_GetRocketJumpCurveToUse::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpCurveToUse, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BaseImpulseHandler_C_GetRocketJumpCurveToUse::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpCurveToUse, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000039, "Member 'BaseImpulseHandler_C_GetRocketJumpCurveToUse::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpCurveToUse, Temp_bool_Variable_1) == 0x00003A, "Member 'BaseImpulseHandler_C_GetRocketJumpCurveToUse::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BaseImpulseHandler_C_GetRocketJumpCurveToUse, K2Node_Select_Default) == 0x000040, "Member 'BaseImpulseHandler_C_GetRocketJumpCurveToUse::K2Node_Select_Default' has a wrong offset!");

}

