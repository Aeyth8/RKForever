#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeProgress

#include "Basic.hpp"

#include "ChallengeProgress_classes.hpp"
#include "ChallengeProgress_parameters.hpp"


namespace SDK
{

// Function ChallengeProgress.ChallengeProgress_C.AnimationCompleteEvent__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMangoQuestDescription           Quest                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UChallengeProgress_C::AnimationCompleteEvent__DelegateSignature(const struct FMangoQuestDescription& Quest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeProgress_C", "AnimationCompleteEvent__DelegateSignature");

	Params::ChallengeProgress_C_AnimationCompleteEvent__DelegateSignature Parms{};

	Parms.Quest = std::move(Quest);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengeProgress.ChallengeProgress_C.ChallengeCompleteEvent__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMangoQuestDescription           Quest                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UChallengeProgress_C::ChallengeCompleteEvent__DelegateSignature(const struct FMangoQuestDescription& Quest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeProgress_C", "ChallengeCompleteEvent__DelegateSignature");

	Params::ChallengeProgress_C_ChallengeCompleteEvent__DelegateSignature Parms{};

	Parms.Quest = std::move(Quest);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengeProgress.ChallengeProgress_C.ExecuteUbergraph_ChallengeProgress
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallengeProgress_C::ExecuteUbergraph_ChallengeProgress(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeProgress_C", "ExecuteUbergraph_ChallengeProgress");

	Params::ChallengeProgress_C_ExecuteUbergraph_ChallengeProgress Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengeProgress.ChallengeProgress_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UChallengeProgress_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeProgress_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ChallengeProgress.ChallengeProgress_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallengeProgress_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeProgress_C", "Tick");

	Params::ChallengeProgress_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengeProgress.ChallengeProgress_C.SetProgress
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentProgress                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxProgress                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallengeProgress_C::SetProgress(int32 CurrentProgress, int32 MaxProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeProgress_C", "SetProgress");

	Params::ChallengeProgress_C_SetProgress Parms{};

	Parms.CurrentProgress = CurrentProgress;
	Parms.MaxProgress = MaxProgress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengeProgress.ChallengeProgress_C.Init
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMangoQuestDescription           Param_QuestDesc                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    AllowInput                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UChallengeProgress_C::Init(struct FMangoQuestDescription& Param_QuestDesc, bool AllowInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeProgress_C", "Init");

	Params::ChallengeProgress_C_Init Parms{};

	Parms.Param_QuestDesc = std::move(Param_QuestDesc);
	Parms.AllowInput = AllowInput;

	UObject::ProcessEvent(Func, &Parms);

	Param_QuestDesc = std::move(Parms.Param_QuestDesc);
}


// Function ChallengeProgress.ChallengeProgress_C.OnHighlight
// (Public, BlueprintCallable, BlueprintEvent)

void UChallengeProgress_C::OnHighlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeProgress_C", "OnHighlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ChallengeProgress.ChallengeProgress_C.OnUnhighlight
// (Public, BlueprintCallable, BlueprintEvent)

void UChallengeProgress_C::OnUnhighlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeProgress_C", "OnUnhighlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ChallengeProgress.ChallengeProgress_C.UpdateResetPanelVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void UChallengeProgress_C::UpdateResetPanelVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeProgress_C", "UpdateResetPanelVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ChallengeProgress.ChallengeProgress_C.AnimateToGoal
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMangoQuestDescription           QuestGoal                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// TDelegate<void(const struct FMangoQuestDescription& Quest)>AnimationCompleteEvent1                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
// TDelegate<void(const struct FMangoQuestDescription& Quest)>AnimationCompleteEvent2                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
// TDelegate<void(const struct FMangoQuestDescription& Quest)>Param_ChallengeCompleteEvent                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)

void UChallengeProgress_C::AnimateToGoal(const struct FMangoQuestDescription& QuestGoal, const TDelegate<void(const struct FMangoQuestDescription& Quest)>& AnimationCompleteEvent1, const TDelegate<void(const struct FMangoQuestDescription& Quest)>& AnimationCompleteEvent2, const TDelegate<void(const struct FMangoQuestDescription& Quest)>& Param_ChallengeCompleteEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeProgress_C", "AnimateToGoal");

	Params::ChallengeProgress_C_AnimateToGoal Parms{};

	Parms.QuestGoal = std::move(QuestGoal);
	Parms.AnimationCompleteEvent1 = AnimationCompleteEvent1;
	Parms.AnimationCompleteEvent2 = AnimationCompleteEvent2;
	Parms.Param_ChallengeCompleteEvent = Param_ChallengeCompleteEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengeProgress.ChallengeProgress_C.AnimationComplete
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UChallengeProgress_C::AnimationComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeProgress_C", "AnimationComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ChallengeProgress.ChallengeProgress_C.SetProgressFromAnimation
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentProgress                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxProgress                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallengeProgress_C::SetProgressFromAnimation(float CurrentProgress, float MaxProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeProgress_C", "SetProgressFromAnimation");

	Params::ChallengeProgress_C_SetProgressFromAnimation Parms{};

	Parms.CurrentProgress = CurrentProgress;
	Parms.MaxProgress = MaxProgress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengeProgress.ChallengeProgress_C.FinalDelayComplete
// (Private, BlueprintCallable, BlueprintEvent)

void UChallengeProgress_C::FinalDelayComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeProgress_C", "FinalDelayComplete");

	UObject::ProcessEvent(Func, nullptr);
}

}

