#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UtilityFunctionLibrary

#include "Basic.hpp"

#include "UtilityFunctionLibrary_classes.hpp"
#include "UtilityFunctionLibrary_parameters.hpp"


namespace SDK
{

// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GetVectorRounded
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          InVector                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          RoundedVector                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::GetVectorRounded(const struct FVector& InVector, class UObject* __WorldContext, struct FVector* RoundedVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GetVectorRounded");

	Params::UtilityFunctionLibrary_C_GetVectorRounded Parms{};

	Parms.InVector = std::move(InVector);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (RoundedVector != nullptr)
		*RoundedVector = std::move(Parms.RoundedVector);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GetRotatorFloored
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         InRotator                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         RoundedRotator                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUtilityFunctionLibrary_C::GetRotatorFloored(const struct FRotator& InRotator, class UObject* __WorldContext, struct FRotator* RoundedRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GetRotatorFloored");

	Params::UtilityFunctionLibrary_C_GetRotatorFloored Parms{};

	Parms.InRotator = std::move(InRotator);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (RoundedRotator != nullptr)
		*RoundedRotator = std::move(Parms.RoundedRotator);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GetRandomXForwardUnitVectorInCircle
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          UnitVector                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::GetRandomXForwardUnitVectorInCircle(class UObject* __WorldContext, struct FVector* UnitVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GetRandomXForwardUnitVectorInCircle");

	Params::UtilityFunctionLibrary_C_GetRandomXForwardUnitVectorInCircle Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (UnitVector != nullptr)
		*UnitVector = std::move(Parms.UnitVector);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.LogCollision
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Primitive                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::LogCollision(class UPrimitiveComponent* Primitive, float Duration, const struct FLinearColor& Color, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "LogCollision");

	Params::UtilityFunctionLibrary_C_LogCollision Parms{};

	Parms.Primitive = Primitive;
	Parms.Duration = Duration;
	Parms.Color = std::move(Color);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.DrawCharacterSoundHostility
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::DrawCharacterSoundHostility(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "DrawCharacterSoundHostility");

	Params::UtilityFunctionLibrary_C_DrawCharacterSoundHostility Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.DrawDebugCapsule2
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          PointA                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PointB                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     LineColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Thickness                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::DrawDebugCapsule2(const struct FVector& PointA, const struct FVector& PointB, float Radius, const struct FLinearColor& LineColor, float Duration, float Thickness, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "DrawDebugCapsule2");

	Params::UtilityFunctionLibrary_C_DrawDebugCapsule2 Parms{};

	Parms.PointA = std::move(PointA);
	Parms.PointB = std::move(PointB);
	Parms.Radius = Radius;
	Parms.LineColor = std::move(LineColor);
	Parms.Duration = Duration;
	Parms.Thickness = Thickness;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.DrawDebugCapsuleComp
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCapsuleComponent*                Capsule                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     LineColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Thickness                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::DrawDebugCapsuleComp(class UCapsuleComponent* Capsule, const struct FLinearColor& LineColor, float Duration, float Thickness, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "DrawDebugCapsuleComp");

	Params::UtilityFunctionLibrary_C_DrawDebugCapsuleComp Parms{};

	Parms.Capsule = Capsule;
	Parms.LineColor = std::move(LineColor);
	Parms.Duration = Duration;
	Parms.Thickness = Thickness;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.LogCharacterMoveTime
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Log                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bPrintToScreen                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::LogCharacterMoveTime(class AMarinerCharacter* Character, const class FString& Log, bool bPrintToScreen, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "LogCharacterMoveTime");

	Params::UtilityFunctionLibrary_C_LogCharacterMoveTime Parms{};

	Parms.Character = Character;
	Parms.Log = std::move(Log);
	Parms.bPrintToScreen = bPrintToScreen;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GetXYDistanceSquared
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          VectorA                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          VectorB                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   XYDistanceSquared                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::GetXYDistanceSquared(const struct FVector& VectorA, const struct FVector& VectorB, class UObject* __WorldContext, float* XYDistanceSquared)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GetXYDistanceSquared");

	Params::UtilityFunctionLibrary_C_GetXYDistanceSquared Parms{};

	Parms.VectorA = std::move(VectorA);
	Parms.VectorB = std::move(VectorB);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (XYDistanceSquared != nullptr)
		*XYDistanceSquared = Parms.XYDistanceSquared;
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.TruncateRotator
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FRotator                         RawRotator                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         TruncatedRotator                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUtilityFunctionLibrary_C::TruncateRotator(const struct FRotator& RawRotator, class UObject* __WorldContext, struct FRotator* TruncatedRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "TruncateRotator");

	Params::UtilityFunctionLibrary_C_TruncateRotator Parms{};

	Parms.RawRotator = std::move(RawRotator);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (TruncatedRotator != nullptr)
		*TruncatedRotator = std::move(Parms.TruncatedRotator);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.RotatorToVectorQuantize
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FRotator                         Rotator                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector_NetQuantize              VecQuantize                                            (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::RotatorToVectorQuantize(const struct FRotator& Rotator, class UObject* __WorldContext, struct FVector_NetQuantize* VecQuantize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "RotatorToVectorQuantize");

	Params::UtilityFunctionLibrary_C_RotatorToVectorQuantize Parms{};

	Parms.Rotator = std::move(Rotator);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (VecQuantize != nullptr)
		*VecQuantize = std::move(Parms.VecQuantize);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.VectorQuantizeToRotator
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector_NetQuantize              VecQuantize                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotator                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUtilityFunctionLibrary_C::VectorQuantizeToRotator(const struct FVector_NetQuantize& VecQuantize, class UObject* __WorldContext, struct FRotator* Rotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "VectorQuantizeToRotator");

	Params::UtilityFunctionLibrary_C_VectorQuantizeToRotator Parms{};

	Parms.VecQuantize = std::move(VecQuantize);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Rotator != nullptr)
		*Rotator = std::move(Parms.Rotator);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.RotatorToVector
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FRotator                         Rotator                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Vector                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::RotatorToVector(const struct FRotator& Rotator, class UObject* __WorldContext, struct FVector* Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "RotatorToVector");

	Params::UtilityFunctionLibrary_C_RotatorToVector Parms{};

	Parms.Rotator = std::move(Rotator);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Vector != nullptr)
		*Vector = std::move(Parms.Vector);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.VectorToRotator
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          VecQtor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotator                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUtilityFunctionLibrary_C::VectorToRotator(const struct FVector& VecQtor, class UObject* __WorldContext, struct FRotator* Rotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "VectorToRotator");

	Params::UtilityFunctionLibrary_C_VectorToRotator Parms{};

	Parms.VecQtor = std::move(VecQtor);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Rotator != nullptr)
		*Rotator = std::move(Parms.Rotator);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.LerpRotationRate
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FRotator                         RotationRateA                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         RotationRateB                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         BlendedRotationRate                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUtilityFunctionLibrary_C::LerpRotationRate(const struct FRotator& RotationRateA, const struct FRotator& RotationRateB, float Alpha, class UObject* __WorldContext, struct FRotator* BlendedRotationRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "LerpRotationRate");

	Params::UtilityFunctionLibrary_C_LerpRotationRate Parms{};

	Parms.RotationRateA = std::move(RotationRateA);
	Parms.RotationRateB = std::move(RotationRateB);
	Parms.Alpha = Alpha;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (BlendedRotationRate != nullptr)
		*BlendedRotationRate = std::move(Parms.BlendedRotationRate);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.LessThanOrEqualToVectorDistanceFast
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LessThanOrEqualTo                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUtilityFunctionLibrary_C::LessThanOrEqualToVectorDistanceFast(struct FVector& Vector, float Distance, class UObject* __WorldContext, bool* LessThanOrEqualTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "LessThanOrEqualToVectorDistanceFast");

	Params::UtilityFunctionLibrary_C_LessThanOrEqualToVectorDistanceFast Parms{};

	Parms.Vector = std::move(Vector);
	Parms.Distance = Distance;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Vector = std::move(Parms.Vector);

	if (LessThanOrEqualTo != nullptr)
		*LessThanOrEqualTo = Parms.LessThanOrEqualTo;
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.LessThanVectorDistanceFast
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LessThan                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUtilityFunctionLibrary_C::LessThanVectorDistanceFast(struct FVector& Vector, float Distance, class UObject* __WorldContext, bool* LessThan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "LessThanVectorDistanceFast");

	Params::UtilityFunctionLibrary_C_LessThanVectorDistanceFast Parms{};

	Parms.Vector = std::move(Vector);
	Parms.Distance = Distance;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Vector = std::move(Parms.Vector);

	if (LessThan != nullptr)
		*LessThan = Parms.LessThan;
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GreaterThanOrEqualToVectorDistanceFast
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    GreaterThanOrEqualTo                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUtilityFunctionLibrary_C::GreaterThanOrEqualToVectorDistanceFast(struct FVector& Vector, float Distance, class UObject* __WorldContext, bool* GreaterThanOrEqualTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GreaterThanOrEqualToVectorDistanceFast");

	Params::UtilityFunctionLibrary_C_GreaterThanOrEqualToVectorDistanceFast Parms{};

	Parms.Vector = std::move(Vector);
	Parms.Distance = Distance;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Vector = std::move(Parms.Vector);

	if (GreaterThanOrEqualTo != nullptr)
		*GreaterThanOrEqualTo = Parms.GreaterThanOrEqualTo;
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GreaterThanVectorDistanceFast
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    GreaterThan                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUtilityFunctionLibrary_C::GreaterThanVectorDistanceFast(struct FVector& Vector, float Distance, class UObject* __WorldContext, bool* GreaterThan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GreaterThanVectorDistanceFast");

	Params::UtilityFunctionLibrary_C_GreaterThanVectorDistanceFast Parms{};

	Parms.Vector = std::move(Vector);
	Parms.Distance = Distance;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Vector = std::move(Parms.Vector);

	if (GreaterThan != nullptr)
		*GreaterThan = Parms.GreaterThan;
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GetVectorToTarget
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           From                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           To                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::GetVectorToTarget(class AActor* From, class AActor* To, class UObject* __WorldContext, struct FVector* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GetVectorToTarget");

	Params::UtilityFunctionLibrary_C_GetVectorToTarget Parms{};

	Parms.From = From;
	Parms.To = To;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GetNormalToTarget
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           From                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           To                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::GetNormalToTarget(class AActor* From, class AActor* To, class UObject* __WorldContext, struct FVector* Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GetNormalToTarget");

	Params::UtilityFunctionLibrary_C_GetNormalToTarget Parms{};

	Parms.From = From;
	Parms.To = To;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Normal != nullptr)
		*Normal = std::move(Parms.Normal);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GetMidPointBetweenActors
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           ActorA                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ActorB                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MidPoint                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::GetMidPointBetweenActors(class AActor* ActorA, class AActor* ActorB, class UObject* __WorldContext, struct FVector* MidPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GetMidPointBetweenActors");

	Params::UtilityFunctionLibrary_C_GetMidPointBetweenActors Parms{};

	Parms.ActorA = ActorA;
	Parms.ActorB = ActorB;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (MidPoint != nullptr)
		*MidPoint = std::move(Parms.MidPoint);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GetNormalFromHit
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::GetNormalFromHit(struct FHitResult& Hit, class UObject* __WorldContext, struct FVector* Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GetNormalFromHit");

	Params::UtilityFunctionLibrary_C_GetNormalFromHit Parms{};

	Parms.Hit = std::move(Hit);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Hit = std::move(Parms.Hit);

	if (Normal != nullptr)
		*Normal = std::move(Parms.Normal);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.VectorToQuantized
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector_NetQuantize              VectorNetQuantized                                     (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::VectorToQuantized(struct FVector& Vector, class UObject* __WorldContext, struct FVector_NetQuantize* VectorNetQuantized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "VectorToQuantized");

	Params::UtilityFunctionLibrary_C_VectorToQuantized Parms{};

	Parms.Vector = std::move(Vector);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Vector = std::move(Parms.Vector);

	if (VectorNetQuantized != nullptr)
		*VectorNetQuantized = std::move(Parms.VectorNetQuantized);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GetHitComponentFromHit
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              HitComponent                                           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::GetHitComponentFromHit(struct FHitResult& Hit, class UObject* __WorldContext, class UPrimitiveComponent** HitComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GetHitComponentFromHit");

	Params::UtilityFunctionLibrary_C_GetHitComponentFromHit Parms{};

	Parms.Hit = std::move(Hit);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Hit = std::move(Parms.Hit);

	if (HitComponent != nullptr)
		*HitComponent = Parms.HitComponent;
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GetLocationFromHit
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::GetLocationFromHit(struct FHitResult& Hit, class UObject* __WorldContext, struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GetLocationFromHit");

	Params::UtilityFunctionLibrary_C_GetLocationFromHit Parms{};

	Parms.Hit = std::move(Hit);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Hit = std::move(Parms.Hit);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GetImpactNormalFromHit
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Normal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::GetImpactNormalFromHit(struct FHitResult& Hit, class UObject* __WorldContext, struct FVector* Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GetImpactNormalFromHit");

	Params::UtilityFunctionLibrary_C_GetImpactNormalFromHit Parms{};

	Parms.Hit = std::move(Hit);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Hit = std::move(Parms.Hit);

	if (Normal != nullptr)
		*Normal = std::move(Parms.Normal);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GetAvgBetweenVectors
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          LocA                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LocB                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MidPoint                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::GetAvgBetweenVectors(const struct FVector& LocA, const struct FVector& LocB, class UObject* __WorldContext, struct FVector* MidPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GetAvgBetweenVectors");

	Params::UtilityFunctionLibrary_C_GetAvgBetweenVectors Parms{};

	Parms.LocA = std::move(LocA);
	Parms.LocB = std::move(LocB);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (MidPoint != nullptr)
		*MidPoint = std::move(Parms.MidPoint);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GetPingMSFromPlayerState
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class APlayerState*                     PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PingMS                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::GetPingMSFromPlayerState(class APlayerState* PlayerState, class UObject* __WorldContext, float* PingMS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GetPingMSFromPlayerState");

	Params::UtilityFunctionLibrary_C_GetPingMSFromPlayerState Parms{};

	Parms.PlayerState = PlayerState;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PingMS != nullptr)
		*PingMS = Parms.PingMS;
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.GetPingSecondsFromPlayerState
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class APlayerState*                     PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PingSeconds                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::GetPingSecondsFromPlayerState(class APlayerState* PlayerState, class UObject* __WorldContext, float* PingSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "GetPingSecondsFromPlayerState");

	Params::UtilityFunctionLibrary_C_GetPingSecondsFromPlayerState Parms{};

	Parms.PlayerState = PlayerState;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PingSeconds != nullptr)
		*PingSeconds = Parms.PingSeconds;
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.NormalizeRatio
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   RawRatio                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NormalizedRatio                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::NormalizeRatio(float RawRatio, class UObject* __WorldContext, float* NormalizedRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "NormalizeRatio");

	Params::UtilityFunctionLibrary_C_NormalizeRatio Parms{};

	Parms.RawRatio = RawRatio;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (NormalizedRatio != nullptr)
		*NormalizedRatio = Parms.NormalizedRatio;
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.Draw Debug Text Line
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Prefix                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FLinearColor                     DrawColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          DrawLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LineSpacing                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Draw_Duration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Tabs                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::Draw_Debug_Text_Line(const class FString& Text, const class FString& Prefix, const struct FLinearColor& DrawColor, struct FVector& DrawLocation, float LineSpacing, float Draw_Duration, int32 Tabs, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "Draw Debug Text Line");

	Params::UtilityFunctionLibrary_C_Draw_Debug_Text_Line Parms{};

	Parms.Text = std::move(Text);
	Parms.Prefix = std::move(Prefix);
	Parms.DrawColor = std::move(DrawColor);
	Parms.DrawLocation = std::move(DrawLocation);
	Parms.LineSpacing = LineSpacing;
	Parms.Draw_Duration = Draw_Duration;
	Parms.Tabs = Tabs;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	DrawLocation = std::move(Parms.DrawLocation);
}


// Function UtilityFunctionLibrary.UtilityFunctionLibrary_C.Draw Debug Text ActorList
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           Title                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class AActor*>                   ActorList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FLinearColor                     DrawColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          DrawLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LineSpacing                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Draw_Duration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUtilityFunctionLibrary_C::Draw_Debug_Text_ActorList(const class FString& Title, TArray<class AActor*>& ActorList, const struct FLinearColor& DrawColor, struct FVector& DrawLocation, float LineSpacing, float Draw_Duration, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UtilityFunctionLibrary_C", "Draw Debug Text ActorList");

	Params::UtilityFunctionLibrary_C_Draw_Debug_Text_ActorList Parms{};

	Parms.Title = std::move(Title);
	Parms.ActorList = std::move(ActorList);
	Parms.DrawColor = std::move(DrawColor);
	Parms.DrawLocation = std::move(DrawLocation);
	Parms.LineSpacing = LineSpacing;
	Parms.Draw_Duration = Draw_Duration;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ActorList = std::move(Parms.ActorList);
	DrawLocation = std::move(Parms.DrawLocation);
}

}

