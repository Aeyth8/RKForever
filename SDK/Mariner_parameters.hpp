#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mariner

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Mariner_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "MangoClient_structs.hpp"
#include "InputCore_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function Mariner.MangoPlayerManager.Get
// 0x0010 (0x0010 - 0x0000)
struct MangoPlayerManager_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMangoPlayerManager*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPlayerManager_Get) == 0x000008, "Wrong alignment on MangoPlayerManager_Get");
static_assert(sizeof(MangoPlayerManager_Get) == 0x000010, "Wrong size on MangoPlayerManager_Get");
static_assert(offsetof(MangoPlayerManager_Get, WorldContextObject) == 0x000000, "Member 'MangoPlayerManager_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_Get, ReturnValue) == 0x000008, "Member 'MangoPlayerManager_Get::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.SetLocalProfileAdvertStateActive
// 0x0001 (0x0001 - 0x0000)
struct MangoPlayerManager_SetLocalProfileAdvertStateActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPlayerManager_SetLocalProfileAdvertStateActive) == 0x000001, "Wrong alignment on MangoPlayerManager_SetLocalProfileAdvertStateActive");
static_assert(sizeof(MangoPlayerManager_SetLocalProfileAdvertStateActive) == 0x000001, "Wrong size on MangoPlayerManager_SetLocalProfileAdvertStateActive");
static_assert(offsetof(MangoPlayerManager_SetLocalProfileAdvertStateActive, bActive) == 0x000000, "Member 'MangoPlayerManager_SetLocalProfileAdvertStateActive::bActive' has a wrong offset!");

// Function Mariner.MangoPlayerManager.SetNewsViewed
// 0x0014 (0x0014 - 0x0000)
struct MangoPlayerManager_SetNewsViewed final
{
public:
	struct FGuid                                  NewsCmsId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1411[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoPlayerManager_SetNewsViewed) == 0x000004, "Wrong alignment on MangoPlayerManager_SetNewsViewed");
static_assert(sizeof(MangoPlayerManager_SetNewsViewed) == 0x000014, "Wrong size on MangoPlayerManager_SetNewsViewed");
static_assert(offsetof(MangoPlayerManager_SetNewsViewed, NewsCmsId) == 0x000000, "Member 'MangoPlayerManager_SetNewsViewed::NewsCmsId' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_SetNewsViewed, ReturnValue) == 0x000010, "Member 'MangoPlayerManager_SetNewsViewed::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetActiveAccountName
// 0x0010 (0x0010 - 0x0000)
struct MangoPlayerManager_GetActiveAccountName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPlayerManager_GetActiveAccountName) == 0x000008, "Wrong alignment on MangoPlayerManager_GetActiveAccountName");
static_assert(sizeof(MangoPlayerManager_GetActiveAccountName) == 0x000010, "Wrong size on MangoPlayerManager_GetActiveAccountName");
static_assert(offsetof(MangoPlayerManager_GetActiveAccountName, ReturnValue) == 0x000000, "Member 'MangoPlayerManager_GetActiveAccountName::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetActiveBlastPassProgression
// 0x0030 (0x0030 - 0x0000)
struct MangoPlayerManager_GetActiveBlastPassProgression final
{
public:
	struct FMangoBlastPassProgression             OutProgression;                                    // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1412[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoPlayerManager_GetActiveBlastPassProgression) == 0x000008, "Wrong alignment on MangoPlayerManager_GetActiveBlastPassProgression");
static_assert(sizeof(MangoPlayerManager_GetActiveBlastPassProgression) == 0x000030, "Wrong size on MangoPlayerManager_GetActiveBlastPassProgression");
static_assert(offsetof(MangoPlayerManager_GetActiveBlastPassProgression, OutProgression) == 0x000000, "Member 'MangoPlayerManager_GetActiveBlastPassProgression::OutProgression' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetActiveBlastPassProgression, ReturnValue) == 0x000028, "Member 'MangoPlayerManager_GetActiveBlastPassProgression::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetAllEquippedEmotesByType
// 0x0328 (0x0328 - 0x0000)
struct MangoPlayerManager_GetAllEquippedEmotesByType final
{
public:
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoProfile                          Profile;                                           // 0x0028(0x02E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x0308(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1413[0x7];                                     // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMangoItem>                     OutItems;                                          // 0x0310(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0320(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1414[0x7];                                     // 0x0321(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoPlayerManager_GetAllEquippedEmotesByType) == 0x000008, "Wrong alignment on MangoPlayerManager_GetAllEquippedEmotesByType");
static_assert(sizeof(MangoPlayerManager_GetAllEquippedEmotesByType) == 0x000328, "Wrong size on MangoPlayerManager_GetAllEquippedEmotesByType");
static_assert(offsetof(MangoPlayerManager_GetAllEquippedEmotesByType, CharacterClass) == 0x000000, "Member 'MangoPlayerManager_GetAllEquippedEmotesByType::CharacterClass' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetAllEquippedEmotesByType, Profile) == 0x000028, "Member 'MangoPlayerManager_GetAllEquippedEmotesByType::Profile' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetAllEquippedEmotesByType, ItemType) == 0x000308, "Member 'MangoPlayerManager_GetAllEquippedEmotesByType::ItemType' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetAllEquippedEmotesByType, OutItems) == 0x000310, "Member 'MangoPlayerManager_GetAllEquippedEmotesByType::OutItems' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetAllEquippedEmotesByType, ReturnValue) == 0x000320, "Member 'MangoPlayerManager_GetAllEquippedEmotesByType::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetBlastPassProgression
// 0x0098 (0x0098 - 0x0000)
struct MangoPlayerManager_GetBlastPassProgression final
{
public:
	struct FMangoBlastPassDefinition              Definition;                                        // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMangoBlastPassProgression             OutProgression;                                    // 0x0068(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1415[0x7];                                     // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoPlayerManager_GetBlastPassProgression) == 0x000008, "Wrong alignment on MangoPlayerManager_GetBlastPassProgression");
static_assert(sizeof(MangoPlayerManager_GetBlastPassProgression) == 0x000098, "Wrong size on MangoPlayerManager_GetBlastPassProgression");
static_assert(offsetof(MangoPlayerManager_GetBlastPassProgression, Definition) == 0x000000, "Member 'MangoPlayerManager_GetBlastPassProgression::Definition' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetBlastPassProgression, OutProgression) == 0x000068, "Member 'MangoPlayerManager_GetBlastPassProgression::OutProgression' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetBlastPassProgression, ReturnValue) == 0x000090, "Member 'MangoPlayerManager_GetBlastPassProgression::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetCharacterProgressionForLocalProfile
// 0x0088 (0x0088 - 0x0000)
struct MangoPlayerManager_GetCharacterProgressionForLocalProfile final
{
public:
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoCharacterProgression             OutProgression;                                    // 0x0028(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1416[0x7];                                     // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoPlayerManager_GetCharacterProgressionForLocalProfile) == 0x000008, "Wrong alignment on MangoPlayerManager_GetCharacterProgressionForLocalProfile");
static_assert(sizeof(MangoPlayerManager_GetCharacterProgressionForLocalProfile) == 0x000088, "Wrong size on MangoPlayerManager_GetCharacterProgressionForLocalProfile");
static_assert(offsetof(MangoPlayerManager_GetCharacterProgressionForLocalProfile, CharacterClass) == 0x000000, "Member 'MangoPlayerManager_GetCharacterProgressionForLocalProfile::CharacterClass' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetCharacterProgressionForLocalProfile, OutProgression) == 0x000028, "Member 'MangoPlayerManager_GetCharacterProgressionForLocalProfile::OutProgression' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetCharacterProgressionForLocalProfile, ReturnValue) == 0x000080, "Member 'MangoPlayerManager_GetCharacterProgressionForLocalProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetCharacterProgressionForProfile
// 0x0368 (0x0368 - 0x0000)
struct MangoPlayerManager_GetCharacterProgressionForProfile final
{
public:
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoProfile                          Profile;                                           // 0x0028(0x02E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMangoCharacterProgression             OutProgression;                                    // 0x0308(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0360(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1417[0x7];                                     // 0x0361(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoPlayerManager_GetCharacterProgressionForProfile) == 0x000008, "Wrong alignment on MangoPlayerManager_GetCharacterProgressionForProfile");
static_assert(sizeof(MangoPlayerManager_GetCharacterProgressionForProfile) == 0x000368, "Wrong size on MangoPlayerManager_GetCharacterProgressionForProfile");
static_assert(offsetof(MangoPlayerManager_GetCharacterProgressionForProfile, CharacterClass) == 0x000000, "Member 'MangoPlayerManager_GetCharacterProgressionForProfile::CharacterClass' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetCharacterProgressionForProfile, Profile) == 0x000028, "Member 'MangoPlayerManager_GetCharacterProgressionForProfile::Profile' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetCharacterProgressionForProfile, OutProgression) == 0x000308, "Member 'MangoPlayerManager_GetCharacterProgressionForProfile::OutProgression' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetCharacterProgressionForProfile, ReturnValue) == 0x000360, "Member 'MangoPlayerManager_GetCharacterProgressionForProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetCMSNameForSkinCollection
// 0x0040 (0x0040 - 0x0000)
struct MangoPlayerManager_GetCMSNameForSkinCollection final
{
public:
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> SkinCollection;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0028(0x0018)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPlayerManager_GetCMSNameForSkinCollection) == 0x000008, "Wrong alignment on MangoPlayerManager_GetCMSNameForSkinCollection");
static_assert(sizeof(MangoPlayerManager_GetCMSNameForSkinCollection) == 0x000040, "Wrong size on MangoPlayerManager_GetCMSNameForSkinCollection");
static_assert(offsetof(MangoPlayerManager_GetCMSNameForSkinCollection, SkinCollection) == 0x000000, "Member 'MangoPlayerManager_GetCMSNameForSkinCollection::SkinCollection' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetCMSNameForSkinCollection, ReturnValue) == 0x000028, "Member 'MangoPlayerManager_GetCMSNameForSkinCollection::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetEquippedCharacterItemForLocalProfile
// 0x0088 (0x0088 - 0x0000)
struct MangoPlayerManager_GetEquippedCharacterItemForLocalProfile final
{
public:
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRanked;                                           // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1418[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoItem                             OutItem;                                           // 0x0030(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1419[0x7];                                     // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoPlayerManager_GetEquippedCharacterItemForLocalProfile) == 0x000008, "Wrong alignment on MangoPlayerManager_GetEquippedCharacterItemForLocalProfile");
static_assert(sizeof(MangoPlayerManager_GetEquippedCharacterItemForLocalProfile) == 0x000088, "Wrong size on MangoPlayerManager_GetEquippedCharacterItemForLocalProfile");
static_assert(offsetof(MangoPlayerManager_GetEquippedCharacterItemForLocalProfile, CharacterClass) == 0x000000, "Member 'MangoPlayerManager_GetEquippedCharacterItemForLocalProfile::CharacterClass' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedCharacterItemForLocalProfile, ItemType) == 0x000028, "Member 'MangoPlayerManager_GetEquippedCharacterItemForLocalProfile::ItemType' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedCharacterItemForLocalProfile, bRanked) == 0x000029, "Member 'MangoPlayerManager_GetEquippedCharacterItemForLocalProfile::bRanked' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedCharacterItemForLocalProfile, OutItem) == 0x000030, "Member 'MangoPlayerManager_GetEquippedCharacterItemForLocalProfile::OutItem' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedCharacterItemForLocalProfile, ReturnValue) == 0x000080, "Member 'MangoPlayerManager_GetEquippedCharacterItemForLocalProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetEquippedCharacterItemForProfile
// 0x0368 (0x0368 - 0x0000)
struct MangoPlayerManager_GetEquippedCharacterItemForProfile final
{
public:
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoProfile                          Profile;                                           // 0x0028(0x02E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x0308(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRanked;                                           // 0x0309(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141A[0x6];                                     // 0x030A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoItem                             OutItem;                                           // 0x0310(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0360(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141B[0x7];                                     // 0x0361(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoPlayerManager_GetEquippedCharacterItemForProfile) == 0x000008, "Wrong alignment on MangoPlayerManager_GetEquippedCharacterItemForProfile");
static_assert(sizeof(MangoPlayerManager_GetEquippedCharacterItemForProfile) == 0x000368, "Wrong size on MangoPlayerManager_GetEquippedCharacterItemForProfile");
static_assert(offsetof(MangoPlayerManager_GetEquippedCharacterItemForProfile, CharacterClass) == 0x000000, "Member 'MangoPlayerManager_GetEquippedCharacterItemForProfile::CharacterClass' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedCharacterItemForProfile, Profile) == 0x000028, "Member 'MangoPlayerManager_GetEquippedCharacterItemForProfile::Profile' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedCharacterItemForProfile, ItemType) == 0x000308, "Member 'MangoPlayerManager_GetEquippedCharacterItemForProfile::ItemType' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedCharacterItemForProfile, bRanked) == 0x000309, "Member 'MangoPlayerManager_GetEquippedCharacterItemForProfile::bRanked' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedCharacterItemForProfile, OutItem) == 0x000310, "Member 'MangoPlayerManager_GetEquippedCharacterItemForProfile::OutItem' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedCharacterItemForProfile, ReturnValue) == 0x000360, "Member 'MangoPlayerManager_GetEquippedCharacterItemForProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetEquippedProfileItem
// 0x0340 (0x0340 - 0x0000)
struct MangoPlayerManager_GetEquippedProfileItem final
{
public:
	struct FMangoProfile                          Profile;                                           // 0x0000(0x02E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x02E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141C[0x7];                                     // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoItem                             OutItem;                                           // 0x02E8(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0338(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141D[0x7];                                     // 0x0339(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoPlayerManager_GetEquippedProfileItem) == 0x000008, "Wrong alignment on MangoPlayerManager_GetEquippedProfileItem");
static_assert(sizeof(MangoPlayerManager_GetEquippedProfileItem) == 0x000340, "Wrong size on MangoPlayerManager_GetEquippedProfileItem");
static_assert(offsetof(MangoPlayerManager_GetEquippedProfileItem, Profile) == 0x000000, "Member 'MangoPlayerManager_GetEquippedProfileItem::Profile' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedProfileItem, ItemType) == 0x0002E0, "Member 'MangoPlayerManager_GetEquippedProfileItem::ItemType' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedProfileItem, OutItem) == 0x0002E8, "Member 'MangoPlayerManager_GetEquippedProfileItem::OutItem' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedProfileItem, ReturnValue) == 0x000338, "Member 'MangoPlayerManager_GetEquippedProfileItem::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetEquippedProfileItemForLocalProfile
// 0x0060 (0x0060 - 0x0000)
struct MangoPlayerManager_GetEquippedProfileItemForLocalProfile final
{
public:
	EMangoItemType                                ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoItem                             OutItem;                                           // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141F[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoPlayerManager_GetEquippedProfileItemForLocalProfile) == 0x000008, "Wrong alignment on MangoPlayerManager_GetEquippedProfileItemForLocalProfile");
static_assert(sizeof(MangoPlayerManager_GetEquippedProfileItemForLocalProfile) == 0x000060, "Wrong size on MangoPlayerManager_GetEquippedProfileItemForLocalProfile");
static_assert(offsetof(MangoPlayerManager_GetEquippedProfileItemForLocalProfile, ItemType) == 0x000000, "Member 'MangoPlayerManager_GetEquippedProfileItemForLocalProfile::ItemType' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedProfileItemForLocalProfile, OutItem) == 0x000008, "Member 'MangoPlayerManager_GetEquippedProfileItemForLocalProfile::OutItem' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedProfileItemForLocalProfile, ReturnValue) == 0x000058, "Member 'MangoPlayerManager_GetEquippedProfileItemForLocalProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetEquippedSkinForLocalProfile
// 0x0050 (0x0050 - 0x0000)
struct MangoPlayerManager_GetEquippedSkinForLocalProfile final
{
public:
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPlayerManager_GetEquippedSkinForLocalProfile) == 0x000008, "Wrong alignment on MangoPlayerManager_GetEquippedSkinForLocalProfile");
static_assert(sizeof(MangoPlayerManager_GetEquippedSkinForLocalProfile) == 0x000050, "Wrong size on MangoPlayerManager_GetEquippedSkinForLocalProfile");
static_assert(offsetof(MangoPlayerManager_GetEquippedSkinForLocalProfile, CharacterClass) == 0x000000, "Member 'MangoPlayerManager_GetEquippedSkinForLocalProfile::CharacterClass' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedSkinForLocalProfile, ReturnValue) == 0x000028, "Member 'MangoPlayerManager_GetEquippedSkinForLocalProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetEquippedSkinForProfile
// 0x0330 (0x0330 - 0x0000)
struct MangoPlayerManager_GetEquippedSkinForProfile final
{
public:
	struct FMangoProfile                          InProfile;                                         // 0x0000(0x02E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x02E0(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> ReturnValue;                                       // 0x0308(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPlayerManager_GetEquippedSkinForProfile) == 0x000008, "Wrong alignment on MangoPlayerManager_GetEquippedSkinForProfile");
static_assert(sizeof(MangoPlayerManager_GetEquippedSkinForProfile) == 0x000330, "Wrong size on MangoPlayerManager_GetEquippedSkinForProfile");
static_assert(offsetof(MangoPlayerManager_GetEquippedSkinForProfile, InProfile) == 0x000000, "Member 'MangoPlayerManager_GetEquippedSkinForProfile::InProfile' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedSkinForProfile, CharacterClass) == 0x0002E0, "Member 'MangoPlayerManager_GetEquippedSkinForProfile::CharacterClass' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetEquippedSkinForProfile, ReturnValue) == 0x000308, "Member 'MangoPlayerManager_GetEquippedSkinForProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetItemCurrentLevel
// 0x0058 (0x0058 - 0x0000)
struct MangoPlayerManager_GetItemCurrentLevel final
{
public:
	struct FMangoItem                             InItem;                                            // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1420[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoPlayerManager_GetItemCurrentLevel) == 0x000008, "Wrong alignment on MangoPlayerManager_GetItemCurrentLevel");
static_assert(sizeof(MangoPlayerManager_GetItemCurrentLevel) == 0x000058, "Wrong size on MangoPlayerManager_GetItemCurrentLevel");
static_assert(offsetof(MangoPlayerManager_GetItemCurrentLevel, InItem) == 0x000000, "Member 'MangoPlayerManager_GetItemCurrentLevel::InItem' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetItemCurrentLevel, ReturnValue) == 0x000050, "Member 'MangoPlayerManager_GetItemCurrentLevel::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetItemCurrentLevelForProfile
// 0x0338 (0x0338 - 0x0000)
struct MangoPlayerManager_GetItemCurrentLevelForProfile final
{
public:
	struct FMangoItem                             OutItem;                                           // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMangoProfile                          Profile;                                           // 0x0050(0x02E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0330(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1421[0x4];                                     // 0x0334(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoPlayerManager_GetItemCurrentLevelForProfile) == 0x000008, "Wrong alignment on MangoPlayerManager_GetItemCurrentLevelForProfile");
static_assert(sizeof(MangoPlayerManager_GetItemCurrentLevelForProfile) == 0x000338, "Wrong size on MangoPlayerManager_GetItemCurrentLevelForProfile");
static_assert(offsetof(MangoPlayerManager_GetItemCurrentLevelForProfile, OutItem) == 0x000000, "Member 'MangoPlayerManager_GetItemCurrentLevelForProfile::OutItem' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetItemCurrentLevelForProfile, Profile) == 0x000050, "Member 'MangoPlayerManager_GetItemCurrentLevelForProfile::Profile' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetItemCurrentLevelForProfile, ReturnValue) == 0x000330, "Member 'MangoPlayerManager_GetItemCurrentLevelForProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetItemCurrentProgress
// 0x0058 (0x0058 - 0x0000)
struct MangoPlayerManager_GetItemCurrentProgress final
{
public:
	struct FMangoItem                             InItem;                                            // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1422[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoPlayerManager_GetItemCurrentProgress) == 0x000008, "Wrong alignment on MangoPlayerManager_GetItemCurrentProgress");
static_assert(sizeof(MangoPlayerManager_GetItemCurrentProgress) == 0x000058, "Wrong size on MangoPlayerManager_GetItemCurrentProgress");
static_assert(offsetof(MangoPlayerManager_GetItemCurrentProgress, InItem) == 0x000000, "Member 'MangoPlayerManager_GetItemCurrentProgress::InItem' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetItemCurrentProgress, ReturnValue) == 0x000050, "Member 'MangoPlayerManager_GetItemCurrentProgress::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetLinkedOriginAccountName
// 0x0010 (0x0010 - 0x0000)
struct MangoPlayerManager_GetLinkedOriginAccountName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPlayerManager_GetLinkedOriginAccountName) == 0x000008, "Wrong alignment on MangoPlayerManager_GetLinkedOriginAccountName");
static_assert(sizeof(MangoPlayerManager_GetLinkedOriginAccountName) == 0x000010, "Wrong size on MangoPlayerManager_GetLinkedOriginAccountName");
static_assert(offsetof(MangoPlayerManager_GetLinkedOriginAccountName, ReturnValue) == 0x000000, "Member 'MangoPlayerManager_GetLinkedOriginAccountName::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetLocalProfileOnboardingState
// 0x0004 (0x0004 - 0x0000)
struct MangoPlayerManager_GetLocalProfileOnboardingState final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPlayerManager_GetLocalProfileOnboardingState) == 0x000004, "Wrong alignment on MangoPlayerManager_GetLocalProfileOnboardingState");
static_assert(sizeof(MangoPlayerManager_GetLocalProfileOnboardingState) == 0x000004, "Wrong size on MangoPlayerManager_GetLocalProfileOnboardingState");
static_assert(offsetof(MangoPlayerManager_GetLocalProfileOnboardingState, ReturnValue) == 0x000000, "Member 'MangoPlayerManager_GetLocalProfileOnboardingState::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetLocalProfilePlaylistRank
// 0x0044 (0x0044 - 0x0000)
struct MangoPlayerManager_GetLocalProfilePlaylistRank final
{
public:
	struct FGuid                                  InPlaylistId;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlaylistRank                          OutPlaylistRank;                                   // 0x0010(0x0030)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1423[0x3];                                     // 0x0041(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoPlayerManager_GetLocalProfilePlaylistRank) == 0x000004, "Wrong alignment on MangoPlayerManager_GetLocalProfilePlaylistRank");
static_assert(sizeof(MangoPlayerManager_GetLocalProfilePlaylistRank) == 0x000044, "Wrong size on MangoPlayerManager_GetLocalProfilePlaylistRank");
static_assert(offsetof(MangoPlayerManager_GetLocalProfilePlaylistRank, InPlaylistId) == 0x000000, "Member 'MangoPlayerManager_GetLocalProfilePlaylistRank::InPlaylistId' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetLocalProfilePlaylistRank, OutPlaylistRank) == 0x000010, "Member 'MangoPlayerManager_GetLocalProfilePlaylistRank::OutPlaylistRank' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetLocalProfilePlaylistRank, ReturnValue) == 0x000040, "Member 'MangoPlayerManager_GetLocalProfilePlaylistRank::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetMangoId
// 0x0010 (0x0010 - 0x0000)
struct MangoPlayerManager_GetMangoId final
{
public:
	struct FMangoId                               ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPlayerManager_GetMangoId) == 0x000008, "Wrong alignment on MangoPlayerManager_GetMangoId");
static_assert(sizeof(MangoPlayerManager_GetMangoId) == 0x000010, "Wrong size on MangoPlayerManager_GetMangoId");
static_assert(offsetof(MangoPlayerManager_GetMangoId, ReturnValue) == 0x000000, "Member 'MangoPlayerManager_GetMangoId::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetMangoProfile
// 0x02E0 (0x02E0 - 0x0000)
struct MangoPlayerManager_GetMangoProfile final
{
public:
	struct FMangoProfile                          ReturnValue;                                       // 0x0000(0x02E0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPlayerManager_GetMangoProfile) == 0x000008, "Wrong alignment on MangoPlayerManager_GetMangoProfile");
static_assert(sizeof(MangoPlayerManager_GetMangoProfile) == 0x0002E0, "Wrong size on MangoPlayerManager_GetMangoProfile");
static_assert(offsetof(MangoPlayerManager_GetMangoProfile, ReturnValue) == 0x000000, "Member 'MangoPlayerManager_GetMangoProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetMangoProfileLastMatch
// 0x0070 (0x0070 - 0x0000)
struct MangoPlayerManager_GetMangoProfileLastMatch final
{
public:
	struct FMatchEnd                              OutMatchEnd;                                       // 0x0000(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1424[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoPlayerManager_GetMangoProfileLastMatch) == 0x000008, "Wrong alignment on MangoPlayerManager_GetMangoProfileLastMatch");
static_assert(sizeof(MangoPlayerManager_GetMangoProfileLastMatch) == 0x000070, "Wrong size on MangoPlayerManager_GetMangoProfileLastMatch");
static_assert(offsetof(MangoPlayerManager_GetMangoProfileLastMatch, OutMatchEnd) == 0x000000, "Member 'MangoPlayerManager_GetMangoProfileLastMatch::OutMatchEnd' has a wrong offset!");
static_assert(offsetof(MangoPlayerManager_GetMangoProfileLastMatch, ReturnValue) == 0x000068, "Member 'MangoPlayerManager_GetMangoProfileLastMatch::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.GetNewsViewed
// 0x0010 (0x0010 - 0x0000)
struct MangoPlayerManager_GetNewsViewed final
{
public:
	TArray<struct FGuid>                          OutNewsIds;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPlayerManager_GetNewsViewed) == 0x000008, "Wrong alignment on MangoPlayerManager_GetNewsViewed");
static_assert(sizeof(MangoPlayerManager_GetNewsViewed) == 0x000010, "Wrong size on MangoPlayerManager_GetNewsViewed");
static_assert(offsetof(MangoPlayerManager_GetNewsViewed, OutNewsIds) == 0x000000, "Member 'MangoPlayerManager_GetNewsViewed::OutNewsIds' has a wrong offset!");

// Function Mariner.MangoPlayerManager.IsActiveBlastPassAtMaxTier
// 0x0001 (0x0001 - 0x0000)
struct MangoPlayerManager_IsActiveBlastPassAtMaxTier final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPlayerManager_IsActiveBlastPassAtMaxTier) == 0x000001, "Wrong alignment on MangoPlayerManager_IsActiveBlastPassAtMaxTier");
static_assert(sizeof(MangoPlayerManager_IsActiveBlastPassAtMaxTier) == 0x000001, "Wrong size on MangoPlayerManager_IsActiveBlastPassAtMaxTier");
static_assert(offsetof(MangoPlayerManager_IsActiveBlastPassAtMaxTier, ReturnValue) == 0x000000, "Member 'MangoPlayerManager_IsActiveBlastPassAtMaxTier::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.IsActiveBlastPassSplashViewed
// 0x0001 (0x0001 - 0x0000)
struct MangoPlayerManager_IsActiveBlastPassSplashViewed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPlayerManager_IsActiveBlastPassSplashViewed) == 0x000001, "Wrong alignment on MangoPlayerManager_IsActiveBlastPassSplashViewed");
static_assert(sizeof(MangoPlayerManager_IsActiveBlastPassSplashViewed) == 0x000001, "Wrong size on MangoPlayerManager_IsActiveBlastPassSplashViewed");
static_assert(offsetof(MangoPlayerManager_IsActiveBlastPassSplashViewed, ReturnValue) == 0x000000, "Member 'MangoPlayerManager_IsActiveBlastPassSplashViewed::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.IsLocalProfileAdvertStateActive
// 0x0001 (0x0001 - 0x0000)
struct MangoPlayerManager_IsLocalProfileAdvertStateActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPlayerManager_IsLocalProfileAdvertStateActive) == 0x000001, "Wrong alignment on MangoPlayerManager_IsLocalProfileAdvertStateActive");
static_assert(sizeof(MangoPlayerManager_IsLocalProfileAdvertStateActive) == 0x000001, "Wrong size on MangoPlayerManager_IsLocalProfileAdvertStateActive");
static_assert(offsetof(MangoPlayerManager_IsLocalProfileAdvertStateActive, ReturnValue) == 0x000000, "Member 'MangoPlayerManager_IsLocalProfileAdvertStateActive::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPlayerManager.IsLocalProfileOnboardingActive
// 0x0001 (0x0001 - 0x0000)
struct MangoPlayerManager_IsLocalProfileOnboardingActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPlayerManager_IsLocalProfileOnboardingActive) == 0x000001, "Wrong alignment on MangoPlayerManager_IsLocalProfileOnboardingActive");
static_assert(sizeof(MangoPlayerManager_IsLocalProfileOnboardingActive) == 0x000001, "Wrong size on MangoPlayerManager_IsLocalProfileOnboardingActive");
static_assert(offsetof(MangoPlayerManager_IsLocalProfileOnboardingActive, ReturnValue) == 0x000000, "Member 'MangoPlayerManager_IsLocalProfileOnboardingActive::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUserWidget.PlayAudio
// 0x0008 (0x0008 - 0x0000)
struct MarinerUserWidget_PlayAudio final
{
public:
	class UAkAudioEvent*                          Event;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUserWidget_PlayAudio) == 0x000008, "Wrong alignment on MarinerUserWidget_PlayAudio");
static_assert(sizeof(MarinerUserWidget_PlayAudio) == 0x000008, "Wrong size on MarinerUserWidget_PlayAudio");
static_assert(offsetof(MarinerUserWidget_PlayAudio, Event) == 0x000000, "Member 'MarinerUserWidget_PlayAudio::Event' has a wrong offset!");

// Function Mariner.MarinerUserWidget.PlayManagedAnimation
// 0x0020 (0x0020 - 0x0000)
struct MarinerUserWidget_PlayManagedAnimation final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAtTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142A[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUMGSequencePlayer*                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUserWidget_PlayManagedAnimation) == 0x000008, "Wrong alignment on MarinerUserWidget_PlayManagedAnimation");
static_assert(sizeof(MarinerUserWidget_PlayManagedAnimation) == 0x000020, "Wrong size on MarinerUserWidget_PlayManagedAnimation");
static_assert(offsetof(MarinerUserWidget_PlayManagedAnimation, InAnimation) == 0x000000, "Member 'MarinerUserWidget_PlayManagedAnimation::InAnimation' has a wrong offset!");
static_assert(offsetof(MarinerUserWidget_PlayManagedAnimation, StartAtTime) == 0x000008, "Member 'MarinerUserWidget_PlayManagedAnimation::StartAtTime' has a wrong offset!");
static_assert(offsetof(MarinerUserWidget_PlayManagedAnimation, NumLoopsToPlay) == 0x00000C, "Member 'MarinerUserWidget_PlayManagedAnimation::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(MarinerUserWidget_PlayManagedAnimation, PlayMode) == 0x000010, "Member 'MarinerUserWidget_PlayManagedAnimation::PlayMode' has a wrong offset!");
static_assert(offsetof(MarinerUserWidget_PlayManagedAnimation, PlaybackSpeed) == 0x000014, "Member 'MarinerUserWidget_PlayManagedAnimation::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(MarinerUserWidget_PlayManagedAnimation, ReturnValue) == 0x000018, "Member 'MarinerUserWidget_PlayManagedAnimation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUserWidget.ScrollIntoView
// 0x0001 (0x0001 - 0x0000)
struct MarinerUserWidget_ScrollIntoView final
{
public:
	bool                                          bAnimate;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUserWidget_ScrollIntoView) == 0x000001, "Wrong alignment on MarinerUserWidget_ScrollIntoView");
static_assert(sizeof(MarinerUserWidget_ScrollIntoView) == 0x000001, "Wrong size on MarinerUserWidget_ScrollIntoView");
static_assert(offsetof(MarinerUserWidget_ScrollIntoView, bAnimate) == 0x000000, "Member 'MarinerUserWidget_ScrollIntoView::bAnimate' has a wrong offset!");

// Function Mariner.MarinerUserWidget.SetActiveInputWidget
// 0x0018 (0x0018 - 0x0000)
struct MarinerUserWidget_SetActiveInputWidget final
{
public:
	TScriptInterface<class IMarinerInputInterface> InputWidget;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bGiveInputFocus;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUserWidget_SetActiveInputWidget) == 0x000008, "Wrong alignment on MarinerUserWidget_SetActiveInputWidget");
static_assert(sizeof(MarinerUserWidget_SetActiveInputWidget) == 0x000018, "Wrong size on MarinerUserWidget_SetActiveInputWidget");
static_assert(offsetof(MarinerUserWidget_SetActiveInputWidget, InputWidget) == 0x000000, "Member 'MarinerUserWidget_SetActiveInputWidget::InputWidget' has a wrong offset!");
static_assert(offsetof(MarinerUserWidget_SetActiveInputWidget, bGiveInputFocus) == 0x000010, "Member 'MarinerUserWidget_SetActiveInputWidget::bGiveInputFocus' has a wrong offset!");

// Function Mariner.MarinerUserWidget.SetManagedVisibility
// 0x0002 (0x0002 - 0x0000)
struct MarinerUserWidget_SetManagedVisibility final
{
public:
	EManagedVisibilityState                       InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              InVisibility;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUserWidget_SetManagedVisibility) == 0x000001, "Wrong alignment on MarinerUserWidget_SetManagedVisibility");
static_assert(sizeof(MarinerUserWidget_SetManagedVisibility) == 0x000002, "Wrong size on MarinerUserWidget_SetManagedVisibility");
static_assert(offsetof(MarinerUserWidget_SetManagedVisibility, InState) == 0x000000, "Member 'MarinerUserWidget_SetManagedVisibility::InState' has a wrong offset!");
static_assert(offsetof(MarinerUserWidget_SetManagedVisibility, InVisibility) == 0x000001, "Member 'MarinerUserWidget_SetManagedVisibility::InVisibility' has a wrong offset!");

// Function Mariner.MarinerUserWidget.GetActiveInputType
// 0x0001 (0x0001 - 0x0000)
struct MarinerUserWidget_GetActiveInputType final
{
public:
	EPlayerInputType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUserWidget_GetActiveInputType) == 0x000001, "Wrong alignment on MarinerUserWidget_GetActiveInputType");
static_assert(sizeof(MarinerUserWidget_GetActiveInputType) == 0x000001, "Wrong size on MarinerUserWidget_GetActiveInputType");
static_assert(offsetof(MarinerUserWidget_GetActiveInputType, ReturnValue) == 0x000000, "Member 'MarinerUserWidget_GetActiveInputType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUserWidget.GetMarinerGameInstance
// 0x0008 (0x0008 - 0x0000)
struct MarinerUserWidget_GetMarinerGameInstance final
{
public:
	class UMarinerGameInstance*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUserWidget_GetMarinerGameInstance) == 0x000008, "Wrong alignment on MarinerUserWidget_GetMarinerGameInstance");
static_assert(sizeof(MarinerUserWidget_GetMarinerGameInstance) == 0x000008, "Wrong size on MarinerUserWidget_GetMarinerGameInstance");
static_assert(offsetof(MarinerUserWidget_GetMarinerGameInstance, ReturnValue) == 0x000000, "Member 'MarinerUserWidget_GetMarinerGameInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUserWidget.GetMenuManager
// 0x0008 (0x0008 - 0x0000)
struct MarinerUserWidget_GetMenuManager final
{
public:
	class UMarinerMenuManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUserWidget_GetMenuManager) == 0x000008, "Wrong alignment on MarinerUserWidget_GetMenuManager");
static_assert(sizeof(MarinerUserWidget_GetMenuManager) == 0x000008, "Wrong size on MarinerUserWidget_GetMenuManager");
static_assert(offsetof(MarinerUserWidget_GetMenuManager, ReturnValue) == 0x000000, "Member 'MarinerUserWidget_GetMenuManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUserWidget.GetOwningLayer
// 0x0008 (0x0008 - 0x0000)
struct MarinerUserWidget_GetOwningLayer final
{
public:
	class UMarinerMenuStackLayer*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUserWidget_GetOwningLayer) == 0x000008, "Wrong alignment on MarinerUserWidget_GetOwningLayer");
static_assert(sizeof(MarinerUserWidget_GetOwningLayer) == 0x000008, "Wrong size on MarinerUserWidget_GetOwningLayer");
static_assert(offsetof(MarinerUserWidget_GetOwningLayer, ReturnValue) == 0x000000, "Member 'MarinerUserWidget_GetOwningLayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSettingBase.GetBackgroundColor
// 0x0014 (0x0014 - 0x0000)
struct MarinerSettingBase_GetBackgroundColor final
{
public:
	struct FLinearColor                           OutColor;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142F[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerSettingBase_GetBackgroundColor) == 0x000004, "Wrong alignment on MarinerSettingBase_GetBackgroundColor");
static_assert(sizeof(MarinerSettingBase_GetBackgroundColor) == 0x000014, "Wrong size on MarinerSettingBase_GetBackgroundColor");
static_assert(offsetof(MarinerSettingBase_GetBackgroundColor, OutColor) == 0x000000, "Member 'MarinerSettingBase_GetBackgroundColor::OutColor' has a wrong offset!");
static_assert(offsetof(MarinerSettingBase_GetBackgroundColor, ReturnValue) == 0x000010, "Member 'MarinerSettingBase_GetBackgroundColor::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSettingBase.GetLabelColor
// 0x0014 (0x0014 - 0x0000)
struct MarinerSettingBase_GetLabelColor final
{
public:
	struct FLinearColor                           OutColor;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1430[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerSettingBase_GetLabelColor) == 0x000004, "Wrong alignment on MarinerSettingBase_GetLabelColor");
static_assert(sizeof(MarinerSettingBase_GetLabelColor) == 0x000014, "Wrong size on MarinerSettingBase_GetLabelColor");
static_assert(offsetof(MarinerSettingBase_GetLabelColor, OutColor) == 0x000000, "Member 'MarinerSettingBase_GetLabelColor::OutColor' has a wrong offset!");
static_assert(offsetof(MarinerSettingBase_GetLabelColor, ReturnValue) == 0x000010, "Member 'MarinerSettingBase_GetLabelColor::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSettingBase.SetIsInteractable
// 0x0001 (0x0001 - 0x0000)
struct MarinerSettingBase_SetIsInteractable final
{
public:
	bool                                          bInIsInteractable;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingBase_SetIsInteractable) == 0x000001, "Wrong alignment on MarinerSettingBase_SetIsInteractable");
static_assert(sizeof(MarinerSettingBase_SetIsInteractable) == 0x000001, "Wrong size on MarinerSettingBase_SetIsInteractable");
static_assert(offsetof(MarinerSettingBase_SetIsInteractable, bInIsInteractable) == 0x000000, "Member 'MarinerSettingBase_SetIsInteractable::bInIsInteractable' has a wrong offset!");

// Function Mariner.MarinerSettingBase.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct MarinerSettingBase_SetLabel final
{
public:
	class FText                                   LabelIn;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingBase_SetLabel) == 0x000008, "Wrong alignment on MarinerSettingBase_SetLabel");
static_assert(sizeof(MarinerSettingBase_SetLabel) == 0x000018, "Wrong size on MarinerSettingBase_SetLabel");
static_assert(offsetof(MarinerSettingBase_SetLabel, LabelIn) == 0x000000, "Member 'MarinerSettingBase_SetLabel::LabelIn' has a wrong offset!");

// Function Mariner.MarinerSettingBase.SetLabelPlatform
// 0x0078 (0x0078 - 0x0000)
struct MarinerSettingBase_SetLabelPlatform final
{
public:
	struct FMarinerPlatformText                   LabelIn;                                           // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingBase_SetLabelPlatform) == 0x000008, "Wrong alignment on MarinerSettingBase_SetLabelPlatform");
static_assert(sizeof(MarinerSettingBase_SetLabelPlatform) == 0x000078, "Wrong size on MarinerSettingBase_SetLabelPlatform");
static_assert(offsetof(MarinerSettingBase_SetLabelPlatform, LabelIn) == 0x000000, "Member 'MarinerSettingBase_SetLabelPlatform::LabelIn' has a wrong offset!");

// Function Mariner.MarinerSettingBase.SetUnviewed
// 0x0001 (0x0001 - 0x0000)
struct MarinerSettingBase_SetUnviewed final
{
public:
	bool                                          bUnviewed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingBase_SetUnviewed) == 0x000001, "Wrong alignment on MarinerSettingBase_SetUnviewed");
static_assert(sizeof(MarinerSettingBase_SetUnviewed) == 0x000001, "Wrong size on MarinerSettingBase_SetUnviewed");
static_assert(offsetof(MarinerSettingBase_SetUnviewed, bUnviewed) == 0x000000, "Member 'MarinerSettingBase_SetUnviewed::bUnviewed' has a wrong offset!");

// Function Mariner.MarinerSettingBase.GetAdditionalDescription
// 0x0018 (0x0018 - 0x0000)
struct MarinerSettingBase_GetAdditionalDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingBase_GetAdditionalDescription) == 0x000008, "Wrong alignment on MarinerSettingBase_GetAdditionalDescription");
static_assert(sizeof(MarinerSettingBase_GetAdditionalDescription) == 0x000018, "Wrong size on MarinerSettingBase_GetAdditionalDescription");
static_assert(offsetof(MarinerSettingBase_GetAdditionalDescription, ReturnValue) == 0x000000, "Member 'MarinerSettingBase_GetAdditionalDescription::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSettingBase.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerSettingBase_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingBase_IsEnabled) == 0x000001, "Wrong alignment on MarinerSettingBase_IsEnabled");
static_assert(sizeof(MarinerSettingBase_IsEnabled) == 0x000001, "Wrong size on MarinerSettingBase_IsEnabled");
static_assert(offsetof(MarinerSettingBase_IsEnabled, ReturnValue) == 0x000000, "Member 'MarinerSettingBase_IsEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSettingBase.IsHighlighted
// 0x0001 (0x0001 - 0x0000)
struct MarinerSettingBase_IsHighlighted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingBase_IsHighlighted) == 0x000001, "Wrong alignment on MarinerSettingBase_IsHighlighted");
static_assert(sizeof(MarinerSettingBase_IsHighlighted) == 0x000001, "Wrong size on MarinerSettingBase_IsHighlighted");
static_assert(offsetof(MarinerSettingBase_IsHighlighted, ReturnValue) == 0x000000, "Member 'MarinerSettingBase_IsHighlighted::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSettingBase.IsUnviewed
// 0x0001 (0x0001 - 0x0000)
struct MarinerSettingBase_IsUnviewed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingBase_IsUnviewed) == 0x000001, "Wrong alignment on MarinerSettingBase_IsUnviewed");
static_assert(sizeof(MarinerSettingBase_IsUnviewed) == 0x000001, "Wrong size on MarinerSettingBase_IsUnviewed");
static_assert(offsetof(MarinerSettingBase_IsUnviewed, ReturnValue) == 0x000000, "Member 'MarinerSettingBase_IsUnviewed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSettingComboBox.AddOption
// 0x0018 (0x0018 - 0x0000)
struct MarinerSettingComboBox_AddOption final
{
public:
	class FText                                   OptionText;                                        // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingComboBox_AddOption) == 0x000008, "Wrong alignment on MarinerSettingComboBox_AddOption");
static_assert(sizeof(MarinerSettingComboBox_AddOption) == 0x000018, "Wrong size on MarinerSettingComboBox_AddOption");
static_assert(offsetof(MarinerSettingComboBox_AddOption, OptionText) == 0x000000, "Member 'MarinerSettingComboBox_AddOption::OptionText' has a wrong offset!");

// Function Mariner.MarinerSettingComboBox.AddOptionWithCallback
// 0x0028 (0x0028 - 0x0000)
struct MarinerSettingComboBox_AddOptionWithCallback final
{
public:
	class FText                                   OptionText;                                        // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SelectedCallback;                                  // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingComboBox_AddOptionWithCallback) == 0x000008, "Wrong alignment on MarinerSettingComboBox_AddOptionWithCallback");
static_assert(sizeof(MarinerSettingComboBox_AddOptionWithCallback) == 0x000028, "Wrong size on MarinerSettingComboBox_AddOptionWithCallback");
static_assert(offsetof(MarinerSettingComboBox_AddOptionWithCallback, OptionText) == 0x000000, "Member 'MarinerSettingComboBox_AddOptionWithCallback::OptionText' has a wrong offset!");
static_assert(offsetof(MarinerSettingComboBox_AddOptionWithCallback, SelectedCallback) == 0x000018, "Member 'MarinerSettingComboBox_AddOptionWithCallback::SelectedCallback' has a wrong offset!");

// Function Mariner.MarinerSettingComboBox.OnSelectionIndexChangedCallback
// 0x0004 (0x0004 - 0x0000)
struct MarinerSettingComboBox_OnSelectionIndexChangedCallback final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingComboBox_OnSelectionIndexChangedCallback) == 0x000004, "Wrong alignment on MarinerSettingComboBox_OnSelectionIndexChangedCallback");
static_assert(sizeof(MarinerSettingComboBox_OnSelectionIndexChangedCallback) == 0x000004, "Wrong size on MarinerSettingComboBox_OnSelectionIndexChangedCallback");
static_assert(offsetof(MarinerSettingComboBox_OnSelectionIndexChangedCallback, SelectedIndex) == 0x000000, "Member 'MarinerSettingComboBox_OnSelectionIndexChangedCallback::SelectedIndex' has a wrong offset!");

// Function Mariner.MarinerSettingComboBox.OnSettingDropdownOpened
// 0x0001 (0x0001 - 0x0000)
struct MarinerSettingComboBox_OnSettingDropdownOpened final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingComboBox_OnSettingDropdownOpened) == 0x000001, "Wrong alignment on MarinerSettingComboBox_OnSettingDropdownOpened");
static_assert(sizeof(MarinerSettingComboBox_OnSettingDropdownOpened) == 0x000001, "Wrong size on MarinerSettingComboBox_OnSettingDropdownOpened");
static_assert(offsetof(MarinerSettingComboBox_OnSettingDropdownOpened, bOpen) == 0x000000, "Member 'MarinerSettingComboBox_OnSettingDropdownOpened::bOpen' has a wrong offset!");

// Function Mariner.MarinerSettingComboBox.SetSelectedIndex
// 0x0008 (0x0008 - 0x0000)
struct MarinerSettingComboBox_SetSelectedIndex final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBroadcast;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1433[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerSettingComboBox_SetSelectedIndex) == 0x000004, "Wrong alignment on MarinerSettingComboBox_SetSelectedIndex");
static_assert(sizeof(MarinerSettingComboBox_SetSelectedIndex) == 0x000008, "Wrong size on MarinerSettingComboBox_SetSelectedIndex");
static_assert(offsetof(MarinerSettingComboBox_SetSelectedIndex, Value) == 0x000000, "Member 'MarinerSettingComboBox_SetSelectedIndex::Value' has a wrong offset!");
static_assert(offsetof(MarinerSettingComboBox_SetSelectedIndex, bBroadcast) == 0x000004, "Member 'MarinerSettingComboBox_SetSelectedIndex::bBroadcast' has a wrong offset!");
static_assert(offsetof(MarinerSettingComboBox_SetSelectedIndex, bAnimate) == 0x000005, "Member 'MarinerSettingComboBox_SetSelectedIndex::bAnimate' has a wrong offset!");

// Function Mariner.MarinerSettingComboBox.GetAssets
// 0x0040 (0x0040 - 0x0000)
struct MarinerSettingComboBox_GetAssets final
{
public:
	struct FMarinerSettingComboBoxAssets          ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingComboBox_GetAssets) == 0x000008, "Wrong alignment on MarinerSettingComboBox_GetAssets");
static_assert(sizeof(MarinerSettingComboBox_GetAssets) == 0x000040, "Wrong size on MarinerSettingComboBox_GetAssets");
static_assert(offsetof(MarinerSettingComboBox_GetAssets, ReturnValue) == 0x000000, "Member 'MarinerSettingComboBox_GetAssets::ReturnValue' has a wrong offset!");

// Function Mariner.MangoConnectionManager.Get
// 0x0010 (0x0010 - 0x0000)
struct MangoConnectionManager_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMangoConnectionManager*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoConnectionManager_Get) == 0x000008, "Wrong alignment on MangoConnectionManager_Get");
static_assert(sizeof(MangoConnectionManager_Get) == 0x000010, "Wrong size on MangoConnectionManager_Get");
static_assert(offsetof(MangoConnectionManager_Get, WorldContextObject) == 0x000000, "Member 'MangoConnectionManager_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MangoConnectionManager_Get, ReturnValue) == 0x000008, "Member 'MangoConnectionManager_Get::ReturnValue' has a wrong offset!");

// Function Mariner.MangoConnectionManager.GetGameVersion
// 0x0001 (0x0001 - 0x0000)
struct MangoConnectionManager_GetGameVersion final
{
public:
	EMarinerGameVersion                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoConnectionManager_GetGameVersion) == 0x000001, "Wrong alignment on MangoConnectionManager_GetGameVersion");
static_assert(sizeof(MangoConnectionManager_GetGameVersion) == 0x000001, "Wrong size on MangoConnectionManager_GetGameVersion");
static_assert(offsetof(MangoConnectionManager_GetGameVersion, ReturnValue) == 0x000000, "Member 'MangoConnectionManager_GetGameVersion::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPregameStateMachine.GetFirstState
// 0x0008 (0x0008 - 0x0000)
struct MarinerPregameStateMachine_GetFirstState final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPregameStateMachine_GetFirstState) == 0x000004, "Wrong alignment on MarinerPregameStateMachine_GetFirstState");
static_assert(sizeof(MarinerPregameStateMachine_GetFirstState) == 0x000008, "Wrong size on MarinerPregameStateMachine_GetFirstState");
static_assert(offsetof(MarinerPregameStateMachine_GetFirstState, ReturnValue) == 0x000000, "Member 'MarinerPregameStateMachine_GetFirstState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPregameStateMachine.GetLastState
// 0x0008 (0x0008 - 0x0000)
struct MarinerPregameStateMachine_GetLastState final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPregameStateMachine_GetLastState) == 0x000004, "Wrong alignment on MarinerPregameStateMachine_GetLastState");
static_assert(sizeof(MarinerPregameStateMachine_GetLastState) == 0x000008, "Wrong size on MarinerPregameStateMachine_GetLastState");
static_assert(offsetof(MarinerPregameStateMachine_GetLastState, ReturnValue) == 0x000000, "Member 'MarinerPregameStateMachine_GetLastState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.BP_OnGameplayTagApplied
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbilityIcon_BP_OnGameplayTagApplied final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityIcon_BP_OnGameplayTagApplied) == 0x000004, "Wrong alignment on MarinerAbilityIcon_BP_OnGameplayTagApplied");
static_assert(sizeof(MarinerAbilityIcon_BP_OnGameplayTagApplied) == 0x000008, "Wrong size on MarinerAbilityIcon_BP_OnGameplayTagApplied");
static_assert(offsetof(MarinerAbilityIcon_BP_OnGameplayTagApplied, GameplayTag) == 0x000000, "Member 'MarinerAbilityIcon_BP_OnGameplayTagApplied::GameplayTag' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.BP_OnGameplayTagRemoved
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbilityIcon_BP_OnGameplayTagRemoved final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityIcon_BP_OnGameplayTagRemoved) == 0x000004, "Wrong alignment on MarinerAbilityIcon_BP_OnGameplayTagRemoved");
static_assert(sizeof(MarinerAbilityIcon_BP_OnGameplayTagRemoved) == 0x000008, "Wrong size on MarinerAbilityIcon_BP_OnGameplayTagRemoved");
static_assert(offsetof(MarinerAbilityIcon_BP_OnGameplayTagRemoved, GameplayTag) == 0x000000, "Member 'MarinerAbilityIcon_BP_OnGameplayTagRemoved::GameplayTag' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.OnAbilityEnded
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbilityIcon_OnAbilityEnded final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityIcon_OnAbilityEnded) == 0x000001, "Wrong alignment on MarinerAbilityIcon_OnAbilityEnded");
static_assert(sizeof(MarinerAbilityIcon_OnAbilityEnded) == 0x000001, "Wrong size on MarinerAbilityIcon_OnAbilityEnded");
static_assert(offsetof(MarinerAbilityIcon_OnAbilityEnded, bWasCancelled) == 0x000000, "Member 'MarinerAbilityIcon_OnAbilityEnded::bWasCancelled' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.OnAbilityFailed
// 0x0028 (0x0028 - 0x0000)
struct MarinerAbilityIcon_OnAbilityFailed final
{
public:
	class UGameplayAbility*                       Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  FailTags;                                          // 0x0008(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityIcon_OnAbilityFailed) == 0x000008, "Wrong alignment on MarinerAbilityIcon_OnAbilityFailed");
static_assert(sizeof(MarinerAbilityIcon_OnAbilityFailed) == 0x000028, "Wrong size on MarinerAbilityIcon_OnAbilityFailed");
static_assert(offsetof(MarinerAbilityIcon_OnAbilityFailed, Ability) == 0x000000, "Member 'MarinerAbilityIcon_OnAbilityFailed::Ability' has a wrong offset!");
static_assert(offsetof(MarinerAbilityIcon_OnAbilityFailed, FailTags) == 0x000008, "Member 'MarinerAbilityIcon_OnAbilityFailed::FailTags' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.OnAlternateAbilityIconUpdated
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilityIcon_OnAlternateAbilityIconUpdated final
{
public:
	bool                                          bInUseAlternateIcon;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_143A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerAbility>            InAbilityClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityIcon_OnAlternateAbilityIconUpdated) == 0x000008, "Wrong alignment on MarinerAbilityIcon_OnAlternateAbilityIconUpdated");
static_assert(sizeof(MarinerAbilityIcon_OnAlternateAbilityIconUpdated) == 0x000010, "Wrong size on MarinerAbilityIcon_OnAlternateAbilityIconUpdated");
static_assert(offsetof(MarinerAbilityIcon_OnAlternateAbilityIconUpdated, bInUseAlternateIcon) == 0x000000, "Member 'MarinerAbilityIcon_OnAlternateAbilityIconUpdated::bInUseAlternateIcon' has a wrong offset!");
static_assert(offsetof(MarinerAbilityIcon_OnAlternateAbilityIconUpdated, InAbilityClass) == 0x000008, "Member 'MarinerAbilityIcon_OnAlternateAbilityIconUpdated::InAbilityClass' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.OnArenaCurrentStateChanged
// 0x0002 (0x0002 - 0x0000)
struct MarinerAbilityIcon_OnArenaCurrentStateChanged final
{
public:
	EMarinerArenaReturnState                      PrevState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerArenaReturnState                      NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityIcon_OnArenaCurrentStateChanged) == 0x000001, "Wrong alignment on MarinerAbilityIcon_OnArenaCurrentStateChanged");
static_assert(sizeof(MarinerAbilityIcon_OnArenaCurrentStateChanged) == 0x000002, "Wrong size on MarinerAbilityIcon_OnArenaCurrentStateChanged");
static_assert(offsetof(MarinerAbilityIcon_OnArenaCurrentStateChanged, PrevState) == 0x000000, "Member 'MarinerAbilityIcon_OnArenaCurrentStateChanged::PrevState' has a wrong offset!");
static_assert(offsetof(MarinerAbilityIcon_OnArenaCurrentStateChanged, NewState) == 0x000001, "Member 'MarinerAbilityIcon_OnArenaCurrentStateChanged::NewState' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.OnCharacterGameplayTagApplied
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilityIcon_OnCharacterGameplayTagApplied final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityIcon_OnCharacterGameplayTagApplied) == 0x000008, "Wrong alignment on MarinerAbilityIcon_OnCharacterGameplayTagApplied");
static_assert(sizeof(MarinerAbilityIcon_OnCharacterGameplayTagApplied) == 0x000010, "Wrong size on MarinerAbilityIcon_OnCharacterGameplayTagApplied");
static_assert(offsetof(MarinerAbilityIcon_OnCharacterGameplayTagApplied, Character) == 0x000000, "Member 'MarinerAbilityIcon_OnCharacterGameplayTagApplied::Character' has a wrong offset!");
static_assert(offsetof(MarinerAbilityIcon_OnCharacterGameplayTagApplied, GameplayTag) == 0x000008, "Member 'MarinerAbilityIcon_OnCharacterGameplayTagApplied::GameplayTag' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.OnCharacterGameplayTagRemoved
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilityIcon_OnCharacterGameplayTagRemoved final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityIcon_OnCharacterGameplayTagRemoved) == 0x000008, "Wrong alignment on MarinerAbilityIcon_OnCharacterGameplayTagRemoved");
static_assert(sizeof(MarinerAbilityIcon_OnCharacterGameplayTagRemoved) == 0x000010, "Wrong size on MarinerAbilityIcon_OnCharacterGameplayTagRemoved");
static_assert(offsetof(MarinerAbilityIcon_OnCharacterGameplayTagRemoved, Character) == 0x000000, "Member 'MarinerAbilityIcon_OnCharacterGameplayTagRemoved::Character' has a wrong offset!");
static_assert(offsetof(MarinerAbilityIcon_OnCharacterGameplayTagRemoved, GameplayTag) == 0x000008, "Member 'MarinerAbilityIcon_OnCharacterGameplayTagRemoved::GameplayTag' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.OnCooldownTimeChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbilityIcon_OnCooldownTimeChanged final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityIcon_OnCooldownTimeChanged) == 0x000004, "Wrong alignment on MarinerAbilityIcon_OnCooldownTimeChanged");
static_assert(sizeof(MarinerAbilityIcon_OnCooldownTimeChanged) == 0x000008, "Wrong size on MarinerAbilityIcon_OnCooldownTimeChanged");
static_assert(offsetof(MarinerAbilityIcon_OnCooldownTimeChanged, TimeRemaining) == 0x000000, "Member 'MarinerAbilityIcon_OnCooldownTimeChanged::TimeRemaining' has a wrong offset!");
static_assert(offsetof(MarinerAbilityIcon_OnCooldownTimeChanged, Duration) == 0x000004, "Member 'MarinerAbilityIcon_OnCooldownTimeChanged::Duration' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.OnDropOrThrowRelease
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilityIcon_OnDropOrThrowRelease final
{
public:
	class AMarinerCharacter*                      DroppingCharacter;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerItemSlot                              ItemSlot;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_143B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbilityIcon_OnDropOrThrowRelease) == 0x000008, "Wrong alignment on MarinerAbilityIcon_OnDropOrThrowRelease");
static_assert(sizeof(MarinerAbilityIcon_OnDropOrThrowRelease) == 0x000010, "Wrong size on MarinerAbilityIcon_OnDropOrThrowRelease");
static_assert(offsetof(MarinerAbilityIcon_OnDropOrThrowRelease, DroppingCharacter) == 0x000000, "Member 'MarinerAbilityIcon_OnDropOrThrowRelease::DroppingCharacter' has a wrong offset!");
static_assert(offsetof(MarinerAbilityIcon_OnDropOrThrowRelease, ItemSlot) == 0x000008, "Member 'MarinerAbilityIcon_OnDropOrThrowRelease::ItemSlot' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.OnLocalAmmoChanged
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbilityIcon_OnLocalAmmoChanged final
{
public:
	float                                         NewAmount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityIcon_OnLocalAmmoChanged) == 0x000004, "Wrong alignment on MarinerAbilityIcon_OnLocalAmmoChanged");
static_assert(sizeof(MarinerAbilityIcon_OnLocalAmmoChanged) == 0x000004, "Wrong size on MarinerAbilityIcon_OnLocalAmmoChanged");
static_assert(offsetof(MarinerAbilityIcon_OnLocalAmmoChanged, NewAmount) == 0x000000, "Member 'MarinerAbilityIcon_OnLocalAmmoChanged::NewAmount' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.OnPriorityItemDropped
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilityIcon_OnPriorityItemDropped final
{
public:
	const class AMarinerCharacter*                KnockOutInstigator;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasMegablast;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_143C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbilityIcon_OnPriorityItemDropped) == 0x000008, "Wrong alignment on MarinerAbilityIcon_OnPriorityItemDropped");
static_assert(sizeof(MarinerAbilityIcon_OnPriorityItemDropped) == 0x000010, "Wrong size on MarinerAbilityIcon_OnPriorityItemDropped");
static_assert(offsetof(MarinerAbilityIcon_OnPriorityItemDropped, KnockOutInstigator) == 0x000000, "Member 'MarinerAbilityIcon_OnPriorityItemDropped::KnockOutInstigator' has a wrong offset!");
static_assert(offsetof(MarinerAbilityIcon_OnPriorityItemDropped, bWasMegablast) == 0x000008, "Member 'MarinerAbilityIcon_OnPriorityItemDropped::bWasMegablast' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.OnPriorityItemPickedUp
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilityIcon_OnPriorityItemPickedUp final
{
public:
	class AMarinerCharacter*                      CatchingCharacter;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerItemSlot                              ItemSlot;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_143D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbilityIcon_OnPriorityItemPickedUp) == 0x000008, "Wrong alignment on MarinerAbilityIcon_OnPriorityItemPickedUp");
static_assert(sizeof(MarinerAbilityIcon_OnPriorityItemPickedUp) == 0x000010, "Wrong size on MarinerAbilityIcon_OnPriorityItemPickedUp");
static_assert(offsetof(MarinerAbilityIcon_OnPriorityItemPickedUp, CatchingCharacter) == 0x000000, "Member 'MarinerAbilityIcon_OnPriorityItemPickedUp::CatchingCharacter' has a wrong offset!");
static_assert(offsetof(MarinerAbilityIcon_OnPriorityItemPickedUp, ItemSlot) == 0x000008, "Member 'MarinerAbilityIcon_OnPriorityItemPickedUp::ItemSlot' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.OnReloadEnded
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbilityIcon_OnReloadEnded final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityIcon_OnReloadEnded) == 0x000001, "Wrong alignment on MarinerAbilityIcon_OnReloadEnded");
static_assert(sizeof(MarinerAbilityIcon_OnReloadEnded) == 0x000001, "Wrong size on MarinerAbilityIcon_OnReloadEnded");
static_assert(offsetof(MarinerAbilityIcon_OnReloadEnded, bWasCancelled) == 0x000000, "Member 'MarinerAbilityIcon_OnReloadEnded::bWasCancelled' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.OnRepCurrentAmmo
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbilityIcon_OnRepCurrentAmmo final
{
public:
	float                                         InCurrentAmmo;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAmmo;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityIcon_OnRepCurrentAmmo) == 0x000004, "Wrong alignment on MarinerAbilityIcon_OnRepCurrentAmmo");
static_assert(sizeof(MarinerAbilityIcon_OnRepCurrentAmmo) == 0x000008, "Wrong size on MarinerAbilityIcon_OnRepCurrentAmmo");
static_assert(offsetof(MarinerAbilityIcon_OnRepCurrentAmmo, InCurrentAmmo) == 0x000000, "Member 'MarinerAbilityIcon_OnRepCurrentAmmo::InCurrentAmmo' has a wrong offset!");
static_assert(offsetof(MarinerAbilityIcon_OnRepCurrentAmmo, MaxAmmo) == 0x000004, "Member 'MarinerAbilityIcon_OnRepCurrentAmmo::MaxAmmo' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.SetAbility
// 0x0018 (0x0018 - 0x0000)
struct MarinerAbilityIcon_SetAbility final
{
public:
	class UMarinerAbilitySystemComponent*         InAbilitySystem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerAbility>            InAbilityClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerInputActions                          InInputAction;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_143E[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbilityIcon_SetAbility) == 0x000008, "Wrong alignment on MarinerAbilityIcon_SetAbility");
static_assert(sizeof(MarinerAbilityIcon_SetAbility) == 0x000018, "Wrong size on MarinerAbilityIcon_SetAbility");
static_assert(offsetof(MarinerAbilityIcon_SetAbility, InAbilitySystem) == 0x000000, "Member 'MarinerAbilityIcon_SetAbility::InAbilitySystem' has a wrong offset!");
static_assert(offsetof(MarinerAbilityIcon_SetAbility, InAbilityClass) == 0x000008, "Member 'MarinerAbilityIcon_SetAbility::InAbilityClass' has a wrong offset!");
static_assert(offsetof(MarinerAbilityIcon_SetAbility, InInputAction) == 0x000010, "Member 'MarinerAbilityIcon_SetAbility::InInputAction' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.SetHUDBarIconData
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbilityIcon_SetHUDBarIconData final
{
public:
	TSubclassOf<class UHUDAbilityUIData>          IconData;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityIcon_SetHUDBarIconData) == 0x000008, "Wrong alignment on MarinerAbilityIcon_SetHUDBarIconData");
static_assert(sizeof(MarinerAbilityIcon_SetHUDBarIconData) == 0x000008, "Wrong size on MarinerAbilityIcon_SetHUDBarIconData");
static_assert(offsetof(MarinerAbilityIcon_SetHUDBarIconData, IconData) == 0x000000, "Member 'MarinerAbilityIcon_SetHUDBarIconData::IconData' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.SetIconType
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbilityIcon_SetIconType final
{
public:
	EMarinerHudAbilityIconType                    InIconType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityIcon_SetIconType) == 0x000001, "Wrong alignment on MarinerAbilityIcon_SetIconType");
static_assert(sizeof(MarinerAbilityIcon_SetIconType) == 0x000001, "Wrong size on MarinerAbilityIcon_SetIconType");
static_assert(offsetof(MarinerAbilityIcon_SetIconType, InIconType) == 0x000000, "Member 'MarinerAbilityIcon_SetIconType::InIconType' has a wrong offset!");

// Function Mariner.MarinerAbilityIcon.GetAnimations
// 0x0020 (0x0020 - 0x0000)
struct MarinerAbilityIcon_GetAnimations final
{
public:
	struct FMarinerAbilityIconAnimations          ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityIcon_GetAnimations) == 0x000008, "Wrong alignment on MarinerAbilityIcon_GetAnimations");
static_assert(sizeof(MarinerAbilityIcon_GetAnimations) == 0x000020, "Wrong size on MarinerAbilityIcon_GetAnimations");
static_assert(offsetof(MarinerAbilityIcon_GetAnimations, ReturnValue) == 0x000000, "Member 'MarinerAbilityIcon_GetAnimations::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMaterialsSwapManagerComponent.RevertMaterials
// 0x0004 (0x0004 - 0x0000)
struct MarinerMaterialsSwapManagerComponent_RevertMaterials final
{
public:
	int32                                         Param_Flags;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMaterialsSwapManagerComponent_RevertMaterials) == 0x000004, "Wrong alignment on MarinerMaterialsSwapManagerComponent_RevertMaterials");
static_assert(sizeof(MarinerMaterialsSwapManagerComponent_RevertMaterials) == 0x000004, "Wrong size on MarinerMaterialsSwapManagerComponent_RevertMaterials");
static_assert(offsetof(MarinerMaterialsSwapManagerComponent_RevertMaterials, Param_Flags) == 0x000000, "Member 'MarinerMaterialsSwapManagerComponent_RevertMaterials::Param_Flags' has a wrong offset!");

// Function Mariner.MarinerMaterialsSwapManagerComponent.RevertMaterialsMulticast
// 0x0004 (0x0004 - 0x0000)
struct MarinerMaterialsSwapManagerComponent_RevertMaterialsMulticast final
{
public:
	int32                                         Param_Flags;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMaterialsSwapManagerComponent_RevertMaterialsMulticast) == 0x000004, "Wrong alignment on MarinerMaterialsSwapManagerComponent_RevertMaterialsMulticast");
static_assert(sizeof(MarinerMaterialsSwapManagerComponent_RevertMaterialsMulticast) == 0x000004, "Wrong size on MarinerMaterialsSwapManagerComponent_RevertMaterialsMulticast");
static_assert(offsetof(MarinerMaterialsSwapManagerComponent_RevertMaterialsMulticast, Param_Flags) == 0x000000, "Member 'MarinerMaterialsSwapManagerComponent_RevertMaterialsMulticast::Param_Flags' has a wrong offset!");

// Function Mariner.MarinerMaterialsSwapManagerComponent.SwapMaterials
// 0x0010 (0x0010 - 0x0000)
struct MarinerMaterialsSwapManagerComponent_SwapMaterials final
{
public:
	int32                                         Param_Flags;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1441[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     NewMaterial;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMaterialsSwapManagerComponent_SwapMaterials) == 0x000008, "Wrong alignment on MarinerMaterialsSwapManagerComponent_SwapMaterials");
static_assert(sizeof(MarinerMaterialsSwapManagerComponent_SwapMaterials) == 0x000010, "Wrong size on MarinerMaterialsSwapManagerComponent_SwapMaterials");
static_assert(offsetof(MarinerMaterialsSwapManagerComponent_SwapMaterials, Param_Flags) == 0x000000, "Member 'MarinerMaterialsSwapManagerComponent_SwapMaterials::Param_Flags' has a wrong offset!");
static_assert(offsetof(MarinerMaterialsSwapManagerComponent_SwapMaterials, NewMaterial) == 0x000008, "Member 'MarinerMaterialsSwapManagerComponent_SwapMaterials::NewMaterial' has a wrong offset!");

// Function Mariner.MarinerMaterialsSwapManagerComponent.SwapMaterialsMulticast
// 0x0010 (0x0010 - 0x0000)
struct MarinerMaterialsSwapManagerComponent_SwapMaterialsMulticast final
{
public:
	int32                                         Param_Flags;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1442[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     NewMaterial;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMaterialsSwapManagerComponent_SwapMaterialsMulticast) == 0x000008, "Wrong alignment on MarinerMaterialsSwapManagerComponent_SwapMaterialsMulticast");
static_assert(sizeof(MarinerMaterialsSwapManagerComponent_SwapMaterialsMulticast) == 0x000010, "Wrong size on MarinerMaterialsSwapManagerComponent_SwapMaterialsMulticast");
static_assert(offsetof(MarinerMaterialsSwapManagerComponent_SwapMaterialsMulticast, Param_Flags) == 0x000000, "Member 'MarinerMaterialsSwapManagerComponent_SwapMaterialsMulticast::Param_Flags' has a wrong offset!");
static_assert(offsetof(MarinerMaterialsSwapManagerComponent_SwapMaterialsMulticast, NewMaterial) == 0x000008, "Member 'MarinerMaterialsSwapManagerComponent_SwapMaterialsMulticast::NewMaterial' has a wrong offset!");

// Function Mariner.MarinerMaterialsSwapManagerComponent.HasPendingMeshSwapForMeshType
// 0x0002 (0x0002 - 0x0000)
struct MarinerMaterialsSwapManagerComponent_HasPendingMeshSwapForMeshType final
{
public:
	EMarinerChangeMeshEnum                        MeshType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMaterialsSwapManagerComponent_HasPendingMeshSwapForMeshType) == 0x000001, "Wrong alignment on MarinerMaterialsSwapManagerComponent_HasPendingMeshSwapForMeshType");
static_assert(sizeof(MarinerMaterialsSwapManagerComponent_HasPendingMeshSwapForMeshType) == 0x000002, "Wrong size on MarinerMaterialsSwapManagerComponent_HasPendingMeshSwapForMeshType");
static_assert(offsetof(MarinerMaterialsSwapManagerComponent_HasPendingMeshSwapForMeshType, MeshType) == 0x000000, "Member 'MarinerMaterialsSwapManagerComponent_HasPendingMeshSwapForMeshType::MeshType' has a wrong offset!");
static_assert(offsetof(MarinerMaterialsSwapManagerComponent_HasPendingMeshSwapForMeshType, ReturnValue) == 0x000001, "Member 'MarinerMaterialsSwapManagerComponent_HasPendingMeshSwapForMeshType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerActivationDeviceTarget.Activate
// 0x0008 (0x0008 - 0x0000)
struct MarinerActivationDeviceTarget_Activate final
{
public:
	class AMarinerCharacter*                      InInstigator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerActivationDeviceTarget_Activate) == 0x000008, "Wrong alignment on MarinerActivationDeviceTarget_Activate");
static_assert(sizeof(MarinerActivationDeviceTarget_Activate) == 0x000008, "Wrong size on MarinerActivationDeviceTarget_Activate");
static_assert(offsetof(MarinerActivationDeviceTarget_Activate, InInstigator) == 0x000000, "Member 'MarinerActivationDeviceTarget_Activate::InInstigator' has a wrong offset!");

// Function Mariner.MarinerActivationDeviceTarget.OnEventTriggered
// 0x0008 (0x0008 - 0x0000)
struct MarinerActivationDeviceTarget_OnEventTriggered final
{
public:
	class AMarinerCharacter*                      InActivationInstigator;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerActivationDeviceTarget_OnEventTriggered) == 0x000008, "Wrong alignment on MarinerActivationDeviceTarget_OnEventTriggered");
static_assert(sizeof(MarinerActivationDeviceTarget_OnEventTriggered) == 0x000008, "Wrong size on MarinerActivationDeviceTarget_OnEventTriggered");
static_assert(offsetof(MarinerActivationDeviceTarget_OnEventTriggered, InActivationInstigator) == 0x000000, "Member 'MarinerActivationDeviceTarget_OnEventTriggered::InActivationInstigator' has a wrong offset!");

// Function Mariner.MarinerSequencedProjectileSpawner.MulticastProjectileFired
// 0x0030 (0x0030 - 0x0000)
struct MarinerSequencedProjectileSpawner_MulticastProjectileFired final
{
public:
	struct FTransform                             FiringLocation;                                    // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSequencedProjectileSpawner_MulticastProjectileFired) == 0x000010, "Wrong alignment on MarinerSequencedProjectileSpawner_MulticastProjectileFired");
static_assert(sizeof(MarinerSequencedProjectileSpawner_MulticastProjectileFired) == 0x000030, "Wrong size on MarinerSequencedProjectileSpawner_MulticastProjectileFired");
static_assert(offsetof(MarinerSequencedProjectileSpawner_MulticastProjectileFired, FiringLocation) == 0x000000, "Member 'MarinerSequencedProjectileSpawner_MulticastProjectileFired::FiringLocation' has a wrong offset!");

// Function Mariner.MarinerSequencedProjectileSpawner.OnProjectileFired
// 0x0030 (0x0030 - 0x0000)
struct MarinerSequencedProjectileSpawner_OnProjectileFired final
{
public:
	struct FTransform                             FiringLocation;                                    // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSequencedProjectileSpawner_OnProjectileFired) == 0x000010, "Wrong alignment on MarinerSequencedProjectileSpawner_OnProjectileFired");
static_assert(sizeof(MarinerSequencedProjectileSpawner_OnProjectileFired) == 0x000030, "Wrong size on MarinerSequencedProjectileSpawner_OnProjectileFired");
static_assert(offsetof(MarinerSequencedProjectileSpawner_OnProjectileFired, FiringLocation) == 0x000000, "Member 'MarinerSequencedProjectileSpawner_OnProjectileFired::FiringLocation' has a wrong offset!");

// Function Mariner.MarinerSequencedProjectileSpawner.GetTotalFiringTime
// 0x0004 (0x0004 - 0x0000)
struct MarinerSequencedProjectileSpawner_GetTotalFiringTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSequencedProjectileSpawner_GetTotalFiringTime) == 0x000004, "Wrong alignment on MarinerSequencedProjectileSpawner_GetTotalFiringTime");
static_assert(sizeof(MarinerSequencedProjectileSpawner_GetTotalFiringTime) == 0x000004, "Wrong size on MarinerSequencedProjectileSpawner_GetTotalFiringTime");
static_assert(offsetof(MarinerSequencedProjectileSpawner_GetTotalFiringTime, ReturnValue) == 0x000000, "Member 'MarinerSequencedProjectileSpawner_GetTotalFiringTime::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.CB_Hovered
// 0x0002 (0x0002 - 0x0000)
struct MarinerLayeredButton_CB_Hovered final
{
public:
	bool                                          bFromKeyboard;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromMouse;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_CB_Hovered) == 0x000001, "Wrong alignment on MarinerLayeredButton_CB_Hovered");
static_assert(sizeof(MarinerLayeredButton_CB_Hovered) == 0x000002, "Wrong size on MarinerLayeredButton_CB_Hovered");
static_assert(offsetof(MarinerLayeredButton_CB_Hovered, bFromKeyboard) == 0x000000, "Member 'MarinerLayeredButton_CB_Hovered::bFromKeyboard' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_CB_Hovered, bFromMouse) == 0x000001, "Member 'MarinerLayeredButton_CB_Hovered::bFromMouse' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.GetHeightOverride
// 0x0008 (0x0008 - 0x0000)
struct MarinerLayeredButton_GetHeightOverride final
{
public:
	float                                         OutHeight;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1452[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerLayeredButton_GetHeightOverride) == 0x000004, "Wrong alignment on MarinerLayeredButton_GetHeightOverride");
static_assert(sizeof(MarinerLayeredButton_GetHeightOverride) == 0x000008, "Wrong size on MarinerLayeredButton_GetHeightOverride");
static_assert(offsetof(MarinerLayeredButton_GetHeightOverride, OutHeight) == 0x000000, "Member 'MarinerLayeredButton_GetHeightOverride::OutHeight' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_GetHeightOverride, ReturnValue) == 0x000004, "Member 'MarinerLayeredButton_GetHeightOverride::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.GetWidthOverride
// 0x0008 (0x0008 - 0x0000)
struct MarinerLayeredButton_GetWidthOverride final
{
public:
	float                                         OutWidth;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1453[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerLayeredButton_GetWidthOverride) == 0x000004, "Wrong alignment on MarinerLayeredButton_GetWidthOverride");
static_assert(sizeof(MarinerLayeredButton_GetWidthOverride) == 0x000008, "Wrong size on MarinerLayeredButton_GetWidthOverride");
static_assert(offsetof(MarinerLayeredButton_GetWidthOverride, OutWidth) == 0x000000, "Member 'MarinerLayeredButton_GetWidthOverride::OutWidth' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_GetWidthOverride, ReturnValue) == 0x000004, "Member 'MarinerLayeredButton_GetWidthOverride::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetAuxText
// 0x0018 (0x0018 - 0x0000)
struct MarinerLayeredButton_SetAuxText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetAuxText) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetAuxText");
static_assert(sizeof(MarinerLayeredButton_SetAuxText) == 0x000018, "Wrong size on MarinerLayeredButton_SetAuxText");
static_assert(offsetof(MarinerLayeredButton_SetAuxText, Text) == 0x000000, "Member 'MarinerLayeredButton_SetAuxText::Text' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetAuxTextOutlineProperties
// 0x0088 (0x0088 - 0x0000)
struct MarinerLayeredButton_SetAuxTextOutlineProperties final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1454[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerLayeredButtonTextProperties    Properties;                                        // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetAuxTextOutlineProperties) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetAuxTextOutlineProperties");
static_assert(sizeof(MarinerLayeredButton_SetAuxTextOutlineProperties) == 0x000088, "Wrong size on MarinerLayeredButton_SetAuxTextOutlineProperties");
static_assert(offsetof(MarinerLayeredButton_SetAuxTextOutlineProperties, bSelected) == 0x000000, "Member 'MarinerLayeredButton_SetAuxTextOutlineProperties::bSelected' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetAuxTextOutlineProperties, bEnabled) == 0x000001, "Member 'MarinerLayeredButton_SetAuxTextOutlineProperties::bEnabled' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetAuxTextOutlineProperties, Properties) == 0x000008, "Member 'MarinerLayeredButton_SetAuxTextOutlineProperties::Properties' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetAuxTextProperties
// 0x0088 (0x0088 - 0x0000)
struct MarinerLayeredButton_SetAuxTextProperties final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1455[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerLayeredButtonTextProperties    Properties;                                        // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetAuxTextProperties) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetAuxTextProperties");
static_assert(sizeof(MarinerLayeredButton_SetAuxTextProperties) == 0x000088, "Wrong size on MarinerLayeredButton_SetAuxTextProperties");
static_assert(offsetof(MarinerLayeredButton_SetAuxTextProperties, bSelected) == 0x000000, "Member 'MarinerLayeredButton_SetAuxTextProperties::bSelected' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetAuxTextProperties, bEnabled) == 0x000001, "Member 'MarinerLayeredButton_SetAuxTextProperties::bEnabled' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetAuxTextProperties, Properties) == 0x000008, "Member 'MarinerLayeredButton_SetAuxTextProperties::Properties' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetBackgroundAllowed
// 0x0001 (0x0001 - 0x0000)
struct MarinerLayeredButton_SetBackgroundAllowed final
{
public:
	bool                                          bAllowed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetBackgroundAllowed) == 0x000001, "Wrong alignment on MarinerLayeredButton_SetBackgroundAllowed");
static_assert(sizeof(MarinerLayeredButton_SetBackgroundAllowed) == 0x000001, "Wrong size on MarinerLayeredButton_SetBackgroundAllowed");
static_assert(offsetof(MarinerLayeredButton_SetBackgroundAllowed, bAllowed) == 0x000000, "Member 'MarinerLayeredButton_SetBackgroundAllowed::bAllowed' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetBackgroundImageAll
// 0x0088 (0x0088 - 0x0000)
struct MarinerLayeredButton_SetBackgroundImageAll final
{
public:
	struct FSlateBrush                            Image;                                             // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetBackgroundImageAll) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetBackgroundImageAll");
static_assert(sizeof(MarinerLayeredButton_SetBackgroundImageAll) == 0x000088, "Wrong size on MarinerLayeredButton_SetBackgroundImageAll");
static_assert(offsetof(MarinerLayeredButton_SetBackgroundImageAll, Image) == 0x000000, "Member 'MarinerLayeredButton_SetBackgroundImageAll::Image' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetBackgroundProperties
// 0x01D8 (0x01D8 - 0x0000)
struct MarinerLayeredButton_SetBackgroundProperties final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1456[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerLayeredButtonImageProperties   Properties;                                        // 0x0008(0x01D0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetBackgroundProperties) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetBackgroundProperties");
static_assert(sizeof(MarinerLayeredButton_SetBackgroundProperties) == 0x0001D8, "Wrong size on MarinerLayeredButton_SetBackgroundProperties");
static_assert(offsetof(MarinerLayeredButton_SetBackgroundProperties, bSelected) == 0x000000, "Member 'MarinerLayeredButton_SetBackgroundProperties::bSelected' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetBackgroundProperties, bEnabled) == 0x000001, "Member 'MarinerLayeredButton_SetBackgroundProperties::bEnabled' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetBackgroundProperties, Properties) == 0x000008, "Member 'MarinerLayeredButton_SetBackgroundProperties::Properties' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetBorderAllowed
// 0x0001 (0x0001 - 0x0000)
struct MarinerLayeredButton_SetBorderAllowed final
{
public:
	bool                                          bAllowed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetBorderAllowed) == 0x000001, "Wrong alignment on MarinerLayeredButton_SetBorderAllowed");
static_assert(sizeof(MarinerLayeredButton_SetBorderAllowed) == 0x000001, "Wrong size on MarinerLayeredButton_SetBorderAllowed");
static_assert(offsetof(MarinerLayeredButton_SetBorderAllowed, bAllowed) == 0x000000, "Member 'MarinerLayeredButton_SetBorderAllowed::bAllowed' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetBorderImageAll
// 0x0088 (0x0088 - 0x0000)
struct MarinerLayeredButton_SetBorderImageAll final
{
public:
	struct FSlateBrush                            Image;                                             // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetBorderImageAll) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetBorderImageAll");
static_assert(sizeof(MarinerLayeredButton_SetBorderImageAll) == 0x000088, "Wrong size on MarinerLayeredButton_SetBorderImageAll");
static_assert(offsetof(MarinerLayeredButton_SetBorderImageAll, Image) == 0x000000, "Member 'MarinerLayeredButton_SetBorderImageAll::Image' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetBorderProperties
// 0x01D8 (0x01D8 - 0x0000)
struct MarinerLayeredButton_SetBorderProperties final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1457[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerLayeredButtonImageProperties   Properties;                                        // 0x0008(0x01D0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetBorderProperties) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetBorderProperties");
static_assert(sizeof(MarinerLayeredButton_SetBorderProperties) == 0x0001D8, "Wrong size on MarinerLayeredButton_SetBorderProperties");
static_assert(offsetof(MarinerLayeredButton_SetBorderProperties, bSelected) == 0x000000, "Member 'MarinerLayeredButton_SetBorderProperties::bSelected' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetBorderProperties, bEnabled) == 0x000001, "Member 'MarinerLayeredButton_SetBorderProperties::bEnabled' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetBorderProperties, Properties) == 0x000008, "Member 'MarinerLayeredButton_SetBorderProperties::Properties' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetCanHighlightWhileDisabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerLayeredButton_SetCanHighlightWhileDisabled final
{
public:
	bool                                          bInCanHighlight;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetCanHighlightWhileDisabled) == 0x000001, "Wrong alignment on MarinerLayeredButton_SetCanHighlightWhileDisabled");
static_assert(sizeof(MarinerLayeredButton_SetCanHighlightWhileDisabled) == 0x000001, "Wrong size on MarinerLayeredButton_SetCanHighlightWhileDisabled");
static_assert(offsetof(MarinerLayeredButton_SetCanHighlightWhileDisabled, bInCanHighlight) == 0x000000, "Member 'MarinerLayeredButton_SetCanHighlightWhileDisabled::bInCanHighlight' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetCanSelectWhileDisabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerLayeredButton_SetCanSelectWhileDisabled final
{
public:
	bool                                          bInCanSelect;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetCanSelectWhileDisabled) == 0x000001, "Wrong alignment on MarinerLayeredButton_SetCanSelectWhileDisabled");
static_assert(sizeof(MarinerLayeredButton_SetCanSelectWhileDisabled) == 0x000001, "Wrong size on MarinerLayeredButton_SetCanSelectWhileDisabled");
static_assert(offsetof(MarinerLayeredButton_SetCanSelectWhileDisabled, bInCanSelect) == 0x000000, "Member 'MarinerLayeredButton_SetCanSelectWhileDisabled::bInCanSelect' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetContentState
// 0x0001 (0x0001 - 0x0000)
struct MarinerLayeredButton_SetContentState final
{
public:
	EButtonContentState                           InContentState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetContentState) == 0x000001, "Wrong alignment on MarinerLayeredButton_SetContentState");
static_assert(sizeof(MarinerLayeredButton_SetContentState) == 0x000001, "Wrong size on MarinerLayeredButton_SetContentState");
static_assert(offsetof(MarinerLayeredButton_SetContentState, InContentState) == 0x000000, "Member 'MarinerLayeredButton_SetContentState::InContentState' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetContentStateBrush
// 0x0090 (0x0090 - 0x0000)
struct MarinerLayeredButton_SetContentStateBrush final
{
public:
	EButtonContentState                           InContentState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1458[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            InBrush;                                           // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetContentStateBrush) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetContentStateBrush");
static_assert(sizeof(MarinerLayeredButton_SetContentStateBrush) == 0x000090, "Wrong size on MarinerLayeredButton_SetContentStateBrush");
static_assert(offsetof(MarinerLayeredButton_SetContentStateBrush, InContentState) == 0x000000, "Member 'MarinerLayeredButton_SetContentStateBrush::InContentState' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetContentStateBrush, InBrush) == 0x000008, "Member 'MarinerLayeredButton_SetContentStateBrush::InBrush' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetHeightOverride
// 0x0004 (0x0004 - 0x0000)
struct MarinerLayeredButton_SetHeightOverride final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetHeightOverride) == 0x000004, "Wrong alignment on MarinerLayeredButton_SetHeightOverride");
static_assert(sizeof(MarinerLayeredButton_SetHeightOverride) == 0x000004, "Wrong size on MarinerLayeredButton_SetHeightOverride");
static_assert(offsetof(MarinerLayeredButton_SetHeightOverride, Height) == 0x000000, "Member 'MarinerLayeredButton_SetHeightOverride::Height' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetIconAllowed
// 0x0001 (0x0001 - 0x0000)
struct MarinerLayeredButton_SetIconAllowed final
{
public:
	bool                                          bAllowed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetIconAllowed) == 0x000001, "Wrong alignment on MarinerLayeredButton_SetIconAllowed");
static_assert(sizeof(MarinerLayeredButton_SetIconAllowed) == 0x000001, "Wrong size on MarinerLayeredButton_SetIconAllowed");
static_assert(offsetof(MarinerLayeredButton_SetIconAllowed, bAllowed) == 0x000000, "Member 'MarinerLayeredButton_SetIconAllowed::bAllowed' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetIconImageAll
// 0x0088 (0x0088 - 0x0000)
struct MarinerLayeredButton_SetIconImageAll final
{
public:
	struct FSlateBrush                            Image;                                             // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetIconImageAll) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetIconImageAll");
static_assert(sizeof(MarinerLayeredButton_SetIconImageAll) == 0x000088, "Wrong size on MarinerLayeredButton_SetIconImageAll");
static_assert(offsetof(MarinerLayeredButton_SetIconImageAll, Image) == 0x000000, "Member 'MarinerLayeredButton_SetIconImageAll::Image' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetIconProperties
// 0x01D8 (0x01D8 - 0x0000)
struct MarinerLayeredButton_SetIconProperties final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1459[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerLayeredButtonImageProperties   Properties;                                        // 0x0008(0x01D0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetIconProperties) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetIconProperties");
static_assert(sizeof(MarinerLayeredButton_SetIconProperties) == 0x0001D8, "Wrong size on MarinerLayeredButton_SetIconProperties");
static_assert(offsetof(MarinerLayeredButton_SetIconProperties, bSelected) == 0x000000, "Member 'MarinerLayeredButton_SetIconProperties::bSelected' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetIconProperties, bEnabled) == 0x000001, "Member 'MarinerLayeredButton_SetIconProperties::bEnabled' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetIconProperties, Properties) == 0x000008, "Member 'MarinerLayeredButton_SetIconProperties::Properties' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetIsInteractable
// 0x0001 (0x0001 - 0x0000)
struct MarinerLayeredButton_SetIsInteractable final
{
public:
	bool                                          bInIsInteractable;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetIsInteractable) == 0x000001, "Wrong alignment on MarinerLayeredButton_SetIsInteractable");
static_assert(sizeof(MarinerLayeredButton_SetIsInteractable) == 0x000001, "Wrong size on MarinerLayeredButton_SetIsInteractable");
static_assert(offsetof(MarinerLayeredButton_SetIsInteractable, bInIsInteractable) == 0x000000, "Member 'MarinerLayeredButton_SetIsInteractable::bInIsInteractable' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct MarinerLayeredButton_SetIsSelected final
{
public:
	bool                                          bInIsSelected;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetIsSelected) == 0x000001, "Wrong alignment on MarinerLayeredButton_SetIsSelected");
static_assert(sizeof(MarinerLayeredButton_SetIsSelected) == 0x000001, "Wrong size on MarinerLayeredButton_SetIsSelected");
static_assert(offsetof(MarinerLayeredButton_SetIsSelected, bInIsSelected) == 0x000000, "Member 'MarinerLayeredButton_SetIsSelected::bInIsSelected' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetIsViewed
// 0x0001 (0x0001 - 0x0000)
struct MarinerLayeredButton_SetIsViewed final
{
public:
	bool                                          bInIsViewed;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetIsViewed) == 0x000001, "Wrong alignment on MarinerLayeredButton_SetIsViewed");
static_assert(sizeof(MarinerLayeredButton_SetIsViewed) == 0x000001, "Wrong size on MarinerLayeredButton_SetIsViewed");
static_assert(offsetof(MarinerLayeredButton_SetIsViewed, bInIsViewed) == 0x000000, "Member 'MarinerLayeredButton_SetIsViewed::bInIsViewed' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetMaterialAllowed
// 0x0001 (0x0001 - 0x0000)
struct MarinerLayeredButton_SetMaterialAllowed final
{
public:
	bool                                          bAllowed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetMaterialAllowed) == 0x000001, "Wrong alignment on MarinerLayeredButton_SetMaterialAllowed");
static_assert(sizeof(MarinerLayeredButton_SetMaterialAllowed) == 0x000001, "Wrong size on MarinerLayeredButton_SetMaterialAllowed");
static_assert(offsetof(MarinerLayeredButton_SetMaterialAllowed, bAllowed) == 0x000000, "Member 'MarinerLayeredButton_SetMaterialAllowed::bAllowed' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetMaterialImageAll
// 0x0088 (0x0088 - 0x0000)
struct MarinerLayeredButton_SetMaterialImageAll final
{
public:
	struct FSlateBrush                            Image;                                             // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetMaterialImageAll) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetMaterialImageAll");
static_assert(sizeof(MarinerLayeredButton_SetMaterialImageAll) == 0x000088, "Wrong size on MarinerLayeredButton_SetMaterialImageAll");
static_assert(offsetof(MarinerLayeredButton_SetMaterialImageAll, Image) == 0x000000, "Member 'MarinerLayeredButton_SetMaterialImageAll::Image' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetMaterialProperties
// 0x01D8 (0x01D8 - 0x0000)
struct MarinerLayeredButton_SetMaterialProperties final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145A[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerLayeredButtonImageProperties   Properties;                                        // 0x0008(0x01D0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetMaterialProperties) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetMaterialProperties");
static_assert(sizeof(MarinerLayeredButton_SetMaterialProperties) == 0x0001D8, "Wrong size on MarinerLayeredButton_SetMaterialProperties");
static_assert(offsetof(MarinerLayeredButton_SetMaterialProperties, bSelected) == 0x000000, "Member 'MarinerLayeredButton_SetMaterialProperties::bSelected' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetMaterialProperties, bEnabled) == 0x000001, "Member 'MarinerLayeredButton_SetMaterialProperties::bEnabled' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetMaterialProperties, Properties) == 0x000008, "Member 'MarinerLayeredButton_SetMaterialProperties::Properties' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetOnHoveredSFX
// 0x0008 (0x0008 - 0x0000)
struct MarinerLayeredButton_SetOnHoveredSFX final
{
public:
	class UAkAudioEvent*                          HoveredSFX;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetOnHoveredSFX) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetOnHoveredSFX");
static_assert(sizeof(MarinerLayeredButton_SetOnHoveredSFX) == 0x000008, "Wrong size on MarinerLayeredButton_SetOnHoveredSFX");
static_assert(offsetof(MarinerLayeredButton_SetOnHoveredSFX, HoveredSFX) == 0x000000, "Member 'MarinerLayeredButton_SetOnHoveredSFX::HoveredSFX' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetOnSelectedSFX
// 0x0008 (0x0008 - 0x0000)
struct MarinerLayeredButton_SetOnSelectedSFX final
{
public:
	class UAkAudioEvent*                          SelectedSFX;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetOnSelectedSFX) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetOnSelectedSFX");
static_assert(sizeof(MarinerLayeredButton_SetOnSelectedSFX) == 0x000008, "Wrong size on MarinerLayeredButton_SetOnSelectedSFX");
static_assert(offsetof(MarinerLayeredButton_SetOnSelectedSFX, SelectedSFX) == 0x000000, "Member 'MarinerLayeredButton_SetOnSelectedSFX::SelectedSFX' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetOnUnhoveredSFX
// 0x0008 (0x0008 - 0x0000)
struct MarinerLayeredButton_SetOnUnhoveredSFX final
{
public:
	class UAkAudioEvent*                          UnhoveredSFX;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetOnUnhoveredSFX) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetOnUnhoveredSFX");
static_assert(sizeof(MarinerLayeredButton_SetOnUnhoveredSFX) == 0x000008, "Wrong size on MarinerLayeredButton_SetOnUnhoveredSFX");
static_assert(offsetof(MarinerLayeredButton_SetOnUnhoveredSFX, UnhoveredSFX) == 0x000000, "Member 'MarinerLayeredButton_SetOnUnhoveredSFX::UnhoveredSFX' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetText
// 0x0018 (0x0018 - 0x0000)
struct MarinerLayeredButton_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetText) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetText");
static_assert(sizeof(MarinerLayeredButton_SetText) == 0x000018, "Wrong size on MarinerLayeredButton_SetText");
static_assert(offsetof(MarinerLayeredButton_SetText, Text) == 0x000000, "Member 'MarinerLayeredButton_SetText::Text' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetTextOutlineProperties
// 0x0088 (0x0088 - 0x0000)
struct MarinerLayeredButton_SetTextOutlineProperties final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145B[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerLayeredButtonTextProperties    Properties;                                        // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetTextOutlineProperties) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetTextOutlineProperties");
static_assert(sizeof(MarinerLayeredButton_SetTextOutlineProperties) == 0x000088, "Wrong size on MarinerLayeredButton_SetTextOutlineProperties");
static_assert(offsetof(MarinerLayeredButton_SetTextOutlineProperties, bSelected) == 0x000000, "Member 'MarinerLayeredButton_SetTextOutlineProperties::bSelected' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetTextOutlineProperties, bEnabled) == 0x000001, "Member 'MarinerLayeredButton_SetTextOutlineProperties::bEnabled' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetTextOutlineProperties, Properties) == 0x000008, "Member 'MarinerLayeredButton_SetTextOutlineProperties::Properties' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetTextProperties
// 0x0088 (0x0088 - 0x0000)
struct MarinerLayeredButton_SetTextProperties final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145C[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerLayeredButtonTextProperties    Properties;                                        // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetTextProperties) == 0x000008, "Wrong alignment on MarinerLayeredButton_SetTextProperties");
static_assert(sizeof(MarinerLayeredButton_SetTextProperties) == 0x000088, "Wrong size on MarinerLayeredButton_SetTextProperties");
static_assert(offsetof(MarinerLayeredButton_SetTextProperties, bSelected) == 0x000000, "Member 'MarinerLayeredButton_SetTextProperties::bSelected' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetTextProperties, bEnabled) == 0x000001, "Member 'MarinerLayeredButton_SetTextProperties::bEnabled' has a wrong offset!");
static_assert(offsetof(MarinerLayeredButton_SetTextProperties, Properties) == 0x000008, "Member 'MarinerLayeredButton_SetTextProperties::Properties' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.SetWidthOverride
// 0x0004 (0x0004 - 0x0000)
struct MarinerLayeredButton_SetWidthOverride final
{
public:
	float                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_SetWidthOverride) == 0x000004, "Wrong alignment on MarinerLayeredButton_SetWidthOverride");
static_assert(sizeof(MarinerLayeredButton_SetWidthOverride) == 0x000004, "Wrong size on MarinerLayeredButton_SetWidthOverride");
static_assert(offsetof(MarinerLayeredButton_SetWidthOverride, Width) == 0x000000, "Member 'MarinerLayeredButton_SetWidthOverride::Width' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.GetAssets
// 0x0068 (0x0068 - 0x0000)
struct MarinerLayeredButton_GetAssets final
{
public:
	struct FMarinerLayeredButtonAssets            ReturnValue;                                       // 0x0000(0x0068)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_GetAssets) == 0x000008, "Wrong alignment on MarinerLayeredButton_GetAssets");
static_assert(sizeof(MarinerLayeredButton_GetAssets) == 0x000068, "Wrong size on MarinerLayeredButton_GetAssets");
static_assert(offsetof(MarinerLayeredButton_GetAssets, ReturnValue) == 0x000000, "Member 'MarinerLayeredButton_GetAssets::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.GetContentState
// 0x0001 (0x0001 - 0x0000)
struct MarinerLayeredButton_GetContentState final
{
public:
	EButtonContentState                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_GetContentState) == 0x000001, "Wrong alignment on MarinerLayeredButton_GetContentState");
static_assert(sizeof(MarinerLayeredButton_GetContentState) == 0x000001, "Wrong size on MarinerLayeredButton_GetContentState");
static_assert(offsetof(MarinerLayeredButton_GetContentState, ReturnValue) == 0x000000, "Member 'MarinerLayeredButton_GetContentState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.GetCurrentTooltip
// 0x0018 (0x0018 - 0x0000)
struct MarinerLayeredButton_GetCurrentTooltip final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_GetCurrentTooltip) == 0x000008, "Wrong alignment on MarinerLayeredButton_GetCurrentTooltip");
static_assert(sizeof(MarinerLayeredButton_GetCurrentTooltip) == 0x000018, "Wrong size on MarinerLayeredButton_GetCurrentTooltip");
static_assert(offsetof(MarinerLayeredButton_GetCurrentTooltip, ReturnValue) == 0x000000, "Member 'MarinerLayeredButton_GetCurrentTooltip::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.GetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct MarinerLayeredButton_GetIsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_GetIsSelected) == 0x000001, "Wrong alignment on MarinerLayeredButton_GetIsSelected");
static_assert(sizeof(MarinerLayeredButton_GetIsSelected) == 0x000001, "Wrong size on MarinerLayeredButton_GetIsSelected");
static_assert(offsetof(MarinerLayeredButton_GetIsSelected, ReturnValue) == 0x000000, "Member 'MarinerLayeredButton_GetIsSelected::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.GetIsViewed
// 0x0001 (0x0001 - 0x0000)
struct MarinerLayeredButton_GetIsViewed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_GetIsViewed) == 0x000001, "Wrong alignment on MarinerLayeredButton_GetIsViewed");
static_assert(sizeof(MarinerLayeredButton_GetIsViewed) == 0x000001, "Wrong size on MarinerLayeredButton_GetIsViewed");
static_assert(offsetof(MarinerLayeredButton_GetIsViewed, ReturnValue) == 0x000000, "Member 'MarinerLayeredButton_GetIsViewed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.GetOnClickedSFX
// 0x0008 (0x0008 - 0x0000)
struct MarinerLayeredButton_GetOnClickedSFX final
{
public:
	class UAkAudioEvent*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_GetOnClickedSFX) == 0x000008, "Wrong alignment on MarinerLayeredButton_GetOnClickedSFX");
static_assert(sizeof(MarinerLayeredButton_GetOnClickedSFX) == 0x000008, "Wrong size on MarinerLayeredButton_GetOnClickedSFX");
static_assert(offsetof(MarinerLayeredButton_GetOnClickedSFX, ReturnValue) == 0x000000, "Member 'MarinerLayeredButton_GetOnClickedSFX::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.GetPromptBanner
// 0x0008 (0x0008 - 0x0000)
struct MarinerLayeredButton_GetPromptBanner final
{
public:
	class UMarinerPromptBanner*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_GetPromptBanner) == 0x000008, "Wrong alignment on MarinerLayeredButton_GetPromptBanner");
static_assert(sizeof(MarinerLayeredButton_GetPromptBanner) == 0x000008, "Wrong size on MarinerLayeredButton_GetPromptBanner");
static_assert(offsetof(MarinerLayeredButton_GetPromptBanner, ReturnValue) == 0x000000, "Member 'MarinerLayeredButton_GetPromptBanner::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLayeredButton.GetText
// 0x0018 (0x0018 - 0x0000)
struct MarinerLayeredButton_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLayeredButton_GetText) == 0x000008, "Wrong alignment on MarinerLayeredButton_GetText");
static_assert(sizeof(MarinerLayeredButton_GetText) == 0x000018, "Wrong size on MarinerLayeredButton_GetText");
static_assert(offsetof(MarinerLayeredButton_GetText, ReturnValue) == 0x000000, "Member 'MarinerLayeredButton_GetText::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemLoadResponseButton.OnPopulate
// 0x0010 (0x0010 - 0x0000)
struct MarinerItemLoadResponseButton_OnPopulate final
{
public:
	class UItemLoadResponse*                      LoadResponse;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerCMSItemDataAsset*               CMSItem;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemLoadResponseButton_OnPopulate) == 0x000008, "Wrong alignment on MarinerItemLoadResponseButton_OnPopulate");
static_assert(sizeof(MarinerItemLoadResponseButton_OnPopulate) == 0x000010, "Wrong size on MarinerItemLoadResponseButton_OnPopulate");
static_assert(offsetof(MarinerItemLoadResponseButton_OnPopulate, LoadResponse) == 0x000000, "Member 'MarinerItemLoadResponseButton_OnPopulate::LoadResponse' has a wrong offset!");
static_assert(offsetof(MarinerItemLoadResponseButton_OnPopulate, CMSItem) == 0x000008, "Member 'MarinerItemLoadResponseButton_OnPopulate::CMSItem' has a wrong offset!");

// Function Mariner.MarinerItemLoadResponseButton.SetItemData
// 0x0010 (0x0010 - 0x0000)
struct MarinerItemLoadResponseButton_SetItemData final
{
public:
	class UItemLoadResponse*                      InItemData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsEquipped;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRanked;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145E[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerItemLoadResponseButton_SetItemData) == 0x000008, "Wrong alignment on MarinerItemLoadResponseButton_SetItemData");
static_assert(sizeof(MarinerItemLoadResponseButton_SetItemData) == 0x000010, "Wrong size on MarinerItemLoadResponseButton_SetItemData");
static_assert(offsetof(MarinerItemLoadResponseButton_SetItemData, InItemData) == 0x000000, "Member 'MarinerItemLoadResponseButton_SetItemData::InItemData' has a wrong offset!");
static_assert(offsetof(MarinerItemLoadResponseButton_SetItemData, bInIsEquipped) == 0x000008, "Member 'MarinerItemLoadResponseButton_SetItemData::bInIsEquipped' has a wrong offset!");
static_assert(offsetof(MarinerItemLoadResponseButton_SetItemData, bRanked) == 0x000009, "Member 'MarinerItemLoadResponseButton_SetItemData::bRanked' has a wrong offset!");

// Function Mariner.MarinerItemLoadResponseButton.GetIconBrush
// 0x0098 (0x0098 - 0x0000)
struct MarinerItemLoadResponseButton_GetIconBrush final
{
public:
	class UItemLoadResponse*                      LoadResponse;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerCMSItemDataAsset*               CMSItem;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ReturnValue;                                       // 0x0010(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemLoadResponseButton_GetIconBrush) == 0x000008, "Wrong alignment on MarinerItemLoadResponseButton_GetIconBrush");
static_assert(sizeof(MarinerItemLoadResponseButton_GetIconBrush) == 0x000098, "Wrong size on MarinerItemLoadResponseButton_GetIconBrush");
static_assert(offsetof(MarinerItemLoadResponseButton_GetIconBrush, LoadResponse) == 0x000000, "Member 'MarinerItemLoadResponseButton_GetIconBrush::LoadResponse' has a wrong offset!");
static_assert(offsetof(MarinerItemLoadResponseButton_GetIconBrush, CMSItem) == 0x000008, "Member 'MarinerItemLoadResponseButton_GetIconBrush::CMSItem' has a wrong offset!");
static_assert(offsetof(MarinerItemLoadResponseButton_GetIconBrush, ReturnValue) == 0x000010, "Member 'MarinerItemLoadResponseButton_GetIconBrush::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemLoadResponseButton.GetItemLoadResponse
// 0x0008 (0x0008 - 0x0000)
struct MarinerItemLoadResponseButton_GetItemLoadResponse final
{
public:
	class UItemLoadResponse*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemLoadResponseButton_GetItemLoadResponse) == 0x000008, "Wrong alignment on MarinerItemLoadResponseButton_GetItemLoadResponse");
static_assert(sizeof(MarinerItemLoadResponseButton_GetItemLoadResponse) == 0x000008, "Wrong size on MarinerItemLoadResponseButton_GetItemLoadResponse");
static_assert(offsetof(MarinerItemLoadResponseButton_GetItemLoadResponse, ReturnValue) == 0x000000, "Member 'MarinerItemLoadResponseButton_GetItemLoadResponse::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemLoadResponseButton.GetItemLoadResponseAssets
// 0x0008 (0x0008 - 0x0000)
struct MarinerItemLoadResponseButton_GetItemLoadResponseAssets final
{
public:
	struct FMarinerItemLoadResponseAssets         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemLoadResponseButton_GetItemLoadResponseAssets) == 0x000008, "Wrong alignment on MarinerItemLoadResponseButton_GetItemLoadResponseAssets");
static_assert(sizeof(MarinerItemLoadResponseButton_GetItemLoadResponseAssets) == 0x000008, "Wrong size on MarinerItemLoadResponseButton_GetItemLoadResponseAssets");
static_assert(offsetof(MarinerItemLoadResponseButton_GetItemLoadResponseAssets, ReturnValue) == 0x000000, "Member 'MarinerItemLoadResponseButton_GetItemLoadResponseAssets::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemLoadResponseButton.GetLoadedCMSItemDataAsset
// 0x0008 (0x0008 - 0x0000)
struct MarinerItemLoadResponseButton_GetLoadedCMSItemDataAsset final
{
public:
	class UMarinerCMSItemDataAsset*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemLoadResponseButton_GetLoadedCMSItemDataAsset) == 0x000008, "Wrong alignment on MarinerItemLoadResponseButton_GetLoadedCMSItemDataAsset");
static_assert(sizeof(MarinerItemLoadResponseButton_GetLoadedCMSItemDataAsset) == 0x000008, "Wrong size on MarinerItemLoadResponseButton_GetLoadedCMSItemDataAsset");
static_assert(offsetof(MarinerItemLoadResponseButton_GetLoadedCMSItemDataAsset, ReturnValue) == 0x000000, "Member 'MarinerItemLoadResponseButton_GetLoadedCMSItemDataAsset::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGamepadPrompt.GetPromptAssets
// 0x0028 (0x0028 - 0x0000)
struct MarinerGamepadPrompt_GetPromptAssets final
{
public:
	struct FMarinerGamepadPromptAssets            ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGamepadPrompt_GetPromptAssets) == 0x000008, "Wrong alignment on MarinerGamepadPrompt_GetPromptAssets");
static_assert(sizeof(MarinerGamepadPrompt_GetPromptAssets) == 0x000028, "Wrong size on MarinerGamepadPrompt_GetPromptAssets");
static_assert(offsetof(MarinerGamepadPrompt_GetPromptAssets, ReturnValue) == 0x000000, "Member 'MarinerGamepadPrompt_GetPromptAssets::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArenaReturnTarget.OnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct MarinerArenaReturnTarget_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1464[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArenaReturnTarget_OnBeginOverlap) == 0x000008, "Wrong alignment on MarinerArenaReturnTarget_OnBeginOverlap");
static_assert(sizeof(MarinerArenaReturnTarget_OnBeginOverlap) == 0x0000A8, "Wrong size on MarinerArenaReturnTarget_OnBeginOverlap");
static_assert(offsetof(MarinerArenaReturnTarget_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'MarinerArenaReturnTarget_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTarget_OnBeginOverlap, OtherActor) == 0x000008, "Member 'MarinerArenaReturnTarget_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTarget_OnBeginOverlap, OtherComponent) == 0x000010, "Member 'MarinerArenaReturnTarget_OnBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTarget_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'MarinerArenaReturnTarget_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTarget_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'MarinerArenaReturnTarget_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTarget_OnBeginOverlap, SweepResult) == 0x000020, "Member 'MarinerArenaReturnTarget_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function Mariner.MarinerArenaReturnTarget.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct MarinerArenaReturnTarget_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1465[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerArenaReturnTarget_OnEndOverlap) == 0x000008, "Wrong alignment on MarinerArenaReturnTarget_OnEndOverlap");
static_assert(sizeof(MarinerArenaReturnTarget_OnEndOverlap) == 0x000020, "Wrong size on MarinerArenaReturnTarget_OnEndOverlap");
static_assert(offsetof(MarinerArenaReturnTarget_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'MarinerArenaReturnTarget_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTarget_OnEndOverlap, OtherActor) == 0x000008, "Member 'MarinerArenaReturnTarget_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTarget_OnEndOverlap, OtherComponent) == 0x000010, "Member 'MarinerArenaReturnTarget_OnEndOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTarget_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'MarinerArenaReturnTarget_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Mariner.MarinerArenaReturnTarget.GetClosestCharacterOnTeam
// 0x0010 (0x0010 - 0x0000)
struct MarinerArenaReturnTarget_GetClosestCharacterOnTeam final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1466[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArenaReturnTarget_GetClosestCharacterOnTeam) == 0x000008, "Wrong alignment on MarinerArenaReturnTarget_GetClosestCharacterOnTeam");
static_assert(sizeof(MarinerArenaReturnTarget_GetClosestCharacterOnTeam) == 0x000010, "Wrong size on MarinerArenaReturnTarget_GetClosestCharacterOnTeam");
static_assert(offsetof(MarinerArenaReturnTarget_GetClosestCharacterOnTeam, TeamIndex) == 0x000000, "Member 'MarinerArenaReturnTarget_GetClosestCharacterOnTeam::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTarget_GetClosestCharacterOnTeam, ReturnValue) == 0x000008, "Member 'MarinerArenaReturnTarget_GetClosestCharacterOnTeam::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArenaReturnTarget.GetReturnOrientation
// 0x000C (0x000C - 0x0000)
struct MarinerArenaReturnTarget_GetReturnOrientation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArenaReturnTarget_GetReturnOrientation) == 0x000004, "Wrong alignment on MarinerArenaReturnTarget_GetReturnOrientation");
static_assert(sizeof(MarinerArenaReturnTarget_GetReturnOrientation) == 0x00000C, "Wrong size on MarinerArenaReturnTarget_GetReturnOrientation");
static_assert(offsetof(MarinerArenaReturnTarget_GetReturnOrientation, ReturnValue) == 0x000000, "Member 'MarinerArenaReturnTarget_GetReturnOrientation::ReturnValue' has a wrong offset!");

// Function Mariner.BTDecorator_MarinerCheckGameplayTagsOnActor.OnGameplayTagCountChanged
// 0x0018 (0x0018 - 0x0000)
struct BTDecorator_MarinerCheckGameplayTagsOnActor_OnGameplayTagCountChanged final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1468[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBehaviorTreeComponent*                 OwnerComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTDecorator_MarinerCheckGameplayTagsOnActor_OnGameplayTagCountChanged) == 0x000008, "Wrong alignment on BTDecorator_MarinerCheckGameplayTagsOnActor_OnGameplayTagCountChanged");
static_assert(sizeof(BTDecorator_MarinerCheckGameplayTagsOnActor_OnGameplayTagCountChanged) == 0x000018, "Wrong size on BTDecorator_MarinerCheckGameplayTagsOnActor_OnGameplayTagCountChanged");
static_assert(offsetof(BTDecorator_MarinerCheckGameplayTagsOnActor_OnGameplayTagCountChanged, GameplayTag) == 0x000000, "Member 'BTDecorator_MarinerCheckGameplayTagsOnActor_OnGameplayTagCountChanged::GameplayTag' has a wrong offset!");
static_assert(offsetof(BTDecorator_MarinerCheckGameplayTagsOnActor_OnGameplayTagCountChanged, Count) == 0x000008, "Member 'BTDecorator_MarinerCheckGameplayTagsOnActor_OnGameplayTagCountChanged::Count' has a wrong offset!");
static_assert(offsetof(BTDecorator_MarinerCheckGameplayTagsOnActor_OnGameplayTagCountChanged, OwnerComp) == 0x000010, "Member 'BTDecorator_MarinerCheckGameplayTagsOnActor_OnGameplayTagCountChanged::OwnerComp' has a wrong offset!");

// Function Mariner.MangoQuestManager.Get
// 0x0010 (0x0010 - 0x0000)
struct MangoQuestManager_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMangoQuestManager*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoQuestManager_Get) == 0x000008, "Wrong alignment on MangoQuestManager_Get");
static_assert(sizeof(MangoQuestManager_Get) == 0x000010, "Wrong size on MangoQuestManager_Get");
static_assert(offsetof(MangoQuestManager_Get, WorldContextObject) == 0x000000, "Member 'MangoQuestManager_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MangoQuestManager_Get, ReturnValue) == 0x000008, "Member 'MangoQuestManager_Get::ReturnValue' has a wrong offset!");

// Function Mariner.MangoQuestManager.ClaimQuestReward
// 0x0001 (0x0001 - 0x0000)
struct MangoQuestManager_ClaimQuestReward final
{
public:
	EMangoQuestSlot                               SlotId;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoQuestManager_ClaimQuestReward) == 0x000001, "Wrong alignment on MangoQuestManager_ClaimQuestReward");
static_assert(sizeof(MangoQuestManager_ClaimQuestReward) == 0x000001, "Wrong size on MangoQuestManager_ClaimQuestReward");
static_assert(offsetof(MangoQuestManager_ClaimQuestReward, SlotId) == 0x000000, "Member 'MangoQuestManager_ClaimQuestReward::SlotId' has a wrong offset!");

// Function Mariner.MangoQuestManager.DismissQuestSlot
// 0x0001 (0x0001 - 0x0000)
struct MangoQuestManager_DismissQuestSlot final
{
public:
	EMangoQuestSlot                               SlotId;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoQuestManager_DismissQuestSlot) == 0x000001, "Wrong alignment on MangoQuestManager_DismissQuestSlot");
static_assert(sizeof(MangoQuestManager_DismissQuestSlot) == 0x000001, "Wrong size on MangoQuestManager_DismissQuestSlot");
static_assert(offsetof(MangoQuestManager_DismissQuestSlot, SlotId) == 0x000000, "Member 'MangoQuestManager_DismissQuestSlot::SlotId' has a wrong offset!");

// Function Mariner.MangoQuestManager.GetLoginQuestSelectedReward
// 0x00E0 (0x00E0 - 0x0000)
struct MangoQuestManager_GetLoginQuestSelectedReward final
{
public:
	struct FMangoLoginReward                      OutLoginReward;                                    // 0x0000(0x00D8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_146B[0x7];                                     // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoQuestManager_GetLoginQuestSelectedReward) == 0x000008, "Wrong alignment on MangoQuestManager_GetLoginQuestSelectedReward");
static_assert(sizeof(MangoQuestManager_GetLoginQuestSelectedReward) == 0x0000E0, "Wrong size on MangoQuestManager_GetLoginQuestSelectedReward");
static_assert(offsetof(MangoQuestManager_GetLoginQuestSelectedReward, OutLoginReward) == 0x000000, "Member 'MangoQuestManager_GetLoginQuestSelectedReward::OutLoginReward' has a wrong offset!");
static_assert(offsetof(MangoQuestManager_GetLoginQuestSelectedReward, ReturnValue) == 0x0000D8, "Member 'MangoQuestManager_GetLoginQuestSelectedReward::ReturnValue' has a wrong offset!");

// Function Mariner.MangoQuestManager.GetQuestDescriptionBySlotId
// 0x0120 (0x0120 - 0x0000)
struct MangoQuestManager_GetQuestDescriptionBySlotId final
{
public:
	EMangoQuestSlot                               SlotId;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_146C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoQuestDescription                 ReturnValue;                                       // 0x0008(0x0118)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoQuestManager_GetQuestDescriptionBySlotId) == 0x000008, "Wrong alignment on MangoQuestManager_GetQuestDescriptionBySlotId");
static_assert(sizeof(MangoQuestManager_GetQuestDescriptionBySlotId) == 0x000120, "Wrong size on MangoQuestManager_GetQuestDescriptionBySlotId");
static_assert(offsetof(MangoQuestManager_GetQuestDescriptionBySlotId, SlotId) == 0x000000, "Member 'MangoQuestManager_GetQuestDescriptionBySlotId::SlotId' has a wrong offset!");
static_assert(offsetof(MangoQuestManager_GetQuestDescriptionBySlotId, ReturnValue) == 0x000008, "Member 'MangoQuestManager_GetQuestDescriptionBySlotId::ReturnValue' has a wrong offset!");

// Function Mariner.MangoQuestManager.GetQuestReward
// 0x00D8 (0x00D8 - 0x0000)
struct MangoQuestManager_GetQuestReward final
{
public:
	EMangoQuestSlot                               SlotId;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_146D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoQuestReward                      OutReward;                                         // 0x0008(0x00C8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_146E[0x7];                                     // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoQuestManager_GetQuestReward) == 0x000008, "Wrong alignment on MangoQuestManager_GetQuestReward");
static_assert(sizeof(MangoQuestManager_GetQuestReward) == 0x0000D8, "Wrong size on MangoQuestManager_GetQuestReward");
static_assert(offsetof(MangoQuestManager_GetQuestReward, SlotId) == 0x000000, "Member 'MangoQuestManager_GetQuestReward::SlotId' has a wrong offset!");
static_assert(offsetof(MangoQuestManager_GetQuestReward, OutReward) == 0x000008, "Member 'MangoQuestManager_GetQuestReward::OutReward' has a wrong offset!");
static_assert(offsetof(MangoQuestManager_GetQuestReward, ReturnValue) == 0x0000D0, "Member 'MangoQuestManager_GetQuestReward::ReturnValue' has a wrong offset!");

// Function Mariner.MangoQuestManager.SetLoginQuestSelectedReward
// 0x0008 (0x0008 - 0x0000)
struct MangoQuestManager_SetLoginQuestSelectedReward final
{
public:
	class FName                                   RewardId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoQuestManager_SetLoginQuestSelectedReward) == 0x000004, "Wrong alignment on MangoQuestManager_SetLoginQuestSelectedReward");
static_assert(sizeof(MangoQuestManager_SetLoginQuestSelectedReward) == 0x000008, "Wrong size on MangoQuestManager_SetLoginQuestSelectedReward");
static_assert(offsetof(MangoQuestManager_SetLoginQuestSelectedReward, RewardId) == 0x000000, "Member 'MangoQuestManager_SetLoginQuestSelectedReward::RewardId' has a wrong offset!");

// Function Mariner.MangoQuestManager.GetQuests
// 0x0010 (0x0010 - 0x0000)
struct MangoQuestManager_GetQuests final
{
public:
	TArray<struct FMangoQuestDescription>         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoQuestManager_GetQuests) == 0x000008, "Wrong alignment on MangoQuestManager_GetQuests");
static_assert(sizeof(MangoQuestManager_GetQuests) == 0x000010, "Wrong size on MangoQuestManager_GetQuests");
static_assert(offsetof(MangoQuestManager_GetQuests, ReturnValue) == 0x000000, "Member 'MangoQuestManager_GetQuests::ReturnValue' has a wrong offset!");

// Function Mariner.MangoQuestManager.HasUnclaimedQuestRewards
// 0x0001 (0x0001 - 0x0000)
struct MangoQuestManager_HasUnclaimedQuestRewards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoQuestManager_HasUnclaimedQuestRewards) == 0x000001, "Wrong alignment on MangoQuestManager_HasUnclaimedQuestRewards");
static_assert(sizeof(MangoQuestManager_HasUnclaimedQuestRewards) == 0x000001, "Wrong size on MangoQuestManager_HasUnclaimedQuestRewards");
static_assert(offsetof(MangoQuestManager_HasUnclaimedQuestRewards, ReturnValue) == 0x000000, "Member 'MangoQuestManager_HasUnclaimedQuestRewards::ReturnValue' has a wrong offset!");

// Function Mariner.MangoQuestManager.IsQuestSlotBeingDismissed
// 0x0002 (0x0002 - 0x0000)
struct MangoQuestManager_IsQuestSlotBeingDismissed final
{
public:
	EMangoQuestSlot                               SlotId;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoQuestManager_IsQuestSlotBeingDismissed) == 0x000001, "Wrong alignment on MangoQuestManager_IsQuestSlotBeingDismissed");
static_assert(sizeof(MangoQuestManager_IsQuestSlotBeingDismissed) == 0x000002, "Wrong size on MangoQuestManager_IsQuestSlotBeingDismissed");
static_assert(offsetof(MangoQuestManager_IsQuestSlotBeingDismissed, SlotId) == 0x000000, "Member 'MangoQuestManager_IsQuestSlotBeingDismissed::SlotId' has a wrong offset!");
static_assert(offsetof(MangoQuestManager_IsQuestSlotBeingDismissed, ReturnValue) == 0x000001, "Member 'MangoQuestManager_IsQuestSlotBeingDismissed::ReturnValue' has a wrong offset!");

// Function Mariner.MangoQuestManager.IsQuestSlotRewardBeingClaimed
// 0x0002 (0x0002 - 0x0000)
struct MangoQuestManager_IsQuestSlotRewardBeingClaimed final
{
public:
	EMangoQuestSlot                               SlotId;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoQuestManager_IsQuestSlotRewardBeingClaimed) == 0x000001, "Wrong alignment on MangoQuestManager_IsQuestSlotRewardBeingClaimed");
static_assert(sizeof(MangoQuestManager_IsQuestSlotRewardBeingClaimed) == 0x000002, "Wrong size on MangoQuestManager_IsQuestSlotRewardBeingClaimed");
static_assert(offsetof(MangoQuestManager_IsQuestSlotRewardBeingClaimed, SlotId) == 0x000000, "Member 'MangoQuestManager_IsQuestSlotRewardBeingClaimed::SlotId' has a wrong offset!");
static_assert(offsetof(MangoQuestManager_IsQuestSlotRewardBeingClaimed, ReturnValue) == 0x000001, "Member 'MangoQuestManager_IsQuestSlotRewardBeingClaimed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAnimatedWidget.ClearActiveOrNextAnimateOutDelay
// 0x0001 (0x0001 - 0x0000)
struct MarinerAnimatedWidget_ClearActiveOrNextAnimateOutDelay final
{
public:
	bool                                          bClear;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimatedWidget_ClearActiveOrNextAnimateOutDelay) == 0x000001, "Wrong alignment on MarinerAnimatedWidget_ClearActiveOrNextAnimateOutDelay");
static_assert(sizeof(MarinerAnimatedWidget_ClearActiveOrNextAnimateOutDelay) == 0x000001, "Wrong size on MarinerAnimatedWidget_ClearActiveOrNextAnimateOutDelay");
static_assert(offsetof(MarinerAnimatedWidget_ClearActiveOrNextAnimateOutDelay, bClear) == 0x000000, "Member 'MarinerAnimatedWidget_ClearActiveOrNextAnimateOutDelay::bClear' has a wrong offset!");

// Function Mariner.MarinerAnimatedWidget.Populate
// 0x0001 (0x0001 - 0x0000)
struct MarinerAnimatedWidget_Populate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimatedWidget_Populate) == 0x000001, "Wrong alignment on MarinerAnimatedWidget_Populate");
static_assert(sizeof(MarinerAnimatedWidget_Populate) == 0x000001, "Wrong size on MarinerAnimatedWidget_Populate");
static_assert(offsetof(MarinerAnimatedWidget_Populate, ReturnValue) == 0x000000, "Member 'MarinerAnimatedWidget_Populate::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAnimatedWidget.SetAnimationOffParameters
// 0x002C (0x002C - 0x0000)
struct MarinerAnimatedWidget_SetAnimationOffParameters final
{
public:
	struct FInterpolationParameters               OffParameters;                                     // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimatedWidget_SetAnimationOffParameters) == 0x000004, "Wrong alignment on MarinerAnimatedWidget_SetAnimationOffParameters");
static_assert(sizeof(MarinerAnimatedWidget_SetAnimationOffParameters) == 0x00002C, "Wrong size on MarinerAnimatedWidget_SetAnimationOffParameters");
static_assert(offsetof(MarinerAnimatedWidget_SetAnimationOffParameters, OffParameters) == 0x000000, "Member 'MarinerAnimatedWidget_SetAnimationOffParameters::OffParameters' has a wrong offset!");

// Function Mariner.MarinerAnimatedWidget.SetAnimationOnParameters
// 0x002C (0x002C - 0x0000)
struct MarinerAnimatedWidget_SetAnimationOnParameters final
{
public:
	struct FInterpolationParameters               OnParameters;                                      // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimatedWidget_SetAnimationOnParameters) == 0x000004, "Wrong alignment on MarinerAnimatedWidget_SetAnimationOnParameters");
static_assert(sizeof(MarinerAnimatedWidget_SetAnimationOnParameters) == 0x00002C, "Wrong size on MarinerAnimatedWidget_SetAnimationOnParameters");
static_assert(offsetof(MarinerAnimatedWidget_SetAnimationOnParameters, OnParameters) == 0x000000, "Member 'MarinerAnimatedWidget_SetAnimationOnParameters::OnParameters' has a wrong offset!");

// Function Mariner.MarinerAnimatedWidget.SetForcedOn
// 0x0001 (0x0001 - 0x0000)
struct MarinerAnimatedWidget_SetForcedOn final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimatedWidget_SetForcedOn) == 0x000001, "Wrong alignment on MarinerAnimatedWidget_SetForcedOn");
static_assert(sizeof(MarinerAnimatedWidget_SetForcedOn) == 0x000001, "Wrong size on MarinerAnimatedWidget_SetForcedOn");
static_assert(offsetof(MarinerAnimatedWidget_SetForcedOn, bEnabled) == 0x000000, "Member 'MarinerAnimatedWidget_SetForcedOn::bEnabled' has a wrong offset!");

// Function Mariner.MarinerAnimatedWidget.SetOnTimerCompleted
// 0x0008 (0x0008 - 0x0000)
struct MarinerAnimatedWidget_SetOnTimerCompleted final
{
public:
	float                                         OutDurationOverride;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1471[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAnimatedWidget_SetOnTimerCompleted) == 0x000004, "Wrong alignment on MarinerAnimatedWidget_SetOnTimerCompleted");
static_assert(sizeof(MarinerAnimatedWidget_SetOnTimerCompleted) == 0x000008, "Wrong size on MarinerAnimatedWidget_SetOnTimerCompleted");
static_assert(offsetof(MarinerAnimatedWidget_SetOnTimerCompleted, OutDurationOverride) == 0x000000, "Member 'MarinerAnimatedWidget_SetOnTimerCompleted::OutDurationOverride' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedWidget_SetOnTimerCompleted, ReturnValue) == 0x000004, "Member 'MarinerAnimatedWidget_SetOnTimerCompleted::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAnimatedWidget.SetWidgetAnimationDirty
// 0x0008 (0x0008 - 0x0000)
struct MarinerAnimatedWidget_SetWidgetAnimationDirty final
{
public:
	float                                         OnDurationOverride;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDurationOverride;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimatedWidget_SetWidgetAnimationDirty) == 0x000004, "Wrong alignment on MarinerAnimatedWidget_SetWidgetAnimationDirty");
static_assert(sizeof(MarinerAnimatedWidget_SetWidgetAnimationDirty) == 0x000008, "Wrong size on MarinerAnimatedWidget_SetWidgetAnimationDirty");
static_assert(offsetof(MarinerAnimatedWidget_SetWidgetAnimationDirty, OnDurationOverride) == 0x000000, "Member 'MarinerAnimatedWidget_SetWidgetAnimationDirty::OnDurationOverride' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedWidget_SetWidgetAnimationDirty, OutDurationOverride) == 0x000004, "Member 'MarinerAnimatedWidget_SetWidgetAnimationDirty::OutDurationOverride' has a wrong offset!");

// Function Mariner.MarinerAnimatedWidget.GetWidgetActive
// 0x0001 (0x0001 - 0x0000)
struct MarinerAnimatedWidget_GetWidgetActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimatedWidget_GetWidgetActive) == 0x000001, "Wrong alignment on MarinerAnimatedWidget_GetWidgetActive");
static_assert(sizeof(MarinerAnimatedWidget_GetWidgetActive) == 0x000001, "Wrong size on MarinerAnimatedWidget_GetWidgetActive");
static_assert(offsetof(MarinerAnimatedWidget_GetWidgetActive, ReturnValue) == 0x000000, "Member 'MarinerAnimatedWidget_GetWidgetActive::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAnimatedWidget.GetWidgetAnimationState
// 0x0001 (0x0001 - 0x0000)
struct MarinerAnimatedWidget_GetWidgetAnimationState final
{
public:
	EWidgetAnimationState                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimatedWidget_GetWidgetAnimationState) == 0x000001, "Wrong alignment on MarinerAnimatedWidget_GetWidgetAnimationState");
static_assert(sizeof(MarinerAnimatedWidget_GetWidgetAnimationState) == 0x000001, "Wrong size on MarinerAnimatedWidget_GetWidgetAnimationState");
static_assert(offsetof(MarinerAnimatedWidget_GetWidgetAnimationState, ReturnValue) == 0x000000, "Member 'MarinerAnimatedWidget_GetWidgetAnimationState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackLayer.AddHostPrompt
// 0x0120 (0x0120 - 0x0000)
struct MarinerMenuStackLayer_AddHostPrompt final
{
public:
	struct FMarinerPromptData                     PromptData;                                        // 0x0000(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1477[0x7];                                     // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackLayer_AddHostPrompt) == 0x000008, "Wrong alignment on MarinerMenuStackLayer_AddHostPrompt");
static_assert(sizeof(MarinerMenuStackLayer_AddHostPrompt) == 0x000120, "Wrong size on MarinerMenuStackLayer_AddHostPrompt");
static_assert(offsetof(MarinerMenuStackLayer_AddHostPrompt, PromptData) == 0x000000, "Member 'MarinerMenuStackLayer_AddHostPrompt::PromptData' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackLayer_AddHostPrompt, ReturnValue) == 0x000118, "Member 'MarinerMenuStackLayer_AddHostPrompt::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackLayer.ApplyLayerCamera
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackLayer_ApplyLayerCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackLayer_ApplyLayerCamera) == 0x000001, "Wrong alignment on MarinerMenuStackLayer_ApplyLayerCamera");
static_assert(sizeof(MarinerMenuStackLayer_ApplyLayerCamera) == 0x000001, "Wrong size on MarinerMenuStackLayer_ApplyLayerCamera");
static_assert(offsetof(MarinerMenuStackLayer_ApplyLayerCamera, ReturnValue) == 0x000000, "Member 'MarinerMenuStackLayer_ApplyLayerCamera::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackLayer.BP_OnEntered
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackLayer_BP_OnEntered final
{
public:
	bool                                          bFromSubMenu;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackLayer_BP_OnEntered) == 0x000001, "Wrong alignment on MarinerMenuStackLayer_BP_OnEntered");
static_assert(sizeof(MarinerMenuStackLayer_BP_OnEntered) == 0x000001, "Wrong size on MarinerMenuStackLayer_BP_OnEntered");
static_assert(offsetof(MarinerMenuStackLayer_BP_OnEntered, bFromSubMenu) == 0x000000, "Member 'MarinerMenuStackLayer_BP_OnEntered::bFromSubMenu' has a wrong offset!");

// Function Mariner.MarinerMenuStackLayer.BP_OnExited
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackLayer_BP_OnExited final
{
public:
	bool                                          bToSubLayer;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackLayer_BP_OnExited) == 0x000001, "Wrong alignment on MarinerMenuStackLayer_BP_OnExited");
static_assert(sizeof(MarinerMenuStackLayer_BP_OnExited) == 0x000001, "Wrong size on MarinerMenuStackLayer_BP_OnExited");
static_assert(offsetof(MarinerMenuStackLayer_BP_OnExited, bToSubLayer) == 0x000000, "Member 'MarinerMenuStackLayer_BP_OnExited::bToSubLayer' has a wrong offset!");

// Function Mariner.MarinerMenuStackLayer.ClearHostPrompts
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackLayer_ClearHostPrompts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackLayer_ClearHostPrompts) == 0x000001, "Wrong alignment on MarinerMenuStackLayer_ClearHostPrompts");
static_assert(sizeof(MarinerMenuStackLayer_ClearHostPrompts) == 0x000001, "Wrong size on MarinerMenuStackLayer_ClearHostPrompts");
static_assert(offsetof(MarinerMenuStackLayer_ClearHostPrompts, ReturnValue) == 0x000000, "Member 'MarinerMenuStackLayer_ClearHostPrompts::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackLayer.GetHostStackHeader
// 0x0008 (0x0008 - 0x0000)
struct MarinerMenuStackLayer_GetHostStackHeader final
{
public:
	class UMarinerStackHeader*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackLayer_GetHostStackHeader) == 0x000008, "Wrong alignment on MarinerMenuStackLayer_GetHostStackHeader");
static_assert(sizeof(MarinerMenuStackLayer_GetHostStackHeader) == 0x000008, "Wrong size on MarinerMenuStackLayer_GetHostStackHeader");
static_assert(offsetof(MarinerMenuStackLayer_GetHostStackHeader, ReturnValue) == 0x000000, "Member 'MarinerMenuStackLayer_GetHostStackHeader::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackLayer.RemoveSelf
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackLayer_RemoveSelf final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackLayer_RemoveSelf) == 0x000001, "Wrong alignment on MarinerMenuStackLayer_RemoveSelf");
static_assert(sizeof(MarinerMenuStackLayer_RemoveSelf) == 0x000001, "Wrong size on MarinerMenuStackLayer_RemoveSelf");
static_assert(offsetof(MarinerMenuStackLayer_RemoveSelf, ReturnValue) == 0x000000, "Member 'MarinerMenuStackLayer_RemoveSelf::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackLayer.SetHostCustomTooltip
// 0x0018 (0x0018 - 0x0000)
struct MarinerMenuStackLayer_SetHostCustomTooltip final
{
public:
	class FText                                   ToolTip;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackLayer_SetHostCustomTooltip) == 0x000008, "Wrong alignment on MarinerMenuStackLayer_SetHostCustomTooltip");
static_assert(sizeof(MarinerMenuStackLayer_SetHostCustomTooltip) == 0x000018, "Wrong size on MarinerMenuStackLayer_SetHostCustomTooltip");
static_assert(offsetof(MarinerMenuStackLayer_SetHostCustomTooltip, ToolTip) == 0x000000, "Member 'MarinerMenuStackLayer_SetHostCustomTooltip::ToolTip' has a wrong offset!");

// Function Mariner.MarinerMenuStackLayer.SetLayerTooltip
// 0x0018 (0x0018 - 0x0000)
struct MarinerMenuStackLayer_SetLayerTooltip final
{
public:
	class FText                                   ToolTip;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackLayer_SetLayerTooltip) == 0x000008, "Wrong alignment on MarinerMenuStackLayer_SetLayerTooltip");
static_assert(sizeof(MarinerMenuStackLayer_SetLayerTooltip) == 0x000018, "Wrong size on MarinerMenuStackLayer_SetLayerTooltip");
static_assert(offsetof(MarinerMenuStackLayer_SetLayerTooltip, ToolTip) == 0x000000, "Member 'MarinerMenuStackLayer_SetLayerTooltip::ToolTip' has a wrong offset!");

// Function Mariner.MarinerMenuStackLayer.SetMenuBackgroundAllowed
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackLayer_SetMenuBackgroundAllowed final
{
public:
	bool                                          bAllowed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackLayer_SetMenuBackgroundAllowed) == 0x000001, "Wrong alignment on MarinerMenuStackLayer_SetMenuBackgroundAllowed");
static_assert(sizeof(MarinerMenuStackLayer_SetMenuBackgroundAllowed) == 0x000001, "Wrong size on MarinerMenuStackLayer_SetMenuBackgroundAllowed");
static_assert(offsetof(MarinerMenuStackLayer_SetMenuBackgroundAllowed, bAllowed) == 0x000000, "Member 'MarinerMenuStackLayer_SetMenuBackgroundAllowed::bAllowed' has a wrong offset!");

// Function Mariner.MarinerMenuStackLayer.IsActive
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackLayer_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackLayer_IsActive) == 0x000001, "Wrong alignment on MarinerMenuStackLayer_IsActive");
static_assert(sizeof(MarinerMenuStackLayer_IsActive) == 0x000001, "Wrong size on MarinerMenuStackLayer_IsActive");
static_assert(offsetof(MarinerMenuStackLayer_IsActive, ReturnValue) == 0x000000, "Member 'MarinerMenuStackLayer_IsActive::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackLayer.ShouldShowPrompts
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackLayer_ShouldShowPrompts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackLayer_ShouldShowPrompts) == 0x000001, "Wrong alignment on MarinerMenuStackLayer_ShouldShowPrompts");
static_assert(sizeof(MarinerMenuStackLayer_ShouldShowPrompts) == 0x000001, "Wrong size on MarinerMenuStackLayer_ShouldShowPrompts");
static_assert(offsetof(MarinerMenuStackLayer_ShouldShowPrompts, ReturnValue) == 0x000000, "Member 'MarinerMenuStackLayer_ShouldShowPrompts::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSettingMenuBase.OnFullScreenToggled
// 0x0001 (0x0001 - 0x0000)
struct MarinerSettingMenuBase_OnFullScreenToggled final
{
public:
	bool                                          bFullScreen;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingMenuBase_OnFullScreenToggled) == 0x000001, "Wrong alignment on MarinerSettingMenuBase_OnFullScreenToggled");
static_assert(sizeof(MarinerSettingMenuBase_OnFullScreenToggled) == 0x000001, "Wrong size on MarinerSettingMenuBase_OnFullScreenToggled");
static_assert(offsetof(MarinerSettingMenuBase_OnFullScreenToggled, bFullScreen) == 0x000000, "Member 'MarinerSettingMenuBase_OnFullScreenToggled::bFullScreen' has a wrong offset!");

// Function Mariner.MarinerAsyncUIFlowHandler.Get
// 0x0018 (0x0018 - 0x0000)
struct MarinerAsyncUIFlowHandler_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerAsyncUIFlowHandler> ObjectType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerAsyncUIFlowHandler*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncUIFlowHandler_Get) == 0x000008, "Wrong alignment on MarinerAsyncUIFlowHandler_Get");
static_assert(sizeof(MarinerAsyncUIFlowHandler_Get) == 0x000018, "Wrong size on MarinerAsyncUIFlowHandler_Get");
static_assert(offsetof(MarinerAsyncUIFlowHandler_Get, WorldContextObject) == 0x000000, "Member 'MarinerAsyncUIFlowHandler_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerAsyncUIFlowHandler_Get, ObjectType) == 0x000008, "Member 'MarinerAsyncUIFlowHandler_Get::ObjectType' has a wrong offset!");
static_assert(offsetof(MarinerAsyncUIFlowHandler_Get, ReturnValue) == 0x000010, "Member 'MarinerAsyncUIFlowHandler_Get::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAsyncUIFlowHandler.GetWithContext
// 0x0018 (0x0018 - 0x0000)
struct MarinerAsyncUIFlowHandler_GetWithContext final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerAsyncUIFlowHandler> ObjectType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerAsyncUIFlowHandler*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncUIFlowHandler_GetWithContext) == 0x000008, "Wrong alignment on MarinerAsyncUIFlowHandler_GetWithContext");
static_assert(sizeof(MarinerAsyncUIFlowHandler_GetWithContext) == 0x000018, "Wrong size on MarinerAsyncUIFlowHandler_GetWithContext");
static_assert(offsetof(MarinerAsyncUIFlowHandler_GetWithContext, WorldContextObject) == 0x000000, "Member 'MarinerAsyncUIFlowHandler_GetWithContext::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerAsyncUIFlowHandler_GetWithContext, ObjectType) == 0x000008, "Member 'MarinerAsyncUIFlowHandler_GetWithContext::ObjectType' has a wrong offset!");
static_assert(offsetof(MarinerAsyncUIFlowHandler_GetWithContext, ReturnValue) == 0x000010, "Member 'MarinerAsyncUIFlowHandler_GetWithContext::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAsyncUIFlowHandler.GetMarinerGameInstance
// 0x0008 (0x0008 - 0x0000)
struct MarinerAsyncUIFlowHandler_GetMarinerGameInstance final
{
public:
	class UMarinerGameInstance*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncUIFlowHandler_GetMarinerGameInstance) == 0x000008, "Wrong alignment on MarinerAsyncUIFlowHandler_GetMarinerGameInstance");
static_assert(sizeof(MarinerAsyncUIFlowHandler_GetMarinerGameInstance) == 0x000008, "Wrong size on MarinerAsyncUIFlowHandler_GetMarinerGameInstance");
static_assert(offsetof(MarinerAsyncUIFlowHandler_GetMarinerGameInstance, ReturnValue) == 0x000000, "Member 'MarinerAsyncUIFlowHandler_GetMarinerGameInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowInGameStore.SetInGameStoreActive
// 0x0002 (0x0002 - 0x0000)
struct MarinerAsyncFlowInGameStore_SetInGameStoreActive final
{
public:
	bool                                          bInActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowInGameStore_SetInGameStoreActive) == 0x000001, "Wrong alignment on MarinerAsyncFlowInGameStore_SetInGameStoreActive");
static_assert(sizeof(MarinerAsyncFlowInGameStore_SetInGameStoreActive) == 0x000002, "Wrong size on MarinerAsyncFlowInGameStore_SetInGameStoreActive");
static_assert(offsetof(MarinerAsyncFlowInGameStore_SetInGameStoreActive, bInActive) == 0x000000, "Member 'MarinerAsyncFlowInGameStore_SetInGameStoreActive::bInActive' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowInGameStore_SetInGameStoreActive, ReturnValue) == 0x000001, "Member 'MarinerAsyncFlowInGameStore_SetInGameStoreActive::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowInGameStore.SetInGameStorePurchaseActive
// 0x0001 (0x0001 - 0x0000)
struct MarinerAsyncFlowInGameStore_SetInGameStorePurchaseActive final
{
public:
	bool                                          bInActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowInGameStore_SetInGameStorePurchaseActive) == 0x000001, "Wrong alignment on MarinerAsyncFlowInGameStore_SetInGameStorePurchaseActive");
static_assert(sizeof(MarinerAsyncFlowInGameStore_SetInGameStorePurchaseActive) == 0x000001, "Wrong size on MarinerAsyncFlowInGameStore_SetInGameStorePurchaseActive");
static_assert(offsetof(MarinerAsyncFlowInGameStore_SetInGameStorePurchaseActive, bInActive) == 0x000000, "Member 'MarinerAsyncFlowInGameStore_SetInGameStorePurchaseActive::bInActive' has a wrong offset!");

// Function Mariner.MarinerLoadCMSItemData.LoadItemData
// 0x0020 (0x0020 - 0x0000)
struct MarinerLoadCMSItemData_LoadItemData final
{
public:
	const class UObject*                          Param_WorldContextObject;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoItem>                     ItemData;                                          // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMarinerLoadCMSItemData*                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLoadCMSItemData_LoadItemData) == 0x000008, "Wrong alignment on MarinerLoadCMSItemData_LoadItemData");
static_assert(sizeof(MarinerLoadCMSItemData_LoadItemData) == 0x000020, "Wrong size on MarinerLoadCMSItemData_LoadItemData");
static_assert(offsetof(MarinerLoadCMSItemData_LoadItemData, Param_WorldContextObject) == 0x000000, "Member 'MarinerLoadCMSItemData_LoadItemData::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerLoadCMSItemData_LoadItemData, ItemData) == 0x000008, "Member 'MarinerLoadCMSItemData_LoadItemData::ItemData' has a wrong offset!");
static_assert(offsetof(MarinerLoadCMSItemData_LoadItemData, ReturnValue) == 0x000018, "Member 'MarinerLoadCMSItemData_LoadItemData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSocialMenu.OnActivateGroupInvite
// 0x0018 (0x0018 - 0x0000)
struct MarinerSocialMenu_OnActivateGroupInvite final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSocialMenu_OnActivateGroupInvite) == 0x000008, "Wrong alignment on MarinerSocialMenu_OnActivateGroupInvite");
static_assert(sizeof(MarinerSocialMenu_OnActivateGroupInvite) == 0x000018, "Wrong size on MarinerSocialMenu_OnActivateGroupInvite");
static_assert(offsetof(MarinerSocialMenu_OnActivateGroupInvite, KeyPressed) == 0x000000, "Member 'MarinerSocialMenu_OnActivateGroupInvite::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerSocialMenu.OnCancelGroupInvite
// 0x0018 (0x0018 - 0x0000)
struct MarinerSocialMenu_OnCancelGroupInvite final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSocialMenu_OnCancelGroupInvite) == 0x000008, "Wrong alignment on MarinerSocialMenu_OnCancelGroupInvite");
static_assert(sizeof(MarinerSocialMenu_OnCancelGroupInvite) == 0x000018, "Wrong size on MarinerSocialMenu_OnCancelGroupInvite");
static_assert(offsetof(MarinerSocialMenu_OnCancelGroupInvite, KeyPressed) == 0x000000, "Member 'MarinerSocialMenu_OnCancelGroupInvite::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerSocialMenu.OnConfirmGroupInvite
// 0x0018 (0x0018 - 0x0000)
struct MarinerSocialMenu_OnConfirmGroupInvite final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSocialMenu_OnConfirmGroupInvite) == 0x000008, "Wrong alignment on MarinerSocialMenu_OnConfirmGroupInvite");
static_assert(sizeof(MarinerSocialMenu_OnConfirmGroupInvite) == 0x000018, "Wrong size on MarinerSocialMenu_OnConfirmGroupInvite");
static_assert(offsetof(MarinerSocialMenu_OnConfirmGroupInvite, KeyPressed) == 0x000000, "Member 'MarinerSocialMenu_OnConfirmGroupInvite::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerSocialMenu.OnDropdownOnPageOpened
// 0x0001 (0x0001 - 0x0000)
struct MarinerSocialMenu_OnDropdownOnPageOpened final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSocialMenu_OnDropdownOnPageOpened) == 0x000001, "Wrong alignment on MarinerSocialMenu_OnDropdownOnPageOpened");
static_assert(sizeof(MarinerSocialMenu_OnDropdownOnPageOpened) == 0x000001, "Wrong size on MarinerSocialMenu_OnDropdownOnPageOpened");
static_assert(offsetof(MarinerSocialMenu_OnDropdownOnPageOpened, bOpen) == 0x000000, "Member 'MarinerSocialMenu_OnDropdownOnPageOpened::bOpen' has a wrong offset!");

// Function Mariner.MarinerMapGlobals.GetSoftImage
// 0x0030 (0x0030 - 0x0000)
struct MarinerMapGlobals_GetSoftImage final
{
public:
	class FName                                   ImageLookupId;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMapGlobals_GetSoftImage) == 0x000008, "Wrong alignment on MarinerMapGlobals_GetSoftImage");
static_assert(sizeof(MarinerMapGlobals_GetSoftImage) == 0x000030, "Wrong size on MarinerMapGlobals_GetSoftImage");
static_assert(offsetof(MarinerMapGlobals_GetSoftImage, ImageLookupId) == 0x000000, "Member 'MarinerMapGlobals_GetSoftImage::ImageLookupId' has a wrong offset!");
static_assert(offsetof(MarinerMapGlobals_GetSoftImage, ReturnValue) == 0x000008, "Member 'MarinerMapGlobals_GetSoftImage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMapGlobals.IsMapValid
// 0x0020 (0x0020 - 0x0000)
struct MarinerMapGlobals_IsMapValid final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CmsId;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1483[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMapGlobals_IsMapValid) == 0x000008, "Wrong alignment on MarinerMapGlobals_IsMapValid");
static_assert(sizeof(MarinerMapGlobals_IsMapValid) == 0x000020, "Wrong size on MarinerMapGlobals_IsMapValid");
static_assert(offsetof(MarinerMapGlobals_IsMapValid, WorldContextObject) == 0x000000, "Member 'MarinerMapGlobals_IsMapValid::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerMapGlobals_IsMapValid, CmsId) == 0x000008, "Member 'MarinerMapGlobals_IsMapValid::CmsId' has a wrong offset!");
static_assert(offsetof(MarinerMapGlobals_IsMapValid, ReturnValue) == 0x000018, "Member 'MarinerMapGlobals_IsMapValid::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMapGlobals.TryAndGetMangoMapFromCurrentMap
// 0x0070 (0x0070 - 0x0000)
struct MarinerMapGlobals_TryAndGetMangoMapFromCurrentMap final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1484[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoMap                              ReturnValue;                                       // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMapGlobals_TryAndGetMangoMapFromCurrentMap) == 0x000008, "Wrong alignment on MarinerMapGlobals_TryAndGetMangoMapFromCurrentMap");
static_assert(sizeof(MarinerMapGlobals_TryAndGetMangoMapFromCurrentMap) == 0x000070, "Wrong size on MarinerMapGlobals_TryAndGetMangoMapFromCurrentMap");
static_assert(offsetof(MarinerMapGlobals_TryAndGetMangoMapFromCurrentMap, WorldContextObject) == 0x000000, "Member 'MarinerMapGlobals_TryAndGetMangoMapFromCurrentMap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerMapGlobals_TryAndGetMangoMapFromCurrentMap, bIsValid) == 0x000008, "Member 'MarinerMapGlobals_TryAndGetMangoMapFromCurrentMap::bIsValid' has a wrong offset!");
static_assert(offsetof(MarinerMapGlobals_TryAndGetMangoMapFromCurrentMap, ReturnValue) == 0x000010, "Member 'MarinerMapGlobals_TryAndGetMangoMapFromCurrentMap::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMapGlobals.TryAndGetMangoMapFromLoadName
// 0x0080 (0x0080 - 0x0000)
struct MarinerMapGlobals_TryAndGetMangoMapFromLoadName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoadName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1485[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoMap                              ReturnValue;                                       // 0x0020(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMapGlobals_TryAndGetMangoMapFromLoadName) == 0x000008, "Wrong alignment on MarinerMapGlobals_TryAndGetMangoMapFromLoadName");
static_assert(sizeof(MarinerMapGlobals_TryAndGetMangoMapFromLoadName) == 0x000080, "Wrong size on MarinerMapGlobals_TryAndGetMangoMapFromLoadName");
static_assert(offsetof(MarinerMapGlobals_TryAndGetMangoMapFromLoadName, WorldContextObject) == 0x000000, "Member 'MarinerMapGlobals_TryAndGetMangoMapFromLoadName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerMapGlobals_TryAndGetMangoMapFromLoadName, LoadName) == 0x000008, "Member 'MarinerMapGlobals_TryAndGetMangoMapFromLoadName::LoadName' has a wrong offset!");
static_assert(offsetof(MarinerMapGlobals_TryAndGetMangoMapFromLoadName, bIsValid) == 0x000018, "Member 'MarinerMapGlobals_TryAndGetMangoMapFromLoadName::bIsValid' has a wrong offset!");
static_assert(offsetof(MarinerMapGlobals_TryAndGetMangoMapFromLoadName, ReturnValue) == 0x000020, "Member 'MarinerMapGlobals_TryAndGetMangoMapFromLoadName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMapGlobals.TryAndGetMapDataFromLoadName
// 0x0018 (0x0018 - 0x0000)
struct MarinerMapGlobals_TryAndGetMapDataFromLoadName final
{
public:
	class FString                                 LoadName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerMapDataAsset*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMapGlobals_TryAndGetMapDataFromLoadName) == 0x000008, "Wrong alignment on MarinerMapGlobals_TryAndGetMapDataFromLoadName");
static_assert(sizeof(MarinerMapGlobals_TryAndGetMapDataFromLoadName) == 0x000018, "Wrong size on MarinerMapGlobals_TryAndGetMapDataFromLoadName");
static_assert(offsetof(MarinerMapGlobals_TryAndGetMapDataFromLoadName, LoadName) == 0x000000, "Member 'MarinerMapGlobals_TryAndGetMapDataFromLoadName::LoadName' has a wrong offset!");
static_assert(offsetof(MarinerMapGlobals_TryAndGetMapDataFromLoadName, ReturnValue) == 0x000010, "Member 'MarinerMapGlobals_TryAndGetMapDataFromLoadName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMapGlobals.TryAndGetMapDataFromMapName
// 0x0018 (0x0018 - 0x0000)
struct MarinerMapGlobals_TryAndGetMapDataFromMapName final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerMapDataAsset*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMapGlobals_TryAndGetMapDataFromMapName) == 0x000008, "Wrong alignment on MarinerMapGlobals_TryAndGetMapDataFromMapName");
static_assert(sizeof(MarinerMapGlobals_TryAndGetMapDataFromMapName) == 0x000018, "Wrong size on MarinerMapGlobals_TryAndGetMapDataFromMapName");
static_assert(offsetof(MarinerMapGlobals_TryAndGetMapDataFromMapName, MapName) == 0x000000, "Member 'MarinerMapGlobals_TryAndGetMapDataFromMapName::MapName' has a wrong offset!");
static_assert(offsetof(MarinerMapGlobals_TryAndGetMapDataFromMapName, ReturnValue) == 0x000010, "Member 'MarinerMapGlobals_TryAndGetMapDataFromMapName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.ApplyMoveAffectingGameplayEffectToOwningCharacter
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_ApplyMoveAffectingGameplayEffectToOwningCharacter final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148D[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbility_ApplyMoveAffectingGameplayEffectToOwningCharacter) == 0x000008, "Wrong alignment on MarinerAbility_ApplyMoveAffectingGameplayEffectToOwningCharacter");
static_assert(sizeof(MarinerAbility_ApplyMoveAffectingGameplayEffectToOwningCharacter) == 0x000010, "Wrong size on MarinerAbility_ApplyMoveAffectingGameplayEffectToOwningCharacter");
static_assert(offsetof(MarinerAbility_ApplyMoveAffectingGameplayEffectToOwningCharacter, GameplayEffectClass) == 0x000000, "Member 'MarinerAbility_ApplyMoveAffectingGameplayEffectToOwningCharacter::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(MarinerAbility_ApplyMoveAffectingGameplayEffectToOwningCharacter, Level) == 0x000008, "Member 'MarinerAbility_ApplyMoveAffectingGameplayEffectToOwningCharacter::Level' has a wrong offset!");

// Function Mariner.MarinerAbility.ApplyPredictiveGameplayEffect
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_ApplyPredictiveGameplayEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ApplyPredictiveGameplayEffect) == 0x000008, "Wrong alignment on MarinerAbility_ApplyPredictiveGameplayEffect");
static_assert(sizeof(MarinerAbility_ApplyPredictiveGameplayEffect) == 0x000008, "Wrong size on MarinerAbility_ApplyPredictiveGameplayEffect");
static_assert(offsetof(MarinerAbility_ApplyPredictiveGameplayEffect, GameplayEffect) == 0x000000, "Member 'MarinerAbility_ApplyPredictiveGameplayEffect::GameplayEffect' has a wrong offset!");

// Function Mariner.MarinerAbility.ApplySkin
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_ApplySkin final
{
public:
	class UMarinerAbilitySkinData_Base*           AbilitySkinData;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ApplySkin) == 0x000008, "Wrong alignment on MarinerAbility_ApplySkin");
static_assert(sizeof(MarinerAbility_ApplySkin) == 0x000008, "Wrong size on MarinerAbility_ApplySkin");
static_assert(offsetof(MarinerAbility_ApplySkin, AbilitySkinData) == 0x000000, "Member 'MarinerAbility_ApplySkin::AbilitySkinData' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_AddEffectsToDefaultApplyOnAbilityActivation
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_BP_AddEffectsToDefaultApplyOnAbilityActivation final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_AddEffectsToDefaultApplyOnAbilityActivation) == 0x000008, "Wrong alignment on MarinerAbility_BP_AddEffectsToDefaultApplyOnAbilityActivation");
static_assert(sizeof(MarinerAbility_BP_AddEffectsToDefaultApplyOnAbilityActivation) == 0x000010, "Wrong size on MarinerAbility_BP_AddEffectsToDefaultApplyOnAbilityActivation");
static_assert(offsetof(MarinerAbility_BP_AddEffectsToDefaultApplyOnAbilityActivation, ReturnValue) == 0x000000, "Member 'MarinerAbility_BP_AddEffectsToDefaultApplyOnAbilityActivation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_GetEventMagnitude
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_BP_GetEventMagnitude final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_GetEventMagnitude) == 0x000004, "Wrong alignment on MarinerAbility_BP_GetEventMagnitude");
static_assert(sizeof(MarinerAbility_BP_GetEventMagnitude) == 0x000004, "Wrong size on MarinerAbility_BP_GetEventMagnitude");
static_assert(offsetof(MarinerAbility_BP_GetEventMagnitude, ReturnValue) == 0x000000, "Member 'MarinerAbility_BP_GetEventMagnitude::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_GetExtraEffectsToApplyOnAbilityEnd
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityEnd final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityEnd) == 0x000008, "Wrong alignment on MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityEnd");
static_assert(sizeof(MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityEnd) == 0x000010, "Wrong size on MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityEnd");
static_assert(offsetof(MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityEnd, ReturnValue) == 0x000000, "Member 'MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityEnd::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_GetExtraEffectsToApplyOnAbilityInputPress
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputPress final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputPress) == 0x000008, "Wrong alignment on MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputPress");
static_assert(sizeof(MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputPress) == 0x000010, "Wrong size on MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputPress");
static_assert(offsetof(MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputPress, ReturnValue) == 0x000000, "Member 'MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputPress::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_GetExtraEffectsToApplyOnAbilityInputRelease
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputRelease final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputRelease) == 0x000008, "Wrong alignment on MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputRelease");
static_assert(sizeof(MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputRelease) == 0x000010, "Wrong size on MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputRelease");
static_assert(offsetof(MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputRelease, ReturnValue) == 0x000000, "Member 'MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputRelease::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_GetLaunchVector
// 0x000C (0x000C - 0x0000)
struct MarinerAbility_BP_GetLaunchVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_GetLaunchVector) == 0x000004, "Wrong alignment on MarinerAbility_BP_GetLaunchVector");
static_assert(sizeof(MarinerAbility_BP_GetLaunchVector) == 0x00000C, "Wrong size on MarinerAbility_BP_GetLaunchVector");
static_assert(offsetof(MarinerAbility_BP_GetLaunchVector, ReturnValue) == 0x000000, "Member 'MarinerAbility_BP_GetLaunchVector::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_OnAbilityActivated
// 0x0040 (0x0040 - 0x0000)
struct MarinerAbility_BP_OnAbilityActivated final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_OnAbilityActivated) == 0x000008, "Wrong alignment on MarinerAbility_BP_OnAbilityActivated");
static_assert(sizeof(MarinerAbility_BP_OnAbilityActivated) == 0x000040, "Wrong size on MarinerAbility_BP_OnAbilityActivated");
static_assert(offsetof(MarinerAbility_BP_OnAbilityActivated, ActorInfo) == 0x000000, "Member 'MarinerAbility_BP_OnAbilityActivated::ActorInfo' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_OnAbilityActivated_Authority
// 0x0040 (0x0040 - 0x0000)
struct MarinerAbility_BP_OnAbilityActivated_Authority final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_OnAbilityActivated_Authority) == 0x000008, "Wrong alignment on MarinerAbility_BP_OnAbilityActivated_Authority");
static_assert(sizeof(MarinerAbility_BP_OnAbilityActivated_Authority) == 0x000040, "Wrong size on MarinerAbility_BP_OnAbilityActivated_Authority");
static_assert(offsetof(MarinerAbility_BP_OnAbilityActivated_Authority, ActorInfo) == 0x000000, "Member 'MarinerAbility_BP_OnAbilityActivated_Authority::ActorInfo' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_OnAbilityEnded
// 0x0048 (0x0048 - 0x0000)
struct MarinerAbility_BP_OnAbilityEnded final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          WasCancelled;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148E[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbility_BP_OnAbilityEnded) == 0x000008, "Wrong alignment on MarinerAbility_BP_OnAbilityEnded");
static_assert(sizeof(MarinerAbility_BP_OnAbilityEnded) == 0x000048, "Wrong size on MarinerAbility_BP_OnAbilityEnded");
static_assert(offsetof(MarinerAbility_BP_OnAbilityEnded, ActorInfo) == 0x000000, "Member 'MarinerAbility_BP_OnAbilityEnded::ActorInfo' has a wrong offset!");
static_assert(offsetof(MarinerAbility_BP_OnAbilityEnded, WasCancelled) == 0x000040, "Member 'MarinerAbility_BP_OnAbilityEnded::WasCancelled' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_OnAbilityEnded_Authority
// 0x0048 (0x0048 - 0x0000)
struct MarinerAbility_BP_OnAbilityEnded_Authority final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          WasCancelled;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148F[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbility_BP_OnAbilityEnded_Authority) == 0x000008, "Wrong alignment on MarinerAbility_BP_OnAbilityEnded_Authority");
static_assert(sizeof(MarinerAbility_BP_OnAbilityEnded_Authority) == 0x000048, "Wrong size on MarinerAbility_BP_OnAbilityEnded_Authority");
static_assert(offsetof(MarinerAbility_BP_OnAbilityEnded_Authority, ActorInfo) == 0x000000, "Member 'MarinerAbility_BP_OnAbilityEnded_Authority::ActorInfo' has a wrong offset!");
static_assert(offsetof(MarinerAbility_BP_OnAbilityEnded_Authority, WasCancelled) == 0x000040, "Member 'MarinerAbility_BP_OnAbilityEnded_Authority::WasCancelled' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_OnAnyInputReceived
// 0x0002 (0x0002 - 0x0000)
struct MarinerAbility_BP_OnAnyInputReceived final
{
public:
	EMarinerInputActions                          InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   EventType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_OnAnyInputReceived) == 0x000001, "Wrong alignment on MarinerAbility_BP_OnAnyInputReceived");
static_assert(sizeof(MarinerAbility_BP_OnAnyInputReceived) == 0x000002, "Wrong size on MarinerAbility_BP_OnAnyInputReceived");
static_assert(offsetof(MarinerAbility_BP_OnAnyInputReceived, InputType) == 0x000000, "Member 'MarinerAbility_BP_OnAnyInputReceived::InputType' has a wrong offset!");
static_assert(offsetof(MarinerAbility_BP_OnAnyInputReceived, EventType) == 0x000001, "Member 'MarinerAbility_BP_OnAnyInputReceived::EventType' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_OnPriorityItemPickup
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_BP_OnPriorityItemPickup final
{
public:
	class AMarinerCharacter*                      CatchingCharacter;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerItemSlot                              ItemSlot;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1490[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbility_BP_OnPriorityItemPickup) == 0x000008, "Wrong alignment on MarinerAbility_BP_OnPriorityItemPickup");
static_assert(sizeof(MarinerAbility_BP_OnPriorityItemPickup) == 0x000010, "Wrong size on MarinerAbility_BP_OnPriorityItemPickup");
static_assert(offsetof(MarinerAbility_BP_OnPriorityItemPickup, CatchingCharacter) == 0x000000, "Member 'MarinerAbility_BP_OnPriorityItemPickup::CatchingCharacter' has a wrong offset!");
static_assert(offsetof(MarinerAbility_BP_OnPriorityItemPickup, ItemSlot) == 0x000008, "Member 'MarinerAbility_BP_OnPriorityItemPickup::ItemSlot' has a wrong offset!");

// Function Mariner.MarinerAbility.GetAimData
// 0x0050 (0x0050 - 0x0000)
struct MarinerAbility_GetAimData final
{
public:
	struct FMarinerGameplayAbilityTargetData_Aim  ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_GetAimData) == 0x000008, "Wrong alignment on MarinerAbility_GetAimData");
static_assert(sizeof(MarinerAbility_GetAimData) == 0x000050, "Wrong size on MarinerAbility_GetAimData");
static_assert(offsetof(MarinerAbility_GetAimData, ReturnValue) == 0x000000, "Member 'MarinerAbility_GetAimData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.ManuallyApplyCooldownIfAble
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_ManuallyApplyCooldownIfAble final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ManuallyApplyCooldownIfAble) == 0x000001, "Wrong alignment on MarinerAbility_ManuallyApplyCooldownIfAble");
static_assert(sizeof(MarinerAbility_ManuallyApplyCooldownIfAble) == 0x000001, "Wrong size on MarinerAbility_ManuallyApplyCooldownIfAble");
static_assert(offsetof(MarinerAbility_ManuallyApplyCooldownIfAble, ReturnValue) == 0x000000, "Member 'MarinerAbility_ManuallyApplyCooldownIfAble::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.OnActiveGameplayEffectAdded
// 0x02A8 (0x02A8 - 0x0000)
struct MarinerAbility_OnActiveGameplayEffectAdded final
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpec                    GameplayEffectSpec;                                // 0x0008(0x0298)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ActiveGameplayHandle;                              // 0x02A0(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_OnActiveGameplayEffectAdded) == 0x000008, "Wrong alignment on MarinerAbility_OnActiveGameplayEffectAdded");
static_assert(sizeof(MarinerAbility_OnActiveGameplayEffectAdded) == 0x0002A8, "Wrong size on MarinerAbility_OnActiveGameplayEffectAdded");
static_assert(offsetof(MarinerAbility_OnActiveGameplayEffectAdded, AbilitySystemComponent) == 0x000000, "Member 'MarinerAbility_OnActiveGameplayEffectAdded::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(MarinerAbility_OnActiveGameplayEffectAdded, GameplayEffectSpec) == 0x000008, "Member 'MarinerAbility_OnActiveGameplayEffectAdded::GameplayEffectSpec' has a wrong offset!");
static_assert(offsetof(MarinerAbility_OnActiveGameplayEffectAdded, ActiveGameplayHandle) == 0x0002A0, "Member 'MarinerAbility_OnActiveGameplayEffectAdded::ActiveGameplayHandle' has a wrong offset!");

// Function Mariner.MarinerAbility.OnImpendingMegablast
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_OnImpendingMegablast final
{
public:
	const class UMarinerDamageableComponent*      RelevantDamageableComponent;                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AMarinerCharacter*                CharacterExpectingMegablast;                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_OnImpendingMegablast) == 0x000008, "Wrong alignment on MarinerAbility_OnImpendingMegablast");
static_assert(sizeof(MarinerAbility_OnImpendingMegablast) == 0x000010, "Wrong size on MarinerAbility_OnImpendingMegablast");
static_assert(offsetof(MarinerAbility_OnImpendingMegablast, RelevantDamageableComponent) == 0x000000, "Member 'MarinerAbility_OnImpendingMegablast::RelevantDamageableComponent' has a wrong offset!");
static_assert(offsetof(MarinerAbility_OnImpendingMegablast, CharacterExpectingMegablast) == 0x000008, "Member 'MarinerAbility_OnImpendingMegablast::CharacterExpectingMegablast' has a wrong offset!");

// Function Mariner.MarinerAbility.OnItemCatchDelegateCompleted
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_OnItemCatchDelegateCompleted final
{
public:
	class AMarinerCharacter*                      CatchingCharacter;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerItemSlot                              ItemSlot;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1491[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbility_OnItemCatchDelegateCompleted) == 0x000008, "Wrong alignment on MarinerAbility_OnItemCatchDelegateCompleted");
static_assert(sizeof(MarinerAbility_OnItemCatchDelegateCompleted) == 0x000010, "Wrong size on MarinerAbility_OnItemCatchDelegateCompleted");
static_assert(offsetof(MarinerAbility_OnItemCatchDelegateCompleted, CatchingCharacter) == 0x000000, "Member 'MarinerAbility_OnItemCatchDelegateCompleted::CatchingCharacter' has a wrong offset!");
static_assert(offsetof(MarinerAbility_OnItemCatchDelegateCompleted, ItemSlot) == 0x000008, "Member 'MarinerAbility_OnItemCatchDelegateCompleted::ItemSlot' has a wrong offset!");

// Function Mariner.MarinerAbility.OnMegablastAppliedLocal
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_OnMegablastAppliedLocal final
{
public:
	class AMarinerPlayerState*                    MegablastInstigatorPlayerState;                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_OnMegablastAppliedLocal) == 0x000008, "Wrong alignment on MarinerAbility_OnMegablastAppliedLocal");
static_assert(sizeof(MarinerAbility_OnMegablastAppliedLocal) == 0x000008, "Wrong size on MarinerAbility_OnMegablastAppliedLocal");
static_assert(offsetof(MarinerAbility_OnMegablastAppliedLocal, MegablastInstigatorPlayerState) == 0x000000, "Member 'MarinerAbility_OnMegablastAppliedLocal::MegablastInstigatorPlayerState' has a wrong offset!");

// Function Mariner.MarinerAbility.PlayFireAndForgetMarinerMontage
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_PlayFireAndForgetMarinerMontage final
{
public:
	class UMarinerCharacterMontage*               MontageToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1492[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbility_PlayFireAndForgetMarinerMontage) == 0x000008, "Wrong alignment on MarinerAbility_PlayFireAndForgetMarinerMontage");
static_assert(sizeof(MarinerAbility_PlayFireAndForgetMarinerMontage) == 0x000010, "Wrong size on MarinerAbility_PlayFireAndForgetMarinerMontage");
static_assert(offsetof(MarinerAbility_PlayFireAndForgetMarinerMontage, MontageToPlay) == 0x000000, "Member 'MarinerAbility_PlayFireAndForgetMarinerMontage::MontageToPlay' has a wrong offset!");
static_assert(offsetof(MarinerAbility_PlayFireAndForgetMarinerMontage, ReturnValue) == 0x000008, "Member 'MarinerAbility_PlayFireAndForgetMarinerMontage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.ProcessArtifactData
// 0x0050 (0x0050 - 0x0000)
struct MarinerAbility_ProcessArtifactData final
{
public:
	TMap<class FName, float>                      Map;                                               // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ProcessArtifactData) == 0x000008, "Wrong alignment on MarinerAbility_ProcessArtifactData");
static_assert(sizeof(MarinerAbility_ProcessArtifactData) == 0x000050, "Wrong size on MarinerAbility_ProcessArtifactData");
static_assert(offsetof(MarinerAbility_ProcessArtifactData, Map) == 0x000000, "Member 'MarinerAbility_ProcessArtifactData::Map' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_CanActivateAbility
// 0x0048 (0x0048 - 0x0000)
struct MarinerAbility_BP_CanActivateAbility final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1493[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbility_BP_CanActivateAbility) == 0x000008, "Wrong alignment on MarinerAbility_BP_CanActivateAbility");
static_assert(sizeof(MarinerAbility_BP_CanActivateAbility) == 0x000048, "Wrong size on MarinerAbility_BP_CanActivateAbility");
static_assert(offsetof(MarinerAbility_BP_CanActivateAbility, ActorInfo) == 0x000000, "Member 'MarinerAbility_BP_CanActivateAbility::ActorInfo' has a wrong offset!");
static_assert(offsetof(MarinerAbility_BP_CanActivateAbility, ReturnValue) == 0x000040, "Member 'MarinerAbility_BP_CanActivateAbility::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_GenerateAIInputVector
// 0x0020 (0x0020 - 0x0000)
struct MarinerAbility_BP_GenerateAIInputVector final
{
public:
	class AMarinerAIController*                   RequestingController;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerCharacter*                      RequestingPawn;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1494[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbility_BP_GenerateAIInputVector) == 0x000008, "Wrong alignment on MarinerAbility_BP_GenerateAIInputVector");
static_assert(sizeof(MarinerAbility_BP_GenerateAIInputVector) == 0x000020, "Wrong size on MarinerAbility_BP_GenerateAIInputVector");
static_assert(offsetof(MarinerAbility_BP_GenerateAIInputVector, RequestingController) == 0x000000, "Member 'MarinerAbility_BP_GenerateAIInputVector::RequestingController' has a wrong offset!");
static_assert(offsetof(MarinerAbility_BP_GenerateAIInputVector, RequestingPawn) == 0x000008, "Member 'MarinerAbility_BP_GenerateAIInputVector::RequestingPawn' has a wrong offset!");
static_assert(offsetof(MarinerAbility_BP_GenerateAIInputVector, ReturnValue) == 0x000010, "Member 'MarinerAbility_BP_GenerateAIInputVector::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_GetCustomTargetingFloat
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_BP_GetCustomTargetingFloat final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_GetCustomTargetingFloat) == 0x000004, "Wrong alignment on MarinerAbility_BP_GetCustomTargetingFloat");
static_assert(sizeof(MarinerAbility_BP_GetCustomTargetingFloat) == 0x000004, "Wrong size on MarinerAbility_BP_GetCustomTargetingFloat");
static_assert(offsetof(MarinerAbility_BP_GetCustomTargetingFloat, ReturnValue) == 0x000000, "Member 'MarinerAbility_BP_GetCustomTargetingFloat::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_GetCustomTargetingInt
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_BP_GetCustomTargetingInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_GetCustomTargetingInt) == 0x000004, "Wrong alignment on MarinerAbility_BP_GetCustomTargetingInt");
static_assert(sizeof(MarinerAbility_BP_GetCustomTargetingInt) == 0x000004, "Wrong size on MarinerAbility_BP_GetCustomTargetingInt");
static_assert(offsetof(MarinerAbility_BP_GetCustomTargetingInt, ReturnValue) == 0x000000, "Member 'MarinerAbility_BP_GetCustomTargetingInt::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_GetCustomTargetingVectorNormal
// 0x000C (0x000C - 0x0000)
struct MarinerAbility_BP_GetCustomTargetingVectorNormal final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_GetCustomTargetingVectorNormal) == 0x000004, "Wrong alignment on MarinerAbility_BP_GetCustomTargetingVectorNormal");
static_assert(sizeof(MarinerAbility_BP_GetCustomTargetingVectorNormal) == 0x00000C, "Wrong size on MarinerAbility_BP_GetCustomTargetingVectorNormal");
static_assert(offsetof(MarinerAbility_BP_GetCustomTargetingVectorNormal, ReturnValue) == 0x000000, "Member 'MarinerAbility_BP_GetCustomTargetingVectorNormal::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_GetCustomTargetingVectorQuantized
// 0x000C (0x000C - 0x0000)
struct MarinerAbility_BP_GetCustomTargetingVectorQuantized final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_GetCustomTargetingVectorQuantized) == 0x000004, "Wrong alignment on MarinerAbility_BP_GetCustomTargetingVectorQuantized");
static_assert(sizeof(MarinerAbility_BP_GetCustomTargetingVectorQuantized) == 0x00000C, "Wrong size on MarinerAbility_BP_GetCustomTargetingVectorQuantized");
static_assert(offsetof(MarinerAbility_BP_GetCustomTargetingVectorQuantized, ReturnValue) == 0x000000, "Member 'MarinerAbility_BP_GetCustomTargetingVectorQuantized::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_GetLocalPredictiveCooldownTime
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_BP_GetLocalPredictiveCooldownTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_GetLocalPredictiveCooldownTime) == 0x000004, "Wrong alignment on MarinerAbility_BP_GetLocalPredictiveCooldownTime");
static_assert(sizeof(MarinerAbility_BP_GetLocalPredictiveCooldownTime) == 0x000004, "Wrong size on MarinerAbility_BP_GetLocalPredictiveCooldownTime");
static_assert(offsetof(MarinerAbility_BP_GetLocalPredictiveCooldownTime, ReturnValue) == 0x000000, "Member 'MarinerAbility_BP_GetLocalPredictiveCooldownTime::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_HasAuthority
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_BP_HasAuthority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_HasAuthority) == 0x000001, "Wrong alignment on MarinerAbility_BP_HasAuthority");
static_assert(sizeof(MarinerAbility_BP_HasAuthority) == 0x000001, "Wrong size on MarinerAbility_BP_HasAuthority");
static_assert(offsetof(MarinerAbility_BP_HasAuthority, ReturnValue) == 0x000000, "Member 'MarinerAbility_BP_HasAuthority::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_IsForRemoteClient
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_BP_IsForRemoteClient final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_IsForRemoteClient) == 0x000001, "Wrong alignment on MarinerAbility_BP_IsForRemoteClient");
static_assert(sizeof(MarinerAbility_BP_IsForRemoteClient) == 0x000001, "Wrong size on MarinerAbility_BP_IsForRemoteClient");
static_assert(offsetof(MarinerAbility_BP_IsForRemoteClient, ReturnValue) == 0x000000, "Member 'MarinerAbility_BP_IsForRemoteClient::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.BP_IsLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_BP_IsLocallyControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_BP_IsLocallyControlled) == 0x000001, "Wrong alignment on MarinerAbility_BP_IsLocallyControlled");
static_assert(sizeof(MarinerAbility_BP_IsLocallyControlled) == 0x000001, "Wrong size on MarinerAbility_BP_IsLocallyControlled");
static_assert(offsetof(MarinerAbility_BP_IsLocallyControlled, ReturnValue) == 0x000000, "Member 'MarinerAbility_BP_IsLocallyControlled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.GetAbilityInstanceForAbilityClass
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_GetAbilityInstanceForAbilityClass final
{
public:
	TSubclassOf<class UMarinerAbility>            MarinerAbilityClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerAbility*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_GetAbilityInstanceForAbilityClass) == 0x000008, "Wrong alignment on MarinerAbility_GetAbilityInstanceForAbilityClass");
static_assert(sizeof(MarinerAbility_GetAbilityInstanceForAbilityClass) == 0x000010, "Wrong size on MarinerAbility_GetAbilityInstanceForAbilityClass");
static_assert(offsetof(MarinerAbility_GetAbilityInstanceForAbilityClass, MarinerAbilityClass) == 0x000000, "Member 'MarinerAbility_GetAbilityInstanceForAbilityClass::MarinerAbilityClass' has a wrong offset!");
static_assert(offsetof(MarinerAbility_GetAbilityInstanceForAbilityClass, ReturnValue) == 0x000008, "Member 'MarinerAbility_GetAbilityInstanceForAbilityClass::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.GetAbilityTags
// 0x0020 (0x0020 - 0x0000)
struct MarinerAbility_GetAbilityTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_GetAbilityTags) == 0x000008, "Wrong alignment on MarinerAbility_GetAbilityTags");
static_assert(sizeof(MarinerAbility_GetAbilityTags) == 0x000020, "Wrong size on MarinerAbility_GetAbilityTags");
static_assert(offsetof(MarinerAbility_GetAbilityTags, ReturnValue) == 0x000000, "Member 'MarinerAbility_GetAbilityTags::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.GetAbilityUIDuration
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_GetAbilityUIDuration final
{
public:
	bool                                          bForceActiveDisplay;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1495[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_GetAbilityUIDuration) == 0x000004, "Wrong alignment on MarinerAbility_GetAbilityUIDuration");
static_assert(sizeof(MarinerAbility_GetAbilityUIDuration) == 0x000008, "Wrong size on MarinerAbility_GetAbilityUIDuration");
static_assert(offsetof(MarinerAbility_GetAbilityUIDuration, bForceActiveDisplay) == 0x000000, "Member 'MarinerAbility_GetAbilityUIDuration::bForceActiveDisplay' has a wrong offset!");
static_assert(offsetof(MarinerAbility_GetAbilityUIDuration, ReturnValue) == 0x000004, "Member 'MarinerAbility_GetAbilityUIDuration::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.GetAllowPrompt
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_GetAllowPrompt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_GetAllowPrompt) == 0x000001, "Wrong alignment on MarinerAbility_GetAllowPrompt");
static_assert(sizeof(MarinerAbility_GetAllowPrompt) == 0x000001, "Wrong size on MarinerAbility_GetAllowPrompt");
static_assert(offsetof(MarinerAbility_GetAllowPrompt, ReturnValue) == 0x000000, "Member 'MarinerAbility_GetAllowPrompt::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.GetAvatarCharacterFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_GetAvatarCharacterFromActorInfo final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_GetAvatarCharacterFromActorInfo) == 0x000008, "Wrong alignment on MarinerAbility_GetAvatarCharacterFromActorInfo");
static_assert(sizeof(MarinerAbility_GetAvatarCharacterFromActorInfo) == 0x000008, "Wrong size on MarinerAbility_GetAvatarCharacterFromActorInfo");
static_assert(offsetof(MarinerAbility_GetAvatarCharacterFromActorInfo, ReturnValue) == 0x000000, "Member 'MarinerAbility_GetAvatarCharacterFromActorInfo::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.GetCooldownDuration
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_GetCooldownDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_GetCooldownDuration) == 0x000004, "Wrong alignment on MarinerAbility_GetCooldownDuration");
static_assert(sizeof(MarinerAbility_GetCooldownDuration) == 0x000004, "Wrong size on MarinerAbility_GetCooldownDuration");
static_assert(offsetof(MarinerAbility_GetCooldownDuration, ReturnValue) == 0x000000, "Member 'MarinerAbility_GetCooldownDuration::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.GetCooldownGameplayEffectType
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_GetCooldownGameplayEffectType final
{
public:
	TSubclassOf<class UGameplayEffect>            ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_GetCooldownGameplayEffectType) == 0x000008, "Wrong alignment on MarinerAbility_GetCooldownGameplayEffectType");
static_assert(sizeof(MarinerAbility_GetCooldownGameplayEffectType) == 0x000008, "Wrong size on MarinerAbility_GetCooldownGameplayEffectType");
static_assert(offsetof(MarinerAbility_GetCooldownGameplayEffectType, ReturnValue) == 0x000000, "Member 'MarinerAbility_GetCooldownGameplayEffectType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.GetDisplayAmmo
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_GetDisplayAmmo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_GetDisplayAmmo) == 0x000001, "Wrong alignment on MarinerAbility_GetDisplayAmmo");
static_assert(sizeof(MarinerAbility_GetDisplayAmmo) == 0x000001, "Wrong size on MarinerAbility_GetDisplayAmmo");
static_assert(offsetof(MarinerAbility_GetDisplayAmmo, ReturnValue) == 0x000000, "Member 'MarinerAbility_GetDisplayAmmo::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.GetOwningAbilitySystemComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_GetOwningAbilitySystemComponent final
{
public:
	class UMarinerAbilitySystemComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_GetOwningAbilitySystemComponent) == 0x000008, "Wrong alignment on MarinerAbility_GetOwningAbilitySystemComponent");
static_assert(sizeof(MarinerAbility_GetOwningAbilitySystemComponent) == 0x000008, "Wrong size on MarinerAbility_GetOwningAbilitySystemComponent");
static_assert(offsetof(MarinerAbility_GetOwningAbilitySystemComponent, ReturnValue) == 0x000000, "Member 'MarinerAbility_GetOwningAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.GetOwningCharacterFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_GetOwningCharacterFromActorInfo final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_GetOwningCharacterFromActorInfo) == 0x000008, "Wrong alignment on MarinerAbility_GetOwningCharacterFromActorInfo");
static_assert(sizeof(MarinerAbility_GetOwningCharacterFromActorInfo) == 0x000008, "Wrong size on MarinerAbility_GetOwningCharacterFromActorInfo");
static_assert(offsetof(MarinerAbility_GetOwningCharacterFromActorInfo, ReturnValue) == 0x000000, "Member 'MarinerAbility_GetOwningCharacterFromActorInfo::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.GetOwningMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_GetOwningMovementComponent final
{
public:
	class UMarinerCharacterMovement*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_GetOwningMovementComponent) == 0x000008, "Wrong alignment on MarinerAbility_GetOwningMovementComponent");
static_assert(sizeof(MarinerAbility_GetOwningMovementComponent) == 0x000008, "Wrong size on MarinerAbility_GetOwningMovementComponent");
static_assert(offsetof(MarinerAbility_GetOwningMovementComponent, ReturnValue) == 0x000000, "Member 'MarinerAbility_GetOwningMovementComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.GetReloadAndAmmoSetup
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_GetReloadAndAmmoSetup final
{
public:
	TSubclassOf<class UMarinerAbility>            ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_GetReloadAndAmmoSetup) == 0x000008, "Wrong alignment on MarinerAbility_GetReloadAndAmmoSetup");
static_assert(sizeof(MarinerAbility_GetReloadAndAmmoSetup) == 0x000008, "Wrong size on MarinerAbility_GetReloadAndAmmoSetup");
static_assert(offsetof(MarinerAbility_GetReloadAndAmmoSetup, ReturnValue) == 0x000000, "Member 'MarinerAbility_GetReloadAndAmmoSetup::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.HasAuthority
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_HasAuthority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_HasAuthority) == 0x000001, "Wrong alignment on MarinerAbility_HasAuthority");
static_assert(sizeof(MarinerAbility_HasAuthority) == 0x000001, "Wrong size on MarinerAbility_HasAuthority");
static_assert(offsetof(MarinerAbility_HasAuthority, ReturnValue) == 0x000000, "Member 'MarinerAbility_HasAuthority::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.HasInfiniteAmmo
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_HasInfiniteAmmo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_HasInfiniteAmmo) == 0x000001, "Wrong alignment on MarinerAbility_HasInfiniteAmmo");
static_assert(sizeof(MarinerAbility_HasInfiniteAmmo) == 0x000001, "Wrong size on MarinerAbility_HasInfiniteAmmo");
static_assert(offsetof(MarinerAbility_HasInfiniteAmmo, ReturnValue) == 0x000000, "Member 'MarinerAbility_HasInfiniteAmmo::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.IsActive
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_IsActive) == 0x000001, "Wrong alignment on MarinerAbility_IsActive");
static_assert(sizeof(MarinerAbility_IsActive) == 0x000001, "Wrong size on MarinerAbility_IsActive");
static_assert(offsetof(MarinerAbility_IsActive, ReturnValue) == 0x000000, "Member 'MarinerAbility_IsActive::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.IsOnNetExecutionPolicyRole
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_IsOnNetExecutionPolicyRole final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_IsOnNetExecutionPolicyRole) == 0x000001, "Wrong alignment on MarinerAbility_IsOnNetExecutionPolicyRole");
static_assert(sizeof(MarinerAbility_IsOnNetExecutionPolicyRole) == 0x000001, "Wrong size on MarinerAbility_IsOnNetExecutionPolicyRole");
static_assert(offsetof(MarinerAbility_IsOnNetExecutionPolicyRole, ReturnValue) == 0x000000, "Member 'MarinerAbility_IsOnNetExecutionPolicyRole::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.ShouldNotifyUIOnActivate
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_ShouldNotifyUIOnActivate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ShouldNotifyUIOnActivate) == 0x000001, "Wrong alignment on MarinerAbility_ShouldNotifyUIOnActivate");
static_assert(sizeof(MarinerAbility_ShouldNotifyUIOnActivate) == 0x000001, "Wrong size on MarinerAbility_ShouldNotifyUIOnActivate");
static_assert(offsetof(MarinerAbility_ShouldNotifyUIOnActivate, ReturnValue) == 0x000000, "Member 'MarinerAbility_ShouldNotifyUIOnActivate::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.UsesInputQueuing
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_UsesInputQueuing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_UsesInputQueuing) == 0x000001, "Wrong alignment on MarinerAbility_UsesInputQueuing");
static_assert(sizeof(MarinerAbility_UsesInputQueuing) == 0x000001, "Wrong size on MarinerAbility_UsesInputQueuing");
static_assert(offsetof(MarinerAbility_UsesInputQueuing, ReturnValue) == 0x000000, "Member 'MarinerAbility_UsesInputQueuing::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.UsesInputQueuingOnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_UsesInputQueuingOnEndAbility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_UsesInputQueuingOnEndAbility) == 0x000001, "Wrong alignment on MarinerAbility_UsesInputQueuingOnEndAbility");
static_assert(sizeof(MarinerAbility_UsesInputQueuingOnEndAbility) == 0x000001, "Wrong size on MarinerAbility_UsesInputQueuingOnEndAbility");
static_assert(offsetof(MarinerAbility_UsesInputQueuingOnEndAbility, ReturnValue) == 0x000000, "Member 'MarinerAbility_UsesInputQueuingOnEndAbility::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.UsesLocallyControlledNetExecutionPolicy
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_UsesLocallyControlledNetExecutionPolicy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_UsesLocallyControlledNetExecutionPolicy) == 0x000001, "Wrong alignment on MarinerAbility_UsesLocallyControlledNetExecutionPolicy");
static_assert(sizeof(MarinerAbility_UsesLocallyControlledNetExecutionPolicy) == 0x000001, "Wrong size on MarinerAbility_UsesLocallyControlledNetExecutionPolicy");
static_assert(offsetof(MarinerAbility_UsesLocallyControlledNetExecutionPolicy, ReturnValue) == 0x000000, "Member 'MarinerAbility_UsesLocallyControlledNetExecutionPolicy::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility.UsesServerNetExecutionPolicy
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_UsesServerNetExecutionPolicy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_UsesServerNetExecutionPolicy) == 0x000001, "Wrong alignment on MarinerAbility_UsesServerNetExecutionPolicy");
static_assert(sizeof(MarinerAbility_UsesServerNetExecutionPolicy) == 0x000001, "Wrong size on MarinerAbility_UsesServerNetExecutionPolicy");
static_assert(offsetof(MarinerAbility_UsesServerNetExecutionPolicy, ReturnValue) == 0x000000, "Member 'MarinerAbility_UsesServerNetExecutionPolicy::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerKeyboardPrompt.GetPromptAssets
// 0x0048 (0x0048 - 0x0000)
struct MarinerKeyboardPrompt_GetPromptAssets final
{
public:
	struct FMarinerKeyboardPromptAssets           ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerKeyboardPrompt_GetPromptAssets) == 0x000008, "Wrong alignment on MarinerKeyboardPrompt_GetPromptAssets");
static_assert(sizeof(MarinerKeyboardPrompt_GetPromptAssets) == 0x000048, "Wrong size on MarinerKeyboardPrompt_GetPromptAssets");
static_assert(offsetof(MarinerKeyboardPrompt_GetPromptAssets, ReturnValue) == 0x000000, "Member 'MarinerKeyboardPrompt_GetPromptAssets::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_Toggle.BP_CanToggleAbility
// 0x0048 (0x0048 - 0x0000)
struct MarinerAbility_Toggle_BP_CanToggleAbility final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1498[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbility_Toggle_BP_CanToggleAbility) == 0x000008, "Wrong alignment on MarinerAbility_Toggle_BP_CanToggleAbility");
static_assert(sizeof(MarinerAbility_Toggle_BP_CanToggleAbility) == 0x000048, "Wrong size on MarinerAbility_Toggle_BP_CanToggleAbility");
static_assert(offsetof(MarinerAbility_Toggle_BP_CanToggleAbility, ActorInfo) == 0x000000, "Member 'MarinerAbility_Toggle_BP_CanToggleAbility::ActorInfo' has a wrong offset!");
static_assert(offsetof(MarinerAbility_Toggle_BP_CanToggleAbility, ReturnValue) == 0x000040, "Member 'MarinerAbility_Toggle_BP_CanToggleAbility::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_Toggle.BP_OnToggleOff
// 0x0040 (0x0040 - 0x0000)
struct MarinerAbility_Toggle_BP_OnToggleOff final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Toggle_BP_OnToggleOff) == 0x000008, "Wrong alignment on MarinerAbility_Toggle_BP_OnToggleOff");
static_assert(sizeof(MarinerAbility_Toggle_BP_OnToggleOff) == 0x000040, "Wrong size on MarinerAbility_Toggle_BP_OnToggleOff");
static_assert(offsetof(MarinerAbility_Toggle_BP_OnToggleOff, ActorInfo) == 0x000000, "Member 'MarinerAbility_Toggle_BP_OnToggleOff::ActorInfo' has a wrong offset!");

// Function Mariner.MarinerAbility_Toggle.BP_OnToggleOff_Authority
// 0x0040 (0x0040 - 0x0000)
struct MarinerAbility_Toggle_BP_OnToggleOff_Authority final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Toggle_BP_OnToggleOff_Authority) == 0x000008, "Wrong alignment on MarinerAbility_Toggle_BP_OnToggleOff_Authority");
static_assert(sizeof(MarinerAbility_Toggle_BP_OnToggleOff_Authority) == 0x000040, "Wrong size on MarinerAbility_Toggle_BP_OnToggleOff_Authority");
static_assert(offsetof(MarinerAbility_Toggle_BP_OnToggleOff_Authority, ActorInfo) == 0x000000, "Member 'MarinerAbility_Toggle_BP_OnToggleOff_Authority::ActorInfo' has a wrong offset!");

// Function Mariner.MarinerAbility_EnergyToggle.AddEnergy_Authority
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_EnergyToggle_AddEnergy_Authority final
{
public:
	float                                         EnergyAdditionAmount;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldApplyMultiplier;                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149C[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbility_EnergyToggle_AddEnergy_Authority) == 0x000004, "Wrong alignment on MarinerAbility_EnergyToggle_AddEnergy_Authority");
static_assert(sizeof(MarinerAbility_EnergyToggle_AddEnergy_Authority) == 0x000008, "Wrong size on MarinerAbility_EnergyToggle_AddEnergy_Authority");
static_assert(offsetof(MarinerAbility_EnergyToggle_AddEnergy_Authority, EnergyAdditionAmount) == 0x000000, "Member 'MarinerAbility_EnergyToggle_AddEnergy_Authority::EnergyAdditionAmount' has a wrong offset!");
static_assert(offsetof(MarinerAbility_EnergyToggle_AddEnergy_Authority, bShouldApplyMultiplier) == 0x000004, "Member 'MarinerAbility_EnergyToggle_AddEnergy_Authority::bShouldApplyMultiplier' has a wrong offset!");

// Function Mariner.MarinerAbility_EnergyToggle.BP_AddEffectsToDefaultApplyOnEnergyEmpty
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_EnergyToggle_BP_AddEffectsToDefaultApplyOnEnergyEmpty final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_EnergyToggle_BP_AddEffectsToDefaultApplyOnEnergyEmpty) == 0x000008, "Wrong alignment on MarinerAbility_EnergyToggle_BP_AddEffectsToDefaultApplyOnEnergyEmpty");
static_assert(sizeof(MarinerAbility_EnergyToggle_BP_AddEffectsToDefaultApplyOnEnergyEmpty) == 0x000010, "Wrong size on MarinerAbility_EnergyToggle_BP_AddEffectsToDefaultApplyOnEnergyEmpty");
static_assert(offsetof(MarinerAbility_EnergyToggle_BP_AddEffectsToDefaultApplyOnEnergyEmpty, ReturnValue) == 0x000000, "Member 'MarinerAbility_EnergyToggle_BP_AddEffectsToDefaultApplyOnEnergyEmpty::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_EnergyToggle.BP_GetEnergyDrainMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_EnergyToggle_BP_GetEnergyDrainMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_EnergyToggle_BP_GetEnergyDrainMultiplier) == 0x000004, "Wrong alignment on MarinerAbility_EnergyToggle_BP_GetEnergyDrainMultiplier");
static_assert(sizeof(MarinerAbility_EnergyToggle_BP_GetEnergyDrainMultiplier) == 0x000004, "Wrong size on MarinerAbility_EnergyToggle_BP_GetEnergyDrainMultiplier");
static_assert(offsetof(MarinerAbility_EnergyToggle_BP_GetEnergyDrainMultiplier, ReturnValue) == 0x000000, "Member 'MarinerAbility_EnergyToggle_BP_GetEnergyDrainMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_EnergyToggle.BP_GetEnergyRecoveryMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_EnergyToggle_BP_GetEnergyRecoveryMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_EnergyToggle_BP_GetEnergyRecoveryMultiplier) == 0x000004, "Wrong alignment on MarinerAbility_EnergyToggle_BP_GetEnergyRecoveryMultiplier");
static_assert(sizeof(MarinerAbility_EnergyToggle_BP_GetEnergyRecoveryMultiplier) == 0x000004, "Wrong size on MarinerAbility_EnergyToggle_BP_GetEnergyRecoveryMultiplier");
static_assert(offsetof(MarinerAbility_EnergyToggle_BP_GetEnergyRecoveryMultiplier, ReturnValue) == 0x000000, "Member 'MarinerAbility_EnergyToggle_BP_GetEnergyRecoveryMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_EnergyToggle.BP_OnCurrentEnergyChanged
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_EnergyToggle_BP_OnCurrentEnergyChanged final
{
public:
	float                                         Energy;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_EnergyToggle_BP_OnCurrentEnergyChanged) == 0x000004, "Wrong alignment on MarinerAbility_EnergyToggle_BP_OnCurrentEnergyChanged");
static_assert(sizeof(MarinerAbility_EnergyToggle_BP_OnCurrentEnergyChanged) == 0x000004, "Wrong size on MarinerAbility_EnergyToggle_BP_OnCurrentEnergyChanged");
static_assert(offsetof(MarinerAbility_EnergyToggle_BP_OnCurrentEnergyChanged, Energy) == 0x000000, "Member 'MarinerAbility_EnergyToggle_BP_OnCurrentEnergyChanged::Energy' has a wrong offset!");

// Function Mariner.MarinerAbility_EnergyToggle.GetCurrentEnergy
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_EnergyToggle_GetCurrentEnergy final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_EnergyToggle_GetCurrentEnergy) == 0x000004, "Wrong alignment on MarinerAbility_EnergyToggle_GetCurrentEnergy");
static_assert(sizeof(MarinerAbility_EnergyToggle_GetCurrentEnergy) == 0x000004, "Wrong size on MarinerAbility_EnergyToggle_GetCurrentEnergy");
static_assert(offsetof(MarinerAbility_EnergyToggle_GetCurrentEnergy, ReturnValue) == 0x000000, "Member 'MarinerAbility_EnergyToggle_GetCurrentEnergy::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_EnergyToggle.GetEffectsToApplyOnEnergyEmpty
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_EnergyToggle_GetEffectsToApplyOnEnergyEmpty final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_EnergyToggle_GetEffectsToApplyOnEnergyEmpty) == 0x000008, "Wrong alignment on MarinerAbility_EnergyToggle_GetEffectsToApplyOnEnergyEmpty");
static_assert(sizeof(MarinerAbility_EnergyToggle_GetEffectsToApplyOnEnergyEmpty) == 0x000010, "Wrong size on MarinerAbility_EnergyToggle_GetEffectsToApplyOnEnergyEmpty");
static_assert(offsetof(MarinerAbility_EnergyToggle_GetEffectsToApplyOnEnergyEmpty, ReturnValue) == 0x000000, "Member 'MarinerAbility_EnergyToggle_GetEffectsToApplyOnEnergyEmpty::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_EnergyToggle.GetEnergyRatio
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_EnergyToggle_GetEnergyRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_EnergyToggle_GetEnergyRatio) == 0x000004, "Wrong alignment on MarinerAbility_EnergyToggle_GetEnergyRatio");
static_assert(sizeof(MarinerAbility_EnergyToggle_GetEnergyRatio) == 0x000004, "Wrong size on MarinerAbility_EnergyToggle_GetEnergyRatio");
static_assert(offsetof(MarinerAbility_EnergyToggle_GetEnergyRatio, ReturnValue) == 0x000000, "Member 'MarinerAbility_EnergyToggle_GetEnergyRatio::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_EnergyToggle.OnRep_CurrentEnergy
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_EnergyToggle_OnRep_CurrentEnergy final
{
public:
	float                                         PreviousEnergy;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_EnergyToggle_OnRep_CurrentEnergy) == 0x000004, "Wrong alignment on MarinerAbility_EnergyToggle_OnRep_CurrentEnergy");
static_assert(sizeof(MarinerAbility_EnergyToggle_OnRep_CurrentEnergy) == 0x000004, "Wrong size on MarinerAbility_EnergyToggle_OnRep_CurrentEnergy");
static_assert(offsetof(MarinerAbility_EnergyToggle_OnRep_CurrentEnergy, PreviousEnergy) == 0x000000, "Member 'MarinerAbility_EnergyToggle_OnRep_CurrentEnergy::PreviousEnergy' has a wrong offset!");

// Function Mariner.MarinerAbility_EnergyToggle.ReduceEnergy_Authority
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_EnergyToggle_ReduceEnergy_Authority final
{
public:
	float                                         EnergyReductionAmount;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldApplyMultiplier;                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149D[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbility_EnergyToggle_ReduceEnergy_Authority) == 0x000004, "Wrong alignment on MarinerAbility_EnergyToggle_ReduceEnergy_Authority");
static_assert(sizeof(MarinerAbility_EnergyToggle_ReduceEnergy_Authority) == 0x000008, "Wrong size on MarinerAbility_EnergyToggle_ReduceEnergy_Authority");
static_assert(offsetof(MarinerAbility_EnergyToggle_ReduceEnergy_Authority, EnergyReductionAmount) == 0x000000, "Member 'MarinerAbility_EnergyToggle_ReduceEnergy_Authority::EnergyReductionAmount' has a wrong offset!");
static_assert(offsetof(MarinerAbility_EnergyToggle_ReduceEnergy_Authority, bShouldApplyMultiplier) == 0x000004, "Member 'MarinerAbility_EnergyToggle_ReduceEnergy_Authority::bShouldApplyMultiplier' has a wrong offset!");

// Function Mariner.MarinerAbility_EnergyToggle.BP_CanUseEnergy
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_EnergyToggle_BP_CanUseEnergy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_EnergyToggle_BP_CanUseEnergy) == 0x000001, "Wrong alignment on MarinerAbility_EnergyToggle_BP_CanUseEnergy");
static_assert(sizeof(MarinerAbility_EnergyToggle_BP_CanUseEnergy) == 0x000001, "Wrong size on MarinerAbility_EnergyToggle_BP_CanUseEnergy");
static_assert(offsetof(MarinerAbility_EnergyToggle_BP_CanUseEnergy, ReturnValue) == 0x000000, "Member 'MarinerAbility_EnergyToggle_BP_CanUseEnergy::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_EnergyToggle.IsDrainEnergyBlockedByTag
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_EnergyToggle_IsDrainEnergyBlockedByTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_EnergyToggle_IsDrainEnergyBlockedByTag) == 0x000001, "Wrong alignment on MarinerAbility_EnergyToggle_IsDrainEnergyBlockedByTag");
static_assert(sizeof(MarinerAbility_EnergyToggle_IsDrainEnergyBlockedByTag) == 0x000001, "Wrong size on MarinerAbility_EnergyToggle_IsDrainEnergyBlockedByTag");
static_assert(offsetof(MarinerAbility_EnergyToggle_IsDrainEnergyBlockedByTag, ReturnValue) == 0x000000, "Member 'MarinerAbility_EnergyToggle_IsDrainEnergyBlockedByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_EnergyToggle.IsRecoverEnergyBlockedByTag
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_EnergyToggle_IsRecoverEnergyBlockedByTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_EnergyToggle_IsRecoverEnergyBlockedByTag) == 0x000001, "Wrong alignment on MarinerAbility_EnergyToggle_IsRecoverEnergyBlockedByTag");
static_assert(sizeof(MarinerAbility_EnergyToggle_IsRecoverEnergyBlockedByTag) == 0x000001, "Wrong size on MarinerAbility_EnergyToggle_IsRecoverEnergyBlockedByTag");
static_assert(offsetof(MarinerAbility_EnergyToggle_IsRecoverEnergyBlockedByTag, ReturnValue) == 0x000000, "Member 'MarinerAbility_EnergyToggle_IsRecoverEnergyBlockedByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArtifactImage.InitArtifactImage
// 0x0038 (0x0038 - 0x0000)
struct MarinerArtifactImage_InitArtifactImage final
{
public:
	EArtifactImageWidgetType                      InWidgetType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerArtifactGameplayEffectType            ArtifactGameplayType;                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149F[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ArtifactIconSoftTexture;                           // 0x0008(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArtifactLevel;                                     // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInventory;                                      // 0x0034(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInViewed;                                         // 0x0035(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A0[0x2];                                     // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerArtifactImage_InitArtifactImage) == 0x000008, "Wrong alignment on MarinerArtifactImage_InitArtifactImage");
static_assert(sizeof(MarinerArtifactImage_InitArtifactImage) == 0x000038, "Wrong size on MarinerArtifactImage_InitArtifactImage");
static_assert(offsetof(MarinerArtifactImage_InitArtifactImage, InWidgetType) == 0x000000, "Member 'MarinerArtifactImage_InitArtifactImage::InWidgetType' has a wrong offset!");
static_assert(offsetof(MarinerArtifactImage_InitArtifactImage, ArtifactGameplayType) == 0x000001, "Member 'MarinerArtifactImage_InitArtifactImage::ArtifactGameplayType' has a wrong offset!");
static_assert(offsetof(MarinerArtifactImage_InitArtifactImage, ArtifactIconSoftTexture) == 0x000008, "Member 'MarinerArtifactImage_InitArtifactImage::ArtifactIconSoftTexture' has a wrong offset!");
static_assert(offsetof(MarinerArtifactImage_InitArtifactImage, ArtifactLevel) == 0x000030, "Member 'MarinerArtifactImage_InitArtifactImage::ArtifactLevel' has a wrong offset!");
static_assert(offsetof(MarinerArtifactImage_InitArtifactImage, bInInventory) == 0x000034, "Member 'MarinerArtifactImage_InitArtifactImage::bInInventory' has a wrong offset!");
static_assert(offsetof(MarinerArtifactImage_InitArtifactImage, bInViewed) == 0x000035, "Member 'MarinerArtifactImage_InitArtifactImage::bInViewed' has a wrong offset!");

// Function Mariner.MarinerArtifactImage.InitArtifactImageOwned
// 0x0038 (0x0038 - 0x0000)
struct MarinerArtifactImage_InitArtifactImageOwned final
{
public:
	EArtifactImageWidgetType                      InWidgetType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerArtifactGameplayEffectType            ArtifactGameplayType;                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A1[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ArtifactIconSoftTexture;                           // 0x0008(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArtifactLevel;                                     // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A2[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerArtifactImage_InitArtifactImageOwned) == 0x000008, "Wrong alignment on MarinerArtifactImage_InitArtifactImageOwned");
static_assert(sizeof(MarinerArtifactImage_InitArtifactImageOwned) == 0x000038, "Wrong size on MarinerArtifactImage_InitArtifactImageOwned");
static_assert(offsetof(MarinerArtifactImage_InitArtifactImageOwned, InWidgetType) == 0x000000, "Member 'MarinerArtifactImage_InitArtifactImageOwned::InWidgetType' has a wrong offset!");
static_assert(offsetof(MarinerArtifactImage_InitArtifactImageOwned, ArtifactGameplayType) == 0x000001, "Member 'MarinerArtifactImage_InitArtifactImageOwned::ArtifactGameplayType' has a wrong offset!");
static_assert(offsetof(MarinerArtifactImage_InitArtifactImageOwned, ArtifactIconSoftTexture) == 0x000008, "Member 'MarinerArtifactImage_InitArtifactImageOwned::ArtifactIconSoftTexture' has a wrong offset!");
static_assert(offsetof(MarinerArtifactImage_InitArtifactImageOwned, ArtifactLevel) == 0x000030, "Member 'MarinerArtifactImage_InitArtifactImageOwned::ArtifactLevel' has a wrong offset!");

// Function Mariner.MarinerSettingEditableTextBox.SetText
// 0x0010 (0x0010 - 0x0000)
struct MarinerSettingEditableTextBox_SetText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingEditableTextBox_SetText) == 0x000008, "Wrong alignment on MarinerSettingEditableTextBox_SetText");
static_assert(sizeof(MarinerSettingEditableTextBox_SetText) == 0x000010, "Wrong size on MarinerSettingEditableTextBox_SetText");
static_assert(offsetof(MarinerSettingEditableTextBox_SetText, Text) == 0x000000, "Member 'MarinerSettingEditableTextBox_SetText::Text' has a wrong offset!");

// Function Mariner.MarinerSettingEditableTextBox.GetAssets
// 0x0040 (0x0040 - 0x0000)
struct MarinerSettingEditableTextBox_GetAssets final
{
public:
	struct FMarinerSettingEditableTextBoxAssets   ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingEditableTextBox_GetAssets) == 0x000008, "Wrong alignment on MarinerSettingEditableTextBox_GetAssets");
static_assert(sizeof(MarinerSettingEditableTextBox_GetAssets) == 0x000040, "Wrong size on MarinerSettingEditableTextBox_GetAssets");
static_assert(offsetof(MarinerSettingEditableTextBox_GetAssets, ReturnValue) == 0x000000, "Member 'MarinerSettingEditableTextBox_GetAssets::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSettingEditableTextBox.GetText
// 0x0010 (0x0010 - 0x0000)
struct MarinerSettingEditableTextBox_GetText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingEditableTextBox_GetText) == 0x000008, "Wrong alignment on MarinerSettingEditableTextBox_GetText");
static_assert(sizeof(MarinerSettingEditableTextBox_GetText) == 0x000010, "Wrong size on MarinerSettingEditableTextBox_GetText");
static_assert(offsetof(MarinerSettingEditableTextBox_GetText, ReturnValue) == 0x000000, "Member 'MarinerSettingEditableTextBox_GetText::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSettingEditableTextBox.GetTextBoxHasFocus
// 0x0001 (0x0001 - 0x0000)
struct MarinerSettingEditableTextBox_GetTextBoxHasFocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingEditableTextBox_GetTextBoxHasFocus) == 0x000001, "Wrong alignment on MarinerSettingEditableTextBox_GetTextBoxHasFocus");
static_assert(sizeof(MarinerSettingEditableTextBox_GetTextBoxHasFocus) == 0x000001, "Wrong size on MarinerSettingEditableTextBox_GetTextBoxHasFocus");
static_assert(offsetof(MarinerSettingEditableTextBox_GetTextBoxHasFocus, ReturnValue) == 0x000000, "Member 'MarinerSettingEditableTextBox_GetTextBoxHasFocus::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLoadEmotesForCharacter.LoadEmotesForCharacter
// 0x0020 (0x0020 - 0x0000)
struct MarinerLoadEmotesForCharacter_LoadEmotesForCharacter final
{
public:
	const class UObject*                          Param_WorldContextObject;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMarinerPlayableCharacter*        CharacterData;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A6[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerLoadEmotesForCharacter*         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLoadEmotesForCharacter_LoadEmotesForCharacter) == 0x000008, "Wrong alignment on MarinerLoadEmotesForCharacter_LoadEmotesForCharacter");
static_assert(sizeof(MarinerLoadEmotesForCharacter_LoadEmotesForCharacter) == 0x000020, "Wrong size on MarinerLoadEmotesForCharacter_LoadEmotesForCharacter");
static_assert(offsetof(MarinerLoadEmotesForCharacter_LoadEmotesForCharacter, Param_WorldContextObject) == 0x000000, "Member 'MarinerLoadEmotesForCharacter_LoadEmotesForCharacter::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerLoadEmotesForCharacter_LoadEmotesForCharacter, CharacterData) == 0x000008, "Member 'MarinerLoadEmotesForCharacter_LoadEmotesForCharacter::CharacterData' has a wrong offset!");
static_assert(offsetof(MarinerLoadEmotesForCharacter_LoadEmotesForCharacter, ItemType) == 0x000010, "Member 'MarinerLoadEmotesForCharacter_LoadEmotesForCharacter::ItemType' has a wrong offset!");
static_assert(offsetof(MarinerLoadEmotesForCharacter_LoadEmotesForCharacter, ReturnValue) == 0x000018, "Member 'MarinerLoadEmotesForCharacter_LoadEmotesForCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLevelEventTargetLocation.OnOwningProjectileExploded
// 0x0090 (0x0090 - 0x0000)
struct MarinerLevelEventTargetLocation_OnOwningProjectileExploded final
{
public:
	class AMarinerProjectile*                     Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Impact;                                            // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLevelEventTargetLocation_OnOwningProjectileExploded) == 0x000008, "Wrong alignment on MarinerLevelEventTargetLocation_OnOwningProjectileExploded");
static_assert(sizeof(MarinerLevelEventTargetLocation_OnOwningProjectileExploded) == 0x000090, "Wrong size on MarinerLevelEventTargetLocation_OnOwningProjectileExploded");
static_assert(offsetof(MarinerLevelEventTargetLocation_OnOwningProjectileExploded, Projectile) == 0x000000, "Member 'MarinerLevelEventTargetLocation_OnOwningProjectileExploded::Projectile' has a wrong offset!");
static_assert(offsetof(MarinerLevelEventTargetLocation_OnOwningProjectileExploded, Impact) == 0x000008, "Member 'MarinerLevelEventTargetLocation_OnOwningProjectileExploded::Impact' has a wrong offset!");

// Function Mariner.MarinerLevelEventTargetLocation.SetTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerLevelEventTargetLocation_SetTeamIndex final
{
public:
	int32                                         InTeamIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLevelEventTargetLocation_SetTeamIndex) == 0x000004, "Wrong alignment on MarinerLevelEventTargetLocation_SetTeamIndex");
static_assert(sizeof(MarinerLevelEventTargetLocation_SetTeamIndex) == 0x000004, "Wrong size on MarinerLevelEventTargetLocation_SetTeamIndex");
static_assert(offsetof(MarinerLevelEventTargetLocation_SetTeamIndex, InTeamIndex) == 0x000000, "Member 'MarinerLevelEventTargetLocation_SetTeamIndex::InTeamIndex' has a wrong offset!");

// Function Mariner.MarinerLevelEventTargetLocation.GetTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerLevelEventTargetLocation_GetTeamIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLevelEventTargetLocation_GetTeamIndex) == 0x000004, "Wrong alignment on MarinerLevelEventTargetLocation_GetTeamIndex");
static_assert(sizeof(MarinerLevelEventTargetLocation_GetTeamIndex) == 0x000004, "Wrong size on MarinerLevelEventTargetLocation_GetTeamIndex");
static_assert(offsetof(MarinerLevelEventTargetLocation_GetTeamIndex, ReturnValue) == 0x000000, "Member 'MarinerLevelEventTargetLocation_GetTeamIndex::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLoadEngineAsset.LoadEngineAssets
// 0x0020 (0x0020 - 0x0000)
struct MarinerLoadEngineAsset_LoadEngineAssets final
{
public:
	const class UObject*                          Param_WorldContextObject;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AssetPaths;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UMarinerLoadEngineAsset*                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLoadEngineAsset_LoadEngineAssets) == 0x000008, "Wrong alignment on MarinerLoadEngineAsset_LoadEngineAssets");
static_assert(sizeof(MarinerLoadEngineAsset_LoadEngineAssets) == 0x000020, "Wrong size on MarinerLoadEngineAsset_LoadEngineAssets");
static_assert(offsetof(MarinerLoadEngineAsset_LoadEngineAssets, Param_WorldContextObject) == 0x000000, "Member 'MarinerLoadEngineAsset_LoadEngineAssets::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerLoadEngineAsset_LoadEngineAssets, AssetPaths) == 0x000008, "Member 'MarinerLoadEngineAsset_LoadEngineAssets::AssetPaths' has a wrong offset!");
static_assert(offsetof(MarinerLoadEngineAsset_LoadEngineAssets, ReturnValue) == 0x000018, "Member 'MarinerLoadEngineAsset_LoadEngineAssets::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLoadAllItemsFromCMSByType.LoadAllCMSItemsOfType
// 0x0018 (0x0018 - 0x0000)
struct MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType final
{
public:
	const class UObject*                          Param_WorldContextObject;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOwnedItems;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnownedItems;                                     // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProgressionItems;                                 // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlastPassItems;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOfferItems;                                       // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollectionItems;                                  // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14AF[0x1];                                     // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerLoadAllItemsFromCMSByType*      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType) == 0x000008, "Wrong alignment on MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType");
static_assert(sizeof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType) == 0x000018, "Wrong size on MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType, Param_WorldContextObject) == 0x000000, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType, ItemType) == 0x000008, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType::ItemType' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType, bOwnedItems) == 0x000009, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType::bOwnedItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType, bUnownedItems) == 0x00000A, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType::bUnownedItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType, bProgressionItems) == 0x00000B, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType::bProgressionItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType, bBlastPassItems) == 0x00000C, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType::bBlastPassItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType, bOfferItems) == 0x00000D, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType::bOfferItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType, bCollectionItems) == 0x00000E, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType::bCollectionItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType, ReturnValue) == 0x000010, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLoadAllItemsFromCMSByType.LoadAllCMSItemsOfTypeWithGameInstance
// 0x0038 (0x0038 - 0x0000)
struct MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance final
{
public:
	TSoftObjectPtr<class UMarinerGameInstance>    MarinerGameInstance;                               // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOwnedItems;                                       // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnownedItems;                                     // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProgressionItems;                                 // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlastPassItems;                                   // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOfferItems;                                       // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollectionItems;                                  // 0x002E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14B0[0x1];                                     // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerLoadAllItemsFromCMSByType*      ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance) == 0x000008, "Wrong alignment on MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance");
static_assert(sizeof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance) == 0x000038, "Wrong size on MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance, MarinerGameInstance) == 0x000000, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance::MarinerGameInstance' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance, ItemType) == 0x000028, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance::ItemType' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance, bOwnedItems) == 0x000029, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance::bOwnedItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance, bUnownedItems) == 0x00002A, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance::bUnownedItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance, bProgressionItems) == 0x00002B, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance::bProgressionItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance, bBlastPassItems) == 0x00002C, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance::bBlastPassItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance, bOfferItems) == 0x00002D, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance::bOfferItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance, bCollectionItems) == 0x00002E, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance::bCollectionItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance, ReturnValue) == 0x000030, "Member 'MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance::ReturnValue' has a wrong offset!");

// Function Mariner.CollectionMode.GetTrophyType
// 0x0010 (0x0010 - 0x0000)
struct CollectionMode_GetTrophyType final
{
public:
	const class AMarinerCollectableObject*        CollectableObject;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerTrophyType                            OutTrophyType;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14B4[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollectionMode_GetTrophyType) == 0x000008, "Wrong alignment on CollectionMode_GetTrophyType");
static_assert(sizeof(CollectionMode_GetTrophyType) == 0x000010, "Wrong size on CollectionMode_GetTrophyType");
static_assert(offsetof(CollectionMode_GetTrophyType, CollectableObject) == 0x000000, "Member 'CollectionMode_GetTrophyType::CollectableObject' has a wrong offset!");
static_assert(offsetof(CollectionMode_GetTrophyType, OutTrophyType) == 0x000008, "Member 'CollectionMode_GetTrophyType::OutTrophyType' has a wrong offset!");

// Function Mariner.CollectionMode.IncrementsCharacterTrophyPointsAndCount
// 0x0010 (0x0010 - 0x0000)
struct CollectionMode_IncrementsCharacterTrophyPointsAndCount final
{
public:
	const class AMarinerCharacter*                PickedUpBy;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointsToAward;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14B5[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollectionMode_IncrementsCharacterTrophyPointsAndCount) == 0x000008, "Wrong alignment on CollectionMode_IncrementsCharacterTrophyPointsAndCount");
static_assert(sizeof(CollectionMode_IncrementsCharacterTrophyPointsAndCount) == 0x000010, "Wrong size on CollectionMode_IncrementsCharacterTrophyPointsAndCount");
static_assert(offsetof(CollectionMode_IncrementsCharacterTrophyPointsAndCount, PickedUpBy) == 0x000000, "Member 'CollectionMode_IncrementsCharacterTrophyPointsAndCount::PickedUpBy' has a wrong offset!");
static_assert(offsetof(CollectionMode_IncrementsCharacterTrophyPointsAndCount, PointsToAward) == 0x000008, "Member 'CollectionMode_IncrementsCharacterTrophyPointsAndCount::PointsToAward' has a wrong offset!");

// Function Mariner.CollectionMode.IncrementsTeamTrophyPoints
// 0x0008 (0x0008 - 0x0000)
struct CollectionMode_IncrementsTeamTrophyPoints final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointsToAward;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_IncrementsTeamTrophyPoints) == 0x000004, "Wrong alignment on CollectionMode_IncrementsTeamTrophyPoints");
static_assert(sizeof(CollectionMode_IncrementsTeamTrophyPoints) == 0x000008, "Wrong size on CollectionMode_IncrementsTeamTrophyPoints");
static_assert(offsetof(CollectionMode_IncrementsTeamTrophyPoints, TeamIndex) == 0x000000, "Member 'CollectionMode_IncrementsTeamTrophyPoints::TeamIndex' has a wrong offset!");
static_assert(offsetof(CollectionMode_IncrementsTeamTrophyPoints, PointsToAward) == 0x000004, "Member 'CollectionMode_IncrementsTeamTrophyPoints::PointsToAward' has a wrong offset!");

// Function Mariner.CollectionMode.OnAccumulatedDamageChange
// 0x0010 (0x0010 - 0x0000)
struct CollectionMode_OnAccumulatedDamageChange final
{
public:
	const class UMarinerDamageableComponent*      DamageableComponent;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewAccumulatedDamage;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldAccumulatedDamage;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_OnAccumulatedDamageChange) == 0x000008, "Wrong alignment on CollectionMode_OnAccumulatedDamageChange");
static_assert(sizeof(CollectionMode_OnAccumulatedDamageChange) == 0x000010, "Wrong size on CollectionMode_OnAccumulatedDamageChange");
static_assert(offsetof(CollectionMode_OnAccumulatedDamageChange, DamageableComponent) == 0x000000, "Member 'CollectionMode_OnAccumulatedDamageChange::DamageableComponent' has a wrong offset!");
static_assert(offsetof(CollectionMode_OnAccumulatedDamageChange, NewAccumulatedDamage) == 0x000008, "Member 'CollectionMode_OnAccumulatedDamageChange::NewAccumulatedDamage' has a wrong offset!");
static_assert(offsetof(CollectionMode_OnAccumulatedDamageChange, OldAccumulatedDamage) == 0x00000C, "Member 'CollectionMode_OnAccumulatedDamageChange::OldAccumulatedDamage' has a wrong offset!");

// Function Mariner.CollectionMode.OnCollectableObjectOutOfBounds
// 0x0008 (0x0008 - 0x0000)
struct CollectionMode_OnCollectableObjectOutOfBounds final
{
public:
	const class AMarinerCollectableObject*        CollectableObject;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_OnCollectableObjectOutOfBounds) == 0x000008, "Wrong alignment on CollectionMode_OnCollectableObjectOutOfBounds");
static_assert(sizeof(CollectionMode_OnCollectableObjectOutOfBounds) == 0x000008, "Wrong size on CollectionMode_OnCollectableObjectOutOfBounds");
static_assert(offsetof(CollectionMode_OnCollectableObjectOutOfBounds, CollectableObject) == 0x000000, "Member 'CollectionMode_OnCollectableObjectOutOfBounds::CollectableObject' has a wrong offset!");

// Function Mariner.CollectionMode.OnCollectableObjectPickedUp
// 0x0010 (0x0010 - 0x0000)
struct CollectionMode_OnCollectableObjectPickedUp final
{
public:
	const class AMarinerCharacter*                PickedUpBy;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerCollectableObject*              CollectableObject;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_OnCollectableObjectPickedUp) == 0x000008, "Wrong alignment on CollectionMode_OnCollectableObjectPickedUp");
static_assert(sizeof(CollectionMode_OnCollectableObjectPickedUp) == 0x000010, "Wrong size on CollectionMode_OnCollectableObjectPickedUp");
static_assert(offsetof(CollectionMode_OnCollectableObjectPickedUp, PickedUpBy) == 0x000000, "Member 'CollectionMode_OnCollectableObjectPickedUp::PickedUpBy' has a wrong offset!");
static_assert(offsetof(CollectionMode_OnCollectableObjectPickedUp, CollectableObject) == 0x000008, "Member 'CollectionMode_OnCollectableObjectPickedUp::CollectableObject' has a wrong offset!");

// Function Mariner.CollectionMode.PostInitController
// 0x0008 (0x0008 - 0x0000)
struct CollectionMode_PostInitController final
{
public:
	class APlayerController*                      NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_PostInitController) == 0x000008, "Wrong alignment on CollectionMode_PostInitController");
static_assert(sizeof(CollectionMode_PostInitController) == 0x000008, "Wrong size on CollectionMode_PostInitController");
static_assert(offsetof(CollectionMode_PostInitController, NewPlayer) == 0x000000, "Member 'CollectionMode_PostInitController::NewPlayer' has a wrong offset!");

// Function Mariner.CollectionMode.SetPlayerTrophyBlastability
// 0x0004 (0x0004 - 0x0000)
struct CollectionMode_SetPlayerTrophyBlastability final
{
public:
	float                                         InPlayerTrophyBlastability;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_SetPlayerTrophyBlastability) == 0x000004, "Wrong alignment on CollectionMode_SetPlayerTrophyBlastability");
static_assert(sizeof(CollectionMode_SetPlayerTrophyBlastability) == 0x000004, "Wrong size on CollectionMode_SetPlayerTrophyBlastability");
static_assert(offsetof(CollectionMode_SetPlayerTrophyBlastability, InPlayerTrophyBlastability) == 0x000000, "Member 'CollectionMode_SetPlayerTrophyBlastability::InPlayerTrophyBlastability' has a wrong offset!");

// Function Mariner.CollectionMode.SetPlayerTrophyBounceDirectionMode
// 0x0001 (0x0001 - 0x0000)
struct CollectionMode_SetPlayerTrophyBounceDirectionMode final
{
public:
	EPlayerTrophyBounceDirectionMode              InPlayerTrophyBounceDirectionMode;                 // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_SetPlayerTrophyBounceDirectionMode) == 0x000001, "Wrong alignment on CollectionMode_SetPlayerTrophyBounceDirectionMode");
static_assert(sizeof(CollectionMode_SetPlayerTrophyBounceDirectionMode) == 0x000001, "Wrong size on CollectionMode_SetPlayerTrophyBounceDirectionMode");
static_assert(offsetof(CollectionMode_SetPlayerTrophyBounceDirectionMode, InPlayerTrophyBounceDirectionMode) == 0x000000, "Member 'CollectionMode_SetPlayerTrophyBounceDirectionMode::InPlayerTrophyBounceDirectionMode' has a wrong offset!");

// Function Mariner.CollectionMode.SetPlayerTrophyBounceDirectionOverride
// 0x000C (0x000C - 0x0000)
struct CollectionMode_SetPlayerTrophyBounceDirectionOverride final
{
public:
	struct FVector                                InPlayerTrophyBounceDirectionOverride;             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_SetPlayerTrophyBounceDirectionOverride) == 0x000004, "Wrong alignment on CollectionMode_SetPlayerTrophyBounceDirectionOverride");
static_assert(sizeof(CollectionMode_SetPlayerTrophyBounceDirectionOverride) == 0x00000C, "Wrong size on CollectionMode_SetPlayerTrophyBounceDirectionOverride");
static_assert(offsetof(CollectionMode_SetPlayerTrophyBounceDirectionOverride, InPlayerTrophyBounceDirectionOverride) == 0x000000, "Member 'CollectionMode_SetPlayerTrophyBounceDirectionOverride::InPlayerTrophyBounceDirectionOverride' has a wrong offset!");

// Function Mariner.CollectionMode.SetPlayerTrophyBounceOrigin
// 0x000C (0x000C - 0x0000)
struct CollectionMode_SetPlayerTrophyBounceOrigin final
{
public:
	struct FVector                                InPlayerTrophyBounceOrigin;                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_SetPlayerTrophyBounceOrigin) == 0x000004, "Wrong alignment on CollectionMode_SetPlayerTrophyBounceOrigin");
static_assert(sizeof(CollectionMode_SetPlayerTrophyBounceOrigin) == 0x00000C, "Wrong size on CollectionMode_SetPlayerTrophyBounceOrigin");
static_assert(offsetof(CollectionMode_SetPlayerTrophyBounceOrigin, InPlayerTrophyBounceOrigin) == 0x000000, "Member 'CollectionMode_SetPlayerTrophyBounceOrigin::InPlayerTrophyBounceOrigin' has a wrong offset!");

// Function Mariner.CollectionMode.SetPlayerTrophyBouncePitch
// 0x0004 (0x0004 - 0x0000)
struct CollectionMode_SetPlayerTrophyBouncePitch final
{
public:
	float                                         InPitch;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_SetPlayerTrophyBouncePitch) == 0x000004, "Wrong alignment on CollectionMode_SetPlayerTrophyBouncePitch");
static_assert(sizeof(CollectionMode_SetPlayerTrophyBouncePitch) == 0x000004, "Wrong size on CollectionMode_SetPlayerTrophyBouncePitch");
static_assert(offsetof(CollectionMode_SetPlayerTrophyBouncePitch, InPitch) == 0x000000, "Member 'CollectionMode_SetPlayerTrophyBouncePitch::InPitch' has a wrong offset!");

// Function Mariner.CollectionMode.SetTrophyHuntMaxScore
// 0x0004 (0x0004 - 0x0000)
struct CollectionMode_SetTrophyHuntMaxScore final
{
public:
	int32                                         InTrophyHuntMaxScore;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_SetTrophyHuntMaxScore) == 0x000004, "Wrong alignment on CollectionMode_SetTrophyHuntMaxScore");
static_assert(sizeof(CollectionMode_SetTrophyHuntMaxScore) == 0x000004, "Wrong size on CollectionMode_SetTrophyHuntMaxScore");
static_assert(offsetof(CollectionMode_SetTrophyHuntMaxScore, InTrophyHuntMaxScore) == 0x000000, "Member 'CollectionMode_SetTrophyHuntMaxScore::InTrophyHuntMaxScore' has a wrong offset!");

// Function Mariner.CollectionMode.SpawnPlayerTrophy
// 0x0018 (0x0018 - 0x0000)
struct CollectionMode_SpawnPlayerTrophy final
{
public:
	class AMarinerCharacter*                      DamagedCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DropDirection;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14B6[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollectionMode_SpawnPlayerTrophy) == 0x000008, "Wrong alignment on CollectionMode_SpawnPlayerTrophy");
static_assert(sizeof(CollectionMode_SpawnPlayerTrophy) == 0x000018, "Wrong size on CollectionMode_SpawnPlayerTrophy");
static_assert(offsetof(CollectionMode_SpawnPlayerTrophy, DamagedCharacter) == 0x000000, "Member 'CollectionMode_SpawnPlayerTrophy::DamagedCharacter' has a wrong offset!");
static_assert(offsetof(CollectionMode_SpawnPlayerTrophy, DropDirection) == 0x000008, "Member 'CollectionMode_SpawnPlayerTrophy::DropDirection' has a wrong offset!");

// Function Mariner.CollectionMode.SpawnRocketTrophy
// 0x0018 (0x0018 - 0x0000)
struct CollectionMode_SpawnRocketTrophy final
{
public:
	float                                         TimeToSpawn;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14B7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCollectableObject*              SourceTrophy;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnerID;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14B8[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollectionMode_SpawnRocketTrophy) == 0x000008, "Wrong alignment on CollectionMode_SpawnRocketTrophy");
static_assert(sizeof(CollectionMode_SpawnRocketTrophy) == 0x000018, "Wrong size on CollectionMode_SpawnRocketTrophy");
static_assert(offsetof(CollectionMode_SpawnRocketTrophy, TimeToSpawn) == 0x000000, "Member 'CollectionMode_SpawnRocketTrophy::TimeToSpawn' has a wrong offset!");
static_assert(offsetof(CollectionMode_SpawnRocketTrophy, SourceTrophy) == 0x000008, "Member 'CollectionMode_SpawnRocketTrophy::SourceTrophy' has a wrong offset!");
static_assert(offsetof(CollectionMode_SpawnRocketTrophy, SpawnerID) == 0x000010, "Member 'CollectionMode_SpawnRocketTrophy::SpawnerID' has a wrong offset!");

// Function Mariner.CollectionMode.AreAvailableSpawners
// 0x0001 (0x0001 - 0x0000)
struct CollectionMode_AreAvailableSpawners final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_AreAvailableSpawners) == 0x000001, "Wrong alignment on CollectionMode_AreAvailableSpawners");
static_assert(sizeof(CollectionMode_AreAvailableSpawners) == 0x000001, "Wrong size on CollectionMode_AreAvailableSpawners");
static_assert(offsetof(CollectionMode_AreAvailableSpawners, ReturnValue) == 0x000000, "Member 'CollectionMode_AreAvailableSpawners::ReturnValue' has a wrong offset!");

// Function Mariner.CollectionMode.GetActiveRocketTrophySpawnerCount
// 0x0004 (0x0004 - 0x0000)
struct CollectionMode_GetActiveRocketTrophySpawnerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_GetActiveRocketTrophySpawnerCount) == 0x000004, "Wrong alignment on CollectionMode_GetActiveRocketTrophySpawnerCount");
static_assert(sizeof(CollectionMode_GetActiveRocketTrophySpawnerCount) == 0x000004, "Wrong size on CollectionMode_GetActiveRocketTrophySpawnerCount");
static_assert(offsetof(CollectionMode_GetActiveRocketTrophySpawnerCount, ReturnValue) == 0x000000, "Member 'CollectionMode_GetActiveRocketTrophySpawnerCount::ReturnValue' has a wrong offset!");

// Function Mariner.CollectionMode.GetEnemyPlayerTrophyValue
// 0x0004 (0x0004 - 0x0000)
struct CollectionMode_GetEnemyPlayerTrophyValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_GetEnemyPlayerTrophyValue) == 0x000004, "Wrong alignment on CollectionMode_GetEnemyPlayerTrophyValue");
static_assert(sizeof(CollectionMode_GetEnemyPlayerTrophyValue) == 0x000004, "Wrong size on CollectionMode_GetEnemyPlayerTrophyValue");
static_assert(offsetof(CollectionMode_GetEnemyPlayerTrophyValue, ReturnValue) == 0x000000, "Member 'CollectionMode_GetEnemyPlayerTrophyValue::ReturnValue' has a wrong offset!");

// Function Mariner.CollectionMode.GetFriendPlayerTrophyValue
// 0x0004 (0x0004 - 0x0000)
struct CollectionMode_GetFriendPlayerTrophyValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_GetFriendPlayerTrophyValue) == 0x000004, "Wrong alignment on CollectionMode_GetFriendPlayerTrophyValue");
static_assert(sizeof(CollectionMode_GetFriendPlayerTrophyValue) == 0x000004, "Wrong size on CollectionMode_GetFriendPlayerTrophyValue");
static_assert(offsetof(CollectionMode_GetFriendPlayerTrophyValue, ReturnValue) == 0x000000, "Member 'CollectionMode_GetFriendPlayerTrophyValue::ReturnValue' has a wrong offset!");

// Function Mariner.CollectionMode.GetQueuedRocketTrophySpawnCount
// 0x0004 (0x0004 - 0x0000)
struct CollectionMode_GetQueuedRocketTrophySpawnCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_GetQueuedRocketTrophySpawnCount) == 0x000004, "Wrong alignment on CollectionMode_GetQueuedRocketTrophySpawnCount");
static_assert(sizeof(CollectionMode_GetQueuedRocketTrophySpawnCount) == 0x000004, "Wrong size on CollectionMode_GetQueuedRocketTrophySpawnCount");
static_assert(offsetof(CollectionMode_GetQueuedRocketTrophySpawnCount, ReturnValue) == 0x000000, "Member 'CollectionMode_GetQueuedRocketTrophySpawnCount::ReturnValue' has a wrong offset!");

// Function Mariner.CollectionMode.GetRocketTrophiesInCirculation
// 0x0004 (0x0004 - 0x0000)
struct CollectionMode_GetRocketTrophiesInCirculation final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_GetRocketTrophiesInCirculation) == 0x000004, "Wrong alignment on CollectionMode_GetRocketTrophiesInCirculation");
static_assert(sizeof(CollectionMode_GetRocketTrophiesInCirculation) == 0x000004, "Wrong size on CollectionMode_GetRocketTrophiesInCirculation");
static_assert(offsetof(CollectionMode_GetRocketTrophiesInCirculation, ReturnValue) == 0x000000, "Member 'CollectionMode_GetRocketTrophiesInCirculation::ReturnValue' has a wrong offset!");

// Function Mariner.CollectionMode.GetRocketTrophyValue
// 0x0004 (0x0004 - 0x0000)
struct CollectionMode_GetRocketTrophyValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_GetRocketTrophyValue) == 0x000004, "Wrong alignment on CollectionMode_GetRocketTrophyValue");
static_assert(sizeof(CollectionMode_GetRocketTrophyValue) == 0x000004, "Wrong size on CollectionMode_GetRocketTrophyValue");
static_assert(offsetof(CollectionMode_GetRocketTrophyValue, ReturnValue) == 0x000000, "Member 'CollectionMode_GetRocketTrophyValue::ReturnValue' has a wrong offset!");

// Function Mariner.CollectionMode.GetTrophyRewardPoints
// 0x0018 (0x0018 - 0x0000)
struct CollectionMode_GetTrophyRewardPoints final
{
public:
	const class AMarinerCharacter*                PickedUpBy;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerCollectableObject*              CollectableObject;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14B9[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollectionMode_GetTrophyRewardPoints) == 0x000008, "Wrong alignment on CollectionMode_GetTrophyRewardPoints");
static_assert(sizeof(CollectionMode_GetTrophyRewardPoints) == 0x000018, "Wrong size on CollectionMode_GetTrophyRewardPoints");
static_assert(offsetof(CollectionMode_GetTrophyRewardPoints, PickedUpBy) == 0x000000, "Member 'CollectionMode_GetTrophyRewardPoints::PickedUpBy' has a wrong offset!");
static_assert(offsetof(CollectionMode_GetTrophyRewardPoints, CollectableObject) == 0x000008, "Member 'CollectionMode_GetTrophyRewardPoints::CollectableObject' has a wrong offset!");
static_assert(offsetof(CollectionMode_GetTrophyRewardPoints, ReturnValue) == 0x000010, "Member 'CollectionMode_GetTrophyRewardPoints::ReturnValue' has a wrong offset!");

// Function Mariner.CollectionMode.GetTrophySpawnersCount
// 0x0004 (0x0004 - 0x0000)
struct CollectionMode_GetTrophySpawnersCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectionMode_GetTrophySpawnersCount) == 0x000004, "Wrong alignment on CollectionMode_GetTrophySpawnersCount");
static_assert(sizeof(CollectionMode_GetTrophySpawnersCount) == 0x000004, "Wrong size on CollectionMode_GetTrophySpawnersCount");
static_assert(offsetof(CollectionMode_GetTrophySpawnersCount, ReturnValue) == 0x000000, "Member 'CollectionMode_GetTrophySpawnersCount::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLoadTransitionWidget.GetTransitionInAnimation
// 0x0008 (0x0008 - 0x0000)
struct MarinerLoadTransitionWidget_GetTransitionInAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLoadTransitionWidget_GetTransitionInAnimation) == 0x000008, "Wrong alignment on MarinerLoadTransitionWidget_GetTransitionInAnimation");
static_assert(sizeof(MarinerLoadTransitionWidget_GetTransitionInAnimation) == 0x000008, "Wrong size on MarinerLoadTransitionWidget_GetTransitionInAnimation");
static_assert(offsetof(MarinerLoadTransitionWidget_GetTransitionInAnimation, ReturnValue) == 0x000000, "Member 'MarinerLoadTransitionWidget_GetTransitionInAnimation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLoadTransitionWidget.GetTransitionOutAnimation
// 0x0008 (0x0008 - 0x0000)
struct MarinerLoadTransitionWidget_GetTransitionOutAnimation final
{
public:
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLoadTransitionWidget_GetTransitionOutAnimation) == 0x000008, "Wrong alignment on MarinerLoadTransitionWidget_GetTransitionOutAnimation");
static_assert(sizeof(MarinerLoadTransitionWidget_GetTransitionOutAnimation) == 0x000008, "Wrong size on MarinerLoadTransitionWidget_GetTransitionOutAnimation");
static_assert(offsetof(MarinerLoadTransitionWidget_GetTransitionOutAnimation, ReturnValue) == 0x000000, "Member 'MarinerLoadTransitionWidget_GetTransitionOutAnimation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLoadEquippedDataForLocalProfile.LoadEquippedDataForLocalProfile
// 0x0010 (0x0010 - 0x0000)
struct MarinerLoadEquippedDataForLocalProfile_LoadEquippedDataForLocalProfile final
{
public:
	const class UObject*                          Param_WorldContextObject;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerLoadEquippedDataForLocalProfile* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLoadEquippedDataForLocalProfile_LoadEquippedDataForLocalProfile) == 0x000008, "Wrong alignment on MarinerLoadEquippedDataForLocalProfile_LoadEquippedDataForLocalProfile");
static_assert(sizeof(MarinerLoadEquippedDataForLocalProfile_LoadEquippedDataForLocalProfile) == 0x000010, "Wrong size on MarinerLoadEquippedDataForLocalProfile_LoadEquippedDataForLocalProfile");
static_assert(offsetof(MarinerLoadEquippedDataForLocalProfile_LoadEquippedDataForLocalProfile, Param_WorldContextObject) == 0x000000, "Member 'MarinerLoadEquippedDataForLocalProfile_LoadEquippedDataForLocalProfile::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerLoadEquippedDataForLocalProfile_LoadEquippedDataForLocalProfile, ReturnValue) == 0x000008, "Member 'MarinerLoadEquippedDataForLocalProfile_LoadEquippedDataForLocalProfile::ReturnValue' has a wrong offset!");

// Function Mariner.FSGBuildInformation.GetBuildConfig
// 0x0010 (0x0010 - 0x0000)
struct FSGBuildInformation_GetBuildConfig final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSGBuildInformation_GetBuildConfig) == 0x000008, "Wrong alignment on FSGBuildInformation_GetBuildConfig");
static_assert(sizeof(FSGBuildInformation_GetBuildConfig) == 0x000010, "Wrong size on FSGBuildInformation_GetBuildConfig");
static_assert(offsetof(FSGBuildInformation_GetBuildConfig, ReturnValue) == 0x000000, "Member 'FSGBuildInformation_GetBuildConfig::ReturnValue' has a wrong offset!");

// Function Mariner.FSGBuildInformation.GetBuildDate
// 0x0010 (0x0010 - 0x0000)
struct FSGBuildInformation_GetBuildDate final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSGBuildInformation_GetBuildDate) == 0x000008, "Wrong alignment on FSGBuildInformation_GetBuildDate");
static_assert(sizeof(FSGBuildInformation_GetBuildDate) == 0x000010, "Wrong size on FSGBuildInformation_GetBuildDate");
static_assert(offsetof(FSGBuildInformation_GetBuildDate, ReturnValue) == 0x000000, "Member 'FSGBuildInformation_GetBuildDate::ReturnValue' has a wrong offset!");

// Function Mariner.FSGBuildInformation.GetBuilderName
// 0x0010 (0x0010 - 0x0000)
struct FSGBuildInformation_GetBuilderName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSGBuildInformation_GetBuilderName) == 0x000008, "Wrong alignment on FSGBuildInformation_GetBuilderName");
static_assert(sizeof(FSGBuildInformation_GetBuilderName) == 0x000010, "Wrong size on FSGBuildInformation_GetBuilderName");
static_assert(offsetof(FSGBuildInformation_GetBuilderName, ReturnValue) == 0x000000, "Member 'FSGBuildInformation_GetBuilderName::ReturnValue' has a wrong offset!");

// Function Mariner.FSGBuildInformation.GetBuildNumber
// 0x0010 (0x0010 - 0x0000)
struct FSGBuildInformation_GetBuildNumber final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSGBuildInformation_GetBuildNumber) == 0x000008, "Wrong alignment on FSGBuildInformation_GetBuildNumber");
static_assert(sizeof(FSGBuildInformation_GetBuildNumber) == 0x000010, "Wrong size on FSGBuildInformation_GetBuildNumber");
static_assert(offsetof(FSGBuildInformation_GetBuildNumber, ReturnValue) == 0x000000, "Member 'FSGBuildInformation_GetBuildNumber::ReturnValue' has a wrong offset!");

// Function Mariner.FSGBuildInformation.GetBuildWorkerName
// 0x0010 (0x0010 - 0x0000)
struct FSGBuildInformation_GetBuildWorkerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSGBuildInformation_GetBuildWorkerName) == 0x000008, "Wrong alignment on FSGBuildInformation_GetBuildWorkerName");
static_assert(sizeof(FSGBuildInformation_GetBuildWorkerName) == 0x000010, "Wrong size on FSGBuildInformation_GetBuildWorkerName");
static_assert(offsetof(FSGBuildInformation_GetBuildWorkerName, ReturnValue) == 0x000000, "Member 'FSGBuildInformation_GetBuildWorkerName::ReturnValue' has a wrong offset!");

// Function Mariner.FSGBuildInformation.GetP4Branch
// 0x0010 (0x0010 - 0x0000)
struct FSGBuildInformation_GetP4Branch final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSGBuildInformation_GetP4Branch) == 0x000008, "Wrong alignment on FSGBuildInformation_GetP4Branch");
static_assert(sizeof(FSGBuildInformation_GetP4Branch) == 0x000010, "Wrong size on FSGBuildInformation_GetP4Branch");
static_assert(offsetof(FSGBuildInformation_GetP4Branch, ReturnValue) == 0x000000, "Member 'FSGBuildInformation_GetP4Branch::ReturnValue' has a wrong offset!");

// Function Mariner.FSGBuildInformation.GetP4Changelist
// 0x0010 (0x0010 - 0x0000)
struct FSGBuildInformation_GetP4Changelist final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSGBuildInformation_GetP4Changelist) == 0x000008, "Wrong alignment on FSGBuildInformation_GetP4Changelist");
static_assert(sizeof(FSGBuildInformation_GetP4Changelist) == 0x000010, "Wrong size on FSGBuildInformation_GetP4Changelist");
static_assert(offsetof(FSGBuildInformation_GetP4Changelist, ReturnValue) == 0x000000, "Member 'FSGBuildInformation_GetP4Changelist::ReturnValue' has a wrong offset!");

// Function Mariner.MangoAchievementsManager.Get
// 0x0010 (0x0010 - 0x0000)
struct MangoAchievementsManager_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMangoAchievementsManager*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoAchievementsManager_Get) == 0x000008, "Wrong alignment on MangoAchievementsManager_Get");
static_assert(sizeof(MangoAchievementsManager_Get) == 0x000010, "Wrong size on MangoAchievementsManager_Get");
static_assert(offsetof(MangoAchievementsManager_Get, WorldContextObject) == 0x000000, "Member 'MangoAchievementsManager_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MangoAchievementsManager_Get, ReturnValue) == 0x000008, "Member 'MangoAchievementsManager_Get::ReturnValue' has a wrong offset!");

// Function Mariner.MangoAchievementsManager.CheckIfMultiStatAchievementUnlocked
// 0x0001 (0x0001 - 0x0000)
struct MangoAchievementsManager_CheckIfMultiStatAchievementUnlocked final
{
public:
	EMarinerAchievement                           Achivement;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoAchievementsManager_CheckIfMultiStatAchievementUnlocked) == 0x000001, "Wrong alignment on MangoAchievementsManager_CheckIfMultiStatAchievementUnlocked");
static_assert(sizeof(MangoAchievementsManager_CheckIfMultiStatAchievementUnlocked) == 0x000001, "Wrong size on MangoAchievementsManager_CheckIfMultiStatAchievementUnlocked");
static_assert(offsetof(MangoAchievementsManager_CheckIfMultiStatAchievementUnlocked, Achivement) == 0x000000, "Member 'MangoAchievementsManager_CheckIfMultiStatAchievementUnlocked::Achivement' has a wrong offset!");

// Function Mariner.MangoAchievementsManager.IncrementStatForAchievement
// 0x0008 (0x0008 - 0x0000)
struct MangoAchievementsManager_IncrementStatForAchievement final
{
public:
	EMarinerAchievement                           EAchivement;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoAchievementsManager_IncrementStatForAchievement) == 0x000004, "Wrong alignment on MangoAchievementsManager_IncrementStatForAchievement");
static_assert(sizeof(MangoAchievementsManager_IncrementStatForAchievement) == 0x000008, "Wrong size on MangoAchievementsManager_IncrementStatForAchievement");
static_assert(offsetof(MangoAchievementsManager_IncrementStatForAchievement, EAchivement) == 0x000000, "Member 'MangoAchievementsManager_IncrementStatForAchievement::EAchivement' has a wrong offset!");
static_assert(offsetof(MangoAchievementsManager_IncrementStatForAchievement, Value) == 0x000004, "Member 'MangoAchievementsManager_IncrementStatForAchievement::Value' has a wrong offset!");

// Function Mariner.MangoAchievementsManager.ReplaceStatForAchievement
// 0x0008 (0x0008 - 0x0000)
struct MangoAchievementsManager_ReplaceStatForAchievement final
{
public:
	EMarinerAchievement                           EAchivement;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoAchievementsManager_ReplaceStatForAchievement) == 0x000004, "Wrong alignment on MangoAchievementsManager_ReplaceStatForAchievement");
static_assert(sizeof(MangoAchievementsManager_ReplaceStatForAchievement) == 0x000008, "Wrong size on MangoAchievementsManager_ReplaceStatForAchievement");
static_assert(offsetof(MangoAchievementsManager_ReplaceStatForAchievement, EAchivement) == 0x000000, "Member 'MangoAchievementsManager_ReplaceStatForAchievement::EAchivement' has a wrong offset!");
static_assert(offsetof(MangoAchievementsManager_ReplaceStatForAchievement, Value) == 0x000004, "Member 'MangoAchievementsManager_ReplaceStatForAchievement::Value' has a wrong offset!");

// Function Mariner.MangoBlastPassManager.Get
// 0x0010 (0x0010 - 0x0000)
struct MangoBlastPassManager_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMangoBlastPassManager*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoBlastPassManager_Get) == 0x000008, "Wrong alignment on MangoBlastPassManager_Get");
static_assert(sizeof(MangoBlastPassManager_Get) == 0x000010, "Wrong size on MangoBlastPassManager_Get");
static_assert(offsetof(MangoBlastPassManager_Get, WorldContextObject) == 0x000000, "Member 'MangoBlastPassManager_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MangoBlastPassManager_Get, ReturnValue) == 0x000008, "Member 'MangoBlastPassManager_Get::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.Get
// 0x0010 (0x0010 - 0x0000)
struct MangoCMSManager_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMangoCMSManager*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_Get) == 0x000008, "Wrong alignment on MangoCMSManager_Get");
static_assert(sizeof(MangoCMSManager_Get) == 0x000010, "Wrong size on MangoCMSManager_Get");
static_assert(offsetof(MangoCMSManager_Get, WorldContextObject) == 0x000000, "Member 'MangoCMSManager_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_Get, ReturnValue) == 0x000008, "Member 'MangoCMSManager_Get::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetSortedBlastPassOffers
// 0x0078 (0x0078 - 0x0000)
struct MangoCMSManager_GetSortedBlastPassOffers final
{
public:
	struct FMangoBlastPassDefinition              Definition;                                        // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutOffers;                                         // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetSortedBlastPassOffers) == 0x000008, "Wrong alignment on MangoCMSManager_GetSortedBlastPassOffers");
static_assert(sizeof(MangoCMSManager_GetSortedBlastPassOffers) == 0x000078, "Wrong size on MangoCMSManager_GetSortedBlastPassOffers");
static_assert(offsetof(MangoCMSManager_GetSortedBlastPassOffers, Definition) == 0x000000, "Member 'MangoCMSManager_GetSortedBlastPassOffers::Definition' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetSortedBlastPassOffers, OutOffers) == 0x000068, "Member 'MangoCMSManager_GetSortedBlastPassOffers::OutOffers' has a wrong offset!");

// Function Mariner.MangoCMSManager.IsPlaylistRanked
// 0x0014 (0x0014 - 0x0000)
struct MangoCMSManager_IsPlaylistRanked final
{
public:
	struct FGuid                                  PlaylistUniqueId;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C4[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_IsPlaylistRanked) == 0x000004, "Wrong alignment on MangoCMSManager_IsPlaylistRanked");
static_assert(sizeof(MangoCMSManager_IsPlaylistRanked) == 0x000014, "Wrong size on MangoCMSManager_IsPlaylistRanked");
static_assert(offsetof(MangoCMSManager_IsPlaylistRanked, PlaylistUniqueId) == 0x000000, "Member 'MangoCMSManager_IsPlaylistRanked::PlaylistUniqueId' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_IsPlaylistRanked, ReturnValue) == 0x000010, "Member 'MangoCMSManager_IsPlaylistRanked::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.FindPlaylist
// 0x0108 (0x0108 - 0x0000)
struct MangoCMSManager_FindPlaylist final
{
public:
	struct FGuid                                  PlaylistGuid;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoPlaylist                         ReturnValue;                                       // 0x0010(0x00F8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_FindPlaylist) == 0x000008, "Wrong alignment on MangoCMSManager_FindPlaylist");
static_assert(sizeof(MangoCMSManager_FindPlaylist) == 0x000108, "Wrong size on MangoCMSManager_FindPlaylist");
static_assert(offsetof(MangoCMSManager_FindPlaylist, PlaylistGuid) == 0x000000, "Member 'MangoCMSManager_FindPlaylist::PlaylistGuid' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_FindPlaylist, ReturnValue) == 0x000010, "Member 'MangoCMSManager_FindPlaylist::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetAllFeaturedOffersPrimary
// 0x0010 (0x0010 - 0x0000)
struct MangoCMSManager_GetAllFeaturedOffersPrimary final
{
public:
	TArray<struct FMangoFeaturedOffer>            ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetAllFeaturedOffersPrimary) == 0x000008, "Wrong alignment on MangoCMSManager_GetAllFeaturedOffersPrimary");
static_assert(sizeof(MangoCMSManager_GetAllFeaturedOffersPrimary) == 0x000010, "Wrong size on MangoCMSManager_GetAllFeaturedOffersPrimary");
static_assert(offsetof(MangoCMSManager_GetAllFeaturedOffersPrimary, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetAllFeaturedOffersPrimary::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetAllFeaturedOffersSecondary
// 0x0010 (0x0010 - 0x0000)
struct MangoCMSManager_GetAllFeaturedOffersSecondary final
{
public:
	TArray<struct FMangoFeaturedOffer>            ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetAllFeaturedOffersSecondary) == 0x000008, "Wrong alignment on MangoCMSManager_GetAllFeaturedOffersSecondary");
static_assert(sizeof(MangoCMSManager_GetAllFeaturedOffersSecondary) == 0x000010, "Wrong size on MangoCMSManager_GetAllFeaturedOffersSecondary");
static_assert(offsetof(MangoCMSManager_GetAllFeaturedOffersSecondary, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetAllFeaturedOffersSecondary::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetAllNativeOffers
// 0x0010 (0x0010 - 0x0000)
struct MangoCMSManager_GetAllNativeOffers final
{
public:
	TArray<struct FMangoNativeOffer>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetAllNativeOffers) == 0x000008, "Wrong alignment on MangoCMSManager_GetAllNativeOffers");
static_assert(sizeof(MangoCMSManager_GetAllNativeOffers) == 0x000010, "Wrong size on MangoCMSManager_GetAllNativeOffers");
static_assert(offsetof(MangoCMSManager_GetAllNativeOffers, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetAllNativeOffers::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetAllNativeOffersByType
// 0x0018 (0x0018 - 0x0000)
struct MangoCMSManager_GetAllNativeOffersByType final
{
public:
	EMangoNativeOfferType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMangoNativeOffer>              OutNativeOffers;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetAllNativeOffersByType) == 0x000008, "Wrong alignment on MangoCMSManager_GetAllNativeOffersByType");
static_assert(sizeof(MangoCMSManager_GetAllNativeOffersByType) == 0x000018, "Wrong size on MangoCMSManager_GetAllNativeOffersByType");
static_assert(offsetof(MangoCMSManager_GetAllNativeOffersByType, Type) == 0x000000, "Member 'MangoCMSManager_GetAllNativeOffersByType::Type' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetAllNativeOffersByType, OutNativeOffers) == 0x000008, "Member 'MangoCMSManager_GetAllNativeOffersByType::OutNativeOffers' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetAllOffersOfType
// 0x0018 (0x0018 - 0x0000)
struct MangoCMSManager_GetAllOffersOfType final
{
public:
	EMangoOfferType                               OfferType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMangoPurchaseOffer>            OutOffers;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetAllOffersOfType) == 0x000008, "Wrong alignment on MangoCMSManager_GetAllOffersOfType");
static_assert(sizeof(MangoCMSManager_GetAllOffersOfType) == 0x000018, "Wrong size on MangoCMSManager_GetAllOffersOfType");
static_assert(offsetof(MangoCMSManager_GetAllOffersOfType, OfferType) == 0x000000, "Member 'MangoCMSManager_GetAllOffersOfType::OfferType' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetAllOffersOfType, OutOffers) == 0x000008, "Member 'MangoCMSManager_GetAllOffersOfType::OutOffers' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetAllPurchaseOffers
// 0x0010 (0x0010 - 0x0000)
struct MangoCMSManager_GetAllPurchaseOffers final
{
public:
	TArray<struct FMangoPurchaseOffer>            ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetAllPurchaseOffers) == 0x000008, "Wrong alignment on MangoCMSManager_GetAllPurchaseOffers");
static_assert(sizeof(MangoCMSManager_GetAllPurchaseOffers) == 0x000010, "Wrong size on MangoCMSManager_GetAllPurchaseOffers");
static_assert(offsetof(MangoCMSManager_GetAllPurchaseOffers, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetAllPurchaseOffers::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetArtifactUnlockOrder
// 0x0018 (0x0018 - 0x0000)
struct MangoCMSManager_GetArtifactUnlockOrder final
{
public:
	class FString                                 ArtifactId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C7[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_GetArtifactUnlockOrder) == 0x000008, "Wrong alignment on MangoCMSManager_GetArtifactUnlockOrder");
static_assert(sizeof(MangoCMSManager_GetArtifactUnlockOrder) == 0x000018, "Wrong size on MangoCMSManager_GetArtifactUnlockOrder");
static_assert(offsetof(MangoCMSManager_GetArtifactUnlockOrder, ArtifactId) == 0x000000, "Member 'MangoCMSManager_GetArtifactUnlockOrder::ArtifactId' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetArtifactUnlockOrder, ReturnValue) == 0x000010, "Member 'MangoCMSManager_GetArtifactUnlockOrder::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetBlastPassItemTier
// 0x0018 (0x0018 - 0x0000)
struct MangoCMSManager_GetBlastPassItemTier final
{
public:
	class FString                                 ItemID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTier;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutIsPaid;                                         // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C8[0x2];                                     // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_GetBlastPassItemTier) == 0x000008, "Wrong alignment on MangoCMSManager_GetBlastPassItemTier");
static_assert(sizeof(MangoCMSManager_GetBlastPassItemTier) == 0x000018, "Wrong size on MangoCMSManager_GetBlastPassItemTier");
static_assert(offsetof(MangoCMSManager_GetBlastPassItemTier, ItemID) == 0x000000, "Member 'MangoCMSManager_GetBlastPassItemTier::ItemID' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetBlastPassItemTier, OutTier) == 0x000010, "Member 'MangoCMSManager_GetBlastPassItemTier::OutTier' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetBlastPassItemTier, OutIsPaid) == 0x000014, "Member 'MangoCMSManager_GetBlastPassItemTier::OutIsPaid' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetBlastPassItemTier, ReturnValue) == 0x000015, "Member 'MangoCMSManager_GetBlastPassItemTier::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetBlastPassMaxTier
// 0x0018 (0x0018 - 0x0000)
struct MangoCMSManager_GetBlastPassMaxTier final
{
public:
	class FString                                 DefinitionId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMaxTier;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C9[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_GetBlastPassMaxTier) == 0x000008, "Wrong alignment on MangoCMSManager_GetBlastPassMaxTier");
static_assert(sizeof(MangoCMSManager_GetBlastPassMaxTier) == 0x000018, "Wrong size on MangoCMSManager_GetBlastPassMaxTier");
static_assert(offsetof(MangoCMSManager_GetBlastPassMaxTier, DefinitionId) == 0x000000, "Member 'MangoCMSManager_GetBlastPassMaxTier::DefinitionId' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetBlastPassMaxTier, OutMaxTier) == 0x000010, "Member 'MangoCMSManager_GetBlastPassMaxTier::OutMaxTier' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetBlastPassMaxTier, ReturnValue) == 0x000014, "Member 'MangoCMSManager_GetBlastPassMaxTier::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetBlastPassTierPurchaseCost
// 0x0078 (0x0078 - 0x0000)
struct MangoCMSManager_GetBlastPassTierPurchaseCost final
{
public:
	struct FMangoBlastPassDefinition              Definition;                                        // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MinTier;                                           // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTier;                                           // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14CA[0x4];                                     // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_GetBlastPassTierPurchaseCost) == 0x000008, "Wrong alignment on MangoCMSManager_GetBlastPassTierPurchaseCost");
static_assert(sizeof(MangoCMSManager_GetBlastPassTierPurchaseCost) == 0x000078, "Wrong size on MangoCMSManager_GetBlastPassTierPurchaseCost");
static_assert(offsetof(MangoCMSManager_GetBlastPassTierPurchaseCost, Definition) == 0x000000, "Member 'MangoCMSManager_GetBlastPassTierPurchaseCost::Definition' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetBlastPassTierPurchaseCost, MinTier) == 0x000068, "Member 'MangoCMSManager_GetBlastPassTierPurchaseCost::MinTier' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetBlastPassTierPurchaseCost, MaxTier) == 0x00006C, "Member 'MangoCMSManager_GetBlastPassTierPurchaseCost::MaxTier' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetBlastPassTierPurchaseCost, ReturnValue) == 0x000070, "Member 'MangoCMSManager_GetBlastPassTierPurchaseCost::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetCMSVersion
// 0x0010 (0x0010 - 0x0000)
struct MangoCMSManager_GetCMSVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetCMSVersion) == 0x000008, "Wrong alignment on MangoCMSManager_GetCMSVersion");
static_assert(sizeof(MangoCMSManager_GetCMSVersion) == 0x000010, "Wrong size on MangoCMSManager_GetCMSVersion");
static_assert(offsetof(MangoCMSManager_GetCMSVersion, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetCMSVersion::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetFirstOfferContainingItem
// 0x00F0 (0x00F0 - 0x0000)
struct MangoCMSManager_GetFirstOfferContainingItem final
{
public:
	class FString                                 ItemID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoPurchaseOffer                    OutOffer;                                          // 0x0010(0x00D8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14CB[0x7];                                     // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_GetFirstOfferContainingItem) == 0x000008, "Wrong alignment on MangoCMSManager_GetFirstOfferContainingItem");
static_assert(sizeof(MangoCMSManager_GetFirstOfferContainingItem) == 0x0000F0, "Wrong size on MangoCMSManager_GetFirstOfferContainingItem");
static_assert(offsetof(MangoCMSManager_GetFirstOfferContainingItem, ItemID) == 0x000000, "Member 'MangoCMSManager_GetFirstOfferContainingItem::ItemID' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetFirstOfferContainingItem, OutOffer) == 0x000010, "Member 'MangoCMSManager_GetFirstOfferContainingItem::OutOffer' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetFirstOfferContainingItem, ReturnValue) == 0x0000E8, "Member 'MangoCMSManager_GetFirstOfferContainingItem::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetIsCrossplayKillSwitchEnabled
// 0x0001 (0x0001 - 0x0000)
struct MangoCMSManager_GetIsCrossplayKillSwitchEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetIsCrossplayKillSwitchEnabled) == 0x000001, "Wrong alignment on MangoCMSManager_GetIsCrossplayKillSwitchEnabled");
static_assert(sizeof(MangoCMSManager_GetIsCrossplayKillSwitchEnabled) == 0x000001, "Wrong size on MangoCMSManager_GetIsCrossplayKillSwitchEnabled");
static_assert(offsetof(MangoCMSManager_GetIsCrossplayKillSwitchEnabled, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetIsCrossplayKillSwitchEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetLoginReward
// 0x00E8 (0x00E8 - 0x0000)
struct MangoCMSManager_GetLoginReward final
{
public:
	class FName                                   LookupId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoLoginReward                      OutLoginReward;                                    // 0x0008(0x00D8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14CC[0x7];                                     // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_GetLoginReward) == 0x000008, "Wrong alignment on MangoCMSManager_GetLoginReward");
static_assert(sizeof(MangoCMSManager_GetLoginReward) == 0x0000E8, "Wrong size on MangoCMSManager_GetLoginReward");
static_assert(offsetof(MangoCMSManager_GetLoginReward, LookupId) == 0x000000, "Member 'MangoCMSManager_GetLoginReward::LookupId' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetLoginReward, OutLoginReward) == 0x000008, "Member 'MangoCMSManager_GetLoginReward::OutLoginReward' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetLoginReward, ReturnValue) == 0x0000E0, "Member 'MangoCMSManager_GetLoginReward::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetLoginRewards
// 0x0050 (0x0050 - 0x0000)
struct MangoCMSManager_GetLoginRewards final
{
public:
	TMap<class FName, struct FMangoLoginReward>   ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetLoginRewards) == 0x000008, "Wrong alignment on MangoCMSManager_GetLoginRewards");
static_assert(sizeof(MangoCMSManager_GetLoginRewards) == 0x000050, "Wrong size on MangoCMSManager_GetLoginRewards");
static_assert(offsetof(MangoCMSManager_GetLoginRewards, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetLoginRewards::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetMaps
// 0x0050 (0x0050 - 0x0000)
struct MangoCMSManager_GetMaps final
{
public:
	TMap<struct FGuid, struct FMangoMap>          ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetMaps) == 0x000008, "Wrong alignment on MangoCMSManager_GetMaps");
static_assert(sizeof(MangoCMSManager_GetMaps) == 0x000050, "Wrong size on MangoCMSManager_GetMaps");
static_assert(offsetof(MangoCMSManager_GetMaps, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetMaps::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetMatchmakingConfig
// 0x000C (0x000C - 0x0000)
struct MangoCMSManager_GetMatchmakingConfig final
{
public:
	struct FMangoMatchmakingConfig                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetMatchmakingConfig) == 0x000004, "Wrong alignment on MangoCMSManager_GetMatchmakingConfig");
static_assert(sizeof(MangoCMSManager_GetMatchmakingConfig) == 0x00000C, "Wrong size on MangoCMSManager_GetMatchmakingConfig");
static_assert(offsetof(MangoCMSManager_GetMatchmakingConfig, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetMatchmakingConfig::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetModes
// 0x0050 (0x0050 - 0x0000)
struct MangoCMSManager_GetModes final
{
public:
	TMap<struct FGuid, struct FMangoMode>         ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetModes) == 0x000008, "Wrong alignment on MangoCMSManager_GetModes");
static_assert(sizeof(MangoCMSManager_GetModes) == 0x000050, "Wrong size on MangoCMSManager_GetModes");
static_assert(offsetof(MangoCMSManager_GetModes, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetModes::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetNews
// 0x0010 (0x0010 - 0x0000)
struct MangoCMSManager_GetNews final
{
public:
	TArray<struct FMangoNews>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetNews) == 0x000008, "Wrong alignment on MangoCMSManager_GetNews");
static_assert(sizeof(MangoCMSManager_GetNews) == 0x000010, "Wrong size on MangoCMSManager_GetNews");
static_assert(offsetof(MangoCMSManager_GetNews, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetNews::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetNewsAtIndex
// 0x0050 (0x0050 - 0x0000)
struct MangoCMSManager_GetNewsAtIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14CD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoNews                             ReturnValue;                                       // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetNewsAtIndex) == 0x000008, "Wrong alignment on MangoCMSManager_GetNewsAtIndex");
static_assert(sizeof(MangoCMSManager_GetNewsAtIndex) == 0x000050, "Wrong size on MangoCMSManager_GetNewsAtIndex");
static_assert(offsetof(MangoCMSManager_GetNewsAtIndex, Param_Index) == 0x000000, "Member 'MangoCMSManager_GetNewsAtIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetNewsAtIndex, ReturnValue) == 0x000008, "Member 'MangoCMSManager_GetNewsAtIndex::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetNewsCount
// 0x0004 (0x0004 - 0x0000)
struct MangoCMSManager_GetNewsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetNewsCount) == 0x000004, "Wrong alignment on MangoCMSManager_GetNewsCount");
static_assert(sizeof(MangoCMSManager_GetNewsCount) == 0x000004, "Wrong size on MangoCMSManager_GetNewsCount");
static_assert(offsetof(MangoCMSManager_GetNewsCount, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetNewsCount::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetNextArtifactUnlock
// 0x0060 (0x0060 - 0x0000)
struct MangoCMSManager_GetNextArtifactUnlock final
{
public:
	int32                                         CurrentArtifactLevel;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14CE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoItem                             OutItem;                                           // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14CF[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_GetNextArtifactUnlock) == 0x000008, "Wrong alignment on MangoCMSManager_GetNextArtifactUnlock");
static_assert(sizeof(MangoCMSManager_GetNextArtifactUnlock) == 0x000060, "Wrong size on MangoCMSManager_GetNextArtifactUnlock");
static_assert(offsetof(MangoCMSManager_GetNextArtifactUnlock, CurrentArtifactLevel) == 0x000000, "Member 'MangoCMSManager_GetNextArtifactUnlock::CurrentArtifactLevel' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetNextArtifactUnlock, OutItem) == 0x000008, "Member 'MangoCMSManager_GetNextArtifactUnlock::OutItem' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetNextArtifactUnlock, ReturnValue) == 0x000058, "Member 'MangoCMSManager_GetNextArtifactUnlock::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetOfferName
// 0x00F0 (0x00F0 - 0x0000)
struct MangoCMSManager_GetOfferName final
{
public:
	struct FMangoPurchaseOffer                    Offer;                                             // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x00D8(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetOfferName) == 0x000008, "Wrong alignment on MangoCMSManager_GetOfferName");
static_assert(sizeof(MangoCMSManager_GetOfferName) == 0x0000F0, "Wrong size on MangoCMSManager_GetOfferName");
static_assert(offsetof(MangoCMSManager_GetOfferName, Offer) == 0x000000, "Member 'MangoCMSManager_GetOfferName::Offer' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetOfferName, ReturnValue) == 0x0000D8, "Member 'MangoCMSManager_GetOfferName::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetPlaylistEventId
// 0x0020 (0x0020 - 0x0000)
struct MangoCMSManager_GetPlaylistEventId final
{
public:
	struct FGuid                                  PlaylistUniqueId;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetPlaylistEventId) == 0x000008, "Wrong alignment on MangoCMSManager_GetPlaylistEventId");
static_assert(sizeof(MangoCMSManager_GetPlaylistEventId) == 0x000020, "Wrong size on MangoCMSManager_GetPlaylistEventId");
static_assert(offsetof(MangoCMSManager_GetPlaylistEventId, PlaylistUniqueId) == 0x000000, "Member 'MangoCMSManager_GetPlaylistEventId::PlaylistUniqueId' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetPlaylistEventId, ReturnValue) == 0x000010, "Member 'MangoCMSManager_GetPlaylistEventId::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetPlaylists
// 0x0010 (0x0010 - 0x0000)
struct MangoCMSManager_GetPlaylists final
{
public:
	TArray<struct FMangoPlaylist>                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetPlaylists) == 0x000008, "Wrong alignment on MangoCMSManager_GetPlaylists");
static_assert(sizeof(MangoCMSManager_GetPlaylists) == 0x000010, "Wrong size on MangoCMSManager_GetPlaylists");
static_assert(offsetof(MangoCMSManager_GetPlaylists, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetPlaylists::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetPrivateMatchMaps
// 0x0010 (0x0010 - 0x0000)
struct MangoCMSManager_GetPrivateMatchMaps final
{
public:
	TArray<struct FGuid>                          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetPrivateMatchMaps) == 0x000008, "Wrong alignment on MangoCMSManager_GetPrivateMatchMaps");
static_assert(sizeof(MangoCMSManager_GetPrivateMatchMaps) == 0x000010, "Wrong size on MangoCMSManager_GetPrivateMatchMaps");
static_assert(offsetof(MangoCMSManager_GetPrivateMatchMaps, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetPrivateMatchMaps::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetPrivateMatchModes
// 0x0010 (0x0010 - 0x0000)
struct MangoCMSManager_GetPrivateMatchModes final
{
public:
	TArray<struct FGuid>                          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetPrivateMatchModes) == 0x000008, "Wrong alignment on MangoCMSManager_GetPrivateMatchModes");
static_assert(sizeof(MangoCMSManager_GetPrivateMatchModes) == 0x000010, "Wrong size on MangoCMSManager_GetPrivateMatchModes");
static_assert(offsetof(MangoCMSManager_GetPrivateMatchModes, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetPrivateMatchModes::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetProgressionCharacter
// 0x0028 (0x0028 - 0x0000)
struct MangoCMSManager_GetProgressionCharacter final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoProgressionCharacterReward       OutCharacterReward;                                // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D0[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_GetProgressionCharacter) == 0x000008, "Wrong alignment on MangoCMSManager_GetProgressionCharacter");
static_assert(sizeof(MangoCMSManager_GetProgressionCharacter) == 0x000028, "Wrong size on MangoCMSManager_GetProgressionCharacter");
static_assert(offsetof(MangoCMSManager_GetProgressionCharacter, CharacterId) == 0x000000, "Member 'MangoCMSManager_GetProgressionCharacter::CharacterId' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetProgressionCharacter, OutCharacterReward) == 0x000010, "Member 'MangoCMSManager_GetProgressionCharacter::OutCharacterReward' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetProgressionCharacter, ReturnValue) == 0x000020, "Member 'MangoCMSManager_GetProgressionCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetProgressionCharacterMaxLevel
// 0x0018 (0x0018 - 0x0000)
struct MangoCMSManager_GetProgressionCharacterMaxLevel final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D1[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_GetProgressionCharacterMaxLevel) == 0x000008, "Wrong alignment on MangoCMSManager_GetProgressionCharacterMaxLevel");
static_assert(sizeof(MangoCMSManager_GetProgressionCharacterMaxLevel) == 0x000018, "Wrong size on MangoCMSManager_GetProgressionCharacterMaxLevel");
static_assert(offsetof(MangoCMSManager_GetProgressionCharacterMaxLevel, CharacterId) == 0x000000, "Member 'MangoCMSManager_GetProgressionCharacterMaxLevel::CharacterId' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetProgressionCharacterMaxLevel, ReturnValue) == 0x000010, "Member 'MangoCMSManager_GetProgressionCharacterMaxLevel::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetProgressionItemUnlock
// 0x0030 (0x0030 - 0x0000)
struct MangoCMSManager_GetProgressionItemUnlock final
{
public:
	class FString                                 ItemID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoProgressionCharacterItemUnlock   OutItemUnlock;                                     // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D2[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_GetProgressionItemUnlock) == 0x000008, "Wrong alignment on MangoCMSManager_GetProgressionItemUnlock");
static_assert(sizeof(MangoCMSManager_GetProgressionItemUnlock) == 0x000030, "Wrong size on MangoCMSManager_GetProgressionItemUnlock");
static_assert(offsetof(MangoCMSManager_GetProgressionItemUnlock, ItemID) == 0x000000, "Member 'MangoCMSManager_GetProgressionItemUnlock::ItemID' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetProgressionItemUnlock, OutItemUnlock) == 0x000010, "Member 'MangoCMSManager_GetProgressionItemUnlock::OutItemUnlock' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetProgressionItemUnlock, ReturnValue) == 0x000028, "Member 'MangoCMSManager_GetProgressionItemUnlock::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetPurchasableCharacter
// 0x0120 (0x0120 - 0x0000)
struct MangoCMSManager_GetPurchasableCharacter final
{
public:
	TSoftClassPtr<class UClass>                   Character;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoPurchasableCharacter             OutPurchaseCharacter;                              // 0x0028(0x00F0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D3[0x7];                                     // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_GetPurchasableCharacter) == 0x000008, "Wrong alignment on MangoCMSManager_GetPurchasableCharacter");
static_assert(sizeof(MangoCMSManager_GetPurchasableCharacter) == 0x000120, "Wrong size on MangoCMSManager_GetPurchasableCharacter");
static_assert(offsetof(MangoCMSManager_GetPurchasableCharacter, Character) == 0x000000, "Member 'MangoCMSManager_GetPurchasableCharacter::Character' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetPurchasableCharacter, OutPurchaseCharacter) == 0x000028, "Member 'MangoCMSManager_GetPurchasableCharacter::OutPurchaseCharacter' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetPurchasableCharacter, ReturnValue) == 0x000118, "Member 'MangoCMSManager_GetPurchasableCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetPurchaseOfferById
// 0x00F0 (0x00F0 - 0x0000)
struct MangoCMSManager_GetPurchaseOfferById final
{
public:
	class FString                                 LookupId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoPurchaseOffer                    OutPurchaseOffer;                                  // 0x0010(0x00D8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D4[0x7];                                     // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_GetPurchaseOfferById) == 0x000008, "Wrong alignment on MangoCMSManager_GetPurchaseOfferById");
static_assert(sizeof(MangoCMSManager_GetPurchaseOfferById) == 0x0000F0, "Wrong size on MangoCMSManager_GetPurchaseOfferById");
static_assert(offsetof(MangoCMSManager_GetPurchaseOfferById, LookupId) == 0x000000, "Member 'MangoCMSManager_GetPurchaseOfferById::LookupId' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetPurchaseOfferById, OutPurchaseOffer) == 0x000010, "Member 'MangoCMSManager_GetPurchaseOfferById::OutPurchaseOffer' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetPurchaseOfferById, ReturnValue) == 0x0000E8, "Member 'MangoCMSManager_GetPurchaseOfferById::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetQuest
// 0x0078 (0x0078 - 0x0000)
struct MangoCMSManager_GetQuest final
{
public:
	class FName                                   LookupId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoQuest                            OutQuest;                                          // 0x0008(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D5[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_GetQuest) == 0x000008, "Wrong alignment on MangoCMSManager_GetQuest");
static_assert(sizeof(MangoCMSManager_GetQuest) == 0x000078, "Wrong size on MangoCMSManager_GetQuest");
static_assert(offsetof(MangoCMSManager_GetQuest, LookupId) == 0x000000, "Member 'MangoCMSManager_GetQuest::LookupId' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetQuest, OutQuest) == 0x000008, "Member 'MangoCMSManager_GetQuest::OutQuest' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetQuest, ReturnValue) == 0x000070, "Member 'MangoCMSManager_GetQuest::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetQuestReward
// 0x00D8 (0x00D8 - 0x0000)
struct MangoCMSManager_GetQuestReward final
{
public:
	class FName                                   LookupId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoQuestReward                      OutQuestReward;                                    // 0x0008(0x00C8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D6[0x7];                                     // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_GetQuestReward) == 0x000008, "Wrong alignment on MangoCMSManager_GetQuestReward");
static_assert(sizeof(MangoCMSManager_GetQuestReward) == 0x0000D8, "Wrong size on MangoCMSManager_GetQuestReward");
static_assert(offsetof(MangoCMSManager_GetQuestReward, LookupId) == 0x000000, "Member 'MangoCMSManager_GetQuestReward::LookupId' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetQuestReward, OutQuestReward) == 0x000008, "Member 'MangoCMSManager_GetQuestReward::OutQuestReward' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetQuestReward, ReturnValue) == 0x0000D0, "Member 'MangoCMSManager_GetQuestReward::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetQuestRewards
// 0x0050 (0x0050 - 0x0000)
struct MangoCMSManager_GetQuestRewards final
{
public:
	TMap<class FName, struct FMangoQuestReward>   ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetQuestRewards) == 0x000008, "Wrong alignment on MangoCMSManager_GetQuestRewards");
static_assert(sizeof(MangoCMSManager_GetQuestRewards) == 0x000050, "Wrong size on MangoCMSManager_GetQuestRewards");
static_assert(offsetof(MangoCMSManager_GetQuestRewards, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetQuestRewards::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetQuests
// 0x0050 (0x0050 - 0x0000)
struct MangoCMSManager_GetQuests final
{
public:
	TMap<class FName, struct FMangoQuest>         ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_GetQuests) == 0x000008, "Wrong alignment on MangoCMSManager_GetQuests");
static_assert(sizeof(MangoCMSManager_GetQuests) == 0x000050, "Wrong size on MangoCMSManager_GetQuests");
static_assert(offsetof(MangoCMSManager_GetQuests, ReturnValue) == 0x000000, "Member 'MangoCMSManager_GetQuests::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.GetQuickPlayPlaylist
// 0x0100 (0x0100 - 0x0000)
struct MangoCMSManager_GetQuickPlayPlaylist final
{
public:
	struct FMangoPlaylist                         OutPlaylist;                                       // 0x0000(0x00F8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D7[0x7];                                     // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_GetQuickPlayPlaylist) == 0x000008, "Wrong alignment on MangoCMSManager_GetQuickPlayPlaylist");
static_assert(sizeof(MangoCMSManager_GetQuickPlayPlaylist) == 0x000100, "Wrong size on MangoCMSManager_GetQuickPlayPlaylist");
static_assert(offsetof(MangoCMSManager_GetQuickPlayPlaylist, OutPlaylist) == 0x000000, "Member 'MangoCMSManager_GetQuickPlayPlaylist::OutPlaylist' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_GetQuickPlayPlaylist, ReturnValue) == 0x0000F8, "Member 'MangoCMSManager_GetQuickPlayPlaylist::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.IsFeaturedOffer
// 0x0018 (0x0018 - 0x0000)
struct MangoCMSManager_IsFeaturedOffer final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D8[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_IsFeaturedOffer) == 0x000008, "Wrong alignment on MangoCMSManager_IsFeaturedOffer");
static_assert(sizeof(MangoCMSManager_IsFeaturedOffer) == 0x000018, "Wrong size on MangoCMSManager_IsFeaturedOffer");
static_assert(offsetof(MangoCMSManager_IsFeaturedOffer, OfferId) == 0x000000, "Member 'MangoCMSManager_IsFeaturedOffer::OfferId' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_IsFeaturedOffer, ReturnValue) == 0x000010, "Member 'MangoCMSManager_IsFeaturedOffer::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.IsNewsLoaded
// 0x0001 (0x0001 - 0x0000)
struct MangoCMSManager_IsNewsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_IsNewsLoaded) == 0x000001, "Wrong alignment on MangoCMSManager_IsNewsLoaded");
static_assert(sizeof(MangoCMSManager_IsNewsLoaded) == 0x000001, "Wrong size on MangoCMSManager_IsNewsLoaded");
static_assert(offsetof(MangoCMSManager_IsNewsLoaded, ReturnValue) == 0x000000, "Member 'MangoCMSManager_IsNewsLoaded::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.IsOfferActive
// 0x00E0 (0x00E0 - 0x0000)
struct MangoCMSManager_IsOfferActive final
{
public:
	struct FMangoPurchaseOffer                    Offer;                                             // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D9[0x7];                                     // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_IsOfferActive) == 0x000008, "Wrong alignment on MangoCMSManager_IsOfferActive");
static_assert(sizeof(MangoCMSManager_IsOfferActive) == 0x0000E0, "Wrong size on MangoCMSManager_IsOfferActive");
static_assert(offsetof(MangoCMSManager_IsOfferActive, Offer) == 0x000000, "Member 'MangoCMSManager_IsOfferActive::Offer' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_IsOfferActive, ReturnValue) == 0x0000D8, "Member 'MangoCMSManager_IsOfferActive::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.IsOnboardingPlaylist
// 0x0014 (0x0014 - 0x0000)
struct MangoCMSManager_IsOnboardingPlaylist final
{
public:
	struct FGuid                                  PlaylistGuid;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14DA[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_IsOnboardingPlaylist) == 0x000004, "Wrong alignment on MangoCMSManager_IsOnboardingPlaylist");
static_assert(sizeof(MangoCMSManager_IsOnboardingPlaylist) == 0x000014, "Wrong size on MangoCMSManager_IsOnboardingPlaylist");
static_assert(offsetof(MangoCMSManager_IsOnboardingPlaylist, PlaylistGuid) == 0x000000, "Member 'MangoCMSManager_IsOnboardingPlaylist::PlaylistGuid' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_IsOnboardingPlaylist, ReturnValue) == 0x000010, "Member 'MangoCMSManager_IsOnboardingPlaylist::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.IsPlaylistPvEOnly
// 0x0014 (0x0014 - 0x0000)
struct MangoCMSManager_IsPlaylistPvEOnly final
{
public:
	struct FGuid                                  PlaylistUniqueId;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14DB[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_IsPlaylistPvEOnly) == 0x000004, "Wrong alignment on MangoCMSManager_IsPlaylistPvEOnly");
static_assert(sizeof(MangoCMSManager_IsPlaylistPvEOnly) == 0x000014, "Wrong size on MangoCMSManager_IsPlaylistPvEOnly");
static_assert(offsetof(MangoCMSManager_IsPlaylistPvEOnly, PlaylistUniqueId) == 0x000000, "Member 'MangoCMSManager_IsPlaylistPvEOnly::PlaylistUniqueId' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_IsPlaylistPvEOnly, ReturnValue) == 0x000010, "Member 'MangoCMSManager_IsPlaylistPvEOnly::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.IsRankedPlaylistAvaliable
// 0x0001 (0x0001 - 0x0000)
struct MangoCMSManager_IsRankedPlaylistAvaliable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoCMSManager_IsRankedPlaylistAvaliable) == 0x000001, "Wrong alignment on MangoCMSManager_IsRankedPlaylistAvaliable");
static_assert(sizeof(MangoCMSManager_IsRankedPlaylistAvaliable) == 0x000001, "Wrong size on MangoCMSManager_IsRankedPlaylistAvaliable");
static_assert(offsetof(MangoCMSManager_IsRankedPlaylistAvaliable, ReturnValue) == 0x000000, "Member 'MangoCMSManager_IsRankedPlaylistAvaliable::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.TryGetActiveBlastPassDefinition
// 0x0070 (0x0070 - 0x0000)
struct MangoCMSManager_TryGetActiveBlastPassDefinition final
{
public:
	struct FMangoBlastPassDefinition              OutDefinition;                                     // 0x0000(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14DC[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_TryGetActiveBlastPassDefinition) == 0x000008, "Wrong alignment on MangoCMSManager_TryGetActiveBlastPassDefinition");
static_assert(sizeof(MangoCMSManager_TryGetActiveBlastPassDefinition) == 0x000070, "Wrong size on MangoCMSManager_TryGetActiveBlastPassDefinition");
static_assert(offsetof(MangoCMSManager_TryGetActiveBlastPassDefinition, OutDefinition) == 0x000000, "Member 'MangoCMSManager_TryGetActiveBlastPassDefinition::OutDefinition' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_TryGetActiveBlastPassDefinition, ReturnValue) == 0x000068, "Member 'MangoCMSManager_TryGetActiveBlastPassDefinition::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.TryGetBlastPassDefinition
// 0x0080 (0x0080 - 0x0000)
struct MangoCMSManager_TryGetBlastPassDefinition final
{
public:
	class FString                                 DefinitionId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoBlastPassDefinition              OutDefinition;                                     // 0x0010(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14DD[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_TryGetBlastPassDefinition) == 0x000008, "Wrong alignment on MangoCMSManager_TryGetBlastPassDefinition");
static_assert(sizeof(MangoCMSManager_TryGetBlastPassDefinition) == 0x000080, "Wrong size on MangoCMSManager_TryGetBlastPassDefinition");
static_assert(offsetof(MangoCMSManager_TryGetBlastPassDefinition, DefinitionId) == 0x000000, "Member 'MangoCMSManager_TryGetBlastPassDefinition::DefinitionId' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_TryGetBlastPassDefinition, OutDefinition) == 0x000010, "Member 'MangoCMSManager_TryGetBlastPassDefinition::OutDefinition' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_TryGetBlastPassDefinition, ReturnValue) == 0x000078, "Member 'MangoCMSManager_TryGetBlastPassDefinition::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.TryGetCMSItemByAssetPath
// 0x0070 (0x0070 - 0x0000)
struct MangoCMSManager_TryGetCMSItemByAssetPath final
{
public:
	class FString                                 AssetPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14DE[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoItem                             OutItem;                                           // 0x0018(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14DF[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_TryGetCMSItemByAssetPath) == 0x000008, "Wrong alignment on MangoCMSManager_TryGetCMSItemByAssetPath");
static_assert(sizeof(MangoCMSManager_TryGetCMSItemByAssetPath) == 0x000070, "Wrong size on MangoCMSManager_TryGetCMSItemByAssetPath");
static_assert(offsetof(MangoCMSManager_TryGetCMSItemByAssetPath, AssetPath) == 0x000000, "Member 'MangoCMSManager_TryGetCMSItemByAssetPath::AssetPath' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_TryGetCMSItemByAssetPath, ItemType) == 0x000010, "Member 'MangoCMSManager_TryGetCMSItemByAssetPath::ItemType' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_TryGetCMSItemByAssetPath, OutItem) == 0x000018, "Member 'MangoCMSManager_TryGetCMSItemByAssetPath::OutItem' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_TryGetCMSItemByAssetPath, ReturnValue) == 0x000068, "Member 'MangoCMSManager_TryGetCMSItemByAssetPath::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.TryGetItemByCMSID
// 0x0070 (0x0070 - 0x0000)
struct MangoCMSManager_TryGetItemByCMSID final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E0[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoItem                             OutItem;                                           // 0x0018(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E1[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_TryGetItemByCMSID) == 0x000008, "Wrong alignment on MangoCMSManager_TryGetItemByCMSID");
static_assert(sizeof(MangoCMSManager_TryGetItemByCMSID) == 0x000070, "Wrong size on MangoCMSManager_TryGetItemByCMSID");
static_assert(offsetof(MangoCMSManager_TryGetItemByCMSID, ID) == 0x000000, "Member 'MangoCMSManager_TryGetItemByCMSID::ID' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_TryGetItemByCMSID, Type) == 0x000010, "Member 'MangoCMSManager_TryGetItemByCMSID::Type' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_TryGetItemByCMSID, OutItem) == 0x000018, "Member 'MangoCMSManager_TryGetItemByCMSID::OutItem' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_TryGetItemByCMSID, ReturnValue) == 0x000068, "Member 'MangoCMSManager_TryGetItemByCMSID::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.TryGetNativeOfferById
// 0x00D8 (0x00D8 - 0x0000)
struct MangoCMSManager_TryGetNativeOfferById final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoNativeOffer                      OutNativeOffer;                                    // 0x0010(0x00C0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E2[0x7];                                     // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_TryGetNativeOfferById) == 0x000008, "Wrong alignment on MangoCMSManager_TryGetNativeOfferById");
static_assert(sizeof(MangoCMSManager_TryGetNativeOfferById) == 0x0000D8, "Wrong size on MangoCMSManager_TryGetNativeOfferById");
static_assert(offsetof(MangoCMSManager_TryGetNativeOfferById, ID) == 0x000000, "Member 'MangoCMSManager_TryGetNativeOfferById::ID' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_TryGetNativeOfferById, OutNativeOffer) == 0x000010, "Member 'MangoCMSManager_TryGetNativeOfferById::OutNativeOffer' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_TryGetNativeOfferById, ReturnValue) == 0x0000D0, "Member 'MangoCMSManager_TryGetNativeOfferById::ReturnValue' has a wrong offset!");

// Function Mariner.MangoCMSManager.TryGetNativeOfferByLookupIdentifier
// 0x00D8 (0x00D8 - 0x0000)
struct MangoCMSManager_TryGetNativeOfferByLookupIdentifier final
{
public:
	class FString                                 LookupIdentifer;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoNativeOffer                      OutNativeOffer;                                    // 0x0010(0x00C0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E3[0x7];                                     // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoCMSManager_TryGetNativeOfferByLookupIdentifier) == 0x000008, "Wrong alignment on MangoCMSManager_TryGetNativeOfferByLookupIdentifier");
static_assert(sizeof(MangoCMSManager_TryGetNativeOfferByLookupIdentifier) == 0x0000D8, "Wrong size on MangoCMSManager_TryGetNativeOfferByLookupIdentifier");
static_assert(offsetof(MangoCMSManager_TryGetNativeOfferByLookupIdentifier, LookupIdentifer) == 0x000000, "Member 'MangoCMSManager_TryGetNativeOfferByLookupIdentifier::LookupIdentifer' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_TryGetNativeOfferByLookupIdentifier, OutNativeOffer) == 0x000010, "Member 'MangoCMSManager_TryGetNativeOfferByLookupIdentifier::OutNativeOffer' has a wrong offset!");
static_assert(offsetof(MangoCMSManager_TryGetNativeOfferByLookupIdentifier, ReturnValue) == 0x0000D0, "Member 'MangoCMSManager_TryGetNativeOfferByLookupIdentifier::ReturnValue' has a wrong offset!");

// Function Mariner.MangoFriendsManager.Get
// 0x0010 (0x0010 - 0x0000)
struct MangoFriendsManager_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMangoFriendsManager*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoFriendsManager_Get) == 0x000008, "Wrong alignment on MangoFriendsManager_Get");
static_assert(sizeof(MangoFriendsManager_Get) == 0x000010, "Wrong size on MangoFriendsManager_Get");
static_assert(offsetof(MangoFriendsManager_Get, WorldContextObject) == 0x000000, "Member 'MangoFriendsManager_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MangoFriendsManager_Get, ReturnValue) == 0x000008, "Member 'MangoFriendsManager_Get::ReturnValue' has a wrong offset!");

// Function Mariner.MangoFriendsManager.DoesPlatformSupportFriendManagement
// 0x0001 (0x0001 - 0x0000)
struct MangoFriendsManager_DoesPlatformSupportFriendManagement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoFriendsManager_DoesPlatformSupportFriendManagement) == 0x000001, "Wrong alignment on MangoFriendsManager_DoesPlatformSupportFriendManagement");
static_assert(sizeof(MangoFriendsManager_DoesPlatformSupportFriendManagement) == 0x000001, "Wrong size on MangoFriendsManager_DoesPlatformSupportFriendManagement");
static_assert(offsetof(MangoFriendsManager_DoesPlatformSupportFriendManagement, ReturnValue) == 0x000000, "Member 'MangoFriendsManager_DoesPlatformSupportFriendManagement::ReturnValue' has a wrong offset!");

// Function Mariner.MangoFriendsManager.DoesPlatformSupportViewingFriends
// 0x0001 (0x0001 - 0x0000)
struct MangoFriendsManager_DoesPlatformSupportViewingFriends final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoFriendsManager_DoesPlatformSupportViewingFriends) == 0x000001, "Wrong alignment on MangoFriendsManager_DoesPlatformSupportViewingFriends");
static_assert(sizeof(MangoFriendsManager_DoesPlatformSupportViewingFriends) == 0x000001, "Wrong size on MangoFriendsManager_DoesPlatformSupportViewingFriends");
static_assert(offsetof(MangoFriendsManager_DoesPlatformSupportViewingFriends, ReturnValue) == 0x000000, "Member 'MangoFriendsManager_DoesPlatformSupportViewingFriends::ReturnValue' has a wrong offset!");

// Function Mariner.MangoFriendsManager.DoesPlatformSupportViewingProfile
// 0x0001 (0x0001 - 0x0000)
struct MangoFriendsManager_DoesPlatformSupportViewingProfile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoFriendsManager_DoesPlatformSupportViewingProfile) == 0x000001, "Wrong alignment on MangoFriendsManager_DoesPlatformSupportViewingProfile");
static_assert(sizeof(MangoFriendsManager_DoesPlatformSupportViewingProfile) == 0x000001, "Wrong size on MangoFriendsManager_DoesPlatformSupportViewingProfile");
static_assert(offsetof(MangoFriendsManager_DoesPlatformSupportViewingProfile, ReturnValue) == 0x000000, "Member 'MangoFriendsManager_DoesPlatformSupportViewingProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MangoFriendsManager.GetUserPrivilegeCanCommunicateOnline
// 0x0001 (0x0001 - 0x0000)
struct MangoFriendsManager_GetUserPrivilegeCanCommunicateOnline final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoFriendsManager_GetUserPrivilegeCanCommunicateOnline) == 0x000001, "Wrong alignment on MangoFriendsManager_GetUserPrivilegeCanCommunicateOnline");
static_assert(sizeof(MangoFriendsManager_GetUserPrivilegeCanCommunicateOnline) == 0x000001, "Wrong size on MangoFriendsManager_GetUserPrivilegeCanCommunicateOnline");
static_assert(offsetof(MangoFriendsManager_GetUserPrivilegeCanCommunicateOnline, ReturnValue) == 0x000000, "Member 'MangoFriendsManager_GetUserPrivilegeCanCommunicateOnline::ReturnValue' has a wrong offset!");

// Function Mariner.MangoFriendsManager.GetUserPrivilegeCanCrossplay
// 0x0001 (0x0001 - 0x0000)
struct MangoFriendsManager_GetUserPrivilegeCanCrossplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoFriendsManager_GetUserPrivilegeCanCrossplay) == 0x000001, "Wrong alignment on MangoFriendsManager_GetUserPrivilegeCanCrossplay");
static_assert(sizeof(MangoFriendsManager_GetUserPrivilegeCanCrossplay) == 0x000001, "Wrong size on MangoFriendsManager_GetUserPrivilegeCanCrossplay");
static_assert(offsetof(MangoFriendsManager_GetUserPrivilegeCanCrossplay, ReturnValue) == 0x000000, "Member 'MangoFriendsManager_GetUserPrivilegeCanCrossplay::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.Get
// 0x0010 (0x0010 - 0x0000)
struct MangoInventoryManager_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMangoInventoryManager*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoInventoryManager_Get) == 0x000008, "Wrong alignment on MangoInventoryManager_Get");
static_assert(sizeof(MangoInventoryManager_Get) == 0x000010, "Wrong size on MangoInventoryManager_Get");
static_assert(offsetof(MangoInventoryManager_Get, WorldContextObject) == 0x000000, "Member 'MangoInventoryManager_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_Get, ReturnValue) == 0x000008, "Member 'MangoInventoryManager_Get::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.PurchaseBlastPassTiers
// 0x0070 (0x0070 - 0x0000)
struct MangoInventoryManager_PurchaseBlastPassTiers final
{
public:
	struct FMangoBlastPassDefinition              blastpass;                                         // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MaxTierToPurchase;                                 // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E7[0x4];                                     // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoInventoryManager_PurchaseBlastPassTiers) == 0x000008, "Wrong alignment on MangoInventoryManager_PurchaseBlastPassTiers");
static_assert(sizeof(MangoInventoryManager_PurchaseBlastPassTiers) == 0x000070, "Wrong size on MangoInventoryManager_PurchaseBlastPassTiers");
static_assert(offsetof(MangoInventoryManager_PurchaseBlastPassTiers, blastpass) == 0x000000, "Member 'MangoInventoryManager_PurchaseBlastPassTiers::blastpass' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_PurchaseBlastPassTiers, MaxTierToPurchase) == 0x000068, "Member 'MangoInventoryManager_PurchaseBlastPassTiers::MaxTierToPurchase' has a wrong offset!");

// Function Mariner.MangoInventoryManager.PurchaseOffer
// 0x0018 (0x0018 - 0x0000)
struct MangoInventoryManager_PurchaseOffer final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPremium;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E8[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoInventoryManager_PurchaseOffer) == 0x000008, "Wrong alignment on MangoInventoryManager_PurchaseOffer");
static_assert(sizeof(MangoInventoryManager_PurchaseOffer) == 0x000018, "Wrong size on MangoInventoryManager_PurchaseOffer");
static_assert(offsetof(MangoInventoryManager_PurchaseOffer, OfferId) == 0x000000, "Member 'MangoInventoryManager_PurchaseOffer::OfferId' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_PurchaseOffer, bPremium) == 0x000010, "Member 'MangoInventoryManager_PurchaseOffer::bPremium' has a wrong offset!");

// Function Mariner.MangoInventoryManager.SetItemViewed
// 0x0018 (0x0018 - 0x0000)
struct MangoInventoryManager_SetItemViewed final
{
public:
	EMangoItemType                                ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CmsId;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoInventoryManager_SetItemViewed) == 0x000008, "Wrong alignment on MangoInventoryManager_SetItemViewed");
static_assert(sizeof(MangoInventoryManager_SetItemViewed) == 0x000018, "Wrong size on MangoInventoryManager_SetItemViewed");
static_assert(offsetof(MangoInventoryManager_SetItemViewed, ItemType) == 0x000000, "Member 'MangoInventoryManager_SetItemViewed::ItemType' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_SetItemViewed, CmsId) == 0x000008, "Member 'MangoInventoryManager_SetItemViewed::CmsId' has a wrong offset!");

// Function Mariner.MangoInventoryManager.StartNativeOfferCompletionPoll
// 0x0010 (0x0010 - 0x0000)
struct MangoInventoryManager_StartNativeOfferCompletionPoll final
{
public:
	class FString                                 OrderId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoInventoryManager_StartNativeOfferCompletionPoll) == 0x000008, "Wrong alignment on MangoInventoryManager_StartNativeOfferCompletionPoll");
static_assert(sizeof(MangoInventoryManager_StartNativeOfferCompletionPoll) == 0x000010, "Wrong size on MangoInventoryManager_StartNativeOfferCompletionPoll");
static_assert(offsetof(MangoInventoryManager_StartNativeOfferCompletionPoll, OrderId) == 0x000000, "Member 'MangoInventoryManager_StartNativeOfferCompletionPoll::OrderId' has a wrong offset!");

// Function Mariner.MangoInventoryManager.GetCharactersInventory
// 0x0050 (0x0050 - 0x0000)
struct MangoInventoryManager_GetCharactersInventory final
{
public:
	TMap<class FString, struct FMangoItemInventory> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoInventoryManager_GetCharactersInventory) == 0x000008, "Wrong alignment on MangoInventoryManager_GetCharactersInventory");
static_assert(sizeof(MangoInventoryManager_GetCharactersInventory) == 0x000050, "Wrong size on MangoInventoryManager_GetCharactersInventory");
static_assert(offsetof(MangoInventoryManager_GetCharactersInventory, ReturnValue) == 0x000000, "Member 'MangoInventoryManager_GetCharactersInventory::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.GetInventorySkin
// 0x0030 (0x0030 - 0x0000)
struct MangoInventoryManager_GetInventorySkin final
{
public:
	class FString                                 CmsId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoItemInventory                    OutSkinInventory;                                  // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14EA[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoInventoryManager_GetInventorySkin) == 0x000008, "Wrong alignment on MangoInventoryManager_GetInventorySkin");
static_assert(sizeof(MangoInventoryManager_GetInventorySkin) == 0x000030, "Wrong size on MangoInventoryManager_GetInventorySkin");
static_assert(offsetof(MangoInventoryManager_GetInventorySkin, CmsId) == 0x000000, "Member 'MangoInventoryManager_GetInventorySkin::CmsId' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_GetInventorySkin, OutSkinInventory) == 0x000010, "Member 'MangoInventoryManager_GetInventorySkin::OutSkinInventory' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_GetInventorySkin, ReturnValue) == 0x000028, "Member 'MangoInventoryManager_GetInventorySkin::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.GetMegaBlastsInventory
// 0x0050 (0x0050 - 0x0000)
struct MangoInventoryManager_GetMegaBlastsInventory final
{
public:
	TMap<class FString, struct FMangoItemInventory> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoInventoryManager_GetMegaBlastsInventory) == 0x000008, "Wrong alignment on MangoInventoryManager_GetMegaBlastsInventory");
static_assert(sizeof(MangoInventoryManager_GetMegaBlastsInventory) == 0x000050, "Wrong size on MangoInventoryManager_GetMegaBlastsInventory");
static_assert(offsetof(MangoInventoryManager_GetMegaBlastsInventory, ReturnValue) == 0x000000, "Member 'MangoInventoryManager_GetMegaBlastsInventory::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.GetNumOfUnviewedCharacterItems
// 0x0004 (0x0004 - 0x0000)
struct MangoInventoryManager_GetNumOfUnviewedCharacterItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoInventoryManager_GetNumOfUnviewedCharacterItems) == 0x000004, "Wrong alignment on MangoInventoryManager_GetNumOfUnviewedCharacterItems");
static_assert(sizeof(MangoInventoryManager_GetNumOfUnviewedCharacterItems) == 0x000004, "Wrong size on MangoInventoryManager_GetNumOfUnviewedCharacterItems");
static_assert(offsetof(MangoInventoryManager_GetNumOfUnviewedCharacterItems, ReturnValue) == 0x000000, "Member 'MangoInventoryManager_GetNumOfUnviewedCharacterItems::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.GetNumOfUnviewedTotemItems
// 0x0004 (0x0004 - 0x0000)
struct MangoInventoryManager_GetNumOfUnviewedTotemItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoInventoryManager_GetNumOfUnviewedTotemItems) == 0x000004, "Wrong alignment on MangoInventoryManager_GetNumOfUnviewedTotemItems");
static_assert(sizeof(MangoInventoryManager_GetNumOfUnviewedTotemItems) == 0x000004, "Wrong size on MangoInventoryManager_GetNumOfUnviewedTotemItems");
static_assert(offsetof(MangoInventoryManager_GetNumOfUnviewedTotemItems, ReturnValue) == 0x000000, "Member 'MangoInventoryManager_GetNumOfUnviewedTotemItems::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.GetReturnTrailsInventory
// 0x0050 (0x0050 - 0x0000)
struct MangoInventoryManager_GetReturnTrailsInventory final
{
public:
	TMap<class FString, struct FMangoItemInventory> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoInventoryManager_GetReturnTrailsInventory) == 0x000008, "Wrong alignment on MangoInventoryManager_GetReturnTrailsInventory");
static_assert(sizeof(MangoInventoryManager_GetReturnTrailsInventory) == 0x000050, "Wrong size on MangoInventoryManager_GetReturnTrailsInventory");
static_assert(offsetof(MangoInventoryManager_GetReturnTrailsInventory, ReturnValue) == 0x000000, "Member 'MangoInventoryManager_GetReturnTrailsInventory::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.GetRocketBucks
// 0x0004 (0x0004 - 0x0000)
struct MangoInventoryManager_GetRocketBucks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoInventoryManager_GetRocketBucks) == 0x000004, "Wrong alignment on MangoInventoryManager_GetRocketBucks");
static_assert(sizeof(MangoInventoryManager_GetRocketBucks) == 0x000004, "Wrong size on MangoInventoryManager_GetRocketBucks");
static_assert(offsetof(MangoInventoryManager_GetRocketBucks, ReturnValue) == 0x000000, "Member 'MangoInventoryManager_GetRocketBucks::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.GetRocketParts
// 0x0004 (0x0004 - 0x0000)
struct MangoInventoryManager_GetRocketParts final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoInventoryManager_GetRocketParts) == 0x000004, "Wrong alignment on MangoInventoryManager_GetRocketParts");
static_assert(sizeof(MangoInventoryManager_GetRocketParts) == 0x000004, "Wrong size on MangoInventoryManager_GetRocketParts");
static_assert(offsetof(MangoInventoryManager_GetRocketParts, ReturnValue) == 0x000000, "Member 'MangoInventoryManager_GetRocketParts::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.GetUnviewedItemPopups
// 0x0050 (0x0050 - 0x0000)
struct MangoInventoryManager_GetUnviewedItemPopups final
{
public:
	struct FMangoOrderDetails                     ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoInventoryManager_GetUnviewedItemPopups) == 0x000008, "Wrong alignment on MangoInventoryManager_GetUnviewedItemPopups");
static_assert(sizeof(MangoInventoryManager_GetUnviewedItemPopups) == 0x000050, "Wrong size on MangoInventoryManager_GetUnviewedItemPopups");
static_assert(offsetof(MangoInventoryManager_GetUnviewedItemPopups, ReturnValue) == 0x000000, "Member 'MangoInventoryManager_GetUnviewedItemPopups::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.HasUnviewedCharacterEmotes
// 0x0010 (0x0010 - 0x0000)
struct MangoInventoryManager_HasUnviewedCharacterEmotes final
{
public:
	const class UMarinerPlayableCharacter*        PlayableCharacter;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14EB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoInventoryManager_HasUnviewedCharacterEmotes) == 0x000008, "Wrong alignment on MangoInventoryManager_HasUnviewedCharacterEmotes");
static_assert(sizeof(MangoInventoryManager_HasUnviewedCharacterEmotes) == 0x000010, "Wrong size on MangoInventoryManager_HasUnviewedCharacterEmotes");
static_assert(offsetof(MangoInventoryManager_HasUnviewedCharacterEmotes, PlayableCharacter) == 0x000000, "Member 'MangoInventoryManager_HasUnviewedCharacterEmotes::PlayableCharacter' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_HasUnviewedCharacterEmotes, ReturnValue) == 0x000008, "Member 'MangoInventoryManager_HasUnviewedCharacterEmotes::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.HasUnviewedCharacterEmotesOfType
// 0x0010 (0x0010 - 0x0000)
struct MangoInventoryManager_HasUnviewedCharacterEmotesOfType final
{
public:
	const class UMarinerPlayableCharacter*        PlayableCharacter;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14EC[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoInventoryManager_HasUnviewedCharacterEmotesOfType) == 0x000008, "Wrong alignment on MangoInventoryManager_HasUnviewedCharacterEmotesOfType");
static_assert(sizeof(MangoInventoryManager_HasUnviewedCharacterEmotesOfType) == 0x000010, "Wrong size on MangoInventoryManager_HasUnviewedCharacterEmotesOfType");
static_assert(offsetof(MangoInventoryManager_HasUnviewedCharacterEmotesOfType, PlayableCharacter) == 0x000000, "Member 'MangoInventoryManager_HasUnviewedCharacterEmotesOfType::PlayableCharacter' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_HasUnviewedCharacterEmotesOfType, ItemType) == 0x000008, "Member 'MangoInventoryManager_HasUnviewedCharacterEmotesOfType::ItemType' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_HasUnviewedCharacterEmotesOfType, ReturnValue) == 0x000009, "Member 'MangoInventoryManager_HasUnviewedCharacterEmotesOfType::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.HasUnviewedCharacterSkins
// 0x0010 (0x0010 - 0x0000)
struct MangoInventoryManager_HasUnviewedCharacterSkins final
{
public:
	const class UMarinerPlayableCharacter*        PlayableCharacter;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14ED[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoInventoryManager_HasUnviewedCharacterSkins) == 0x000008, "Wrong alignment on MangoInventoryManager_HasUnviewedCharacterSkins");
static_assert(sizeof(MangoInventoryManager_HasUnviewedCharacterSkins) == 0x000010, "Wrong size on MangoInventoryManager_HasUnviewedCharacterSkins");
static_assert(offsetof(MangoInventoryManager_HasUnviewedCharacterSkins, PlayableCharacter) == 0x000000, "Member 'MangoInventoryManager_HasUnviewedCharacterSkins::PlayableCharacter' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_HasUnviewedCharacterSkins, ReturnValue) == 0x000008, "Member 'MangoInventoryManager_HasUnviewedCharacterSkins::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.HasUnviewedItems
// 0x0002 (0x0002 - 0x0000)
struct MangoInventoryManager_HasUnviewedItems final
{
public:
	EMangoItemType                                ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoInventoryManager_HasUnviewedItems) == 0x000001, "Wrong alignment on MangoInventoryManager_HasUnviewedItems");
static_assert(sizeof(MangoInventoryManager_HasUnviewedItems) == 0x000002, "Wrong size on MangoInventoryManager_HasUnviewedItems");
static_assert(offsetof(MangoInventoryManager_HasUnviewedItems, ItemType) == 0x000000, "Member 'MangoInventoryManager_HasUnviewedItems::ItemType' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_HasUnviewedItems, ReturnValue) == 0x000001, "Member 'MangoInventoryManager_HasUnviewedItems::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.HasUnviewedSharedArtifacts
// 0x0001 (0x0001 - 0x0000)
struct MangoInventoryManager_HasUnviewedSharedArtifacts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoInventoryManager_HasUnviewedSharedArtifacts) == 0x000001, "Wrong alignment on MangoInventoryManager_HasUnviewedSharedArtifacts");
static_assert(sizeof(MangoInventoryManager_HasUnviewedSharedArtifacts) == 0x000001, "Wrong size on MangoInventoryManager_HasUnviewedSharedArtifacts");
static_assert(offsetof(MangoInventoryManager_HasUnviewedSharedArtifacts, ReturnValue) == 0x000000, "Member 'MangoInventoryManager_HasUnviewedSharedArtifacts::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.IsActiveBlastPassSeasonOwned
// 0x0001 (0x0001 - 0x0000)
struct MangoInventoryManager_IsActiveBlastPassSeasonOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoInventoryManager_IsActiveBlastPassSeasonOwned) == 0x000001, "Wrong alignment on MangoInventoryManager_IsActiveBlastPassSeasonOwned");
static_assert(sizeof(MangoInventoryManager_IsActiveBlastPassSeasonOwned) == 0x000001, "Wrong size on MangoInventoryManager_IsActiveBlastPassSeasonOwned");
static_assert(offsetof(MangoInventoryManager_IsActiveBlastPassSeasonOwned, ReturnValue) == 0x000000, "Member 'MangoInventoryManager_IsActiveBlastPassSeasonOwned::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.IsBlastPassOwned
// 0x0018 (0x0018 - 0x0000)
struct MangoInventoryManager_IsBlastPassOwned final
{
public:
	class FString                                 BlastPassId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14EE[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoInventoryManager_IsBlastPassOwned) == 0x000008, "Wrong alignment on MangoInventoryManager_IsBlastPassOwned");
static_assert(sizeof(MangoInventoryManager_IsBlastPassOwned) == 0x000018, "Wrong size on MangoInventoryManager_IsBlastPassOwned");
static_assert(offsetof(MangoInventoryManager_IsBlastPassOwned, BlastPassId) == 0x000000, "Member 'MangoInventoryManager_IsBlastPassOwned::BlastPassId' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_IsBlastPassOwned, ReturnValue) == 0x000010, "Member 'MangoInventoryManager_IsBlastPassOwned::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.IsCharacterOwned
// 0x0010 (0x0010 - 0x0000)
struct MangoInventoryManager_IsCharacterOwned final
{
public:
	const class UMarinerPlayableCharacter*        PlayableCharacter;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14EF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoInventoryManager_IsCharacterOwned) == 0x000008, "Wrong alignment on MangoInventoryManager_IsCharacterOwned");
static_assert(sizeof(MangoInventoryManager_IsCharacterOwned) == 0x000010, "Wrong size on MangoInventoryManager_IsCharacterOwned");
static_assert(offsetof(MangoInventoryManager_IsCharacterOwned, PlayableCharacter) == 0x000000, "Member 'MangoInventoryManager_IsCharacterOwned::PlayableCharacter' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_IsCharacterOwned, ReturnValue) == 0x000008, "Member 'MangoInventoryManager_IsCharacterOwned::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.IsItemOwned
// 0x0018 (0x0018 - 0x0000)
struct MangoInventoryManager_IsItemOwned final
{
public:
	class FString                                 CmsId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                OwnedItemType;                                     // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F0[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoInventoryManager_IsItemOwned) == 0x000008, "Wrong alignment on MangoInventoryManager_IsItemOwned");
static_assert(sizeof(MangoInventoryManager_IsItemOwned) == 0x000018, "Wrong size on MangoInventoryManager_IsItemOwned");
static_assert(offsetof(MangoInventoryManager_IsItemOwned, CmsId) == 0x000000, "Member 'MangoInventoryManager_IsItemOwned::CmsId' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_IsItemOwned, OwnedItemType) == 0x000010, "Member 'MangoInventoryManager_IsItemOwned::OwnedItemType' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_IsItemOwned, ReturnValue) == 0x000011, "Member 'MangoInventoryManager_IsItemOwned::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.IsItemViewed
// 0x0018 (0x0018 - 0x0000)
struct MangoInventoryManager_IsItemViewed final
{
public:
	class FString                                 CmsId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                ViewedItemType;                                    // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F1[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoInventoryManager_IsItemViewed) == 0x000008, "Wrong alignment on MangoInventoryManager_IsItemViewed");
static_assert(sizeof(MangoInventoryManager_IsItemViewed) == 0x000018, "Wrong size on MangoInventoryManager_IsItemViewed");
static_assert(offsetof(MangoInventoryManager_IsItemViewed, CmsId) == 0x000000, "Member 'MangoInventoryManager_IsItemViewed::CmsId' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_IsItemViewed, ViewedItemType) == 0x000010, "Member 'MangoInventoryManager_IsItemViewed::ViewedItemType' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_IsItemViewed, ReturnValue) == 0x000011, "Member 'MangoInventoryManager_IsItemViewed::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.IsNativeOfferOwned
// 0x0018 (0x0018 - 0x0000)
struct MangoInventoryManager_IsNativeOfferOwned final
{
public:
	class FString                                 NativeOfferId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F2[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoInventoryManager_IsNativeOfferOwned) == 0x000008, "Wrong alignment on MangoInventoryManager_IsNativeOfferOwned");
static_assert(sizeof(MangoInventoryManager_IsNativeOfferOwned) == 0x000018, "Wrong size on MangoInventoryManager_IsNativeOfferOwned");
static_assert(offsetof(MangoInventoryManager_IsNativeOfferOwned, NativeOfferId) == 0x000000, "Member 'MangoInventoryManager_IsNativeOfferOwned::NativeOfferId' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_IsNativeOfferOwned, ReturnValue) == 0x000010, "Member 'MangoInventoryManager_IsNativeOfferOwned::ReturnValue' has a wrong offset!");

// Function Mariner.MangoInventoryManager.IsOfferOwned
// 0x0018 (0x0018 - 0x0000)
struct MangoInventoryManager_IsOfferOwned final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F3[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoInventoryManager_IsOfferOwned) == 0x000008, "Wrong alignment on MangoInventoryManager_IsOfferOwned");
static_assert(sizeof(MangoInventoryManager_IsOfferOwned) == 0x000018, "Wrong size on MangoInventoryManager_IsOfferOwned");
static_assert(offsetof(MangoInventoryManager_IsOfferOwned, OfferId) == 0x000000, "Member 'MangoInventoryManager_IsOfferOwned::OfferId' has a wrong offset!");
static_assert(offsetof(MangoInventoryManager_IsOfferOwned, ReturnValue) == 0x000010, "Member 'MangoInventoryManager_IsOfferOwned::ReturnValue' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.Get
// 0x0010 (0x0010 - 0x0000)
struct MangoMatchmakingManager_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMangoMatchmakingManager*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_Get) == 0x000008, "Wrong alignment on MangoMatchmakingManager_Get");
static_assert(sizeof(MangoMatchmakingManager_Get) == 0x000010, "Wrong size on MangoMatchmakingManager_Get");
static_assert(offsetof(MangoMatchmakingManager_Get, WorldContextObject) == 0x000000, "Member 'MangoMatchmakingManager_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MangoMatchmakingManager_Get, ReturnValue) == 0x000008, "Member 'MangoMatchmakingManager_Get::ReturnValue' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.StartMatchmaking
// 0x0010 (0x0010 - 0x0000)
struct MangoMatchmakingManager_StartMatchmaking final
{
public:
	struct FGuid                                  PlaylistGuid;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_StartMatchmaking) == 0x000004, "Wrong alignment on MangoMatchmakingManager_StartMatchmaking");
static_assert(sizeof(MangoMatchmakingManager_StartMatchmaking) == 0x000010, "Wrong size on MangoMatchmakingManager_StartMatchmaking");
static_assert(offsetof(MangoMatchmakingManager_StartMatchmaking, PlaylistGuid) == 0x000000, "Member 'MangoMatchmakingManager_StartMatchmaking::PlaylistGuid' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.CanCancel
// 0x0001 (0x0001 - 0x0000)
struct MangoMatchmakingManager_CanCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_CanCancel) == 0x000001, "Wrong alignment on MangoMatchmakingManager_CanCancel");
static_assert(sizeof(MangoMatchmakingManager_CanCancel) == 0x000001, "Wrong size on MangoMatchmakingManager_CanCancel");
static_assert(offsetof(MangoMatchmakingManager_CanCancel, ReturnValue) == 0x000000, "Member 'MangoMatchmakingManager_CanCancel::ReturnValue' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.GetAbandonmentPenaltyExpirationTime
// 0x0008 (0x0008 - 0x0000)
struct MangoMatchmakingManager_GetAbandonmentPenaltyExpirationTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_GetAbandonmentPenaltyExpirationTime) == 0x000008, "Wrong alignment on MangoMatchmakingManager_GetAbandonmentPenaltyExpirationTime");
static_assert(sizeof(MangoMatchmakingManager_GetAbandonmentPenaltyExpirationTime) == 0x000008, "Wrong size on MangoMatchmakingManager_GetAbandonmentPenaltyExpirationTime");
static_assert(offsetof(MangoMatchmakingManager_GetAbandonmentPenaltyExpirationTime, ReturnValue) == 0x000000, "Member 'MangoMatchmakingManager_GetAbandonmentPenaltyExpirationTime::ReturnValue' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.GetAbandonmentPenaltyWarningLevel
// 0x0004 (0x0004 - 0x0000)
struct MangoMatchmakingManager_GetAbandonmentPenaltyWarningLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_GetAbandonmentPenaltyWarningLevel) == 0x000004, "Wrong alignment on MangoMatchmakingManager_GetAbandonmentPenaltyWarningLevel");
static_assert(sizeof(MangoMatchmakingManager_GetAbandonmentPenaltyWarningLevel) == 0x000004, "Wrong size on MangoMatchmakingManager_GetAbandonmentPenaltyWarningLevel");
static_assert(offsetof(MangoMatchmakingManager_GetAbandonmentPenaltyWarningLevel, ReturnValue) == 0x000000, "Member 'MangoMatchmakingManager_GetAbandonmentPenaltyWarningLevel::ReturnValue' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.GetActiveMatchmakingGuid
// 0x0010 (0x0010 - 0x0000)
struct MangoMatchmakingManager_GetActiveMatchmakingGuid final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_GetActiveMatchmakingGuid) == 0x000004, "Wrong alignment on MangoMatchmakingManager_GetActiveMatchmakingGuid");
static_assert(sizeof(MangoMatchmakingManager_GetActiveMatchmakingGuid) == 0x000010, "Wrong size on MangoMatchmakingManager_GetActiveMatchmakingGuid");
static_assert(offsetof(MangoMatchmakingManager_GetActiveMatchmakingGuid, ReturnValue) == 0x000000, "Member 'MangoMatchmakingManager_GetActiveMatchmakingGuid::ReturnValue' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.GetActiveMatchmakingRegion
// 0x0010 (0x0010 - 0x0000)
struct MangoMatchmakingManager_GetActiveMatchmakingRegion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_GetActiveMatchmakingRegion) == 0x000008, "Wrong alignment on MangoMatchmakingManager_GetActiveMatchmakingRegion");
static_assert(sizeof(MangoMatchmakingManager_GetActiveMatchmakingRegion) == 0x000010, "Wrong size on MangoMatchmakingManager_GetActiveMatchmakingRegion");
static_assert(offsetof(MangoMatchmakingManager_GetActiveMatchmakingRegion, ReturnValue) == 0x000000, "Member 'MangoMatchmakingManager_GetActiveMatchmakingRegion::ReturnValue' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.GetCrossplayState
// 0x0001 (0x0001 - 0x0000)
struct MangoMatchmakingManager_GetCrossplayState final
{
public:
	EMarinerCrossplayState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_GetCrossplayState) == 0x000001, "Wrong alignment on MangoMatchmakingManager_GetCrossplayState");
static_assert(sizeof(MangoMatchmakingManager_GetCrossplayState) == 0x000001, "Wrong size on MangoMatchmakingManager_GetCrossplayState");
static_assert(offsetof(MangoMatchmakingManager_GetCrossplayState, ReturnValue) == 0x000000, "Member 'MangoMatchmakingManager_GetCrossplayState::ReturnValue' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.GetFilterCurrentVetoes
// 0x0014 (0x0014 - 0x0000)
struct MangoMatchmakingManager_GetFilterCurrentVetoes final
{
public:
	struct FGuid                                  PlaylistGuid;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_GetFilterCurrentVetoes) == 0x000004, "Wrong alignment on MangoMatchmakingManager_GetFilterCurrentVetoes");
static_assert(sizeof(MangoMatchmakingManager_GetFilterCurrentVetoes) == 0x000014, "Wrong size on MangoMatchmakingManager_GetFilterCurrentVetoes");
static_assert(offsetof(MangoMatchmakingManager_GetFilterCurrentVetoes, PlaylistGuid) == 0x000000, "Member 'MangoMatchmakingManager_GetFilterCurrentVetoes::PlaylistGuid' has a wrong offset!");
static_assert(offsetof(MangoMatchmakingManager_GetFilterCurrentVetoes, ReturnValue) == 0x000010, "Member 'MangoMatchmakingManager_GetFilterCurrentVetoes::ReturnValue' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.GetFilterMaxVetoes
// 0x0014 (0x0014 - 0x0000)
struct MangoMatchmakingManager_GetFilterMaxVetoes final
{
public:
	struct FGuid                                  PlaylistGuid;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_GetFilterMaxVetoes) == 0x000004, "Wrong alignment on MangoMatchmakingManager_GetFilterMaxVetoes");
static_assert(sizeof(MangoMatchmakingManager_GetFilterMaxVetoes) == 0x000014, "Wrong size on MangoMatchmakingManager_GetFilterMaxVetoes");
static_assert(offsetof(MangoMatchmakingManager_GetFilterMaxVetoes, PlaylistGuid) == 0x000000, "Member 'MangoMatchmakingManager_GetFilterMaxVetoes::PlaylistGuid' has a wrong offset!");
static_assert(offsetof(MangoMatchmakingManager_GetFilterMaxVetoes, ReturnValue) == 0x000010, "Member 'MangoMatchmakingManager_GetFilterMaxVetoes::ReturnValue' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.GetIntermissionTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct MangoMatchmakingManager_GetIntermissionTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_GetIntermissionTimeRemaining) == 0x000004, "Wrong alignment on MangoMatchmakingManager_GetIntermissionTimeRemaining");
static_assert(sizeof(MangoMatchmakingManager_GetIntermissionTimeRemaining) == 0x000004, "Wrong size on MangoMatchmakingManager_GetIntermissionTimeRemaining");
static_assert(offsetof(MangoMatchmakingManager_GetIntermissionTimeRemaining, ReturnValue) == 0x000000, "Member 'MangoMatchmakingManager_GetIntermissionTimeRemaining::ReturnValue' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.GetPlaylistMaxPartySize
// 0x0014 (0x0014 - 0x0000)
struct MangoMatchmakingManager_GetPlaylistMaxPartySize final
{
public:
	struct FGuid                                  PlaylistGuid;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_GetPlaylistMaxPartySize) == 0x000004, "Wrong alignment on MangoMatchmakingManager_GetPlaylistMaxPartySize");
static_assert(sizeof(MangoMatchmakingManager_GetPlaylistMaxPartySize) == 0x000014, "Wrong size on MangoMatchmakingManager_GetPlaylistMaxPartySize");
static_assert(offsetof(MangoMatchmakingManager_GetPlaylistMaxPartySize, PlaylistGuid) == 0x000000, "Member 'MangoMatchmakingManager_GetPlaylistMaxPartySize::PlaylistGuid' has a wrong offset!");
static_assert(offsetof(MangoMatchmakingManager_GetPlaylistMaxPartySize, ReturnValue) == 0x000010, "Member 'MangoMatchmakingManager_GetPlaylistMaxPartySize::ReturnValue' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.IsAbandonmentPenaltyActive
// 0x0001 (0x0001 - 0x0000)
struct MangoMatchmakingManager_IsAbandonmentPenaltyActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_IsAbandonmentPenaltyActive) == 0x000001, "Wrong alignment on MangoMatchmakingManager_IsAbandonmentPenaltyActive");
static_assert(sizeof(MangoMatchmakingManager_IsAbandonmentPenaltyActive) == 0x000001, "Wrong size on MangoMatchmakingManager_IsAbandonmentPenaltyActive");
static_assert(offsetof(MangoMatchmakingManager_IsAbandonmentPenaltyActive, ReturnValue) == 0x000000, "Member 'MangoMatchmakingManager_IsAbandonmentPenaltyActive::ReturnValue' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.IsIntermissionActive
// 0x0001 (0x0001 - 0x0000)
struct MangoMatchmakingManager_IsIntermissionActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_IsIntermissionActive) == 0x000001, "Wrong alignment on MangoMatchmakingManager_IsIntermissionActive");
static_assert(sizeof(MangoMatchmakingManager_IsIntermissionActive) == 0x000001, "Wrong size on MangoMatchmakingManager_IsIntermissionActive");
static_assert(offsetof(MangoMatchmakingManager_IsIntermissionActive, ReturnValue) == 0x000000, "Member 'MangoMatchmakingManager_IsIntermissionActive::ReturnValue' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.IsLastEndedReasonFoundMatch
// 0x0001 (0x0001 - 0x0000)
struct MangoMatchmakingManager_IsLastEndedReasonFoundMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_IsLastEndedReasonFoundMatch) == 0x000001, "Wrong alignment on MangoMatchmakingManager_IsLastEndedReasonFoundMatch");
static_assert(sizeof(MangoMatchmakingManager_IsLastEndedReasonFoundMatch) == 0x000001, "Wrong size on MangoMatchmakingManager_IsLastEndedReasonFoundMatch");
static_assert(offsetof(MangoMatchmakingManager_IsLastEndedReasonFoundMatch, ReturnValue) == 0x000000, "Member 'MangoMatchmakingManager_IsLastEndedReasonFoundMatch::ReturnValue' has a wrong offset!");

// Function Mariner.MangoMatchmakingManager.IsSearching
// 0x0001 (0x0001 - 0x0000)
struct MangoMatchmakingManager_IsSearching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoMatchmakingManager_IsSearching) == 0x000001, "Wrong alignment on MangoMatchmakingManager_IsSearching");
static_assert(sizeof(MangoMatchmakingManager_IsSearching) == 0x000001, "Wrong size on MangoMatchmakingManager_IsSearching");
static_assert(offsetof(MangoMatchmakingManager_IsSearching, ReturnValue) == 0x000000, "Member 'MangoMatchmakingManager_IsSearching::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPartyInvitationDialog.OnAcceptInviteButton
// 0x0018 (0x0018 - 0x0000)
struct MangoPartyInvitationDialog_OnAcceptInviteButton final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPartyInvitationDialog_OnAcceptInviteButton) == 0x000008, "Wrong alignment on MangoPartyInvitationDialog_OnAcceptInviteButton");
static_assert(sizeof(MangoPartyInvitationDialog_OnAcceptInviteButton) == 0x000018, "Wrong size on MangoPartyInvitationDialog_OnAcceptInviteButton");
static_assert(offsetof(MangoPartyInvitationDialog_OnAcceptInviteButton, KeyPressed) == 0x000000, "Member 'MangoPartyInvitationDialog_OnAcceptInviteButton::KeyPressed' has a wrong offset!");

// Function Mariner.MangoPartyInvitationDialog.OnRejectInviteButton
// 0x0018 (0x0018 - 0x0000)
struct MangoPartyInvitationDialog_OnRejectInviteButton final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPartyInvitationDialog_OnRejectInviteButton) == 0x000008, "Wrong alignment on MangoPartyInvitationDialog_OnRejectInviteButton");
static_assert(sizeof(MangoPartyInvitationDialog_OnRejectInviteButton) == 0x000018, "Wrong size on MangoPartyInvitationDialog_OnRejectInviteButton");
static_assert(offsetof(MangoPartyInvitationDialog_OnRejectInviteButton, KeyPressed) == 0x000000, "Member 'MangoPartyInvitationDialog_OnRejectInviteButton::KeyPressed' has a wrong offset!");

// Function Mariner.MangoPartyManager.Get
// 0x0010 (0x0010 - 0x0000)
struct MangoPartyManager_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMangoPartyManager*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPartyManager_Get) == 0x000008, "Wrong alignment on MangoPartyManager_Get");
static_assert(sizeof(MangoPartyManager_Get) == 0x000010, "Wrong size on MangoPartyManager_Get");
static_assert(offsetof(MangoPartyManager_Get, WorldContextObject) == 0x000000, "Member 'MangoPartyManager_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MangoPartyManager_Get, ReturnValue) == 0x000008, "Member 'MangoPartyManager_Get::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPartyManager.LeaveParty
// 0x0001 (0x0001 - 0x0000)
struct MangoPartyManager_LeaveParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPartyManager_LeaveParty) == 0x000001, "Wrong alignment on MangoPartyManager_LeaveParty");
static_assert(sizeof(MangoPartyManager_LeaveParty) == 0x000001, "Wrong size on MangoPartyManager_LeaveParty");
static_assert(offsetof(MangoPartyManager_LeaveParty, ReturnValue) == 0x000000, "Member 'MangoPartyManager_LeaveParty::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPartyManager.OnCancelJoinParty
// 0x0018 (0x0018 - 0x0000)
struct MangoPartyManager_OnCancelJoinParty final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPartyManager_OnCancelJoinParty) == 0x000008, "Wrong alignment on MangoPartyManager_OnCancelJoinParty");
static_assert(sizeof(MangoPartyManager_OnCancelJoinParty) == 0x000018, "Wrong size on MangoPartyManager_OnCancelJoinParty");
static_assert(offsetof(MangoPartyManager_OnCancelJoinParty, KeyPressed) == 0x000000, "Member 'MangoPartyManager_OnCancelJoinParty::KeyPressed' has a wrong offset!");

// Function Mariner.MangoPartyManager.OnConfirmJoinParty
// 0x0018 (0x0018 - 0x0000)
struct MangoPartyManager_OnConfirmJoinParty final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPartyManager_OnConfirmJoinParty) == 0x000008, "Wrong alignment on MangoPartyManager_OnConfirmJoinParty");
static_assert(sizeof(MangoPartyManager_OnConfirmJoinParty) == 0x000018, "Wrong size on MangoPartyManager_OnConfirmJoinParty");
static_assert(offsetof(MangoPartyManager_OnConfirmJoinParty, KeyPressed) == 0x000000, "Member 'MangoPartyManager_OnConfirmJoinParty::KeyPressed' has a wrong offset!");

// Function Mariner.MangoPartyManager.AreWePartyLeader
// 0x0001 (0x0001 - 0x0000)
struct MangoPartyManager_AreWePartyLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPartyManager_AreWePartyLeader) == 0x000001, "Wrong alignment on MangoPartyManager_AreWePartyLeader");
static_assert(sizeof(MangoPartyManager_AreWePartyLeader) == 0x000001, "Wrong size on MangoPartyManager_AreWePartyLeader");
static_assert(offsetof(MangoPartyManager_AreWePartyLeader, ReturnValue) == 0x000000, "Member 'MangoPartyManager_AreWePartyLeader::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPartyManager.GetBusyState
// 0x0001 (0x0001 - 0x0000)
struct MangoPartyManager_GetBusyState final
{
public:
	EMangoPartyBusyState                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPartyManager_GetBusyState) == 0x000001, "Wrong alignment on MangoPartyManager_GetBusyState");
static_assert(sizeof(MangoPartyManager_GetBusyState) == 0x000001, "Wrong size on MangoPartyManager_GetBusyState");
static_assert(offsetof(MangoPartyManager_GetBusyState, ReturnValue) == 0x000000, "Member 'MangoPartyManager_GetBusyState::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPartyManager.GetPartySize
// 0x0004 (0x0004 - 0x0000)
struct MangoPartyManager_GetPartySize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPartyManager_GetPartySize) == 0x000004, "Wrong alignment on MangoPartyManager_GetPartySize");
static_assert(sizeof(MangoPartyManager_GetPartySize) == 0x000004, "Wrong size on MangoPartyManager_GetPartySize");
static_assert(offsetof(MangoPartyManager_GetPartySize, ReturnValue) == 0x000000, "Member 'MangoPartyManager_GetPartySize::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPartyManager.IsInParty
// 0x0001 (0x0001 - 0x0000)
struct MangoPartyManager_IsInParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPartyManager_IsInParty) == 0x000001, "Wrong alignment on MangoPartyManager_IsInParty");
static_assert(sizeof(MangoPartyManager_IsInParty) == 0x000001, "Wrong size on MangoPartyManager_IsInParty");
static_assert(offsetof(MangoPartyManager_IsInParty, ReturnValue) == 0x000000, "Member 'MangoPartyManager_IsInParty::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPartyManager.IsOurPartyCrossPlatfrom
// 0x0001 (0x0001 - 0x0000)
struct MangoPartyManager_IsOurPartyCrossPlatfrom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPartyManager_IsOurPartyCrossPlatfrom) == 0x000001, "Wrong alignment on MangoPartyManager_IsOurPartyCrossPlatfrom");
static_assert(sizeof(MangoPartyManager_IsOurPartyCrossPlatfrom) == 0x000001, "Wrong size on MangoPartyManager_IsOurPartyCrossPlatfrom");
static_assert(offsetof(MangoPartyManager_IsOurPartyCrossPlatfrom, ReturnValue) == 0x000000, "Member 'MangoPartyManager_IsOurPartyCrossPlatfrom::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerWrapBoxSlot.SetFillEmptySpace
// 0x0001 (0x0001 - 0x0000)
struct MarinerWrapBoxSlot_SetFillEmptySpace final
{
public:
	bool                                          InbFillEmptySpace;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWrapBoxSlot_SetFillEmptySpace) == 0x000001, "Wrong alignment on MarinerWrapBoxSlot_SetFillEmptySpace");
static_assert(sizeof(MarinerWrapBoxSlot_SetFillEmptySpace) == 0x000001, "Wrong size on MarinerWrapBoxSlot_SetFillEmptySpace");
static_assert(offsetof(MarinerWrapBoxSlot_SetFillEmptySpace, InbFillEmptySpace) == 0x000000, "Member 'MarinerWrapBoxSlot_SetFillEmptySpace::InbFillEmptySpace' has a wrong offset!");

// Function Mariner.MarinerWrapBoxSlot.SetFillSpanWhenLessThan
// 0x0004 (0x0004 - 0x0000)
struct MarinerWrapBoxSlot_SetFillSpanWhenLessThan final
{
public:
	float                                         InFillSpanWhenLessThan;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWrapBoxSlot_SetFillSpanWhenLessThan) == 0x000004, "Wrong alignment on MarinerWrapBoxSlot_SetFillSpanWhenLessThan");
static_assert(sizeof(MarinerWrapBoxSlot_SetFillSpanWhenLessThan) == 0x000004, "Wrong size on MarinerWrapBoxSlot_SetFillSpanWhenLessThan");
static_assert(offsetof(MarinerWrapBoxSlot_SetFillSpanWhenLessThan, InFillSpanWhenLessThan) == 0x000000, "Member 'MarinerWrapBoxSlot_SetFillSpanWhenLessThan::InFillSpanWhenLessThan' has a wrong offset!");

// Function Mariner.MarinerWrapBoxSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct MarinerWrapBoxSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWrapBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on MarinerWrapBoxSlot_SetHorizontalAlignment");
static_assert(sizeof(MarinerWrapBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on MarinerWrapBoxSlot_SetHorizontalAlignment");
static_assert(offsetof(MarinerWrapBoxSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'MarinerWrapBoxSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function Mariner.MarinerWrapBoxSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct MarinerWrapBoxSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWrapBoxSlot_SetPadding) == 0x000004, "Wrong alignment on MarinerWrapBoxSlot_SetPadding");
static_assert(sizeof(MarinerWrapBoxSlot_SetPadding) == 0x000010, "Wrong size on MarinerWrapBoxSlot_SetPadding");
static_assert(offsetof(MarinerWrapBoxSlot_SetPadding, InPadding) == 0x000000, "Member 'MarinerWrapBoxSlot_SetPadding::InPadding' has a wrong offset!");

// Function Mariner.MarinerWrapBoxSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct MarinerWrapBoxSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWrapBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on MarinerWrapBoxSlot_SetVerticalAlignment");
static_assert(sizeof(MarinerWrapBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong size on MarinerWrapBoxSlot_SetVerticalAlignment");
static_assert(offsetof(MarinerWrapBoxSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'MarinerWrapBoxSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function Mariner.MangoPrivateMatchManager.Get
// 0x0010 (0x0010 - 0x0000)
struct MangoPrivateMatchManager_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMangoPrivateMatchManager*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPrivateMatchManager_Get) == 0x000008, "Wrong alignment on MangoPrivateMatchManager_Get");
static_assert(sizeof(MangoPrivateMatchManager_Get) == 0x000010, "Wrong size on MangoPrivateMatchManager_Get");
static_assert(offsetof(MangoPrivateMatchManager_Get, WorldContextObject) == 0x000000, "Member 'MangoPrivateMatchManager_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MangoPrivateMatchManager_Get, ReturnValue) == 0x000008, "Member 'MangoPrivateMatchManager_Get::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPrivateMatchManager.OnPartyBusyStateChanged
// 0x0001 (0x0001 - 0x0000)
struct MangoPrivateMatchManager_OnPartyBusyStateChanged final
{
public:
	EMangoPartyBusyState                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPrivateMatchManager_OnPartyBusyStateChanged) == 0x000001, "Wrong alignment on MangoPrivateMatchManager_OnPartyBusyStateChanged");
static_assert(sizeof(MangoPrivateMatchManager_OnPartyBusyStateChanged) == 0x000001, "Wrong size on MangoPrivateMatchManager_OnPartyBusyStateChanged");
static_assert(offsetof(MangoPrivateMatchManager_OnPartyBusyStateChanged, State) == 0x000000, "Member 'MangoPrivateMatchManager_OnPartyBusyStateChanged::State' has a wrong offset!");

// Function Mariner.MangoPrivateMatchManager.SetPrivateMatchLobbyMap
// 0x0010 (0x0010 - 0x0000)
struct MangoPrivateMatchManager_SetPrivateMatchLobbyMap final
{
public:
	struct FGuid                                  MapId;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPrivateMatchManager_SetPrivateMatchLobbyMap) == 0x000004, "Wrong alignment on MangoPrivateMatchManager_SetPrivateMatchLobbyMap");
static_assert(sizeof(MangoPrivateMatchManager_SetPrivateMatchLobbyMap) == 0x000010, "Wrong size on MangoPrivateMatchManager_SetPrivateMatchLobbyMap");
static_assert(offsetof(MangoPrivateMatchManager_SetPrivateMatchLobbyMap, MapId) == 0x000000, "Member 'MangoPrivateMatchManager_SetPrivateMatchLobbyMap::MapId' has a wrong offset!");

// Function Mariner.MangoPrivateMatchManager.SetPrivateMatchLobbyMode
// 0x0010 (0x0010 - 0x0000)
struct MangoPrivateMatchManager_SetPrivateMatchLobbyMode final
{
public:
	struct FGuid                                  ModeID;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPrivateMatchManager_SetPrivateMatchLobbyMode) == 0x000004, "Wrong alignment on MangoPrivateMatchManager_SetPrivateMatchLobbyMode");
static_assert(sizeof(MangoPrivateMatchManager_SetPrivateMatchLobbyMode) == 0x000010, "Wrong size on MangoPrivateMatchManager_SetPrivateMatchLobbyMode");
static_assert(offsetof(MangoPrivateMatchManager_SetPrivateMatchLobbyMode, ModeID) == 0x000000, "Member 'MangoPrivateMatchManager_SetPrivateMatchLobbyMode::ModeID' has a wrong offset!");

// Function Mariner.MangoPrivateMatchManager.GetPrivateMatchLobbyMap
// 0x0010 (0x0010 - 0x0000)
struct MangoPrivateMatchManager_GetPrivateMatchLobbyMap final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPrivateMatchManager_GetPrivateMatchLobbyMap) == 0x000004, "Wrong alignment on MangoPrivateMatchManager_GetPrivateMatchLobbyMap");
static_assert(sizeof(MangoPrivateMatchManager_GetPrivateMatchLobbyMap) == 0x000010, "Wrong size on MangoPrivateMatchManager_GetPrivateMatchLobbyMap");
static_assert(offsetof(MangoPrivateMatchManager_GetPrivateMatchLobbyMap, ReturnValue) == 0x000000, "Member 'MangoPrivateMatchManager_GetPrivateMatchLobbyMap::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPrivateMatchManager.GetPrivateMatchLobbyMode
// 0x0010 (0x0010 - 0x0000)
struct MangoPrivateMatchManager_GetPrivateMatchLobbyMode final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPrivateMatchManager_GetPrivateMatchLobbyMode) == 0x000004, "Wrong alignment on MangoPrivateMatchManager_GetPrivateMatchLobbyMode");
static_assert(sizeof(MangoPrivateMatchManager_GetPrivateMatchLobbyMode) == 0x000010, "Wrong size on MangoPrivateMatchManager_GetPrivateMatchLobbyMode");
static_assert(offsetof(MangoPrivateMatchManager_GetPrivateMatchLobbyMode, ReturnValue) == 0x000000, "Member 'MangoPrivateMatchManager_GetPrivateMatchLobbyMode::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPrivateMatchManager.IsAllocationInProgress
// 0x0001 (0x0001 - 0x0000)
struct MangoPrivateMatchManager_IsAllocationInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPrivateMatchManager_IsAllocationInProgress) == 0x000001, "Wrong alignment on MangoPrivateMatchManager_IsAllocationInProgress");
static_assert(sizeof(MangoPrivateMatchManager_IsAllocationInProgress) == 0x000001, "Wrong size on MangoPrivateMatchManager_IsAllocationInProgress");
static_assert(offsetof(MangoPrivateMatchManager_IsAllocationInProgress, ReturnValue) == 0x000000, "Member 'MangoPrivateMatchManager_IsAllocationInProgress::ReturnValue' has a wrong offset!");

// Function Mariner.MangoPrivateMatchManager.IsPrivateMatchSession
// 0x0001 (0x0001 - 0x0000)
struct MangoPrivateMatchManager_IsPrivateMatchSession final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoPrivateMatchManager_IsPrivateMatchSession) == 0x000001, "Wrong alignment on MangoPrivateMatchManager_IsPrivateMatchSession");
static_assert(sizeof(MangoPrivateMatchManager_IsPrivateMatchSession) == 0x000001, "Wrong size on MangoPrivateMatchManager_IsPrivateMatchSession");
static_assert(offsetof(MangoPrivateMatchManager_IsPrivateMatchSession, ReturnValue) == 0x000000, "Member 'MangoPrivateMatchManager_IsPrivateMatchSession::ReturnValue' has a wrong offset!");

// Function Mariner.MangoQOSManager.Get
// 0x0010 (0x0010 - 0x0000)
struct MangoQOSManager_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMangoQOSManager*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoQOSManager_Get) == 0x000008, "Wrong alignment on MangoQOSManager_Get");
static_assert(sizeof(MangoQOSManager_Get) == 0x000010, "Wrong size on MangoQOSManager_Get");
static_assert(offsetof(MangoQOSManager_Get, WorldContextObject) == 0x000000, "Member 'MangoQOSManager_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MangoQOSManager_Get, ReturnValue) == 0x000008, "Member 'MangoQOSManager_Get::ReturnValue' has a wrong offset!");

// Function Mariner.MangoQOSManager.GetRecommendedMatchmakingRegion
// 0x0010 (0x0010 - 0x0000)
struct MangoQOSManager_GetRecommendedMatchmakingRegion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoQOSManager_GetRecommendedMatchmakingRegion) == 0x000008, "Wrong alignment on MangoQOSManager_GetRecommendedMatchmakingRegion");
static_assert(sizeof(MangoQOSManager_GetRecommendedMatchmakingRegion) == 0x000010, "Wrong size on MangoQOSManager_GetRecommendedMatchmakingRegion");
static_assert(offsetof(MangoQOSManager_GetRecommendedMatchmakingRegion, ReturnValue) == 0x000000, "Member 'MangoQOSManager_GetRecommendedMatchmakingRegion::ReturnValue' has a wrong offset!");

// Function Mariner.MangoStoreManager.Get
// 0x0010 (0x0010 - 0x0000)
struct MangoStoreManager_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMangoStoreManager*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoStoreManager_Get) == 0x000008, "Wrong alignment on MangoStoreManager_Get");
static_assert(sizeof(MangoStoreManager_Get) == 0x000010, "Wrong size on MangoStoreManager_Get");
static_assert(offsetof(MangoStoreManager_Get, WorldContextObject) == 0x000000, "Member 'MangoStoreManager_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MangoStoreManager_Get, ReturnValue) == 0x000008, "Member 'MangoStoreManager_Get::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerHUDWidget.AddAllowedState
// 0x0008 (0x0008 - 0x0000)
struct MarinerHUDWidget_AddAllowedState final
{
public:
	TSubclassOf<class UMarinerHUDState>           State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUDWidget_AddAllowedState) == 0x000008, "Wrong alignment on MarinerHUDWidget_AddAllowedState");
static_assert(sizeof(MarinerHUDWidget_AddAllowedState) == 0x000008, "Wrong size on MarinerHUDWidget_AddAllowedState");
static_assert(offsetof(MarinerHUDWidget_AddAllowedState, State) == 0x000000, "Member 'MarinerHUDWidget_AddAllowedState::State' has a wrong offset!");

// Function Mariner.MarinerHUDWidget.AddExcludedState
// 0x0008 (0x0008 - 0x0000)
struct MarinerHUDWidget_AddExcludedState final
{
public:
	TSubclassOf<class UMarinerHUDState>           State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUDWidget_AddExcludedState) == 0x000008, "Wrong alignment on MarinerHUDWidget_AddExcludedState");
static_assert(sizeof(MarinerHUDWidget_AddExcludedState) == 0x000008, "Wrong size on MarinerHUDWidget_AddExcludedState");
static_assert(offsetof(MarinerHUDWidget_AddExcludedState, State) == 0x000000, "Member 'MarinerHUDWidget_AddExcludedState::State' has a wrong offset!");

// Function Mariner.MarinerHUDWidget.BPOnCharacterPossessed
// 0x0008 (0x0008 - 0x0000)
struct MarinerHUDWidget_BPOnCharacterPossessed final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUDWidget_BPOnCharacterPossessed) == 0x000008, "Wrong alignment on MarinerHUDWidget_BPOnCharacterPossessed");
static_assert(sizeof(MarinerHUDWidget_BPOnCharacterPossessed) == 0x000008, "Wrong size on MarinerHUDWidget_BPOnCharacterPossessed");
static_assert(offsetof(MarinerHUDWidget_BPOnCharacterPossessed, Character) == 0x000000, "Member 'MarinerHUDWidget_BPOnCharacterPossessed::Character' has a wrong offset!");

// Function Mariner.MarinerHUDWidget.BPOnCharacterUnpossessed
// 0x0008 (0x0008 - 0x0000)
struct MarinerHUDWidget_BPOnCharacterUnpossessed final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUDWidget_BPOnCharacterUnpossessed) == 0x000008, "Wrong alignment on MarinerHUDWidget_BPOnCharacterUnpossessed");
static_assert(sizeof(MarinerHUDWidget_BPOnCharacterUnpossessed) == 0x000008, "Wrong size on MarinerHUDWidget_BPOnCharacterUnpossessed");
static_assert(offsetof(MarinerHUDWidget_BPOnCharacterUnpossessed, Character) == 0x000000, "Member 'MarinerHUDWidget_BPOnCharacterUnpossessed::Character' has a wrong offset!");

// Function Mariner.MarinerHUDWidget.OnPossessPawn
// 0x0010 (0x0010 - 0x0000)
struct MarinerHUDWidget_OnPossessPawn final
{
public:
	class AMarinerPlayerController*               PossessingController;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  PossessedPawn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUDWidget_OnPossessPawn) == 0x000008, "Wrong alignment on MarinerHUDWidget_OnPossessPawn");
static_assert(sizeof(MarinerHUDWidget_OnPossessPawn) == 0x000010, "Wrong size on MarinerHUDWidget_OnPossessPawn");
static_assert(offsetof(MarinerHUDWidget_OnPossessPawn, PossessingController) == 0x000000, "Member 'MarinerHUDWidget_OnPossessPawn::PossessingController' has a wrong offset!");
static_assert(offsetof(MarinerHUDWidget_OnPossessPawn, PossessedPawn) == 0x000008, "Member 'MarinerHUDWidget_OnPossessPawn::PossessedPawn' has a wrong offset!");

// Function Mariner.MarinerHUDWidget.OnUnpossessPawn
// 0x0010 (0x0010 - 0x0000)
struct MarinerHUDWidget_OnUnpossessPawn final
{
public:
	class AMarinerPlayerController*               UnpossessingController;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  UnpossessedPawn;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUDWidget_OnUnpossessPawn) == 0x000008, "Wrong alignment on MarinerHUDWidget_OnUnpossessPawn");
static_assert(sizeof(MarinerHUDWidget_OnUnpossessPawn) == 0x000010, "Wrong size on MarinerHUDWidget_OnUnpossessPawn");
static_assert(offsetof(MarinerHUDWidget_OnUnpossessPawn, UnpossessingController) == 0x000000, "Member 'MarinerHUDWidget_OnUnpossessPawn::UnpossessingController' has a wrong offset!");
static_assert(offsetof(MarinerHUDWidget_OnUnpossessPawn, UnpossessedPawn) == 0x000008, "Member 'MarinerHUDWidget_OnUnpossessPawn::UnpossessedPawn' has a wrong offset!");

// Function Mariner.MarinerHUDWidget.RemoveAllowedState
// 0x0008 (0x0008 - 0x0000)
struct MarinerHUDWidget_RemoveAllowedState final
{
public:
	TSubclassOf<class UMarinerHUDState>           State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUDWidget_RemoveAllowedState) == 0x000008, "Wrong alignment on MarinerHUDWidget_RemoveAllowedState");
static_assert(sizeof(MarinerHUDWidget_RemoveAllowedState) == 0x000008, "Wrong size on MarinerHUDWidget_RemoveAllowedState");
static_assert(offsetof(MarinerHUDWidget_RemoveAllowedState, State) == 0x000000, "Member 'MarinerHUDWidget_RemoveAllowedState::State' has a wrong offset!");

// Function Mariner.MarinerHUDWidget.RemoveExcludedState
// 0x0008 (0x0008 - 0x0000)
struct MarinerHUDWidget_RemoveExcludedState final
{
public:
	TSubclassOf<class UMarinerHUDState>           State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUDWidget_RemoveExcludedState) == 0x000008, "Wrong alignment on MarinerHUDWidget_RemoveExcludedState");
static_assert(sizeof(MarinerHUDWidget_RemoveExcludedState) == 0x000008, "Wrong size on MarinerHUDWidget_RemoveExcludedState");
static_assert(offsetof(MarinerHUDWidget_RemoveExcludedState, State) == 0x000000, "Member 'MarinerHUDWidget_RemoveExcludedState::State' has a wrong offset!");

// Function Mariner.MarinerHUDWidget.SetExternalWidgetAllowed
// 0x0001 (0x0001 - 0x0000)
struct MarinerHUDWidget_SetExternalWidgetAllowed final
{
public:
	bool                                          bAllowed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUDWidget_SetExternalWidgetAllowed) == 0x000001, "Wrong alignment on MarinerHUDWidget_SetExternalWidgetAllowed");
static_assert(sizeof(MarinerHUDWidget_SetExternalWidgetAllowed) == 0x000001, "Wrong size on MarinerHUDWidget_SetExternalWidgetAllowed");
static_assert(offsetof(MarinerHUDWidget_SetExternalWidgetAllowed, bAllowed) == 0x000000, "Member 'MarinerHUDWidget_SetExternalWidgetAllowed::bAllowed' has a wrong offset!");

// Function Mariner.MarinerHUDWidget.SetInternalWidgetAllowed
// 0x0001 (0x0001 - 0x0000)
struct MarinerHUDWidget_SetInternalWidgetAllowed final
{
public:
	bool                                          bAllowed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUDWidget_SetInternalWidgetAllowed) == 0x000001, "Wrong alignment on MarinerHUDWidget_SetInternalWidgetAllowed");
static_assert(sizeof(MarinerHUDWidget_SetInternalWidgetAllowed) == 0x000001, "Wrong size on MarinerHUDWidget_SetInternalWidgetAllowed");
static_assert(offsetof(MarinerHUDWidget_SetInternalWidgetAllowed, bAllowed) == 0x000000, "Member 'MarinerHUDWidget_SetInternalWidgetAllowed::bAllowed' has a wrong offset!");

// Function Mariner.MarinerHUDWidget.GetMarinerHUD
// 0x0008 (0x0008 - 0x0000)
struct MarinerHUDWidget_GetMarinerHUD final
{
public:
	class AMarinerHUD*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUDWidget_GetMarinerHUD) == 0x000008, "Wrong alignment on MarinerHUDWidget_GetMarinerHUD");
static_assert(sizeof(MarinerHUDWidget_GetMarinerHUD) == 0x000008, "Wrong size on MarinerHUDWidget_GetMarinerHUD");
static_assert(offsetof(MarinerHUDWidget_GetMarinerHUD, ReturnValue) == 0x000000, "Member 'MarinerHUDWidget_GetMarinerHUD::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMessageWidget.AddWidgetFromPool
// 0x0010 (0x0010 - 0x0000)
struct MarinerMessageWidget_AddWidgetFromPool final
{
public:
	TSubclassOf<class UUserWidget>                WidgetClassToAdd;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMessageWidget_AddWidgetFromPool) == 0x000008, "Wrong alignment on MarinerMessageWidget_AddWidgetFromPool");
static_assert(sizeof(MarinerMessageWidget_AddWidgetFromPool) == 0x000010, "Wrong size on MarinerMessageWidget_AddWidgetFromPool");
static_assert(offsetof(MarinerMessageWidget_AddWidgetFromPool, WidgetClassToAdd) == 0x000000, "Member 'MarinerMessageWidget_AddWidgetFromPool::WidgetClassToAdd' has a wrong offset!");
static_assert(offsetof(MarinerMessageWidget_AddWidgetFromPool, ReturnValue) == 0x000008, "Member 'MarinerMessageWidget_AddWidgetFromPool::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMessageWidget.AddWidgetToPanel
// 0x0010 (0x0010 - 0x0000)
struct MarinerMessageWidget_AddWidgetToPanel final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFeedFromTop;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1508[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMessageWidget_AddWidgetToPanel) == 0x000008, "Wrong alignment on MarinerMessageWidget_AddWidgetToPanel");
static_assert(sizeof(MarinerMessageWidget_AddWidgetToPanel) == 0x000010, "Wrong size on MarinerMessageWidget_AddWidgetToPanel");
static_assert(offsetof(MarinerMessageWidget_AddWidgetToPanel, Widget) == 0x000000, "Member 'MarinerMessageWidget_AddWidgetToPanel::Widget' has a wrong offset!");
static_assert(offsetof(MarinerMessageWidget_AddWidgetToPanel, bFeedFromTop) == 0x000008, "Member 'MarinerMessageWidget_AddWidgetToPanel::bFeedFromTop' has a wrong offset!");

// Function Mariner.MarinerMessageWidget.OnDiscardedMessage
// 0x0020 (0x0020 - 0x0000)
struct MarinerMessageWidget_OnDiscardedMessage final
{
public:
	class UMarinerLocalMessage*                   MessageCDO;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState1;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState2;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalObject;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMessageWidget_OnDiscardedMessage) == 0x000008, "Wrong alignment on MarinerMessageWidget_OnDiscardedMessage");
static_assert(sizeof(MarinerMessageWidget_OnDiscardedMessage) == 0x000020, "Wrong size on MarinerMessageWidget_OnDiscardedMessage");
static_assert(offsetof(MarinerMessageWidget_OnDiscardedMessage, MessageCDO) == 0x000000, "Member 'MarinerMessageWidget_OnDiscardedMessage::MessageCDO' has a wrong offset!");
static_assert(offsetof(MarinerMessageWidget_OnDiscardedMessage, RelatedPlayerState1) == 0x000008, "Member 'MarinerMessageWidget_OnDiscardedMessage::RelatedPlayerState1' has a wrong offset!");
static_assert(offsetof(MarinerMessageWidget_OnDiscardedMessage, RelatedPlayerState2) == 0x000010, "Member 'MarinerMessageWidget_OnDiscardedMessage::RelatedPlayerState2' has a wrong offset!");
static_assert(offsetof(MarinerMessageWidget_OnDiscardedMessage, OptionalObject) == 0x000018, "Member 'MarinerMessageWidget_OnDiscardedMessage::OptionalObject' has a wrong offset!");

// Function Mariner.MarinerMessageWidget.OnEnqueuedMessage
// 0x0020 (0x0020 - 0x0000)
struct MarinerMessageWidget_OnEnqueuedMessage final
{
public:
	class UMarinerLocalMessage*                   MessageCDO;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState1;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState2;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalObject;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMessageWidget_OnEnqueuedMessage) == 0x000008, "Wrong alignment on MarinerMessageWidget_OnEnqueuedMessage");
static_assert(sizeof(MarinerMessageWidget_OnEnqueuedMessage) == 0x000020, "Wrong size on MarinerMessageWidget_OnEnqueuedMessage");
static_assert(offsetof(MarinerMessageWidget_OnEnqueuedMessage, MessageCDO) == 0x000000, "Member 'MarinerMessageWidget_OnEnqueuedMessage::MessageCDO' has a wrong offset!");
static_assert(offsetof(MarinerMessageWidget_OnEnqueuedMessage, RelatedPlayerState1) == 0x000008, "Member 'MarinerMessageWidget_OnEnqueuedMessage::RelatedPlayerState1' has a wrong offset!");
static_assert(offsetof(MarinerMessageWidget_OnEnqueuedMessage, RelatedPlayerState2) == 0x000010, "Member 'MarinerMessageWidget_OnEnqueuedMessage::RelatedPlayerState2' has a wrong offset!");
static_assert(offsetof(MarinerMessageWidget_OnEnqueuedMessage, OptionalObject) == 0x000018, "Member 'MarinerMessageWidget_OnEnqueuedMessage::OptionalObject' has a wrong offset!");

// Function Mariner.MarinerMessageWidget.OnReceiveMessage
// 0x0020 (0x0020 - 0x0000)
struct MarinerMessageWidget_OnReceiveMessage final
{
public:
	class UMarinerLocalMessage*                   MessageCDO;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState1;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState2;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalObject;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMessageWidget_OnReceiveMessage) == 0x000008, "Wrong alignment on MarinerMessageWidget_OnReceiveMessage");
static_assert(sizeof(MarinerMessageWidget_OnReceiveMessage) == 0x000020, "Wrong size on MarinerMessageWidget_OnReceiveMessage");
static_assert(offsetof(MarinerMessageWidget_OnReceiveMessage, MessageCDO) == 0x000000, "Member 'MarinerMessageWidget_OnReceiveMessage::MessageCDO' has a wrong offset!");
static_assert(offsetof(MarinerMessageWidget_OnReceiveMessage, RelatedPlayerState1) == 0x000008, "Member 'MarinerMessageWidget_OnReceiveMessage::RelatedPlayerState1' has a wrong offset!");
static_assert(offsetof(MarinerMessageWidget_OnReceiveMessage, RelatedPlayerState2) == 0x000010, "Member 'MarinerMessageWidget_OnReceiveMessage::RelatedPlayerState2' has a wrong offset!");
static_assert(offsetof(MarinerMessageWidget_OnReceiveMessage, OptionalObject) == 0x000018, "Member 'MarinerMessageWidget_OnReceiveMessage::OptionalObject' has a wrong offset!");

// Function Mariner.MarinerMessageWidget.ReleaseWidgetToPool
// 0x0008 (0x0008 - 0x0000)
struct MarinerMessageWidget_ReleaseWidgetToPool final
{
public:
	class UUserWidget*                            MessageWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMessageWidget_ReleaseWidgetToPool) == 0x000008, "Wrong alignment on MarinerMessageWidget_ReleaseWidgetToPool");
static_assert(sizeof(MarinerMessageWidget_ReleaseWidgetToPool) == 0x000008, "Wrong size on MarinerMessageWidget_ReleaseWidgetToPool");
static_assert(offsetof(MarinerMessageWidget_ReleaseWidgetToPool, MessageWidget) == 0x000000, "Member 'MarinerMessageWidget_ReleaseWidgetToPool::MessageWidget' has a wrong offset!");

// Function Mariner.MarinerMessageWidget.ShouldEnqueueMessage
// 0x0028 (0x0028 - 0x0000)
struct MarinerMessageWidget_ShouldEnqueueMessage final
{
public:
	class UMarinerLocalMessage*                   MessageCDO;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState1;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState2;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalObject;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1509[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMessageWidget_ShouldEnqueueMessage) == 0x000008, "Wrong alignment on MarinerMessageWidget_ShouldEnqueueMessage");
static_assert(sizeof(MarinerMessageWidget_ShouldEnqueueMessage) == 0x000028, "Wrong size on MarinerMessageWidget_ShouldEnqueueMessage");
static_assert(offsetof(MarinerMessageWidget_ShouldEnqueueMessage, MessageCDO) == 0x000000, "Member 'MarinerMessageWidget_ShouldEnqueueMessage::MessageCDO' has a wrong offset!");
static_assert(offsetof(MarinerMessageWidget_ShouldEnqueueMessage, RelatedPlayerState1) == 0x000008, "Member 'MarinerMessageWidget_ShouldEnqueueMessage::RelatedPlayerState1' has a wrong offset!");
static_assert(offsetof(MarinerMessageWidget_ShouldEnqueueMessage, RelatedPlayerState2) == 0x000010, "Member 'MarinerMessageWidget_ShouldEnqueueMessage::RelatedPlayerState2' has a wrong offset!");
static_assert(offsetof(MarinerMessageWidget_ShouldEnqueueMessage, OptionalObject) == 0x000018, "Member 'MarinerMessageWidget_ShouldEnqueueMessage::OptionalObject' has a wrong offset!");
static_assert(offsetof(MarinerMessageWidget_ShouldEnqueueMessage, ReturnValue) == 0x000020, "Member 'MarinerMessageWidget_ShouldEnqueueMessage::ReturnValue' has a wrong offset!");

// Function Mariner.MangoTxnManager.Get
// 0x0010 (0x0010 - 0x0000)
struct MangoTxnManager_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMangoTxnManager*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoTxnManager_Get) == 0x000008, "Wrong alignment on MangoTxnManager_Get");
static_assert(sizeof(MangoTxnManager_Get) == 0x000010, "Wrong size on MangoTxnManager_Get");
static_assert(offsetof(MangoTxnManager_Get, WorldContextObject) == 0x000000, "Member 'MangoTxnManager_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MangoTxnManager_Get, ReturnValue) == 0x000008, "Member 'MangoTxnManager_Get::ReturnValue' has a wrong offset!");

// Function Mariner.MangoTxnManager.InitPurchase
// 0x0020 (0x0020 - 0x0000)
struct MangoTxnManager_InitPurchase final
{
public:
	class FString                                 NativeOfferId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EMangoNativePurchaseCompleteReason CompleteReason, const class FString& OrderId, struct FMangoOrderDetails& OrderDetails)> OnNativePurchaseComplete;                          // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoTxnManager_InitPurchase) == 0x000008, "Wrong alignment on MangoTxnManager_InitPurchase");
static_assert(sizeof(MangoTxnManager_InitPurchase) == 0x000020, "Wrong size on MangoTxnManager_InitPurchase");
static_assert(offsetof(MangoTxnManager_InitPurchase, NativeOfferId) == 0x000000, "Member 'MangoTxnManager_InitPurchase::NativeOfferId' has a wrong offset!");
static_assert(offsetof(MangoTxnManager_InitPurchase, OnNativePurchaseComplete) == 0x000010, "Member 'MangoTxnManager_InitPurchase::OnNativePurchaseComplete' has a wrong offset!");

// Function Mariner.MangoTxnManager.GetDisplayPriceForNativeOfferId
// 0x0028 (0x0028 - 0x0000)
struct MangoTxnManager_GetDisplayPriceForNativeOfferId final
{
public:
	class FString                                 NativeOfferId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoTxnManager_GetDisplayPriceForNativeOfferId) == 0x000008, "Wrong alignment on MangoTxnManager_GetDisplayPriceForNativeOfferId");
static_assert(sizeof(MangoTxnManager_GetDisplayPriceForNativeOfferId) == 0x000028, "Wrong size on MangoTxnManager_GetDisplayPriceForNativeOfferId");
static_assert(offsetof(MangoTxnManager_GetDisplayPriceForNativeOfferId, NativeOfferId) == 0x000000, "Member 'MangoTxnManager_GetDisplayPriceForNativeOfferId::NativeOfferId' has a wrong offset!");
static_assert(offsetof(MangoTxnManager_GetDisplayPriceForNativeOfferId, ReturnValue) == 0x000010, "Member 'MangoTxnManager_GetDisplayPriceForNativeOfferId::ReturnValue' has a wrong offset!");

// Function Mariner.MangoTxnManager.GetOriginAccessDiscountActive
// 0x0008 (0x0008 - 0x0000)
struct MangoTxnManager_GetOriginAccessDiscountActive final
{
public:
	float                                         OutDiscountPercent;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_150B[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoTxnManager_GetOriginAccessDiscountActive) == 0x000004, "Wrong alignment on MangoTxnManager_GetOriginAccessDiscountActive");
static_assert(sizeof(MangoTxnManager_GetOriginAccessDiscountActive) == 0x000008, "Wrong size on MangoTxnManager_GetOriginAccessDiscountActive");
static_assert(offsetof(MangoTxnManager_GetOriginAccessDiscountActive, OutDiscountPercent) == 0x000000, "Member 'MangoTxnManager_GetOriginAccessDiscountActive::OutDiscountPercent' has a wrong offset!");
static_assert(offsetof(MangoTxnManager_GetOriginAccessDiscountActive, ReturnValue) == 0x000004, "Member 'MangoTxnManager_GetOriginAccessDiscountActive::ReturnValue' has a wrong offset!");

// Function Mariner.MangoTxnManager.GetPricingInformationForNativeOfferId
// 0x0048 (0x0048 - 0x0000)
struct MangoTxnManager_GetPricingInformationForNativeOfferId final
{
public:
	class FString                                 NativeOfferId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutDisplayPrice;                                   // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   OutRegularPrice;                                   // 0x0028(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          OutIsOnSale;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0041(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_150C[0x6];                                     // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoTxnManager_GetPricingInformationForNativeOfferId) == 0x000008, "Wrong alignment on MangoTxnManager_GetPricingInformationForNativeOfferId");
static_assert(sizeof(MangoTxnManager_GetPricingInformationForNativeOfferId) == 0x000048, "Wrong size on MangoTxnManager_GetPricingInformationForNativeOfferId");
static_assert(offsetof(MangoTxnManager_GetPricingInformationForNativeOfferId, NativeOfferId) == 0x000000, "Member 'MangoTxnManager_GetPricingInformationForNativeOfferId::NativeOfferId' has a wrong offset!");
static_assert(offsetof(MangoTxnManager_GetPricingInformationForNativeOfferId, OutDisplayPrice) == 0x000010, "Member 'MangoTxnManager_GetPricingInformationForNativeOfferId::OutDisplayPrice' has a wrong offset!");
static_assert(offsetof(MangoTxnManager_GetPricingInformationForNativeOfferId, OutRegularPrice) == 0x000028, "Member 'MangoTxnManager_GetPricingInformationForNativeOfferId::OutRegularPrice' has a wrong offset!");
static_assert(offsetof(MangoTxnManager_GetPricingInformationForNativeOfferId, OutIsOnSale) == 0x000040, "Member 'MangoTxnManager_GetPricingInformationForNativeOfferId::OutIsOnSale' has a wrong offset!");
static_assert(offsetof(MangoTxnManager_GetPricingInformationForNativeOfferId, ReturnValue) == 0x000041, "Member 'MangoTxnManager_GetPricingInformationForNativeOfferId::ReturnValue' has a wrong offset!");

// Function Mariner.MangoTxnManager.GetStringsForNativeOfferId
// 0x0060 (0x0060 - 0x0000)
struct MangoTxnManager_GetStringsForNativeOfferId final
{
public:
	class FString                                 NativeOfferId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutTitle;                                          // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   OutDescription;                                    // 0x0028(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   OutLongDescription;                                // 0x0040(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_150D[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MangoTxnManager_GetStringsForNativeOfferId) == 0x000008, "Wrong alignment on MangoTxnManager_GetStringsForNativeOfferId");
static_assert(sizeof(MangoTxnManager_GetStringsForNativeOfferId) == 0x000060, "Wrong size on MangoTxnManager_GetStringsForNativeOfferId");
static_assert(offsetof(MangoTxnManager_GetStringsForNativeOfferId, NativeOfferId) == 0x000000, "Member 'MangoTxnManager_GetStringsForNativeOfferId::NativeOfferId' has a wrong offset!");
static_assert(offsetof(MangoTxnManager_GetStringsForNativeOfferId, OutTitle) == 0x000010, "Member 'MangoTxnManager_GetStringsForNativeOfferId::OutTitle' has a wrong offset!");
static_assert(offsetof(MangoTxnManager_GetStringsForNativeOfferId, OutDescription) == 0x000028, "Member 'MangoTxnManager_GetStringsForNativeOfferId::OutDescription' has a wrong offset!");
static_assert(offsetof(MangoTxnManager_GetStringsForNativeOfferId, OutLongDescription) == 0x000040, "Member 'MangoTxnManager_GetStringsForNativeOfferId::OutLongDescription' has a wrong offset!");
static_assert(offsetof(MangoTxnManager_GetStringsForNativeOfferId, ReturnValue) == 0x000058, "Member 'MangoTxnManager_GetStringsForNativeOfferId::ReturnValue' has a wrong offset!");

// Function Mariner.MangoTxnManager.IsAllowedToPurchase
// 0x0001 (0x0001 - 0x0000)
struct MangoTxnManager_IsAllowedToPurchase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MangoTxnManager_IsAllowedToPurchase) == 0x000001, "Wrong alignment on MangoTxnManager_IsAllowedToPurchase");
static_assert(sizeof(MangoTxnManager_IsAllowedToPurchase) == 0x000001, "Wrong size on MangoTxnManager_IsAllowedToPurchase");
static_assert(offsetof(MangoTxnManager_IsAllowedToPurchase, ReturnValue) == 0x000000, "Member 'MangoTxnManager_IsAllowedToPurchase::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCMSItemDataAsset.GetItemType
// 0x0001 (0x0001 - 0x0000)
struct MarinerCMSItemDataAsset_GetItemType final
{
public:
	EMangoItemType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCMSItemDataAsset_GetItemType) == 0x000001, "Wrong alignment on MarinerCMSItemDataAsset_GetItemType");
static_assert(sizeof(MarinerCMSItemDataAsset_GetItemType) == 0x000001, "Wrong size on MarinerCMSItemDataAsset_GetItemType");
static_assert(offsetof(MarinerCMSItemDataAsset_GetItemType, ReturnValue) == 0x000000, "Member 'MarinerCMSItemDataAsset_GetItemType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCMSItemWithIcon.GetBrushFromCMSItem
// 0x0088 (0x0088 - 0x0000)
struct MarinerCMSItemWithIcon_GetBrushFromCMSItem final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCMSItemWithIcon_GetBrushFromCMSItem) == 0x000008, "Wrong alignment on MarinerCMSItemWithIcon_GetBrushFromCMSItem");
static_assert(sizeof(MarinerCMSItemWithIcon_GetBrushFromCMSItem) == 0x000088, "Wrong size on MarinerCMSItemWithIcon_GetBrushFromCMSItem");
static_assert(offsetof(MarinerCMSItemWithIcon_GetBrushFromCMSItem, ReturnValue) == 0x000000, "Member 'MarinerCMSItemWithIcon_GetBrushFromCMSItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_ApplyRootMotion.BP_AddEffectsToDefaultApplyOnStartMove
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_ApplyRootMotion_BP_AddEffectsToDefaultApplyOnStartMove final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ApplyRootMotion_BP_AddEffectsToDefaultApplyOnStartMove) == 0x000008, "Wrong alignment on MarinerAbility_ApplyRootMotion_BP_AddEffectsToDefaultApplyOnStartMove");
static_assert(sizeof(MarinerAbility_ApplyRootMotion_BP_AddEffectsToDefaultApplyOnStartMove) == 0x000010, "Wrong size on MarinerAbility_ApplyRootMotion_BP_AddEffectsToDefaultApplyOnStartMove");
static_assert(offsetof(MarinerAbility_ApplyRootMotion_BP_AddEffectsToDefaultApplyOnStartMove, ReturnValue) == 0x000000, "Member 'MarinerAbility_ApplyRootMotion_BP_AddEffectsToDefaultApplyOnStartMove::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_ApplyRootMotion.BP_OnExceededDamageTolerance
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_ApplyRootMotion_BP_OnExceededDamageTolerance final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ApplyRootMotion_BP_OnExceededDamageTolerance) == 0x000004, "Wrong alignment on MarinerAbility_ApplyRootMotion_BP_OnExceededDamageTolerance");
static_assert(sizeof(MarinerAbility_ApplyRootMotion_BP_OnExceededDamageTolerance) == 0x000004, "Wrong size on MarinerAbility_ApplyRootMotion_BP_OnExceededDamageTolerance");
static_assert(offsetof(MarinerAbility_ApplyRootMotion_BP_OnExceededDamageTolerance, Damage) == 0x000000, "Member 'MarinerAbility_ApplyRootMotion_BP_OnExceededDamageTolerance::Damage' has a wrong offset!");

// Function Mariner.MarinerAbility_ApplyRootMotion.GetEffectsToApplyOnStartMove
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_ApplyRootMotion_GetEffectsToApplyOnStartMove final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ApplyRootMotion_GetEffectsToApplyOnStartMove) == 0x000008, "Wrong alignment on MarinerAbility_ApplyRootMotion_GetEffectsToApplyOnStartMove");
static_assert(sizeof(MarinerAbility_ApplyRootMotion_GetEffectsToApplyOnStartMove) == 0x000010, "Wrong size on MarinerAbility_ApplyRootMotion_GetEffectsToApplyOnStartMove");
static_assert(offsetof(MarinerAbility_ApplyRootMotion_GetEffectsToApplyOnStartMove, ReturnValue) == 0x000000, "Member 'MarinerAbility_ApplyRootMotion_GetEffectsToApplyOnStartMove::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_ApplyRootMotion.OnExceededDamageTolerance
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_ApplyRootMotion_OnExceededDamageTolerance final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1516[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbility_ApplyRootMotion_OnExceededDamageTolerance) == 0x000008, "Wrong alignment on MarinerAbility_ApplyRootMotion_OnExceededDamageTolerance");
static_assert(sizeof(MarinerAbility_ApplyRootMotion_OnExceededDamageTolerance) == 0x000010, "Wrong size on MarinerAbility_ApplyRootMotion_OnExceededDamageTolerance");
static_assert(offsetof(MarinerAbility_ApplyRootMotion_OnExceededDamageTolerance, DamagedActor) == 0x000000, "Member 'MarinerAbility_ApplyRootMotion_OnExceededDamageTolerance::DamagedActor' has a wrong offset!");
static_assert(offsetof(MarinerAbility_ApplyRootMotion_OnExceededDamageTolerance, Damage) == 0x000008, "Member 'MarinerAbility_ApplyRootMotion_OnExceededDamageTolerance::Damage' has a wrong offset!");

// Function Mariner.MarinerAbility_ApplyRootMotion.SetRetainMomentum
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_ApplyRootMotion_SetRetainMomentum final
{
public:
	bool                                          bNewRetainMomentum;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ApplyRootMotion_SetRetainMomentum) == 0x000001, "Wrong alignment on MarinerAbility_ApplyRootMotion_SetRetainMomentum");
static_assert(sizeof(MarinerAbility_ApplyRootMotion_SetRetainMomentum) == 0x000001, "Wrong size on MarinerAbility_ApplyRootMotion_SetRetainMomentum");
static_assert(offsetof(MarinerAbility_ApplyRootMotion_SetRetainMomentum, bNewRetainMomentum) == 0x000000, "Member 'MarinerAbility_ApplyRootMotion_SetRetainMomentum::bNewRetainMomentum' has a wrong offset!");

// Function Mariner.MarinerAbility_ApplyRootMotion.SetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_ApplyRootMotion_SetTargetActor final
{
public:
	class AActor*                                 NewTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ApplyRootMotion_SetTargetActor) == 0x000008, "Wrong alignment on MarinerAbility_ApplyRootMotion_SetTargetActor");
static_assert(sizeof(MarinerAbility_ApplyRootMotion_SetTargetActor) == 0x000008, "Wrong size on MarinerAbility_ApplyRootMotion_SetTargetActor");
static_assert(offsetof(MarinerAbility_ApplyRootMotion_SetTargetActor, NewTarget) == 0x000000, "Member 'MarinerAbility_ApplyRootMotion_SetTargetActor::NewTarget' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.BP_OnInputHeldThresholdExpired
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_Projectile_Base_BP_OnInputHeldThresholdExpired final
{
public:
	float                                         ThresholdTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThresholdID;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_Base_BP_OnInputHeldThresholdExpired) == 0x000004, "Wrong alignment on MarinerAbility_Projectile_Base_BP_OnInputHeldThresholdExpired");
static_assert(sizeof(MarinerAbility_Projectile_Base_BP_OnInputHeldThresholdExpired) == 0x000008, "Wrong size on MarinerAbility_Projectile_Base_BP_OnInputHeldThresholdExpired");
static_assert(offsetof(MarinerAbility_Projectile_Base_BP_OnInputHeldThresholdExpired, ThresholdTime) == 0x000000, "Member 'MarinerAbility_Projectile_Base_BP_OnInputHeldThresholdExpired::ThresholdTime' has a wrong offset!");
static_assert(offsetof(MarinerAbility_Projectile_Base_BP_OnInputHeldThresholdExpired, ThresholdID) == 0x000004, "Member 'MarinerAbility_Projectile_Base_BP_OnInputHeldThresholdExpired::ThresholdID' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.BP_OnProjectileDestroyed
// 0x0040 (0x0040 - 0x0000)
struct MarinerAbility_Projectile_Base_BP_OnProjectileDestroyed final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_Base_BP_OnProjectileDestroyed) == 0x000008, "Wrong alignment on MarinerAbility_Projectile_Base_BP_OnProjectileDestroyed");
static_assert(sizeof(MarinerAbility_Projectile_Base_BP_OnProjectileDestroyed) == 0x000040, "Wrong size on MarinerAbility_Projectile_Base_BP_OnProjectileDestroyed");
static_assert(offsetof(MarinerAbility_Projectile_Base_BP_OnProjectileDestroyed, ActorInfo) == 0x000000, "Member 'MarinerAbility_Projectile_Base_BP_OnProjectileDestroyed::ActorInfo' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.BP_OnProjectileSpawned
// 0x0048 (0x0048 - 0x0000)
struct MarinerAbility_Projectile_Base_BP_OnProjectileSpawned final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AMarinerProjectile*                     SpawnedProjectile;                                 // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_Base_BP_OnProjectileSpawned) == 0x000008, "Wrong alignment on MarinerAbility_Projectile_Base_BP_OnProjectileSpawned");
static_assert(sizeof(MarinerAbility_Projectile_Base_BP_OnProjectileSpawned) == 0x000048, "Wrong size on MarinerAbility_Projectile_Base_BP_OnProjectileSpawned");
static_assert(offsetof(MarinerAbility_Projectile_Base_BP_OnProjectileSpawned, ActorInfo) == 0x000000, "Member 'MarinerAbility_Projectile_Base_BP_OnProjectileSpawned::ActorInfo' has a wrong offset!");
static_assert(offsetof(MarinerAbility_Projectile_Base_BP_OnProjectileSpawned, SpawnedProjectile) == 0x000040, "Member 'MarinerAbility_Projectile_Base_BP_OnProjectileSpawned::SpawnedProjectile' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.BP_OnProjectileSpawned_Authority
// 0x0048 (0x0048 - 0x0000)
struct MarinerAbility_Projectile_Base_BP_OnProjectileSpawned_Authority final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AMarinerProjectile*                     SpawnedProjectile;                                 // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_Base_BP_OnProjectileSpawned_Authority) == 0x000008, "Wrong alignment on MarinerAbility_Projectile_Base_BP_OnProjectileSpawned_Authority");
static_assert(sizeof(MarinerAbility_Projectile_Base_BP_OnProjectileSpawned_Authority) == 0x000048, "Wrong size on MarinerAbility_Projectile_Base_BP_OnProjectileSpawned_Authority");
static_assert(offsetof(MarinerAbility_Projectile_Base_BP_OnProjectileSpawned_Authority, ActorInfo) == 0x000000, "Member 'MarinerAbility_Projectile_Base_BP_OnProjectileSpawned_Authority::ActorInfo' has a wrong offset!");
static_assert(offsetof(MarinerAbility_Projectile_Base_BP_OnProjectileSpawned_Authority, SpawnedProjectile) == 0x000040, "Member 'MarinerAbility_Projectile_Base_BP_OnProjectileSpawned_Authority::SpawnedProjectile' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.GetInputHeldThresholdCompletionRatio
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_Projectile_Base_GetInputHeldThresholdCompletionRatio final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_Base_GetInputHeldThresholdCompletionRatio) == 0x000004, "Wrong alignment on MarinerAbility_Projectile_Base_GetInputHeldThresholdCompletionRatio");
static_assert(sizeof(MarinerAbility_Projectile_Base_GetInputHeldThresholdCompletionRatio) == 0x000008, "Wrong size on MarinerAbility_Projectile_Base_GetInputHeldThresholdCompletionRatio");
static_assert(offsetof(MarinerAbility_Projectile_Base_GetInputHeldThresholdCompletionRatio, ID) == 0x000000, "Member 'MarinerAbility_Projectile_Base_GetInputHeldThresholdCompletionRatio::ID' has a wrong offset!");
static_assert(offsetof(MarinerAbility_Projectile_Base_GetInputHeldThresholdCompletionRatio, ReturnValue) == 0x000004, "Member 'MarinerAbility_Projectile_Base_GetInputHeldThresholdCompletionRatio::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.GetProjectileSpawnTransformOverride
// 0x0030 (0x0030 - 0x0000)
struct MarinerAbility_Projectile_Base_GetProjectileSpawnTransformOverride final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_Base_GetProjectileSpawnTransformOverride) == 0x000010, "Wrong alignment on MarinerAbility_Projectile_Base_GetProjectileSpawnTransformOverride");
static_assert(sizeof(MarinerAbility_Projectile_Base_GetProjectileSpawnTransformOverride) == 0x000030, "Wrong size on MarinerAbility_Projectile_Base_GetProjectileSpawnTransformOverride");
static_assert(offsetof(MarinerAbility_Projectile_Base_GetProjectileSpawnTransformOverride, ReturnValue) == 0x000000, "Member 'MarinerAbility_Projectile_Base_GetProjectileSpawnTransformOverride::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.InitProjectile
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_Projectile_Base_InitProjectile final
{
public:
	class AActor*                                 ProjectileActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_Base_InitProjectile) == 0x000008, "Wrong alignment on MarinerAbility_Projectile_Base_InitProjectile");
static_assert(sizeof(MarinerAbility_Projectile_Base_InitProjectile) == 0x000008, "Wrong size on MarinerAbility_Projectile_Base_InitProjectile");
static_assert(offsetof(MarinerAbility_Projectile_Base_InitProjectile, ProjectileActor) == 0x000000, "Member 'MarinerAbility_Projectile_Base_InitProjectile::ProjectileActor' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.InputHeldThresholdExpired
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_Projectile_Base_InputHeldThresholdExpired final
{
public:
	float                                         ThresholdTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThresholdID;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_Base_InputHeldThresholdExpired) == 0x000004, "Wrong alignment on MarinerAbility_Projectile_Base_InputHeldThresholdExpired");
static_assert(sizeof(MarinerAbility_Projectile_Base_InputHeldThresholdExpired) == 0x000008, "Wrong size on MarinerAbility_Projectile_Base_InputHeldThresholdExpired");
static_assert(offsetof(MarinerAbility_Projectile_Base_InputHeldThresholdExpired, ThresholdTime) == 0x000000, "Member 'MarinerAbility_Projectile_Base_InputHeldThresholdExpired::ThresholdTime' has a wrong offset!");
static_assert(offsetof(MarinerAbility_Projectile_Base_InputHeldThresholdExpired, ThresholdID) == 0x000004, "Member 'MarinerAbility_Projectile_Base_InputHeldThresholdExpired::ThresholdID' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.ModifyProjectileFireSocketName
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_Projectile_Base_ModifyProjectileFireSocketName final
{
public:
	class FName                                   OrigSocketName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_Base_ModifyProjectileFireSocketName) == 0x000004, "Wrong alignment on MarinerAbility_Projectile_Base_ModifyProjectileFireSocketName");
static_assert(sizeof(MarinerAbility_Projectile_Base_ModifyProjectileFireSocketName) == 0x000010, "Wrong size on MarinerAbility_Projectile_Base_ModifyProjectileFireSocketName");
static_assert(offsetof(MarinerAbility_Projectile_Base_ModifyProjectileFireSocketName, OrigSocketName) == 0x000000, "Member 'MarinerAbility_Projectile_Base_ModifyProjectileFireSocketName::OrigSocketName' has a wrong offset!");
static_assert(offsetof(MarinerAbility_Projectile_Base_ModifyProjectileFireSocketName, ReturnValue) == 0x000008, "Member 'MarinerAbility_Projectile_Base_ModifyProjectileFireSocketName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.OnProjectileDestroyed
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_Projectile_Base_OnProjectileDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_Base_OnProjectileDestroyed) == 0x000008, "Wrong alignment on MarinerAbility_Projectile_Base_OnProjectileDestroyed");
static_assert(sizeof(MarinerAbility_Projectile_Base_OnProjectileDestroyed) == 0x000008, "Wrong size on MarinerAbility_Projectile_Base_OnProjectileDestroyed");
static_assert(offsetof(MarinerAbility_Projectile_Base_OnProjectileDestroyed, DestroyedActor) == 0x000000, "Member 'MarinerAbility_Projectile_Base_OnProjectileDestroyed::DestroyedActor' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.OnProjectileFinishedSpawning
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_Projectile_Base_OnProjectileFinishedSpawning final
{
public:
	class AMarinerProjectile*                     SpawnedProjectile;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_Base_OnProjectileFinishedSpawning) == 0x000008, "Wrong alignment on MarinerAbility_Projectile_Base_OnProjectileFinishedSpawning");
static_assert(sizeof(MarinerAbility_Projectile_Base_OnProjectileFinishedSpawning) == 0x000008, "Wrong size on MarinerAbility_Projectile_Base_OnProjectileFinishedSpawning");
static_assert(offsetof(MarinerAbility_Projectile_Base_OnProjectileFinishedSpawning, SpawnedProjectile) == 0x000000, "Member 'MarinerAbility_Projectile_Base_OnProjectileFinishedSpawning::SpawnedProjectile' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.ServerInputReleased
// 0x0030 (0x0030 - 0x0000)
struct MarinerAbility_Projectile_Base_ServerInputReleased final
{
public:
	float                                         ClientTimeReleased;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityTargetDataHandle       ReleaseAimData;                                    // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_Base_ServerInputReleased) == 0x000008, "Wrong alignment on MarinerAbility_Projectile_Base_ServerInputReleased");
static_assert(sizeof(MarinerAbility_Projectile_Base_ServerInputReleased) == 0x000030, "Wrong size on MarinerAbility_Projectile_Base_ServerInputReleased");
static_assert(offsetof(MarinerAbility_Projectile_Base_ServerInputReleased, ClientTimeReleased) == 0x000000, "Member 'MarinerAbility_Projectile_Base_ServerInputReleased::ClientTimeReleased' has a wrong offset!");
static_assert(offsetof(MarinerAbility_Projectile_Base_ServerInputReleased, ReleaseAimData) == 0x000008, "Member 'MarinerAbility_Projectile_Base_ServerInputReleased::ReleaseAimData' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.SetLocalInputHeldTimeDilation
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_Projectile_Base_SetLocalInputHeldTimeDilation final
{
public:
	float                                         NewTimeDilation;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_Base_SetLocalInputHeldTimeDilation) == 0x000004, "Wrong alignment on MarinerAbility_Projectile_Base_SetLocalInputHeldTimeDilation");
static_assert(sizeof(MarinerAbility_Projectile_Base_SetLocalInputHeldTimeDilation) == 0x000004, "Wrong size on MarinerAbility_Projectile_Base_SetLocalInputHeldTimeDilation");
static_assert(offsetof(MarinerAbility_Projectile_Base_SetLocalInputHeldTimeDilation, NewTimeDilation) == 0x000000, "Member 'MarinerAbility_Projectile_Base_SetLocalInputHeldTimeDilation::NewTimeDilation' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.TryAndGetProjectilePool
// 0x0020 (0x0020 - 0x0000)
struct MarinerAbility_Projectile_Base_TryAndGetProjectilePool final
{
public:
	TSubclassOf<class AMarinerProjectile>         ProjectileClass;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AMarinerProjectile*>             OutProjectilePool;                                 // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151E[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbility_Projectile_Base_TryAndGetProjectilePool) == 0x000008, "Wrong alignment on MarinerAbility_Projectile_Base_TryAndGetProjectilePool");
static_assert(sizeof(MarinerAbility_Projectile_Base_TryAndGetProjectilePool) == 0x000020, "Wrong size on MarinerAbility_Projectile_Base_TryAndGetProjectilePool");
static_assert(offsetof(MarinerAbility_Projectile_Base_TryAndGetProjectilePool, ProjectileClass) == 0x000000, "Member 'MarinerAbility_Projectile_Base_TryAndGetProjectilePool::ProjectileClass' has a wrong offset!");
static_assert(offsetof(MarinerAbility_Projectile_Base_TryAndGetProjectilePool, OutProjectilePool) == 0x000008, "Member 'MarinerAbility_Projectile_Base_TryAndGetProjectilePool::OutProjectilePool' has a wrong offset!");
static_assert(offsetof(MarinerAbility_Projectile_Base_TryAndGetProjectilePool, bIsValid) == 0x000018, "Member 'MarinerAbility_Projectile_Base_TryAndGetProjectilePool::bIsValid' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.GetProjectileType
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_Projectile_Base_GetProjectileType final
{
public:
	TSubclassOf<class AMarinerProjectile>         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_Base_GetProjectileType) == 0x000008, "Wrong alignment on MarinerAbility_Projectile_Base_GetProjectileType");
static_assert(sizeof(MarinerAbility_Projectile_Base_GetProjectileType) == 0x000008, "Wrong size on MarinerAbility_Projectile_Base_GetProjectileType");
static_assert(offsetof(MarinerAbility_Projectile_Base_GetProjectileType, ReturnValue) == 0x000000, "Member 'MarinerAbility_Projectile_Base_GetProjectileType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile_Base.IsTryingToSpawnProjectile
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_Projectile_Base_IsTryingToSpawnProjectile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_Base_IsTryingToSpawnProjectile) == 0x000001, "Wrong alignment on MarinerAbility_Projectile_Base_IsTryingToSpawnProjectile");
static_assert(sizeof(MarinerAbility_Projectile_Base_IsTryingToSpawnProjectile) == 0x000001, "Wrong size on MarinerAbility_Projectile_Base_IsTryingToSpawnProjectile");
static_assert(offsetof(MarinerAbility_Projectile_Base_IsTryingToSpawnProjectile, ReturnValue) == 0x000000, "Member 'MarinerAbility_Projectile_Base_IsTryingToSpawnProjectile::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArenaBoundary.GetBlockedArea
// 0x0001 (0x0001 - 0x0000)
struct MarinerArenaBoundary_GetBlockedArea final
{
public:
	EArenaBoundaryBlockedArea                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArenaBoundary_GetBlockedArea) == 0x000001, "Wrong alignment on MarinerArenaBoundary_GetBlockedArea");
static_assert(sizeof(MarinerArenaBoundary_GetBlockedArea) == 0x000001, "Wrong size on MarinerArenaBoundary_GetBlockedArea");
static_assert(offsetof(MarinerArenaBoundary_GetBlockedArea, ReturnValue) == 0x000000, "Member 'MarinerArenaBoundary_GetBlockedArea::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArenaBoundary.OnKnockoutVolumeBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1520[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap) == 0x000008, "Wrong alignment on MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap");
static_assert(sizeof(MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap) == 0x0000A8, "Wrong size on MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap");
static_assert(offsetof(MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap, OverlappedComponent) == 0x000000, "Member 'MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap, OtherActor) == 0x000008, "Member 'MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap, OtherComponent) == 0x000010, "Member 'MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap, bFromSweep) == 0x00001C, "Member 'MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap, SweepResult) == 0x000020, "Member 'MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap::SweepResult' has a wrong offset!");

// Function Mariner.MarinerArenaBoundary.OnKnockoutVolumeEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct MarinerArenaBoundary_OnKnockoutVolumeEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1521[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerArenaBoundary_OnKnockoutVolumeEndOverlap) == 0x000008, "Wrong alignment on MarinerArenaBoundary_OnKnockoutVolumeEndOverlap");
static_assert(sizeof(MarinerArenaBoundary_OnKnockoutVolumeEndOverlap) == 0x000020, "Wrong size on MarinerArenaBoundary_OnKnockoutVolumeEndOverlap");
static_assert(offsetof(MarinerArenaBoundary_OnKnockoutVolumeEndOverlap, OverlappedComponent) == 0x000000, "Member 'MarinerArenaBoundary_OnKnockoutVolumeEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnKnockoutVolumeEndOverlap, OtherActor) == 0x000008, "Member 'MarinerArenaBoundary_OnKnockoutVolumeEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnKnockoutVolumeEndOverlap, OtherComponent) == 0x000010, "Member 'MarinerArenaBoundary_OnKnockoutVolumeEndOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnKnockoutVolumeEndOverlap, OtherBodyIndex) == 0x000018, "Member 'MarinerArenaBoundary_OnKnockoutVolumeEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Mariner.MarinerArenaBoundary.OnSafeVolumeBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct MarinerArenaBoundary_OnSafeVolumeBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1522[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArenaBoundary_OnSafeVolumeBeginOverlap) == 0x000008, "Wrong alignment on MarinerArenaBoundary_OnSafeVolumeBeginOverlap");
static_assert(sizeof(MarinerArenaBoundary_OnSafeVolumeBeginOverlap) == 0x0000A8, "Wrong size on MarinerArenaBoundary_OnSafeVolumeBeginOverlap");
static_assert(offsetof(MarinerArenaBoundary_OnSafeVolumeBeginOverlap, OverlappedComponent) == 0x000000, "Member 'MarinerArenaBoundary_OnSafeVolumeBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnSafeVolumeBeginOverlap, OtherActor) == 0x000008, "Member 'MarinerArenaBoundary_OnSafeVolumeBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnSafeVolumeBeginOverlap, OtherComponent) == 0x000010, "Member 'MarinerArenaBoundary_OnSafeVolumeBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnSafeVolumeBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'MarinerArenaBoundary_OnSafeVolumeBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnSafeVolumeBeginOverlap, bFromSweep) == 0x00001C, "Member 'MarinerArenaBoundary_OnSafeVolumeBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnSafeVolumeBeginOverlap, SweepResult) == 0x000020, "Member 'MarinerArenaBoundary_OnSafeVolumeBeginOverlap::SweepResult' has a wrong offset!");

// Function Mariner.MarinerArenaBoundary.OnSafeVolumeEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct MarinerArenaBoundary_OnSafeVolumeEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1523[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerArenaBoundary_OnSafeVolumeEndOverlap) == 0x000008, "Wrong alignment on MarinerArenaBoundary_OnSafeVolumeEndOverlap");
static_assert(sizeof(MarinerArenaBoundary_OnSafeVolumeEndOverlap) == 0x000020, "Wrong size on MarinerArenaBoundary_OnSafeVolumeEndOverlap");
static_assert(offsetof(MarinerArenaBoundary_OnSafeVolumeEndOverlap, OverlappedComponent) == 0x000000, "Member 'MarinerArenaBoundary_OnSafeVolumeEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnSafeVolumeEndOverlap, OtherActor) == 0x000008, "Member 'MarinerArenaBoundary_OnSafeVolumeEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnSafeVolumeEndOverlap, OtherComponent) == 0x000010, "Member 'MarinerArenaBoundary_OnSafeVolumeEndOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaBoundary_OnSafeVolumeEndOverlap, OtherBodyIndex) == 0x000018, "Member 'MarinerArenaBoundary_OnSafeVolumeEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile.BP_OnProjectileDestroyed_Authority
// 0x0048 (0x0048 - 0x0000)
struct MarinerAbility_Projectile_BP_OnProjectileDestroyed_Authority final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AMarinerProjectile*                     SpawnedProjectile;                                 // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_BP_OnProjectileDestroyed_Authority) == 0x000008, "Wrong alignment on MarinerAbility_Projectile_BP_OnProjectileDestroyed_Authority");
static_assert(sizeof(MarinerAbility_Projectile_BP_OnProjectileDestroyed_Authority) == 0x000048, "Wrong size on MarinerAbility_Projectile_BP_OnProjectileDestroyed_Authority");
static_assert(offsetof(MarinerAbility_Projectile_BP_OnProjectileDestroyed_Authority, ActorInfo) == 0x000000, "Member 'MarinerAbility_Projectile_BP_OnProjectileDestroyed_Authority::ActorInfo' has a wrong offset!");
static_assert(offsetof(MarinerAbility_Projectile_BP_OnProjectileDestroyed_Authority, SpawnedProjectile) == 0x000040, "Member 'MarinerAbility_Projectile_BP_OnProjectileDestroyed_Authority::SpawnedProjectile' has a wrong offset!");

// Function Mariner.MarinerAbility_Projectile.OnRep_ActiveProjectile
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_Projectile_OnRep_ActiveProjectile final
{
public:
	class AMarinerProjectile*                     PrevActiveProjectile;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Projectile_OnRep_ActiveProjectile) == 0x000008, "Wrong alignment on MarinerAbility_Projectile_OnRep_ActiveProjectile");
static_assert(sizeof(MarinerAbility_Projectile_OnRep_ActiveProjectile) == 0x000008, "Wrong size on MarinerAbility_Projectile_OnRep_ActiveProjectile");
static_assert(offsetof(MarinerAbility_Projectile_OnRep_ActiveProjectile, PrevActiveProjectile) == 0x000000, "Member 'MarinerAbility_Projectile_OnRep_ActiveProjectile::PrevActiveProjectile' has a wrong offset!");

// Function Mariner.MarinerAbility_ChargeProjectile.ModifyAuthChargeState
// 0x0018 (0x0018 - 0x0000)
struct MarinerAbility_ChargeProjectile_ModifyAuthChargeState final
{
public:
	struct FMarinerChargeProjectileAuthState      BaseChargeState;                                   // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarinerChargeProjectileAuthState      ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ChargeProjectile_ModifyAuthChargeState) == 0x000004, "Wrong alignment on MarinerAbility_ChargeProjectile_ModifyAuthChargeState");
static_assert(sizeof(MarinerAbility_ChargeProjectile_ModifyAuthChargeState) == 0x000018, "Wrong size on MarinerAbility_ChargeProjectile_ModifyAuthChargeState");
static_assert(offsetof(MarinerAbility_ChargeProjectile_ModifyAuthChargeState, BaseChargeState) == 0x000000, "Member 'MarinerAbility_ChargeProjectile_ModifyAuthChargeState::BaseChargeState' has a wrong offset!");
static_assert(offsetof(MarinerAbility_ChargeProjectile_ModifyAuthChargeState, ReturnValue) == 0x00000C, "Member 'MarinerAbility_ChargeProjectile_ModifyAuthChargeState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_ChargeProjectile.ModifyEffectsToPlayOnChargeShotFired
// 0x0020 (0x0020 - 0x0000)
struct MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotFired final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    OrigEffectsToApplyOnChargeShotFired;               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotFired) == 0x000008, "Wrong alignment on MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotFired");
static_assert(sizeof(MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotFired) == 0x000020, "Wrong size on MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotFired");
static_assert(offsetof(MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotFired, OrigEffectsToApplyOnChargeShotFired) == 0x000000, "Member 'MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotFired::OrigEffectsToApplyOnChargeShotFired' has a wrong offset!");
static_assert(offsetof(MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotFired, ReturnValue) == 0x000010, "Member 'MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotFired::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_ChargeProjectile.ModifyEffectsToPlayOnChargeShotStashed
// 0x0020 (0x0020 - 0x0000)
struct MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotStashed final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    OrigEffectsToApplyOnChargeShotStashed;             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotStashed) == 0x000008, "Wrong alignment on MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotStashed");
static_assert(sizeof(MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotStashed) == 0x000020, "Wrong size on MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotStashed");
static_assert(offsetof(MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotStashed, OrigEffectsToApplyOnChargeShotStashed) == 0x000000, "Member 'MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotStashed::OrigEffectsToApplyOnChargeShotStashed' has a wrong offset!");
static_assert(offsetof(MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotStashed, ReturnValue) == 0x000010, "Member 'MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotStashed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_ChargeProjectile.ServerTryAndSpawnProjectile
// 0x00B0 (0x00B0 - 0x0000)
struct MarinerAbility_ChargeProjectile_ServerTryAndSpawnProjectile final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ChargeProjectile_ServerTryAndSpawnProjectile) == 0x000008, "Wrong alignment on MarinerAbility_ChargeProjectile_ServerTryAndSpawnProjectile");
static_assert(sizeof(MarinerAbility_ChargeProjectile_ServerTryAndSpawnProjectile) == 0x0000B0, "Wrong size on MarinerAbility_ChargeProjectile_ServerTryAndSpawnProjectile");
static_assert(offsetof(MarinerAbility_ChargeProjectile_ServerTryAndSpawnProjectile, Payload) == 0x000000, "Member 'MarinerAbility_ChargeProjectile_ServerTryAndSpawnProjectile::Payload' has a wrong offset!");

// Function Mariner.MarinerAbility_ChargeProjectile.GetChargeRatio
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_ChargeProjectile_GetChargeRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ChargeProjectile_GetChargeRatio) == 0x000004, "Wrong alignment on MarinerAbility_ChargeProjectile_GetChargeRatio");
static_assert(sizeof(MarinerAbility_ChargeProjectile_GetChargeRatio) == 0x000004, "Wrong size on MarinerAbility_ChargeProjectile_GetChargeRatio");
static_assert(offsetof(MarinerAbility_ChargeProjectile_GetChargeRatio, ReturnValue) == 0x000000, "Member 'MarinerAbility_ChargeProjectile_GetChargeRatio::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_ChargeProjectile.GetCurrentChargeMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_ChargeProjectile_GetCurrentChargeMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ChargeProjectile_GetCurrentChargeMultiplier) == 0x000004, "Wrong alignment on MarinerAbility_ChargeProjectile_GetCurrentChargeMultiplier");
static_assert(sizeof(MarinerAbility_ChargeProjectile_GetCurrentChargeMultiplier) == 0x000004, "Wrong size on MarinerAbility_ChargeProjectile_GetCurrentChargeMultiplier");
static_assert(offsetof(MarinerAbility_ChargeProjectile_GetCurrentChargeMultiplier, ReturnValue) == 0x000000, "Member 'MarinerAbility_ChargeProjectile_GetCurrentChargeMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_ChargeProjectile.GetMaxChargeTime
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_ChargeProjectile_GetMaxChargeTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ChargeProjectile_GetMaxChargeTime) == 0x000004, "Wrong alignment on MarinerAbility_ChargeProjectile_GetMaxChargeTime");
static_assert(sizeof(MarinerAbility_ChargeProjectile_GetMaxChargeTime) == 0x000004, "Wrong size on MarinerAbility_ChargeProjectile_GetMaxChargeTime");
static_assert(offsetof(MarinerAbility_ChargeProjectile_GetMaxChargeTime, ReturnValue) == 0x000000, "Member 'MarinerAbility_ChargeProjectile_GetMaxChargeTime::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_ChargeProjectile.HasStashedCharge
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_ChargeProjectile_HasStashedCharge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ChargeProjectile_HasStashedCharge) == 0x000001, "Wrong alignment on MarinerAbility_ChargeProjectile_HasStashedCharge");
static_assert(sizeof(MarinerAbility_ChargeProjectile_HasStashedCharge) == 0x000001, "Wrong size on MarinerAbility_ChargeProjectile_HasStashedCharge");
static_assert(offsetof(MarinerAbility_ChargeProjectile_HasStashedCharge, ReturnValue) == 0x000000, "Member 'MarinerAbility_ChargeProjectile_HasStashedCharge::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.ActivateMenuSequence
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuManager_ActivateMenuSequence final
{
public:
	TSubclassOf<class UMarinerMenuSequence>       MenuSequence;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerMenuSequence*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_ActivateMenuSequence) == 0x000008, "Wrong alignment on MarinerMenuManager_ActivateMenuSequence");
static_assert(sizeof(MarinerMenuManager_ActivateMenuSequence) == 0x000010, "Wrong size on MarinerMenuManager_ActivateMenuSequence");
static_assert(offsetof(MarinerMenuManager_ActivateMenuSequence, MenuSequence) == 0x000000, "Member 'MarinerMenuManager_ActivateMenuSequence::MenuSequence' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_ActivateMenuSequence, ReturnValue) == 0x000008, "Member 'MarinerMenuManager_ActivateMenuSequence::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.ActivateRootLayer
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuManager_ActivateRootLayer final
{
public:
	TSubclassOf<class UMarinerMenuStackLayer>     Layer;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuManager_ActivateRootLayer) == 0x000008, "Wrong alignment on MarinerMenuManager_ActivateRootLayer");
static_assert(sizeof(MarinerMenuManager_ActivateRootLayer) == 0x000010, "Wrong size on MarinerMenuManager_ActivateRootLayer");
static_assert(offsetof(MarinerMenuManager_ActivateRootLayer, Layer) == 0x000000, "Member 'MarinerMenuManager_ActivateRootLayer::Layer' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_ActivateRootLayer, ReturnValue) == 0x000008, "Member 'MarinerMenuManager_ActivateRootLayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.ActivateStackManager
// 0x0018 (0x0018 - 0x0000)
struct MarinerMenuManager_ActivateStackManager final
{
public:
	TSubclassOf<class UMarinerMenuStackManager>   StackManager;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerIDTag>              StackIDTag;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitBehavior;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152B[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuManager_ActivateStackManager) == 0x000008, "Wrong alignment on MarinerMenuManager_ActivateStackManager");
static_assert(sizeof(MarinerMenuManager_ActivateStackManager) == 0x000018, "Wrong size on MarinerMenuManager_ActivateStackManager");
static_assert(offsetof(MarinerMenuManager_ActivateStackManager, StackManager) == 0x000000, "Member 'MarinerMenuManager_ActivateStackManager::StackManager' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_ActivateStackManager, StackIDTag) == 0x000008, "Member 'MarinerMenuManager_ActivateStackManager::StackIDTag' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_ActivateStackManager, bInitBehavior) == 0x000010, "Member 'MarinerMenuManager_ActivateStackManager::bInitBehavior' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_ActivateStackManager, ReturnValue) == 0x000011, "Member 'MarinerMenuManager_ActivateStackManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.DeactivateRootLayer
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuManager_DeactivateRootLayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_DeactivateRootLayer) == 0x000001, "Wrong alignment on MarinerMenuManager_DeactivateRootLayer");
static_assert(sizeof(MarinerMenuManager_DeactivateRootLayer) == 0x000001, "Wrong size on MarinerMenuManager_DeactivateRootLayer");
static_assert(offsetof(MarinerMenuManager_DeactivateRootLayer, ReturnValue) == 0x000000, "Member 'MarinerMenuManager_DeactivateRootLayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.DeactivateStackManager
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuManager_DeactivateStackManager final
{
public:
	TSubclassOf<class UMarinerMenuStackManager>   StackManager;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuManager_DeactivateStackManager) == 0x000008, "Wrong alignment on MarinerMenuManager_DeactivateStackManager");
static_assert(sizeof(MarinerMenuManager_DeactivateStackManager) == 0x000010, "Wrong size on MarinerMenuManager_DeactivateStackManager");
static_assert(offsetof(MarinerMenuManager_DeactivateStackManager, StackManager) == 0x000000, "Member 'MarinerMenuManager_DeactivateStackManager::StackManager' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_DeactivateStackManager, ReturnValue) == 0x000008, "Member 'MarinerMenuManager_DeactivateStackManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.GetActiveOrPendingRootLayer
// 0x0008 (0x0008 - 0x0000)
struct MarinerMenuManager_GetActiveOrPendingRootLayer final
{
public:
	class UMarinerMenuStackLayer*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_GetActiveOrPendingRootLayer) == 0x000008, "Wrong alignment on MarinerMenuManager_GetActiveOrPendingRootLayer");
static_assert(sizeof(MarinerMenuManager_GetActiveOrPendingRootLayer) == 0x000008, "Wrong size on MarinerMenuManager_GetActiveOrPendingRootLayer");
static_assert(offsetof(MarinerMenuManager_GetActiveOrPendingRootLayer, ReturnValue) == 0x000000, "Member 'MarinerMenuManager_GetActiveOrPendingRootLayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.GetActiveRootLayer
// 0x0008 (0x0008 - 0x0000)
struct MarinerMenuManager_GetActiveRootLayer final
{
public:
	class UMarinerMenuStackLayer*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_GetActiveRootLayer) == 0x000008, "Wrong alignment on MarinerMenuManager_GetActiveRootLayer");
static_assert(sizeof(MarinerMenuManager_GetActiveRootLayer) == 0x000008, "Wrong size on MarinerMenuManager_GetActiveRootLayer");
static_assert(offsetof(MarinerMenuManager_GetActiveRootLayer, ReturnValue) == 0x000000, "Member 'MarinerMenuManager_GetActiveRootLayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.GetPendingRootLayer
// 0x0008 (0x0008 - 0x0000)
struct MarinerMenuManager_GetPendingRootLayer final
{
public:
	class UMarinerMenuStackLayer*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_GetPendingRootLayer) == 0x000008, "Wrong alignment on MarinerMenuManager_GetPendingRootLayer");
static_assert(sizeof(MarinerMenuManager_GetPendingRootLayer) == 0x000008, "Wrong size on MarinerMenuManager_GetPendingRootLayer");
static_assert(offsetof(MarinerMenuManager_GetPendingRootLayer, ReturnValue) == 0x000000, "Member 'MarinerMenuManager_GetPendingRootLayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.GetWidgetPool
// 0x0008 (0x0008 - 0x0000)
struct MarinerMenuManager_GetWidgetPool final
{
public:
	class UMarinerWidgetPool*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_GetWidgetPool) == 0x000008, "Wrong alignment on MarinerMenuManager_GetWidgetPool");
static_assert(sizeof(MarinerMenuManager_GetWidgetPool) == 0x000008, "Wrong size on MarinerMenuManager_GetWidgetPool");
static_assert(offsetof(MarinerMenuManager_GetWidgetPool, ReturnValue) == 0x000000, "Member 'MarinerMenuManager_GetWidgetPool::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.JumpToEndOnMenuSequence
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuManager_JumpToEndOnMenuSequence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_JumpToEndOnMenuSequence) == 0x000001, "Wrong alignment on MarinerMenuManager_JumpToEndOnMenuSequence");
static_assert(sizeof(MarinerMenuManager_JumpToEndOnMenuSequence) == 0x000001, "Wrong size on MarinerMenuManager_JumpToEndOnMenuSequence");
static_assert(offsetof(MarinerMenuManager_JumpToEndOnMenuSequence, ReturnValue) == 0x000000, "Member 'MarinerMenuManager_JumpToEndOnMenuSequence::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.JumpToStepOnMenuSequence
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuManager_JumpToStepOnMenuSequence final
{
public:
	TSubclassOf<class UMarinerMenuStackLayer>     Layer;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuManager_JumpToStepOnMenuSequence) == 0x000008, "Wrong alignment on MarinerMenuManager_JumpToStepOnMenuSequence");
static_assert(sizeof(MarinerMenuManager_JumpToStepOnMenuSequence) == 0x000010, "Wrong size on MarinerMenuManager_JumpToStepOnMenuSequence");
static_assert(offsetof(MarinerMenuManager_JumpToStepOnMenuSequence, Layer) == 0x000000, "Member 'MarinerMenuManager_JumpToStepOnMenuSequence::Layer' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_JumpToStepOnMenuSequence, ReturnValue) == 0x000008, "Member 'MarinerMenuManager_JumpToStepOnMenuSequence::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.OnPopulateRootLayer
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuManager_OnPopulateRootLayer final
{
public:
	class UMarinerAnimatedWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuManager_OnPopulateRootLayer) == 0x000008, "Wrong alignment on MarinerMenuManager_OnPopulateRootLayer");
static_assert(sizeof(MarinerMenuManager_OnPopulateRootLayer) == 0x000010, "Wrong size on MarinerMenuManager_OnPopulateRootLayer");
static_assert(offsetof(MarinerMenuManager_OnPopulateRootLayer, Widget) == 0x000000, "Member 'MarinerMenuManager_OnPopulateRootLayer::Widget' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_OnPopulateRootLayer, ReturnValue) == 0x000008, "Member 'MarinerMenuManager_OnPopulateRootLayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.PopLayerFromActiveStack
// 0x0008 (0x0008 - 0x0000)
struct MarinerMenuManager_PopLayerFromActiveStack final
{
public:
	class UMarinerMenuStackLayer*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_PopLayerFromActiveStack) == 0x000008, "Wrong alignment on MarinerMenuManager_PopLayerFromActiveStack");
static_assert(sizeof(MarinerMenuManager_PopLayerFromActiveStack) == 0x000008, "Wrong size on MarinerMenuManager_PopLayerFromActiveStack");
static_assert(offsetof(MarinerMenuManager_PopLayerFromActiveStack, ReturnValue) == 0x000000, "Member 'MarinerMenuManager_PopLayerFromActiveStack::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.PopToLayerOnActiveStack
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuManager_PopToLayerOnActiveStack final
{
public:
	TSubclassOf<class UMarinerMenuStackLayer>     Layer;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuManager_PopToLayerOnActiveStack) == 0x000008, "Wrong alignment on MarinerMenuManager_PopToLayerOnActiveStack");
static_assert(sizeof(MarinerMenuManager_PopToLayerOnActiveStack) == 0x000010, "Wrong size on MarinerMenuManager_PopToLayerOnActiveStack");
static_assert(offsetof(MarinerMenuManager_PopToLayerOnActiveStack, Layer) == 0x000000, "Member 'MarinerMenuManager_PopToLayerOnActiveStack::Layer' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_PopToLayerOnActiveStack, ReturnValue) == 0x000008, "Member 'MarinerMenuManager_PopToLayerOnActiveStack::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.PushLayerToActiveStack
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuManager_PushLayerToActiveStack final
{
public:
	TSubclassOf<class UMarinerMenuStackLayer>     Layer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerMenuStackLayer*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_PushLayerToActiveStack) == 0x000008, "Wrong alignment on MarinerMenuManager_PushLayerToActiveStack");
static_assert(sizeof(MarinerMenuManager_PushLayerToActiveStack) == 0x000010, "Wrong size on MarinerMenuManager_PushLayerToActiveStack");
static_assert(offsetof(MarinerMenuManager_PushLayerToActiveStack, Layer) == 0x000000, "Member 'MarinerMenuManager_PushLayerToActiveStack::Layer' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_PushLayerToActiveStack, ReturnValue) == 0x000008, "Member 'MarinerMenuManager_PushLayerToActiveStack::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.SetPlayerHeaderIsOnGameTabs
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuManager_SetPlayerHeaderIsOnGameTabs final
{
public:
	bool                                          bGameTabs;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_SetPlayerHeaderIsOnGameTabs) == 0x000001, "Wrong alignment on MarinerMenuManager_SetPlayerHeaderIsOnGameTabs");
static_assert(sizeof(MarinerMenuManager_SetPlayerHeaderIsOnGameTabs) == 0x000001, "Wrong size on MarinerMenuManager_SetPlayerHeaderIsOnGameTabs");
static_assert(offsetof(MarinerMenuManager_SetPlayerHeaderIsOnGameTabs, bGameTabs) == 0x000000, "Member 'MarinerMenuManager_SetPlayerHeaderIsOnGameTabs::bGameTabs' has a wrong offset!");

// Function Mariner.MarinerMenuManager.ShowStackManagerStack
// 0x0018 (0x0018 - 0x0000)
struct MarinerMenuManager_ShowStackManagerStack final
{
public:
	TSubclassOf<class UMarinerMenuStackManager>   StackManager;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerIDTag>              IDTag;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1530[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuManager_ShowStackManagerStack) == 0x000008, "Wrong alignment on MarinerMenuManager_ShowStackManagerStack");
static_assert(sizeof(MarinerMenuManager_ShowStackManagerStack) == 0x000018, "Wrong size on MarinerMenuManager_ShowStackManagerStack");
static_assert(offsetof(MarinerMenuManager_ShowStackManagerStack, StackManager) == 0x000000, "Member 'MarinerMenuManager_ShowStackManagerStack::StackManager' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_ShowStackManagerStack, IDTag) == 0x000008, "Member 'MarinerMenuManager_ShowStackManagerStack::IDTag' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_ShowStackManagerStack, bVisible) == 0x000010, "Member 'MarinerMenuManager_ShowStackManagerStack::bVisible' has a wrong offset!");

// Function Mariner.MarinerMenuManager.ShowStackManagerStackGlobal
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuManager_ShowStackManagerStackGlobal final
{
public:
	TSubclassOf<class UMarinerIDTag>              IDTag;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1531[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuManager_ShowStackManagerStackGlobal) == 0x000008, "Wrong alignment on MarinerMenuManager_ShowStackManagerStackGlobal");
static_assert(sizeof(MarinerMenuManager_ShowStackManagerStackGlobal) == 0x000010, "Wrong size on MarinerMenuManager_ShowStackManagerStackGlobal");
static_assert(offsetof(MarinerMenuManager_ShowStackManagerStackGlobal, IDTag) == 0x000000, "Member 'MarinerMenuManager_ShowStackManagerStackGlobal::IDTag' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_ShowStackManagerStackGlobal, bVisible) == 0x000008, "Member 'MarinerMenuManager_ShowStackManagerStackGlobal::bVisible' has a wrong offset!");

// Function Mariner.MarinerMenuManager.SwitchToStackManagerStack
// 0x0018 (0x0018 - 0x0000)
struct MarinerMenuManager_SwitchToStackManagerStack final
{
public:
	TSubclassOf<class UMarinerMenuStackManager>   StackManager;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerIDTag>              IDTag;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetAsRootLayer;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1532[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuManager_SwitchToStackManagerStack) == 0x000008, "Wrong alignment on MarinerMenuManager_SwitchToStackManagerStack");
static_assert(sizeof(MarinerMenuManager_SwitchToStackManagerStack) == 0x000018, "Wrong size on MarinerMenuManager_SwitchToStackManagerStack");
static_assert(offsetof(MarinerMenuManager_SwitchToStackManagerStack, StackManager) == 0x000000, "Member 'MarinerMenuManager_SwitchToStackManagerStack::StackManager' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_SwitchToStackManagerStack, IDTag) == 0x000008, "Member 'MarinerMenuManager_SwitchToStackManagerStack::IDTag' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_SwitchToStackManagerStack, bSetAsRootLayer) == 0x000010, "Member 'MarinerMenuManager_SwitchToStackManagerStack::bSetAsRootLayer' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_SwitchToStackManagerStack, ReturnValue) == 0x000011, "Member 'MarinerMenuManager_SwitchToStackManagerStack::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.SwitchToStackManagerStackAndPush
// 0x0028 (0x0028 - 0x0000)
struct MarinerMenuManager_SwitchToStackManagerStackAndPush final
{
public:
	TSubclassOf<class UMarinerMenuStackManager>   StackManager;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerIDTag>              IDTag;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UMarinerMenuStackLayer>> LayerStack;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bSetAsRootLayer;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInitBehavior;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1533[0x5];                                     // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuManager_SwitchToStackManagerStackAndPush) == 0x000008, "Wrong alignment on MarinerMenuManager_SwitchToStackManagerStackAndPush");
static_assert(sizeof(MarinerMenuManager_SwitchToStackManagerStackAndPush) == 0x000028, "Wrong size on MarinerMenuManager_SwitchToStackManagerStackAndPush");
static_assert(offsetof(MarinerMenuManager_SwitchToStackManagerStackAndPush, StackManager) == 0x000000, "Member 'MarinerMenuManager_SwitchToStackManagerStackAndPush::StackManager' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_SwitchToStackManagerStackAndPush, IDTag) == 0x000008, "Member 'MarinerMenuManager_SwitchToStackManagerStackAndPush::IDTag' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_SwitchToStackManagerStackAndPush, LayerStack) == 0x000010, "Member 'MarinerMenuManager_SwitchToStackManagerStackAndPush::LayerStack' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_SwitchToStackManagerStackAndPush, bSetAsRootLayer) == 0x000020, "Member 'MarinerMenuManager_SwitchToStackManagerStackAndPush::bSetAsRootLayer' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_SwitchToStackManagerStackAndPush, bUseInitBehavior) == 0x000021, "Member 'MarinerMenuManager_SwitchToStackManagerStackAndPush::bUseInitBehavior' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_SwitchToStackManagerStackAndPush, ReturnValue) == 0x000022, "Member 'MarinerMenuManager_SwitchToStackManagerStackAndPush::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.GetActiveInputType
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuManager_GetActiveInputType final
{
public:
	EPlayerInputType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_GetActiveInputType) == 0x000001, "Wrong alignment on MarinerMenuManager_GetActiveInputType");
static_assert(sizeof(MarinerMenuManager_GetActiveInputType) == 0x000001, "Wrong size on MarinerMenuManager_GetActiveInputType");
static_assert(offsetof(MarinerMenuManager_GetActiveInputType, ReturnValue) == 0x000000, "Member 'MarinerMenuManager_GetActiveInputType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.GetActiveSequence
// 0x0008 (0x0008 - 0x0000)
struct MarinerMenuManager_GetActiveSequence final
{
public:
	class UMarinerMenuSequence*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_GetActiveSequence) == 0x000008, "Wrong alignment on MarinerMenuManager_GetActiveSequence");
static_assert(sizeof(MarinerMenuManager_GetActiveSequence) == 0x000008, "Wrong size on MarinerMenuManager_GetActiveSequence");
static_assert(offsetof(MarinerMenuManager_GetActiveSequence, ReturnValue) == 0x000000, "Member 'MarinerMenuManager_GetActiveSequence::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.GetCustomBackground
// 0x0008 (0x0008 - 0x0000)
struct MarinerMenuManager_GetCustomBackground final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_GetCustomBackground) == 0x000008, "Wrong alignment on MarinerMenuManager_GetCustomBackground");
static_assert(sizeof(MarinerMenuManager_GetCustomBackground) == 0x000008, "Wrong size on MarinerMenuManager_GetCustomBackground");
static_assert(offsetof(MarinerMenuManager_GetCustomBackground, ReturnValue) == 0x000000, "Member 'MarinerMenuManager_GetCustomBackground::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.GetLayer
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuManager_GetLayer final
{
public:
	class FName                                   LayerName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerMenuStackLayer*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_GetLayer) == 0x000008, "Wrong alignment on MarinerMenuManager_GetLayer");
static_assert(sizeof(MarinerMenuManager_GetLayer) == 0x000010, "Wrong size on MarinerMenuManager_GetLayer");
static_assert(offsetof(MarinerMenuManager_GetLayer, LayerName) == 0x000000, "Member 'MarinerMenuManager_GetLayer::LayerName' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_GetLayer, ReturnValue) == 0x000008, "Member 'MarinerMenuManager_GetLayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.GetLayerByClass
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuManager_GetLayerByClass final
{
public:
	TSubclassOf<class UMarinerMenuStackLayer>     Layer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerMenuStackLayer*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_GetLayerByClass) == 0x000008, "Wrong alignment on MarinerMenuManager_GetLayerByClass");
static_assert(sizeof(MarinerMenuManager_GetLayerByClass) == 0x000010, "Wrong size on MarinerMenuManager_GetLayerByClass");
static_assert(offsetof(MarinerMenuManager_GetLayerByClass, Layer) == 0x000000, "Member 'MarinerMenuManager_GetLayerByClass::Layer' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_GetLayerByClass, ReturnValue) == 0x000008, "Member 'MarinerMenuManager_GetLayerByClass::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.HasActiveOrPendingRootLayer
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuManager_HasActiveOrPendingRootLayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_HasActiveOrPendingRootLayer) == 0x000001, "Wrong alignment on MarinerMenuManager_HasActiveOrPendingRootLayer");
static_assert(sizeof(MarinerMenuManager_HasActiveOrPendingRootLayer) == 0x000001, "Wrong size on MarinerMenuManager_HasActiveOrPendingRootLayer");
static_assert(offsetof(MarinerMenuManager_HasActiveOrPendingRootLayer, ReturnValue) == 0x000000, "Member 'MarinerMenuManager_HasActiveOrPendingRootLayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.IsGamepadConnected
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuManager_IsGamepadConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuManager_IsGamepadConnected) == 0x000001, "Wrong alignment on MarinerMenuManager_IsGamepadConnected");
static_assert(sizeof(MarinerMenuManager_IsGamepadConnected) == 0x000001, "Wrong size on MarinerMenuManager_IsGamepadConnected");
static_assert(offsetof(MarinerMenuManager_IsGamepadConnected, ReturnValue) == 0x000000, "Member 'MarinerMenuManager_IsGamepadConnected::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.IsLayerPushed
// 0x0018 (0x0018 - 0x0000)
struct MarinerMenuManager_IsLayerPushed final
{
public:
	TSubclassOf<class UMarinerMenuStackManager>   StackManager;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerMenuStackLayer>     Layer;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1534[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuManager_IsLayerPushed) == 0x000008, "Wrong alignment on MarinerMenuManager_IsLayerPushed");
static_assert(sizeof(MarinerMenuManager_IsLayerPushed) == 0x000018, "Wrong size on MarinerMenuManager_IsLayerPushed");
static_assert(offsetof(MarinerMenuManager_IsLayerPushed, StackManager) == 0x000000, "Member 'MarinerMenuManager_IsLayerPushed::StackManager' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_IsLayerPushed, Layer) == 0x000008, "Member 'MarinerMenuManager_IsLayerPushed::Layer' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_IsLayerPushed, ReturnValue) == 0x000010, "Member 'MarinerMenuManager_IsLayerPushed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.IsStackManagerActive
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuManager_IsStackManagerActive final
{
public:
	TSubclassOf<class UMarinerMenuStackManager>   StackManager;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1535[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuManager_IsStackManagerActive) == 0x000008, "Wrong alignment on MarinerMenuManager_IsStackManagerActive");
static_assert(sizeof(MarinerMenuManager_IsStackManagerActive) == 0x000010, "Wrong size on MarinerMenuManager_IsStackManagerActive");
static_assert(offsetof(MarinerMenuManager_IsStackManagerActive, StackManager) == 0x000000, "Member 'MarinerMenuManager_IsStackManagerActive::StackManager' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_IsStackManagerActive, ReturnValue) == 0x000008, "Member 'MarinerMenuManager_IsStackManagerActive::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuManager.IsStackManagerStackDisplaying
// 0x0018 (0x0018 - 0x0000)
struct MarinerMenuManager_IsStackManagerStackDisplaying final
{
public:
	TSubclassOf<class UMarinerMenuStackManager>   StackManager;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerIDTag>              IDTag;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1536[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuManager_IsStackManagerStackDisplaying) == 0x000008, "Wrong alignment on MarinerMenuManager_IsStackManagerStackDisplaying");
static_assert(sizeof(MarinerMenuManager_IsStackManagerStackDisplaying) == 0x000018, "Wrong size on MarinerMenuManager_IsStackManagerStackDisplaying");
static_assert(offsetof(MarinerMenuManager_IsStackManagerStackDisplaying, StackManager) == 0x000000, "Member 'MarinerMenuManager_IsStackManagerStackDisplaying::StackManager' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_IsStackManagerStackDisplaying, IDTag) == 0x000008, "Member 'MarinerMenuManager_IsStackManagerStackDisplaying::IDTag' has a wrong offset!");
static_assert(offsetof(MarinerMenuManager_IsStackManagerStackDisplaying, ReturnValue) == 0x000010, "Member 'MarinerMenuManager_IsStackManagerStackDisplaying::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_MultiProjectile.BP_OnAllProjectilesFinishedSpawning
// 0x0050 (0x0050 - 0x0000)
struct MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AMarinerProjectile*>             SpawnedProjectile;                                 // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning) == 0x000008, "Wrong alignment on MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning");
static_assert(sizeof(MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning) == 0x000050, "Wrong size on MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning");
static_assert(offsetof(MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning, ActorInfo) == 0x000000, "Member 'MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning::ActorInfo' has a wrong offset!");
static_assert(offsetof(MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning, SpawnedProjectile) == 0x000040, "Member 'MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning::SpawnedProjectile' has a wrong offset!");

// Function Mariner.MarinerAbility_MultiProjectile.BP_OnAllProjectilesFinishedSpawning_Authority
// 0x0050 (0x0050 - 0x0000)
struct MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning_Authority final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AMarinerProjectile*>             SpawnedProjectile;                                 // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning_Authority) == 0x000008, "Wrong alignment on MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning_Authority");
static_assert(sizeof(MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning_Authority) == 0x000050, "Wrong size on MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning_Authority");
static_assert(offsetof(MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning_Authority, ActorInfo) == 0x000000, "Member 'MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning_Authority::ActorInfo' has a wrong offset!");
static_assert(offsetof(MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning_Authority, SpawnedProjectile) == 0x000040, "Member 'MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning_Authority::SpawnedProjectile' has a wrong offset!");

// Function Mariner.MarinerAbility_MultiProjectile.BP_OnProjectileDestroyed_Authority
// 0x0040 (0x0040 - 0x0000)
struct MarinerAbility_MultiProjectile_BP_OnProjectileDestroyed_Authority final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_MultiProjectile_BP_OnProjectileDestroyed_Authority) == 0x000008, "Wrong alignment on MarinerAbility_MultiProjectile_BP_OnProjectileDestroyed_Authority");
static_assert(sizeof(MarinerAbility_MultiProjectile_BP_OnProjectileDestroyed_Authority) == 0x000040, "Wrong size on MarinerAbility_MultiProjectile_BP_OnProjectileDestroyed_Authority");
static_assert(offsetof(MarinerAbility_MultiProjectile_BP_OnProjectileDestroyed_Authority, ActorInfo) == 0x000000, "Member 'MarinerAbility_MultiProjectile_BP_OnProjectileDestroyed_Authority::ActorInfo' has a wrong offset!");

// Function Mariner.MarinerAbility_MultiProjectile.GetAllProjectileSpreads
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_MultiProjectile_GetAllProjectileSpreads final
{
public:
	TArray<TSubclassOf<class UMarinerProjectileSpread>> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_MultiProjectile_GetAllProjectileSpreads) == 0x000008, "Wrong alignment on MarinerAbility_MultiProjectile_GetAllProjectileSpreads");
static_assert(sizeof(MarinerAbility_MultiProjectile_GetAllProjectileSpreads) == 0x000010, "Wrong size on MarinerAbility_MultiProjectile_GetAllProjectileSpreads");
static_assert(offsetof(MarinerAbility_MultiProjectile_GetAllProjectileSpreads, ReturnValue) == 0x000000, "Member 'MarinerAbility_MultiProjectile_GetAllProjectileSpreads::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_MultiProjectile.BP_GetMaximumProjectilesSpawned
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_MultiProjectile_BP_GetMaximumProjectilesSpawned final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_MultiProjectile_BP_GetMaximumProjectilesSpawned) == 0x000004, "Wrong alignment on MarinerAbility_MultiProjectile_BP_GetMaximumProjectilesSpawned");
static_assert(sizeof(MarinerAbility_MultiProjectile_BP_GetMaximumProjectilesSpawned) == 0x000004, "Wrong size on MarinerAbility_MultiProjectile_BP_GetMaximumProjectilesSpawned");
static_assert(offsetof(MarinerAbility_MultiProjectile_BP_GetMaximumProjectilesSpawned, ReturnValue) == 0x000000, "Member 'MarinerAbility_MultiProjectile_BP_GetMaximumProjectilesSpawned::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_MultiProjectile.GetProjectileSpreads
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_MultiProjectile_GetProjectileSpreads final
{
public:
	TArray<TSubclassOf<class UMarinerProjectileSpread>> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_MultiProjectile_GetProjectileSpreads) == 0x000008, "Wrong alignment on MarinerAbility_MultiProjectile_GetProjectileSpreads");
static_assert(sizeof(MarinerAbility_MultiProjectile_GetProjectileSpreads) == 0x000010, "Wrong size on MarinerAbility_MultiProjectile_GetProjectileSpreads");
static_assert(offsetof(MarinerAbility_MultiProjectile_GetProjectileSpreads, ReturnValue) == 0x000000, "Member 'MarinerAbility_MultiProjectile_GetProjectileSpreads::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.AddStack
// 0x0038 (0x0038 - 0x0000)
struct MarinerMenuStackManager_AddStack final
{
public:
	TSubclassOf<class UMarinerMenuStackButton>    SourceButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ButtonText;                                        // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerMenuStackLayer>     StartingLayer;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitiallyVisible;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizAlign;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VertAlign;                                         // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1544[0x5];                                     // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerMenuStackButton*                ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackManager_AddStack) == 0x000008, "Wrong alignment on MarinerMenuStackManager_AddStack");
static_assert(sizeof(MarinerMenuStackManager_AddStack) == 0x000038, "Wrong size on MarinerMenuStackManager_AddStack");
static_assert(offsetof(MarinerMenuStackManager_AddStack, SourceButton) == 0x000000, "Member 'MarinerMenuStackManager_AddStack::SourceButton' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_AddStack, ButtonText) == 0x000008, "Member 'MarinerMenuStackManager_AddStack::ButtonText' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_AddStack, StartingLayer) == 0x000020, "Member 'MarinerMenuStackManager_AddStack::StartingLayer' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_AddStack, bInitiallyVisible) == 0x000028, "Member 'MarinerMenuStackManager_AddStack::bInitiallyVisible' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_AddStack, HorizAlign) == 0x000029, "Member 'MarinerMenuStackManager_AddStack::HorizAlign' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_AddStack, VertAlign) == 0x00002A, "Member 'MarinerMenuStackManager_AddStack::VertAlign' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_AddStack, ReturnValue) == 0x000030, "Member 'MarinerMenuStackManager_AddStack::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.Init
// 0x0028 (0x0028 - 0x0000)
struct MarinerMenuStackManager_Init final
{
public:
	struct FMarinerMenuStackManagerSetup          StackManagerSetup;                                 // 0x0000(0x0028)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackManager_Init) == 0x000008, "Wrong alignment on MarinerMenuStackManager_Init");
static_assert(sizeof(MarinerMenuStackManager_Init) == 0x000028, "Wrong size on MarinerMenuStackManager_Init");
static_assert(offsetof(MarinerMenuStackManager_Init, StackManagerSetup) == 0x000000, "Member 'MarinerMenuStackManager_Init::StackManagerSetup' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.IsVisibleFromIDTag
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_IsVisibleFromIDTag final
{
public:
	TSubclassOf<class UMarinerIDTag>              IDTag;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1545[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_IsVisibleFromIDTag) == 0x000008, "Wrong alignment on MarinerMenuStackManager_IsVisibleFromIDTag");
static_assert(sizeof(MarinerMenuStackManager_IsVisibleFromIDTag) == 0x000010, "Wrong size on MarinerMenuStackManager_IsVisibleFromIDTag");
static_assert(offsetof(MarinerMenuStackManager_IsVisibleFromIDTag, IDTag) == 0x000000, "Member 'MarinerMenuStackManager_IsVisibleFromIDTag::IDTag' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_IsVisibleFromIDTag, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_IsVisibleFromIDTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.IsVisibleFromInstance
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_IsVisibleFromInstance final
{
public:
	const class UMarinerMenuStackButton*          SourceButton;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1546[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_IsVisibleFromInstance) == 0x000008, "Wrong alignment on MarinerMenuStackManager_IsVisibleFromInstance");
static_assert(sizeof(MarinerMenuStackManager_IsVisibleFromInstance) == 0x000010, "Wrong size on MarinerMenuStackManager_IsVisibleFromInstance");
static_assert(offsetof(MarinerMenuStackManager_IsVisibleFromInstance, SourceButton) == 0x000000, "Member 'MarinerMenuStackManager_IsVisibleFromInstance::SourceButton' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_IsVisibleFromInstance, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_IsVisibleFromInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.OnContentAnimationStateChanged
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_OnContentAnimationStateChanged final
{
public:
	class UMarinerAnimatedWidget*                 Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetAnimationState                         NewState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1547[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_OnContentAnimationStateChanged) == 0x000008, "Wrong alignment on MarinerMenuStackManager_OnContentAnimationStateChanged");
static_assert(sizeof(MarinerMenuStackManager_OnContentAnimationStateChanged) == 0x000010, "Wrong size on MarinerMenuStackManager_OnContentAnimationStateChanged");
static_assert(offsetof(MarinerMenuStackManager_OnContentAnimationStateChanged, Instance) == 0x000000, "Member 'MarinerMenuStackManager_OnContentAnimationStateChanged::Instance' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_OnContentAnimationStateChanged, NewState) == 0x000008, "Member 'MarinerMenuStackManager_OnContentAnimationStateChanged::NewState' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.OnContentLayerStateChange
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_OnContentLayerStateChange final
{
public:
	class UMarinerAnimatedWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetAnimationState                         NewState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1548[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_OnContentLayerStateChange) == 0x000008, "Wrong alignment on MarinerMenuStackManager_OnContentLayerStateChange");
static_assert(sizeof(MarinerMenuStackManager_OnContentLayerStateChange) == 0x000010, "Wrong size on MarinerMenuStackManager_OnContentLayerStateChange");
static_assert(offsetof(MarinerMenuStackManager_OnContentLayerStateChange, Widget) == 0x000000, "Member 'MarinerMenuStackManager_OnContentLayerStateChange::Widget' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_OnContentLayerStateChange, NewState) == 0x000008, "Member 'MarinerMenuStackManager_OnContentLayerStateChange::NewState' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.OnOverlayLayerStateChange
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_OnOverlayLayerStateChange final
{
public:
	class UMarinerAnimatedWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetAnimationState                         NewState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1549[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_OnOverlayLayerStateChange) == 0x000008, "Wrong alignment on MarinerMenuStackManager_OnOverlayLayerStateChange");
static_assert(sizeof(MarinerMenuStackManager_OnOverlayLayerStateChange) == 0x000010, "Wrong size on MarinerMenuStackManager_OnOverlayLayerStateChange");
static_assert(offsetof(MarinerMenuStackManager_OnOverlayLayerStateChange, Widget) == 0x000000, "Member 'MarinerMenuStackManager_OnOverlayLayerStateChange::Widget' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_OnOverlayLayerStateChange, NewState) == 0x000008, "Member 'MarinerMenuStackManager_OnOverlayLayerStateChange::NewState' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.OnPopulateContentLayer
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_OnPopulateContentLayer final
{
public:
	class UMarinerAnimatedWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_OnPopulateContentLayer) == 0x000008, "Wrong alignment on MarinerMenuStackManager_OnPopulateContentLayer");
static_assert(sizeof(MarinerMenuStackManager_OnPopulateContentLayer) == 0x000010, "Wrong size on MarinerMenuStackManager_OnPopulateContentLayer");
static_assert(offsetof(MarinerMenuStackManager_OnPopulateContentLayer, Widget) == 0x000000, "Member 'MarinerMenuStackManager_OnPopulateContentLayer::Widget' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_OnPopulateContentLayer, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_OnPopulateContentLayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.OnPopulateOverlayLayer
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_OnPopulateOverlayLayer final
{
public:
	class UMarinerAnimatedWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_OnPopulateOverlayLayer) == 0x000008, "Wrong alignment on MarinerMenuStackManager_OnPopulateOverlayLayer");
static_assert(sizeof(MarinerMenuStackManager_OnPopulateOverlayLayer) == 0x000010, "Wrong size on MarinerMenuStackManager_OnPopulateOverlayLayer");
static_assert(offsetof(MarinerMenuStackManager_OnPopulateOverlayLayer, Widget) == 0x000000, "Member 'MarinerMenuStackManager_OnPopulateOverlayLayer::Widget' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_OnPopulateOverlayLayer, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_OnPopulateOverlayLayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.PopAllFromActiveStack
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackManager_PopAllFromActiveStack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackManager_PopAllFromActiveStack) == 0x000001, "Wrong alignment on MarinerMenuStackManager_PopAllFromActiveStack");
static_assert(sizeof(MarinerMenuStackManager_PopAllFromActiveStack) == 0x000001, "Wrong size on MarinerMenuStackManager_PopAllFromActiveStack");
static_assert(offsetof(MarinerMenuStackManager_PopAllFromActiveStack, ReturnValue) == 0x000000, "Member 'MarinerMenuStackManager_PopAllFromActiveStack::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.PopFromActiveStack
// 0x0008 (0x0008 - 0x0000)
struct MarinerMenuStackManager_PopFromActiveStack final
{
public:
	class UMarinerMenuStackLayer*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackManager_PopFromActiveStack) == 0x000008, "Wrong alignment on MarinerMenuStackManager_PopFromActiveStack");
static_assert(sizeof(MarinerMenuStackManager_PopFromActiveStack) == 0x000008, "Wrong size on MarinerMenuStackManager_PopFromActiveStack");
static_assert(offsetof(MarinerMenuStackManager_PopFromActiveStack, ReturnValue) == 0x000000, "Member 'MarinerMenuStackManager_PopFromActiveStack::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.PopToLayerOnActiveStack
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_PopToLayerOnActiveStack final
{
public:
	class UMarinerMenuStackLayer*                 Layer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_PopToLayerOnActiveStack) == 0x000008, "Wrong alignment on MarinerMenuStackManager_PopToLayerOnActiveStack");
static_assert(sizeof(MarinerMenuStackManager_PopToLayerOnActiveStack) == 0x000010, "Wrong size on MarinerMenuStackManager_PopToLayerOnActiveStack");
static_assert(offsetof(MarinerMenuStackManager_PopToLayerOnActiveStack, Layer) == 0x000000, "Member 'MarinerMenuStackManager_PopToLayerOnActiveStack::Layer' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_PopToLayerOnActiveStack, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_PopToLayerOnActiveStack::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.PopToRootFromActiveStack
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackManager_PopToRootFromActiveStack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackManager_PopToRootFromActiveStack) == 0x000001, "Wrong alignment on MarinerMenuStackManager_PopToRootFromActiveStack");
static_assert(sizeof(MarinerMenuStackManager_PopToRootFromActiveStack) == 0x000001, "Wrong size on MarinerMenuStackManager_PopToRootFromActiveStack");
static_assert(offsetof(MarinerMenuStackManager_PopToRootFromActiveStack, ReturnValue) == 0x000000, "Member 'MarinerMenuStackManager_PopToRootFromActiveStack::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.PushToActiveStack
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_PushToActiveStack final
{
public:
	class UMarinerMenuStackLayer*                 Layer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_PushToActiveStack) == 0x000008, "Wrong alignment on MarinerMenuStackManager_PushToActiveStack");
static_assert(sizeof(MarinerMenuStackManager_PushToActiveStack) == 0x000010, "Wrong size on MarinerMenuStackManager_PushToActiveStack");
static_assert(offsetof(MarinerMenuStackManager_PushToActiveStack, Layer) == 0x000000, "Member 'MarinerMenuStackManager_PushToActiveStack::Layer' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_PushToActiveStack, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_PushToActiveStack::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.RemoveStackFromIDTag
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_RemoveStackFromIDTag final
{
public:
	TSubclassOf<class UMarinerIDTag>              IDTag;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_RemoveStackFromIDTag) == 0x000008, "Wrong alignment on MarinerMenuStackManager_RemoveStackFromIDTag");
static_assert(sizeof(MarinerMenuStackManager_RemoveStackFromIDTag) == 0x000010, "Wrong size on MarinerMenuStackManager_RemoveStackFromIDTag");
static_assert(offsetof(MarinerMenuStackManager_RemoveStackFromIDTag, IDTag) == 0x000000, "Member 'MarinerMenuStackManager_RemoveStackFromIDTag::IDTag' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_RemoveStackFromIDTag, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_RemoveStackFromIDTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.RemoveStackFromInstance
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_RemoveStackFromInstance final
{
public:
	class UMarinerMenuStackButton*                SourceButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_RemoveStackFromInstance) == 0x000008, "Wrong alignment on MarinerMenuStackManager_RemoveStackFromInstance");
static_assert(sizeof(MarinerMenuStackManager_RemoveStackFromInstance) == 0x000010, "Wrong size on MarinerMenuStackManager_RemoveStackFromInstance");
static_assert(offsetof(MarinerMenuStackManager_RemoveStackFromInstance, SourceButton) == 0x000000, "Member 'MarinerMenuStackManager_RemoveStackFromInstance::SourceButton' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_RemoveStackFromInstance, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_RemoveStackFromInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.ShowStackFromIDTag
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_ShowStackFromIDTag final
{
public:
	TSubclassOf<class UMarinerIDTag>              IDTag;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1550[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_ShowStackFromIDTag) == 0x000008, "Wrong alignment on MarinerMenuStackManager_ShowStackFromIDTag");
static_assert(sizeof(MarinerMenuStackManager_ShowStackFromIDTag) == 0x000010, "Wrong size on MarinerMenuStackManager_ShowStackFromIDTag");
static_assert(offsetof(MarinerMenuStackManager_ShowStackFromIDTag, IDTag) == 0x000000, "Member 'MarinerMenuStackManager_ShowStackFromIDTag::IDTag' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_ShowStackFromIDTag, bVisible) == 0x000008, "Member 'MarinerMenuStackManager_ShowStackFromIDTag::bVisible' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.ShowStackFromInstance
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_ShowStackFromInstance final
{
public:
	const class UMarinerMenuStackButton*          SourceButton;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1551[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_ShowStackFromInstance) == 0x000008, "Wrong alignment on MarinerMenuStackManager_ShowStackFromInstance");
static_assert(sizeof(MarinerMenuStackManager_ShowStackFromInstance) == 0x000010, "Wrong size on MarinerMenuStackManager_ShowStackFromInstance");
static_assert(offsetof(MarinerMenuStackManager_ShowStackFromInstance, SourceButton) == 0x000000, "Member 'MarinerMenuStackManager_ShowStackFromInstance::SourceButton' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_ShowStackFromInstance, bVisible) == 0x000008, "Member 'MarinerMenuStackManager_ShowStackFromInstance::bVisible' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.SwapStackNext
// 0x0002 (0x0002 - 0x0000)
struct MarinerMenuStackManager_SwapStackNext final
{
public:
	bool                                          bActivateStack;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackManager_SwapStackNext) == 0x000001, "Wrong alignment on MarinerMenuStackManager_SwapStackNext");
static_assert(sizeof(MarinerMenuStackManager_SwapStackNext) == 0x000002, "Wrong size on MarinerMenuStackManager_SwapStackNext");
static_assert(offsetof(MarinerMenuStackManager_SwapStackNext, bActivateStack) == 0x000000, "Member 'MarinerMenuStackManager_SwapStackNext::bActivateStack' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_SwapStackNext, ReturnValue) == 0x000001, "Member 'MarinerMenuStackManager_SwapStackNext::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.SwapStackPrevious
// 0x0002 (0x0002 - 0x0000)
struct MarinerMenuStackManager_SwapStackPrevious final
{
public:
	bool                                          bActivateStack;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackManager_SwapStackPrevious) == 0x000001, "Wrong alignment on MarinerMenuStackManager_SwapStackPrevious");
static_assert(sizeof(MarinerMenuStackManager_SwapStackPrevious) == 0x000002, "Wrong size on MarinerMenuStackManager_SwapStackPrevious");
static_assert(offsetof(MarinerMenuStackManager_SwapStackPrevious, bActivateStack) == 0x000000, "Member 'MarinerMenuStackManager_SwapStackPrevious::bActivateStack' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_SwapStackPrevious, ReturnValue) == 0x000001, "Member 'MarinerMenuStackManager_SwapStackPrevious::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.SwitchToHomeStack
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackManager_SwitchToHomeStack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackManager_SwitchToHomeStack) == 0x000001, "Wrong alignment on MarinerMenuStackManager_SwitchToHomeStack");
static_assert(sizeof(MarinerMenuStackManager_SwitchToHomeStack) == 0x000001, "Wrong size on MarinerMenuStackManager_SwitchToHomeStack");
static_assert(offsetof(MarinerMenuStackManager_SwitchToHomeStack, ReturnValue) == 0x000000, "Member 'MarinerMenuStackManager_SwitchToHomeStack::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.SwitchToStackFromIDTag
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_SwitchToStackFromIDTag final
{
public:
	TSubclassOf<class UMarinerIDTag>              IDTag;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1552[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_SwitchToStackFromIDTag) == 0x000008, "Wrong alignment on MarinerMenuStackManager_SwitchToStackFromIDTag");
static_assert(sizeof(MarinerMenuStackManager_SwitchToStackFromIDTag) == 0x000010, "Wrong size on MarinerMenuStackManager_SwitchToStackFromIDTag");
static_assert(offsetof(MarinerMenuStackManager_SwitchToStackFromIDTag, IDTag) == 0x000000, "Member 'MarinerMenuStackManager_SwitchToStackFromIDTag::IDTag' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_SwitchToStackFromIDTag, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_SwitchToStackFromIDTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.SwitchToStackFromInstance
// 0x0008 (0x0008 - 0x0000)
struct MarinerMenuStackManager_SwitchToStackFromInstance final
{
public:
	const class UMarinerMenuStackButton*          SourceButton;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackManager_SwitchToStackFromInstance) == 0x000008, "Wrong alignment on MarinerMenuStackManager_SwitchToStackFromInstance");
static_assert(sizeof(MarinerMenuStackManager_SwitchToStackFromInstance) == 0x000008, "Wrong size on MarinerMenuStackManager_SwitchToStackFromInstance");
static_assert(offsetof(MarinerMenuStackManager_SwitchToStackFromInstance, SourceButton) == 0x000000, "Member 'MarinerMenuStackManager_SwitchToStackFromInstance::SourceButton' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.GetActiveStackCount
// 0x0004 (0x0004 - 0x0000)
struct MarinerMenuStackManager_GetActiveStackCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackManager_GetActiveStackCount) == 0x000004, "Wrong alignment on MarinerMenuStackManager_GetActiveStackCount");
static_assert(sizeof(MarinerMenuStackManager_GetActiveStackCount) == 0x000004, "Wrong size on MarinerMenuStackManager_GetActiveStackCount");
static_assert(offsetof(MarinerMenuStackManager_GetActiveStackCount, ReturnValue) == 0x000000, "Member 'MarinerMenuStackManager_GetActiveStackCount::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.GetActiveStackTop
// 0x0008 (0x0008 - 0x0000)
struct MarinerMenuStackManager_GetActiveStackTop final
{
public:
	class UMarinerMenuStackLayer*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackManager_GetActiveStackTop) == 0x000008, "Wrong alignment on MarinerMenuStackManager_GetActiveStackTop");
static_assert(sizeof(MarinerMenuStackManager_GetActiveStackTop) == 0x000008, "Wrong size on MarinerMenuStackManager_GetActiveStackTop");
static_assert(offsetof(MarinerMenuStackManager_GetActiveStackTop, ReturnValue) == 0x000000, "Member 'MarinerMenuStackManager_GetActiveStackTop::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.GetStackCountFromIDTag
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_GetStackCountFromIDTag final
{
public:
	TSubclassOf<class UMarinerIDTag>              IDTag;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1553[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_GetStackCountFromIDTag) == 0x000008, "Wrong alignment on MarinerMenuStackManager_GetStackCountFromIDTag");
static_assert(sizeof(MarinerMenuStackManager_GetStackCountFromIDTag) == 0x000010, "Wrong size on MarinerMenuStackManager_GetStackCountFromIDTag");
static_assert(offsetof(MarinerMenuStackManager_GetStackCountFromIDTag, IDTag) == 0x000000, "Member 'MarinerMenuStackManager_GetStackCountFromIDTag::IDTag' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_GetStackCountFromIDTag, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_GetStackCountFromIDTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.GetStackCountFromInstance
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_GetStackCountFromInstance final
{
public:
	class UMarinerMenuStackButton*                SourceButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1554[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_GetStackCountFromInstance) == 0x000008, "Wrong alignment on MarinerMenuStackManager_GetStackCountFromInstance");
static_assert(sizeof(MarinerMenuStackManager_GetStackCountFromInstance) == 0x000010, "Wrong size on MarinerMenuStackManager_GetStackCountFromInstance");
static_assert(offsetof(MarinerMenuStackManager_GetStackCountFromInstance, SourceButton) == 0x000000, "Member 'MarinerMenuStackManager_GetStackCountFromInstance::SourceButton' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_GetStackCountFromInstance, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_GetStackCountFromInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.GetStackIndexFromInstance
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_GetStackIndexFromInstance final
{
public:
	const class UMarinerMenuStackButton*          SourceButton;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1555[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_GetStackIndexFromInstance) == 0x000008, "Wrong alignment on MarinerMenuStackManager_GetStackIndexFromInstance");
static_assert(sizeof(MarinerMenuStackManager_GetStackIndexFromInstance) == 0x000010, "Wrong size on MarinerMenuStackManager_GetStackIndexFromInstance");
static_assert(offsetof(MarinerMenuStackManager_GetStackIndexFromInstance, SourceButton) == 0x000000, "Member 'MarinerMenuStackManager_GetStackIndexFromInstance::SourceButton' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_GetStackIndexFromInstance, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_GetStackIndexFromInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.HasPrompts
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackManager_HasPrompts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackManager_HasPrompts) == 0x000001, "Wrong alignment on MarinerMenuStackManager_HasPrompts");
static_assert(sizeof(MarinerMenuStackManager_HasPrompts) == 0x000001, "Wrong size on MarinerMenuStackManager_HasPrompts");
static_assert(offsetof(MarinerMenuStackManager_HasPrompts, ReturnValue) == 0x000000, "Member 'MarinerMenuStackManager_HasPrompts::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.IsActiveStackDisplaying
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackManager_IsActiveStackDisplaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackManager_IsActiveStackDisplaying) == 0x000001, "Wrong alignment on MarinerMenuStackManager_IsActiveStackDisplaying");
static_assert(sizeof(MarinerMenuStackManager_IsActiveStackDisplaying) == 0x000001, "Wrong size on MarinerMenuStackManager_IsActiveStackDisplaying");
static_assert(offsetof(MarinerMenuStackManager_IsActiveStackDisplaying, ReturnValue) == 0x000000, "Member 'MarinerMenuStackManager_IsActiveStackDisplaying::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.IsActiveStackFromIDTag
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_IsActiveStackFromIDTag final
{
public:
	TSubclassOf<class UMarinerIDTag>              IDTag;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1556[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_IsActiveStackFromIDTag) == 0x000008, "Wrong alignment on MarinerMenuStackManager_IsActiveStackFromIDTag");
static_assert(sizeof(MarinerMenuStackManager_IsActiveStackFromIDTag) == 0x000010, "Wrong size on MarinerMenuStackManager_IsActiveStackFromIDTag");
static_assert(offsetof(MarinerMenuStackManager_IsActiveStackFromIDTag, IDTag) == 0x000000, "Member 'MarinerMenuStackManager_IsActiveStackFromIDTag::IDTag' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_IsActiveStackFromIDTag, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_IsActiveStackFromIDTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.IsActiveStackFromInstance
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_IsActiveStackFromInstance final
{
public:
	class UMarinerMenuStackButton*                SourceButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1557[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_IsActiveStackFromInstance) == 0x000008, "Wrong alignment on MarinerMenuStackManager_IsActiveStackFromInstance");
static_assert(sizeof(MarinerMenuStackManager_IsActiveStackFromInstance) == 0x000010, "Wrong size on MarinerMenuStackManager_IsActiveStackFromInstance");
static_assert(offsetof(MarinerMenuStackManager_IsActiveStackFromInstance, SourceButton) == 0x000000, "Member 'MarinerMenuStackManager_IsActiveStackFromInstance::SourceButton' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_IsActiveStackFromInstance, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_IsActiveStackFromInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.IsCapturingInput
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackManager_IsCapturingInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackManager_IsCapturingInput) == 0x000001, "Wrong alignment on MarinerMenuStackManager_IsCapturingInput");
static_assert(sizeof(MarinerMenuStackManager_IsCapturingInput) == 0x000001, "Wrong size on MarinerMenuStackManager_IsCapturingInput");
static_assert(offsetof(MarinerMenuStackManager_IsCapturingInput, ReturnValue) == 0x000000, "Member 'MarinerMenuStackManager_IsCapturingInput::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.IsStackDisplayingFromIDTag
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_IsStackDisplayingFromIDTag final
{
public:
	TSubclassOf<class UMarinerIDTag>              IDTag;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1558[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_IsStackDisplayingFromIDTag) == 0x000008, "Wrong alignment on MarinerMenuStackManager_IsStackDisplayingFromIDTag");
static_assert(sizeof(MarinerMenuStackManager_IsStackDisplayingFromIDTag) == 0x000010, "Wrong size on MarinerMenuStackManager_IsStackDisplayingFromIDTag");
static_assert(offsetof(MarinerMenuStackManager_IsStackDisplayingFromIDTag, IDTag) == 0x000000, "Member 'MarinerMenuStackManager_IsStackDisplayingFromIDTag::IDTag' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_IsStackDisplayingFromIDTag, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_IsStackDisplayingFromIDTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackManager.IsStackDisplayingFromInstance
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackManager_IsStackDisplayingFromInstance final
{
public:
	class UMarinerMenuStackButton*                SourceButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1559[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackManager_IsStackDisplayingFromInstance) == 0x000008, "Wrong alignment on MarinerMenuStackManager_IsStackDisplayingFromInstance");
static_assert(sizeof(MarinerMenuStackManager_IsStackDisplayingFromInstance) == 0x000010, "Wrong size on MarinerMenuStackManager_IsStackDisplayingFromInstance");
static_assert(offsetof(MarinerMenuStackManager_IsStackDisplayingFromInstance, SourceButton) == 0x000000, "Member 'MarinerMenuStackManager_IsStackDisplayingFromInstance::SourceButton' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackManager_IsStackDisplayingFromInstance, ReturnValue) == 0x000008, "Member 'MarinerMenuStackManager_IsStackDisplayingFromInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_ProjectileBloomingSpread.GetCurrentHalfConeSpreadDegrees
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_ProjectileBloomingSpread_GetCurrentHalfConeSpreadDegrees final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ProjectileBloomingSpread_GetCurrentHalfConeSpreadDegrees) == 0x000004, "Wrong alignment on MarinerAbility_ProjectileBloomingSpread_GetCurrentHalfConeSpreadDegrees");
static_assert(sizeof(MarinerAbility_ProjectileBloomingSpread_GetCurrentHalfConeSpreadDegrees) == 0x000004, "Wrong size on MarinerAbility_ProjectileBloomingSpread_GetCurrentHalfConeSpreadDegrees");
static_assert(offsetof(MarinerAbility_ProjectileBloomingSpread_GetCurrentHalfConeSpreadDegrees, ReturnValue) == 0x000000, "Member 'MarinerAbility_ProjectileBloomingSpread_GetCurrentHalfConeSpreadDegrees::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_ReloadWeapon.AuthorityModifyCurrentAmmo
// 0x0004 (0x0004 - 0x0000)
struct MarinerAbility_ReloadWeapon_AuthorityModifyCurrentAmmo final
{
public:
	int32                                         AmmoDelta;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ReloadWeapon_AuthorityModifyCurrentAmmo) == 0x000004, "Wrong alignment on MarinerAbility_ReloadWeapon_AuthorityModifyCurrentAmmo");
static_assert(sizeof(MarinerAbility_ReloadWeapon_AuthorityModifyCurrentAmmo) == 0x000004, "Wrong size on MarinerAbility_ReloadWeapon_AuthorityModifyCurrentAmmo");
static_assert(offsetof(MarinerAbility_ReloadWeapon_AuthorityModifyCurrentAmmo, AmmoDelta) == 0x000000, "Member 'MarinerAbility_ReloadWeapon_AuthorityModifyCurrentAmmo::AmmoDelta' has a wrong offset!");

// Function Mariner.MarinerAbility_ReloadWeapon.OnAmmoRep
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_ReloadWeapon_OnAmmoRep final
{
public:
	float                                         CurrentAmmo;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxAmmo;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_ReloadWeapon_OnAmmoRep) == 0x000004, "Wrong alignment on MarinerAbility_ReloadWeapon_OnAmmoRep");
static_assert(sizeof(MarinerAbility_ReloadWeapon_OnAmmoRep) == 0x000008, "Wrong size on MarinerAbility_ReloadWeapon_OnAmmoRep");
static_assert(offsetof(MarinerAbility_ReloadWeapon_OnAmmoRep, CurrentAmmo) == 0x000000, "Member 'MarinerAbility_ReloadWeapon_OnAmmoRep::CurrentAmmo' has a wrong offset!");
static_assert(offsetof(MarinerAbility_ReloadWeapon_OnAmmoRep, InMaxAmmo) == 0x000004, "Member 'MarinerAbility_ReloadWeapon_OnAmmoRep::InMaxAmmo' has a wrong offset!");

// Function Mariner.MarinerLawnDart.BP_SpawnLawnDart
// 0x0020 (0x0020 - 0x0000)
struct MarinerLawnDart_BP_SpawnLawnDart final
{
public:
	class AMarinerLawnDartSplineContainer*        LawnDartSplineContainer;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarinerLawnDart>           LawnDartTemplate;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerPlayerState*                    CapturingPlayerState;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerLawnDart*                       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLawnDart_BP_SpawnLawnDart) == 0x000008, "Wrong alignment on MarinerLawnDart_BP_SpawnLawnDart");
static_assert(sizeof(MarinerLawnDart_BP_SpawnLawnDart) == 0x000020, "Wrong size on MarinerLawnDart_BP_SpawnLawnDart");
static_assert(offsetof(MarinerLawnDart_BP_SpawnLawnDart, LawnDartSplineContainer) == 0x000000, "Member 'MarinerLawnDart_BP_SpawnLawnDart::LawnDartSplineContainer' has a wrong offset!");
static_assert(offsetof(MarinerLawnDart_BP_SpawnLawnDart, LawnDartTemplate) == 0x000008, "Member 'MarinerLawnDart_BP_SpawnLawnDart::LawnDartTemplate' has a wrong offset!");
static_assert(offsetof(MarinerLawnDart_BP_SpawnLawnDart, CapturingPlayerState) == 0x000010, "Member 'MarinerLawnDart_BP_SpawnLawnDart::CapturingPlayerState' has a wrong offset!");
static_assert(offsetof(MarinerLawnDart_BP_SpawnLawnDart, ReturnValue) == 0x000018, "Member 'MarinerLawnDart_BP_SpawnLawnDart::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLawnDart.AddRocketsToSpawningPattern
// 0x0018 (0x0018 - 0x0000)
struct MarinerLawnDart_AddRocketsToSpawningPattern final
{
public:
	TArray<int32>                                 SocketIndices;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     RocketTemplate;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLawnDart_AddRocketsToSpawningPattern) == 0x000008, "Wrong alignment on MarinerLawnDart_AddRocketsToSpawningPattern");
static_assert(sizeof(MarinerLawnDart_AddRocketsToSpawningPattern) == 0x000018, "Wrong size on MarinerLawnDart_AddRocketsToSpawningPattern");
static_assert(offsetof(MarinerLawnDart_AddRocketsToSpawningPattern, SocketIndices) == 0x000000, "Member 'MarinerLawnDart_AddRocketsToSpawningPattern::SocketIndices' has a wrong offset!");
static_assert(offsetof(MarinerLawnDart_AddRocketsToSpawningPattern, RocketTemplate) == 0x000010, "Member 'MarinerLawnDart_AddRocketsToSpawningPattern::RocketTemplate' has a wrong offset!");

// Function Mariner.MarinerLawnDart.AddRocketToSpawningPattern
// 0x0010 (0x0010 - 0x0000)
struct MarinerLawnDart_AddRocketToSpawningPattern final
{
public:
	int32                                         SocketIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1565[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     RocketTemplate;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLawnDart_AddRocketToSpawningPattern) == 0x000008, "Wrong alignment on MarinerLawnDart_AddRocketToSpawningPattern");
static_assert(sizeof(MarinerLawnDart_AddRocketToSpawningPattern) == 0x000010, "Wrong size on MarinerLawnDart_AddRocketToSpawningPattern");
static_assert(offsetof(MarinerLawnDart_AddRocketToSpawningPattern, SocketIndex) == 0x000000, "Member 'MarinerLawnDart_AddRocketToSpawningPattern::SocketIndex' has a wrong offset!");
static_assert(offsetof(MarinerLawnDart_AddRocketToSpawningPattern, RocketTemplate) == 0x000008, "Member 'MarinerLawnDart_AddRocketToSpawningPattern::RocketTemplate' has a wrong offset!");

// Function Mariner.MarinerLawnDart.BeginDartEntrySequence
// 0x0001 (0x0001 - 0x0000)
struct MarinerLawnDart_BeginDartEntrySequence final
{
public:
	bool                                          bAutoFireMissilesOnLand;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLawnDart_BeginDartEntrySequence) == 0x000001, "Wrong alignment on MarinerLawnDart_BeginDartEntrySequence");
static_assert(sizeof(MarinerLawnDart_BeginDartEntrySequence) == 0x000001, "Wrong size on MarinerLawnDart_BeginDartEntrySequence");
static_assert(offsetof(MarinerLawnDart_BeginDartEntrySequence, bAutoFireMissilesOnLand) == 0x000000, "Member 'MarinerLawnDart_BeginDartEntrySequence::bAutoFireMissilesOnLand' has a wrong offset!");

// Function Mariner.MarinerLawnDart.BeginFiringMissilesSequence
// 0x0002 (0x0002 - 0x0000)
struct MarinerLawnDart_BeginFiringMissilesSequence final
{
public:
	bool                                          bCloseRackWhenDone;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLawnDart_BeginFiringMissilesSequence) == 0x000001, "Wrong alignment on MarinerLawnDart_BeginFiringMissilesSequence");
static_assert(sizeof(MarinerLawnDart_BeginFiringMissilesSequence) == 0x000002, "Wrong size on MarinerLawnDart_BeginFiringMissilesSequence");
static_assert(offsetof(MarinerLawnDart_BeginFiringMissilesSequence, bCloseRackWhenDone) == 0x000000, "Member 'MarinerLawnDart_BeginFiringMissilesSequence::bCloseRackWhenDone' has a wrong offset!");
static_assert(offsetof(MarinerLawnDart_BeginFiringMissilesSequence, ReturnValue) == 0x000001, "Member 'MarinerLawnDart_BeginFiringMissilesSequence::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLawnDart.BP_OnDartStateChanged
// 0x0001 (0x0001 - 0x0000)
struct MarinerLawnDart_BP_OnDartStateChanged final
{
public:
	EMarinerLawnDartState                         NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLawnDart_BP_OnDartStateChanged) == 0x000001, "Wrong alignment on MarinerLawnDart_BP_OnDartStateChanged");
static_assert(sizeof(MarinerLawnDart_BP_OnDartStateChanged) == 0x000001, "Wrong size on MarinerLawnDart_BP_OnDartStateChanged");
static_assert(offsetof(MarinerLawnDart_BP_OnDartStateChanged, NewState) == 0x000000, "Member 'MarinerLawnDart_BP_OnDartStateChanged::NewState' has a wrong offset!");

// Function Mariner.MarinerLawnDart.DetachRocket
// 0x0008 (0x0008 - 0x0000)
struct MarinerLawnDart_DetachRocket final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLawnDart_DetachRocket) == 0x000008, "Wrong alignment on MarinerLawnDart_DetachRocket");
static_assert(sizeof(MarinerLawnDart_DetachRocket) == 0x000008, "Wrong size on MarinerLawnDart_DetachRocket");
static_assert(offsetof(MarinerLawnDart_DetachRocket, ReturnValue) == 0x000000, "Member 'MarinerLawnDart_DetachRocket::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLawnDart.MulticastPlayRocketLaunchEffects
// 0x0008 (0x0008 - 0x0000)
struct MarinerLawnDart_MulticastPlayRocketLaunchEffects final
{
public:
	const class AActor*                           LaunchedRocket;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLawnDart_MulticastPlayRocketLaunchEffects) == 0x000008, "Wrong alignment on MarinerLawnDart_MulticastPlayRocketLaunchEffects");
static_assert(sizeof(MarinerLawnDart_MulticastPlayRocketLaunchEffects) == 0x000008, "Wrong size on MarinerLawnDart_MulticastPlayRocketLaunchEffects");
static_assert(offsetof(MarinerLawnDart_MulticastPlayRocketLaunchEffects, LaunchedRocket) == 0x000000, "Member 'MarinerLawnDart_MulticastPlayRocketLaunchEffects::LaunchedRocket' has a wrong offset!");

// Function Mariner.MarinerLawnDart.MulticastSpawnEffect
// 0x0040 (0x0040 - 0x0000)
struct MarinerLawnDart_MulticastSpawnEffect final
{
public:
	class UParticleSystem*                        Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1566[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLawnDart_MulticastSpawnEffect) == 0x000010, "Wrong alignment on MarinerLawnDart_MulticastSpawnEffect");
static_assert(sizeof(MarinerLawnDart_MulticastSpawnEffect) == 0x000040, "Wrong size on MarinerLawnDart_MulticastSpawnEffect");
static_assert(offsetof(MarinerLawnDart_MulticastSpawnEffect, Effect) == 0x000000, "Member 'MarinerLawnDart_MulticastSpawnEffect::Effect' has a wrong offset!");
static_assert(offsetof(MarinerLawnDart_MulticastSpawnEffect, SpawnTransform) == 0x000010, "Member 'MarinerLawnDart_MulticastSpawnEffect::SpawnTransform' has a wrong offset!");

// Function Mariner.MarinerLawnDart.OnAuthorityStoppedDueToCollision
// 0x0098 (0x0098 - 0x0000)
struct MarinerLawnDart_OnAuthorityStoppedDueToCollision final
{
public:
	class AActor*                                 MovingActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressRatioAtTimeOfCollision;                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             BlockingHit;                                       // 0x000C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1567[0x4];                                     // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerLawnDart_OnAuthorityStoppedDueToCollision) == 0x000008, "Wrong alignment on MarinerLawnDart_OnAuthorityStoppedDueToCollision");
static_assert(sizeof(MarinerLawnDart_OnAuthorityStoppedDueToCollision) == 0x000098, "Wrong size on MarinerLawnDart_OnAuthorityStoppedDueToCollision");
static_assert(offsetof(MarinerLawnDart_OnAuthorityStoppedDueToCollision, MovingActor) == 0x000000, "Member 'MarinerLawnDart_OnAuthorityStoppedDueToCollision::MovingActor' has a wrong offset!");
static_assert(offsetof(MarinerLawnDart_OnAuthorityStoppedDueToCollision, ProgressRatioAtTimeOfCollision) == 0x000008, "Member 'MarinerLawnDart_OnAuthorityStoppedDueToCollision::ProgressRatioAtTimeOfCollision' has a wrong offset!");
static_assert(offsetof(MarinerLawnDart_OnAuthorityStoppedDueToCollision, BlockingHit) == 0x00000C, "Member 'MarinerLawnDart_OnAuthorityStoppedDueToCollision::BlockingHit' has a wrong offset!");

// Function Mariner.MarinerLawnDart.OnAuthorityStoppedMovingOnEntrySpline
// 0x0010 (0x0010 - 0x0000)
struct MarinerLawnDart_OnAuthorityStoppedMovingOnEntrySpline final
{
public:
	class AActor*                                 MovingActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerFollowSplineDirection                 MovementDirection;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1568[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerLawnDart_OnAuthorityStoppedMovingOnEntrySpline) == 0x000008, "Wrong alignment on MarinerLawnDart_OnAuthorityStoppedMovingOnEntrySpline");
static_assert(sizeof(MarinerLawnDart_OnAuthorityStoppedMovingOnEntrySpline) == 0x000010, "Wrong size on MarinerLawnDart_OnAuthorityStoppedMovingOnEntrySpline");
static_assert(offsetof(MarinerLawnDart_OnAuthorityStoppedMovingOnEntrySpline, MovingActor) == 0x000000, "Member 'MarinerLawnDart_OnAuthorityStoppedMovingOnEntrySpline::MovingActor' has a wrong offset!");
static_assert(offsetof(MarinerLawnDart_OnAuthorityStoppedMovingOnEntrySpline, MovementDirection) == 0x000008, "Member 'MarinerLawnDart_OnAuthorityStoppedMovingOnEntrySpline::MovementDirection' has a wrong offset!");

// Function Mariner.MarinerLawnDart.OnAuthorityStoppedMovingOnExitSpline
// 0x0010 (0x0010 - 0x0000)
struct MarinerLawnDart_OnAuthorityStoppedMovingOnExitSpline final
{
public:
	class AActor*                                 MovingActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerFollowSplineDirection                 MovementDirection;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1569[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerLawnDart_OnAuthorityStoppedMovingOnExitSpline) == 0x000008, "Wrong alignment on MarinerLawnDart_OnAuthorityStoppedMovingOnExitSpline");
static_assert(sizeof(MarinerLawnDart_OnAuthorityStoppedMovingOnExitSpline) == 0x000010, "Wrong size on MarinerLawnDart_OnAuthorityStoppedMovingOnExitSpline");
static_assert(offsetof(MarinerLawnDart_OnAuthorityStoppedMovingOnExitSpline, MovingActor) == 0x000000, "Member 'MarinerLawnDart_OnAuthorityStoppedMovingOnExitSpline::MovingActor' has a wrong offset!");
static_assert(offsetof(MarinerLawnDart_OnAuthorityStoppedMovingOnExitSpline, MovementDirection) == 0x000008, "Member 'MarinerLawnDart_OnAuthorityStoppedMovingOnExitSpline::MovementDirection' has a wrong offset!");

// Function Mariner.MarinerLawnDart.OnLawnDartDestroyed
// 0x0008 (0x0008 - 0x0000)
struct MarinerLawnDart_OnLawnDartDestroyed final
{
public:
	class AActor*                                 DestroyedLawnDart;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLawnDart_OnLawnDartDestroyed) == 0x000008, "Wrong alignment on MarinerLawnDart_OnLawnDartDestroyed");
static_assert(sizeof(MarinerLawnDart_OnLawnDartDestroyed) == 0x000008, "Wrong size on MarinerLawnDart_OnLawnDartDestroyed");
static_assert(offsetof(MarinerLawnDart_OnLawnDartDestroyed, DestroyedLawnDart) == 0x000000, "Member 'MarinerLawnDart_OnLawnDartDestroyed::DestroyedLawnDart' has a wrong offset!");

// Function Mariner.MarinerLawnDart.SetTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerLawnDart_SetTeamIndex final
{
public:
	int32                                         InTeamIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLawnDart_SetTeamIndex) == 0x000004, "Wrong alignment on MarinerLawnDart_SetTeamIndex");
static_assert(sizeof(MarinerLawnDart_SetTeamIndex) == 0x000004, "Wrong size on MarinerLawnDart_SetTeamIndex");
static_assert(offsetof(MarinerLawnDart_SetTeamIndex, InTeamIndex) == 0x000000, "Member 'MarinerLawnDart_SetTeamIndex::InTeamIndex' has a wrong offset!");

// Function Mariner.MarinerLawnDart.GetTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerLawnDart_GetTeamIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLawnDart_GetTeamIndex) == 0x000004, "Wrong alignment on MarinerLawnDart_GetTeamIndex");
static_assert(sizeof(MarinerLawnDart_GetTeamIndex) == 0x000004, "Wrong size on MarinerLawnDart_GetTeamIndex");
static_assert(offsetof(MarinerLawnDart_GetTeamIndex, ReturnValue) == 0x000000, "Member 'MarinerLawnDart_GetTeamIndex::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_StateProjectile.BP_OnProjectileCallback
// 0x0048 (0x0048 - 0x0000)
struct MarinerAbility_StateProjectile_BP_OnProjectileCallback final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AMarinerProjectile*                     SpawnedProjectile;                                 // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_StateProjectile_BP_OnProjectileCallback) == 0x000008, "Wrong alignment on MarinerAbility_StateProjectile_BP_OnProjectileCallback");
static_assert(sizeof(MarinerAbility_StateProjectile_BP_OnProjectileCallback) == 0x000048, "Wrong size on MarinerAbility_StateProjectile_BP_OnProjectileCallback");
static_assert(offsetof(MarinerAbility_StateProjectile_BP_OnProjectileCallback, ActorInfo) == 0x000000, "Member 'MarinerAbility_StateProjectile_BP_OnProjectileCallback::ActorInfo' has a wrong offset!");
static_assert(offsetof(MarinerAbility_StateProjectile_BP_OnProjectileCallback, SpawnedProjectile) == 0x000040, "Member 'MarinerAbility_StateProjectile_BP_OnProjectileCallback::SpawnedProjectile' has a wrong offset!");

// Function Mariner.MarinerAbility_StateProjectile.BP_OnProjectileCallback_Authority
// 0x0048 (0x0048 - 0x0000)
struct MarinerAbility_StateProjectile_BP_OnProjectileCallback_Authority final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AMarinerProjectile*                     SpawnedProjectile;                                 // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_StateProjectile_BP_OnProjectileCallback_Authority) == 0x000008, "Wrong alignment on MarinerAbility_StateProjectile_BP_OnProjectileCallback_Authority");
static_assert(sizeof(MarinerAbility_StateProjectile_BP_OnProjectileCallback_Authority) == 0x000048, "Wrong size on MarinerAbility_StateProjectile_BP_OnProjectileCallback_Authority");
static_assert(offsetof(MarinerAbility_StateProjectile_BP_OnProjectileCallback_Authority, ActorInfo) == 0x000000, "Member 'MarinerAbility_StateProjectile_BP_OnProjectileCallback_Authority::ActorInfo' has a wrong offset!");
static_assert(offsetof(MarinerAbility_StateProjectile_BP_OnProjectileCallback_Authority, SpawnedProjectile) == 0x000040, "Member 'MarinerAbility_StateProjectile_BP_OnProjectileCallback_Authority::SpawnedProjectile' has a wrong offset!");

// Function Mariner.MarinerAbility_StateProjectile.BP_CanCallbackOnProjectile
// 0x0048 (0x0048 - 0x0000)
struct MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_156B[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile) == 0x000008, "Wrong alignment on MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile");
static_assert(sizeof(MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile) == 0x000048, "Wrong size on MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile");
static_assert(offsetof(MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile, ActorInfo) == 0x000000, "Member 'MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile::ActorInfo' has a wrong offset!");
static_assert(offsetof(MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile, ReturnValue) == 0x000040, "Member 'MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_StateProjectile.BP_CanCallbackOnProjectile_Authority
// 0x0048 (0x0048 - 0x0000)
struct MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile_Authority final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_156C[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile_Authority) == 0x000008, "Wrong alignment on MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile_Authority");
static_assert(sizeof(MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile_Authority) == 0x000048, "Wrong size on MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile_Authority");
static_assert(offsetof(MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile_Authority, ActorInfo) == 0x000000, "Member 'MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile_Authority::ActorInfo' has a wrong offset!");
static_assert(offsetof(MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile_Authority, ReturnValue) == 0x000040, "Member 'MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile_Authority::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_Weapon.OnGameplayEffectRemoved
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_Weapon_OnGameplayEffectRemoved final
{
public:
	TSubclassOf<class UGameplayEffect>            RemovedEffect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Weapon_OnGameplayEffectRemoved) == 0x000008, "Wrong alignment on MarinerAbility_Weapon_OnGameplayEffectRemoved");
static_assert(sizeof(MarinerAbility_Weapon_OnGameplayEffectRemoved) == 0x000008, "Wrong size on MarinerAbility_Weapon_OnGameplayEffectRemoved");
static_assert(offsetof(MarinerAbility_Weapon_OnGameplayEffectRemoved, RemovedEffect) == 0x000000, "Member 'MarinerAbility_Weapon_OnGameplayEffectRemoved::RemovedEffect' has a wrong offset!");

// Function Mariner.MarinerAbility_Weapon.OnReloadAbilityEnded
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbility_Weapon_OnReloadAbilityEnded final
{
public:
	struct FAbilityEndedData                      AbilityEndedData;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Weapon_OnReloadAbilityEnded) == 0x000008, "Wrong alignment on MarinerAbility_Weapon_OnReloadAbilityEnded");
static_assert(sizeof(MarinerAbility_Weapon_OnReloadAbilityEnded) == 0x000010, "Wrong size on MarinerAbility_Weapon_OnReloadAbilityEnded");
static_assert(offsetof(MarinerAbility_Weapon_OnReloadAbilityEnded, AbilityEndedData) == 0x000000, "Member 'MarinerAbility_Weapon_OnReloadAbilityEnded::AbilityEndedData' has a wrong offset!");

// Function Mariner.MarinerAbility_Weapon.GetProjectileAbility
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_Weapon_GetProjectileAbility final
{
public:
	class UMarinerAbility*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Weapon_GetProjectileAbility) == 0x000008, "Wrong alignment on MarinerAbility_Weapon_GetProjectileAbility");
static_assert(sizeof(MarinerAbility_Weapon_GetProjectileAbility) == 0x000008, "Wrong size on MarinerAbility_Weapon_GetProjectileAbility");
static_assert(offsetof(MarinerAbility_Weapon_GetProjectileAbility, ReturnValue) == 0x000000, "Member 'MarinerAbility_Weapon_GetProjectileAbility::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_Weapon.GetReloadAbility
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbility_Weapon_GetReloadAbility final
{
public:
	class UMarinerAbility*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Weapon_GetReloadAbility) == 0x000008, "Wrong alignment on MarinerAbility_Weapon_GetReloadAbility");
static_assert(sizeof(MarinerAbility_Weapon_GetReloadAbility) == 0x000008, "Wrong size on MarinerAbility_Weapon_GetReloadAbility");
static_assert(offsetof(MarinerAbility_Weapon_GetReloadAbility, ReturnValue) == 0x000000, "Member 'MarinerAbility_Weapon_GetReloadAbility::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_Weapon.IsReloading
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_Weapon_IsReloading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Weapon_IsReloading) == 0x000001, "Wrong alignment on MarinerAbility_Weapon_IsReloading");
static_assert(sizeof(MarinerAbility_Weapon_IsReloading) == 0x000001, "Wrong size on MarinerAbility_Weapon_IsReloading");
static_assert(offsetof(MarinerAbility_Weapon_IsReloading, ReturnValue) == 0x000000, "Member 'MarinerAbility_Weapon_IsReloading::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbility_Weapon.IsWeaponOutOfAmmo
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbility_Weapon_IsWeaponOutOfAmmo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbility_Weapon_IsWeaponOutOfAmmo) == 0x000001, "Wrong alignment on MarinerAbility_Weapon_IsWeaponOutOfAmmo");
static_assert(sizeof(MarinerAbility_Weapon_IsWeaponOutOfAmmo) == 0x000001, "Wrong size on MarinerAbility_Weapon_IsWeaponOutOfAmmo");
static_assert(offsetof(MarinerAbility_Weapon_IsWeaponOutOfAmmo, ReturnValue) == 0x000000, "Member 'MarinerAbility_Weapon_IsWeaponOutOfAmmo::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackButton.EnableWidgetSlot
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackButton_EnableWidgetSlot final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackButton_EnableWidgetSlot) == 0x000001, "Wrong alignment on MarinerMenuStackButton_EnableWidgetSlot");
static_assert(sizeof(MarinerMenuStackButton_EnableWidgetSlot) == 0x000001, "Wrong size on MarinerMenuStackButton_EnableWidgetSlot");
static_assert(offsetof(MarinerMenuStackButton_EnableWidgetSlot, bEnabled) == 0x000000, "Member 'MarinerMenuStackButton_EnableWidgetSlot::bEnabled' has a wrong offset!");

// Function Mariner.MarinerMenuStackButton.OnLayerChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerMenuStackButton_OnLayerChanged final
{
public:
	class UMarinerMenuStackLayer*                 NewRootLayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackButton_OnLayerChanged) == 0x000008, "Wrong alignment on MarinerMenuStackButton_OnLayerChanged");
static_assert(sizeof(MarinerMenuStackButton_OnLayerChanged) == 0x000008, "Wrong size on MarinerMenuStackButton_OnLayerChanged");
static_assert(offsetof(MarinerMenuStackButton_OnLayerChanged, NewRootLayer) == 0x000000, "Member 'MarinerMenuStackButton_OnLayerChanged::NewRootLayer' has a wrong offset!");

// Function Mariner.MarinerMenuStackButton.SetText
// 0x0018 (0x0018 - 0x0000)
struct MarinerMenuStackButton_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackButton_SetText) == 0x000008, "Wrong alignment on MarinerMenuStackButton_SetText");
static_assert(sizeof(MarinerMenuStackButton_SetText) == 0x000018, "Wrong size on MarinerMenuStackButton_SetText");
static_assert(offsetof(MarinerMenuStackButton_SetText, Text) == 0x000000, "Member 'MarinerMenuStackButton_SetText::Text' has a wrong offset!");

// Function Mariner.MarinerMenuStackButton.GetAssets
// 0x0038 (0x0038 - 0x0000)
struct MarinerMenuStackButton_GetAssets final
{
public:
	struct FMarinerMenuStackButtonAssets          ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackButton_GetAssets) == 0x000008, "Wrong alignment on MarinerMenuStackButton_GetAssets");
static_assert(sizeof(MarinerMenuStackButton_GetAssets) == 0x000038, "Wrong size on MarinerMenuStackButton_GetAssets");
static_assert(offsetof(MarinerMenuStackButton_GetAssets, ReturnValue) == 0x000000, "Member 'MarinerMenuStackButton_GetAssets::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackButton.GetMenuStackIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerMenuStackButton_GetMenuStackIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackButton_GetMenuStackIndex) == 0x000004, "Wrong alignment on MarinerMenuStackButton_GetMenuStackIndex");
static_assert(sizeof(MarinerMenuStackButton_GetMenuStackIndex) == 0x000004, "Wrong size on MarinerMenuStackButton_GetMenuStackIndex");
static_assert(offsetof(MarinerMenuStackButton_GetMenuStackIndex, ReturnValue) == 0x000000, "Member 'MarinerMenuStackButton_GetMenuStackIndex::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackButton.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuStackButton_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackButton_IsEnabled) == 0x000001, "Wrong alignment on MarinerMenuStackButton_IsEnabled");
static_assert(sizeof(MarinerMenuStackButton_IsEnabled) == 0x000001, "Wrong size on MarinerMenuStackButton_IsEnabled");
static_assert(offsetof(MarinerMenuStackButton_IsEnabled, ReturnValue) == 0x000000, "Member 'MarinerMenuStackButton_IsEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCustomComboBox.AddOption
// 0x0018 (0x0018 - 0x0000)
struct MarinerCustomComboBox_AddOption final
{
public:
	class FText                                   OptionText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCustomComboBox_AddOption) == 0x000008, "Wrong alignment on MarinerCustomComboBox_AddOption");
static_assert(sizeof(MarinerCustomComboBox_AddOption) == 0x000018, "Wrong size on MarinerCustomComboBox_AddOption");
static_assert(offsetof(MarinerCustomComboBox_AddOption, OptionText) == 0x000000, "Member 'MarinerCustomComboBox_AddOption::OptionText' has a wrong offset!");

// Function Mariner.MarinerCustomComboBox.AddOptionWithCallback
// 0x0030 (0x0030 - 0x0000)
struct MarinerCustomComboBox_AddOptionWithCallback final
{
public:
	class FText                                   OptionText;                                        // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SelectedCallback;                                  // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1578[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCustomComboBox_AddOptionWithCallback) == 0x000008, "Wrong alignment on MarinerCustomComboBox_AddOptionWithCallback");
static_assert(sizeof(MarinerCustomComboBox_AddOptionWithCallback) == 0x000030, "Wrong size on MarinerCustomComboBox_AddOptionWithCallback");
static_assert(offsetof(MarinerCustomComboBox_AddOptionWithCallback, OptionText) == 0x000000, "Member 'MarinerCustomComboBox_AddOptionWithCallback::OptionText' has a wrong offset!");
static_assert(offsetof(MarinerCustomComboBox_AddOptionWithCallback, SelectedCallback) == 0x000018, "Member 'MarinerCustomComboBox_AddOptionWithCallback::SelectedCallback' has a wrong offset!");
static_assert(offsetof(MarinerCustomComboBox_AddOptionWithCallback, ReturnValue) == 0x000028, "Member 'MarinerCustomComboBox_AddOptionWithCallback::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCustomComboBox.SetEditConfirmationData
// 0x01C8 (0x01C8 - 0x0000)
struct MarinerCustomComboBox_SetEditConfirmationData final
{
public:
	struct FMarinerCustomDropdownEditConfirmation InEditConfirmationData;                            // 0x0000(0x01C8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCustomComboBox_SetEditConfirmationData) == 0x000008, "Wrong alignment on MarinerCustomComboBox_SetEditConfirmationData");
static_assert(sizeof(MarinerCustomComboBox_SetEditConfirmationData) == 0x0001C8, "Wrong size on MarinerCustomComboBox_SetEditConfirmationData");
static_assert(offsetof(MarinerCustomComboBox_SetEditConfirmationData, InEditConfirmationData) == 0x000000, "Member 'MarinerCustomComboBox_SetEditConfirmationData::InEditConfirmationData' has a wrong offset!");

// Function Mariner.MarinerCustomComboBox.SetIsOpen
// 0x0002 (0x0002 - 0x0000)
struct MarinerCustomComboBox_SetIsOpen final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCustomComboBox_SetIsOpen) == 0x000001, "Wrong alignment on MarinerCustomComboBox_SetIsOpen");
static_assert(sizeof(MarinerCustomComboBox_SetIsOpen) == 0x000002, "Wrong size on MarinerCustomComboBox_SetIsOpen");
static_assert(offsetof(MarinerCustomComboBox_SetIsOpen, bOpen) == 0x000000, "Member 'MarinerCustomComboBox_SetIsOpen::bOpen' has a wrong offset!");
static_assert(offsetof(MarinerCustomComboBox_SetIsOpen, ReturnValue) == 0x000001, "Member 'MarinerCustomComboBox_SetIsOpen::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCustomComboBox.SetOpenInput
// 0x0001 (0x0001 - 0x0000)
struct MarinerCustomComboBox_SetOpenInput final
{
public:
	EMarinerInputActions                          Input;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCustomComboBox_SetOpenInput) == 0x000001, "Wrong alignment on MarinerCustomComboBox_SetOpenInput");
static_assert(sizeof(MarinerCustomComboBox_SetOpenInput) == 0x000001, "Wrong size on MarinerCustomComboBox_SetOpenInput");
static_assert(offsetof(MarinerCustomComboBox_SetOpenInput, Input) == 0x000000, "Member 'MarinerCustomComboBox_SetOpenInput::Input' has a wrong offset!");

// Function Mariner.MarinerCustomComboBox.SetSelectedOptionViaIndex
// 0x0008 (0x0008 - 0x0000)
struct MarinerCustomComboBox_SetSelectedOptionViaIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBroadcast;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1579[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCustomComboBox_SetSelectedOptionViaIndex) == 0x000004, "Wrong alignment on MarinerCustomComboBox_SetSelectedOptionViaIndex");
static_assert(sizeof(MarinerCustomComboBox_SetSelectedOptionViaIndex) == 0x000008, "Wrong size on MarinerCustomComboBox_SetSelectedOptionViaIndex");
static_assert(offsetof(MarinerCustomComboBox_SetSelectedOptionViaIndex, Param_Index) == 0x000000, "Member 'MarinerCustomComboBox_SetSelectedOptionViaIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(MarinerCustomComboBox_SetSelectedOptionViaIndex, bBroadcast) == 0x000004, "Member 'MarinerCustomComboBox_SetSelectedOptionViaIndex::bBroadcast' has a wrong offset!");
static_assert(offsetof(MarinerCustomComboBox_SetSelectedOptionViaIndex, bAnimate) == 0x000005, "Member 'MarinerCustomComboBox_SetSelectedOptionViaIndex::bAnimate' has a wrong offset!");

// Function Mariner.MarinerCustomComboBox.SetSFXEvents
// 0x0028 (0x0028 - 0x0000)
struct MarinerCustomComboBox_SetSFXEvents final
{
public:
	struct FMarinerCustomDropdownSFX              InDropdownSFX;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCustomComboBox_SetSFXEvents) == 0x000008, "Wrong alignment on MarinerCustomComboBox_SetSFXEvents");
static_assert(sizeof(MarinerCustomComboBox_SetSFXEvents) == 0x000028, "Wrong size on MarinerCustomComboBox_SetSFXEvents");
static_assert(offsetof(MarinerCustomComboBox_SetSFXEvents, InDropdownSFX) == 0x000000, "Member 'MarinerCustomComboBox_SetSFXEvents::InDropdownSFX' has a wrong offset!");

// Function Mariner.MarinerCustomComboBox.UpdateOptionText
// 0x0020 (0x0020 - 0x0000)
struct MarinerCustomComboBox_UpdateOptionText final
{
public:
	class FText                                   NewOptionText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         OptionIndex;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_157A[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCustomComboBox_UpdateOptionText) == 0x000008, "Wrong alignment on MarinerCustomComboBox_UpdateOptionText");
static_assert(sizeof(MarinerCustomComboBox_UpdateOptionText) == 0x000020, "Wrong size on MarinerCustomComboBox_UpdateOptionText");
static_assert(offsetof(MarinerCustomComboBox_UpdateOptionText, NewOptionText) == 0x000000, "Member 'MarinerCustomComboBox_UpdateOptionText::NewOptionText' has a wrong offset!");
static_assert(offsetof(MarinerCustomComboBox_UpdateOptionText, OptionIndex) == 0x000018, "Member 'MarinerCustomComboBox_UpdateOptionText::OptionIndex' has a wrong offset!");

// Function Mariner.MarinerCustomComboBox.GetOptionCount
// 0x0004 (0x0004 - 0x0000)
struct MarinerCustomComboBox_GetOptionCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCustomComboBox_GetOptionCount) == 0x000004, "Wrong alignment on MarinerCustomComboBox_GetOptionCount");
static_assert(sizeof(MarinerCustomComboBox_GetOptionCount) == 0x000004, "Wrong size on MarinerCustomComboBox_GetOptionCount");
static_assert(offsetof(MarinerCustomComboBox_GetOptionCount, ReturnValue) == 0x000000, "Member 'MarinerCustomComboBox_GetOptionCount::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCustomComboBox.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct MarinerCustomComboBox_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCustomComboBox_IsOpen) == 0x000001, "Wrong alignment on MarinerCustomComboBox_IsOpen");
static_assert(sizeof(MarinerCustomComboBox_IsOpen) == 0x000001, "Wrong size on MarinerCustomComboBox_IsOpen");
static_assert(offsetof(MarinerCustomComboBox_IsOpen, ReturnValue) == 0x000000, "Member 'MarinerCustomComboBox_IsOpen::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSocialWidget.OnLocalUserNumChanged
// 0x0004 (0x0004 - 0x0000)
struct MarinerSocialWidget_OnLocalUserNumChanged final
{
public:
	int32                                         LocalUser;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSocialWidget_OnLocalUserNumChanged) == 0x000004, "Wrong alignment on MarinerSocialWidget_OnLocalUserNumChanged");
static_assert(sizeof(MarinerSocialWidget_OnLocalUserNumChanged) == 0x000004, "Wrong size on MarinerSocialWidget_OnLocalUserNumChanged");
static_assert(offsetof(MarinerSocialWidget_OnLocalUserNumChanged, LocalUser) == 0x000000, "Member 'MarinerSocialWidget_OnLocalUserNumChanged::LocalUser' has a wrong offset!");

// Function Mariner.MarinerSocialWidget.OnMangoShutdown
// 0x0001 (0x0001 - 0x0000)
struct MarinerSocialWidget_OnMangoShutdown final
{
public:
	bool                                          bIsResetting;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSocialWidget_OnMangoShutdown) == 0x000001, "Wrong alignment on MarinerSocialWidget_OnMangoShutdown");
static_assert(sizeof(MarinerSocialWidget_OnMangoShutdown) == 0x000001, "Wrong size on MarinerSocialWidget_OnMangoShutdown");
static_assert(offsetof(MarinerSocialWidget_OnMangoShutdown, bIsResetting) == 0x000000, "Member 'MarinerSocialWidget_OnMangoShutdown::bIsResetting' has a wrong offset!");

// Function Mariner.MarinerAbilityFeedbackWidget.PlayCooldownAnimation
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbilityFeedbackWidget_PlayCooldownAnimation final
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilityFeedbackWidget_PlayCooldownAnimation) == 0x000001, "Wrong alignment on MarinerAbilityFeedbackWidget_PlayCooldownAnimation");
static_assert(sizeof(MarinerAbilityFeedbackWidget_PlayCooldownAnimation) == 0x000001, "Wrong size on MarinerAbilityFeedbackWidget_PlayCooldownAnimation");
static_assert(offsetof(MarinerAbilityFeedbackWidget_PlayCooldownAnimation, InputAction) == 0x000000, "Member 'MarinerAbilityFeedbackWidget_PlayCooldownAnimation::InputAction' has a wrong offset!");

// Function Mariner.MarinerMusicManager.BP_HandleMenuMusicSFX
// 0x0008 (0x0008 - 0x0000)
struct MarinerMusicManager_BP_HandleMenuMusicSFX final
{
public:
	class UAkAudioEvent*                          EventPlayed;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMusicManager_BP_HandleMenuMusicSFX) == 0x000008, "Wrong alignment on MarinerMusicManager_BP_HandleMenuMusicSFX");
static_assert(sizeof(MarinerMusicManager_BP_HandleMenuMusicSFX) == 0x000008, "Wrong size on MarinerMusicManager_BP_HandleMenuMusicSFX");
static_assert(offsetof(MarinerMusicManager_BP_HandleMenuMusicSFX, EventPlayed) == 0x000000, "Member 'MarinerMusicManager_BP_HandleMenuMusicSFX::EventPlayed' has a wrong offset!");

// Function Mariner.MarinerMusicManager.BP_OnMatchStateChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerMusicManager_BP_OnMatchStateChanged final
{
public:
	class FName                                   MatchState;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMusicManager_BP_OnMatchStateChanged) == 0x000004, "Wrong alignment on MarinerMusicManager_BP_OnMatchStateChanged");
static_assert(sizeof(MarinerMusicManager_BP_OnMatchStateChanged) == 0x000008, "Wrong size on MarinerMusicManager_BP_OnMatchStateChanged");
static_assert(offsetof(MarinerMusicManager_BP_OnMatchStateChanged, MatchState) == 0x000000, "Member 'MarinerMusicManager_BP_OnMatchStateChanged::MatchState' has a wrong offset!");

// Function Mariner.MarinerMusicManager.HandleMenuMusicSFX
// 0x0008 (0x0008 - 0x0000)
struct MarinerMusicManager_HandleMenuMusicSFX final
{
public:
	class UAkAudioEvent*                          EventToPlay;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMusicManager_HandleMenuMusicSFX) == 0x000008, "Wrong alignment on MarinerMusicManager_HandleMenuMusicSFX");
static_assert(sizeof(MarinerMusicManager_HandleMenuMusicSFX) == 0x000008, "Wrong size on MarinerMusicManager_HandleMenuMusicSFX");
static_assert(offsetof(MarinerMusicManager_HandleMenuMusicSFX, EventToPlay) == 0x000000, "Member 'MarinerMusicManager_HandleMenuMusicSFX::EventToPlay' has a wrong offset!");

// Function Mariner.MarinerMusicManager.OnTimeRemainingChanged
// 0x0004 (0x0004 - 0x0000)
struct MarinerMusicManager_OnTimeRemainingChanged final
{
public:
	int32                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMusicManager_OnTimeRemainingChanged) == 0x000004, "Wrong alignment on MarinerMusicManager_OnTimeRemainingChanged");
static_assert(sizeof(MarinerMusicManager_OnTimeRemainingChanged) == 0x000004, "Wrong size on MarinerMusicManager_OnTimeRemainingChanged");
static_assert(offsetof(MarinerMusicManager_OnTimeRemainingChanged, TimeRemaining) == 0x000000, "Member 'MarinerMusicManager_OnTimeRemainingChanged::TimeRemaining' has a wrong offset!");

// Function Mariner.MarinerMusicManager.PlayCharacterCustomizationMusic
// 0x0010 (0x0010 - 0x0000)
struct MarinerMusicManager_PlayCharacterCustomizationMusic final
{
public:
	class FString                                 SkinName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMusicManager_PlayCharacterCustomizationMusic) == 0x000008, "Wrong alignment on MarinerMusicManager_PlayCharacterCustomizationMusic");
static_assert(sizeof(MarinerMusicManager_PlayCharacterCustomizationMusic) == 0x000010, "Wrong size on MarinerMusicManager_PlayCharacterCustomizationMusic");
static_assert(offsetof(MarinerMusicManager_PlayCharacterCustomizationMusic, SkinName) == 0x000000, "Member 'MarinerMusicManager_PlayCharacterCustomizationMusic::SkinName' has a wrong offset!");

// Function Mariner.MarinerMusicManager.PlayMenuMusic
// 0x0008 (0x0008 - 0x0000)
struct MarinerMusicManager_PlayMenuMusic final
{
public:
	class UAkAudioEvent*                          EventToPlay;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMusicManager_PlayMenuMusic) == 0x000008, "Wrong alignment on MarinerMusicManager_PlayMenuMusic");
static_assert(sizeof(MarinerMusicManager_PlayMenuMusic) == 0x000008, "Wrong size on MarinerMusicManager_PlayMenuMusic");
static_assert(offsetof(MarinerMusicManager_PlayMenuMusic, EventToPlay) == 0x000000, "Member 'MarinerMusicManager_PlayMenuMusic::EventToPlay' has a wrong offset!");

// Function Mariner.MarinerMusicManager.PlayPriorityMusic
// 0x0018 (0x0018 - 0x0000)
struct MarinerMusicManager_PlayPriorityMusic final
{
public:
	class UAkAudioEvent*                          PriorityEvent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SetStateGroup;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SetState;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMusicManager_PlayPriorityMusic) == 0x000008, "Wrong alignment on MarinerMusicManager_PlayPriorityMusic");
static_assert(sizeof(MarinerMusicManager_PlayPriorityMusic) == 0x000018, "Wrong size on MarinerMusicManager_PlayPriorityMusic");
static_assert(offsetof(MarinerMusicManager_PlayPriorityMusic, PriorityEvent) == 0x000000, "Member 'MarinerMusicManager_PlayPriorityMusic::PriorityEvent' has a wrong offset!");
static_assert(offsetof(MarinerMusicManager_PlayPriorityMusic, SetStateGroup) == 0x000008, "Member 'MarinerMusicManager_PlayPriorityMusic::SetStateGroup' has a wrong offset!");
static_assert(offsetof(MarinerMusicManager_PlayPriorityMusic, SetState) == 0x000010, "Member 'MarinerMusicManager_PlayPriorityMusic::SetState' has a wrong offset!");

// Function Mariner.MarinerMusicManager.PostEvent
// 0x0010 (0x0010 - 0x0000)
struct MarinerMusicManager_PostEvent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1580[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMusicManager_PostEvent) == 0x000008, "Wrong alignment on MarinerMusicManager_PostEvent");
static_assert(sizeof(MarinerMusicManager_PostEvent) == 0x000010, "Wrong size on MarinerMusicManager_PostEvent");
static_assert(offsetof(MarinerMusicManager_PostEvent, AkEvent) == 0x000000, "Member 'MarinerMusicManager_PostEvent::AkEvent' has a wrong offset!");
static_assert(offsetof(MarinerMusicManager_PostEvent, ReturnValue) == 0x000008, "Member 'MarinerMusicManager_PostEvent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMusicManager.PostTrackEvent
// 0x000C (0x000C - 0x0000)
struct MarinerMusicManager_PostTrackEvent final
{
public:
	class FName                                   TrackID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMusicManager_PostTrackEvent) == 0x000004, "Wrong alignment on MarinerMusicManager_PostTrackEvent");
static_assert(sizeof(MarinerMusicManager_PostTrackEvent) == 0x00000C, "Wrong size on MarinerMusicManager_PostTrackEvent");
static_assert(offsetof(MarinerMusicManager_PostTrackEvent, TrackID) == 0x000000, "Member 'MarinerMusicManager_PostTrackEvent::TrackID' has a wrong offset!");
static_assert(offsetof(MarinerMusicManager_PostTrackEvent, ReturnValue) == 0x000008, "Member 'MarinerMusicManager_PostTrackEvent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMusicManager.ReactToNewBallOwner
// 0x0008 (0x0008 - 0x0000)
struct MarinerMusicManager_ReactToNewBallOwner final
{
public:
	const class AMarinerCharacter*                Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMusicManager_ReactToNewBallOwner) == 0x000008, "Wrong alignment on MarinerMusicManager_ReactToNewBallOwner");
static_assert(sizeof(MarinerMusicManager_ReactToNewBallOwner) == 0x000008, "Wrong size on MarinerMusicManager_ReactToNewBallOwner");
static_assert(offsetof(MarinerMusicManager_ReactToNewBallOwner, Character) == 0x000000, "Member 'MarinerMusicManager_ReactToNewBallOwner::Character' has a wrong offset!");

// Function Mariner.MarinerMusicManager.IsCurrentlyInGameplayMap
// 0x0001 (0x0001 - 0x0000)
struct MarinerMusicManager_IsCurrentlyInGameplayMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMusicManager_IsCurrentlyInGameplayMap) == 0x000001, "Wrong alignment on MarinerMusicManager_IsCurrentlyInGameplayMap");
static_assert(sizeof(MarinerMusicManager_IsCurrentlyInGameplayMap) == 0x000001, "Wrong size on MarinerMusicManager_IsCurrentlyInGameplayMap");
static_assert(offsetof(MarinerMusicManager_IsCurrentlyInGameplayMap, ReturnValue) == 0x000000, "Member 'MarinerMusicManager_IsCurrentlyInGameplayMap::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMusicManager.IsPriorityMusicPlaying
// 0x0001 (0x0001 - 0x0000)
struct MarinerMusicManager_IsPriorityMusicPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMusicManager_IsPriorityMusicPlaying) == 0x000001, "Wrong alignment on MarinerMusicManager_IsPriorityMusicPlaying");
static_assert(sizeof(MarinerMusicManager_IsPriorityMusicPlaying) == 0x000001, "Wrong size on MarinerMusicManager_IsPriorityMusicPlaying");
static_assert(offsetof(MarinerMusicManager_IsPriorityMusicPlaying, ReturnValue) == 0x000000, "Member 'MarinerMusicManager_IsPriorityMusicPlaying::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMiniRewardPreview.LoadItemData
// 0x0050 (0x0050 - 0x0000)
struct MarinerMiniRewardPreview_LoadItemData final
{
public:
	struct FMangoItem                             Item;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMiniRewardPreview_LoadItemData) == 0x000008, "Wrong alignment on MarinerMiniRewardPreview_LoadItemData");
static_assert(sizeof(MarinerMiniRewardPreview_LoadItemData) == 0x000050, "Wrong size on MarinerMiniRewardPreview_LoadItemData");
static_assert(offsetof(MarinerMiniRewardPreview_LoadItemData, Item) == 0x000000, "Member 'MarinerMiniRewardPreview_LoadItemData::Item' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.AllowTeamToCapture
// 0x0004 (0x0004 - 0x0000)
struct MarinerCaptureVolumeBase_AllowTeamToCapture final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolumeBase_AllowTeamToCapture) == 0x000004, "Wrong alignment on MarinerCaptureVolumeBase_AllowTeamToCapture");
static_assert(sizeof(MarinerCaptureVolumeBase_AllowTeamToCapture) == 0x000004, "Wrong size on MarinerCaptureVolumeBase_AllowTeamToCapture");
static_assert(offsetof(MarinerCaptureVolumeBase_AllowTeamToCapture, TeamIndex) == 0x000000, "Member 'MarinerCaptureVolumeBase_AllowTeamToCapture::TeamIndex' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.BlockTeamFromCapturing
// 0x0004 (0x0004 - 0x0000)
struct MarinerCaptureVolumeBase_BlockTeamFromCapturing final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolumeBase_BlockTeamFromCapturing) == 0x000004, "Wrong alignment on MarinerCaptureVolumeBase_BlockTeamFromCapturing");
static_assert(sizeof(MarinerCaptureVolumeBase_BlockTeamFromCapturing) == 0x000004, "Wrong size on MarinerCaptureVolumeBase_BlockTeamFromCapturing");
static_assert(offsetof(MarinerCaptureVolumeBase_BlockTeamFromCapturing, TeamIndex) == 0x000000, "Member 'MarinerCaptureVolumeBase_BlockTeamFromCapturing::TeamIndex' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.OnLocalCharacterChangedReality
// 0x0002 (0x0002 - 0x0000)
struct MarinerCaptureVolumeBase_OnLocalCharacterChangedReality final
{
public:
	EMarinerRealityState                          OldReality;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerRealityState                          NewReality;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolumeBase_OnLocalCharacterChangedReality) == 0x000001, "Wrong alignment on MarinerCaptureVolumeBase_OnLocalCharacterChangedReality");
static_assert(sizeof(MarinerCaptureVolumeBase_OnLocalCharacterChangedReality) == 0x000002, "Wrong size on MarinerCaptureVolumeBase_OnLocalCharacterChangedReality");
static_assert(offsetof(MarinerCaptureVolumeBase_OnLocalCharacterChangedReality, OldReality) == 0x000000, "Member 'MarinerCaptureVolumeBase_OnLocalCharacterChangedReality::OldReality' has a wrong offset!");
static_assert(offsetof(MarinerCaptureVolumeBase_OnLocalCharacterChangedReality, NewReality) == 0x000001, "Member 'MarinerCaptureVolumeBase_OnLocalCharacterChangedReality::NewReality' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.OverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct MarinerCaptureVolumeBase_OverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolumeBase_OverlapBegin) == 0x000008, "Wrong alignment on MarinerCaptureVolumeBase_OverlapBegin");
static_assert(sizeof(MarinerCaptureVolumeBase_OverlapBegin) == 0x000010, "Wrong size on MarinerCaptureVolumeBase_OverlapBegin");
static_assert(offsetof(MarinerCaptureVolumeBase_OverlapBegin, OverlappedActor) == 0x000000, "Member 'MarinerCaptureVolumeBase_OverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(MarinerCaptureVolumeBase_OverlapBegin, OtherActor) == 0x000008, "Member 'MarinerCaptureVolumeBase_OverlapBegin::OtherActor' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.OverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct MarinerCaptureVolumeBase_OverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolumeBase_OverlapEnd) == 0x000008, "Wrong alignment on MarinerCaptureVolumeBase_OverlapEnd");
static_assert(sizeof(MarinerCaptureVolumeBase_OverlapEnd) == 0x000010, "Wrong size on MarinerCaptureVolumeBase_OverlapEnd");
static_assert(offsetof(MarinerCaptureVolumeBase_OverlapEnd, OverlappedActor) == 0x000000, "Member 'MarinerCaptureVolumeBase_OverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(MarinerCaptureVolumeBase_OverlapEnd, OtherActor) == 0x000008, "Member 'MarinerCaptureVolumeBase_OverlapEnd::OtherActor' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.SetCaptureTime
// 0x0004 (0x0004 - 0x0000)
struct MarinerCaptureVolumeBase_SetCaptureTime final
{
public:
	float                                         NewCaptureTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolumeBase_SetCaptureTime) == 0x000004, "Wrong alignment on MarinerCaptureVolumeBase_SetCaptureTime");
static_assert(sizeof(MarinerCaptureVolumeBase_SetCaptureTime) == 0x000004, "Wrong size on MarinerCaptureVolumeBase_SetCaptureTime");
static_assert(offsetof(MarinerCaptureVolumeBase_SetCaptureTime, NewCaptureTime) == 0x000000, "Member 'MarinerCaptureVolumeBase_SetCaptureTime::NewCaptureTime' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.SetIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerCaptureVolumeBase_SetIsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolumeBase_SetIsEnabled) == 0x000001, "Wrong alignment on MarinerCaptureVolumeBase_SetIsEnabled");
static_assert(sizeof(MarinerCaptureVolumeBase_SetIsEnabled) == 0x000001, "Wrong size on MarinerCaptureVolumeBase_SetIsEnabled");
static_assert(offsetof(MarinerCaptureVolumeBase_SetIsEnabled, bEnabled) == 0x000000, "Member 'MarinerCaptureVolumeBase_SetIsEnabled::bEnabled' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.UpdateFastOverlaps
// 0x0010 (0x0010 - 0x0000)
struct MarinerCaptureVolumeBase_UpdateFastOverlaps final
{
public:
	TArray<class UMarinerFastCollisionComponent*> CurrentFastOverlaps;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolumeBase_UpdateFastOverlaps) == 0x000008, "Wrong alignment on MarinerCaptureVolumeBase_UpdateFastOverlaps");
static_assert(sizeof(MarinerCaptureVolumeBase_UpdateFastOverlaps) == 0x000010, "Wrong size on MarinerCaptureVolumeBase_UpdateFastOverlaps");
static_assert(offsetof(MarinerCaptureVolumeBase_UpdateFastOverlaps, CurrentFastOverlaps) == 0x000000, "Member 'MarinerCaptureVolumeBase_UpdateFastOverlaps::CurrentFastOverlaps' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.GetCaptureTime
// 0x0004 (0x0004 - 0x0000)
struct MarinerCaptureVolumeBase_GetCaptureTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolumeBase_GetCaptureTime) == 0x000004, "Wrong alignment on MarinerCaptureVolumeBase_GetCaptureTime");
static_assert(sizeof(MarinerCaptureVolumeBase_GetCaptureTime) == 0x000004, "Wrong size on MarinerCaptureVolumeBase_GetCaptureTime");
static_assert(offsetof(MarinerCaptureVolumeBase_GetCaptureTime, ReturnValue) == 0x000000, "Member 'MarinerCaptureVolumeBase_GetCaptureTime::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.GetCapturingTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerCaptureVolumeBase_GetCapturingTeamIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolumeBase_GetCapturingTeamIndex) == 0x000004, "Wrong alignment on MarinerCaptureVolumeBase_GetCapturingTeamIndex");
static_assert(sizeof(MarinerCaptureVolumeBase_GetCapturingTeamIndex) == 0x000004, "Wrong size on MarinerCaptureVolumeBase_GetCapturingTeamIndex");
static_assert(offsetof(MarinerCaptureVolumeBase_GetCapturingTeamIndex, ReturnValue) == 0x000000, "Member 'MarinerCaptureVolumeBase_GetCapturingTeamIndex::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.GetFirstOverlappingCharacterOnTeam
// 0x0010 (0x0010 - 0x0000)
struct MarinerCaptureVolumeBase_GetFirstOverlappingCharacterOnTeam final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1587[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolumeBase_GetFirstOverlappingCharacterOnTeam) == 0x000008, "Wrong alignment on MarinerCaptureVolumeBase_GetFirstOverlappingCharacterOnTeam");
static_assert(sizeof(MarinerCaptureVolumeBase_GetFirstOverlappingCharacterOnTeam) == 0x000010, "Wrong size on MarinerCaptureVolumeBase_GetFirstOverlappingCharacterOnTeam");
static_assert(offsetof(MarinerCaptureVolumeBase_GetFirstOverlappingCharacterOnTeam, TeamIndex) == 0x000000, "Member 'MarinerCaptureVolumeBase_GetFirstOverlappingCharacterOnTeam::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerCaptureVolumeBase_GetFirstOverlappingCharacterOnTeam, ReturnValue) == 0x000008, "Member 'MarinerCaptureVolumeBase_GetFirstOverlappingCharacterOnTeam::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.GetIsContested
// 0x0001 (0x0001 - 0x0000)
struct MarinerCaptureVolumeBase_GetIsContested final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolumeBase_GetIsContested) == 0x000001, "Wrong alignment on MarinerCaptureVolumeBase_GetIsContested");
static_assert(sizeof(MarinerCaptureVolumeBase_GetIsContested) == 0x000001, "Wrong size on MarinerCaptureVolumeBase_GetIsContested");
static_assert(offsetof(MarinerCaptureVolumeBase_GetIsContested, ReturnValue) == 0x000000, "Member 'MarinerCaptureVolumeBase_GetIsContested::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.GetIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerCaptureVolumeBase_GetIsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolumeBase_GetIsEnabled) == 0x000001, "Wrong alignment on MarinerCaptureVolumeBase_GetIsEnabled");
static_assert(sizeof(MarinerCaptureVolumeBase_GetIsEnabled) == 0x000001, "Wrong size on MarinerCaptureVolumeBase_GetIsEnabled");
static_assert(offsetof(MarinerCaptureVolumeBase_GetIsEnabled, ReturnValue) == 0x000000, "Member 'MarinerCaptureVolumeBase_GetIsEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.GetNumberOfCapturingCharactersOnTeam
// 0x0008 (0x0008 - 0x0000)
struct MarinerCaptureVolumeBase_GetNumberOfCapturingCharactersOnTeam final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolumeBase_GetNumberOfCapturingCharactersOnTeam) == 0x000004, "Wrong alignment on MarinerCaptureVolumeBase_GetNumberOfCapturingCharactersOnTeam");
static_assert(sizeof(MarinerCaptureVolumeBase_GetNumberOfCapturingCharactersOnTeam) == 0x000008, "Wrong size on MarinerCaptureVolumeBase_GetNumberOfCapturingCharactersOnTeam");
static_assert(offsetof(MarinerCaptureVolumeBase_GetNumberOfCapturingCharactersOnTeam, TeamIndex) == 0x000000, "Member 'MarinerCaptureVolumeBase_GetNumberOfCapturingCharactersOnTeam::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerCaptureVolumeBase_GetNumberOfCapturingCharactersOnTeam, ReturnValue) == 0x000004, "Member 'MarinerCaptureVolumeBase_GetNumberOfCapturingCharactersOnTeam::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.IsAllowedToCapture
// 0x0008 (0x0008 - 0x0000)
struct MarinerCaptureVolumeBase_IsAllowedToCapture final
{
public:
	int32                                         Team;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1588[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCaptureVolumeBase_IsAllowedToCapture) == 0x000004, "Wrong alignment on MarinerCaptureVolumeBase_IsAllowedToCapture");
static_assert(sizeof(MarinerCaptureVolumeBase_IsAllowedToCapture) == 0x000008, "Wrong size on MarinerCaptureVolumeBase_IsAllowedToCapture");
static_assert(offsetof(MarinerCaptureVolumeBase_IsAllowedToCapture, Team) == 0x000000, "Member 'MarinerCaptureVolumeBase_IsAllowedToCapture::Team' has a wrong offset!");
static_assert(offsetof(MarinerCaptureVolumeBase_IsAllowedToCapture, ReturnValue) == 0x000004, "Member 'MarinerCaptureVolumeBase_IsAllowedToCapture::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCaptureVolumeBase.IsCharacterCurrentlyCapturing
// 0x0010 (0x0010 - 0x0000)
struct MarinerCaptureVolumeBase_IsCharacterCurrentlyCapturing final
{
public:
	const class AMarinerCharacter*                TestCharacter;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1589[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCaptureVolumeBase_IsCharacterCurrentlyCapturing) == 0x000008, "Wrong alignment on MarinerCaptureVolumeBase_IsCharacterCurrentlyCapturing");
static_assert(sizeof(MarinerCaptureVolumeBase_IsCharacterCurrentlyCapturing) == 0x000010, "Wrong size on MarinerCaptureVolumeBase_IsCharacterCurrentlyCapturing");
static_assert(offsetof(MarinerCaptureVolumeBase_IsCharacterCurrentlyCapturing, TestCharacter) == 0x000000, "Member 'MarinerCaptureVolumeBase_IsCharacterCurrentlyCapturing::TestCharacter' has a wrong offset!");
static_assert(offsetof(MarinerCaptureVolumeBase_IsCharacterCurrentlyCapturing, ReturnValue) == 0x000008, "Member 'MarinerCaptureVolumeBase_IsCharacterCurrentlyCapturing::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMultiTeamCaptureVolume.GetCapturePercentage
// 0x0008 (0x0008 - 0x0000)
struct MarinerMultiTeamCaptureVolume_GetCapturePercentage final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMultiTeamCaptureVolume_GetCapturePercentage) == 0x000004, "Wrong alignment on MarinerMultiTeamCaptureVolume_GetCapturePercentage");
static_assert(sizeof(MarinerMultiTeamCaptureVolume_GetCapturePercentage) == 0x000008, "Wrong size on MarinerMultiTeamCaptureVolume_GetCapturePercentage");
static_assert(offsetof(MarinerMultiTeamCaptureVolume_GetCapturePercentage, TeamIndex) == 0x000000, "Member 'MarinerMultiTeamCaptureVolume_GetCapturePercentage::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerMultiTeamCaptureVolume_GetCapturePercentage, ReturnValue) == 0x000004, "Member 'MarinerMultiTeamCaptureVolume_GetCapturePercentage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMultiTeamCaptureVolume.IsCaptured
// 0x0001 (0x0001 - 0x0000)
struct MarinerMultiTeamCaptureVolume_IsCaptured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMultiTeamCaptureVolume_IsCaptured) == 0x000001, "Wrong alignment on MarinerMultiTeamCaptureVolume_IsCaptured");
static_assert(sizeof(MarinerMultiTeamCaptureVolume_IsCaptured) == 0x000001, "Wrong size on MarinerMultiTeamCaptureVolume_IsCaptured");
static_assert(offsetof(MarinerMultiTeamCaptureVolume_IsCaptured, ReturnValue) == 0x000000, "Member 'MarinerMultiTeamCaptureVolume_IsCaptured::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerNumberedProgressBar.SetBarPercentage
// 0x0004 (0x0004 - 0x0000)
struct MarinerNumberedProgressBar_SetBarPercentage final
{
public:
	int32                                         NValue;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerNumberedProgressBar_SetBarPercentage) == 0x000004, "Wrong alignment on MarinerNumberedProgressBar_SetBarPercentage");
static_assert(sizeof(MarinerNumberedProgressBar_SetBarPercentage) == 0x000004, "Wrong size on MarinerNumberedProgressBar_SetBarPercentage");
static_assert(offsetof(MarinerNumberedProgressBar_SetBarPercentage, NValue) == 0x000000, "Member 'MarinerNumberedProgressBar_SetBarPercentage::NValue' has a wrong offset!");

// Function Mariner.MarinerNumberedProgressBar.SetNumberValue
// 0x0004 (0x0004 - 0x0000)
struct MarinerNumberedProgressBar_SetNumberValue final
{
public:
	int32                                         NValue;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerNumberedProgressBar_SetNumberValue) == 0x000004, "Wrong alignment on MarinerNumberedProgressBar_SetNumberValue");
static_assert(sizeof(MarinerNumberedProgressBar_SetNumberValue) == 0x000004, "Wrong size on MarinerNumberedProgressBar_SetNumberValue");
static_assert(offsetof(MarinerNumberedProgressBar_SetNumberValue, NValue) == 0x000000, "Member 'MarinerNumberedProgressBar_SetNumberValue::NValue' has a wrong offset!");

// Function Mariner.MarinerNarrationManager.QueueNarration
// 0x0020 (0x0020 - 0x0000)
struct MarinerNarrationManager_QueueNarration final
{
public:
	class FText                                   NarrationText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158D[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerNarrationManager_QueueNarration) == 0x000008, "Wrong alignment on MarinerNarrationManager_QueueNarration");
static_assert(sizeof(MarinerNarrationManager_QueueNarration) == 0x000020, "Wrong size on MarinerNarrationManager_QueueNarration");
static_assert(offsetof(MarinerNarrationManager_QueueNarration, NarrationText) == 0x000000, "Member 'MarinerNarrationManager_QueueNarration::NarrationText' has a wrong offset!");
static_assert(offsetof(MarinerNarrationManager_QueueNarration, bSelected) == 0x000018, "Member 'MarinerNarrationManager_QueueNarration::bSelected' has a wrong offset!");

// Function Mariner.MarinerMoveUpdate_ApplyRecoveryDefaults.RequestApplyRecovery
// 0x0018 (0x0018 - 0x0000)
struct MarinerMoveUpdate_ApplyRecoveryDefaults_RequestApplyRecovery final
{
public:
	class UMarinerCharacterMovement*              OwningMovementComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerMoveUpdate_ApplyRecoveryDefaults> Defaults;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideMaxSpeedClamp;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideResetJumps;                               // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158F[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMoveUpdate_ApplyRecoveryDefaults_RequestApplyRecovery) == 0x000008, "Wrong alignment on MarinerMoveUpdate_ApplyRecoveryDefaults_RequestApplyRecovery");
static_assert(sizeof(MarinerMoveUpdate_ApplyRecoveryDefaults_RequestApplyRecovery) == 0x000018, "Wrong size on MarinerMoveUpdate_ApplyRecoveryDefaults_RequestApplyRecovery");
static_assert(offsetof(MarinerMoveUpdate_ApplyRecoveryDefaults_RequestApplyRecovery, OwningMovementComponent) == 0x000000, "Member 'MarinerMoveUpdate_ApplyRecoveryDefaults_RequestApplyRecovery::OwningMovementComponent' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_ApplyRecoveryDefaults_RequestApplyRecovery, Defaults) == 0x000008, "Member 'MarinerMoveUpdate_ApplyRecoveryDefaults_RequestApplyRecovery::Defaults' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_ApplyRecoveryDefaults_RequestApplyRecovery, OverrideMaxSpeedClamp) == 0x000010, "Member 'MarinerMoveUpdate_ApplyRecoveryDefaults_RequestApplyRecovery::OverrideMaxSpeedClamp' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_ApplyRecoveryDefaults_RequestApplyRecovery, bOverrideResetJumps) == 0x000014, "Member 'MarinerMoveUpdate_ApplyRecoveryDefaults_RequestApplyRecovery::bOverrideResetJumps' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.ApplyMoveAffectingGameplayEffectToSelf
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilitySystemComponent_ApplyMoveAffectingGameplayEffectToSelf final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1592[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbilitySystemComponent_ApplyMoveAffectingGameplayEffectToSelf) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_ApplyMoveAffectingGameplayEffectToSelf");
static_assert(sizeof(MarinerAbilitySystemComponent_ApplyMoveAffectingGameplayEffectToSelf) == 0x000010, "Wrong size on MarinerAbilitySystemComponent_ApplyMoveAffectingGameplayEffectToSelf");
static_assert(offsetof(MarinerAbilitySystemComponent_ApplyMoveAffectingGameplayEffectToSelf, GameplayEffectClass) == 0x000000, "Member 'MarinerAbilitySystemComponent_ApplyMoveAffectingGameplayEffectToSelf::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_ApplyMoveAffectingGameplayEffectToSelf, Level) == 0x000008, "Member 'MarinerAbilitySystemComponent_ApplyMoveAffectingGameplayEffectToSelf::Level' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.AuthorityTryActivateAbilityByClassWithAimData
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilitySystemComponent_AuthorityTryActivateAbilityByClassWithAimData final
{
public:
	TSubclassOf<class UMarinerAbility>            AbilityClassToGiveAndActivate;                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1593[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbilitySystemComponent_AuthorityTryActivateAbilityByClassWithAimData) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_AuthorityTryActivateAbilityByClassWithAimData");
static_assert(sizeof(MarinerAbilitySystemComponent_AuthorityTryActivateAbilityByClassWithAimData) == 0x000010, "Wrong size on MarinerAbilitySystemComponent_AuthorityTryActivateAbilityByClassWithAimData");
static_assert(offsetof(MarinerAbilitySystemComponent_AuthorityTryActivateAbilityByClassWithAimData, AbilityClassToGiveAndActivate) == 0x000000, "Member 'MarinerAbilitySystemComponent_AuthorityTryActivateAbilityByClassWithAimData::AbilityClassToGiveAndActivate' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_AuthorityTryActivateAbilityByClassWithAimData, ReturnValue) == 0x000008, "Member 'MarinerAbilitySystemComponent_AuthorityTryActivateAbilityByClassWithAimData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.BP_TryActivateAbilityByClass
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilitySystemComponent_BP_TryActivateAbilityByClass final
{
public:
	TSubclassOf<class UMarinerAbility>            AbilityClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSendAimData;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1594[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbilitySystemComponent_BP_TryActivateAbilityByClass) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_BP_TryActivateAbilityByClass");
static_assert(sizeof(MarinerAbilitySystemComponent_BP_TryActivateAbilityByClass) == 0x000010, "Wrong size on MarinerAbilitySystemComponent_BP_TryActivateAbilityByClass");
static_assert(offsetof(MarinerAbilitySystemComponent_BP_TryActivateAbilityByClass, AbilityClass) == 0x000000, "Member 'MarinerAbilitySystemComponent_BP_TryActivateAbilityByClass::AbilityClass' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_BP_TryActivateAbilityByClass, bSendAimData) == 0x000008, "Member 'MarinerAbilitySystemComponent_BP_TryActivateAbilityByClass::bSendAimData' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.FindOrGiveAbility
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilitySystemComponent_FindOrGiveAbility final
{
public:
	TSubclassOf<class UMarinerAbility>            GameplayAbilityClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityLevel;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilitySystemComponent_FindOrGiveAbility) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_FindOrGiveAbility");
static_assert(sizeof(MarinerAbilitySystemComponent_FindOrGiveAbility) == 0x000010, "Wrong size on MarinerAbilitySystemComponent_FindOrGiveAbility");
static_assert(offsetof(MarinerAbilitySystemComponent_FindOrGiveAbility, GameplayAbilityClass) == 0x000000, "Member 'MarinerAbilitySystemComponent_FindOrGiveAbility::GameplayAbilityClass' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_FindOrGiveAbility, AbilityLevel) == 0x000008, "Member 'MarinerAbilitySystemComponent_FindOrGiveAbility::AbilityLevel' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_FindOrGiveAbility, ReturnValue) == 0x00000C, "Member 'MarinerAbilitySystemComponent_FindOrGiveAbility::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.ForceCustomInputQueuingEvent
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbilitySystemComponent_ForceCustomInputQueuingEvent final
{
public:
	class UMarinerAbility*                        AbilityInstance;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilitySystemComponent_ForceCustomInputQueuingEvent) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_ForceCustomInputQueuingEvent");
static_assert(sizeof(MarinerAbilitySystemComponent_ForceCustomInputQueuingEvent) == 0x000008, "Wrong size on MarinerAbilitySystemComponent_ForceCustomInputQueuingEvent");
static_assert(offsetof(MarinerAbilitySystemComponent_ForceCustomInputQueuingEvent, AbilityInstance) == 0x000000, "Member 'MarinerAbilitySystemComponent_ForceCustomInputQueuingEvent::AbilityInstance' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.GetAbilityInstanceForAbilityClass
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilitySystemComponent_GetAbilityInstanceForAbilityClass final
{
public:
	TSubclassOf<class UMarinerAbility>            GameplayAbilityClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilitySystemComponent_GetAbilityInstanceForAbilityClass) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_GetAbilityInstanceForAbilityClass");
static_assert(sizeof(MarinerAbilitySystemComponent_GetAbilityInstanceForAbilityClass) == 0x000010, "Wrong size on MarinerAbilitySystemComponent_GetAbilityInstanceForAbilityClass");
static_assert(offsetof(MarinerAbilitySystemComponent_GetAbilityInstanceForAbilityClass, GameplayAbilityClass) == 0x000000, "Member 'MarinerAbilitySystemComponent_GetAbilityInstanceForAbilityClass::GameplayAbilityClass' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_GetAbilityInstanceForAbilityClass, ReturnValue) == 0x000008, "Member 'MarinerAbilitySystemComponent_GetAbilityInstanceForAbilityClass::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.GetAllActivatableAbilitiesWithOwnedTag
// 0x0018 (0x0018 - 0x0000)
struct MarinerAbilitySystemComponent_GetAllActivatableAbilitiesWithOwnedTag final
{
public:
	struct FGameplayTag                           OwnedTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayAbilitySpec>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilitySystemComponent_GetAllActivatableAbilitiesWithOwnedTag) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_GetAllActivatableAbilitiesWithOwnedTag");
static_assert(sizeof(MarinerAbilitySystemComponent_GetAllActivatableAbilitiesWithOwnedTag) == 0x000018, "Wrong size on MarinerAbilitySystemComponent_GetAllActivatableAbilitiesWithOwnedTag");
static_assert(offsetof(MarinerAbilitySystemComponent_GetAllActivatableAbilitiesWithOwnedTag, OwnedTag) == 0x000000, "Member 'MarinerAbilitySystemComponent_GetAllActivatableAbilitiesWithOwnedTag::OwnedTag' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_GetAllActivatableAbilitiesWithOwnedTag, ReturnValue) == 0x000008, "Member 'MarinerAbilitySystemComponent_GetAllActivatableAbilitiesWithOwnedTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.GetPredictedGameplayEffectCount
// 0x0020 (0x0020 - 0x0000)
struct MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount final
{
public:
	TSubclassOf<class UGameplayEffect>            SourceGameplayEffect;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                OptionalInstigatorFilterComponent;                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutBaseCount;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutPendingApply;                                   // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutPendingRemove;                                  // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnforceOnGoingCheck;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1595[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount");
static_assert(sizeof(MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount) == 0x000020, "Wrong size on MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount");
static_assert(offsetof(MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount, SourceGameplayEffect) == 0x000000, "Member 'MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount::SourceGameplayEffect' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount, OptionalInstigatorFilterComponent) == 0x000008, "Member 'MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount::OptionalInstigatorFilterComponent' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount, OutBaseCount) == 0x000010, "Member 'MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount::OutBaseCount' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount, OutPendingApply) == 0x000014, "Member 'MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount::OutPendingApply' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount, OutPendingRemove) == 0x000018, "Member 'MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount::OutPendingRemove' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount, bEnforceOnGoingCheck) == 0x00001C, "Member 'MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount::bEnforceOnGoingCheck' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.LocalTryActivateAbilityByClassWithAimData
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilitySystemComponent_LocalTryActivateAbilityByClassWithAimData final
{
public:
	TSubclassOf<class UMarinerAbility>            AbilityClassToGiveAndActivate;                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1596[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbilitySystemComponent_LocalTryActivateAbilityByClassWithAimData) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_LocalTryActivateAbilityByClassWithAimData");
static_assert(sizeof(MarinerAbilitySystemComponent_LocalTryActivateAbilityByClassWithAimData) == 0x000010, "Wrong size on MarinerAbilitySystemComponent_LocalTryActivateAbilityByClassWithAimData");
static_assert(offsetof(MarinerAbilitySystemComponent_LocalTryActivateAbilityByClassWithAimData, AbilityClassToGiveAndActivate) == 0x000000, "Member 'MarinerAbilitySystemComponent_LocalTryActivateAbilityByClassWithAimData::AbilityClassToGiveAndActivate' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_LocalTryActivateAbilityByClassWithAimData, ReturnValue) == 0x000008, "Member 'MarinerAbilitySystemComponent_LocalTryActivateAbilityByClassWithAimData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.ModifyActiveGameplayEffectDuration
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilitySystemComponent_ModifyActiveGameplayEffectDuration final
{
public:
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeInDuration;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1597[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbilitySystemComponent_ModifyActiveGameplayEffectDuration) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_ModifyActiveGameplayEffectDuration");
static_assert(sizeof(MarinerAbilitySystemComponent_ModifyActiveGameplayEffectDuration) == 0x000010, "Wrong size on MarinerAbilitySystemComponent_ModifyActiveGameplayEffectDuration");
static_assert(offsetof(MarinerAbilitySystemComponent_ModifyActiveGameplayEffectDuration, Effect) == 0x000000, "Member 'MarinerAbilitySystemComponent_ModifyActiveGameplayEffectDuration::Effect' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_ModifyActiveGameplayEffectDuration, ChangeInDuration) == 0x000008, "Member 'MarinerAbilitySystemComponent_ModifyActiveGameplayEffectDuration::ChangeInDuration' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.OnAnyGameplayEffectRemoved
// 0x0370 (0x0370 - 0x0000)
struct MarinerAbilitySystemComponent_OnAnyGameplayEffectRemoved final
{
public:
	struct FActiveGameplayEffect                  RemovedEffect;                                     // 0x0000(0x0370)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilitySystemComponent_OnAnyGameplayEffectRemoved) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_OnAnyGameplayEffectRemoved");
static_assert(sizeof(MarinerAbilitySystemComponent_OnAnyGameplayEffectRemoved) == 0x000370, "Wrong size on MarinerAbilitySystemComponent_OnAnyGameplayEffectRemoved");
static_assert(offsetof(MarinerAbilitySystemComponent_OnAnyGameplayEffectRemoved, RemovedEffect) == 0x000000, "Member 'MarinerAbilitySystemComponent_OnAnyGameplayEffectRemoved::RemovedEffect' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.OnAnyGameplayTagChanged
// 0x000C (0x000C - 0x0000)
struct MarinerAbilitySystemComponent_OnAnyGameplayTagChanged final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilitySystemComponent_OnAnyGameplayTagChanged) == 0x000004, "Wrong alignment on MarinerAbilitySystemComponent_OnAnyGameplayTagChanged");
static_assert(sizeof(MarinerAbilitySystemComponent_OnAnyGameplayTagChanged) == 0x00000C, "Wrong size on MarinerAbilitySystemComponent_OnAnyGameplayTagChanged");
static_assert(offsetof(MarinerAbilitySystemComponent_OnAnyGameplayTagChanged, Tag) == 0x000000, "Member 'MarinerAbilitySystemComponent_OnAnyGameplayTagChanged::Tag' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_OnAnyGameplayTagChanged, NewCount) == 0x000008, "Member 'MarinerAbilitySystemComponent_OnAnyGameplayTagChanged::NewCount' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.OnOwnerDamageChanged
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilitySystemComponent_OnOwnerDamageChanged final
{
public:
	const class UMarinerDamageableComponent*      RelevantDamageableComponent;                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewAccumulatedDamage;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldAccumulatedDamage;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilitySystemComponent_OnOwnerDamageChanged) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_OnOwnerDamageChanged");
static_assert(sizeof(MarinerAbilitySystemComponent_OnOwnerDamageChanged) == 0x000010, "Wrong size on MarinerAbilitySystemComponent_OnOwnerDamageChanged");
static_assert(offsetof(MarinerAbilitySystemComponent_OnOwnerDamageChanged, RelevantDamageableComponent) == 0x000000, "Member 'MarinerAbilitySystemComponent_OnOwnerDamageChanged::RelevantDamageableComponent' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_OnOwnerDamageChanged, NewAccumulatedDamage) == 0x000008, "Member 'MarinerAbilitySystemComponent_OnOwnerDamageChanged::NewAccumulatedDamage' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_OnOwnerDamageChanged, OldAccumulatedDamage) == 0x00000C, "Member 'MarinerAbilitySystemComponent_OnOwnerDamageChanged::OldAccumulatedDamage' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.RemoveLocalGameplayEffect
// 0x0018 (0x0018 - 0x0000)
struct MarinerAbilitySystemComponent_RemoveLocalGameplayEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                InstigatorAbilitySystemComponent;                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StacksToRemove;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1598[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbilitySystemComponent_RemoveLocalGameplayEffect) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_RemoveLocalGameplayEffect");
static_assert(sizeof(MarinerAbilitySystemComponent_RemoveLocalGameplayEffect) == 0x000018, "Wrong size on MarinerAbilitySystemComponent_RemoveLocalGameplayEffect");
static_assert(offsetof(MarinerAbilitySystemComponent_RemoveLocalGameplayEffect, GameplayEffect) == 0x000000, "Member 'MarinerAbilitySystemComponent_RemoveLocalGameplayEffect::GameplayEffect' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_RemoveLocalGameplayEffect, InstigatorAbilitySystemComponent) == 0x000008, "Member 'MarinerAbilitySystemComponent_RemoveLocalGameplayEffect::InstigatorAbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_RemoveLocalGameplayEffect, StacksToRemove) == 0x000010, "Member 'MarinerAbilitySystemComponent_RemoveLocalGameplayEffect::StacksToRemove' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.RemoveMoveAffectingGameplayEffectFromSelf
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbilitySystemComponent_RemoveMoveAffectingGameplayEffectFromSelf final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilitySystemComponent_RemoveMoveAffectingGameplayEffectFromSelf) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_RemoveMoveAffectingGameplayEffectFromSelf");
static_assert(sizeof(MarinerAbilitySystemComponent_RemoveMoveAffectingGameplayEffectFromSelf) == 0x000008, "Wrong size on MarinerAbilitySystemComponent_RemoveMoveAffectingGameplayEffectFromSelf");
static_assert(offsetof(MarinerAbilitySystemComponent_RemoveMoveAffectingGameplayEffectFromSelf, GameplayEffectClass) == 0x000000, "Member 'MarinerAbilitySystemComponent_RemoveMoveAffectingGameplayEffectFromSelf::GameplayEffectClass' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.TryActivateAbilityByGameplayTag
// 0x000C (0x000C - 0x0000)
struct MarinerAbilitySystemComponent_TryActivateAbilityByGameplayTag final
{
public:
	struct FGameplayTag                           GamplayAbilityTag;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1599[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbilitySystemComponent_TryActivateAbilityByGameplayTag) == 0x000004, "Wrong alignment on MarinerAbilitySystemComponent_TryActivateAbilityByGameplayTag");
static_assert(sizeof(MarinerAbilitySystemComponent_TryActivateAbilityByGameplayTag) == 0x00000C, "Wrong size on MarinerAbilitySystemComponent_TryActivateAbilityByGameplayTag");
static_assert(offsetof(MarinerAbilitySystemComponent_TryActivateAbilityByGameplayTag, GamplayAbilityTag) == 0x000000, "Member 'MarinerAbilitySystemComponent_TryActivateAbilityByGameplayTag::GamplayAbilityTag' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_TryActivateAbilityByGameplayTag, ReturnValue) == 0x000008, "Member 'MarinerAbilitySystemComponent_TryActivateAbilityByGameplayTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.GetAbilityInstancesOfType
// 0x0018 (0x0018 - 0x0000)
struct MarinerAbilitySystemComponent_GetAbilityInstancesOfType final
{
public:
	TSubclassOf<class UMarinerAbility>            MarinerAbilityClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMarinerAbility*>                OutAbilityInstances;                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilitySystemComponent_GetAbilityInstancesOfType) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_GetAbilityInstancesOfType");
static_assert(sizeof(MarinerAbilitySystemComponent_GetAbilityInstancesOfType) == 0x000018, "Wrong size on MarinerAbilitySystemComponent_GetAbilityInstancesOfType");
static_assert(offsetof(MarinerAbilitySystemComponent_GetAbilityInstancesOfType, MarinerAbilityClass) == 0x000000, "Member 'MarinerAbilitySystemComponent_GetAbilityInstancesOfType::MarinerAbilityClass' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_GetAbilityInstancesOfType, OutAbilityInstances) == 0x000008, "Member 'MarinerAbilitySystemComponent_GetAbilityInstancesOfType::OutAbilityInstances' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.GetAbilitySpecHandleForAbilityClass
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilitySystemComponent_GetAbilitySpecHandleForAbilityClass final
{
public:
	TSubclassOf<class UMarinerAbility>            GameplayAbilityClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159A[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbilitySystemComponent_GetAbilitySpecHandleForAbilityClass) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_GetAbilitySpecHandleForAbilityClass");
static_assert(sizeof(MarinerAbilitySystemComponent_GetAbilitySpecHandleForAbilityClass) == 0x000010, "Wrong size on MarinerAbilitySystemComponent_GetAbilitySpecHandleForAbilityClass");
static_assert(offsetof(MarinerAbilitySystemComponent_GetAbilitySpecHandleForAbilityClass, GameplayAbilityClass) == 0x000000, "Member 'MarinerAbilitySystemComponent_GetAbilitySpecHandleForAbilityClass::GameplayAbilityClass' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_GetAbilitySpecHandleForAbilityClass, ReturnValue) == 0x000008, "Member 'MarinerAbilitySystemComponent_GetAbilitySpecHandleForAbilityClass::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.GetGameplayEffectLevel
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilitySystemComponent_GetGameplayEffectLevel final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159B[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbilitySystemComponent_GetGameplayEffectLevel) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_GetGameplayEffectLevel");
static_assert(sizeof(MarinerAbilitySystemComponent_GetGameplayEffectLevel) == 0x000010, "Wrong size on MarinerAbilitySystemComponent_GetGameplayEffectLevel");
static_assert(offsetof(MarinerAbilitySystemComponent_GetGameplayEffectLevel, GameplayEffect) == 0x000000, "Member 'MarinerAbilitySystemComponent_GetGameplayEffectLevel::GameplayEffect' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_GetGameplayEffectLevel, ReturnValue) == 0x000008, "Member 'MarinerAbilitySystemComponent_GetGameplayEffectLevel::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.GetMarinerCharacterMovement
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbilitySystemComponent_GetMarinerCharacterMovement final
{
public:
	class UMarinerCharacterMovement*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilitySystemComponent_GetMarinerCharacterMovement) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_GetMarinerCharacterMovement");
static_assert(sizeof(MarinerAbilitySystemComponent_GetMarinerCharacterMovement) == 0x000008, "Wrong size on MarinerAbilitySystemComponent_GetMarinerCharacterMovement");
static_assert(offsetof(MarinerAbilitySystemComponent_GetMarinerCharacterMovement, ReturnValue) == 0x000000, "Member 'MarinerAbilitySystemComponent_GetMarinerCharacterMovement::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.GetMarinerCharacterOwner
// 0x0008 (0x0008 - 0x0000)
struct MarinerAbilitySystemComponent_GetMarinerCharacterOwner final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilitySystemComponent_GetMarinerCharacterOwner) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_GetMarinerCharacterOwner");
static_assert(sizeof(MarinerAbilitySystemComponent_GetMarinerCharacterOwner) == 0x000008, "Wrong size on MarinerAbilitySystemComponent_GetMarinerCharacterOwner");
static_assert(offsetof(MarinerAbilitySystemComponent_GetMarinerCharacterOwner, ReturnValue) == 0x000000, "Member 'MarinerAbilitySystemComponent_GetMarinerCharacterOwner::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.HasAbilityOfType
// 0x0010 (0x0010 - 0x0000)
struct MarinerAbilitySystemComponent_HasAbilityOfType final
{
public:
	TSubclassOf<class UMarinerAbility>            GameplayAbilityClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAbilitySystemComponent_HasAbilityOfType) == 0x000008, "Wrong alignment on MarinerAbilitySystemComponent_HasAbilityOfType");
static_assert(sizeof(MarinerAbilitySystemComponent_HasAbilityOfType) == 0x000010, "Wrong size on MarinerAbilitySystemComponent_HasAbilityOfType");
static_assert(offsetof(MarinerAbilitySystemComponent_HasAbilityOfType, GameplayAbilityClass) == 0x000000, "Member 'MarinerAbilitySystemComponent_HasAbilityOfType::GameplayAbilityClass' has a wrong offset!");
static_assert(offsetof(MarinerAbilitySystemComponent_HasAbilityOfType, ReturnValue) == 0x000008, "Member 'MarinerAbilitySystemComponent_HasAbilityOfType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbilitySystemComponent.HasOwnerAuthority
// 0x0001 (0x0001 - 0x0000)
struct MarinerAbilitySystemComponent_HasOwnerAuthority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbilitySystemComponent_HasOwnerAuthority) == 0x000001, "Wrong alignment on MarinerAbilitySystemComponent_HasOwnerAuthority");
static_assert(sizeof(MarinerAbilitySystemComponent_HasOwnerAuthority) == 0x000001, "Wrong size on MarinerAbilitySystemComponent_HasOwnerAuthority");
static_assert(offsetof(MarinerAbilitySystemComponent_HasOwnerAuthority, ReturnValue) == 0x000000, "Member 'MarinerAbilitySystemComponent_HasOwnerAuthority::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerNetworkInformationWidget.OnShowNetworkInformationChanged
// 0x0001 (0x0001 - 0x0000)
struct MarinerNetworkInformationWidget_OnShowNetworkInformationChanged final
{
public:
	bool                                          bStatus;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerNetworkInformationWidget_OnShowNetworkInformationChanged) == 0x000001, "Wrong alignment on MarinerNetworkInformationWidget_OnShowNetworkInformationChanged");
static_assert(sizeof(MarinerNetworkInformationWidget_OnShowNetworkInformationChanged) == 0x000001, "Wrong size on MarinerNetworkInformationWidget_OnShowNetworkInformationChanged");
static_assert(offsetof(MarinerNetworkInformationWidget_OnShowNetworkInformationChanged, bStatus) == 0x000000, "Member 'MarinerNetworkInformationWidget_OnShowNetworkInformationChanged::bStatus' has a wrong offset!");

// Function Mariner.MarinerStaticMeshProp.AuthoritySetShouldIgnoreImpulses
// 0x0001 (0x0001 - 0x0000)
struct MarinerStaticMeshProp_AuthoritySetShouldIgnoreImpulses final
{
public:
	bool                                          bInShouldIgnoreImpulses;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerStaticMeshProp_AuthoritySetShouldIgnoreImpulses) == 0x000001, "Wrong alignment on MarinerStaticMeshProp_AuthoritySetShouldIgnoreImpulses");
static_assert(sizeof(MarinerStaticMeshProp_AuthoritySetShouldIgnoreImpulses) == 0x000001, "Wrong size on MarinerStaticMeshProp_AuthoritySetShouldIgnoreImpulses");
static_assert(offsetof(MarinerStaticMeshProp_AuthoritySetShouldIgnoreImpulses, bInShouldIgnoreImpulses) == 0x000000, "Member 'MarinerStaticMeshProp_AuthoritySetShouldIgnoreImpulses::bInShouldIgnoreImpulses' has a wrong offset!");

// Function Mariner.MarinerStaticMeshProp.SetTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerStaticMeshProp_SetTeamIndex final
{
public:
	int32                                         InTeamIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerStaticMeshProp_SetTeamIndex) == 0x000004, "Wrong alignment on MarinerStaticMeshProp_SetTeamIndex");
static_assert(sizeof(MarinerStaticMeshProp_SetTeamIndex) == 0x000004, "Wrong size on MarinerStaticMeshProp_SetTeamIndex");
static_assert(offsetof(MarinerStaticMeshProp_SetTeamIndex, InTeamIndex) == 0x000000, "Member 'MarinerStaticMeshProp_SetTeamIndex::InTeamIndex' has a wrong offset!");

// Function Mariner.MarinerStaticMeshProp.BP_GetDamageableComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerStaticMeshProp_BP_GetDamageableComponent final
{
public:
	class UMarinerDamageableComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerStaticMeshProp_BP_GetDamageableComponent) == 0x000008, "Wrong alignment on MarinerStaticMeshProp_BP_GetDamageableComponent");
static_assert(sizeof(MarinerStaticMeshProp_BP_GetDamageableComponent) == 0x000008, "Wrong size on MarinerStaticMeshProp_BP_GetDamageableComponent");
static_assert(offsetof(MarinerStaticMeshProp_BP_GetDamageableComponent, ReturnValue) == 0x000000, "Member 'MarinerStaticMeshProp_BP_GetDamageableComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerStaticMeshProp.GetTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerStaticMeshProp_GetTeamIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerStaticMeshProp_GetTeamIndex) == 0x000004, "Wrong alignment on MarinerStaticMeshProp_GetTeamIndex");
static_assert(sizeof(MarinerStaticMeshProp_GetTeamIndex) == 0x000004, "Wrong size on MarinerStaticMeshProp_GetTeamIndex");
static_assert(offsetof(MarinerStaticMeshProp_GetTeamIndex, ReturnValue) == 0x000000, "Member 'MarinerStaticMeshProp_GetTeamIndex::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAbsorbExplosionInterface.RespondToExplosionAbsorbed
// 0x0090 (0x0090 - 0x0000)
struct MarinerAbsorbExplosionInterface_RespondToExplosionAbsorbed final
{
public:
	class AActor*                                 ExplodeInstigator;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             ExplosionHit;                                      // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAbsorbExplosionInterface_RespondToExplosionAbsorbed) == 0x000008, "Wrong alignment on MarinerAbsorbExplosionInterface_RespondToExplosionAbsorbed");
static_assert(sizeof(MarinerAbsorbExplosionInterface_RespondToExplosionAbsorbed) == 0x000090, "Wrong size on MarinerAbsorbExplosionInterface_RespondToExplosionAbsorbed");
static_assert(offsetof(MarinerAbsorbExplosionInterface_RespondToExplosionAbsorbed, ExplodeInstigator) == 0x000000, "Member 'MarinerAbsorbExplosionInterface_RespondToExplosionAbsorbed::ExplodeInstigator' has a wrong offset!");
static_assert(offsetof(MarinerAbsorbExplosionInterface_RespondToExplosionAbsorbed, ExplosionHit) == 0x000008, "Member 'MarinerAbsorbExplosionInterface_RespondToExplosionAbsorbed::ExplosionHit' has a wrong offset!");

// Function Mariner.MarinerOfferListMessageBox.ButtonCallback
// 0x0008 (0x0008 - 0x0000)
struct MarinerOfferListMessageBox_ButtonCallback final
{
public:
	class UMarinerLayeredButton*                  Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOfferListMessageBox_ButtonCallback) == 0x000008, "Wrong alignment on MarinerOfferListMessageBox_ButtonCallback");
static_assert(sizeof(MarinerOfferListMessageBox_ButtonCallback) == 0x000008, "Wrong size on MarinerOfferListMessageBox_ButtonCallback");
static_assert(offsetof(MarinerOfferListMessageBox_ButtonCallback, Button) == 0x000000, "Member 'MarinerOfferListMessageBox_ButtonCallback::Button' has a wrong offset!");

// Function Mariner.MarinerOfferListMessageBox.PopulateNativeOffer
// 0x0018 (0x0018 - 0x0000)
struct MarinerOfferListMessageBox_PopulateNativeOffer final
{
public:
	class UMarinerLayeredButton*                  ButtonInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfferId;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOfferListMessageBox_PopulateNativeOffer) == 0x000008, "Wrong alignment on MarinerOfferListMessageBox_PopulateNativeOffer");
static_assert(sizeof(MarinerOfferListMessageBox_PopulateNativeOffer) == 0x000018, "Wrong size on MarinerOfferListMessageBox_PopulateNativeOffer");
static_assert(offsetof(MarinerOfferListMessageBox_PopulateNativeOffer, ButtonInstance) == 0x000000, "Member 'MarinerOfferListMessageBox_PopulateNativeOffer::ButtonInstance' has a wrong offset!");
static_assert(offsetof(MarinerOfferListMessageBox_PopulateNativeOffer, OfferId) == 0x000008, "Member 'MarinerOfferListMessageBox_PopulateNativeOffer::OfferId' has a wrong offset!");

// Function Mariner.MarinerOfferListMessageBox.PopulateOffer
// 0x0018 (0x0018 - 0x0000)
struct MarinerOfferListMessageBox_PopulateOffer final
{
public:
	class UMarinerLayeredButton*                  ButtonInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfferId;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOfferListMessageBox_PopulateOffer) == 0x000008, "Wrong alignment on MarinerOfferListMessageBox_PopulateOffer");
static_assert(sizeof(MarinerOfferListMessageBox_PopulateOffer) == 0x000018, "Wrong size on MarinerOfferListMessageBox_PopulateOffer");
static_assert(offsetof(MarinerOfferListMessageBox_PopulateOffer, ButtonInstance) == 0x000000, "Member 'MarinerOfferListMessageBox_PopulateOffer::ButtonInstance' has a wrong offset!");
static_assert(offsetof(MarinerOfferListMessageBox_PopulateOffer, OfferId) == 0x000008, "Member 'MarinerOfferListMessageBox_PopulateOffer::OfferId' has a wrong offset!");

// Function Mariner.MarinerOfferListMessageBox.GetData
// 0x0110 (0x0110 - 0x0000)
struct MarinerOfferListMessageBox_GetData final
{
public:
	struct FMarinerMessageBoxOfferListData        ReturnValue;                                       // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOfferListMessageBox_GetData) == 0x000008, "Wrong alignment on MarinerOfferListMessageBox_GetData");
static_assert(sizeof(MarinerOfferListMessageBox_GetData) == 0x000110, "Wrong size on MarinerOfferListMessageBox_GetData");
static_assert(offsetof(MarinerOfferListMessageBox_GetData, ReturnValue) == 0x000000, "Member 'MarinerOfferListMessageBox_GetData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerNetworkGameplayCueActor.NetMulticast_HandleGameplayCue_AddAndWhileActive
// 0x00C8 (0x00C8 - 0x0000)
struct MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_AddAndWhileActive final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x00B8)(ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_AddAndWhileActive) == 0x000008, "Wrong alignment on MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_AddAndWhileActive");
static_assert(sizeof(MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_AddAndWhileActive) == 0x0000C8, "Wrong size on MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_AddAndWhileActive");
static_assert(offsetof(MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_AddAndWhileActive, TargetActor) == 0x000000, "Member 'MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_AddAndWhileActive::TargetActor' has a wrong offset!");
static_assert(offsetof(MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_AddAndWhileActive, GameplayCueTag) == 0x000008, "Member 'MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_AddAndWhileActive::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_AddAndWhileActive, Parameters) == 0x000010, "Member 'MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_AddAndWhileActive::Parameters' has a wrong offset!");

// Function Mariner.MarinerNetworkGameplayCueActor.NetMulticast_HandleGameplayCue_Remove
// 0x00C8 (0x00C8 - 0x0000)
struct MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_Remove final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x00B8)(ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_Remove) == 0x000008, "Wrong alignment on MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_Remove");
static_assert(sizeof(MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_Remove) == 0x0000C8, "Wrong size on MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_Remove");
static_assert(offsetof(MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_Remove, TargetActor) == 0x000000, "Member 'MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_Remove::TargetActor' has a wrong offset!");
static_assert(offsetof(MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_Remove, GameplayCueTag) == 0x000008, "Member 'MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_Remove::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_Remove, Parameters) == 0x000010, "Member 'MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_Remove::Parameters' has a wrong offset!");

// Function Mariner.MarinerActivationDevice.AuthorityActivate
// 0x0008 (0x0008 - 0x0000)
struct MarinerActivationDevice_AuthorityActivate final
{
public:
	class AMarinerCharacter*                      InInstigator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerActivationDevice_AuthorityActivate) == 0x000008, "Wrong alignment on MarinerActivationDevice_AuthorityActivate");
static_assert(sizeof(MarinerActivationDevice_AuthorityActivate) == 0x000008, "Wrong size on MarinerActivationDevice_AuthorityActivate");
static_assert(offsetof(MarinerActivationDevice_AuthorityActivate, InInstigator) == 0x000000, "Member 'MarinerActivationDevice_AuthorityActivate::InInstigator' has a wrong offset!");

// Function Mariner.MarinerActivationDevice.EventPointDamage
// 0x0058 (0x0058 - 0x0000)
struct MarinerActivationDevice_EventPointDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15A9[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15AA[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShotFromDirection;                                 // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15AB[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerActivationDevice_EventPointDamage) == 0x000008, "Wrong alignment on MarinerActivationDevice_EventPointDamage");
static_assert(sizeof(MarinerActivationDevice_EventPointDamage) == 0x000058, "Wrong size on MarinerActivationDevice_EventPointDamage");
static_assert(offsetof(MarinerActivationDevice_EventPointDamage, DamagedActor) == 0x000000, "Member 'MarinerActivationDevice_EventPointDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(MarinerActivationDevice_EventPointDamage, Damage) == 0x000008, "Member 'MarinerActivationDevice_EventPointDamage::Damage' has a wrong offset!");
static_assert(offsetof(MarinerActivationDevice_EventPointDamage, InstigatedBy) == 0x000010, "Member 'MarinerActivationDevice_EventPointDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(MarinerActivationDevice_EventPointDamage, HitLocation) == 0x000018, "Member 'MarinerActivationDevice_EventPointDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(MarinerActivationDevice_EventPointDamage, FHitComponent) == 0x000028, "Member 'MarinerActivationDevice_EventPointDamage::FHitComponent' has a wrong offset!");
static_assert(offsetof(MarinerActivationDevice_EventPointDamage, BoneName) == 0x000030, "Member 'MarinerActivationDevice_EventPointDamage::BoneName' has a wrong offset!");
static_assert(offsetof(MarinerActivationDevice_EventPointDamage, ShotFromDirection) == 0x000038, "Member 'MarinerActivationDevice_EventPointDamage::ShotFromDirection' has a wrong offset!");
static_assert(offsetof(MarinerActivationDevice_EventPointDamage, DamageType) == 0x000048, "Member 'MarinerActivationDevice_EventPointDamage::DamageType' has a wrong offset!");
static_assert(offsetof(MarinerActivationDevice_EventPointDamage, DamageCauser) == 0x000050, "Member 'MarinerActivationDevice_EventPointDamage::DamageCauser' has a wrong offset!");

// Function Mariner.MarinerActivationDevice.IsDeviceReadyToReset
// 0x0001 (0x0001 - 0x0000)
struct MarinerActivationDevice_IsDeviceReadyToReset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerActivationDevice_IsDeviceReadyToReset) == 0x000001, "Wrong alignment on MarinerActivationDevice_IsDeviceReadyToReset");
static_assert(sizeof(MarinerActivationDevice_IsDeviceReadyToReset) == 0x000001, "Wrong size on MarinerActivationDevice_IsDeviceReadyToReset");
static_assert(offsetof(MarinerActivationDevice_IsDeviceReadyToReset, ReturnValue) == 0x000000, "Member 'MarinerActivationDevice_IsDeviceReadyToReset::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerActivationDevice.OnActivationComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct MarinerActivationDevice_OnActivationComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_15AC[0x4];                                     // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerActivationDevice_OnActivationComponentHit) == 0x000008, "Wrong alignment on MarinerActivationDevice_OnActivationComponentHit");
static_assert(sizeof(MarinerActivationDevice_OnActivationComponentHit) == 0x0000B0, "Wrong size on MarinerActivationDevice_OnActivationComponentHit");
static_assert(offsetof(MarinerActivationDevice_OnActivationComponentHit, HitComponent) == 0x000000, "Member 'MarinerActivationDevice_OnActivationComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(MarinerActivationDevice_OnActivationComponentHit, OtherActor) == 0x000008, "Member 'MarinerActivationDevice_OnActivationComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerActivationDevice_OnActivationComponentHit, OtherComp) == 0x000010, "Member 'MarinerActivationDevice_OnActivationComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(MarinerActivationDevice_OnActivationComponentHit, NormalImpulse) == 0x000018, "Member 'MarinerActivationDevice_OnActivationComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(MarinerActivationDevice_OnActivationComponentHit, Hit) == 0x000024, "Member 'MarinerActivationDevice_OnActivationComponentHit::Hit' has a wrong offset!");

// Function Mariner.MarinerActivationDevice.OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct MarinerActivationDevice_OnStateChanged final
{
public:
	EMarinerActivationTargetState                 InNewState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerActivationDevice_OnStateChanged) == 0x000001, "Wrong alignment on MarinerActivationDevice_OnStateChanged");
static_assert(sizeof(MarinerActivationDevice_OnStateChanged) == 0x000001, "Wrong size on MarinerActivationDevice_OnStateChanged");
static_assert(offsetof(MarinerActivationDevice_OnStateChanged, InNewState) == 0x000000, "Member 'MarinerActivationDevice_OnStateChanged::InNewState' has a wrong offset!");

// Function Mariner.MarinerActivationDevice.BP_GetDamageableComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerActivationDevice_BP_GetDamageableComponent final
{
public:
	class UMarinerDamageableComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerActivationDevice_BP_GetDamageableComponent) == 0x000008, "Wrong alignment on MarinerActivationDevice_BP_GetDamageableComponent");
static_assert(sizeof(MarinerActivationDevice_BP_GetDamageableComponent) == 0x000008, "Wrong size on MarinerActivationDevice_BP_GetDamageableComponent");
static_assert(offsetof(MarinerActivationDevice_BP_GetDamageableComponent, ReturnValue) == 0x000000, "Member 'MarinerActivationDevice_BP_GetDamageableComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerActiveItemWidget.OnItemSet
// 0x0090 (0x0090 - 0x0000)
struct MarinerActiveItemWidget_OnItemSet final
{
public:
	struct FSlateBrush                            Icon;                                              // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15AD[0x4];                                     // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerActiveItemWidget_OnItemSet) == 0x000008, "Wrong alignment on MarinerActiveItemWidget_OnItemSet");
static_assert(sizeof(MarinerActiveItemWidget_OnItemSet) == 0x000090, "Wrong size on MarinerActiveItemWidget_OnItemSet");
static_assert(offsetof(MarinerActiveItemWidget_OnItemSet, Icon) == 0x000000, "Member 'MarinerActiveItemWidget_OnItemSet::Icon' has a wrong offset!");
static_assert(offsetof(MarinerActiveItemWidget_OnItemSet, Duration) == 0x000088, "Member 'MarinerActiveItemWidget_OnItemSet::Duration' has a wrong offset!");

// Function Mariner.MarinerActiveItemWidget.SetItemWithDuration
// 0x0098 (0x0098 - 0x0000)
struct MarinerActiveItemWidget_SetItemWithDuration final
{
public:
	class UObject*                                InOwningObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Icon;                                              // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15AE[0x4];                                     // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerActiveItemWidget_SetItemWithDuration) == 0x000008, "Wrong alignment on MarinerActiveItemWidget_SetItemWithDuration");
static_assert(sizeof(MarinerActiveItemWidget_SetItemWithDuration) == 0x000098, "Wrong size on MarinerActiveItemWidget_SetItemWithDuration");
static_assert(offsetof(MarinerActiveItemWidget_SetItemWithDuration, InOwningObject) == 0x000000, "Member 'MarinerActiveItemWidget_SetItemWithDuration::InOwningObject' has a wrong offset!");
static_assert(offsetof(MarinerActiveItemWidget_SetItemWithDuration, Icon) == 0x000008, "Member 'MarinerActiveItemWidget_SetItemWithDuration::Icon' has a wrong offset!");
static_assert(offsetof(MarinerActiveItemWidget_SetItemWithDuration, Duration) == 0x000090, "Member 'MarinerActiveItemWidget_SetItemWithDuration::Duration' has a wrong offset!");

// Function Mariner.MarinerActiveItemWidget.IsOwningObject
// 0x0010 (0x0010 - 0x0000)
struct MarinerActiveItemWidget_IsOwningObject final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15AF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerActiveItemWidget_IsOwningObject) == 0x000008, "Wrong alignment on MarinerActiveItemWidget_IsOwningObject");
static_assert(sizeof(MarinerActiveItemWidget_IsOwningObject) == 0x000010, "Wrong size on MarinerActiveItemWidget_IsOwningObject");
static_assert(offsetof(MarinerActiveItemWidget_IsOwningObject, InObject) == 0x000000, "Member 'MarinerActiveItemWidget_IsOwningObject::InObject' has a wrong offset!");
static_assert(offsetof(MarinerActiveItemWidget_IsOwningObject, ReturnValue) == 0x000008, "Member 'MarinerActiveItemWidget_IsOwningObject::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIController.ActivateAbilityByAction
// 0x0002 (0x0002 - 0x0000)
struct MarinerAIController_ActivateAbilityByAction final
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_ActivateAbilityByAction) == 0x000001, "Wrong alignment on MarinerAIController_ActivateAbilityByAction");
static_assert(sizeof(MarinerAIController_ActivateAbilityByAction) == 0x000002, "Wrong size on MarinerAIController_ActivateAbilityByAction");
static_assert(offsetof(MarinerAIController_ActivateAbilityByAction, InputAction) == 0x000000, "Member 'MarinerAIController_ActivateAbilityByAction::InputAction' has a wrong offset!");
static_assert(offsetof(MarinerAIController_ActivateAbilityByAction, ReturnValue) == 0x000001, "Member 'MarinerAIController_ActivateAbilityByAction::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIController.ActivateAbilityByActionWithAimOverride
// 0x0014 (0x0014 - 0x0000)
struct MarinerAIController_ActivateAbilityByActionWithAimOverride final
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15B2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AimTargetOverride;                                 // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15B3[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAIController_ActivateAbilityByActionWithAimOverride) == 0x000004, "Wrong alignment on MarinerAIController_ActivateAbilityByActionWithAimOverride");
static_assert(sizeof(MarinerAIController_ActivateAbilityByActionWithAimOverride) == 0x000014, "Wrong size on MarinerAIController_ActivateAbilityByActionWithAimOverride");
static_assert(offsetof(MarinerAIController_ActivateAbilityByActionWithAimOverride, InputAction) == 0x000000, "Member 'MarinerAIController_ActivateAbilityByActionWithAimOverride::InputAction' has a wrong offset!");
static_assert(offsetof(MarinerAIController_ActivateAbilityByActionWithAimOverride, AimTargetOverride) == 0x000004, "Member 'MarinerAIController_ActivateAbilityByActionWithAimOverride::AimTargetOverride' has a wrong offset!");
static_assert(offsetof(MarinerAIController_ActivateAbilityByActionWithAimOverride, ReturnValue) == 0x000010, "Member 'MarinerAIController_ActivateAbilityByActionWithAimOverride::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIController.ActivateAbilityByGameplayTag
// 0x000C (0x000C - 0x0000)
struct MarinerAIController_ActivateAbilityByGameplayTag final
{
public:
	struct FGameplayTag                           GamplayAbilityTag;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15B4[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAIController_ActivateAbilityByGameplayTag) == 0x000004, "Wrong alignment on MarinerAIController_ActivateAbilityByGameplayTag");
static_assert(sizeof(MarinerAIController_ActivateAbilityByGameplayTag) == 0x00000C, "Wrong size on MarinerAIController_ActivateAbilityByGameplayTag");
static_assert(offsetof(MarinerAIController_ActivateAbilityByGameplayTag, GamplayAbilityTag) == 0x000000, "Member 'MarinerAIController_ActivateAbilityByGameplayTag::GamplayAbilityTag' has a wrong offset!");
static_assert(offsetof(MarinerAIController_ActivateAbilityByGameplayTag, ReturnValue) == 0x000008, "Member 'MarinerAIController_ActivateAbilityByGameplayTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIController.FindClosestEnemyInLOS
// 0x0008 (0x0008 - 0x0000)
struct MarinerAIController_FindClosestEnemyInLOS final
{
public:
	float                                         LineOfSightRange;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireLOS;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15B5[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAIController_FindClosestEnemyInLOS) == 0x000004, "Wrong alignment on MarinerAIController_FindClosestEnemyInLOS");
static_assert(sizeof(MarinerAIController_FindClosestEnemyInLOS) == 0x000008, "Wrong size on MarinerAIController_FindClosestEnemyInLOS");
static_assert(offsetof(MarinerAIController_FindClosestEnemyInLOS, LineOfSightRange) == 0x000000, "Member 'MarinerAIController_FindClosestEnemyInLOS::LineOfSightRange' has a wrong offset!");
static_assert(offsetof(MarinerAIController_FindClosestEnemyInLOS, bRequireLOS) == 0x000004, "Member 'MarinerAIController_FindClosestEnemyInLOS::bRequireLOS' has a wrong offset!");
static_assert(offsetof(MarinerAIController_FindClosestEnemyInLOS, ReturnValue) == 0x000005, "Member 'MarinerAIController_FindClosestEnemyInLOS::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIController.OnOwnerDamageChanged
// 0x0010 (0x0010 - 0x0000)
struct MarinerAIController_OnOwnerDamageChanged final
{
public:
	const class UMarinerDamageableComponent*      RelevantDamageableComponent;                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewAccumulatedDamage;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldAccumulatedDamage;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_OnOwnerDamageChanged) == 0x000008, "Wrong alignment on MarinerAIController_OnOwnerDamageChanged");
static_assert(sizeof(MarinerAIController_OnOwnerDamageChanged) == 0x000010, "Wrong size on MarinerAIController_OnOwnerDamageChanged");
static_assert(offsetof(MarinerAIController_OnOwnerDamageChanged, RelevantDamageableComponent) == 0x000000, "Member 'MarinerAIController_OnOwnerDamageChanged::RelevantDamageableComponent' has a wrong offset!");
static_assert(offsetof(MarinerAIController_OnOwnerDamageChanged, NewAccumulatedDamage) == 0x000008, "Member 'MarinerAIController_OnOwnerDamageChanged::NewAccumulatedDamage' has a wrong offset!");
static_assert(offsetof(MarinerAIController_OnOwnerDamageChanged, OldAccumulatedDamage) == 0x00000C, "Member 'MarinerAIController_OnOwnerDamageChanged::OldAccumulatedDamage' has a wrong offset!");

// Function Mariner.MarinerAIController.PressAbilityInput
// 0x0003 (0x0003 - 0x0000)
struct MarinerAIController_PressAbilityInput final
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldInstantRelease;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_PressAbilityInput) == 0x000001, "Wrong alignment on MarinerAIController_PressAbilityInput");
static_assert(sizeof(MarinerAIController_PressAbilityInput) == 0x000003, "Wrong size on MarinerAIController_PressAbilityInput");
static_assert(offsetof(MarinerAIController_PressAbilityInput, InputAction) == 0x000000, "Member 'MarinerAIController_PressAbilityInput::InputAction' has a wrong offset!");
static_assert(offsetof(MarinerAIController_PressAbilityInput, bShouldInstantRelease) == 0x000001, "Member 'MarinerAIController_PressAbilityInput::bShouldInstantRelease' has a wrong offset!");
static_assert(offsetof(MarinerAIController_PressAbilityInput, ReturnValue) == 0x000002, "Member 'MarinerAIController_PressAbilityInput::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIController.ReleaseAbilityInput
// 0x0001 (0x0001 - 0x0000)
struct MarinerAIController_ReleaseAbilityInput final
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_ReleaseAbilityInput) == 0x000001, "Wrong alignment on MarinerAIController_ReleaseAbilityInput");
static_assert(sizeof(MarinerAIController_ReleaseAbilityInput) == 0x000001, "Wrong size on MarinerAIController_ReleaseAbilityInput");
static_assert(offsetof(MarinerAIController_ReleaseAbilityInput, InputAction) == 0x000000, "Member 'MarinerAIController_ReleaseAbilityInput::InputAction' has a wrong offset!");

// Function Mariner.MarinerAIController.SetCanRespawn
// 0x0001 (0x0001 - 0x0000)
struct MarinerAIController_SetCanRespawn final
{
public:
	bool                                          bNewCanRespawn;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_SetCanRespawn) == 0x000001, "Wrong alignment on MarinerAIController_SetCanRespawn");
static_assert(sizeof(MarinerAIController_SetCanRespawn) == 0x000001, "Wrong size on MarinerAIController_SetCanRespawn");
static_assert(offsetof(MarinerAIController_SetCanRespawn, bNewCanRespawn) == 0x000000, "Member 'MarinerAIController_SetCanRespawn::bNewCanRespawn' has a wrong offset!");

// Function Mariner.MarinerAIController.SetDormancy
// 0x0001 (0x0001 - 0x0000)
struct MarinerAIController_SetDormancy final
{
public:
	bool                                          bNewDormancy;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_SetDormancy) == 0x000001, "Wrong alignment on MarinerAIController_SetDormancy");
static_assert(sizeof(MarinerAIController_SetDormancy) == 0x000001, "Wrong size on MarinerAIController_SetDormancy");
static_assert(offsetof(MarinerAIController_SetDormancy, bNewDormancy) == 0x000000, "Member 'MarinerAIController_SetDormancy::bNewDormancy' has a wrong offset!");

// Function Mariner.MarinerAIController.SetIsIndependent
// 0x0001 (0x0001 - 0x0000)
struct MarinerAIController_SetIsIndependent final
{
public:
	bool                                          bNewIsIndependent;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_SetIsIndependent) == 0x000001, "Wrong alignment on MarinerAIController_SetIsIndependent");
static_assert(sizeof(MarinerAIController_SetIsIndependent) == 0x000001, "Wrong size on MarinerAIController_SetIsIndependent");
static_assert(offsetof(MarinerAIController_SetIsIndependent, bNewIsIndependent) == 0x000000, "Member 'MarinerAIController_SetIsIndependent::bNewIsIndependent' has a wrong offset!");

// Function Mariner.MarinerAIController.SetObjectiveEnemy
// 0x0008 (0x0008 - 0x0000)
struct MarinerAIController_SetObjectiveEnemy final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_SetObjectiveEnemy) == 0x000008, "Wrong alignment on MarinerAIController_SetObjectiveEnemy");
static_assert(sizeof(MarinerAIController_SetObjectiveEnemy) == 0x000008, "Wrong size on MarinerAIController_SetObjectiveEnemy");
static_assert(offsetof(MarinerAIController_SetObjectiveEnemy, InPawn) == 0x000000, "Member 'MarinerAIController_SetObjectiveEnemy::InPawn' has a wrong offset!");

// Function Mariner.MarinerAIController.ShootTarget
// 0x0008 (0x0008 - 0x0000)
struct MarinerAIController_ShootTarget final
{
public:
	float                                         BurstDuration;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTryToUseSecondary;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15B6[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAIController_ShootTarget) == 0x000004, "Wrong alignment on MarinerAIController_ShootTarget");
static_assert(sizeof(MarinerAIController_ShootTarget) == 0x000008, "Wrong size on MarinerAIController_ShootTarget");
static_assert(offsetof(MarinerAIController_ShootTarget, BurstDuration) == 0x000000, "Member 'MarinerAIController_ShootTarget::BurstDuration' has a wrong offset!");
static_assert(offsetof(MarinerAIController_ShootTarget, bTryToUseSecondary) == 0x000004, "Member 'MarinerAIController_ShootTarget::bTryToUseSecondary' has a wrong offset!");

// Function Mariner.MarinerAIController.GetActivationDevice
// 0x0008 (0x0008 - 0x0000)
struct MarinerAIController_GetActivationDevice final
{
public:
	class AMarinerActivationDevice*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_GetActivationDevice) == 0x000008, "Wrong alignment on MarinerAIController_GetActivationDevice");
static_assert(sizeof(MarinerAIController_GetActivationDevice) == 0x000008, "Wrong size on MarinerAIController_GetActivationDevice");
static_assert(offsetof(MarinerAIController_GetActivationDevice, ReturnValue) == 0x000000, "Member 'MarinerAIController_GetActivationDevice::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIController.GetCurrentObjective
// 0x0010 (0x0010 - 0x0000)
struct MarinerAIController_GetCurrentObjective final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_GetCurrentObjective) == 0x000008, "Wrong alignment on MarinerAIController_GetCurrentObjective");
static_assert(sizeof(MarinerAIController_GetCurrentObjective) == 0x000010, "Wrong size on MarinerAIController_GetCurrentObjective");
static_assert(offsetof(MarinerAIController_GetCurrentObjective, ReturnValue) == 0x000000, "Member 'MarinerAIController_GetCurrentObjective::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIController.GetDifficultyLevel
// 0x0001 (0x0001 - 0x0000)
struct MarinerAIController_GetDifficultyLevel final
{
public:
	EBotDifficultyLevel                           ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_GetDifficultyLevel) == 0x000001, "Wrong alignment on MarinerAIController_GetDifficultyLevel");
static_assert(sizeof(MarinerAIController_GetDifficultyLevel) == 0x000001, "Wrong size on MarinerAIController_GetDifficultyLevel");
static_assert(offsetof(MarinerAIController_GetDifficultyLevel, ReturnValue) == 0x000000, "Member 'MarinerAIController_GetDifficultyLevel::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIController.GetItemToGrab
// 0x0008 (0x0008 - 0x0000)
struct MarinerAIController_GetItemToGrab final
{
public:
	class AMarinerItem*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_GetItemToGrab) == 0x000008, "Wrong alignment on MarinerAIController_GetItemToGrab");
static_assert(sizeof(MarinerAIController_GetItemToGrab) == 0x000008, "Wrong size on MarinerAIController_GetItemToGrab");
static_assert(offsetof(MarinerAIController_GetItemToGrab, ReturnValue) == 0x000000, "Member 'MarinerAIController_GetItemToGrab::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIController.GetLocalEnemy
// 0x0008 (0x0008 - 0x0000)
struct MarinerAIController_GetLocalEnemy final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_GetLocalEnemy) == 0x000008, "Wrong alignment on MarinerAIController_GetLocalEnemy");
static_assert(sizeof(MarinerAIController_GetLocalEnemy) == 0x000008, "Wrong size on MarinerAIController_GetLocalEnemy");
static_assert(offsetof(MarinerAIController_GetLocalEnemy, ReturnValue) == 0x000000, "Member 'MarinerAIController_GetLocalEnemy::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIController.GetObjectiveDestinationQuery
// 0x0008 (0x0008 - 0x0000)
struct MarinerAIController_GetObjectiveDestinationQuery final
{
public:
	class UEnvQuery*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_GetObjectiveDestinationQuery) == 0x000008, "Wrong alignment on MarinerAIController_GetObjectiveDestinationQuery");
static_assert(sizeof(MarinerAIController_GetObjectiveDestinationQuery) == 0x000008, "Wrong size on MarinerAIController_GetObjectiveDestinationQuery");
static_assert(offsetof(MarinerAIController_GetObjectiveDestinationQuery, ReturnValue) == 0x000000, "Member 'MarinerAIController_GetObjectiveDestinationQuery::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIController.GetObjectiveEnemy
// 0x0008 (0x0008 - 0x0000)
struct MarinerAIController_GetObjectiveEnemy final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_GetObjectiveEnemy) == 0x000008, "Wrong alignment on MarinerAIController_GetObjectiveEnemy");
static_assert(sizeof(MarinerAIController_GetObjectiveEnemy) == 0x000008, "Wrong size on MarinerAIController_GetObjectiveEnemy");
static_assert(offsetof(MarinerAIController_GetObjectiveEnemy, ReturnValue) == 0x000000, "Member 'MarinerAIController_GetObjectiveEnemy::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIController.GetObjectiveEnemyQuery
// 0x0008 (0x0008 - 0x0000)
struct MarinerAIController_GetObjectiveEnemyQuery final
{
public:
	class UEnvQuery*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_GetObjectiveEnemyQuery) == 0x000008, "Wrong alignment on MarinerAIController_GetObjectiveEnemyQuery");
static_assert(sizeof(MarinerAIController_GetObjectiveEnemyQuery) == 0x000008, "Wrong size on MarinerAIController_GetObjectiveEnemyQuery");
static_assert(offsetof(MarinerAIController_GetObjectiveEnemyQuery, ReturnValue) == 0x000000, "Member 'MarinerAIController_GetObjectiveEnemyQuery::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIController.IsCurrentlyBurstFiring
// 0x0001 (0x0001 - 0x0000)
struct MarinerAIController_IsCurrentlyBurstFiring final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_IsCurrentlyBurstFiring) == 0x000001, "Wrong alignment on MarinerAIController_IsCurrentlyBurstFiring");
static_assert(sizeof(MarinerAIController_IsCurrentlyBurstFiring) == 0x000001, "Wrong size on MarinerAIController_IsCurrentlyBurstFiring");
static_assert(offsetof(MarinerAIController_IsCurrentlyBurstFiring, ReturnValue) == 0x000000, "Member 'MarinerAIController_IsCurrentlyBurstFiring::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIController.IsIndependent
// 0x0001 (0x0001 - 0x0000)
struct MarinerAIController_IsIndependent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIController_IsIndependent) == 0x000001, "Wrong alignment on MarinerAIController_IsIndependent");
static_assert(sizeof(MarinerAIController_IsIndependent) == 0x000001, "Wrong size on MarinerAIController_IsIndependent");
static_assert(offsetof(MarinerAIController_IsIndependent, ReturnValue) == 0x000000, "Member 'MarinerAIController_IsIndependent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAIPathFollowingComponent.OnAnyLaunch
// 0x0010 (0x0010 - 0x0000)
struct MarinerAIPathFollowingComponent_OnAnyLaunch final
{
public:
	struct FVector                                PostLaunchVelocity;                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLaunchContainedHostileImpulse;                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLaunchWasCritical;                                // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15BD[0x2];                                     // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAIPathFollowingComponent_OnAnyLaunch) == 0x000004, "Wrong alignment on MarinerAIPathFollowingComponent_OnAnyLaunch");
static_assert(sizeof(MarinerAIPathFollowingComponent_OnAnyLaunch) == 0x000010, "Wrong size on MarinerAIPathFollowingComponent_OnAnyLaunch");
static_assert(offsetof(MarinerAIPathFollowingComponent_OnAnyLaunch, PostLaunchVelocity) == 0x000000, "Member 'MarinerAIPathFollowingComponent_OnAnyLaunch::PostLaunchVelocity' has a wrong offset!");
static_assert(offsetof(MarinerAIPathFollowingComponent_OnAnyLaunch, bLaunchContainedHostileImpulse) == 0x00000C, "Member 'MarinerAIPathFollowingComponent_OnAnyLaunch::bLaunchContainedHostileImpulse' has a wrong offset!");
static_assert(offsetof(MarinerAIPathFollowingComponent_OnAnyLaunch, bLaunchWasCritical) == 0x00000D, "Member 'MarinerAIPathFollowingComponent_OnAnyLaunch::bLaunchWasCritical' has a wrong offset!");

// Function Mariner.MarinerAIPathFollowingComponent.OnMovementSuppressionTagCountChanged
// 0x000C (0x000C - 0x0000)
struct MarinerAIPathFollowingComponent_OnMovementSuppressionTagCountChanged final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIPathFollowingComponent_OnMovementSuppressionTagCountChanged) == 0x000004, "Wrong alignment on MarinerAIPathFollowingComponent_OnMovementSuppressionTagCountChanged");
static_assert(sizeof(MarinerAIPathFollowingComponent_OnMovementSuppressionTagCountChanged) == 0x00000C, "Wrong size on MarinerAIPathFollowingComponent_OnMovementSuppressionTagCountChanged");
static_assert(offsetof(MarinerAIPathFollowingComponent_OnMovementSuppressionTagCountChanged, GameplayTag) == 0x000000, "Member 'MarinerAIPathFollowingComponent_OnMovementSuppressionTagCountChanged::GameplayTag' has a wrong offset!");
static_assert(offsetof(MarinerAIPathFollowingComponent_OnMovementSuppressionTagCountChanged, Count) == 0x000008, "Member 'MarinerAIPathFollowingComponent_OnMovementSuppressionTagCountChanged::Count' has a wrong offset!");

// Function Mariner.MarinerAIPathFollowingComponent.OnOwnerCharacterDestroyed
// 0x0008 (0x0008 - 0x0000)
struct MarinerAIPathFollowingComponent_OnOwnerCharacterDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIPathFollowingComponent_OnOwnerCharacterDestroyed) == 0x000008, "Wrong alignment on MarinerAIPathFollowingComponent_OnOwnerCharacterDestroyed");
static_assert(sizeof(MarinerAIPathFollowingComponent_OnOwnerCharacterDestroyed) == 0x000008, "Wrong size on MarinerAIPathFollowingComponent_OnOwnerCharacterDestroyed");
static_assert(offsetof(MarinerAIPathFollowingComponent_OnOwnerCharacterDestroyed, DestroyedActor) == 0x000000, "Member 'MarinerAIPathFollowingComponent_OnOwnerCharacterDestroyed::DestroyedActor' has a wrong offset!");

// Function Mariner.MarinerAIPathFollowingComponent.OnOwnerCharacterRecoveredAuthority
// 0x0008 (0x0008 - 0x0000)
struct MarinerAIPathFollowingComponent_OnOwnerCharacterRecoveredAuthority final
{
public:
	class AMarinerCharacter*                      RecoveredCharacter;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAIPathFollowingComponent_OnOwnerCharacterRecoveredAuthority) == 0x000008, "Wrong alignment on MarinerAIPathFollowingComponent_OnOwnerCharacterRecoveredAuthority");
static_assert(sizeof(MarinerAIPathFollowingComponent_OnOwnerCharacterRecoveredAuthority) == 0x000008, "Wrong size on MarinerAIPathFollowingComponent_OnOwnerCharacterRecoveredAuthority");
static_assert(offsetof(MarinerAIPathFollowingComponent_OnOwnerCharacterRecoveredAuthority, RecoveredCharacter) == 0x000000, "Member 'MarinerAIPathFollowingComponent_OnOwnerCharacterRecoveredAuthority::RecoveredCharacter' has a wrong offset!");

// Function Mariner.MarinerAnimatedProgressWidget.AnimateAdditional
// 0x0014 (0x0014 - 0x0000)
struct MarinerAnimatedProgressWidget_AnimateAdditional final
{
public:
	int32                                         InLevelDelta;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPercentDelta;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDurationPerLevelSeconds;                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLevelDelaySeconds;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFinalDelaySeconds;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimatedProgressWidget_AnimateAdditional) == 0x000004, "Wrong alignment on MarinerAnimatedProgressWidget_AnimateAdditional");
static_assert(sizeof(MarinerAnimatedProgressWidget_AnimateAdditional) == 0x000014, "Wrong size on MarinerAnimatedProgressWidget_AnimateAdditional");
static_assert(offsetof(MarinerAnimatedProgressWidget_AnimateAdditional, InLevelDelta) == 0x000000, "Member 'MarinerAnimatedProgressWidget_AnimateAdditional::InLevelDelta' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_AnimateAdditional, InPercentDelta) == 0x000004, "Member 'MarinerAnimatedProgressWidget_AnimateAdditional::InPercentDelta' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_AnimateAdditional, InDurationPerLevelSeconds) == 0x000008, "Member 'MarinerAnimatedProgressWidget_AnimateAdditional::InDurationPerLevelSeconds' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_AnimateAdditional, InLevelDelaySeconds) == 0x00000C, "Member 'MarinerAnimatedProgressWidget_AnimateAdditional::InLevelDelaySeconds' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_AnimateAdditional, InFinalDelaySeconds) == 0x000010, "Member 'MarinerAnimatedProgressWidget_AnimateAdditional::InFinalDelaySeconds' has a wrong offset!");

// Function Mariner.MarinerAnimatedProgressWidget.BPOnLevelDelayStarted
// 0x000C (0x000C - 0x0000)
struct MarinerAnimatedProgressWidget_BPOnLevelDelayStarted final
{
public:
	int32                                         CurrentLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentLevelPercent;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimatedProgressWidget_BPOnLevelDelayStarted) == 0x000004, "Wrong alignment on MarinerAnimatedProgressWidget_BPOnLevelDelayStarted");
static_assert(sizeof(MarinerAnimatedProgressWidget_BPOnLevelDelayStarted) == 0x00000C, "Wrong size on MarinerAnimatedProgressWidget_BPOnLevelDelayStarted");
static_assert(offsetof(MarinerAnimatedProgressWidget_BPOnLevelDelayStarted, CurrentLevel) == 0x000000, "Member 'MarinerAnimatedProgressWidget_BPOnLevelDelayStarted::CurrentLevel' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_BPOnLevelDelayStarted, CurrentLevelPercent) == 0x000004, "Member 'MarinerAnimatedProgressWidget_BPOnLevelDelayStarted::CurrentLevelPercent' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_BPOnLevelDelayStarted, Duration) == 0x000008, "Member 'MarinerAnimatedProgressWidget_BPOnLevelDelayStarted::Duration' has a wrong offset!");

// Function Mariner.MarinerAnimatedProgressWidget.BPOnLevelSet
// 0x000C (0x000C - 0x0000)
struct MarinerAnimatedProgressWidget_BPOnLevelSet final
{
public:
	bool                                          bIsInit;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentLevel;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentLevelPercent;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimatedProgressWidget_BPOnLevelSet) == 0x000004, "Wrong alignment on MarinerAnimatedProgressWidget_BPOnLevelSet");
static_assert(sizeof(MarinerAnimatedProgressWidget_BPOnLevelSet) == 0x00000C, "Wrong size on MarinerAnimatedProgressWidget_BPOnLevelSet");
static_assert(offsetof(MarinerAnimatedProgressWidget_BPOnLevelSet, bIsInit) == 0x000000, "Member 'MarinerAnimatedProgressWidget_BPOnLevelSet::bIsInit' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_BPOnLevelSet, CurrentLevel) == 0x000004, "Member 'MarinerAnimatedProgressWidget_BPOnLevelSet::CurrentLevel' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_BPOnLevelSet, CurrentLevelPercent) == 0x000008, "Member 'MarinerAnimatedProgressWidget_BPOnLevelSet::CurrentLevelPercent' has a wrong offset!");

// Function Mariner.MarinerAnimatedProgressWidget.Init
// 0x000C (0x000C - 0x0000)
struct MarinerAnimatedProgressWidget_Init final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPercent;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLevelMax;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimatedProgressWidget_Init) == 0x000004, "Wrong alignment on MarinerAnimatedProgressWidget_Init");
static_assert(sizeof(MarinerAnimatedProgressWidget_Init) == 0x00000C, "Wrong size on MarinerAnimatedProgressWidget_Init");
static_assert(offsetof(MarinerAnimatedProgressWidget_Init, InLevel) == 0x000000, "Member 'MarinerAnimatedProgressWidget_Init::InLevel' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_Init, InPercent) == 0x000004, "Member 'MarinerAnimatedProgressWidget_Init::InPercent' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_Init, InLevelMax) == 0x000008, "Member 'MarinerAnimatedProgressWidget_Init::InLevelMax' has a wrong offset!");

// Function Mariner.MarinerAnimatedProgressWidget.InitAndAnimate
// 0x0020 (0x0020 - 0x0000)
struct MarinerAnimatedProgressWidget_InitAndAnimate final
{
public:
	int32                                         InLevelStart;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLevelStartPercent;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLevelEnd;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLevelEndPercent;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDurationPerLevelSeconds;                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLevelDelaySeconds;                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFinalDelaySeconds;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLevelMax;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimatedProgressWidget_InitAndAnimate) == 0x000004, "Wrong alignment on MarinerAnimatedProgressWidget_InitAndAnimate");
static_assert(sizeof(MarinerAnimatedProgressWidget_InitAndAnimate) == 0x000020, "Wrong size on MarinerAnimatedProgressWidget_InitAndAnimate");
static_assert(offsetof(MarinerAnimatedProgressWidget_InitAndAnimate, InLevelStart) == 0x000000, "Member 'MarinerAnimatedProgressWidget_InitAndAnimate::InLevelStart' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_InitAndAnimate, InLevelStartPercent) == 0x000004, "Member 'MarinerAnimatedProgressWidget_InitAndAnimate::InLevelStartPercent' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_InitAndAnimate, InLevelEnd) == 0x000008, "Member 'MarinerAnimatedProgressWidget_InitAndAnimate::InLevelEnd' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_InitAndAnimate, InLevelEndPercent) == 0x00000C, "Member 'MarinerAnimatedProgressWidget_InitAndAnimate::InLevelEndPercent' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_InitAndAnimate, InDurationPerLevelSeconds) == 0x000010, "Member 'MarinerAnimatedProgressWidget_InitAndAnimate::InDurationPerLevelSeconds' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_InitAndAnimate, InLevelDelaySeconds) == 0x000014, "Member 'MarinerAnimatedProgressWidget_InitAndAnimate::InLevelDelaySeconds' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_InitAndAnimate, InFinalDelaySeconds) == 0x000018, "Member 'MarinerAnimatedProgressWidget_InitAndAnimate::InFinalDelaySeconds' has a wrong offset!");
static_assert(offsetof(MarinerAnimatedProgressWidget_InitAndAnimate, InLevelMax) == 0x00001C, "Member 'MarinerAnimatedProgressWidget_InitAndAnimate::InLevelMax' has a wrong offset!");

// Function Mariner.MarinerAnimatedProgressWidget.GetAnimations
// 0x0018 (0x0018 - 0x0000)
struct MarinerAnimatedProgressWidget_GetAnimations final
{
public:
	struct FMarinerAnimatedProgressWidgetAnimations ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimatedProgressWidget_GetAnimations) == 0x000008, "Wrong alignment on MarinerAnimatedProgressWidget_GetAnimations");
static_assert(sizeof(MarinerAnimatedProgressWidget_GetAnimations) == 0x000018, "Wrong size on MarinerAnimatedProgressWidget_GetAnimations");
static_assert(offsetof(MarinerAnimatedProgressWidget_GetAnimations, ReturnValue) == 0x000000, "Member 'MarinerAnimatedProgressWidget_GetAnimations::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAnimInstance.CalculateAnimation
// 0x0060 (0x0060 - 0x0000)
struct MarinerAnimInstance_CalculateAnimation final
{
public:
	const class AMarinerCharacter*                Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USkeletalMeshComponent*           SkeletalMesh;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawInterpTime;                                     // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMoving;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFalling;                                        // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStunned;                                        // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReturningToArena;                               // 0x001B(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              HorizontalRelativeSpeed;                           // 0x001C(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimPitch;                                          // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimYaw;                                            // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SkeletonRotation;                                  // 0x0038(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EMarinerCardinalDirection                     CardinalDirection;                                 // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C1[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NorthOffset;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SouthOffset;                                       // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EastOffset;                                        // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WestOffset;                                        // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawOffset;                                         // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C2[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAnimInstance_CalculateAnimation) == 0x000008, "Wrong alignment on MarinerAnimInstance_CalculateAnimation");
static_assert(sizeof(MarinerAnimInstance_CalculateAnimation) == 0x000060, "Wrong size on MarinerAnimInstance_CalculateAnimation");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, Character) == 0x000000, "Member 'MarinerAnimInstance_CalculateAnimation::Character' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, SkeletalMesh) == 0x000008, "Member 'MarinerAnimInstance_CalculateAnimation::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, DeltaTime) == 0x000010, "Member 'MarinerAnimInstance_CalculateAnimation::DeltaTime' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, YawInterpTime) == 0x000014, "Member 'MarinerAnimInstance_CalculateAnimation::YawInterpTime' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, bIsMoving) == 0x000018, "Member 'MarinerAnimInstance_CalculateAnimation::bIsMoving' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, bIsFalling) == 0x000019, "Member 'MarinerAnimInstance_CalculateAnimation::bIsFalling' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, bIsStunned) == 0x00001A, "Member 'MarinerAnimInstance_CalculateAnimation::bIsStunned' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, bIsReturningToArena) == 0x00001B, "Member 'MarinerAnimInstance_CalculateAnimation::bIsReturningToArena' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, HorizontalRelativeSpeed) == 0x00001C, "Member 'MarinerAnimInstance_CalculateAnimation::HorizontalRelativeSpeed' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, AimPitch) == 0x000024, "Member 'MarinerAnimInstance_CalculateAnimation::AimPitch' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, AimYaw) == 0x000028, "Member 'MarinerAnimInstance_CalculateAnimation::AimYaw' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, Velocity) == 0x00002C, "Member 'MarinerAnimInstance_CalculateAnimation::Velocity' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, SkeletonRotation) == 0x000038, "Member 'MarinerAnimInstance_CalculateAnimation::SkeletonRotation' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, CardinalDirection) == 0x000044, "Member 'MarinerAnimInstance_CalculateAnimation::CardinalDirection' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, NorthOffset) == 0x000048, "Member 'MarinerAnimInstance_CalculateAnimation::NorthOffset' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, SouthOffset) == 0x00004C, "Member 'MarinerAnimInstance_CalculateAnimation::SouthOffset' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, EastOffset) == 0x000050, "Member 'MarinerAnimInstance_CalculateAnimation::EastOffset' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, WestOffset) == 0x000054, "Member 'MarinerAnimInstance_CalculateAnimation::WestOffset' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateAnimation, YawOffset) == 0x000058, "Member 'MarinerAnimInstance_CalculateAnimation::YawOffset' has a wrong offset!");

// Function Mariner.MarinerAnimInstance.DoLegIKTrace
// 0x0078 (0x0078 - 0x0000)
struct MarinerAnimInstance_DoLegIKTrace final
{
public:
	bool                                          bFootRotates;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C3[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootWidth;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootLength;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutDidFootHit;                                    // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C4[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutEffectorLocation;                               // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutEffectorRotation;                               // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutFootAlpha;                                      // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C5[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USkeletalMeshComponent*           SkeletalMesh;                                      // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeelSocket;                                        // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToeSocket;                                         // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardOffset;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EffectorOffset;                                    // 0x004C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootTraceZOffset;                                  // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootTraceLength;                                   // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToeTraceLength;                                    // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FKFootMaxHeight;                                   // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FootLiftCurve;                                     // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableIKTraceDebug;                               // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C6[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAnimInstance_DoLegIKTrace) == 0x000008, "Wrong alignment on MarinerAnimInstance_DoLegIKTrace");
static_assert(sizeof(MarinerAnimInstance_DoLegIKTrace) == 0x000078, "Wrong size on MarinerAnimInstance_DoLegIKTrace");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, bFootRotates) == 0x000000, "Member 'MarinerAnimInstance_DoLegIKTrace::bFootRotates' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, FootWidth) == 0x000004, "Member 'MarinerAnimInstance_DoLegIKTrace::FootWidth' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, FootLength) == 0x000008, "Member 'MarinerAnimInstance_DoLegIKTrace::FootLength' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, bOutDidFootHit) == 0x00000C, "Member 'MarinerAnimInstance_DoLegIKTrace::bOutDidFootHit' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, OutEffectorLocation) == 0x000010, "Member 'MarinerAnimInstance_DoLegIKTrace::OutEffectorLocation' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, OutEffectorRotation) == 0x00001C, "Member 'MarinerAnimInstance_DoLegIKTrace::OutEffectorRotation' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, OutFootAlpha) == 0x000028, "Member 'MarinerAnimInstance_DoLegIKTrace::OutFootAlpha' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, SkeletalMesh) == 0x000030, "Member 'MarinerAnimInstance_DoLegIKTrace::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, HeelSocket) == 0x000038, "Member 'MarinerAnimInstance_DoLegIKTrace::HeelSocket' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, ToeSocket) == 0x000040, "Member 'MarinerAnimInstance_DoLegIKTrace::ToeSocket' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, ForwardOffset) == 0x000048, "Member 'MarinerAnimInstance_DoLegIKTrace::ForwardOffset' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, EffectorOffset) == 0x00004C, "Member 'MarinerAnimInstance_DoLegIKTrace::EffectorOffset' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, FootTraceZOffset) == 0x000058, "Member 'MarinerAnimInstance_DoLegIKTrace::FootTraceZOffset' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, FootTraceLength) == 0x00005C, "Member 'MarinerAnimInstance_DoLegIKTrace::FootTraceLength' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, ToeTraceLength) == 0x000060, "Member 'MarinerAnimInstance_DoLegIKTrace::ToeTraceLength' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, FKFootMaxHeight) == 0x000064, "Member 'MarinerAnimInstance_DoLegIKTrace::FKFootMaxHeight' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, FootLiftCurve) == 0x000068, "Member 'MarinerAnimInstance_DoLegIKTrace::FootLiftCurve' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_DoLegIKTrace, bEnableIKTraceDebug) == 0x000070, "Member 'MarinerAnimInstance_DoLegIKTrace::bEnableIKTraceDebug' has a wrong offset!");

// Function Mariner.MarinerAnimInstance.CalculateLocomotionOffsets
// 0x0040 (0x0040 - 0x0000)
struct MarinerAnimInstance_CalculateLocomotionOffsets final
{
public:
	const class AMarinerCharacter*                Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              HorizontalRelativeVelocity;                        // 0x0014(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SkeletonRotation;                                  // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsFalling;                                        // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerCardinalDirection                     CardinalDirection;                                 // 0x002D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C7[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NorthOffset;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SouthOffset;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EastOffset;                                        // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WestOffset;                                        // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimInstance_CalculateLocomotionOffsets) == 0x000008, "Wrong alignment on MarinerAnimInstance_CalculateLocomotionOffsets");
static_assert(sizeof(MarinerAnimInstance_CalculateLocomotionOffsets) == 0x000040, "Wrong size on MarinerAnimInstance_CalculateLocomotionOffsets");
static_assert(offsetof(MarinerAnimInstance_CalculateLocomotionOffsets, Character) == 0x000000, "Member 'MarinerAnimInstance_CalculateLocomotionOffsets::Character' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateLocomotionOffsets, Velocity) == 0x000008, "Member 'MarinerAnimInstance_CalculateLocomotionOffsets::Velocity' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateLocomotionOffsets, HorizontalRelativeVelocity) == 0x000014, "Member 'MarinerAnimInstance_CalculateLocomotionOffsets::HorizontalRelativeVelocity' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateLocomotionOffsets, DeltaTime) == 0x00001C, "Member 'MarinerAnimInstance_CalculateLocomotionOffsets::DeltaTime' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateLocomotionOffsets, SkeletonRotation) == 0x000020, "Member 'MarinerAnimInstance_CalculateLocomotionOffsets::SkeletonRotation' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateLocomotionOffsets, bIsFalling) == 0x00002C, "Member 'MarinerAnimInstance_CalculateLocomotionOffsets::bIsFalling' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateLocomotionOffsets, CardinalDirection) == 0x00002D, "Member 'MarinerAnimInstance_CalculateLocomotionOffsets::CardinalDirection' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateLocomotionOffsets, NorthOffset) == 0x000030, "Member 'MarinerAnimInstance_CalculateLocomotionOffsets::NorthOffset' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateLocomotionOffsets, SouthOffset) == 0x000034, "Member 'MarinerAnimInstance_CalculateLocomotionOffsets::SouthOffset' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateLocomotionOffsets, EastOffset) == 0x000038, "Member 'MarinerAnimInstance_CalculateLocomotionOffsets::EastOffset' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance_CalculateLocomotionOffsets, WestOffset) == 0x00003C, "Member 'MarinerAnimInstance_CalculateLocomotionOffsets::WestOffset' has a wrong offset!");

// Function Mariner.MarinerPhysicsLibrary.FindItemDropLocation
// 0x0040 (0x0040 - 0x0000)
struct MarinerPhysicsLibrary_FindItemDropLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AMarinerCharacter*                DroppingCharacter;                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DroppedItemActor;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SuggestedDropLocation;                             // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DropRotation;                                      // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutBestDropLocation;                               // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C8[0x3];                                     // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPhysicsLibrary_FindItemDropLocation) == 0x000008, "Wrong alignment on MarinerPhysicsLibrary_FindItemDropLocation");
static_assert(sizeof(MarinerPhysicsLibrary_FindItemDropLocation) == 0x000040, "Wrong size on MarinerPhysicsLibrary_FindItemDropLocation");
static_assert(offsetof(MarinerPhysicsLibrary_FindItemDropLocation, WorldContextObject) == 0x000000, "Member 'MarinerPhysicsLibrary_FindItemDropLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerPhysicsLibrary_FindItemDropLocation, DroppingCharacter) == 0x000008, "Member 'MarinerPhysicsLibrary_FindItemDropLocation::DroppingCharacter' has a wrong offset!");
static_assert(offsetof(MarinerPhysicsLibrary_FindItemDropLocation, DroppedItemActor) == 0x000010, "Member 'MarinerPhysicsLibrary_FindItemDropLocation::DroppedItemActor' has a wrong offset!");
static_assert(offsetof(MarinerPhysicsLibrary_FindItemDropLocation, SuggestedDropLocation) == 0x000018, "Member 'MarinerPhysicsLibrary_FindItemDropLocation::SuggestedDropLocation' has a wrong offset!");
static_assert(offsetof(MarinerPhysicsLibrary_FindItemDropLocation, DropRotation) == 0x000024, "Member 'MarinerPhysicsLibrary_FindItemDropLocation::DropRotation' has a wrong offset!");
static_assert(offsetof(MarinerPhysicsLibrary_FindItemDropLocation, OutBestDropLocation) == 0x000030, "Member 'MarinerPhysicsLibrary_FindItemDropLocation::OutBestDropLocation' has a wrong offset!");
static_assert(offsetof(MarinerPhysicsLibrary_FindItemDropLocation, ReturnValue) == 0x00003C, "Member 'MarinerPhysicsLibrary_FindItemDropLocation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPhysicsLibrary.FindVisibleCharacters
// 0x0038 (0x0038 - 0x0000)
struct MarinerPhysicsLibrary_FindVisibleCharacters final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerCharacter*                      LookingCharacter;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelativeTeam;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLookAngle;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C9[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetingTypes;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15CA[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMarinerCharacter*>              ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPhysicsLibrary_FindVisibleCharacters) == 0x000008, "Wrong alignment on MarinerPhysicsLibrary_FindVisibleCharacters");
static_assert(sizeof(MarinerPhysicsLibrary_FindVisibleCharacters) == 0x000038, "Wrong size on MarinerPhysicsLibrary_FindVisibleCharacters");
static_assert(offsetof(MarinerPhysicsLibrary_FindVisibleCharacters, WorldContextObject) == 0x000000, "Member 'MarinerPhysicsLibrary_FindVisibleCharacters::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerPhysicsLibrary_FindVisibleCharacters, LookingCharacter) == 0x000008, "Member 'MarinerPhysicsLibrary_FindVisibleCharacters::LookingCharacter' has a wrong offset!");
static_assert(offsetof(MarinerPhysicsLibrary_FindVisibleCharacters, RelativeTeam) == 0x000010, "Member 'MarinerPhysicsLibrary_FindVisibleCharacters::RelativeTeam' has a wrong offset!");
static_assert(offsetof(MarinerPhysicsLibrary_FindVisibleCharacters, MaxLookAngle) == 0x000014, "Member 'MarinerPhysicsLibrary_FindVisibleCharacters::MaxLookAngle' has a wrong offset!");
static_assert(offsetof(MarinerPhysicsLibrary_FindVisibleCharacters, CollisionChannel) == 0x000018, "Member 'MarinerPhysicsLibrary_FindVisibleCharacters::CollisionChannel' has a wrong offset!");
static_assert(offsetof(MarinerPhysicsLibrary_FindVisibleCharacters, TargetingTypes) == 0x00001C, "Member 'MarinerPhysicsLibrary_FindVisibleCharacters::TargetingTypes' has a wrong offset!");
static_assert(offsetof(MarinerPhysicsLibrary_FindVisibleCharacters, bDebugDraw) == 0x000020, "Member 'MarinerPhysicsLibrary_FindVisibleCharacters::bDebugDraw' has a wrong offset!");
static_assert(offsetof(MarinerPhysicsLibrary_FindVisibleCharacters, ReturnValue) == 0x000028, "Member 'MarinerPhysicsLibrary_FindVisibleCharacters::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPhysicsLibrary.GetWorldGravityZ
// 0x0010 (0x0010 - 0x0000)
struct MarinerPhysicsLibrary_GetWorldGravityZ final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15CB[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPhysicsLibrary_GetWorldGravityZ) == 0x000008, "Wrong alignment on MarinerPhysicsLibrary_GetWorldGravityZ");
static_assert(sizeof(MarinerPhysicsLibrary_GetWorldGravityZ) == 0x000010, "Wrong size on MarinerPhysicsLibrary_GetWorldGravityZ");
static_assert(offsetof(MarinerPhysicsLibrary_GetWorldGravityZ, WorldContextObject) == 0x000000, "Member 'MarinerPhysicsLibrary_GetWorldGravityZ::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerPhysicsLibrary_GetWorldGravityZ, ReturnValue) == 0x000008, "Member 'MarinerPhysicsLibrary_GetWorldGravityZ::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAnimInstance3rdPerson.CalculateAirLean
// 0x0014 (0x0014 - 0x0000)
struct MarinerAnimInstance3rdPerson_CalculateAirLean final
{
public:
	float                                         RelativeX;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeY;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimInstance3rdPerson_CalculateAirLean) == 0x000004, "Wrong alignment on MarinerAnimInstance3rdPerson_CalculateAirLean");
static_assert(sizeof(MarinerAnimInstance3rdPerson_CalculateAirLean) == 0x000014, "Wrong size on MarinerAnimInstance3rdPerson_CalculateAirLean");
static_assert(offsetof(MarinerAnimInstance3rdPerson_CalculateAirLean, RelativeX) == 0x000000, "Member 'MarinerAnimInstance3rdPerson_CalculateAirLean::RelativeX' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance3rdPerson_CalculateAirLean, RelativeY) == 0x000004, "Member 'MarinerAnimInstance3rdPerson_CalculateAirLean::RelativeY' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance3rdPerson_CalculateAirLean, Rotation) == 0x000008, "Member 'MarinerAnimInstance3rdPerson_CalculateAirLean::Rotation' has a wrong offset!");

// Function Mariner.MarinerAnimInstance3rdPerson.GetCardinalDirectionFromVector
// 0x0010 (0x0010 - 0x0000)
struct MarinerAnimInstance3rdPerson_GetCardinalDirectionFromVector final
{
public:
	struct FVector                                InVector;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerCardinalDirection                     ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15D4[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAnimInstance3rdPerson_GetCardinalDirectionFromVector) == 0x000004, "Wrong alignment on MarinerAnimInstance3rdPerson_GetCardinalDirectionFromVector");
static_assert(sizeof(MarinerAnimInstance3rdPerson_GetCardinalDirectionFromVector) == 0x000010, "Wrong size on MarinerAnimInstance3rdPerson_GetCardinalDirectionFromVector");
static_assert(offsetof(MarinerAnimInstance3rdPerson_GetCardinalDirectionFromVector, InVector) == 0x000000, "Member 'MarinerAnimInstance3rdPerson_GetCardinalDirectionFromVector::InVector' has a wrong offset!");
static_assert(offsetof(MarinerAnimInstance3rdPerson_GetCardinalDirectionFromVector, ReturnValue) == 0x00000C, "Member 'MarinerAnimInstance3rdPerson_GetCardinalDirectionFromVector::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAnimInstanceLite.OnGameOutcomeDetermined
// 0x0001 (0x0001 - 0x0000)
struct MarinerAnimInstanceLite_OnGameOutcomeDetermined final
{
public:
	bool                                          bHasWonOrDraw;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimInstanceLite_OnGameOutcomeDetermined) == 0x000001, "Wrong alignment on MarinerAnimInstanceLite_OnGameOutcomeDetermined");
static_assert(sizeof(MarinerAnimInstanceLite_OnGameOutcomeDetermined) == 0x000001, "Wrong size on MarinerAnimInstanceLite_OnGameOutcomeDetermined");
static_assert(offsetof(MarinerAnimInstanceLite_OnGameOutcomeDetermined, bHasWonOrDraw) == 0x000000, "Member 'MarinerAnimInstanceLite_OnGameOutcomeDetermined::bHasWonOrDraw' has a wrong offset!");

// Function Mariner.MarinerAnimInstanceLite.OnPreviewAnimationRequested
// 0x0001 (0x0001 - 0x0000)
struct MarinerAnimInstanceLite_OnPreviewAnimationRequested final
{
public:
	bool                                          bIsReplayingLastAnimation;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimInstanceLite_OnPreviewAnimationRequested) == 0x000001, "Wrong alignment on MarinerAnimInstanceLite_OnPreviewAnimationRequested");
static_assert(sizeof(MarinerAnimInstanceLite_OnPreviewAnimationRequested) == 0x000001, "Wrong size on MarinerAnimInstanceLite_OnPreviewAnimationRequested");
static_assert(offsetof(MarinerAnimInstanceLite_OnPreviewAnimationRequested, bIsReplayingLastAnimation) == 0x000000, "Member 'MarinerAnimInstanceLite_OnPreviewAnimationRequested::bIsReplayingLastAnimation' has a wrong offset!");

// Function Mariner.MarinerAnimInstanceLite.PregameStateChange
// 0x0008 (0x0008 - 0x0000)
struct MarinerAnimInstanceLite_PregameStateChange final
{
public:
	class FName                                   NewState;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAnimInstanceLite_PregameStateChange) == 0x000004, "Wrong alignment on MarinerAnimInstanceLite_PregameStateChange");
static_assert(sizeof(MarinerAnimInstanceLite_PregameStateChange) == 0x000008, "Wrong size on MarinerAnimInstanceLite_PregameStateChange");
static_assert(offsetof(MarinerAnimInstanceLite_PregameStateChange, NewState) == 0x000000, "Member 'MarinerAnimInstanceLite_PregameStateChange::NewState' has a wrong offset!");

// Function Mariner.MarinerPinGameModeWidget.OnOwningPlayerChangedTeams
// 0x0008 (0x0008 - 0x0000)
struct MarinerPinGameModeWidget_OnOwningPlayerChangedTeams final
{
public:
	class AMarinerPlayerState*                    OwningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPinGameModeWidget_OnOwningPlayerChangedTeams) == 0x000008, "Wrong alignment on MarinerPinGameModeWidget_OnOwningPlayerChangedTeams");
static_assert(sizeof(MarinerPinGameModeWidget_OnOwningPlayerChangedTeams) == 0x000008, "Wrong size on MarinerPinGameModeWidget_OnOwningPlayerChangedTeams");
static_assert(offsetof(MarinerPinGameModeWidget_OnOwningPlayerChangedTeams, OwningPlayer) == 0x000000, "Member 'MarinerPinGameModeWidget_OnOwningPlayerChangedTeams::OwningPlayer' has a wrong offset!");

// Function Mariner.MarinerPinGameModeWidget.SetTrackedPlayer
// 0x0008 (0x0008 - 0x0000)
struct MarinerPinGameModeWidget_SetTrackedPlayer final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPinGameModeWidget_SetTrackedPlayer) == 0x000008, "Wrong alignment on MarinerPinGameModeWidget_SetTrackedPlayer");
static_assert(sizeof(MarinerPinGameModeWidget_SetTrackedPlayer) == 0x000008, "Wrong size on MarinerPinGameModeWidget_SetTrackedPlayer");
static_assert(offsetof(MarinerPinGameModeWidget_SetTrackedPlayer, PlayerState) == 0x000000, "Member 'MarinerPinGameModeWidget_SetTrackedPlayer::PlayerState' has a wrong offset!");

// Function Mariner.MarinerOnboardingButton.OnGameVersionChanged
// 0x0001 (0x0001 - 0x0000)
struct MarinerOnboardingButton_OnGameVersionChanged final
{
public:
	EMarinerGameVersion                           NewVersion;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOnboardingButton_OnGameVersionChanged) == 0x000001, "Wrong alignment on MarinerOnboardingButton_OnGameVersionChanged");
static_assert(sizeof(MarinerOnboardingButton_OnGameVersionChanged) == 0x000001, "Wrong size on MarinerOnboardingButton_OnGameVersionChanged");
static_assert(offsetof(MarinerOnboardingButton_OnGameVersionChanged, NewVersion) == 0x000000, "Member 'MarinerOnboardingButton_OnGameVersionChanged::NewVersion' has a wrong offset!");

// Function Mariner.MarinerOnboardingButton.OnLockWidgetAnimationCompleted
// 0x0008 (0x0008 - 0x0000)
struct MarinerOnboardingButton_OnLockWidgetAnimationCompleted final
{
public:
	class UMarinerSingleAnimationWidget*          Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOnboardingButton_OnLockWidgetAnimationCompleted) == 0x000008, "Wrong alignment on MarinerOnboardingButton_OnLockWidgetAnimationCompleted");
static_assert(sizeof(MarinerOnboardingButton_OnLockWidgetAnimationCompleted) == 0x000008, "Wrong size on MarinerOnboardingButton_OnLockWidgetAnimationCompleted");
static_assert(offsetof(MarinerOnboardingButton_OnLockWidgetAnimationCompleted, Instance) == 0x000000, "Member 'MarinerOnboardingButton_OnLockWidgetAnimationCompleted::Instance' has a wrong offset!");

// Function Mariner.MarinerOnboardingButton.SetOnboardingState
// 0x0001 (0x0001 - 0x0000)
struct MarinerOnboardingButton_SetOnboardingState final
{
public:
	EMarinerOnboardingPlaylistState               OnboardingPlaylistState;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOnboardingButton_SetOnboardingState) == 0x000001, "Wrong alignment on MarinerOnboardingButton_SetOnboardingState");
static_assert(sizeof(MarinerOnboardingButton_SetOnboardingState) == 0x000001, "Wrong size on MarinerOnboardingButton_SetOnboardingState");
static_assert(offsetof(MarinerOnboardingButton_SetOnboardingState, OnboardingPlaylistState) == 0x000000, "Member 'MarinerOnboardingButton_SetOnboardingState::OnboardingPlaylistState' has a wrong offset!");

// Function Mariner.MarinerOnboardingButton.GetUnlockForType
// 0x0002 (0x0002 - 0x0000)
struct MarinerOnboardingButton_GetUnlockForType final
{
public:
	EMarinerPlaylistType                          OutType;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOnboardingButton_GetUnlockForType) == 0x000001, "Wrong alignment on MarinerOnboardingButton_GetUnlockForType");
static_assert(sizeof(MarinerOnboardingButton_GetUnlockForType) == 0x000002, "Wrong size on MarinerOnboardingButton_GetUnlockForType");
static_assert(offsetof(MarinerOnboardingButton_GetUnlockForType, OutType) == 0x000000, "Member 'MarinerOnboardingButton_GetUnlockForType::OutType' has a wrong offset!");
static_assert(offsetof(MarinerOnboardingButton_GetUnlockForType, ReturnValue) == 0x000001, "Member 'MarinerOnboardingButton_GetUnlockForType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerOnboardingButton.ShouldBeEnabled
// 0x0020 (0x0020 - 0x0000)
struct MarinerOnboardingButton_ShouldBeEnabled final
{
public:
	class FText                                   OutDisabledText;                                   // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15DD[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerOnboardingButton_ShouldBeEnabled) == 0x000008, "Wrong alignment on MarinerOnboardingButton_ShouldBeEnabled");
static_assert(sizeof(MarinerOnboardingButton_ShouldBeEnabled) == 0x000020, "Wrong size on MarinerOnboardingButton_ShouldBeEnabled");
static_assert(offsetof(MarinerOnboardingButton_ShouldBeEnabled, OutDisabledText) == 0x000000, "Member 'MarinerOnboardingButton_ShouldBeEnabled::OutDisabledText' has a wrong offset!");
static_assert(offsetof(MarinerOnboardingButton_ShouldBeEnabled, ReturnValue) == 0x000018, "Member 'MarinerOnboardingButton_ShouldBeEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerOnboardingButton.ShouldBeForceEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerOnboardingButton_ShouldBeForceEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOnboardingButton_ShouldBeForceEnabled) == 0x000001, "Wrong alignment on MarinerOnboardingButton_ShouldBeForceEnabled");
static_assert(sizeof(MarinerOnboardingButton_ShouldBeForceEnabled) == 0x000001, "Wrong size on MarinerOnboardingButton_ShouldBeForceEnabled");
static_assert(offsetof(MarinerOnboardingButton_ShouldBeForceEnabled, ReturnValue) == 0x000000, "Member 'MarinerOnboardingButton_ShouldBeForceEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlaylistGroupButton.HandleSelected
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlaylistGroupButton_HandleSelected final
{
public:
	class UMarinerLayeredButton*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlaylistGroupButton_HandleSelected) == 0x000008, "Wrong alignment on MarinerPlaylistGroupButton_HandleSelected");
static_assert(sizeof(MarinerPlaylistGroupButton_HandleSelected) == 0x000008, "Wrong size on MarinerPlaylistGroupButton_HandleSelected");
static_assert(offsetof(MarinerPlaylistGroupButton_HandleSelected, Instance) == 0x000000, "Member 'MarinerPlaylistGroupButton_HandleSelected::Instance' has a wrong offset!");

// Function Mariner.MarinerPlaylistGroupButton.HasLayerPresetButtons
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlaylistGroupButton_HasLayerPresetButtons final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlaylistGroupButton_HasLayerPresetButtons) == 0x000001, "Wrong alignment on MarinerPlaylistGroupButton_HasLayerPresetButtons");
static_assert(sizeof(MarinerPlaylistGroupButton_HasLayerPresetButtons) == 0x000001, "Wrong size on MarinerPlaylistGroupButton_HasLayerPresetButtons");
static_assert(offsetof(MarinerPlaylistGroupButton_HasLayerPresetButtons, ReturnValue) == 0x000000, "Member 'MarinerPlaylistGroupButton_HasLayerPresetButtons::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBasePlayerController.ClientLoadMapRequest
// 0x0010 (0x0010 - 0x0000)
struct MarinerBasePlayerController_ClientLoadMapRequest final
{
public:
	class FString                                 MapLoadName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePlayerController_ClientLoadMapRequest) == 0x000008, "Wrong alignment on MarinerBasePlayerController_ClientLoadMapRequest");
static_assert(sizeof(MarinerBasePlayerController_ClientLoadMapRequest) == 0x000010, "Wrong size on MarinerBasePlayerController_ClientLoadMapRequest");
static_assert(offsetof(MarinerBasePlayerController_ClientLoadMapRequest, MapLoadName) == 0x000000, "Member 'MarinerBasePlayerController_ClientLoadMapRequest::MapLoadName' has a wrong offset!");

// Function Mariner.MarinerBasePlayerController.PlayCameraShakeLocal
// 0x0020 (0x0020 - 0x0000)
struct MarinerBasePlayerController_PlayCameraShakeLocal final
{
public:
	TSubclassOf<class UCameraShake>               CameraShake;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraAnimPlaySpace                          PlaySpace;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15E0[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               UserPlaySpaceRot;                                  // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15E1[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerBasePlayerController_PlayCameraShakeLocal) == 0x000008, "Wrong alignment on MarinerBasePlayerController_PlayCameraShakeLocal");
static_assert(sizeof(MarinerBasePlayerController_PlayCameraShakeLocal) == 0x000020, "Wrong size on MarinerBasePlayerController_PlayCameraShakeLocal");
static_assert(offsetof(MarinerBasePlayerController_PlayCameraShakeLocal, CameraShake) == 0x000000, "Member 'MarinerBasePlayerController_PlayCameraShakeLocal::CameraShake' has a wrong offset!");
static_assert(offsetof(MarinerBasePlayerController_PlayCameraShakeLocal, Scale) == 0x000008, "Member 'MarinerBasePlayerController_PlayCameraShakeLocal::Scale' has a wrong offset!");
static_assert(offsetof(MarinerBasePlayerController_PlayCameraShakeLocal, PlaySpace) == 0x00000C, "Member 'MarinerBasePlayerController_PlayCameraShakeLocal::PlaySpace' has a wrong offset!");
static_assert(offsetof(MarinerBasePlayerController_PlayCameraShakeLocal, UserPlaySpaceRot) == 0x000010, "Member 'MarinerBasePlayerController_PlayCameraShakeLocal::UserPlaySpaceRot' has a wrong offset!");

// Function Mariner.MarinerBasePlayerController.PlayForceFeedbackLocal
// 0x0018 (0x0018 - 0x0000)
struct MarinerBasePlayerController_PlayForceFeedbackLocal final
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTimeDilation;                               // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15E2[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Tag;                                               // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15E3[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerBasePlayerController_PlayForceFeedbackLocal) == 0x000008, "Wrong alignment on MarinerBasePlayerController_PlayForceFeedbackLocal");
static_assert(sizeof(MarinerBasePlayerController_PlayForceFeedbackLocal) == 0x000018, "Wrong size on MarinerBasePlayerController_PlayForceFeedbackLocal");
static_assert(offsetof(MarinerBasePlayerController_PlayForceFeedbackLocal, ForceFeedbackEffect) == 0x000000, "Member 'MarinerBasePlayerController_PlayForceFeedbackLocal::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(MarinerBasePlayerController_PlayForceFeedbackLocal, bLooping) == 0x000008, "Member 'MarinerBasePlayerController_PlayForceFeedbackLocal::bLooping' has a wrong offset!");
static_assert(offsetof(MarinerBasePlayerController_PlayForceFeedbackLocal, bIgnoreTimeDilation) == 0x000009, "Member 'MarinerBasePlayerController_PlayForceFeedbackLocal::bIgnoreTimeDilation' has a wrong offset!");
static_assert(offsetof(MarinerBasePlayerController_PlayForceFeedbackLocal, Tag) == 0x00000C, "Member 'MarinerBasePlayerController_PlayForceFeedbackLocal::Tag' has a wrong offset!");

// Function Mariner.MarinerBasePlayerController.StopCameraShakeLocal
// 0x0010 (0x0010 - 0x0000)
struct MarinerBasePlayerController_StopCameraShakeLocal final
{
public:
	TSubclassOf<class UCameraShake>               Shake;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediately;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15E4[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerBasePlayerController_StopCameraShakeLocal) == 0x000008, "Wrong alignment on MarinerBasePlayerController_StopCameraShakeLocal");
static_assert(sizeof(MarinerBasePlayerController_StopCameraShakeLocal) == 0x000010, "Wrong size on MarinerBasePlayerController_StopCameraShakeLocal");
static_assert(offsetof(MarinerBasePlayerController_StopCameraShakeLocal, Shake) == 0x000000, "Member 'MarinerBasePlayerController_StopCameraShakeLocal::Shake' has a wrong offset!");
static_assert(offsetof(MarinerBasePlayerController_StopCameraShakeLocal, bImmediately) == 0x000008, "Member 'MarinerBasePlayerController_StopCameraShakeLocal::bImmediately' has a wrong offset!");

// Function Mariner.MarinerBasePlayerController.StopForceFeedbackLocal
// 0x0010 (0x0010 - 0x0000)
struct MarinerBasePlayerController_StopForceFeedbackLocal final
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePlayerController_StopForceFeedbackLocal) == 0x000008, "Wrong alignment on MarinerBasePlayerController_StopForceFeedbackLocal");
static_assert(sizeof(MarinerBasePlayerController_StopForceFeedbackLocal) == 0x000010, "Wrong size on MarinerBasePlayerController_StopForceFeedbackLocal");
static_assert(offsetof(MarinerBasePlayerController_StopForceFeedbackLocal, ForceFeedbackEffect) == 0x000000, "Member 'MarinerBasePlayerController_StopForceFeedbackLocal::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(MarinerBasePlayerController_StopForceFeedbackLocal, Tag) == 0x000008, "Member 'MarinerBasePlayerController_StopForceFeedbackLocal::Tag' has a wrong offset!");

// Function Mariner.MarinerBasePlayerController.GetActiveInputType
// 0x0001 (0x0001 - 0x0000)
struct MarinerBasePlayerController_GetActiveInputType final
{
public:
	EPlayerInputType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePlayerController_GetActiveInputType) == 0x000001, "Wrong alignment on MarinerBasePlayerController_GetActiveInputType");
static_assert(sizeof(MarinerBasePlayerController_GetActiveInputType) == 0x000001, "Wrong size on MarinerBasePlayerController_GetActiveInputType");
static_assert(offsetof(MarinerBasePlayerController_GetActiveInputType, ReturnValue) == 0x000000, "Member 'MarinerBasePlayerController_GetActiveInputType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerController.ApplyPerspective
// 0x00B0 (0x00B0 - 0x0000)
struct MarinerPlayerController_ApplyPerspective final
{
public:
	class FName                                   PerspectiveName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerCameraPerspective              Perspective;                                       // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_ApplyPerspective) == 0x000008, "Wrong alignment on MarinerPlayerController_ApplyPerspective");
static_assert(sizeof(MarinerPlayerController_ApplyPerspective) == 0x0000B0, "Wrong size on MarinerPlayerController_ApplyPerspective");
static_assert(offsetof(MarinerPlayerController_ApplyPerspective, PerspectiveName) == 0x000000, "Member 'MarinerPlayerController_ApplyPerspective::PerspectiveName' has a wrong offset!");
static_assert(offsetof(MarinerPlayerController_ApplyPerspective, Perspective) == 0x000008, "Member 'MarinerPlayerController_ApplyPerspective::Perspective' has a wrong offset!");

// Function Mariner.MarinerPlayerController.BroadcastSpamMessageIfAppropriate
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerController_BroadcastSpamMessageIfAppropriate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_BroadcastSpamMessageIfAppropriate) == 0x000001, "Wrong alignment on MarinerPlayerController_BroadcastSpamMessageIfAppropriate");
static_assert(sizeof(MarinerPlayerController_BroadcastSpamMessageIfAppropriate) == 0x000001, "Wrong size on MarinerPlayerController_BroadcastSpamMessageIfAppropriate");
static_assert(offsetof(MarinerPlayerController_BroadcastSpamMessageIfAppropriate, ReturnValue) == 0x000000, "Member 'MarinerPlayerController_BroadcastSpamMessageIfAppropriate::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerController.ChangePerspective
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlayerController_ChangePerspective final
{
public:
	class FName                                   PerspectiveName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_ChangePerspective) == 0x000004, "Wrong alignment on MarinerPlayerController_ChangePerspective");
static_assert(sizeof(MarinerPlayerController_ChangePerspective) == 0x000008, "Wrong size on MarinerPlayerController_ChangePerspective");
static_assert(offsetof(MarinerPlayerController_ChangePerspective, PerspectiveName) == 0x000000, "Member 'MarinerPlayerController_ChangePerspective::PerspectiveName' has a wrong offset!");

// Function Mariner.MarinerPlayerController.ClearSuppressionForTags
// 0x0020 (0x0020 - 0x0000)
struct MarinerPlayerController_ClearSuppressionForTags final
{
public:
	struct FGameplayTagContainer                  SuppressionTagsToClear;                            // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_ClearSuppressionForTags) == 0x000008, "Wrong alignment on MarinerPlayerController_ClearSuppressionForTags");
static_assert(sizeof(MarinerPlayerController_ClearSuppressionForTags) == 0x000020, "Wrong size on MarinerPlayerController_ClearSuppressionForTags");
static_assert(offsetof(MarinerPlayerController_ClearSuppressionForTags, SuppressionTagsToClear) == 0x000000, "Member 'MarinerPlayerController_ClearSuppressionForTags::SuppressionTagsToClear' has a wrong offset!");

// Function Mariner.MarinerPlayerController.ClientAddCameraEffect
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlayerController_ClientAddCameraEffect final
{
public:
	TSubclassOf<class AEmitterCameraLensEffectBase> CameraEffect;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_ClientAddCameraEffect) == 0x000008, "Wrong alignment on MarinerPlayerController_ClientAddCameraEffect");
static_assert(sizeof(MarinerPlayerController_ClientAddCameraEffect) == 0x000008, "Wrong size on MarinerPlayerController_ClientAddCameraEffect");
static_assert(offsetof(MarinerPlayerController_ClientAddCameraEffect, CameraEffect) == 0x000000, "Member 'MarinerPlayerController_ClientAddCameraEffect::CameraEffect' has a wrong offset!");

// Function Mariner.MarinerPlayerController.ClientDisconnectAndLoadMainMenu
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerController_ClientDisconnectAndLoadMainMenu final
{
public:
	bool                                          bShowLoadingScreen;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_ClientDisconnectAndLoadMainMenu) == 0x000001, "Wrong alignment on MarinerPlayerController_ClientDisconnectAndLoadMainMenu");
static_assert(sizeof(MarinerPlayerController_ClientDisconnectAndLoadMainMenu) == 0x000001, "Wrong size on MarinerPlayerController_ClientDisconnectAndLoadMainMenu");
static_assert(offsetof(MarinerPlayerController_ClientDisconnectAndLoadMainMenu, bShowLoadingScreen) == 0x000000, "Member 'MarinerPlayerController_ClientDisconnectAndLoadMainMenu::bShowLoadingScreen' has a wrong offset!");

// Function Mariner.MarinerPlayerController.ClientNotifyCausedDamage
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerController_ClientNotifyCausedDamage final
{
public:
	TArray<struct FDamageNotificationPayload>     DamageNotifications;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_ClientNotifyCausedDamage) == 0x000008, "Wrong alignment on MarinerPlayerController_ClientNotifyCausedDamage");
static_assert(sizeof(MarinerPlayerController_ClientNotifyCausedDamage) == 0x000010, "Wrong size on MarinerPlayerController_ClientNotifyCausedDamage");
static_assert(offsetof(MarinerPlayerController_ClientNotifyCausedDamage, DamageNotifications) == 0x000000, "Member 'MarinerPlayerController_ClientNotifyCausedDamage::DamageNotifications' has a wrong offset!");

// Function Mariner.MarinerPlayerController.ClientSetAllSuppressionTags
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerController_ClientSetAllSuppressionTags final
{
public:
	bool                                          bIsSuppressed;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_ClientSetAllSuppressionTags) == 0x000001, "Wrong alignment on MarinerPlayerController_ClientSetAllSuppressionTags");
static_assert(sizeof(MarinerPlayerController_ClientSetAllSuppressionTags) == 0x000001, "Wrong size on MarinerPlayerController_ClientSetAllSuppressionTags");
static_assert(offsetof(MarinerPlayerController_ClientSetAllSuppressionTags, bIsSuppressed) == 0x000000, "Member 'MarinerPlayerController_ClientSetAllSuppressionTags::bIsSuppressed' has a wrong offset!");

// Function Mariner.MarinerPlayerController.ClientSetSpectatorCamera
// 0x0018 (0x0018 - 0x0000)
struct MarinerPlayerController_ClientSetSpectatorCamera final
{
public:
	struct FVector                                CameraLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotation;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_ClientSetSpectatorCamera) == 0x000004, "Wrong alignment on MarinerPlayerController_ClientSetSpectatorCamera");
static_assert(sizeof(MarinerPlayerController_ClientSetSpectatorCamera) == 0x000018, "Wrong size on MarinerPlayerController_ClientSetSpectatorCamera");
static_assert(offsetof(MarinerPlayerController_ClientSetSpectatorCamera, CameraLocation) == 0x000000, "Member 'MarinerPlayerController_ClientSetSpectatorCamera::CameraLocation' has a wrong offset!");
static_assert(offsetof(MarinerPlayerController_ClientSetSpectatorCamera, CameraRotation) == 0x00000C, "Member 'MarinerPlayerController_ClientSetSpectatorCamera::CameraRotation' has a wrong offset!");

// Function Mariner.MarinerPlayerController.ClientUpdateIdleBootTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct MarinerPlayerController_ClientUpdateIdleBootTimeRemaining final
{
public:
	float                                         IdleBootTimeRemaining;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_ClientUpdateIdleBootTimeRemaining) == 0x000004, "Wrong alignment on MarinerPlayerController_ClientUpdateIdleBootTimeRemaining");
static_assert(sizeof(MarinerPlayerController_ClientUpdateIdleBootTimeRemaining) == 0x000004, "Wrong size on MarinerPlayerController_ClientUpdateIdleBootTimeRemaining");
static_assert(offsetof(MarinerPlayerController_ClientUpdateIdleBootTimeRemaining, IdleBootTimeRemaining) == 0x000000, "Member 'MarinerPlayerController_ClientUpdateIdleBootTimeRemaining::IdleBootTimeRemaining' has a wrong offset!");

// Function Mariner.MarinerPlayerController.FindPerspective
// 0x00B0 (0x00B0 - 0x0000)
struct MarinerPlayerController_FindPerspective final
{
public:
	class FName                                   PerspectiveName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerCameraPerspective              ReturnValue;                                       // 0x0008(0x00A8)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_FindPerspective) == 0x000008, "Wrong alignment on MarinerPlayerController_FindPerspective");
static_assert(sizeof(MarinerPlayerController_FindPerspective) == 0x0000B0, "Wrong size on MarinerPlayerController_FindPerspective");
static_assert(offsetof(MarinerPlayerController_FindPerspective, PerspectiveName) == 0x000000, "Member 'MarinerPlayerController_FindPerspective::PerspectiveName' has a wrong offset!");
static_assert(offsetof(MarinerPlayerController_FindPerspective, ReturnValue) == 0x000008, "Member 'MarinerPlayerController_FindPerspective::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerController.ForceDangerZoneState
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerController_ForceDangerZoneState final
{
public:
	bool                                          bForced;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_ForceDangerZoneState) == 0x000001, "Wrong alignment on MarinerPlayerController_ForceDangerZoneState");
static_assert(sizeof(MarinerPlayerController_ForceDangerZoneState) == 0x000001, "Wrong size on MarinerPlayerController_ForceDangerZoneState");
static_assert(offsetof(MarinerPlayerController_ForceDangerZoneState, bForced) == 0x000000, "Member 'MarinerPlayerController_ForceDangerZoneState::bForced' has a wrong offset!");

// Function Mariner.MarinerPlayerController.IsInGameMenuEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerController_IsInGameMenuEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_IsInGameMenuEnabled) == 0x000001, "Wrong alignment on MarinerPlayerController_IsInGameMenuEnabled");
static_assert(sizeof(MarinerPlayerController_IsInGameMenuEnabled) == 0x000001, "Wrong size on MarinerPlayerController_IsInGameMenuEnabled");
static_assert(offsetof(MarinerPlayerController_IsInGameMenuEnabled, ReturnValue) == 0x000000, "Member 'MarinerPlayerController_IsInGameMenuEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerController.OnRep_AuthoritativeEndChatLockTimestamp
// 0x0004 (0x0004 - 0x0000)
struct MarinerPlayerController_OnRep_AuthoritativeEndChatLockTimestamp final
{
public:
	float                                         OldAuthEndChatLockTimestamp;                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_OnRep_AuthoritativeEndChatLockTimestamp) == 0x000004, "Wrong alignment on MarinerPlayerController_OnRep_AuthoritativeEndChatLockTimestamp");
static_assert(sizeof(MarinerPlayerController_OnRep_AuthoritativeEndChatLockTimestamp) == 0x000004, "Wrong size on MarinerPlayerController_OnRep_AuthoritativeEndChatLockTimestamp");
static_assert(offsetof(MarinerPlayerController_OnRep_AuthoritativeEndChatLockTimestamp, OldAuthEndChatLockTimestamp) == 0x000000, "Member 'MarinerPlayerController_OnRep_AuthoritativeEndChatLockTimestamp::OldAuthEndChatLockTimestamp' has a wrong offset!");

// Function Mariner.MarinerPlayerController.ReactToPlayerChangedTeam
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlayerController_ReactToPlayerChangedTeam final
{
public:
	class AMarinerPlayerState*                    PlayerChangedTeam;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_ReactToPlayerChangedTeam) == 0x000008, "Wrong alignment on MarinerPlayerController_ReactToPlayerChangedTeam");
static_assert(sizeof(MarinerPlayerController_ReactToPlayerChangedTeam) == 0x000008, "Wrong size on MarinerPlayerController_ReactToPlayerChangedTeam");
static_assert(offsetof(MarinerPlayerController_ReactToPlayerChangedTeam, PlayerChangedTeam) == 0x000000, "Member 'MarinerPlayerController_ReactToPlayerChangedTeam::PlayerChangedTeam' has a wrong offset!");

// Function Mariner.MarinerPlayerController.ServerBroadcastPlayerToPlayerMessage
// 0x0018 (0x0018 - 0x0000)
struct MarinerPlayerController_ServerBroadcastPlayerToPlayerMessage final
{
public:
	TSubclassOf<class UMarinerLocalMessage>       Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalObject;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_ServerBroadcastPlayerToPlayerMessage) == 0x000008, "Wrong alignment on MarinerPlayerController_ServerBroadcastPlayerToPlayerMessage");
static_assert(sizeof(MarinerPlayerController_ServerBroadcastPlayerToPlayerMessage) == 0x000018, "Wrong size on MarinerPlayerController_ServerBroadcastPlayerToPlayerMessage");
static_assert(offsetof(MarinerPlayerController_ServerBroadcastPlayerToPlayerMessage, Message) == 0x000000, "Member 'MarinerPlayerController_ServerBroadcastPlayerToPlayerMessage::Message' has a wrong offset!");
static_assert(offsetof(MarinerPlayerController_ServerBroadcastPlayerToPlayerMessage, RelatedPlayerState) == 0x000008, "Member 'MarinerPlayerController_ServerBroadcastPlayerToPlayerMessage::RelatedPlayerState' has a wrong offset!");
static_assert(offsetof(MarinerPlayerController_ServerBroadcastPlayerToPlayerMessage, OptionalObject) == 0x000010, "Member 'MarinerPlayerController_ServerBroadcastPlayerToPlayerMessage::OptionalObject' has a wrong offset!");

// Function Mariner.MarinerPlayerController.ServerCheat
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerController_ServerCheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_ServerCheat) == 0x000008, "Wrong alignment on MarinerPlayerController_ServerCheat");
static_assert(sizeof(MarinerPlayerController_ServerCheat) == 0x000010, "Wrong size on MarinerPlayerController_ServerCheat");
static_assert(offsetof(MarinerPlayerController_ServerCheat, Msg) == 0x000000, "Member 'MarinerPlayerController_ServerCheat::Msg' has a wrong offset!");

// Function Mariner.MarinerPlayerController.ServerSetActiveInputType
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerController_ServerSetActiveInputType final
{
public:
	EPlayerInputType                              NewClientActiveInputType;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_ServerSetActiveInputType) == 0x000001, "Wrong alignment on MarinerPlayerController_ServerSetActiveInputType");
static_assert(sizeof(MarinerPlayerController_ServerSetActiveInputType) == 0x000001, "Wrong size on MarinerPlayerController_ServerSetActiveInputType");
static_assert(offsetof(MarinerPlayerController_ServerSetActiveInputType, NewClientActiveInputType) == 0x000000, "Member 'MarinerPlayerController_ServerSetActiveInputType::NewClientActiveInputType' has a wrong offset!");

// Function Mariner.MarinerPlayerController.SetAllSuppressionTags
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerController_SetAllSuppressionTags final
{
public:
	bool                                          bIsSuppressed;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_SetAllSuppressionTags) == 0x000001, "Wrong alignment on MarinerPlayerController_SetAllSuppressionTags");
static_assert(sizeof(MarinerPlayerController_SetAllSuppressionTags) == 0x000001, "Wrong size on MarinerPlayerController_SetAllSuppressionTags");
static_assert(offsetof(MarinerPlayerController_SetAllSuppressionTags, bIsSuppressed) == 0x000000, "Member 'MarinerPlayerController_SetAllSuppressionTags::bIsSuppressed' has a wrong offset!");

// Function Mariner.MarinerPlayerController.SetSuppressionTags
// 0x0028 (0x0028 - 0x0000)
struct MarinerPlayerController_SetSuppressionTags final
{
public:
	struct FGameplayTagContainer                  SuppressionTagToSet;                               // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsSuppressed;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15E9[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlayerController_SetSuppressionTags) == 0x000008, "Wrong alignment on MarinerPlayerController_SetSuppressionTags");
static_assert(sizeof(MarinerPlayerController_SetSuppressionTags) == 0x000028, "Wrong size on MarinerPlayerController_SetSuppressionTags");
static_assert(offsetof(MarinerPlayerController_SetSuppressionTags, SuppressionTagToSet) == 0x000000, "Member 'MarinerPlayerController_SetSuppressionTags::SuppressionTagToSet' has a wrong offset!");
static_assert(offsetof(MarinerPlayerController_SetSuppressionTags, bIsSuppressed) == 0x000020, "Member 'MarinerPlayerController_SetSuppressionTags::bIsSuppressed' has a wrong offset!");

// Function Mariner.MarinerPlayerController.SimulateInputKey
// 0x0020 (0x0020 - 0x0000)
struct MarinerPlayerController_SimulateInputKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPressed;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15EA[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlayerController_SimulateInputKey) == 0x000008, "Wrong alignment on MarinerPlayerController_SimulateInputKey");
static_assert(sizeof(MarinerPlayerController_SimulateInputKey) == 0x000020, "Wrong size on MarinerPlayerController_SimulateInputKey");
static_assert(offsetof(MarinerPlayerController_SimulateInputKey, Key) == 0x000000, "Member 'MarinerPlayerController_SimulateInputKey::Key' has a wrong offset!");
static_assert(offsetof(MarinerPlayerController_SimulateInputKey, bPressed) == 0x000018, "Member 'MarinerPlayerController_SimulateInputKey::bPressed' has a wrong offset!");

// Function Mariner.MarinerPlayerController.TryToBroadcastTeamChatMessage
// 0x0020 (0x0020 - 0x0000)
struct MarinerPlayerController_TryToBroadcastTeamChatMessage final
{
public:
	TSubclassOf<class UMarinerLocalMessage>       Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalObject;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15EB[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlayerController_TryToBroadcastTeamChatMessage) == 0x000008, "Wrong alignment on MarinerPlayerController_TryToBroadcastTeamChatMessage");
static_assert(sizeof(MarinerPlayerController_TryToBroadcastTeamChatMessage) == 0x000020, "Wrong size on MarinerPlayerController_TryToBroadcastTeamChatMessage");
static_assert(offsetof(MarinerPlayerController_TryToBroadcastTeamChatMessage, Message) == 0x000000, "Member 'MarinerPlayerController_TryToBroadcastTeamChatMessage::Message' has a wrong offset!");
static_assert(offsetof(MarinerPlayerController_TryToBroadcastTeamChatMessage, RelatedPlayerState) == 0x000008, "Member 'MarinerPlayerController_TryToBroadcastTeamChatMessage::RelatedPlayerState' has a wrong offset!");
static_assert(offsetof(MarinerPlayerController_TryToBroadcastTeamChatMessage, OptionalObject) == 0x000010, "Member 'MarinerPlayerController_TryToBroadcastTeamChatMessage::OptionalObject' has a wrong offset!");
static_assert(offsetof(MarinerPlayerController_TryToBroadcastTeamChatMessage, ReturnValue) == 0x000018, "Member 'MarinerPlayerController_TryToBroadcastTeamChatMessage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerController.CanFinishMatch
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerController_CanFinishMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_CanFinishMatch) == 0x000001, "Wrong alignment on MarinerPlayerController_CanFinishMatch");
static_assert(sizeof(MarinerPlayerController_CanFinishMatch) == 0x000001, "Wrong size on MarinerPlayerController_CanFinishMatch");
static_assert(offsetof(MarinerPlayerController_CanFinishMatch, ReturnValue) == 0x000000, "Member 'MarinerPlayerController_CanFinishMatch::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerController.ClientSetHUDState
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerController_ClientSetHUDState final
{
public:
	TSubclassOf<class UMarinerHUDState>           HUDState;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15EC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlayerController_ClientSetHUDState) == 0x000008, "Wrong alignment on MarinerPlayerController_ClientSetHUDState");
static_assert(sizeof(MarinerPlayerController_ClientSetHUDState) == 0x000010, "Wrong size on MarinerPlayerController_ClientSetHUDState");
static_assert(offsetof(MarinerPlayerController_ClientSetHUDState, HUDState) == 0x000000, "Member 'MarinerPlayerController_ClientSetHUDState::HUDState' has a wrong offset!");
static_assert(offsetof(MarinerPlayerController_ClientSetHUDState, bEnabled) == 0x000008, "Member 'MarinerPlayerController_ClientSetHUDState::bEnabled' has a wrong offset!");

// Function Mariner.MarinerPlayerController.GetAllowUseChatWheel
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerController_GetAllowUseChatWheel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_GetAllowUseChatWheel) == 0x000001, "Wrong alignment on MarinerPlayerController_GetAllowUseChatWheel");
static_assert(sizeof(MarinerPlayerController_GetAllowUseChatWheel) == 0x000001, "Wrong size on MarinerPlayerController_GetAllowUseChatWheel");
static_assert(offsetof(MarinerPlayerController_GetAllowUseChatWheel, ReturnValue) == 0x000000, "Member 'MarinerPlayerController_GetAllowUseChatWheel::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerController.GetArtifactComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlayerController_GetArtifactComponent final
{
public:
	class UMarinerArtifactComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_GetArtifactComponent) == 0x000008, "Wrong alignment on MarinerPlayerController_GetArtifactComponent");
static_assert(sizeof(MarinerPlayerController_GetArtifactComponent) == 0x000008, "Wrong size on MarinerPlayerController_GetArtifactComponent");
static_assert(offsetof(MarinerPlayerController_GetArtifactComponent, ReturnValue) == 0x000000, "Member 'MarinerPlayerController_GetArtifactComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerController.GetDefaultPerspective
// 0x00B0 (0x00B0 - 0x0000)
struct MarinerPlayerController_GetDefaultPerspective final
{
public:
	EMarinerCameraPerspectiveType                 CameraType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15ED[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerCameraPerspective              ReturnValue;                                       // 0x0008(0x00A8)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerController_GetDefaultPerspective) == 0x000008, "Wrong alignment on MarinerPlayerController_GetDefaultPerspective");
static_assert(sizeof(MarinerPlayerController_GetDefaultPerspective) == 0x0000B0, "Wrong size on MarinerPlayerController_GetDefaultPerspective");
static_assert(offsetof(MarinerPlayerController_GetDefaultPerspective, CameraType) == 0x000000, "Member 'MarinerPlayerController_GetDefaultPerspective::CameraType' has a wrong offset!");
static_assert(offsetof(MarinerPlayerController_GetDefaultPerspective, ReturnValue) == 0x000008, "Member 'MarinerPlayerController_GetDefaultPerspective::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerController.HasAnyGivenSuppressionTags
// 0x0028 (0x0028 - 0x0000)
struct MarinerPlayerController_HasAnyGivenSuppressionTags final
{
public:
	struct FGameplayTagContainer                  SuppressionTagsToCheck;                            // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15EE[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlayerController_HasAnyGivenSuppressionTags) == 0x000008, "Wrong alignment on MarinerPlayerController_HasAnyGivenSuppressionTags");
static_assert(sizeof(MarinerPlayerController_HasAnyGivenSuppressionTags) == 0x000028, "Wrong size on MarinerPlayerController_HasAnyGivenSuppressionTags");
static_assert(offsetof(MarinerPlayerController_HasAnyGivenSuppressionTags, SuppressionTagsToCheck) == 0x000000, "Member 'MarinerPlayerController_HasAnyGivenSuppressionTags::SuppressionTagsToCheck' has a wrong offset!");
static_assert(offsetof(MarinerPlayerController_HasAnyGivenSuppressionTags, ReturnValue) == 0x000020, "Member 'MarinerPlayerController_HasAnyGivenSuppressionTags::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerController.SetHUDState
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerController_SetHUDState final
{
public:
	TSubclassOf<class UMarinerHUDState>           HUDState;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15EF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlayerController_SetHUDState) == 0x000008, "Wrong alignment on MarinerPlayerController_SetHUDState");
static_assert(sizeof(MarinerPlayerController_SetHUDState) == 0x000010, "Wrong size on MarinerPlayerController_SetHUDState");
static_assert(offsetof(MarinerPlayerController_SetHUDState, HUDState) == 0x000000, "Member 'MarinerPlayerController_SetHUDState::HUDState' has a wrong offset!");
static_assert(offsetof(MarinerPlayerController_SetHUDState, bEnabled) == 0x000008, "Member 'MarinerPlayerController_SetHUDState::bEnabled' has a wrong offset!");

// Function Mariner.MarinerArenaReturnTargetComparer.CalcReturnOrigin
// 0x0018 (0x0018 - 0x0000)
struct MarinerArenaReturnTargetComparer_CalcReturnOrigin final
{
public:
	const class AMarinerCharacter*                Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15F4[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerArenaReturnTargetComparer_CalcReturnOrigin) == 0x000008, "Wrong alignment on MarinerArenaReturnTargetComparer_CalcReturnOrigin");
static_assert(sizeof(MarinerArenaReturnTargetComparer_CalcReturnOrigin) == 0x000018, "Wrong size on MarinerArenaReturnTargetComparer_CalcReturnOrigin");
static_assert(offsetof(MarinerArenaReturnTargetComparer_CalcReturnOrigin, Character) == 0x000000, "Member 'MarinerArenaReturnTargetComparer_CalcReturnOrigin::Character' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_CalcReturnOrigin, ReturnValue) == 0x000008, "Member 'MarinerArenaReturnTargetComparer_CalcReturnOrigin::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArenaReturnTargetComparer.CalcReturnTargetFitnessScore
// 0x0020 (0x0020 - 0x0000)
struct MarinerArenaReturnTargetComparer_CalcReturnTargetFitnessScore final
{
public:
	struct FVector                                ReturnLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturningCharacterTeamIndex;                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AMarinerArenaReturnTarget*        Target;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15F5[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerArenaReturnTargetComparer_CalcReturnTargetFitnessScore) == 0x000008, "Wrong alignment on MarinerArenaReturnTargetComparer_CalcReturnTargetFitnessScore");
static_assert(sizeof(MarinerArenaReturnTargetComparer_CalcReturnTargetFitnessScore) == 0x000020, "Wrong size on MarinerArenaReturnTargetComparer_CalcReturnTargetFitnessScore");
static_assert(offsetof(MarinerArenaReturnTargetComparer_CalcReturnTargetFitnessScore, ReturnLocation) == 0x000000, "Member 'MarinerArenaReturnTargetComparer_CalcReturnTargetFitnessScore::ReturnLocation' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_CalcReturnTargetFitnessScore, ReturningCharacterTeamIndex) == 0x00000C, "Member 'MarinerArenaReturnTargetComparer_CalcReturnTargetFitnessScore::ReturningCharacterTeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_CalcReturnTargetFitnessScore, Target) == 0x000010, "Member 'MarinerArenaReturnTargetComparer_CalcReturnTargetFitnessScore::Target' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_CalcReturnTargetFitnessScore, ReturnValue) == 0x000018, "Member 'MarinerArenaReturnTargetComparer_CalcReturnTargetFitnessScore::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArenaReturnTargetComparer.CalcReturnZoneFitnessScore
// 0x0020 (0x0020 - 0x0000)
struct MarinerArenaReturnTargetComparer_CalcReturnZoneFitnessScore final
{
public:
	struct FVector                                ReturnLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturningCharacterTeamIndex;                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AMarinerArenaReturnZone*          Zone;                                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15F6[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerArenaReturnTargetComparer_CalcReturnZoneFitnessScore) == 0x000008, "Wrong alignment on MarinerArenaReturnTargetComparer_CalcReturnZoneFitnessScore");
static_assert(sizeof(MarinerArenaReturnTargetComparer_CalcReturnZoneFitnessScore) == 0x000020, "Wrong size on MarinerArenaReturnTargetComparer_CalcReturnZoneFitnessScore");
static_assert(offsetof(MarinerArenaReturnTargetComparer_CalcReturnZoneFitnessScore, ReturnLocation) == 0x000000, "Member 'MarinerArenaReturnTargetComparer_CalcReturnZoneFitnessScore::ReturnLocation' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_CalcReturnZoneFitnessScore, ReturningCharacterTeamIndex) == 0x00000C, "Member 'MarinerArenaReturnTargetComparer_CalcReturnZoneFitnessScore::ReturningCharacterTeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_CalcReturnZoneFitnessScore, Zone) == 0x000010, "Member 'MarinerArenaReturnTargetComparer_CalcReturnZoneFitnessScore::Zone' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_CalcReturnZoneFitnessScore, ReturnValue) == 0x000018, "Member 'MarinerArenaReturnTargetComparer_CalcReturnZoneFitnessScore::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArenaReturnTargetComparer.ShouldDiscardReturnTarget
// 0x0020 (0x0020 - 0x0000)
struct MarinerArenaReturnTargetComparer_ShouldDiscardReturnTarget final
{
public:
	struct FVector                                ReturnLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturningCharacterTeamIndex;                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AMarinerArenaReturnTarget*        Target;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15F7[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerArenaReturnTargetComparer_ShouldDiscardReturnTarget) == 0x000008, "Wrong alignment on MarinerArenaReturnTargetComparer_ShouldDiscardReturnTarget");
static_assert(sizeof(MarinerArenaReturnTargetComparer_ShouldDiscardReturnTarget) == 0x000020, "Wrong size on MarinerArenaReturnTargetComparer_ShouldDiscardReturnTarget");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldDiscardReturnTarget, ReturnLocation) == 0x000000, "Member 'MarinerArenaReturnTargetComparer_ShouldDiscardReturnTarget::ReturnLocation' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldDiscardReturnTarget, ReturningCharacterTeamIndex) == 0x00000C, "Member 'MarinerArenaReturnTargetComparer_ShouldDiscardReturnTarget::ReturningCharacterTeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldDiscardReturnTarget, Target) == 0x000010, "Member 'MarinerArenaReturnTargetComparer_ShouldDiscardReturnTarget::Target' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldDiscardReturnTarget, ReturnValue) == 0x000018, "Member 'MarinerArenaReturnTargetComparer_ShouldDiscardReturnTarget::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArenaReturnTargetComparer.ShouldDiscardReturnZone
// 0x0020 (0x0020 - 0x0000)
struct MarinerArenaReturnTargetComparer_ShouldDiscardReturnZone final
{
public:
	struct FVector                                ReturnLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturningCharacterTeamIndex;                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AMarinerArenaReturnZone*          Zone;                                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15F8[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerArenaReturnTargetComparer_ShouldDiscardReturnZone) == 0x000008, "Wrong alignment on MarinerArenaReturnTargetComparer_ShouldDiscardReturnZone");
static_assert(sizeof(MarinerArenaReturnTargetComparer_ShouldDiscardReturnZone) == 0x000020, "Wrong size on MarinerArenaReturnTargetComparer_ShouldDiscardReturnZone");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldDiscardReturnZone, ReturnLocation) == 0x000000, "Member 'MarinerArenaReturnTargetComparer_ShouldDiscardReturnZone::ReturnLocation' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldDiscardReturnZone, ReturningCharacterTeamIndex) == 0x00000C, "Member 'MarinerArenaReturnTargetComparer_ShouldDiscardReturnZone::ReturningCharacterTeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldDiscardReturnZone, Zone) == 0x000010, "Member 'MarinerArenaReturnTargetComparer_ShouldDiscardReturnZone::Zone' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldDiscardReturnZone, ReturnValue) == 0x000018, "Member 'MarinerArenaReturnTargetComparer_ShouldDiscardReturnZone::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArenaReturnTargetComparer.ShouldPrioritizeReturnTarget
// 0x0020 (0x0020 - 0x0000)
struct MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnTarget final
{
public:
	struct FVector                                ReturnLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturningCharacterTeamIndex;                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AMarinerArenaReturnTarget*        Target;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15F9[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnTarget) == 0x000008, "Wrong alignment on MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnTarget");
static_assert(sizeof(MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnTarget) == 0x000020, "Wrong size on MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnTarget");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnTarget, ReturnLocation) == 0x000000, "Member 'MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnTarget::ReturnLocation' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnTarget, ReturningCharacterTeamIndex) == 0x00000C, "Member 'MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnTarget::ReturningCharacterTeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnTarget, Target) == 0x000010, "Member 'MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnTarget::Target' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnTarget, ReturnValue) == 0x000018, "Member 'MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnTarget::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArenaReturnTargetComparer.ShouldPrioritizeReturnZone
// 0x0020 (0x0020 - 0x0000)
struct MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnZone final
{
public:
	struct FVector                                ReturnLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturningCharacterTeamIndex;                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AMarinerArenaReturnZone*          Zone;                                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15FA[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnZone) == 0x000008, "Wrong alignment on MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnZone");
static_assert(sizeof(MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnZone) == 0x000020, "Wrong size on MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnZone");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnZone, ReturnLocation) == 0x000000, "Member 'MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnZone::ReturnLocation' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnZone, ReturningCharacterTeamIndex) == 0x00000C, "Member 'MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnZone::ReturningCharacterTeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnZone, Zone) == 0x000010, "Member 'MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnZone::Zone' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnZone, ReturnValue) == 0x000018, "Member 'MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnZone::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArenaReturnZone.OnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct MarinerArenaReturnZone_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15FB[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArenaReturnZone_OnBeginOverlap) == 0x000008, "Wrong alignment on MarinerArenaReturnZone_OnBeginOverlap");
static_assert(sizeof(MarinerArenaReturnZone_OnBeginOverlap) == 0x0000A8, "Wrong size on MarinerArenaReturnZone_OnBeginOverlap");
static_assert(offsetof(MarinerArenaReturnZone_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'MarinerArenaReturnZone_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnZone_OnBeginOverlap, OtherActor) == 0x000008, "Member 'MarinerArenaReturnZone_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnZone_OnBeginOverlap, OtherComponent) == 0x000010, "Member 'MarinerArenaReturnZone_OnBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnZone_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'MarinerArenaReturnZone_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnZone_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'MarinerArenaReturnZone_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnZone_OnBeginOverlap, SweepResult) == 0x000020, "Member 'MarinerArenaReturnZone_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function Mariner.MarinerArenaReturnZone.OnCharacterPendingReturnDestroyed
// 0x0008 (0x0008 - 0x0000)
struct MarinerArenaReturnZone_OnCharacterPendingReturnDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArenaReturnZone_OnCharacterPendingReturnDestroyed) == 0x000008, "Wrong alignment on MarinerArenaReturnZone_OnCharacterPendingReturnDestroyed");
static_assert(sizeof(MarinerArenaReturnZone_OnCharacterPendingReturnDestroyed) == 0x000008, "Wrong size on MarinerArenaReturnZone_OnCharacterPendingReturnDestroyed");
static_assert(offsetof(MarinerArenaReturnZone_OnCharacterPendingReturnDestroyed, DestroyedActor) == 0x000000, "Member 'MarinerArenaReturnZone_OnCharacterPendingReturnDestroyed::DestroyedActor' has a wrong offset!");

// Function Mariner.MarinerArenaReturnZone.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct MarinerArenaReturnZone_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15FC[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerArenaReturnZone_OnEndOverlap) == 0x000008, "Wrong alignment on MarinerArenaReturnZone_OnEndOverlap");
static_assert(sizeof(MarinerArenaReturnZone_OnEndOverlap) == 0x000020, "Wrong size on MarinerArenaReturnZone_OnEndOverlap");
static_assert(offsetof(MarinerArenaReturnZone_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'MarinerArenaReturnZone_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnZone_OnEndOverlap, OtherActor) == 0x000008, "Member 'MarinerArenaReturnZone_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnZone_OnEndOverlap, OtherComponent) == 0x000010, "Member 'MarinerArenaReturnZone_OnEndOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnZone_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'MarinerArenaReturnZone_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Mariner.MarinerArenaReturnZone.GetPlayerCountNotOnTeamInZone
// 0x0008 (0x0008 - 0x0000)
struct MarinerArenaReturnZone_GetPlayerCountNotOnTeamInZone final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArenaReturnZone_GetPlayerCountNotOnTeamInZone) == 0x000004, "Wrong alignment on MarinerArenaReturnZone_GetPlayerCountNotOnTeamInZone");
static_assert(sizeof(MarinerArenaReturnZone_GetPlayerCountNotOnTeamInZone) == 0x000008, "Wrong size on MarinerArenaReturnZone_GetPlayerCountNotOnTeamInZone");
static_assert(offsetof(MarinerArenaReturnZone_GetPlayerCountNotOnTeamInZone, TeamIndex) == 0x000000, "Member 'MarinerArenaReturnZone_GetPlayerCountNotOnTeamInZone::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnZone_GetPlayerCountNotOnTeamInZone, ReturnValue) == 0x000004, "Member 'MarinerArenaReturnZone_GetPlayerCountNotOnTeamInZone::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArenaReturnZone.GetPlayerCountOnTeamInZone
// 0x0008 (0x0008 - 0x0000)
struct MarinerArenaReturnZone_GetPlayerCountOnTeamInZone final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArenaReturnZone_GetPlayerCountOnTeamInZone) == 0x000004, "Wrong alignment on MarinerArenaReturnZone_GetPlayerCountOnTeamInZone");
static_assert(sizeof(MarinerArenaReturnZone_GetPlayerCountOnTeamInZone) == 0x000008, "Wrong size on MarinerArenaReturnZone_GetPlayerCountOnTeamInZone");
static_assert(offsetof(MarinerArenaReturnZone_GetPlayerCountOnTeamInZone, TeamIndex) == 0x000000, "Member 'MarinerArenaReturnZone_GetPlayerCountOnTeamInZone::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerArenaReturnZone_GetPlayerCountOnTeamInZone, ReturnValue) == 0x000004, "Member 'MarinerArenaReturnZone_GetPlayerCountOnTeamInZone::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArenaReturnZone.GetTotalPlayerCountInZone
// 0x0004 (0x0004 - 0x0000)
struct MarinerArenaReturnZone_GetTotalPlayerCountInZone final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArenaReturnZone_GetTotalPlayerCountInZone) == 0x000004, "Wrong alignment on MarinerArenaReturnZone_GetTotalPlayerCountInZone");
static_assert(sizeof(MarinerArenaReturnZone_GetTotalPlayerCountInZone) == 0x000004, "Wrong size on MarinerArenaReturnZone_GetTotalPlayerCountInZone");
static_assert(offsetof(MarinerArenaReturnZone_GetTotalPlayerCountInZone, ReturnValue) == 0x000000, "Member 'MarinerArenaReturnZone_GetTotalPlayerCountInZone::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlaylistButton.HandleSelected
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlaylistButton_HandleSelected final
{
public:
	class UMarinerLayeredButton*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlaylistButton_HandleSelected) == 0x000008, "Wrong alignment on MarinerPlaylistButton_HandleSelected");
static_assert(sizeof(MarinerPlaylistButton_HandleSelected) == 0x000008, "Wrong size on MarinerPlaylistButton_HandleSelected");
static_assert(offsetof(MarinerPlaylistButton_HandleSelected, Instance) == 0x000000, "Member 'MarinerPlaylistButton_HandleSelected::Instance' has a wrong offset!");

// Function Mariner.MarinerPlaylistButton.SetPlaylist
// 0x0100 (0x0100 - 0x0000)
struct MarinerPlaylistButton_SetPlaylist final
{
public:
	struct FMangoPlaylist                         InPlaylist;                                        // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMarinerOnboardingPlaylistState               OnboardingPlaylistState;                           // 0x00F8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15FE[0x7];                                     // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlaylistButton_SetPlaylist) == 0x000008, "Wrong alignment on MarinerPlaylistButton_SetPlaylist");
static_assert(sizeof(MarinerPlaylistButton_SetPlaylist) == 0x000100, "Wrong size on MarinerPlaylistButton_SetPlaylist");
static_assert(offsetof(MarinerPlaylistButton_SetPlaylist, InPlaylist) == 0x000000, "Member 'MarinerPlaylistButton_SetPlaylist::InPlaylist' has a wrong offset!");
static_assert(offsetof(MarinerPlaylistButton_SetPlaylist, OnboardingPlaylistState) == 0x0000F8, "Member 'MarinerPlaylistButton_SetPlaylist::OnboardingPlaylistState' has a wrong offset!");

// Function Mariner.MarinerArtifactComponent.ApplyArtifactEffectAndAbility
// 0x0008 (0x0008 - 0x0000)
struct MarinerArtifactComponent_ApplyArtifactEffectAndAbility final
{
public:
	const class UMarinerArtifactDataAsset*        ArtifactDataAsset;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArtifactComponent_ApplyArtifactEffectAndAbility) == 0x000008, "Wrong alignment on MarinerArtifactComponent_ApplyArtifactEffectAndAbility");
static_assert(sizeof(MarinerArtifactComponent_ApplyArtifactEffectAndAbility) == 0x000008, "Wrong size on MarinerArtifactComponent_ApplyArtifactEffectAndAbility");
static_assert(offsetof(MarinerArtifactComponent_ApplyArtifactEffectAndAbility, ArtifactDataAsset) == 0x000000, "Member 'MarinerArtifactComponent_ApplyArtifactEffectAndAbility::ArtifactDataAsset' has a wrong offset!");

// Function Mariner.MarinerArtifactComponent.ClientNotifyArtifactEventProcessed
// 0x0020 (0x0020 - 0x0000)
struct MarinerArtifactComponent_ClientNotifyArtifactEventProcessed final
{
public:
	const class UMarinerArtifactDataAsset*        ArtifactData;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArtifactEventTypes                           EventType;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1600[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UGameplayEffect*                  AppliedEffect;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayEffectDurationType                   DurationType;                                      // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1601[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DurationMagnitude;                                 // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArtifactComponent_ClientNotifyArtifactEventProcessed) == 0x000008, "Wrong alignment on MarinerArtifactComponent_ClientNotifyArtifactEventProcessed");
static_assert(sizeof(MarinerArtifactComponent_ClientNotifyArtifactEventProcessed) == 0x000020, "Wrong size on MarinerArtifactComponent_ClientNotifyArtifactEventProcessed");
static_assert(offsetof(MarinerArtifactComponent_ClientNotifyArtifactEventProcessed, ArtifactData) == 0x000000, "Member 'MarinerArtifactComponent_ClientNotifyArtifactEventProcessed::ArtifactData' has a wrong offset!");
static_assert(offsetof(MarinerArtifactComponent_ClientNotifyArtifactEventProcessed, EventType) == 0x000008, "Member 'MarinerArtifactComponent_ClientNotifyArtifactEventProcessed::EventType' has a wrong offset!");
static_assert(offsetof(MarinerArtifactComponent_ClientNotifyArtifactEventProcessed, AppliedEffect) == 0x000010, "Member 'MarinerArtifactComponent_ClientNotifyArtifactEventProcessed::AppliedEffect' has a wrong offset!");
static_assert(offsetof(MarinerArtifactComponent_ClientNotifyArtifactEventProcessed, DurationType) == 0x000018, "Member 'MarinerArtifactComponent_ClientNotifyArtifactEventProcessed::DurationType' has a wrong offset!");
static_assert(offsetof(MarinerArtifactComponent_ClientNotifyArtifactEventProcessed, DurationMagnitude) == 0x00001C, "Member 'MarinerArtifactComponent_ClientNotifyArtifactEventProcessed::DurationMagnitude' has a wrong offset!");

// Function Mariner.MarinerArtifactComponent.DebugSetArtifactLevel
// 0x0004 (0x0004 - 0x0000)
struct MarinerArtifactComponent_DebugSetArtifactLevel final
{
public:
	int32                                         ArtifactLevel;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArtifactComponent_DebugSetArtifactLevel) == 0x000004, "Wrong alignment on MarinerArtifactComponent_DebugSetArtifactLevel");
static_assert(sizeof(MarinerArtifactComponent_DebugSetArtifactLevel) == 0x000004, "Wrong size on MarinerArtifactComponent_DebugSetArtifactLevel");
static_assert(offsetof(MarinerArtifactComponent_DebugSetArtifactLevel, ArtifactLevel) == 0x000000, "Member 'MarinerArtifactComponent_DebugSetArtifactLevel::ArtifactLevel' has a wrong offset!");

// Function Mariner.MarinerArtifactComponent.OnOwnerDamageAttributeChange
// 0x0010 (0x0010 - 0x0000)
struct MarinerArtifactComponent_OnOwnerDamageAttributeChange final
{
public:
	const class UMarinerDamageableComponent*      RelevantDamageableComponent;                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewAmount;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldAmount;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArtifactComponent_OnOwnerDamageAttributeChange) == 0x000008, "Wrong alignment on MarinerArtifactComponent_OnOwnerDamageAttributeChange");
static_assert(sizeof(MarinerArtifactComponent_OnOwnerDamageAttributeChange) == 0x000010, "Wrong size on MarinerArtifactComponent_OnOwnerDamageAttributeChange");
static_assert(offsetof(MarinerArtifactComponent_OnOwnerDamageAttributeChange, RelevantDamageableComponent) == 0x000000, "Member 'MarinerArtifactComponent_OnOwnerDamageAttributeChange::RelevantDamageableComponent' has a wrong offset!");
static_assert(offsetof(MarinerArtifactComponent_OnOwnerDamageAttributeChange, NewAmount) == 0x000008, "Member 'MarinerArtifactComponent_OnOwnerDamageAttributeChange::NewAmount' has a wrong offset!");
static_assert(offsetof(MarinerArtifactComponent_OnOwnerDamageAttributeChange, OldAmount) == 0x00000C, "Member 'MarinerArtifactComponent_OnOwnerDamageAttributeChange::OldAmount' has a wrong offset!");

// Function Mariner.MarinerArtifactComponent.OnOwnerPossessPawn
// 0x0010 (0x0010 - 0x0000)
struct MarinerArtifactComponent_OnOwnerPossessPawn final
{
public:
	class AMarinerPlayerController*               PossessingController;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  PossessedPawn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArtifactComponent_OnOwnerPossessPawn) == 0x000008, "Wrong alignment on MarinerArtifactComponent_OnOwnerPossessPawn");
static_assert(sizeof(MarinerArtifactComponent_OnOwnerPossessPawn) == 0x000010, "Wrong size on MarinerArtifactComponent_OnOwnerPossessPawn");
static_assert(offsetof(MarinerArtifactComponent_OnOwnerPossessPawn, PossessingController) == 0x000000, "Member 'MarinerArtifactComponent_OnOwnerPossessPawn::PossessingController' has a wrong offset!");
static_assert(offsetof(MarinerArtifactComponent_OnOwnerPossessPawn, PossessedPawn) == 0x000008, "Member 'MarinerArtifactComponent_OnOwnerPossessPawn::PossessedPawn' has a wrong offset!");

// Function Mariner.MarinerArtifactDataAsset.LoadArtifactIconForLevelAsync
// 0x0014 (0x0014 - 0x0000)
struct MarinerArtifactDataAsset_LoadArtifactIconForLevelAsync final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 Level, class UTexture2D* ArtifactUIData)> Callback;                                          // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArtifactDataAsset_LoadArtifactIconForLevelAsync) == 0x000004, "Wrong alignment on MarinerArtifactDataAsset_LoadArtifactIconForLevelAsync");
static_assert(sizeof(MarinerArtifactDataAsset_LoadArtifactIconForLevelAsync) == 0x000014, "Wrong size on MarinerArtifactDataAsset_LoadArtifactIconForLevelAsync");
static_assert(offsetof(MarinerArtifactDataAsset_LoadArtifactIconForLevelAsync, Level) == 0x000000, "Member 'MarinerArtifactDataAsset_LoadArtifactIconForLevelAsync::Level' has a wrong offset!");
static_assert(offsetof(MarinerArtifactDataAsset_LoadArtifactIconForLevelAsync, Callback) == 0x000004, "Member 'MarinerArtifactDataAsset_LoadArtifactIconForLevelAsync::Callback' has a wrong offset!");

// Function Mariner.MarinerArtifactDataAsset.GetAbilityModifiers
// 0x0010 (0x0010 - 0x0000)
struct MarinerArtifactDataAsset_GetAbilityModifiers final
{
public:
	TArray<struct FCurveTableRowHandle>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArtifactDataAsset_GetAbilityModifiers) == 0x000008, "Wrong alignment on MarinerArtifactDataAsset_GetAbilityModifiers");
static_assert(sizeof(MarinerArtifactDataAsset_GetAbilityModifiers) == 0x000010, "Wrong size on MarinerArtifactDataAsset_GetAbilityModifiers");
static_assert(offsetof(MarinerArtifactDataAsset_GetAbilityModifiers, ReturnValue) == 0x000000, "Member 'MarinerArtifactDataAsset_GetAbilityModifiers::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArtifactDataAsset.GetArtifactImage
// 0x0030 (0x0030 - 0x0000)
struct MarinerArtifactDataAsset_GetArtifactImage final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1604[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArtifactDataAsset_GetArtifactImage) == 0x000008, "Wrong alignment on MarinerArtifactDataAsset_GetArtifactImage");
static_assert(sizeof(MarinerArtifactDataAsset_GetArtifactImage) == 0x000030, "Wrong size on MarinerArtifactDataAsset_GetArtifactImage");
static_assert(offsetof(MarinerArtifactDataAsset_GetArtifactImage, Level) == 0x000000, "Member 'MarinerArtifactDataAsset_GetArtifactImage::Level' has a wrong offset!");
static_assert(offsetof(MarinerArtifactDataAsset_GetArtifactImage, ReturnValue) == 0x000008, "Member 'MarinerArtifactDataAsset_GetArtifactImage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArtifactDataAsset.GetOwningCharacter
// 0x0028 (0x0028 - 0x0000)
struct MarinerArtifactDataAsset_GetOwningCharacter final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArtifactDataAsset_GetOwningCharacter) == 0x000008, "Wrong alignment on MarinerArtifactDataAsset_GetOwningCharacter");
static_assert(sizeof(MarinerArtifactDataAsset_GetOwningCharacter) == 0x000028, "Wrong size on MarinerArtifactDataAsset_GetOwningCharacter");
static_assert(offsetof(MarinerArtifactDataAsset_GetOwningCharacter, ReturnValue) == 0x000000, "Member 'MarinerArtifactDataAsset_GetOwningCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArtifactDataAsset.GetUIDataForLevel
// 0x0108 (0x0108 - 0x0000)
struct MarinerArtifactDataAsset_GetUIDataForLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1605[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerArtifactUIData                 ReturnValue;                                       // 0x0008(0x0100)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArtifactDataAsset_GetUIDataForLevel) == 0x000008, "Wrong alignment on MarinerArtifactDataAsset_GetUIDataForLevel");
static_assert(sizeof(MarinerArtifactDataAsset_GetUIDataForLevel) == 0x000108, "Wrong size on MarinerArtifactDataAsset_GetUIDataForLevel");
static_assert(offsetof(MarinerArtifactDataAsset_GetUIDataForLevel, Level) == 0x000000, "Member 'MarinerArtifactDataAsset_GetUIDataForLevel::Level' has a wrong offset!");
static_assert(offsetof(MarinerArtifactDataAsset_GetUIDataForLevel, ReturnValue) == 0x000008, "Member 'MarinerArtifactDataAsset_GetUIDataForLevel::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArtifactDataAsset.GetUIDataForRanked
// 0x0100 (0x0100 - 0x0000)
struct MarinerArtifactDataAsset_GetUIDataForRanked final
{
public:
	struct FMarinerArtifactUIData                 ReturnValue;                                       // 0x0000(0x0100)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArtifactDataAsset_GetUIDataForRanked) == 0x000008, "Wrong alignment on MarinerArtifactDataAsset_GetUIDataForRanked");
static_assert(sizeof(MarinerArtifactDataAsset_GetUIDataForRanked) == 0x000100, "Wrong size on MarinerArtifactDataAsset_GetUIDataForRanked");
static_assert(offsetof(MarinerArtifactDataAsset_GetUIDataForRanked, ReturnValue) == 0x000000, "Member 'MarinerArtifactDataAsset_GetUIDataForRanked::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeSelectMenu.OnModeHighlighted
// 0x0010 (0x0010 - 0x0000)
struct MarinerModeSelectMenu_OnModeHighlighted final
{
public:
	class UMarinerLayeredButton*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromKeyboard;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromMouse;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_160A[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerModeSelectMenu_OnModeHighlighted) == 0x000008, "Wrong alignment on MarinerModeSelectMenu_OnModeHighlighted");
static_assert(sizeof(MarinerModeSelectMenu_OnModeHighlighted) == 0x000010, "Wrong size on MarinerModeSelectMenu_OnModeHighlighted");
static_assert(offsetof(MarinerModeSelectMenu_OnModeHighlighted, Instance) == 0x000000, "Member 'MarinerModeSelectMenu_OnModeHighlighted::Instance' has a wrong offset!");
static_assert(offsetof(MarinerModeSelectMenu_OnModeHighlighted, bFromKeyboard) == 0x000008, "Member 'MarinerModeSelectMenu_OnModeHighlighted::bFromKeyboard' has a wrong offset!");
static_assert(offsetof(MarinerModeSelectMenu_OnModeHighlighted, bFromMouse) == 0x000009, "Member 'MarinerModeSelectMenu_OnModeHighlighted::bFromMouse' has a wrong offset!");

// Function Mariner.MarinerModeSelectMenu.OnModeSelected
// 0x0008 (0x0008 - 0x0000)
struct MarinerModeSelectMenu_OnModeSelected final
{
public:
	class UMarinerLayeredButton*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeSelectMenu_OnModeSelected) == 0x000008, "Wrong alignment on MarinerModeSelectMenu_OnModeSelected");
static_assert(sizeof(MarinerModeSelectMenu_OnModeSelected) == 0x000008, "Wrong size on MarinerModeSelectMenu_OnModeSelected");
static_assert(offsetof(MarinerModeSelectMenu_OnModeSelected, Instance) == 0x000000, "Member 'MarinerModeSelectMenu_OnModeSelected::Instance' has a wrong offset!");

// Function Mariner.MarinerModeSelectMenu.OnModeUnhighlighted
// 0x0008 (0x0008 - 0x0000)
struct MarinerModeSelectMenu_OnModeUnhighlighted final
{
public:
	class UMarinerLayeredButton*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeSelectMenu_OnModeUnhighlighted) == 0x000008, "Wrong alignment on MarinerModeSelectMenu_OnModeUnhighlighted");
static_assert(sizeof(MarinerModeSelectMenu_OnModeUnhighlighted) == 0x000008, "Wrong size on MarinerModeSelectMenu_OnModeUnhighlighted");
static_assert(offsetof(MarinerModeSelectMenu_OnModeUnhighlighted, Instance) == 0x000000, "Member 'MarinerModeSelectMenu_OnModeUnhighlighted::Instance' has a wrong offset!");

// Function Mariner.MarinerArtifactPostGameWidget.Init
// 0x0010 (0x0010 - 0x0000)
struct MarinerArtifactPostGameWidget_Init final
{
public:
	TArray<struct FMangoItemResult>               ItemResults;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArtifactPostGameWidget_Init) == 0x000008, "Wrong alignment on MarinerArtifactPostGameWidget_Init");
static_assert(sizeof(MarinerArtifactPostGameWidget_Init) == 0x000010, "Wrong size on MarinerArtifactPostGameWidget_Init");
static_assert(offsetof(MarinerArtifactPostGameWidget_Init, ItemResults) == 0x000000, "Member 'MarinerArtifactPostGameWidget_Init::ItemResults' has a wrong offset!");

// Function Mariner.MarinerMessageBoxManager.BackgroundAnimatedOut
// 0x0010 (0x0010 - 0x0000)
struct MarinerMessageBoxManager_BackgroundAnimatedOut final
{
public:
	class UMarinerAnimatedWidget*                 Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_160E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMessageBoxManager_BackgroundAnimatedOut) == 0x000008, "Wrong alignment on MarinerMessageBoxManager_BackgroundAnimatedOut");
static_assert(sizeof(MarinerMessageBoxManager_BackgroundAnimatedOut) == 0x000010, "Wrong size on MarinerMessageBoxManager_BackgroundAnimatedOut");
static_assert(offsetof(MarinerMessageBoxManager_BackgroundAnimatedOut, Instance) == 0x000000, "Member 'MarinerMessageBoxManager_BackgroundAnimatedOut::Instance' has a wrong offset!");
static_assert(offsetof(MarinerMessageBoxManager_BackgroundAnimatedOut, ReturnValue) == 0x000008, "Member 'MarinerMessageBoxManager_BackgroundAnimatedOut::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMessageBoxManager.MessageBoxAnimatedOut
// 0x0010 (0x0010 - 0x0000)
struct MarinerMessageBoxManager_MessageBoxAnimatedOut final
{
public:
	class UMarinerAnimatedWidget*                 Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_160F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMessageBoxManager_MessageBoxAnimatedOut) == 0x000008, "Wrong alignment on MarinerMessageBoxManager_MessageBoxAnimatedOut");
static_assert(sizeof(MarinerMessageBoxManager_MessageBoxAnimatedOut) == 0x000010, "Wrong size on MarinerMessageBoxManager_MessageBoxAnimatedOut");
static_assert(offsetof(MarinerMessageBoxManager_MessageBoxAnimatedOut, Instance) == 0x000000, "Member 'MarinerMessageBoxManager_MessageBoxAnimatedOut::Instance' has a wrong offset!");
static_assert(offsetof(MarinerMessageBoxManager_MessageBoxAnimatedOut, ReturnValue) == 0x000008, "Member 'MarinerMessageBoxManager_MessageBoxAnimatedOut::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMessageBoxManager.RemoveMessageBox
// 0x0008 (0x0008 - 0x0000)
struct MarinerMessageBoxManager_RemoveMessageBox final
{
public:
	int32                                         MessageId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1610[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMessageBoxManager_RemoveMessageBox) == 0x000004, "Wrong alignment on MarinerMessageBoxManager_RemoveMessageBox");
static_assert(sizeof(MarinerMessageBoxManager_RemoveMessageBox) == 0x000008, "Wrong size on MarinerMessageBoxManager_RemoveMessageBox");
static_assert(offsetof(MarinerMessageBoxManager_RemoveMessageBox, MessageId) == 0x000000, "Member 'MarinerMessageBoxManager_RemoveMessageBox::MessageId' has a wrong offset!");
static_assert(offsetof(MarinerMessageBoxManager_RemoveMessageBox, ReturnValue) == 0x000004, "Member 'MarinerMessageBoxManager_RemoveMessageBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMessageBoxManager.ShowBlastPassOfferMessageBox
// 0x00C8 (0x00C8 - 0x0000)
struct MarinerMessageBoxManager_ShowBlastPassOfferMessageBox final
{
public:
	struct FMarinerMessageBoxBlastPassOfferData   MessageBoxData;                                    // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00C0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1611[0x4];                                     // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMessageBoxManager_ShowBlastPassOfferMessageBox) == 0x000008, "Wrong alignment on MarinerMessageBoxManager_ShowBlastPassOfferMessageBox");
static_assert(sizeof(MarinerMessageBoxManager_ShowBlastPassOfferMessageBox) == 0x0000C8, "Wrong size on MarinerMessageBoxManager_ShowBlastPassOfferMessageBox");
static_assert(offsetof(MarinerMessageBoxManager_ShowBlastPassOfferMessageBox, MessageBoxData) == 0x000000, "Member 'MarinerMessageBoxManager_ShowBlastPassOfferMessageBox::MessageBoxData' has a wrong offset!");
static_assert(offsetof(MarinerMessageBoxManager_ShowBlastPassOfferMessageBox, ReturnValue) == 0x0000C0, "Member 'MarinerMessageBoxManager_ShowBlastPassOfferMessageBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMessageBoxManager.ShowBlastPassTierPurchaseMessageBox
// 0x0128 (0x0128 - 0x0000)
struct MarinerMessageBoxManager_ShowBlastPassTierPurchaseMessageBox final
{
public:
	struct FMarinerMessageBoxBlastPassTierPurchaseData MessageBoxData;                                    // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0120(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1612[0x4];                                     // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMessageBoxManager_ShowBlastPassTierPurchaseMessageBox) == 0x000008, "Wrong alignment on MarinerMessageBoxManager_ShowBlastPassTierPurchaseMessageBox");
static_assert(sizeof(MarinerMessageBoxManager_ShowBlastPassTierPurchaseMessageBox) == 0x000128, "Wrong size on MarinerMessageBoxManager_ShowBlastPassTierPurchaseMessageBox");
static_assert(offsetof(MarinerMessageBoxManager_ShowBlastPassTierPurchaseMessageBox, MessageBoxData) == 0x000000, "Member 'MarinerMessageBoxManager_ShowBlastPassTierPurchaseMessageBox::MessageBoxData' has a wrong offset!");
static_assert(offsetof(MarinerMessageBoxManager_ShowBlastPassTierPurchaseMessageBox, ReturnValue) == 0x000120, "Member 'MarinerMessageBoxManager_ShowBlastPassTierPurchaseMessageBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMessageBoxManager.ShowMessageBox
// 0x0178 (0x0178 - 0x0000)
struct MarinerMessageBoxManager_ShowMessageBox final
{
public:
	struct FMarinerMessageBoxData                 MessageBoxData;                                    // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0170(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1613[0x4];                                     // 0x0174(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMessageBoxManager_ShowMessageBox) == 0x000008, "Wrong alignment on MarinerMessageBoxManager_ShowMessageBox");
static_assert(sizeof(MarinerMessageBoxManager_ShowMessageBox) == 0x000178, "Wrong size on MarinerMessageBoxManager_ShowMessageBox");
static_assert(offsetof(MarinerMessageBoxManager_ShowMessageBox, MessageBoxData) == 0x000000, "Member 'MarinerMessageBoxManager_ShowMessageBox::MessageBoxData' has a wrong offset!");
static_assert(offsetof(MarinerMessageBoxManager_ShowMessageBox, ReturnValue) == 0x000170, "Member 'MarinerMessageBoxManager_ShowMessageBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMessageBoxManager.ShowNativePurchaseMessageBox
// 0x01A8 (0x01A8 - 0x0000)
struct MarinerMessageBoxManager_ShowNativePurchaseMessageBox final
{
public:
	struct FMarinerMessageBoxNativePurchaseData   MessageBoxData;                                    // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x01A0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1614[0x4];                                     // 0x01A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMessageBoxManager_ShowNativePurchaseMessageBox) == 0x000008, "Wrong alignment on MarinerMessageBoxManager_ShowNativePurchaseMessageBox");
static_assert(sizeof(MarinerMessageBoxManager_ShowNativePurchaseMessageBox) == 0x0001A8, "Wrong size on MarinerMessageBoxManager_ShowNativePurchaseMessageBox");
static_assert(offsetof(MarinerMessageBoxManager_ShowNativePurchaseMessageBox, MessageBoxData) == 0x000000, "Member 'MarinerMessageBoxManager_ShowNativePurchaseMessageBox::MessageBoxData' has a wrong offset!");
static_assert(offsetof(MarinerMessageBoxManager_ShowNativePurchaseMessageBox, ReturnValue) == 0x0001A0, "Member 'MarinerMessageBoxManager_ShowNativePurchaseMessageBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMessageBoxManager.ShowOfferListMessageBox
// 0x0118 (0x0118 - 0x0000)
struct MarinerMessageBoxManager_ShowOfferListMessageBox final
{
public:
	struct FMarinerMessageBoxOfferListData        MessageBoxData;                                    // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0110(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1615[0x4];                                     // 0x0114(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMessageBoxManager_ShowOfferListMessageBox) == 0x000008, "Wrong alignment on MarinerMessageBoxManager_ShowOfferListMessageBox");
static_assert(sizeof(MarinerMessageBoxManager_ShowOfferListMessageBox) == 0x000118, "Wrong size on MarinerMessageBoxManager_ShowOfferListMessageBox");
static_assert(offsetof(MarinerMessageBoxManager_ShowOfferListMessageBox, MessageBoxData) == 0x000000, "Member 'MarinerMessageBoxManager_ShowOfferListMessageBox::MessageBoxData' has a wrong offset!");
static_assert(offsetof(MarinerMessageBoxManager_ShowOfferListMessageBox, ReturnValue) == 0x000110, "Member 'MarinerMessageBoxManager_ShowOfferListMessageBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMessageBoxManager.ShowOptionListMessageBox
// 0x00E8 (0x00E8 - 0x0000)
struct MarinerMessageBoxManager_ShowOptionListMessageBox final
{
public:
	struct FMarinerMessageBoxOptionListData       MessageBoxData;                                    // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00E0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1616[0x4];                                     // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMessageBoxManager_ShowOptionListMessageBox) == 0x000008, "Wrong alignment on MarinerMessageBoxManager_ShowOptionListMessageBox");
static_assert(sizeof(MarinerMessageBoxManager_ShowOptionListMessageBox) == 0x0000E8, "Wrong size on MarinerMessageBoxManager_ShowOptionListMessageBox");
static_assert(offsetof(MarinerMessageBoxManager_ShowOptionListMessageBox, MessageBoxData) == 0x000000, "Member 'MarinerMessageBoxManager_ShowOptionListMessageBox::MessageBoxData' has a wrong offset!");
static_assert(offsetof(MarinerMessageBoxManager_ShowOptionListMessageBox, ReturnValue) == 0x0000E0, "Member 'MarinerMessageBoxManager_ShowOptionListMessageBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMessageBoxManager.ShowOrderDetailsMessageBox
// 0x0118 (0x0118 - 0x0000)
struct MarinerMessageBoxManager_ShowOrderDetailsMessageBox final
{
public:
	struct FMarinerMessageBoxOrderDetailsData     MessageBoxData;                                    // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0110(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1617[0x4];                                     // 0x0114(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMessageBoxManager_ShowOrderDetailsMessageBox) == 0x000008, "Wrong alignment on MarinerMessageBoxManager_ShowOrderDetailsMessageBox");
static_assert(sizeof(MarinerMessageBoxManager_ShowOrderDetailsMessageBox) == 0x000118, "Wrong size on MarinerMessageBoxManager_ShowOrderDetailsMessageBox");
static_assert(offsetof(MarinerMessageBoxManager_ShowOrderDetailsMessageBox, MessageBoxData) == 0x000000, "Member 'MarinerMessageBoxManager_ShowOrderDetailsMessageBox::MessageBoxData' has a wrong offset!");
static_assert(offsetof(MarinerMessageBoxManager_ShowOrderDetailsMessageBox, ReturnValue) == 0x000110, "Member 'MarinerMessageBoxManager_ShowOrderDetailsMessageBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMessageBoxManager.ShowPurchaseMessageBox
// 0x00D0 (0x00D0 - 0x0000)
struct MarinerMessageBoxManager_ShowPurchaseMessageBox final
{
public:
	struct FMarinerMessageBoxPurchaseData         MessageBoxData;                                    // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00C8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1618[0x4];                                     // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMessageBoxManager_ShowPurchaseMessageBox) == 0x000008, "Wrong alignment on MarinerMessageBoxManager_ShowPurchaseMessageBox");
static_assert(sizeof(MarinerMessageBoxManager_ShowPurchaseMessageBox) == 0x0000D0, "Wrong size on MarinerMessageBoxManager_ShowPurchaseMessageBox");
static_assert(offsetof(MarinerMessageBoxManager_ShowPurchaseMessageBox, MessageBoxData) == 0x000000, "Member 'MarinerMessageBoxManager_ShowPurchaseMessageBox::MessageBoxData' has a wrong offset!");
static_assert(offsetof(MarinerMessageBoxManager_ShowPurchaseMessageBox, ReturnValue) == 0x0000C8, "Member 'MarinerMessageBoxManager_ShowPurchaseMessageBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMessageBoxManager.ShowQuestRewardMessageBox
// 0x0188 (0x0188 - 0x0000)
struct MarinerMessageBoxManager_ShowQuestRewardMessageBox final
{
public:
	struct FMarinerMessageBoxQuestRewardData      MessageBoxData;                                    // 0x0000(0x0180)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0180(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1619[0x4];                                     // 0x0184(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMessageBoxManager_ShowQuestRewardMessageBox) == 0x000008, "Wrong alignment on MarinerMessageBoxManager_ShowQuestRewardMessageBox");
static_assert(sizeof(MarinerMessageBoxManager_ShowQuestRewardMessageBox) == 0x000188, "Wrong size on MarinerMessageBoxManager_ShowQuestRewardMessageBox");
static_assert(offsetof(MarinerMessageBoxManager_ShowQuestRewardMessageBox, MessageBoxData) == 0x000000, "Member 'MarinerMessageBoxManager_ShowQuestRewardMessageBox::MessageBoxData' has a wrong offset!");
static_assert(offsetof(MarinerMessageBoxManager_ShowQuestRewardMessageBox, ReturnValue) == 0x000180, "Member 'MarinerMessageBoxManager_ShowQuestRewardMessageBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMessageBoxManager.IsMessageBoxIdActiveOrPending
// 0x0008 (0x0008 - 0x0000)
struct MarinerMessageBoxManager_IsMessageBoxIdActiveOrPending final
{
public:
	int32                                         MessageId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161A[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMessageBoxManager_IsMessageBoxIdActiveOrPending) == 0x000004, "Wrong alignment on MarinerMessageBoxManager_IsMessageBoxIdActiveOrPending");
static_assert(sizeof(MarinerMessageBoxManager_IsMessageBoxIdActiveOrPending) == 0x000008, "Wrong size on MarinerMessageBoxManager_IsMessageBoxIdActiveOrPending");
static_assert(offsetof(MarinerMessageBoxManager_IsMessageBoxIdActiveOrPending, MessageId) == 0x000000, "Member 'MarinerMessageBoxManager_IsMessageBoxIdActiveOrPending::MessageId' has a wrong offset!");
static_assert(offsetof(MarinerMessageBoxManager_IsMessageBoxIdActiveOrPending, ReturnValue) == 0x000004, "Member 'MarinerMessageBoxManager_IsMessageBoxIdActiveOrPending::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerArtifactsSubMenuButton.OnArtifactPresetChanged
// 0x0001 (0x0001 - 0x0000)
struct MarinerArtifactsSubMenuButton_OnArtifactPresetChanged final
{
public:
	bool                                          bRanked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerArtifactsSubMenuButton_OnArtifactPresetChanged) == 0x000001, "Wrong alignment on MarinerArtifactsSubMenuButton_OnArtifactPresetChanged");
static_assert(sizeof(MarinerArtifactsSubMenuButton_OnArtifactPresetChanged) == 0x000001, "Wrong size on MarinerArtifactsSubMenuButton_OnArtifactPresetChanged");
static_assert(offsetof(MarinerArtifactsSubMenuButton_OnArtifactPresetChanged, bRanked) == 0x000000, "Member 'MarinerArtifactsSubMenuButton_OnArtifactPresetChanged::bRanked' has a wrong offset!");

// Function Mariner.MarinerModeGlobals.GetCurrentModeData
// 0x0018 (0x0018 - 0x0000)
struct MarinerModeGlobals_GetCurrentModeData final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerModeDataAsset*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeGlobals_GetCurrentModeData) == 0x000008, "Wrong alignment on MarinerModeGlobals_GetCurrentModeData");
static_assert(sizeof(MarinerModeGlobals_GetCurrentModeData) == 0x000018, "Wrong size on MarinerModeGlobals_GetCurrentModeData");
static_assert(offsetof(MarinerModeGlobals_GetCurrentModeData, WorldContextObject) == 0x000000, "Member 'MarinerModeGlobals_GetCurrentModeData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerModeGlobals_GetCurrentModeData, bIsValid) == 0x000008, "Member 'MarinerModeGlobals_GetCurrentModeData::bIsValid' has a wrong offset!");
static_assert(offsetof(MarinerModeGlobals_GetCurrentModeData, ReturnValue) == 0x000010, "Member 'MarinerModeGlobals_GetCurrentModeData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeGlobals.GetCurrentModeDescription
// 0x0020 (0x0020 - 0x0000)
struct MarinerModeGlobals_GetCurrentModeDescription final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeGlobals_GetCurrentModeDescription) == 0x000008, "Wrong alignment on MarinerModeGlobals_GetCurrentModeDescription");
static_assert(sizeof(MarinerModeGlobals_GetCurrentModeDescription) == 0x000020, "Wrong size on MarinerModeGlobals_GetCurrentModeDescription");
static_assert(offsetof(MarinerModeGlobals_GetCurrentModeDescription, WorldContextObject) == 0x000000, "Member 'MarinerModeGlobals_GetCurrentModeDescription::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerModeGlobals_GetCurrentModeDescription, ReturnValue) == 0x000008, "Member 'MarinerModeGlobals_GetCurrentModeDescription::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeGlobals.GetCurrentModeName
// 0x0020 (0x0020 - 0x0000)
struct MarinerModeGlobals_GetCurrentModeName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeGlobals_GetCurrentModeName) == 0x000008, "Wrong alignment on MarinerModeGlobals_GetCurrentModeName");
static_assert(sizeof(MarinerModeGlobals_GetCurrentModeName) == 0x000020, "Wrong size on MarinerModeGlobals_GetCurrentModeName");
static_assert(offsetof(MarinerModeGlobals_GetCurrentModeName, WorldContextObject) == 0x000000, "Member 'MarinerModeGlobals_GetCurrentModeName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerModeGlobals_GetCurrentModeName, ReturnValue) == 0x000008, "Member 'MarinerModeGlobals_GetCurrentModeName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeGlobals.IsModeValid
// 0x0020 (0x0020 - 0x0000)
struct MarinerModeGlobals_IsModeValid final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CmsId;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161E[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerModeGlobals_IsModeValid) == 0x000008, "Wrong alignment on MarinerModeGlobals_IsModeValid");
static_assert(sizeof(MarinerModeGlobals_IsModeValid) == 0x000020, "Wrong size on MarinerModeGlobals_IsModeValid");
static_assert(offsetof(MarinerModeGlobals_IsModeValid, WorldContextObject) == 0x000000, "Member 'MarinerModeGlobals_IsModeValid::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerModeGlobals_IsModeValid, CmsId) == 0x000008, "Member 'MarinerModeGlobals_IsModeValid::CmsId' has a wrong offset!");
static_assert(offsetof(MarinerModeGlobals_IsModeValid, ReturnValue) == 0x000018, "Member 'MarinerModeGlobals_IsModeValid::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeGlobals.TryAndGetMangoModeFromCurrentMode
// 0x0068 (0x0068 - 0x0000)
struct MarinerModeGlobals_TryAndGetMangoModeFromCurrentMode final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161F[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoMode                             ReturnValue;                                       // 0x0010(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeGlobals_TryAndGetMangoModeFromCurrentMode) == 0x000008, "Wrong alignment on MarinerModeGlobals_TryAndGetMangoModeFromCurrentMode");
static_assert(sizeof(MarinerModeGlobals_TryAndGetMangoModeFromCurrentMode) == 0x000068, "Wrong size on MarinerModeGlobals_TryAndGetMangoModeFromCurrentMode");
static_assert(offsetof(MarinerModeGlobals_TryAndGetMangoModeFromCurrentMode, WorldContextObject) == 0x000000, "Member 'MarinerModeGlobals_TryAndGetMangoModeFromCurrentMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerModeGlobals_TryAndGetMangoModeFromCurrentMode, bIsValid) == 0x000008, "Member 'MarinerModeGlobals_TryAndGetMangoModeFromCurrentMode::bIsValid' has a wrong offset!");
static_assert(offsetof(MarinerModeGlobals_TryAndGetMangoModeFromCurrentMode, ReturnValue) == 0x000010, "Member 'MarinerModeGlobals_TryAndGetMangoModeFromCurrentMode::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeGlobals.TryAndGetMangoModeFromLoadName
// 0x0078 (0x0078 - 0x0000)
struct MarinerModeGlobals_TryAndGetMangoModeFromLoadName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoadName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1620[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoMode                             ReturnValue;                                       // 0x0020(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeGlobals_TryAndGetMangoModeFromLoadName) == 0x000008, "Wrong alignment on MarinerModeGlobals_TryAndGetMangoModeFromLoadName");
static_assert(sizeof(MarinerModeGlobals_TryAndGetMangoModeFromLoadName) == 0x000078, "Wrong size on MarinerModeGlobals_TryAndGetMangoModeFromLoadName");
static_assert(offsetof(MarinerModeGlobals_TryAndGetMangoModeFromLoadName, WorldContextObject) == 0x000000, "Member 'MarinerModeGlobals_TryAndGetMangoModeFromLoadName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerModeGlobals_TryAndGetMangoModeFromLoadName, LoadName) == 0x000008, "Member 'MarinerModeGlobals_TryAndGetMangoModeFromLoadName::LoadName' has a wrong offset!");
static_assert(offsetof(MarinerModeGlobals_TryAndGetMangoModeFromLoadName, bIsValid) == 0x000018, "Member 'MarinerModeGlobals_TryAndGetMangoModeFromLoadName::bIsValid' has a wrong offset!");
static_assert(offsetof(MarinerModeGlobals_TryAndGetMangoModeFromLoadName, ReturnValue) == 0x000020, "Member 'MarinerModeGlobals_TryAndGetMangoModeFromLoadName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeGlobals.TryAndGetModeDataByClass
// 0x0010 (0x0010 - 0x0000)
struct MarinerModeGlobals_TryAndGetModeDataByClass final
{
public:
	class UClass*                                 Param_Class;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerModeDataAsset*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeGlobals_TryAndGetModeDataByClass) == 0x000008, "Wrong alignment on MarinerModeGlobals_TryAndGetModeDataByClass");
static_assert(sizeof(MarinerModeGlobals_TryAndGetModeDataByClass) == 0x000010, "Wrong size on MarinerModeGlobals_TryAndGetModeDataByClass");
static_assert(offsetof(MarinerModeGlobals_TryAndGetModeDataByClass, Param_Class) == 0x000000, "Member 'MarinerModeGlobals_TryAndGetModeDataByClass::Param_Class' has a wrong offset!");
static_assert(offsetof(MarinerModeGlobals_TryAndGetModeDataByClass, ReturnValue) == 0x000008, "Member 'MarinerModeGlobals_TryAndGetModeDataByClass::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeGlobals.TryAndGetModeDataFromLoadName
// 0x0018 (0x0018 - 0x0000)
struct MarinerModeGlobals_TryAndGetModeDataFromLoadName final
{
public:
	class FString                                 LoadName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerModeDataAsset*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeGlobals_TryAndGetModeDataFromLoadName) == 0x000008, "Wrong alignment on MarinerModeGlobals_TryAndGetModeDataFromLoadName");
static_assert(sizeof(MarinerModeGlobals_TryAndGetModeDataFromLoadName) == 0x000018, "Wrong size on MarinerModeGlobals_TryAndGetModeDataFromLoadName");
static_assert(offsetof(MarinerModeGlobals_TryAndGetModeDataFromLoadName, LoadName) == 0x000000, "Member 'MarinerModeGlobals_TryAndGetModeDataFromLoadName::LoadName' has a wrong offset!");
static_assert(offsetof(MarinerModeGlobals_TryAndGetModeDataFromLoadName, ReturnValue) == 0x000010, "Member 'MarinerModeGlobals_TryAndGetModeDataFromLoadName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowItemPopups.OnItemPopupsGranted
// 0x0050 (0x0050 - 0x0000)
struct MarinerAsyncFlowItemPopups_OnItemPopupsGranted final
{
public:
	struct FMangoOrderDetails                     OrderDetails;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowItemPopups_OnItemPopupsGranted) == 0x000008, "Wrong alignment on MarinerAsyncFlowItemPopups_OnItemPopupsGranted");
static_assert(sizeof(MarinerAsyncFlowItemPopups_OnItemPopupsGranted) == 0x000050, "Wrong size on MarinerAsyncFlowItemPopups_OnItemPopupsGranted");
static_assert(offsetof(MarinerAsyncFlowItemPopups_OnItemPopupsGranted, OrderDetails) == 0x000000, "Member 'MarinerAsyncFlowItemPopups_OnItemPopupsGranted::OrderDetails' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowNews.OnNewsImageLoaded
// 0x0010 (0x0010 - 0x0000)
struct MarinerAsyncFlowNews_OnNewsImageLoaded final
{
public:
	class FName                                   ImageId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowNews_OnNewsImageLoaded) == 0x000008, "Wrong alignment on MarinerAsyncFlowNews_OnNewsImageLoaded");
static_assert(sizeof(MarinerAsyncFlowNews_OnNewsImageLoaded) == 0x000010, "Wrong size on MarinerAsyncFlowNews_OnNewsImageLoaded");
static_assert(offsetof(MarinerAsyncFlowNews_OnNewsImageLoaded, ImageId) == 0x000000, "Member 'MarinerAsyncFlowNews_OnNewsImageLoaded::ImageId' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowNews_OnNewsImageLoaded, Texture) == 0x000008, "Member 'MarinerAsyncFlowNews_OnNewsImageLoaded::Texture' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.BeginBlastPassPurchase
// 0x0068 (0x0068 - 0x0000)
struct MarinerAsyncFlowOffers_BeginBlastPassPurchase final
{
public:
	struct FMangoBlastPassDefinition              InBlastPassDefinition;                             // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_BeginBlastPassPurchase) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_BeginBlastPassPurchase");
static_assert(sizeof(MarinerAsyncFlowOffers_BeginBlastPassPurchase) == 0x000068, "Wrong size on MarinerAsyncFlowOffers_BeginBlastPassPurchase");
static_assert(offsetof(MarinerAsyncFlowOffers_BeginBlastPassPurchase, InBlastPassDefinition) == 0x000000, "Member 'MarinerAsyncFlowOffers_BeginBlastPassPurchase::InBlastPassDefinition' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.BeginBlastPassTierPurchase
// 0x0070 (0x0070 - 0x0000)
struct MarinerAsyncFlowOffers_BeginBlastPassTierPurchase final
{
public:
	struct FMangoBlastPassDefinition              InBlastPassDefinition;                             // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InMinTier;                                         // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxTier;                                         // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_BeginBlastPassTierPurchase) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_BeginBlastPassTierPurchase");
static_assert(sizeof(MarinerAsyncFlowOffers_BeginBlastPassTierPurchase) == 0x000070, "Wrong size on MarinerAsyncFlowOffers_BeginBlastPassTierPurchase");
static_assert(offsetof(MarinerAsyncFlowOffers_BeginBlastPassTierPurchase, InBlastPassDefinition) == 0x000000, "Member 'MarinerAsyncFlowOffers_BeginBlastPassTierPurchase::InBlastPassDefinition' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_BeginBlastPassTierPurchase, InMinTier) == 0x000068, "Member 'MarinerAsyncFlowOffers_BeginBlastPassTierPurchase::InMinTier' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_BeginBlastPassTierPurchase, InMaxTier) == 0x00006C, "Member 'MarinerAsyncFlowOffers_BeginBlastPassTierPurchase::InMaxTier' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.BeginNativeOfferPurchase
// 0x00C0 (0x00C0 - 0x0000)
struct MarinerAsyncFlowOffers_BeginNativeOfferPurchase final
{
public:
	struct FMangoNativeOffer                      InNativeOffer;                                     // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_BeginNativeOfferPurchase) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_BeginNativeOfferPurchase");
static_assert(sizeof(MarinerAsyncFlowOffers_BeginNativeOfferPurchase) == 0x0000C0, "Wrong size on MarinerAsyncFlowOffers_BeginNativeOfferPurchase");
static_assert(offsetof(MarinerAsyncFlowOffers_BeginNativeOfferPurchase, InNativeOffer) == 0x000000, "Member 'MarinerAsyncFlowOffers_BeginNativeOfferPurchase::InNativeOffer' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.BeginOfferListPurchase
// 0x0050 (0x0050 - 0x0000)
struct MarinerAsyncFlowOffers_BeginOfferListPurchase final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Body;                                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         OfferIds;                                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         NativeOfferLookupIdentifiers;                      // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_BeginOfferListPurchase) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_BeginOfferListPurchase");
static_assert(sizeof(MarinerAsyncFlowOffers_BeginOfferListPurchase) == 0x000050, "Wrong size on MarinerAsyncFlowOffers_BeginOfferListPurchase");
static_assert(offsetof(MarinerAsyncFlowOffers_BeginOfferListPurchase, Header) == 0x000000, "Member 'MarinerAsyncFlowOffers_BeginOfferListPurchase::Header' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_BeginOfferListPurchase, Body) == 0x000018, "Member 'MarinerAsyncFlowOffers_BeginOfferListPurchase::Body' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_BeginOfferListPurchase, OfferIds) == 0x000030, "Member 'MarinerAsyncFlowOffers_BeginOfferListPurchase::OfferIds' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_BeginOfferListPurchase, NativeOfferLookupIdentifiers) == 0x000040, "Member 'MarinerAsyncFlowOffers_BeginOfferListPurchase::NativeOfferLookupIdentifiers' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.BeginOfferPurchase
// 0x00E8 (0x00E8 - 0x0000)
struct MarinerAsyncFlowOffers_BeginOfferPurchase final
{
public:
	struct FMangoPurchaseOffer                    InOffer;                                           // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInPremiumRequested;                               // 0x00D8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1627[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerPlayableCharacter*              InEquipToCharacter;                                // 0x00E0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_BeginOfferPurchase) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_BeginOfferPurchase");
static_assert(sizeof(MarinerAsyncFlowOffers_BeginOfferPurchase) == 0x0000E8, "Wrong size on MarinerAsyncFlowOffers_BeginOfferPurchase");
static_assert(offsetof(MarinerAsyncFlowOffers_BeginOfferPurchase, InOffer) == 0x000000, "Member 'MarinerAsyncFlowOffers_BeginOfferPurchase::InOffer' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_BeginOfferPurchase, bInPremiumRequested) == 0x0000D8, "Member 'MarinerAsyncFlowOffers_BeginOfferPurchase::bInPremiumRequested' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_BeginOfferPurchase, InEquipToCharacter) == 0x0000E0, "Member 'MarinerAsyncFlowOffers_BeginOfferPurchase::InEquipToCharacter' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.BeginOfferPurchaseWithCurrencySelection
// 0x00E0 (0x00E0 - 0x0000)
struct MarinerAsyncFlowOffers_BeginOfferPurchaseWithCurrencySelection final
{
public:
	struct FMangoPurchaseOffer                    InOffer;                                           // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UMarinerPlayableCharacter*              InEquipToCharacter;                                // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_BeginOfferPurchaseWithCurrencySelection) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_BeginOfferPurchaseWithCurrencySelection");
static_assert(sizeof(MarinerAsyncFlowOffers_BeginOfferPurchaseWithCurrencySelection) == 0x0000E0, "Wrong size on MarinerAsyncFlowOffers_BeginOfferPurchaseWithCurrencySelection");
static_assert(offsetof(MarinerAsyncFlowOffers_BeginOfferPurchaseWithCurrencySelection, InOffer) == 0x000000, "Member 'MarinerAsyncFlowOffers_BeginOfferPurchaseWithCurrencySelection::InOffer' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_BeginOfferPurchaseWithCurrencySelection, InEquipToCharacter) == 0x0000D8, "Member 'MarinerAsyncFlowOffers_BeginOfferPurchaseWithCurrencySelection::InEquipToCharacter' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.BeginPurchase
// 0x0018 (0x0018 - 0x0000)
struct MarinerAsyncFlowOffers_BeginPurchase final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_BeginPurchase) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_BeginPurchase");
static_assert(sizeof(MarinerAsyncFlowOffers_BeginPurchase) == 0x000018, "Wrong size on MarinerAsyncFlowOffers_BeginPurchase");
static_assert(offsetof(MarinerAsyncFlowOffers_BeginPurchase, KeyPressed) == 0x000000, "Member 'MarinerAsyncFlowOffers_BeginPurchase::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.CancelPurchase
// 0x0018 (0x0018 - 0x0000)
struct MarinerAsyncFlowOffers_CancelPurchase final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_CancelPurchase) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_CancelPurchase");
static_assert(sizeof(MarinerAsyncFlowOffers_CancelPurchase) == 0x000018, "Wrong size on MarinerAsyncFlowOffers_CancelPurchase");
static_assert(offsetof(MarinerAsyncFlowOffers_CancelPurchase, KeyPressed) == 0x000000, "Member 'MarinerAsyncFlowOffers_CancelPurchase::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.CancelPurchaseWithCheck
// 0x0018 (0x0018 - 0x0000)
struct MarinerAsyncFlowOffers_CancelPurchaseWithCheck final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_CancelPurchaseWithCheck) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_CancelPurchaseWithCheck");
static_assert(sizeof(MarinerAsyncFlowOffers_CancelPurchaseWithCheck) == 0x000018, "Wrong size on MarinerAsyncFlowOffers_CancelPurchaseWithCheck");
static_assert(offsetof(MarinerAsyncFlowOffers_CancelPurchaseWithCheck, KeyPressed) == 0x000000, "Member 'MarinerAsyncFlowOffers_CancelPurchaseWithCheck::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.CompletePurchase
// 0x0018 (0x0018 - 0x0000)
struct MarinerAsyncFlowOffers_CompletePurchase final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_CompletePurchase) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_CompletePurchase");
static_assert(sizeof(MarinerAsyncFlowOffers_CompletePurchase) == 0x000018, "Wrong size on MarinerAsyncFlowOffers_CompletePurchase");
static_assert(offsetof(MarinerAsyncFlowOffers_CompletePurchase, KeyPressed) == 0x000000, "Member 'MarinerAsyncFlowOffers_CompletePurchase::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.ConfirmGoToStore
// 0x0018 (0x0018 - 0x0000)
struct MarinerAsyncFlowOffers_ConfirmGoToStore final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_ConfirmGoToStore) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_ConfirmGoToStore");
static_assert(sizeof(MarinerAsyncFlowOffers_ConfirmGoToStore) == 0x000018, "Wrong size on MarinerAsyncFlowOffers_ConfirmGoToStore");
static_assert(offsetof(MarinerAsyncFlowOffers_ConfirmGoToStore, KeyPressed) == 0x000000, "Member 'MarinerAsyncFlowOffers_ConfirmGoToStore::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.HandleEmotesEquip
// 0x0018 (0x0018 - 0x0000)
struct MarinerAsyncFlowOffers_HandleEmotesEquip final
{
public:
	TArray<class UItemLoadResponse*>              LoadedDataResponse;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1628[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAsyncFlowOffers_HandleEmotesEquip) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_HandleEmotesEquip");
static_assert(sizeof(MarinerAsyncFlowOffers_HandleEmotesEquip) == 0x000018, "Wrong size on MarinerAsyncFlowOffers_HandleEmotesEquip");
static_assert(offsetof(MarinerAsyncFlowOffers_HandleEmotesEquip, LoadedDataResponse) == 0x000000, "Member 'MarinerAsyncFlowOffers_HandleEmotesEquip::LoadedDataResponse' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_HandleEmotesEquip, ItemType) == 0x000010, "Member 'MarinerAsyncFlowOffers_HandleEmotesEquip::ItemType' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.OfferListCallback
// 0x0018 (0x0018 - 0x0000)
struct MarinerAsyncFlowOffers_OfferListCallback final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStandardOffer;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1629[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAsyncFlowOffers_OfferListCallback) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_OfferListCallback");
static_assert(sizeof(MarinerAsyncFlowOffers_OfferListCallback) == 0x000018, "Wrong size on MarinerAsyncFlowOffers_OfferListCallback");
static_assert(offsetof(MarinerAsyncFlowOffers_OfferListCallback, OfferId) == 0x000000, "Member 'MarinerAsyncFlowOffers_OfferListCallback::OfferId' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_OfferListCallback, bStandardOffer) == 0x000010, "Member 'MarinerAsyncFlowOffers_OfferListCallback::bStandardOffer' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.OnBlastPassTierPurchaseComplete
// 0x0058 (0x0058 - 0x0000)
struct MarinerAsyncFlowOffers_OnBlastPassTierPurchaseComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_162A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxTierPurchased;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoOrderDetails                     OrderDetails;                                      // 0x0008(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_OnBlastPassTierPurchaseComplete) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_OnBlastPassTierPurchaseComplete");
static_assert(sizeof(MarinerAsyncFlowOffers_OnBlastPassTierPurchaseComplete) == 0x000058, "Wrong size on MarinerAsyncFlowOffers_OnBlastPassTierPurchaseComplete");
static_assert(offsetof(MarinerAsyncFlowOffers_OnBlastPassTierPurchaseComplete, bWasSuccessful) == 0x000000, "Member 'MarinerAsyncFlowOffers_OnBlastPassTierPurchaseComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_OnBlastPassTierPurchaseComplete, MaxTierPurchased) == 0x000004, "Member 'MarinerAsyncFlowOffers_OnBlastPassTierPurchaseComplete::MaxTierPurchased' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_OnBlastPassTierPurchaseComplete, OrderDetails) == 0x000008, "Member 'MarinerAsyncFlowOffers_OnBlastPassTierPurchaseComplete::OrderDetails' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.OnEquipLoadFinished
// 0x0010 (0x0010 - 0x0000)
struct MarinerAsyncFlowOffers_OnEquipLoadFinished final
{
public:
	TArray<class UItemLoadResponse*>              LoadedDataResponse;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_OnEquipLoadFinished) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_OnEquipLoadFinished");
static_assert(sizeof(MarinerAsyncFlowOffers_OnEquipLoadFinished) == 0x000010, "Wrong size on MarinerAsyncFlowOffers_OnEquipLoadFinished");
static_assert(offsetof(MarinerAsyncFlowOffers_OnEquipLoadFinished, LoadedDataResponse) == 0x000000, "Member 'MarinerAsyncFlowOffers_OnEquipLoadFinished::LoadedDataResponse' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.OnNativeOfferPurchaseComplete
// 0x0068 (0x0068 - 0x0000)
struct MarinerAsyncFlowOffers_OnNativeOfferPurchaseComplete final
{
public:
	EMangoNativePurchaseCompleteReason            CompleteReason;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_162B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NativeOfferId;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoOrderDetails                     OrderDetails;                                      // 0x0018(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_OnNativeOfferPurchaseComplete) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_OnNativeOfferPurchaseComplete");
static_assert(sizeof(MarinerAsyncFlowOffers_OnNativeOfferPurchaseComplete) == 0x000068, "Wrong size on MarinerAsyncFlowOffers_OnNativeOfferPurchaseComplete");
static_assert(offsetof(MarinerAsyncFlowOffers_OnNativeOfferPurchaseComplete, CompleteReason) == 0x000000, "Member 'MarinerAsyncFlowOffers_OnNativeOfferPurchaseComplete::CompleteReason' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_OnNativeOfferPurchaseComplete, NativeOfferId) == 0x000008, "Member 'MarinerAsyncFlowOffers_OnNativeOfferPurchaseComplete::NativeOfferId' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_OnNativeOfferPurchaseComplete, OrderDetails) == 0x000018, "Member 'MarinerAsyncFlowOffers_OnNativeOfferPurchaseComplete::OrderDetails' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.OnOfferPurchaseCompleteClose
// 0x0018 (0x0018 - 0x0000)
struct MarinerAsyncFlowOffers_OnOfferPurchaseCompleteClose final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_OnOfferPurchaseCompleteClose) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_OnOfferPurchaseCompleteClose");
static_assert(sizeof(MarinerAsyncFlowOffers_OnOfferPurchaseCompleteClose) == 0x000018, "Wrong size on MarinerAsyncFlowOffers_OnOfferPurchaseCompleteClose");
static_assert(offsetof(MarinerAsyncFlowOffers_OnOfferPurchaseCompleteClose, KeyPressed) == 0x000000, "Member 'MarinerAsyncFlowOffers_OnOfferPurchaseCompleteClose::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.OnOfferPurchaseCompleteEquip
// 0x0018 (0x0018 - 0x0000)
struct MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquip final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquip) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquip");
static_assert(sizeof(MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquip) == 0x000018, "Wrong size on MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquip");
static_assert(offsetof(MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquip, KeyPressed) == 0x000000, "Member 'MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquip::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.OnOfferPurchaseCompleteEquipAll
// 0x0018 (0x0018 - 0x0000)
struct MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquipAll final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquipAll) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquipAll");
static_assert(sizeof(MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquipAll) == 0x000018, "Wrong size on MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquipAll");
static_assert(offsetof(MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquipAll, KeyPressed) == 0x000000, "Member 'MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquipAll::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.OnStorePurchaseComplete
// 0x0068 (0x0068 - 0x0000)
struct MarinerAsyncFlowOffers_OnStorePurchaseComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_162C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OfferId;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoOrderDetails                     OrderDetails;                                      // 0x0018(0x0050)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_OnStorePurchaseComplete) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_OnStorePurchaseComplete");
static_assert(sizeof(MarinerAsyncFlowOffers_OnStorePurchaseComplete) == 0x000068, "Wrong size on MarinerAsyncFlowOffers_OnStorePurchaseComplete");
static_assert(offsetof(MarinerAsyncFlowOffers_OnStorePurchaseComplete, bWasSuccessful) == 0x000000, "Member 'MarinerAsyncFlowOffers_OnStorePurchaseComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_OnStorePurchaseComplete, OfferId) == 0x000008, "Member 'MarinerAsyncFlowOffers_OnStorePurchaseComplete::OfferId' has a wrong offset!");
static_assert(offsetof(MarinerAsyncFlowOffers_OnStorePurchaseComplete, OrderDetails) == 0x000018, "Member 'MarinerAsyncFlowOffers_OnStorePurchaseComplete::OrderDetails' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.PurchaseBlastPassTiers
// 0x0018 (0x0018 - 0x0000)
struct MarinerAsyncFlowOffers_PurchaseBlastPassTiers final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_PurchaseBlastPassTiers) == 0x000008, "Wrong alignment on MarinerAsyncFlowOffers_PurchaseBlastPassTiers");
static_assert(sizeof(MarinerAsyncFlowOffers_PurchaseBlastPassTiers) == 0x000018, "Wrong size on MarinerAsyncFlowOffers_PurchaseBlastPassTiers");
static_assert(offsetof(MarinerAsyncFlowOffers_PurchaseBlastPassTiers, KeyPressed) == 0x000000, "Member 'MarinerAsyncFlowOffers_PurchaseBlastPassTiers::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOffers.IsOfferPurchaseFlowActive
// 0x0001 (0x0001 - 0x0000)
struct MarinerAsyncFlowOffers_IsOfferPurchaseFlowActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOffers_IsOfferPurchaseFlowActive) == 0x000001, "Wrong alignment on MarinerAsyncFlowOffers_IsOfferPurchaseFlowActive");
static_assert(sizeof(MarinerAsyncFlowOffers_IsOfferPurchaseFlowActive) == 0x000001, "Wrong size on MarinerAsyncFlowOffers_IsOfferPurchaseFlowActive");
static_assert(offsetof(MarinerAsyncFlowOffers_IsOfferPurchaseFlowActive, ReturnValue) == 0x000000, "Member 'MarinerAsyncFlowOffers_IsOfferPurchaseFlowActive::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOnboarding.GetOnboardingPlaylistState
// 0x0001 (0x0001 - 0x0000)
struct MarinerAsyncFlowOnboarding_GetOnboardingPlaylistState final
{
public:
	EMarinerOnboardingPlaylistState               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOnboarding_GetOnboardingPlaylistState) == 0x000001, "Wrong alignment on MarinerAsyncFlowOnboarding_GetOnboardingPlaylistState");
static_assert(sizeof(MarinerAsyncFlowOnboarding_GetOnboardingPlaylistState) == 0x000001, "Wrong size on MarinerAsyncFlowOnboarding_GetOnboardingPlaylistState");
static_assert(offsetof(MarinerAsyncFlowOnboarding_GetOnboardingPlaylistState, ReturnValue) == 0x000000, "Member 'MarinerAsyncFlowOnboarding_GetOnboardingPlaylistState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAsyncFlowOnboarding.GetOnboardingState
// 0x0001 (0x0001 - 0x0000)
struct MarinerAsyncFlowOnboarding_GetOnboardingState final
{
public:
	EMarinerOnboardingStates                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncFlowOnboarding_GetOnboardingState) == 0x000001, "Wrong alignment on MarinerAsyncFlowOnboarding_GetOnboardingState");
static_assert(sizeof(MarinerAsyncFlowOnboarding_GetOnboardingState) == 0x000001, "Wrong size on MarinerAsyncFlowOnboarding_GetOnboardingState");
static_assert(offsetof(MarinerAsyncFlowOnboarding_GetOnboardingState, ReturnValue) == 0x000000, "Member 'MarinerAsyncFlowOnboarding_GetOnboardingState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAsyncImage.OnTextureAsyncLoadFinished
// 0x0028 (0x0028 - 0x0000)
struct MarinerAsyncImage_OnTextureAsyncLoadFinished final
{
public:
	TSoftObjectPtr<class UTexture2D>              InSoftTexture;                                     // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncImage_OnTextureAsyncLoadFinished) == 0x000008, "Wrong alignment on MarinerAsyncImage_OnTextureAsyncLoadFinished");
static_assert(sizeof(MarinerAsyncImage_OnTextureAsyncLoadFinished) == 0x000028, "Wrong size on MarinerAsyncImage_OnTextureAsyncLoadFinished");
static_assert(offsetof(MarinerAsyncImage_OnTextureAsyncLoadFinished, InSoftTexture) == 0x000000, "Member 'MarinerAsyncImage_OnTextureAsyncLoadFinished::InSoftTexture' has a wrong offset!");

// Function Mariner.MarinerAsyncImage.PopulateWithSoftTexture
// 0x0028 (0x0028 - 0x0000)
struct MarinerAsyncImage_PopulateWithSoftTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              InSoftTexture;                                     // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAsyncImage_PopulateWithSoftTexture) == 0x000008, "Wrong alignment on MarinerAsyncImage_PopulateWithSoftTexture");
static_assert(sizeof(MarinerAsyncImage_PopulateWithSoftTexture) == 0x000028, "Wrong size on MarinerAsyncImage_PopulateWithSoftTexture");
static_assert(offsetof(MarinerAsyncImage_PopulateWithSoftTexture, InSoftTexture) == 0x000000, "Member 'MarinerAsyncImage_PopulateWithSoftTexture::InSoftTexture' has a wrong offset!");

// Function Mariner.MarinerAvatarWidget.OnPlayerTalking
// 0x0028 (0x0028 - 0x0000)
struct MarinerAvatarWidget_OnPlayerTalking final
{
public:
	class FString                                 ChannelName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTalking;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1633[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerAvatarWidget_OnPlayerTalking) == 0x000008, "Wrong alignment on MarinerAvatarWidget_OnPlayerTalking");
static_assert(sizeof(MarinerAvatarWidget_OnPlayerTalking) == 0x000028, "Wrong size on MarinerAvatarWidget_OnPlayerTalking");
static_assert(offsetof(MarinerAvatarWidget_OnPlayerTalking, ChannelName) == 0x000000, "Member 'MarinerAvatarWidget_OnPlayerTalking::ChannelName' has a wrong offset!");
static_assert(offsetof(MarinerAvatarWidget_OnPlayerTalking, PlayerName) == 0x000010, "Member 'MarinerAvatarWidget_OnPlayerTalking::PlayerName' has a wrong offset!");
static_assert(offsetof(MarinerAvatarWidget_OnPlayerTalking, bIsTalking) == 0x000020, "Member 'MarinerAvatarWidget_OnPlayerTalking::bIsTalking' has a wrong offset!");

// Function Mariner.MarinerBaseContentWidget.AddCharacterContentGrid
// 0x0048 (0x0048 - 0x0000)
struct MarinerBaseContentWidget_AddCharacterContentGrid final
{
public:
	TArray<class UMarinerPlayableCharacter*>      LoadedItems;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerLayeredButton>      LayeredButtonSubclass;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UMarinerPlayableCharacter* Character)> OnCharacterAddedToGrid;                            // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   Header;                                            // 0x0028(0x0018)(Parm, NativeAccessSpecifierPublic)
	EMarinerContentGridType                       InContentType;                                     // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1639[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerBaseContentWidget_AddCharacterContentGrid) == 0x000008, "Wrong alignment on MarinerBaseContentWidget_AddCharacterContentGrid");
static_assert(sizeof(MarinerBaseContentWidget_AddCharacterContentGrid) == 0x000048, "Wrong size on MarinerBaseContentWidget_AddCharacterContentGrid");
static_assert(offsetof(MarinerBaseContentWidget_AddCharacterContentGrid, LoadedItems) == 0x000000, "Member 'MarinerBaseContentWidget_AddCharacterContentGrid::LoadedItems' has a wrong offset!");
static_assert(offsetof(MarinerBaseContentWidget_AddCharacterContentGrid, LayeredButtonSubclass) == 0x000010, "Member 'MarinerBaseContentWidget_AddCharacterContentGrid::LayeredButtonSubclass' has a wrong offset!");
static_assert(offsetof(MarinerBaseContentWidget_AddCharacterContentGrid, OnCharacterAddedToGrid) == 0x000018, "Member 'MarinerBaseContentWidget_AddCharacterContentGrid::OnCharacterAddedToGrid' has a wrong offset!");
static_assert(offsetof(MarinerBaseContentWidget_AddCharacterContentGrid, Header) == 0x000028, "Member 'MarinerBaseContentWidget_AddCharacterContentGrid::Header' has a wrong offset!");
static_assert(offsetof(MarinerBaseContentWidget_AddCharacterContentGrid, InContentType) == 0x000040, "Member 'MarinerBaseContentWidget_AddCharacterContentGrid::InContentType' has a wrong offset!");

// Function Mariner.MarinerBaseContentWidget.AddItemsContentGrid
// 0x0040 (0x0040 - 0x0000)
struct MarinerBaseContentWidget_AddItemsContentGrid final
{
public:
	TArray<class UItemLoadResponse*>              LoadedItems;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerLayeredButton>      LayeredButtonSubclass;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UItemLoadResponse* Item, bool bRanked)> OnItemAddedToGrid;                                 // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   Header;                                            // 0x0028(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBaseContentWidget_AddItemsContentGrid) == 0x000008, "Wrong alignment on MarinerBaseContentWidget_AddItemsContentGrid");
static_assert(sizeof(MarinerBaseContentWidget_AddItemsContentGrid) == 0x000040, "Wrong size on MarinerBaseContentWidget_AddItemsContentGrid");
static_assert(offsetof(MarinerBaseContentWidget_AddItemsContentGrid, LoadedItems) == 0x000000, "Member 'MarinerBaseContentWidget_AddItemsContentGrid::LoadedItems' has a wrong offset!");
static_assert(offsetof(MarinerBaseContentWidget_AddItemsContentGrid, LayeredButtonSubclass) == 0x000010, "Member 'MarinerBaseContentWidget_AddItemsContentGrid::LayeredButtonSubclass' has a wrong offset!");
static_assert(offsetof(MarinerBaseContentWidget_AddItemsContentGrid, OnItemAddedToGrid) == 0x000018, "Member 'MarinerBaseContentWidget_AddItemsContentGrid::OnItemAddedToGrid' has a wrong offset!");
static_assert(offsetof(MarinerBaseContentWidget_AddItemsContentGrid, Header) == 0x000028, "Member 'MarinerBaseContentWidget_AddItemsContentGrid::Header' has a wrong offset!");

// Function Mariner.MarinerBaseContentWidget.GetFirstItem
// 0x0008 (0x0008 - 0x0000)
struct MarinerBaseContentWidget_GetFirstItem final
{
public:
	class UMarinerLayeredButton*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBaseContentWidget_GetFirstItem) == 0x000008, "Wrong alignment on MarinerBaseContentWidget_GetFirstItem");
static_assert(sizeof(MarinerBaseContentWidget_GetFirstItem) == 0x000008, "Wrong size on MarinerBaseContentWidget_GetFirstItem");
static_assert(offsetof(MarinerBaseContentWidget_GetFirstItem, ReturnValue) == 0x000000, "Member 'MarinerBaseContentWidget_GetFirstItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBaseContentWidget.GetHighlightedItem
// 0x0018 (0x0018 - 0x0000)
struct MarinerBaseContentWidget_GetHighlightedItem final
{
public:
	class FString                                 LookupId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerLayeredButton*                  ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBaseContentWidget_GetHighlightedItem) == 0x000008, "Wrong alignment on MarinerBaseContentWidget_GetHighlightedItem");
static_assert(sizeof(MarinerBaseContentWidget_GetHighlightedItem) == 0x000018, "Wrong size on MarinerBaseContentWidget_GetHighlightedItem");
static_assert(offsetof(MarinerBaseContentWidget_GetHighlightedItem, LookupId) == 0x000000, "Member 'MarinerBaseContentWidget_GetHighlightedItem::LookupId' has a wrong offset!");
static_assert(offsetof(MarinerBaseContentWidget_GetHighlightedItem, ReturnValue) == 0x000010, "Member 'MarinerBaseContentWidget_GetHighlightedItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBaseContentWidget.HighlightItem
// 0x0018 (0x0018 - 0x0000)
struct MarinerBaseContentWidget_HighlightItem final
{
public:
	class FString                                 LookupId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerLayeredButton*                  ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBaseContentWidget_HighlightItem) == 0x000008, "Wrong alignment on MarinerBaseContentWidget_HighlightItem");
static_assert(sizeof(MarinerBaseContentWidget_HighlightItem) == 0x000018, "Wrong size on MarinerBaseContentWidget_HighlightItem");
static_assert(offsetof(MarinerBaseContentWidget_HighlightItem, LookupId) == 0x000000, "Member 'MarinerBaseContentWidget_HighlightItem::LookupId' has a wrong offset!");
static_assert(offsetof(MarinerBaseContentWidget_HighlightItem, ReturnValue) == 0x000010, "Member 'MarinerBaseContentWidget_HighlightItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBaseContentWidget.SetupGrid
// 0x000C (0x000C - 0x0000)
struct MarinerBaseContentWidget_SetupGrid final
{
public:
	int32                                         InColumns;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNumRows;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bFillEmpty;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_163A[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerBaseContentWidget_SetupGrid) == 0x000004, "Wrong alignment on MarinerBaseContentWidget_SetupGrid");
static_assert(sizeof(MarinerBaseContentWidget_SetupGrid) == 0x00000C, "Wrong size on MarinerBaseContentWidget_SetupGrid");
static_assert(offsetof(MarinerBaseContentWidget_SetupGrid, InColumns) == 0x000000, "Member 'MarinerBaseContentWidget_SetupGrid::InColumns' has a wrong offset!");
static_assert(offsetof(MarinerBaseContentWidget_SetupGrid, InNumRows) == 0x000004, "Member 'MarinerBaseContentWidget_SetupGrid::InNumRows' has a wrong offset!");
static_assert(offsetof(MarinerBaseContentWidget_SetupGrid, Param_bFillEmpty) == 0x000008, "Member 'MarinerBaseContentWidget_SetupGrid::Param_bFillEmpty' has a wrong offset!");

// Function Mariner.MarinerDamageImpulseHandler.BP_CalculateDamageImpulseVector
// 0x0048 (0x0048 - 0x0000)
struct MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector final
{
public:
	const class AActor*                           DamagedActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageImpulse;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageOrigin;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageDirection;                                   // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAOEDamage;                                      // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_163D[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	const class AController*                      DamageInstigator;                                  // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           DamageSourceActor;                                 // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0038(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_163E[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector) == 0x000008, "Wrong alignment on MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector");
static_assert(sizeof(MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector) == 0x000048, "Wrong size on MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector");
static_assert(offsetof(MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector, DamagedActor) == 0x000000, "Member 'MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector::DamagedActor' has a wrong offset!");
static_assert(offsetof(MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector, DamageImpulse) == 0x000008, "Member 'MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector::DamageImpulse' has a wrong offset!");
static_assert(offsetof(MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector, DamageOrigin) == 0x00000C, "Member 'MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector::DamageOrigin' has a wrong offset!");
static_assert(offsetof(MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector, DamageDirection) == 0x000018, "Member 'MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector::DamageDirection' has a wrong offset!");
static_assert(offsetof(MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector, bIsAOEDamage) == 0x000024, "Member 'MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector::bIsAOEDamage' has a wrong offset!");
static_assert(offsetof(MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector, DamageInstigator) == 0x000028, "Member 'MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector::DamageInstigator' has a wrong offset!");
static_assert(offsetof(MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector, DamageSourceActor) == 0x000030, "Member 'MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector::DamageSourceActor' has a wrong offset!");
static_assert(offsetof(MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector, ReturnValue) == 0x000038, "Member 'MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageImpulseHandler.BP_OverrideDamageImpulseOrigin
// 0x0048 (0x0048 - 0x0000)
struct MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin final
{
public:
	const class AActor*                           DamagedActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageOrigin;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageHitPoint;                                    // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAOEDamage;                                      // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_163F[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AController*                      DamageInstigator;                                  // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           DamageSourceActor;                                 // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0038(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1640[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin) == 0x000008, "Wrong alignment on MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin");
static_assert(sizeof(MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin) == 0x000048, "Wrong size on MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin");
static_assert(offsetof(MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin, DamagedActor) == 0x000000, "Member 'MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin::DamagedActor' has a wrong offset!");
static_assert(offsetof(MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin, DamageOrigin) == 0x000008, "Member 'MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin::DamageOrigin' has a wrong offset!");
static_assert(offsetof(MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin, DamageHitPoint) == 0x000014, "Member 'MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin::DamageHitPoint' has a wrong offset!");
static_assert(offsetof(MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin, bIsAOEDamage) == 0x000020, "Member 'MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin::bIsAOEDamage' has a wrong offset!");
static_assert(offsetof(MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin, DamageInstigator) == 0x000028, "Member 'MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin::DamageInstigator' has a wrong offset!");
static_assert(offsetof(MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin, DamageSourceActor) == 0x000030, "Member 'MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin::DamageSourceActor' has a wrong offset!");
static_assert(offsetof(MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin, ReturnValue) == 0x000038, "Member 'MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBaseItemSpawner.BP_OnItemDisturbed
// 0x0008 (0x0008 - 0x0000)
struct MarinerBaseItemSpawner_BP_OnItemDisturbed final
{
public:
	class AMarinerItem*                           DisturbedItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBaseItemSpawner_BP_OnItemDisturbed) == 0x000008, "Wrong alignment on MarinerBaseItemSpawner_BP_OnItemDisturbed");
static_assert(sizeof(MarinerBaseItemSpawner_BP_OnItemDisturbed) == 0x000008, "Wrong size on MarinerBaseItemSpawner_BP_OnItemDisturbed");
static_assert(offsetof(MarinerBaseItemSpawner_BP_OnItemDisturbed, DisturbedItem) == 0x000000, "Member 'MarinerBaseItemSpawner_BP_OnItemDisturbed::DisturbedItem' has a wrong offset!");

// Function Mariner.MarinerBaseItemSpawner.BP_OnItemSpawned
// 0x0008 (0x0008 - 0x0000)
struct MarinerBaseItemSpawner_BP_OnItemSpawned final
{
public:
	class AMarinerItem*                           SpawnedItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBaseItemSpawner_BP_OnItemSpawned) == 0x000008, "Wrong alignment on MarinerBaseItemSpawner_BP_OnItemSpawned");
static_assert(sizeof(MarinerBaseItemSpawner_BP_OnItemSpawned) == 0x000008, "Wrong size on MarinerBaseItemSpawner_BP_OnItemSpawned");
static_assert(offsetof(MarinerBaseItemSpawner_BP_OnItemSpawned, SpawnedItem) == 0x000000, "Member 'MarinerBaseItemSpawner_BP_OnItemSpawned::SpawnedItem' has a wrong offset!");

// Function Mariner.MarinerBaseItemSpawner.BP_OnRankedItemBoxSet
// 0x0001 (0x0001 - 0x0000)
struct MarinerBaseItemSpawner_BP_OnRankedItemBoxSet final
{
public:
	bool                                          bIsRanked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBaseItemSpawner_BP_OnRankedItemBoxSet) == 0x000001, "Wrong alignment on MarinerBaseItemSpawner_BP_OnRankedItemBoxSet");
static_assert(sizeof(MarinerBaseItemSpawner_BP_OnRankedItemBoxSet) == 0x000001, "Wrong size on MarinerBaseItemSpawner_BP_OnRankedItemBoxSet");
static_assert(offsetof(MarinerBaseItemSpawner_BP_OnRankedItemBoxSet, bIsRanked) == 0x000000, "Member 'MarinerBaseItemSpawner_BP_OnRankedItemBoxSet::bIsRanked' has a wrong offset!");

// Function Mariner.MarinerBaseItemSpawner.OnOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct MarinerBaseItemSpawner_OnOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1647[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerBaseItemSpawner_OnOverlapEnd) == 0x000008, "Wrong alignment on MarinerBaseItemSpawner_OnOverlapEnd");
static_assert(sizeof(MarinerBaseItemSpawner_OnOverlapEnd) == 0x000020, "Wrong size on MarinerBaseItemSpawner_OnOverlapEnd");
static_assert(offsetof(MarinerBaseItemSpawner_OnOverlapEnd, OverlappedComponent) == 0x000000, "Member 'MarinerBaseItemSpawner_OnOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MarinerBaseItemSpawner_OnOverlapEnd, OtherActor) == 0x000008, "Member 'MarinerBaseItemSpawner_OnOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerBaseItemSpawner_OnOverlapEnd, OtherComp) == 0x000010, "Member 'MarinerBaseItemSpawner_OnOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(MarinerBaseItemSpawner_OnOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'MarinerBaseItemSpawner_OnOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function Mariner.MarinerBaseItemSpawner.OnPlaylistEventItemsLoaded
// 0x0018 (0x0018 - 0x0000)
struct MarinerBaseItemSpawner_OnPlaylistEventItemsLoaded final
{
public:
	bool                                          bIsRanked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1648[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventId;                                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBaseItemSpawner_OnPlaylistEventItemsLoaded) == 0x000008, "Wrong alignment on MarinerBaseItemSpawner_OnPlaylistEventItemsLoaded");
static_assert(sizeof(MarinerBaseItemSpawner_OnPlaylistEventItemsLoaded) == 0x000018, "Wrong size on MarinerBaseItemSpawner_OnPlaylistEventItemsLoaded");
static_assert(offsetof(MarinerBaseItemSpawner_OnPlaylistEventItemsLoaded, bIsRanked) == 0x000000, "Member 'MarinerBaseItemSpawner_OnPlaylistEventItemsLoaded::bIsRanked' has a wrong offset!");
static_assert(offsetof(MarinerBaseItemSpawner_OnPlaylistEventItemsLoaded, EventId) == 0x000008, "Member 'MarinerBaseItemSpawner_OnPlaylistEventItemsLoaded::EventId' has a wrong offset!");

// Function Mariner.MarinerBaseItemSpawner.OnPlaylistInfoSet
// 0x0018 (0x0018 - 0x0000)
struct MarinerBaseItemSpawner_OnPlaylistInfoSet final
{
public:
	bool                                          bIsRanked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1649[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventId;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBaseItemSpawner_OnPlaylistInfoSet) == 0x000008, "Wrong alignment on MarinerBaseItemSpawner_OnPlaylistInfoSet");
static_assert(sizeof(MarinerBaseItemSpawner_OnPlaylistInfoSet) == 0x000018, "Wrong size on MarinerBaseItemSpawner_OnPlaylistInfoSet");
static_assert(offsetof(MarinerBaseItemSpawner_OnPlaylistInfoSet, bIsRanked) == 0x000000, "Member 'MarinerBaseItemSpawner_OnPlaylistInfoSet::bIsRanked' has a wrong offset!");
static_assert(offsetof(MarinerBaseItemSpawner_OnPlaylistInfoSet, EventId) == 0x000008, "Member 'MarinerBaseItemSpawner_OnPlaylistInfoSet::EventId' has a wrong offset!");

// Function Mariner.MarinerBaseItemSpawner.OnPooledItemDisturbed
// 0x0008 (0x0008 - 0x0000)
struct MarinerBaseItemSpawner_OnPooledItemDisturbed final
{
public:
	class AMarinerItem*                           DestroyedItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBaseItemSpawner_OnPooledItemDisturbed) == 0x000008, "Wrong alignment on MarinerBaseItemSpawner_OnPooledItemDisturbed");
static_assert(sizeof(MarinerBaseItemSpawner_OnPooledItemDisturbed) == 0x000008, "Wrong size on MarinerBaseItemSpawner_OnPooledItemDisturbed");
static_assert(offsetof(MarinerBaseItemSpawner_OnPooledItemDisturbed, DestroyedItem) == 0x000000, "Member 'MarinerBaseItemSpawner_OnPooledItemDisturbed::DestroyedItem' has a wrong offset!");

// Function Mariner.MarinerBaseItemSpawner.OnSpawnedItemDestroyed
// 0x0008 (0x0008 - 0x0000)
struct MarinerBaseItemSpawner_OnSpawnedItemDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBaseItemSpawner_OnSpawnedItemDestroyed) == 0x000008, "Wrong alignment on MarinerBaseItemSpawner_OnSpawnedItemDestroyed");
static_assert(sizeof(MarinerBaseItemSpawner_OnSpawnedItemDestroyed) == 0x000008, "Wrong size on MarinerBaseItemSpawner_OnSpawnedItemDestroyed");
static_assert(offsetof(MarinerBaseItemSpawner_OnSpawnedItemDestroyed, DestroyedActor) == 0x000000, "Member 'MarinerBaseItemSpawner_OnSpawnedItemDestroyed::DestroyedActor' has a wrong offset!");

// Function Mariner.MarinerBaseItemSpawner.OnSpawnedItemPickedUp
// 0x0010 (0x0010 - 0x0000)
struct MarinerBaseItemSpawner_OnSpawnedItemPickedUp final
{
public:
	class AMarinerItem*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerCharacter*                      NewItemCarrier;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBaseItemSpawner_OnSpawnedItemPickedUp) == 0x000008, "Wrong alignment on MarinerBaseItemSpawner_OnSpawnedItemPickedUp");
static_assert(sizeof(MarinerBaseItemSpawner_OnSpawnedItemPickedUp) == 0x000010, "Wrong size on MarinerBaseItemSpawner_OnSpawnedItemPickedUp");
static_assert(offsetof(MarinerBaseItemSpawner_OnSpawnedItemPickedUp, Item) == 0x000000, "Member 'MarinerBaseItemSpawner_OnSpawnedItemPickedUp::Item' has a wrong offset!");
static_assert(offsetof(MarinerBaseItemSpawner_OnSpawnedItemPickedUp, NewItemCarrier) == 0x000008, "Member 'MarinerBaseItemSpawner_OnSpawnedItemPickedUp::NewItemCarrier' has a wrong offset!");

// Function Mariner.MarinerBaseItemSpawner.SpawnItem
// 0x0001 (0x0001 - 0x0000)
struct MarinerBaseItemSpawner_SpawnItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBaseItemSpawner_SpawnItem) == 0x000001, "Wrong alignment on MarinerBaseItemSpawner_SpawnItem");
static_assert(sizeof(MarinerBaseItemSpawner_SpawnItem) == 0x000001, "Wrong size on MarinerBaseItemSpawner_SpawnItem");
static_assert(offsetof(MarinerBaseItemSpawner_SpawnItem, ReturnValue) == 0x000000, "Member 'MarinerBaseItemSpawner_SpawnItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.AdvanceState
// 0x0002 (0x0002 - 0x0000)
struct MarinerBasePinWidget_AdvanceState final
{
public:
	EPinState                                     NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_AdvanceState) == 0x000001, "Wrong alignment on MarinerBasePinWidget_AdvanceState");
static_assert(sizeof(MarinerBasePinWidget_AdvanceState) == 0x000002, "Wrong size on MarinerBasePinWidget_AdvanceState");
static_assert(offsetof(MarinerBasePinWidget_AdvanceState, NewState) == 0x000000, "Member 'MarinerBasePinWidget_AdvanceState::NewState' has a wrong offset!");
static_assert(offsetof(MarinerBasePinWidget_AdvanceState, ReturnValue) == 0x000001, "Member 'MarinerBasePinWidget_AdvanceState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.DetermineColorDetails
// 0x0010 (0x0010 - 0x0000)
struct MarinerBasePinWidget_DetermineColorDetails final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_DetermineColorDetails) == 0x000004, "Wrong alignment on MarinerBasePinWidget_DetermineColorDetails");
static_assert(sizeof(MarinerBasePinWidget_DetermineColorDetails) == 0x000010, "Wrong size on MarinerBasePinWidget_DetermineColorDetails");
static_assert(offsetof(MarinerBasePinWidget_DetermineColorDetails, ReturnValue) == 0x000000, "Member 'MarinerBasePinWidget_DetermineColorDetails::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.DeterminePinFrameBrush
// 0x0088 (0x0088 - 0x0000)
struct MarinerBasePinWidget_DeterminePinFrameBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_DeterminePinFrameBrush) == 0x000008, "Wrong alignment on MarinerBasePinWidget_DeterminePinFrameBrush");
static_assert(sizeof(MarinerBasePinWidget_DeterminePinFrameBrush) == 0x000088, "Wrong size on MarinerBasePinWidget_DeterminePinFrameBrush");
static_assert(offsetof(MarinerBasePinWidget_DeterminePinFrameBrush, ReturnValue) == 0x000000, "Member 'MarinerBasePinWidget_DeterminePinFrameBrush::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.DeterminePinImageBrush
// 0x0088 (0x0088 - 0x0000)
struct MarinerBasePinWidget_DeterminePinImageBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_DeterminePinImageBrush) == 0x000008, "Wrong alignment on MarinerBasePinWidget_DeterminePinImageBrush");
static_assert(sizeof(MarinerBasePinWidget_DeterminePinImageBrush) == 0x000088, "Wrong size on MarinerBasePinWidget_DeterminePinImageBrush");
static_assert(offsetof(MarinerBasePinWidget_DeterminePinImageBrush, ReturnValue) == 0x000000, "Member 'MarinerBasePinWidget_DeterminePinImageBrush::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.DeterminePinPointBrush
// 0x0088 (0x0088 - 0x0000)
struct MarinerBasePinWidget_DeterminePinPointBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_DeterminePinPointBrush) == 0x000008, "Wrong alignment on MarinerBasePinWidget_DeterminePinPointBrush");
static_assert(sizeof(MarinerBasePinWidget_DeterminePinPointBrush) == 0x000088, "Wrong size on MarinerBasePinWidget_DeterminePinPointBrush");
static_assert(offsetof(MarinerBasePinWidget_DeterminePinPointBrush, ReturnValue) == 0x000000, "Member 'MarinerBasePinWidget_DeterminePinPointBrush::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.DetermineVisibilityDetails
// 0x0001 (0x0001 - 0x0000)
struct MarinerBasePinWidget_DetermineVisibilityDetails final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_DetermineVisibilityDetails) == 0x000001, "Wrong alignment on MarinerBasePinWidget_DetermineVisibilityDetails");
static_assert(sizeof(MarinerBasePinWidget_DetermineVisibilityDetails) == 0x000001, "Wrong size on MarinerBasePinWidget_DetermineVisibilityDetails");
static_assert(offsetof(MarinerBasePinWidget_DetermineVisibilityDetails, ReturnValue) == 0x000000, "Member 'MarinerBasePinWidget_DetermineVisibilityDetails::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.HandleTransitionToNewState
// 0x0001 (0x0001 - 0x0000)
struct MarinerBasePinWidget_HandleTransitionToNewState final
{
public:
	EPinState                                     NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_HandleTransitionToNewState) == 0x000001, "Wrong alignment on MarinerBasePinWidget_HandleTransitionToNewState");
static_assert(sizeof(MarinerBasePinWidget_HandleTransitionToNewState) == 0x000001, "Wrong size on MarinerBasePinWidget_HandleTransitionToNewState");
static_assert(offsetof(MarinerBasePinWidget_HandleTransitionToNewState, NewState) == 0x000000, "Member 'MarinerBasePinWidget_HandleTransitionToNewState::NewState' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.OnActorReferenceChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerBasePinWidget_OnActorReferenceChanged final
{
public:
	class AActor*                                 NewActorReference;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_OnActorReferenceChanged) == 0x000008, "Wrong alignment on MarinerBasePinWidget_OnActorReferenceChanged");
static_assert(sizeof(MarinerBasePinWidget_OnActorReferenceChanged) == 0x000008, "Wrong size on MarinerBasePinWidget_OnActorReferenceChanged");
static_assert(offsetof(MarinerBasePinWidget_OnActorReferenceChanged, NewActorReference) == 0x000000, "Member 'MarinerBasePinWidget_OnActorReferenceChanged::NewActorReference' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.OnHasLineOfSightToActorChanged
// 0x0001 (0x0001 - 0x0000)
struct MarinerBasePinWidget_OnHasLineOfSightToActorChanged final
{
public:
	bool                                          bHasLineOfSight;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_OnHasLineOfSightToActorChanged) == 0x000001, "Wrong alignment on MarinerBasePinWidget_OnHasLineOfSightToActorChanged");
static_assert(sizeof(MarinerBasePinWidget_OnHasLineOfSightToActorChanged) == 0x000001, "Wrong size on MarinerBasePinWidget_OnHasLineOfSightToActorChanged");
static_assert(offsetof(MarinerBasePinWidget_OnHasLineOfSightToActorChanged, bHasLineOfSight) == 0x000000, "Member 'MarinerBasePinWidget_OnHasLineOfSightToActorChanged::bHasLineOfSight' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.OnInViewConeChanged
// 0x0001 (0x0001 - 0x0000)
struct MarinerBasePinWidget_OnInViewConeChanged final
{
public:
	bool                                          bInViewCone;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_OnInViewConeChanged) == 0x000001, "Wrong alignment on MarinerBasePinWidget_OnInViewConeChanged");
static_assert(sizeof(MarinerBasePinWidget_OnInViewConeChanged) == 0x000001, "Wrong size on MarinerBasePinWidget_OnInViewConeChanged");
static_assert(offsetof(MarinerBasePinWidget_OnInViewConeChanged, bInViewCone) == 0x000000, "Member 'MarinerBasePinWidget_OnInViewConeChanged::bInViewCone' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.OnIsAtEdgeOfScreenChanged
// 0x0001 (0x0001 - 0x0000)
struct MarinerBasePinWidget_OnIsAtEdgeOfScreenChanged final
{
public:
	bool                                          bEdgeOfScreen;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_OnIsAtEdgeOfScreenChanged) == 0x000001, "Wrong alignment on MarinerBasePinWidget_OnIsAtEdgeOfScreenChanged");
static_assert(sizeof(MarinerBasePinWidget_OnIsAtEdgeOfScreenChanged) == 0x000001, "Wrong size on MarinerBasePinWidget_OnIsAtEdgeOfScreenChanged");
static_assert(offsetof(MarinerBasePinWidget_OnIsAtEdgeOfScreenChanged, bEdgeOfScreen) == 0x000000, "Member 'MarinerBasePinWidget_OnIsAtEdgeOfScreenChanged::bEdgeOfScreen' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.OnOwningPlayerChangedTeams
// 0x0008 (0x0008 - 0x0000)
struct MarinerBasePinWidget_OnOwningPlayerChangedTeams final
{
public:
	class AMarinerPlayerState*                    OwningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_OnOwningPlayerChangedTeams) == 0x000008, "Wrong alignment on MarinerBasePinWidget_OnOwningPlayerChangedTeams");
static_assert(sizeof(MarinerBasePinWidget_OnOwningPlayerChangedTeams) == 0x000008, "Wrong size on MarinerBasePinWidget_OnOwningPlayerChangedTeams");
static_assert(offsetof(MarinerBasePinWidget_OnOwningPlayerChangedTeams, OwningPlayer) == 0x000000, "Member 'MarinerBasePinWidget_OnOwningPlayerChangedTeams::OwningPlayer' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.OnRenderValueChanged
// 0x0001 (0x0001 - 0x0000)
struct MarinerBasePinWidget_OnRenderValueChanged final
{
public:
	bool                                          bCurrentRenderValue;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_OnRenderValueChanged) == 0x000001, "Wrong alignment on MarinerBasePinWidget_OnRenderValueChanged");
static_assert(sizeof(MarinerBasePinWidget_OnRenderValueChanged) == 0x000001, "Wrong size on MarinerBasePinWidget_OnRenderValueChanged");
static_assert(offsetof(MarinerBasePinWidget_OnRenderValueChanged, bCurrentRenderValue) == 0x000000, "Member 'MarinerBasePinWidget_OnRenderValueChanged::bCurrentRenderValue' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.SetActorReferenceIfDifferent
// 0x0008 (0x0008 - 0x0000)
struct MarinerBasePinWidget_SetActorReferenceIfDifferent final
{
public:
	class AActor*                                 NewActorReference;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_SetActorReferenceIfDifferent) == 0x000008, "Wrong alignment on MarinerBasePinWidget_SetActorReferenceIfDifferent");
static_assert(sizeof(MarinerBasePinWidget_SetActorReferenceIfDifferent) == 0x000008, "Wrong size on MarinerBasePinWidget_SetActorReferenceIfDifferent");
static_assert(offsetof(MarinerBasePinWidget_SetActorReferenceIfDifferent, NewActorReference) == 0x000000, "Member 'MarinerBasePinWidget_SetActorReferenceIfDifferent::NewActorReference' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.SetActorReferenceIfNotValid
// 0x0008 (0x0008 - 0x0000)
struct MarinerBasePinWidget_SetActorReferenceIfNotValid final
{
public:
	class AActor*                                 NewActorReference;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_SetActorReferenceIfNotValid) == 0x000008, "Wrong alignment on MarinerBasePinWidget_SetActorReferenceIfNotValid");
static_assert(sizeof(MarinerBasePinWidget_SetActorReferenceIfNotValid) == 0x000008, "Wrong size on MarinerBasePinWidget_SetActorReferenceIfNotValid");
static_assert(offsetof(MarinerBasePinWidget_SetActorReferenceIfNotValid, NewActorReference) == 0x000000, "Member 'MarinerBasePinWidget_SetActorReferenceIfNotValid::NewActorReference' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.SetIsPinPointShownWhenNotAtScreenEdge
// 0x0001 (0x0001 - 0x0000)
struct MarinerBasePinWidget_SetIsPinPointShownWhenNotAtScreenEdge final
{
public:
	bool                                          bInShouldShowPinPoint;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_SetIsPinPointShownWhenNotAtScreenEdge) == 0x000001, "Wrong alignment on MarinerBasePinWidget_SetIsPinPointShownWhenNotAtScreenEdge");
static_assert(sizeof(MarinerBasePinWidget_SetIsPinPointShownWhenNotAtScreenEdge) == 0x000001, "Wrong size on MarinerBasePinWidget_SetIsPinPointShownWhenNotAtScreenEdge");
static_assert(offsetof(MarinerBasePinWidget_SetIsPinPointShownWhenNotAtScreenEdge, bInShouldShowPinPoint) == 0x000000, "Member 'MarinerBasePinWidget_SetIsPinPointShownWhenNotAtScreenEdge::bInShouldShowPinPoint' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.SetIsRenderedAsPinned
// 0x0001 (0x0001 - 0x0000)
struct MarinerBasePinWidget_SetIsRenderedAsPinned final
{
public:
	bool                                          bRenderAsPinned;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_SetIsRenderedAsPinned) == 0x000001, "Wrong alignment on MarinerBasePinWidget_SetIsRenderedAsPinned");
static_assert(sizeof(MarinerBasePinWidget_SetIsRenderedAsPinned) == 0x000001, "Wrong size on MarinerBasePinWidget_SetIsRenderedAsPinned");
static_assert(offsetof(MarinerBasePinWidget_SetIsRenderedAsPinned, bRenderAsPinned) == 0x000000, "Member 'MarinerBasePinWidget_SetIsRenderedAsPinned::bRenderAsPinned' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.SetPinPosition
// 0x0008 (0x0008 - 0x0000)
struct MarinerBasePinWidget_SetPinPosition final
{
public:
	struct FVector2D                              InPinPosition;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_SetPinPosition) == 0x000004, "Wrong alignment on MarinerBasePinWidget_SetPinPosition");
static_assert(sizeof(MarinerBasePinWidget_SetPinPosition) == 0x000008, "Wrong size on MarinerBasePinWidget_SetPinPosition");
static_assert(offsetof(MarinerBasePinWidget_SetPinPosition, InPinPosition) == 0x000000, "Member 'MarinerBasePinWidget_SetPinPosition::InPinPosition' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.SetPivot
// 0x0008 (0x0008 - 0x0000)
struct MarinerBasePinWidget_SetPivot final
{
public:
	struct FVector2D                              InPivot;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_SetPivot) == 0x000004, "Wrong alignment on MarinerBasePinWidget_SetPivot");
static_assert(sizeof(MarinerBasePinWidget_SetPivot) == 0x000008, "Wrong size on MarinerBasePinWidget_SetPivot");
static_assert(offsetof(MarinerBasePinWidget_SetPivot, InPivot) == 0x000000, "Member 'MarinerBasePinWidget_SetPivot::InPivot' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.SetShouldRender
// 0x0001 (0x0001 - 0x0000)
struct MarinerBasePinWidget_SetShouldRender final
{
public:
	bool                                          bInBool;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_SetShouldRender) == 0x000001, "Wrong alignment on MarinerBasePinWidget_SetShouldRender");
static_assert(sizeof(MarinerBasePinWidget_SetShouldRender) == 0x000001, "Wrong size on MarinerBasePinWidget_SetShouldRender");
static_assert(offsetof(MarinerBasePinWidget_SetShouldRender, bInBool) == 0x000000, "Member 'MarinerBasePinWidget_SetShouldRender::bInBool' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.SetupPinWidgetLogic
// 0x0018 (0x0018 - 0x0000)
struct MarinerBasePinWidget_SetupPinWidgetLogic final
{
public:
	class UImage*                                 PinPointWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 FrameWidget;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 ImageWidget;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_SetupPinWidgetLogic) == 0x000008, "Wrong alignment on MarinerBasePinWidget_SetupPinWidgetLogic");
static_assert(sizeof(MarinerBasePinWidget_SetupPinWidgetLogic) == 0x000018, "Wrong size on MarinerBasePinWidget_SetupPinWidgetLogic");
static_assert(offsetof(MarinerBasePinWidget_SetupPinWidgetLogic, PinPointWidget) == 0x000000, "Member 'MarinerBasePinWidget_SetupPinWidgetLogic::PinPointWidget' has a wrong offset!");
static_assert(offsetof(MarinerBasePinWidget_SetupPinWidgetLogic, FrameWidget) == 0x000008, "Member 'MarinerBasePinWidget_SetupPinWidgetLogic::FrameWidget' has a wrong offset!");
static_assert(offsetof(MarinerBasePinWidget_SetupPinWidgetLogic, ImageWidget) == 0x000010, "Member 'MarinerBasePinWidget_SetupPinWidgetLogic::ImageWidget' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.SetupWidgetColorLogic
// 0x0010 (0x0010 - 0x0000)
struct MarinerBasePinWidget_SetupWidgetColorLogic final
{
public:
	TArray<class UImage*>                         RelevantWidgets;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_SetupWidgetColorLogic) == 0x000008, "Wrong alignment on MarinerBasePinWidget_SetupWidgetColorLogic");
static_assert(sizeof(MarinerBasePinWidget_SetupWidgetColorLogic) == 0x000010, "Wrong size on MarinerBasePinWidget_SetupWidgetColorLogic");
static_assert(offsetof(MarinerBasePinWidget_SetupWidgetColorLogic, RelevantWidgets) == 0x000000, "Member 'MarinerBasePinWidget_SetupWidgetColorLogic::RelevantWidgets' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.SetupWidgetVisibilityLogic
// 0x0010 (0x0010 - 0x0000)
struct MarinerBasePinWidget_SetupWidgetVisibilityLogic final
{
public:
	TArray<class UWidget*>                        RelevantWidgets;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_SetupWidgetVisibilityLogic) == 0x000008, "Wrong alignment on MarinerBasePinWidget_SetupWidgetVisibilityLogic");
static_assert(sizeof(MarinerBasePinWidget_SetupWidgetVisibilityLogic) == 0x000010, "Wrong size on MarinerBasePinWidget_SetupWidgetVisibilityLogic");
static_assert(offsetof(MarinerBasePinWidget_SetupWidgetVisibilityLogic, RelevantWidgets) == 0x000000, "Member 'MarinerBasePinWidget_SetupWidgetVisibilityLogic::RelevantWidgets' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.SetVisibilityPolicyInsideViewCone
// 0x0001 (0x0001 - 0x0000)
struct MarinerBasePinWidget_SetVisibilityPolicyInsideViewCone final
{
public:
	EVisibilityPolicy                             Policy;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_SetVisibilityPolicyInsideViewCone) == 0x000001, "Wrong alignment on MarinerBasePinWidget_SetVisibilityPolicyInsideViewCone");
static_assert(sizeof(MarinerBasePinWidget_SetVisibilityPolicyInsideViewCone) == 0x000001, "Wrong size on MarinerBasePinWidget_SetVisibilityPolicyInsideViewCone");
static_assert(offsetof(MarinerBasePinWidget_SetVisibilityPolicyInsideViewCone, Policy) == 0x000000, "Member 'MarinerBasePinWidget_SetVisibilityPolicyInsideViewCone::Policy' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.SetVisibilityPolicyOutsideViewCone
// 0x0001 (0x0001 - 0x0000)
struct MarinerBasePinWidget_SetVisibilityPolicyOutsideViewCone final
{
public:
	EVisibilityPolicy                             Policy;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_SetVisibilityPolicyOutsideViewCone) == 0x000001, "Wrong alignment on MarinerBasePinWidget_SetVisibilityPolicyOutsideViewCone");
static_assert(sizeof(MarinerBasePinWidget_SetVisibilityPolicyOutsideViewCone) == 0x000001, "Wrong size on MarinerBasePinWidget_SetVisibilityPolicyOutsideViewCone");
static_assert(offsetof(MarinerBasePinWidget_SetVisibilityPolicyOutsideViewCone, Policy) == 0x000000, "Member 'MarinerBasePinWidget_SetVisibilityPolicyOutsideViewCone::Policy' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.SetWorldOffset
// 0x000C (0x000C - 0x0000)
struct MarinerBasePinWidget_SetWorldOffset final
{
public:
	struct FVector                                InWorldOffset;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_SetWorldOffset) == 0x000004, "Wrong alignment on MarinerBasePinWidget_SetWorldOffset");
static_assert(sizeof(MarinerBasePinWidget_SetWorldOffset) == 0x00000C, "Wrong size on MarinerBasePinWidget_SetWorldOffset");
static_assert(offsetof(MarinerBasePinWidget_SetWorldOffset, InWorldOffset) == 0x000000, "Member 'MarinerBasePinWidget_SetWorldOffset::InWorldOffset' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.GetActorReference
// 0x0008 (0x0008 - 0x0000)
struct MarinerBasePinWidget_GetActorReference final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_GetActorReference) == 0x000008, "Wrong alignment on MarinerBasePinWidget_GetActorReference");
static_assert(sizeof(MarinerBasePinWidget_GetActorReference) == 0x000008, "Wrong size on MarinerBasePinWidget_GetActorReference");
static_assert(offsetof(MarinerBasePinWidget_GetActorReference, ReturnValue) == 0x000000, "Member 'MarinerBasePinWidget_GetActorReference::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.GetRenderScalar
// 0x0004 (0x0004 - 0x0000)
struct MarinerBasePinWidget_GetRenderScalar final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_GetRenderScalar) == 0x000004, "Wrong alignment on MarinerBasePinWidget_GetRenderScalar");
static_assert(sizeof(MarinerBasePinWidget_GetRenderScalar) == 0x000004, "Wrong size on MarinerBasePinWidget_GetRenderScalar");
static_assert(offsetof(MarinerBasePinWidget_GetRenderScalar, ReturnValue) == 0x000000, "Member 'MarinerBasePinWidget_GetRenderScalar::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.IsDead
// 0x0001 (0x0001 - 0x0000)
struct MarinerBasePinWidget_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_IsDead) == 0x000001, "Wrong alignment on MarinerBasePinWidget_IsDead");
static_assert(sizeof(MarinerBasePinWidget_IsDead) == 0x000001, "Wrong size on MarinerBasePinWidget_IsDead");
static_assert(offsetof(MarinerBasePinWidget_IsDead, ReturnValue) == 0x000000, "Member 'MarinerBasePinWidget_IsDead::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBasePinWidget.IsInViewCone
// 0x0001 (0x0001 - 0x0000)
struct MarinerBasePinWidget_IsInViewCone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBasePinWidget_IsInViewCone) == 0x000001, "Wrong alignment on MarinerBasePinWidget_IsInViewCone");
static_assert(sizeof(MarinerBasePinWidget_IsInViewCone) == 0x000001, "Wrong size on MarinerBasePinWidget_IsInViewCone");
static_assert(offsetof(MarinerBasePinWidget_IsInViewCone, ReturnValue) == 0x000000, "Member 'MarinerBasePinWidget_IsInViewCone::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBlastPassOfferMessageBox.GetData
// 0x00C0 (0x00C0 - 0x0000)
struct MarinerBlastPassOfferMessageBox_GetData final
{
public:
	struct FMarinerMessageBoxBlastPassOfferData   ReturnValue;                                       // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBlastPassOfferMessageBox_GetData) == 0x000008, "Wrong alignment on MarinerBlastPassOfferMessageBox_GetData");
static_assert(sizeof(MarinerBlastPassOfferMessageBox_GetData) == 0x0000C0, "Wrong size on MarinerBlastPassOfferMessageBox_GetData");
static_assert(offsetof(MarinerBlastPassOfferMessageBox_GetData, ReturnValue) == 0x000000, "Member 'MarinerBlastPassOfferMessageBox_GetData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageDebugRecord.GetShortDescription
// 0x0018 (0x0018 - 0x0000)
struct MarinerDamageDebugRecord_GetShortDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageDebugRecord_GetShortDescription) == 0x000008, "Wrong alignment on MarinerDamageDebugRecord_GetShortDescription");
static_assert(sizeof(MarinerDamageDebugRecord_GetShortDescription) == 0x000018, "Wrong size on MarinerDamageDebugRecord_GetShortDescription");
static_assert(offsetof(MarinerDamageDebugRecord_GetShortDescription, ReturnValue) == 0x000000, "Member 'MarinerDamageDebugRecord_GetShortDescription::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBlastPassPip.SetPipProgress
// 0x0008 (0x0008 - 0x0000)
struct MarinerBlastPassPip_SetPipProgress final
{
public:
	bool                                          bInit;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1656[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Percent;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBlastPassPip_SetPipProgress) == 0x000004, "Wrong alignment on MarinerBlastPassPip_SetPipProgress");
static_assert(sizeof(MarinerBlastPassPip_SetPipProgress) == 0x000008, "Wrong size on MarinerBlastPassPip_SetPipProgress");
static_assert(offsetof(MarinerBlastPassPip_SetPipProgress, bInit) == 0x000000, "Member 'MarinerBlastPassPip_SetPipProgress::bInit' has a wrong offset!");
static_assert(offsetof(MarinerBlastPassPip_SetPipProgress, Percent) == 0x000004, "Member 'MarinerBlastPassPip_SetPipProgress::Percent' has a wrong offset!");

// Function Mariner.MarinerBlastPassPip.GetPipProgress
// 0x0004 (0x0004 - 0x0000)
struct MarinerBlastPassPip_GetPipProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBlastPassPip_GetPipProgress) == 0x000004, "Wrong alignment on MarinerBlastPassPip_GetPipProgress");
static_assert(sizeof(MarinerBlastPassPip_GetPipProgress) == 0x000004, "Wrong size on MarinerBlastPassPip_GetPipProgress");
static_assert(offsetof(MarinerBlastPassPip_GetPipProgress, ReturnValue) == 0x000000, "Member 'MarinerBlastPassPip_GetPipProgress::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBlastPassProgressBar.PopulateXPBoosts
// 0x0008 (0x0008 - 0x0000)
struct MarinerBlastPassProgressBar_PopulateXPBoosts final
{
public:
	int32                                         PersonalBoost;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyBoost;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBlastPassProgressBar_PopulateXPBoosts) == 0x000004, "Wrong alignment on MarinerBlastPassProgressBar_PopulateXPBoosts");
static_assert(sizeof(MarinerBlastPassProgressBar_PopulateXPBoosts) == 0x000008, "Wrong size on MarinerBlastPassProgressBar_PopulateXPBoosts");
static_assert(offsetof(MarinerBlastPassProgressBar_PopulateXPBoosts, PersonalBoost) == 0x000000, "Member 'MarinerBlastPassProgressBar_PopulateXPBoosts::PersonalBoost' has a wrong offset!");
static_assert(offsetof(MarinerBlastPassProgressBar_PopulateXPBoosts, PartyBoost) == 0x000004, "Member 'MarinerBlastPassProgressBar_PopulateXPBoosts::PartyBoost' has a wrong offset!");

// Function Mariner.MarinerItemLevelGroupWidget.OnButtonCreated
// 0x0078 (0x0078 - 0x0000)
struct MarinerItemLevelGroupWidget_OnButtonCreated final
{
public:
	class UMarinerLayeredButton*                  ButtonInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerUIItemButtonData               ItemData;                                          // 0x0008(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemLevelGroupWidget_OnButtonCreated) == 0x000008, "Wrong alignment on MarinerItemLevelGroupWidget_OnButtonCreated");
static_assert(sizeof(MarinerItemLevelGroupWidget_OnButtonCreated) == 0x000078, "Wrong size on MarinerItemLevelGroupWidget_OnButtonCreated");
static_assert(offsetof(MarinerItemLevelGroupWidget_OnButtonCreated, ButtonInstance) == 0x000000, "Member 'MarinerItemLevelGroupWidget_OnButtonCreated::ButtonInstance' has a wrong offset!");
static_assert(offsetof(MarinerItemLevelGroupWidget_OnButtonCreated, ItemData) == 0x000008, "Member 'MarinerItemLevelGroupWidget_OnButtonCreated::ItemData' has a wrong offset!");

// Function Mariner.MarinerItemLevelGroupWidget.OnButtonHighlighted
// 0x0010 (0x0010 - 0x0000)
struct MarinerItemLevelGroupWidget_OnButtonHighlighted final
{
public:
	class UMarinerLayeredButton*                  ButtonInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromKeyboard;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromMouse;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165A[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerItemLevelGroupWidget_OnButtonHighlighted) == 0x000008, "Wrong alignment on MarinerItemLevelGroupWidget_OnButtonHighlighted");
static_assert(sizeof(MarinerItemLevelGroupWidget_OnButtonHighlighted) == 0x000010, "Wrong size on MarinerItemLevelGroupWidget_OnButtonHighlighted");
static_assert(offsetof(MarinerItemLevelGroupWidget_OnButtonHighlighted, ButtonInstance) == 0x000000, "Member 'MarinerItemLevelGroupWidget_OnButtonHighlighted::ButtonInstance' has a wrong offset!");
static_assert(offsetof(MarinerItemLevelGroupWidget_OnButtonHighlighted, bFromKeyboard) == 0x000008, "Member 'MarinerItemLevelGroupWidget_OnButtonHighlighted::bFromKeyboard' has a wrong offset!");
static_assert(offsetof(MarinerItemLevelGroupWidget_OnButtonHighlighted, bFromMouse) == 0x000009, "Member 'MarinerItemLevelGroupWidget_OnButtonHighlighted::bFromMouse' has a wrong offset!");

// Function Mariner.MarinerItemLevelGroupWidget.OnButtonSelected
// 0x0008 (0x0008 - 0x0000)
struct MarinerItemLevelGroupWidget_OnButtonSelected final
{
public:
	class UMarinerLayeredButton*                  ButtonInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemLevelGroupWidget_OnButtonSelected) == 0x000008, "Wrong alignment on MarinerItemLevelGroupWidget_OnButtonSelected");
static_assert(sizeof(MarinerItemLevelGroupWidget_OnButtonSelected) == 0x000008, "Wrong size on MarinerItemLevelGroupWidget_OnButtonSelected");
static_assert(offsetof(MarinerItemLevelGroupWidget_OnButtonSelected, ButtonInstance) == 0x000000, "Member 'MarinerItemLevelGroupWidget_OnButtonSelected::ButtonInstance' has a wrong offset!");

// Function Mariner.MarinerItemLevelGroupWidget.OnButtonUnhighlighted
// 0x0008 (0x0008 - 0x0000)
struct MarinerItemLevelGroupWidget_OnButtonUnhighlighted final
{
public:
	class UMarinerLayeredButton*                  ButtonInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemLevelGroupWidget_OnButtonUnhighlighted) == 0x000008, "Wrong alignment on MarinerItemLevelGroupWidget_OnButtonUnhighlighted");
static_assert(sizeof(MarinerItemLevelGroupWidget_OnButtonUnhighlighted) == 0x000008, "Wrong size on MarinerItemLevelGroupWidget_OnButtonUnhighlighted");
static_assert(offsetof(MarinerItemLevelGroupWidget_OnButtonUnhighlighted, ButtonInstance) == 0x000000, "Member 'MarinerItemLevelGroupWidget_OnButtonUnhighlighted::ButtonInstance' has a wrong offset!");

// Function Mariner.MarinerItemLevelGroupWidget.IsChangePageInput
// 0x0002 (0x0002 - 0x0000)
struct MarinerItemLevelGroupWidget_IsChangePageInput final
{
public:
	EMarinerInputActions                          InInput;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemLevelGroupWidget_IsChangePageInput) == 0x000001, "Wrong alignment on MarinerItemLevelGroupWidget_IsChangePageInput");
static_assert(sizeof(MarinerItemLevelGroupWidget_IsChangePageInput) == 0x000002, "Wrong size on MarinerItemLevelGroupWidget_IsChangePageInput");
static_assert(offsetof(MarinerItemLevelGroupWidget_IsChangePageInput, InInput) == 0x000000, "Member 'MarinerItemLevelGroupWidget_IsChangePageInput::InInput' has a wrong offset!");
static_assert(offsetof(MarinerItemLevelGroupWidget_IsChangePageInput, ReturnValue) == 0x000001, "Member 'MarinerItemLevelGroupWidget_IsChangePageInput::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBlastPassProgressionWidget.ChangeMaxDisplayedTier
// 0x0008 (0x0008 - 0x0000)
struct MarinerBlastPassProgressionWidget_ChangeMaxDisplayedTier final
{
public:
	int32                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165C[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerBlastPassProgressionWidget_ChangeMaxDisplayedTier) == 0x000004, "Wrong alignment on MarinerBlastPassProgressionWidget_ChangeMaxDisplayedTier");
static_assert(sizeof(MarinerBlastPassProgressionWidget_ChangeMaxDisplayedTier) == 0x000008, "Wrong size on MarinerBlastPassProgressionWidget_ChangeMaxDisplayedTier");
static_assert(offsetof(MarinerBlastPassProgressionWidget_ChangeMaxDisplayedTier, Delta) == 0x000000, "Member 'MarinerBlastPassProgressionWidget_ChangeMaxDisplayedTier::Delta' has a wrong offset!");
static_assert(offsetof(MarinerBlastPassProgressionWidget_ChangeMaxDisplayedTier, ReturnValue) == 0x000004, "Member 'MarinerBlastPassProgressionWidget_ChangeMaxDisplayedTier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBlastPassProgressionWidget.Init
// 0x0070 (0x0070 - 0x0000)
struct MarinerBlastPassProgressionWidget_Init final
{
public:
	struct FMangoBlastPassDefinition              Definition;                                        // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInShowContentStates;                              // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165D[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InStartingTier;                                    // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBlastPassProgressionWidget_Init) == 0x000008, "Wrong alignment on MarinerBlastPassProgressionWidget_Init");
static_assert(sizeof(MarinerBlastPassProgressionWidget_Init) == 0x000070, "Wrong size on MarinerBlastPassProgressionWidget_Init");
static_assert(offsetof(MarinerBlastPassProgressionWidget_Init, Definition) == 0x000000, "Member 'MarinerBlastPassProgressionWidget_Init::Definition' has a wrong offset!");
static_assert(offsetof(MarinerBlastPassProgressionWidget_Init, bInShowContentStates) == 0x000068, "Member 'MarinerBlastPassProgressionWidget_Init::bInShowContentStates' has a wrong offset!");
static_assert(offsetof(MarinerBlastPassProgressionWidget_Init, InStartingTier) == 0x00006C, "Member 'MarinerBlastPassProgressionWidget_Init::InStartingTier' has a wrong offset!");

// Function Mariner.MarinerBlastPassProgressionWidget.InitTierRange
// 0x0078 (0x0078 - 0x0000)
struct MarinerBlastPassProgressionWidget_InitTierRange final
{
public:
	struct FMangoBlastPassDefinition              Definition;                                        // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInShowContentStates;                              // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165E[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InMinTier;                                         // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxTier;                                         // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165F[0x4];                                     // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerBlastPassProgressionWidget_InitTierRange) == 0x000008, "Wrong alignment on MarinerBlastPassProgressionWidget_InitTierRange");
static_assert(sizeof(MarinerBlastPassProgressionWidget_InitTierRange) == 0x000078, "Wrong size on MarinerBlastPassProgressionWidget_InitTierRange");
static_assert(offsetof(MarinerBlastPassProgressionWidget_InitTierRange, Definition) == 0x000000, "Member 'MarinerBlastPassProgressionWidget_InitTierRange::Definition' has a wrong offset!");
static_assert(offsetof(MarinerBlastPassProgressionWidget_InitTierRange, bInShowContentStates) == 0x000068, "Member 'MarinerBlastPassProgressionWidget_InitTierRange::bInShowContentStates' has a wrong offset!");
static_assert(offsetof(MarinerBlastPassProgressionWidget_InitTierRange, InMinTier) == 0x00006C, "Member 'MarinerBlastPassProgressionWidget_InitTierRange::InMinTier' has a wrong offset!");
static_assert(offsetof(MarinerBlastPassProgressionWidget_InitTierRange, InMaxTier) == 0x000070, "Member 'MarinerBlastPassProgressionWidget_InitTierRange::InMaxTier' has a wrong offset!");

// Function Mariner.MarinerBlastPassProgressionWidget.GetBlastPass
// 0x0068 (0x0068 - 0x0000)
struct MarinerBlastPassProgressionWidget_GetBlastPass final
{
public:
	struct FMangoBlastPassDefinition              ReturnValue;                                       // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBlastPassProgressionWidget_GetBlastPass) == 0x000008, "Wrong alignment on MarinerBlastPassProgressionWidget_GetBlastPass");
static_assert(sizeof(MarinerBlastPassProgressionWidget_GetBlastPass) == 0x000068, "Wrong size on MarinerBlastPassProgressionWidget_GetBlastPass");
static_assert(offsetof(MarinerBlastPassProgressionWidget_GetBlastPass, ReturnValue) == 0x000000, "Member 'MarinerBlastPassProgressionWidget_GetBlastPass::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBlastPassProgressionWidget.GetMaxDisplayedTier
// 0x0004 (0x0004 - 0x0000)
struct MarinerBlastPassProgressionWidget_GetMaxDisplayedTier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBlastPassProgressionWidget_GetMaxDisplayedTier) == 0x000004, "Wrong alignment on MarinerBlastPassProgressionWidget_GetMaxDisplayedTier");
static_assert(sizeof(MarinerBlastPassProgressionWidget_GetMaxDisplayedTier) == 0x000004, "Wrong size on MarinerBlastPassProgressionWidget_GetMaxDisplayedTier");
static_assert(offsetof(MarinerBlastPassProgressionWidget_GetMaxDisplayedTier, ReturnValue) == 0x000000, "Member 'MarinerBlastPassProgressionWidget_GetMaxDisplayedTier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBlastPassProgressionWidget.GetMinDisplayedTier
// 0x0004 (0x0004 - 0x0000)
struct MarinerBlastPassProgressionWidget_GetMinDisplayedTier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBlastPassProgressionWidget_GetMinDisplayedTier) == 0x000004, "Wrong alignment on MarinerBlastPassProgressionWidget_GetMinDisplayedTier");
static_assert(sizeof(MarinerBlastPassProgressionWidget_GetMinDisplayedTier) == 0x000004, "Wrong size on MarinerBlastPassProgressionWidget_GetMinDisplayedTier");
static_assert(offsetof(MarinerBlastPassProgressionWidget_GetMinDisplayedTier, ReturnValue) == 0x000000, "Member 'MarinerBlastPassProgressionWidget_GetMinDisplayedTier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBlastPassTierPurchaseMessageBox.GetData
// 0x0120 (0x0120 - 0x0000)
struct MarinerBlastPassTierPurchaseMessageBox_GetData final
{
public:
	struct FMarinerMessageBoxBlastPassTierPurchaseData ReturnValue;                                       // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBlastPassTierPurchaseMessageBox_GetData) == 0x000008, "Wrong alignment on MarinerBlastPassTierPurchaseMessageBox_GetData");
static_assert(sizeof(MarinerBlastPassTierPurchaseMessageBox_GetData) == 0x000120, "Wrong size on MarinerBlastPassTierPurchaseMessageBox_GetData");
static_assert(offsetof(MarinerBlastPassTierPurchaseMessageBox_GetData, ReturnValue) == 0x000000, "Member 'MarinerBlastPassTierPurchaseMessageBox_GetData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBlastPassXPBoost.SetBoostPercent
// 0x0004 (0x0004 - 0x0000)
struct MarinerBlastPassXPBoost_SetBoostPercent final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBlastPassXPBoost_SetBoostPercent) == 0x000004, "Wrong alignment on MarinerBlastPassXPBoost_SetBoostPercent");
static_assert(sizeof(MarinerBlastPassXPBoost_SetBoostPercent) == 0x000004, "Wrong size on MarinerBlastPassXPBoost_SetBoostPercent");
static_assert(offsetof(MarinerBlastPassXPBoost_SetBoostPercent, Value) == 0x000000, "Member 'MarinerBlastPassXPBoost_SetBoostPercent::Value' has a wrong offset!");

// Function Mariner.MarinerDirectionalImmunityInterface.DoesDamageTypeBypassImmunity
// 0x0010 (0x0010 - 0x0000)
struct MarinerDirectionalImmunityInterface_DoesDamageTypeBypassImmunity final
{
public:
	TSubclassOf<class UMarinerDamageType>         DamageType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1662[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDirectionalImmunityInterface_DoesDamageTypeBypassImmunity) == 0x000008, "Wrong alignment on MarinerDirectionalImmunityInterface_DoesDamageTypeBypassImmunity");
static_assert(sizeof(MarinerDirectionalImmunityInterface_DoesDamageTypeBypassImmunity) == 0x000010, "Wrong size on MarinerDirectionalImmunityInterface_DoesDamageTypeBypassImmunity");
static_assert(offsetof(MarinerDirectionalImmunityInterface_DoesDamageTypeBypassImmunity, DamageType) == 0x000000, "Member 'MarinerDirectionalImmunityInterface_DoesDamageTypeBypassImmunity::DamageType' has a wrong offset!");
static_assert(offsetof(MarinerDirectionalImmunityInterface_DoesDamageTypeBypassImmunity, ReturnValue) == 0x000008, "Member 'MarinerDirectionalImmunityInterface_DoesDamageTypeBypassImmunity::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDirectionalImmunityInterface.GetImmunityDirections
// 0x0050 (0x0050 - 0x0000)
struct MarinerDirectionalImmunityInterface_GetImmunityDirections final
{
public:
	TMap<struct FVector, float>                   ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDirectionalImmunityInterface_GetImmunityDirections) == 0x000008, "Wrong alignment on MarinerDirectionalImmunityInterface_GetImmunityDirections");
static_assert(sizeof(MarinerDirectionalImmunityInterface_GetImmunityDirections) == 0x000050, "Wrong size on MarinerDirectionalImmunityInterface_GetImmunityDirections");
static_assert(offsetof(MarinerDirectionalImmunityInterface_GetImmunityDirections, ReturnValue) == 0x000000, "Member 'MarinerDirectionalImmunityInterface_GetImmunityDirections::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBotManager.BP_GetDesiredBotObjective
// 0x0028 (0x0028 - 0x0000)
struct MarinerBotManager_BP_GetDesiredBotObjective final
{
public:
	class AMarinerAIController*                   AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentObjective;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBotManager_BP_GetDesiredBotObjective) == 0x000008, "Wrong alignment on MarinerBotManager_BP_GetDesiredBotObjective");
static_assert(sizeof(MarinerBotManager_BP_GetDesiredBotObjective) == 0x000028, "Wrong size on MarinerBotManager_BP_GetDesiredBotObjective");
static_assert(offsetof(MarinerBotManager_BP_GetDesiredBotObjective, AIController) == 0x000000, "Member 'MarinerBotManager_BP_GetDesiredBotObjective::AIController' has a wrong offset!");
static_assert(offsetof(MarinerBotManager_BP_GetDesiredBotObjective, CurrentObjective) == 0x000008, "Member 'MarinerBotManager_BP_GetDesiredBotObjective::CurrentObjective' has a wrong offset!");
static_assert(offsetof(MarinerBotManager_BP_GetDesiredBotObjective, ReturnValue) == 0x000018, "Member 'MarinerBotManager_BP_GetDesiredBotObjective::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBotManager.BP_GetMovementLocationQuery
// 0x0020 (0x0020 - 0x0000)
struct MarinerBotManager_BP_GetMovementLocationQuery final
{
public:
	class AMarinerAIController*                   AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssignedObjective;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnvQuery*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBotManager_BP_GetMovementLocationQuery) == 0x000008, "Wrong alignment on MarinerBotManager_BP_GetMovementLocationQuery");
static_assert(sizeof(MarinerBotManager_BP_GetMovementLocationQuery) == 0x000020, "Wrong size on MarinerBotManager_BP_GetMovementLocationQuery");
static_assert(offsetof(MarinerBotManager_BP_GetMovementLocationQuery, AIController) == 0x000000, "Member 'MarinerBotManager_BP_GetMovementLocationQuery::AIController' has a wrong offset!");
static_assert(offsetof(MarinerBotManager_BP_GetMovementLocationQuery, AssignedObjective) == 0x000008, "Member 'MarinerBotManager_BP_GetMovementLocationQuery::AssignedObjective' has a wrong offset!");
static_assert(offsetof(MarinerBotManager_BP_GetMovementLocationQuery, ReturnValue) == 0x000018, "Member 'MarinerBotManager_BP_GetMovementLocationQuery::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBotManager.BP_GetShootTargetQuery
// 0x0028 (0x0028 - 0x0000)
struct MarinerBotManager_BP_GetShootTargetQuery final
{
public:
	class AMarinerAIController*                   AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssignedObjective;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutClearObjectiveEnemy;                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1664[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnvQuery*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBotManager_BP_GetShootTargetQuery) == 0x000008, "Wrong alignment on MarinerBotManager_BP_GetShootTargetQuery");
static_assert(sizeof(MarinerBotManager_BP_GetShootTargetQuery) == 0x000028, "Wrong size on MarinerBotManager_BP_GetShootTargetQuery");
static_assert(offsetof(MarinerBotManager_BP_GetShootTargetQuery, AIController) == 0x000000, "Member 'MarinerBotManager_BP_GetShootTargetQuery::AIController' has a wrong offset!");
static_assert(offsetof(MarinerBotManager_BP_GetShootTargetQuery, AssignedObjective) == 0x000008, "Member 'MarinerBotManager_BP_GetShootTargetQuery::AssignedObjective' has a wrong offset!");
static_assert(offsetof(MarinerBotManager_BP_GetShootTargetQuery, bOutClearObjectiveEnemy) == 0x000018, "Member 'MarinerBotManager_BP_GetShootTargetQuery::bOutClearObjectiveEnemy' has a wrong offset!");
static_assert(offsetof(MarinerBotManager_BP_GetShootTargetQuery, ReturnValue) == 0x000020, "Member 'MarinerBotManager_BP_GetShootTargetQuery::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBotManager.BP_OnBotsInitialized
// 0x0010 (0x0010 - 0x0000)
struct MarinerBotManager_BP_OnBotsInitialized final
{
public:
	TArray<class AMarinerAIController*>           InitializedBots;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBotManager_BP_OnBotsInitialized) == 0x000008, "Wrong alignment on MarinerBotManager_BP_OnBotsInitialized");
static_assert(sizeof(MarinerBotManager_BP_OnBotsInitialized) == 0x000010, "Wrong size on MarinerBotManager_BP_OnBotsInitialized");
static_assert(offsetof(MarinerBotManager_BP_OnBotsInitialized, InitializedBots) == 0x000000, "Member 'MarinerBotManager_BP_OnBotsInitialized::InitializedBots' has a wrong offset!");

// Function Mariner.MarinerBotManager.GetMovementLocationQuery
// 0x0010 (0x0010 - 0x0000)
struct MarinerBotManager_GetMovementLocationQuery final
{
public:
	class AMarinerAIController*                   AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnvQuery*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBotManager_GetMovementLocationQuery) == 0x000008, "Wrong alignment on MarinerBotManager_GetMovementLocationQuery");
static_assert(sizeof(MarinerBotManager_GetMovementLocationQuery) == 0x000010, "Wrong size on MarinerBotManager_GetMovementLocationQuery");
static_assert(offsetof(MarinerBotManager_GetMovementLocationQuery, AIController) == 0x000000, "Member 'MarinerBotManager_GetMovementLocationQuery::AIController' has a wrong offset!");
static_assert(offsetof(MarinerBotManager_GetMovementLocationQuery, ReturnValue) == 0x000008, "Member 'MarinerBotManager_GetMovementLocationQuery::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBotManager.GetShootTargetQuery
// 0x0018 (0x0018 - 0x0000)
struct MarinerBotManager_GetShootTargetQuery final
{
public:
	class AMarinerAIController*                   AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutClearObjectiveEnemy;                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1665[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnvQuery*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBotManager_GetShootTargetQuery) == 0x000008, "Wrong alignment on MarinerBotManager_GetShootTargetQuery");
static_assert(sizeof(MarinerBotManager_GetShootTargetQuery) == 0x000018, "Wrong size on MarinerBotManager_GetShootTargetQuery");
static_assert(offsetof(MarinerBotManager_GetShootTargetQuery, AIController) == 0x000000, "Member 'MarinerBotManager_GetShootTargetQuery::AIController' has a wrong offset!");
static_assert(offsetof(MarinerBotManager_GetShootTargetQuery, bOutClearObjectiveEnemy) == 0x000008, "Member 'MarinerBotManager_GetShootTargetQuery::bOutClearObjectiveEnemy' has a wrong offset!");
static_assert(offsetof(MarinerBotManager_GetShootTargetQuery, ReturnValue) == 0x000010, "Member 'MarinerBotManager_GetShootTargetQuery::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerBotManager.UpdateDesiredBotObjective
// 0x0008 (0x0008 - 0x0000)
struct MarinerBotManager_UpdateDesiredBotObjective final
{
public:
	class AMarinerAIController*                   AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerBotManager_UpdateDesiredBotObjective) == 0x000008, "Wrong alignment on MarinerBotManager_UpdateDesiredBotObjective");
static_assert(sizeof(MarinerBotManager_UpdateDesiredBotObjective) == 0x000008, "Wrong size on MarinerBotManager_UpdateDesiredBotObjective");
static_assert(offsetof(MarinerBotManager_UpdateDesiredBotObjective, AIController) == 0x000000, "Member 'MarinerBotManager_UpdateDesiredBotObjective::AIController' has a wrong offset!");

// Function Mariner.MarinerDiverWaterFormAnimInstance.CalculateBoneIK
// 0x00F8 (0x00F8 - 0x0000)
struct MarinerDiverWaterFormAnimInstance_CalculateBoneIK final
{
public:
	struct FVector                                BoneLocation;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BoneRotation;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RootRotation;                                      // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1666[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class USkeletalMeshComponent*           SkeletalMesh;                                      // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceLength;                                       // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalOffset;                                      // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationSmoothing;                                 // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionSmoothing;                                 // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FlipTrace;                                         // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreSmoothing;                                   // 0x005D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipTrace;                                         // 0x005E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1667[0x1];                                     // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0060(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             CachedHitResult;                                   // 0x006C(0x0088)(Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1668[0x4];                                     // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK) == 0x000008, "Wrong alignment on MarinerDiverWaterFormAnimInstance_CalculateBoneIK");
static_assert(sizeof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK) == 0x0000F8, "Wrong size on MarinerDiverWaterFormAnimInstance_CalculateBoneIK");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, BoneLocation) == 0x000000, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::BoneLocation' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, BoneRotation) == 0x00000C, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::BoneRotation' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, RootRotation) == 0x000018, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::RootRotation' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, BoneName) == 0x000024, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::BoneName' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, ObjectTypes) == 0x000030, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::ObjectTypes' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, SkeletalMesh) == 0x000040, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, TraceLength) == 0x000048, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::TraceLength' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, NormalOffset) == 0x00004C, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::NormalOffset' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, RotationSmoothing) == 0x000050, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::RotationSmoothing' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, PositionSmoothing) == 0x000054, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::PositionSmoothing' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, DeltaTime) == 0x000058, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::DeltaTime' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, FlipTrace) == 0x00005C, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::FlipTrace' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, IgnoreSmoothing) == 0x00005D, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::IgnoreSmoothing' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, SkipTrace) == 0x00005E, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::SkipTrace' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, Velocity) == 0x000060, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::Velocity' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateBoneIK, CachedHitResult) == 0x00006C, "Member 'MarinerDiverWaterFormAnimInstance_CalculateBoneIK::CachedHitResult' has a wrong offset!");

// Function Mariner.MarinerDiverWaterFormAnimInstance.CalculateRootIK
// 0x00C8 (0x00C8 - 0x0000)
struct MarinerDiverWaterFormAnimInstance_CalculateRootIK final
{
public:
	struct FRotator                               RootRotation;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1669[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class USkeletalMeshComponent*           SkeletalMesh;                                      // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceLength;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationSmoothing;                                 // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreSmoothing;                                   // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipTrace;                                         // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_166A[0x2];                                     // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CachedHitResult;                                   // 0x0040(0x0088)(Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDiverWaterFormAnimInstance_CalculateRootIK) == 0x000008, "Wrong alignment on MarinerDiverWaterFormAnimInstance_CalculateRootIK");
static_assert(sizeof(MarinerDiverWaterFormAnimInstance_CalculateRootIK) == 0x0000C8, "Wrong size on MarinerDiverWaterFormAnimInstance_CalculateRootIK");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateRootIK, RootRotation) == 0x000000, "Member 'MarinerDiverWaterFormAnimInstance_CalculateRootIK::RootRotation' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateRootIK, BoneName) == 0x00000C, "Member 'MarinerDiverWaterFormAnimInstance_CalculateRootIK::BoneName' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateRootIK, ObjectTypes) == 0x000018, "Member 'MarinerDiverWaterFormAnimInstance_CalculateRootIK::ObjectTypes' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateRootIK, SkeletalMesh) == 0x000028, "Member 'MarinerDiverWaterFormAnimInstance_CalculateRootIK::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateRootIK, TraceLength) == 0x000030, "Member 'MarinerDiverWaterFormAnimInstance_CalculateRootIK::TraceLength' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateRootIK, RotationSmoothing) == 0x000034, "Member 'MarinerDiverWaterFormAnimInstance_CalculateRootIK::RotationSmoothing' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateRootIK, DeltaTime) == 0x000038, "Member 'MarinerDiverWaterFormAnimInstance_CalculateRootIK::DeltaTime' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateRootIK, IgnoreSmoothing) == 0x00003C, "Member 'MarinerDiverWaterFormAnimInstance_CalculateRootIK::IgnoreSmoothing' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateRootIK, SkipTrace) == 0x00003D, "Member 'MarinerDiverWaterFormAnimInstance_CalculateRootIK::SkipTrace' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateRootIK, CachedHitResult) == 0x000040, "Member 'MarinerDiverWaterFormAnimInstance_CalculateRootIK::CachedHitResult' has a wrong offset!");

// Function Mariner.MarinerDiverWaterFormAnimInstance.CalculateTailIK
// 0x00F8 (0x00F8 - 0x0000)
struct MarinerDiverWaterFormAnimInstance_CalculateTailIK final
{
public:
	struct FVector                                BoneLocation;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BoneRotation;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RootRotation;                                      // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_166B[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class USkeletalMeshComponent*           SkeletalMesh;                                      // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceLength;                                       // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalOffset;                                      // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationSmoothing;                                 // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionSmoothing;                                 // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreSmoothing;                                   // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipTrace;                                         // 0x005D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_166C[0x2];                                     // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0060(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             CachedHitResult;                                   // 0x006C(0x0088)(Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_166D[0x4];                                     // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDiverWaterFormAnimInstance_CalculateTailIK) == 0x000008, "Wrong alignment on MarinerDiverWaterFormAnimInstance_CalculateTailIK");
static_assert(sizeof(MarinerDiverWaterFormAnimInstance_CalculateTailIK) == 0x0000F8, "Wrong size on MarinerDiverWaterFormAnimInstance_CalculateTailIK");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateTailIK, BoneLocation) == 0x000000, "Member 'MarinerDiverWaterFormAnimInstance_CalculateTailIK::BoneLocation' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateTailIK, BoneRotation) == 0x00000C, "Member 'MarinerDiverWaterFormAnimInstance_CalculateTailIK::BoneRotation' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateTailIK, RootRotation) == 0x000018, "Member 'MarinerDiverWaterFormAnimInstance_CalculateTailIK::RootRotation' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateTailIK, BoneName) == 0x000024, "Member 'MarinerDiverWaterFormAnimInstance_CalculateTailIK::BoneName' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateTailIK, ObjectTypes) == 0x000030, "Member 'MarinerDiverWaterFormAnimInstance_CalculateTailIK::ObjectTypes' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateTailIK, SkeletalMesh) == 0x000040, "Member 'MarinerDiverWaterFormAnimInstance_CalculateTailIK::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateTailIK, TraceLength) == 0x000048, "Member 'MarinerDiverWaterFormAnimInstance_CalculateTailIK::TraceLength' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateTailIK, NormalOffset) == 0x00004C, "Member 'MarinerDiverWaterFormAnimInstance_CalculateTailIK::NormalOffset' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateTailIK, RotationSmoothing) == 0x000050, "Member 'MarinerDiverWaterFormAnimInstance_CalculateTailIK::RotationSmoothing' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateTailIK, PositionSmoothing) == 0x000054, "Member 'MarinerDiverWaterFormAnimInstance_CalculateTailIK::PositionSmoothing' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateTailIK, DeltaTime) == 0x000058, "Member 'MarinerDiverWaterFormAnimInstance_CalculateTailIK::DeltaTime' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateTailIK, IgnoreSmoothing) == 0x00005C, "Member 'MarinerDiverWaterFormAnimInstance_CalculateTailIK::IgnoreSmoothing' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateTailIK, SkipTrace) == 0x00005D, "Member 'MarinerDiverWaterFormAnimInstance_CalculateTailIK::SkipTrace' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateTailIK, Velocity) == 0x000060, "Member 'MarinerDiverWaterFormAnimInstance_CalculateTailIK::Velocity' has a wrong offset!");
static_assert(offsetof(MarinerDiverWaterFormAnimInstance_CalculateTailIK, CachedHitResult) == 0x00006C, "Member 'MarinerDiverWaterFormAnimInstance_CalculateTailIK::CachedHitResult' has a wrong offset!");

// Function Mariner.MarinerButton.SetDefaultTextStyleOverride
// 0x0268 (0x0268 - 0x0000)
struct MarinerButton_SetDefaultTextStyleOverride final
{
public:
	struct FTextBlockStyle                        TextStyle;                                         // 0x0000(0x0268)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerButton_SetDefaultTextStyleOverride) == 0x000008, "Wrong alignment on MarinerButton_SetDefaultTextStyleOverride");
static_assert(sizeof(MarinerButton_SetDefaultTextStyleOverride) == 0x000268, "Wrong size on MarinerButton_SetDefaultTextStyleOverride");
static_assert(offsetof(MarinerButton_SetDefaultTextStyleOverride, TextStyle) == 0x000000, "Member 'MarinerButton_SetDefaultTextStyleOverride::TextStyle' has a wrong offset!");

// Function Mariner.MarinerButton.SetHoveredTextStyleOverride
// 0x0268 (0x0268 - 0x0000)
struct MarinerButton_SetHoveredTextStyleOverride final
{
public:
	struct FTextBlockStyle                        TextStyle;                                         // 0x0000(0x0268)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerButton_SetHoveredTextStyleOverride) == 0x000008, "Wrong alignment on MarinerButton_SetHoveredTextStyleOverride");
static_assert(sizeof(MarinerButton_SetHoveredTextStyleOverride) == 0x000268, "Wrong size on MarinerButton_SetHoveredTextStyleOverride");
static_assert(offsetof(MarinerButton_SetHoveredTextStyleOverride, TextStyle) == 0x000000, "Member 'MarinerButton_SetHoveredTextStyleOverride::TextStyle' has a wrong offset!");

// Function Mariner.MarinerButton.SetPlatformText
// 0x0078 (0x0078 - 0x0000)
struct MarinerButton_SetPlatformText final
{
public:
	struct FMarinerPlatformText                   NewText;                                           // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerButton_SetPlatformText) == 0x000008, "Wrong alignment on MarinerButton_SetPlatformText");
static_assert(sizeof(MarinerButton_SetPlatformText) == 0x000078, "Wrong size on MarinerButton_SetPlatformText");
static_assert(offsetof(MarinerButton_SetPlatformText, NewText) == 0x000000, "Member 'MarinerButton_SetPlatformText::NewText' has a wrong offset!");

// Function Mariner.MarinerButton.SetText
// 0x0018 (0x0018 - 0x0000)
struct MarinerButton_SetText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerButton_SetText) == 0x000008, "Wrong alignment on MarinerButton_SetText");
static_assert(sizeof(MarinerButton_SetText) == 0x000018, "Wrong size on MarinerButton_SetText");
static_assert(offsetof(MarinerButton_SetText, NewText) == 0x000000, "Member 'MarinerButton_SetText::NewText' has a wrong offset!");

// Function Mariner.MarinerButton.GetDefaultTextStyle
// 0x0008 (0x0008 - 0x0000)
struct MarinerButton_GetDefaultTextStyle final
{
public:
	TSubclassOf<class UMarinerTextWidgetStyle>    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerButton_GetDefaultTextStyle) == 0x000008, "Wrong alignment on MarinerButton_GetDefaultTextStyle");
static_assert(sizeof(MarinerButton_GetDefaultTextStyle) == 0x000008, "Wrong size on MarinerButton_GetDefaultTextStyle");
static_assert(offsetof(MarinerButton_GetDefaultTextStyle, ReturnValue) == 0x000000, "Member 'MarinerButton_GetDefaultTextStyle::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerButton.GetHoveredTextStyle
// 0x0008 (0x0008 - 0x0000)
struct MarinerButton_GetHoveredTextStyle final
{
public:
	TSubclassOf<class UMarinerTextWidgetStyle>    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerButton_GetHoveredTextStyle) == 0x000008, "Wrong alignment on MarinerButton_GetHoveredTextStyle");
static_assert(sizeof(MarinerButton_GetHoveredTextStyle) == 0x000008, "Wrong size on MarinerButton_GetHoveredTextStyle");
static_assert(offsetof(MarinerButton_GetHoveredTextStyle, ReturnValue) == 0x000000, "Member 'MarinerButton_GetHoveredTextStyle::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerButtonTimerWidget.SetEndTime
// 0x0018 (0x0018 - 0x0000)
struct MarinerButtonTimerWidget_SetEndTime final
{
public:
	struct FDateTime                              InEndTime;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             InTimerExpired;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerButtonTimerWidget_SetEndTime) == 0x000008, "Wrong alignment on MarinerButtonTimerWidget_SetEndTime");
static_assert(sizeof(MarinerButtonTimerWidget_SetEndTime) == 0x000018, "Wrong size on MarinerButtonTimerWidget_SetEndTime");
static_assert(offsetof(MarinerButtonTimerWidget_SetEndTime, InEndTime) == 0x000000, "Member 'MarinerButtonTimerWidget_SetEndTime::InEndTime' has a wrong offset!");
static_assert(offsetof(MarinerButtonTimerWidget_SetEndTime, InTimerExpired) == 0x000008, "Member 'MarinerButtonTimerWidget_SetEndTime::InTimerExpired' has a wrong offset!");

// Function Mariner.MarinerButtonTimerWidget.IsExpired
// 0x0001 (0x0001 - 0x0000)
struct MarinerButtonTimerWidget_IsExpired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerButtonTimerWidget_IsExpired) == 0x000001, "Wrong alignment on MarinerButtonTimerWidget_IsExpired");
static_assert(sizeof(MarinerButtonTimerWidget_IsExpired) == 0x000001, "Wrong size on MarinerButtonTimerWidget_IsExpired");
static_assert(offsetof(MarinerButtonTimerWidget_IsExpired, ReturnValue) == 0x000000, "Member 'MarinerButtonTimerWidget_IsExpired::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCameraGlobals.CanApplyCameraShake
// 0x0010 (0x0010 - 0x0000)
struct MarinerCameraGlobals_CanApplyCameraShake final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1678[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCameraGlobals_CanApplyCameraShake) == 0x000008, "Wrong alignment on MarinerCameraGlobals_CanApplyCameraShake");
static_assert(sizeof(MarinerCameraGlobals_CanApplyCameraShake) == 0x000010, "Wrong size on MarinerCameraGlobals_CanApplyCameraShake");
static_assert(offsetof(MarinerCameraGlobals_CanApplyCameraShake, Pawn) == 0x000000, "Member 'MarinerCameraGlobals_CanApplyCameraShake::Pawn' has a wrong offset!");
static_assert(offsetof(MarinerCameraGlobals_CanApplyCameraShake, ReturnValue) == 0x000008, "Member 'MarinerCameraGlobals_CanApplyCameraShake::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCameraGlobals.GetDamageGivenCameraShake
// 0x0010 (0x0010 - 0x0000)
struct MarinerCameraGlobals_GetDamageGivenCameraShake final
{
public:
	float                                         DamageGiven;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1679[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShake>               ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCameraGlobals_GetDamageGivenCameraShake) == 0x000008, "Wrong alignment on MarinerCameraGlobals_GetDamageGivenCameraShake");
static_assert(sizeof(MarinerCameraGlobals_GetDamageGivenCameraShake) == 0x000010, "Wrong size on MarinerCameraGlobals_GetDamageGivenCameraShake");
static_assert(offsetof(MarinerCameraGlobals_GetDamageGivenCameraShake, DamageGiven) == 0x000000, "Member 'MarinerCameraGlobals_GetDamageGivenCameraShake::DamageGiven' has a wrong offset!");
static_assert(offsetof(MarinerCameraGlobals_GetDamageGivenCameraShake, ReturnValue) == 0x000008, "Member 'MarinerCameraGlobals_GetDamageGivenCameraShake::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCameraGlobals.GetDamageTakenCameraShake
// 0x0010 (0x0010 - 0x0000)
struct MarinerCameraGlobals_GetDamageTakenCameraShake final
{
public:
	float                                         DamageTaken;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_167A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShake>               ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCameraGlobals_GetDamageTakenCameraShake) == 0x000008, "Wrong alignment on MarinerCameraGlobals_GetDamageTakenCameraShake");
static_assert(sizeof(MarinerCameraGlobals_GetDamageTakenCameraShake) == 0x000010, "Wrong size on MarinerCameraGlobals_GetDamageTakenCameraShake");
static_assert(offsetof(MarinerCameraGlobals_GetDamageTakenCameraShake, DamageTaken) == 0x000000, "Member 'MarinerCameraGlobals_GetDamageTakenCameraShake::DamageTaken' has a wrong offset!");
static_assert(offsetof(MarinerCameraGlobals_GetDamageTakenCameraShake, ReturnValue) == 0x000008, "Member 'MarinerCameraGlobals_GetDamageTakenCameraShake::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCameraGlobals.GetKnockedOutCameraShake
// 0x0008 (0x0008 - 0x0000)
struct MarinerCameraGlobals_GetKnockedOutCameraShake final
{
public:
	TSubclassOf<class UCameraShake>               ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCameraGlobals_GetKnockedOutCameraShake) == 0x000008, "Wrong alignment on MarinerCameraGlobals_GetKnockedOutCameraShake");
static_assert(sizeof(MarinerCameraGlobals_GetKnockedOutCameraShake) == 0x000008, "Wrong size on MarinerCameraGlobals_GetKnockedOutCameraShake");
static_assert(offsetof(MarinerCameraGlobals_GetKnockedOutCameraShake, ReturnValue) == 0x000000, "Member 'MarinerCameraGlobals_GetKnockedOutCameraShake::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCameraGlobals.GetMegablastedCameraShake
// 0x0008 (0x0008 - 0x0000)
struct MarinerCameraGlobals_GetMegablastedCameraShake final
{
public:
	TSubclassOf<class UCameraShake>               ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCameraGlobals_GetMegablastedCameraShake) == 0x000008, "Wrong alignment on MarinerCameraGlobals_GetMegablastedCameraShake");
static_assert(sizeof(MarinerCameraGlobals_GetMegablastedCameraShake) == 0x000008, "Wrong size on MarinerCameraGlobals_GetMegablastedCameraShake");
static_assert(offsetof(MarinerCameraGlobals_GetMegablastedCameraShake, ReturnValue) == 0x000000, "Member 'MarinerCameraGlobals_GetMegablastedCameraShake::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerEquipItemToProfile.EquipItemToProfile
// 0x0030 (0x0030 - 0x0000)
struct MarinerEquipItemToProfile_EquipItemToProfile final
{
public:
	const class UObject*                          Param_WorldContextObject;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMarinerCMSItemDataAsset*>       Param_ItemsToEquip;                                // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class UMarinerPlayableCharacter*        Param_PlayableCharacter;                           // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRanked;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_167E[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerEquipItemToProfile*             ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEquipItemToProfile_EquipItemToProfile) == 0x000008, "Wrong alignment on MarinerEquipItemToProfile_EquipItemToProfile");
static_assert(sizeof(MarinerEquipItemToProfile_EquipItemToProfile) == 0x000030, "Wrong size on MarinerEquipItemToProfile_EquipItemToProfile");
static_assert(offsetof(MarinerEquipItemToProfile_EquipItemToProfile, Param_WorldContextObject) == 0x000000, "Member 'MarinerEquipItemToProfile_EquipItemToProfile::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerEquipItemToProfile_EquipItemToProfile, Param_ItemsToEquip) == 0x000008, "Member 'MarinerEquipItemToProfile_EquipItemToProfile::Param_ItemsToEquip' has a wrong offset!");
static_assert(offsetof(MarinerEquipItemToProfile_EquipItemToProfile, Param_PlayableCharacter) == 0x000018, "Member 'MarinerEquipItemToProfile_EquipItemToProfile::Param_PlayableCharacter' has a wrong offset!");
static_assert(offsetof(MarinerEquipItemToProfile_EquipItemToProfile, bRanked) == 0x000020, "Member 'MarinerEquipItemToProfile_EquipItemToProfile::bRanked' has a wrong offset!");
static_assert(offsetof(MarinerEquipItemToProfile_EquipItemToProfile, ReturnValue) == 0x000028, "Member 'MarinerEquipItemToProfile_EquipItemToProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerEquipItemToProfile.UnequipItemToProfile
// 0x0028 (0x0028 - 0x0000)
struct MarinerEquipItemToProfile_UnequipItemToProfile final
{
public:
	const class UObject*                          Param_WorldContextObject;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRanked;                                           // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_167F[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerEquipItemToProfile*             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEquipItemToProfile_UnequipItemToProfile) == 0x000008, "Wrong alignment on MarinerEquipItemToProfile_UnequipItemToProfile");
static_assert(sizeof(MarinerEquipItemToProfile_UnequipItemToProfile) == 0x000028, "Wrong size on MarinerEquipItemToProfile_UnequipItemToProfile");
static_assert(offsetof(MarinerEquipItemToProfile_UnequipItemToProfile, Param_WorldContextObject) == 0x000000, "Member 'MarinerEquipItemToProfile_UnequipItemToProfile::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerEquipItemToProfile_UnequipItemToProfile, CharacterId) == 0x000008, "Member 'MarinerEquipItemToProfile_UnequipItemToProfile::CharacterId' has a wrong offset!");
static_assert(offsetof(MarinerEquipItemToProfile_UnequipItemToProfile, ItemType) == 0x000018, "Member 'MarinerEquipItemToProfile_UnequipItemToProfile::ItemType' has a wrong offset!");
static_assert(offsetof(MarinerEquipItemToProfile_UnequipItemToProfile, bRanked) == 0x000019, "Member 'MarinerEquipItemToProfile_UnequipItemToProfile::bRanked' has a wrong offset!");
static_assert(offsetof(MarinerEquipItemToProfile_UnequipItemToProfile, ReturnValue) == 0x000020, "Member 'MarinerEquipItemToProfile_UnequipItemToProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCapsuleComponent.GetScaledCapsulePoles
// 0x0018 (0x0018 - 0x0000)
struct MarinerCapsuleComponent_GetScaledCapsulePoles final
{
public:
	struct FVector                                OutTopPole;                                        // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutBottomPole;                                     // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCapsuleComponent_GetScaledCapsulePoles) == 0x000004, "Wrong alignment on MarinerCapsuleComponent_GetScaledCapsulePoles");
static_assert(sizeof(MarinerCapsuleComponent_GetScaledCapsulePoles) == 0x000018, "Wrong size on MarinerCapsuleComponent_GetScaledCapsulePoles");
static_assert(offsetof(MarinerCapsuleComponent_GetScaledCapsulePoles, OutTopPole) == 0x000000, "Member 'MarinerCapsuleComponent_GetScaledCapsulePoles::OutTopPole' has a wrong offset!");
static_assert(offsetof(MarinerCapsuleComponent_GetScaledCapsulePoles, OutBottomPole) == 0x00000C, "Member 'MarinerCapsuleComponent_GetScaledCapsulePoles::OutBottomPole' has a wrong offset!");

// Function Mariner.MarinerCaptureVolume.GetCapturePercentage
// 0x0004 (0x0004 - 0x0000)
struct MarinerCaptureVolume_GetCapturePercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolume_GetCapturePercentage) == 0x000004, "Wrong alignment on MarinerCaptureVolume_GetCapturePercentage");
static_assert(sizeof(MarinerCaptureVolume_GetCapturePercentage) == 0x000004, "Wrong size on MarinerCaptureVolume_GetCapturePercentage");
static_assert(offsetof(MarinerCaptureVolume_GetCapturePercentage, ReturnValue) == 0x000000, "Member 'MarinerCaptureVolume_GetCapturePercentage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCaptureVolume.IsCaptured
// 0x0001 (0x0001 - 0x0000)
struct MarinerCaptureVolume_IsCaptured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCaptureVolume_IsCaptured) == 0x000001, "Wrong alignment on MarinerCaptureVolume_IsCaptured");
static_assert(sizeof(MarinerCaptureVolume_IsCaptured) == 0x000001, "Wrong size on MarinerCaptureVolume_IsCaptured");
static_assert(offsetof(MarinerCaptureVolume_IsCaptured, ReturnValue) == 0x000000, "Member 'MarinerCaptureVolume_IsCaptured::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerEquipEmotesToProfile.EquipChatEmotesToProfile
// 0x0028 (0x0028 - 0x0000)
struct MarinerEquipEmotesToProfile_EquipChatEmotesToProfile final
{
public:
	const class UObject*                          Param_WorldContextObject;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoEquippedEmoteWithSlot>    EmotesToEquip;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class UMarinerPlayableCharacter*        Param_PlayableCharacter;                           // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerEquipEmotesToProfile*           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEquipEmotesToProfile_EquipChatEmotesToProfile) == 0x000008, "Wrong alignment on MarinerEquipEmotesToProfile_EquipChatEmotesToProfile");
static_assert(sizeof(MarinerEquipEmotesToProfile_EquipChatEmotesToProfile) == 0x000028, "Wrong size on MarinerEquipEmotesToProfile_EquipChatEmotesToProfile");
static_assert(offsetof(MarinerEquipEmotesToProfile_EquipChatEmotesToProfile, Param_WorldContextObject) == 0x000000, "Member 'MarinerEquipEmotesToProfile_EquipChatEmotesToProfile::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerEquipEmotesToProfile_EquipChatEmotesToProfile, EmotesToEquip) == 0x000008, "Member 'MarinerEquipEmotesToProfile_EquipChatEmotesToProfile::EmotesToEquip' has a wrong offset!");
static_assert(offsetof(MarinerEquipEmotesToProfile_EquipChatEmotesToProfile, Param_PlayableCharacter) == 0x000018, "Member 'MarinerEquipEmotesToProfile_EquipChatEmotesToProfile::Param_PlayableCharacter' has a wrong offset!");
static_assert(offsetof(MarinerEquipEmotesToProfile_EquipChatEmotesToProfile, ReturnValue) == 0x000020, "Member 'MarinerEquipEmotesToProfile_EquipChatEmotesToProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerEquipEmotesToProfile.EquipPregameEmotesToProfile
// 0x0028 (0x0028 - 0x0000)
struct MarinerEquipEmotesToProfile_EquipPregameEmotesToProfile final
{
public:
	const class UObject*                          Param_WorldContextObject;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoEquippedEmoteWithSlot>    EmotesToEquip;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class UMarinerPlayableCharacter*        Param_PlayableCharacter;                           // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerEquipEmotesToProfile*           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEquipEmotesToProfile_EquipPregameEmotesToProfile) == 0x000008, "Wrong alignment on MarinerEquipEmotesToProfile_EquipPregameEmotesToProfile");
static_assert(sizeof(MarinerEquipEmotesToProfile_EquipPregameEmotesToProfile) == 0x000028, "Wrong size on MarinerEquipEmotesToProfile_EquipPregameEmotesToProfile");
static_assert(offsetof(MarinerEquipEmotesToProfile_EquipPregameEmotesToProfile, Param_WorldContextObject) == 0x000000, "Member 'MarinerEquipEmotesToProfile_EquipPregameEmotesToProfile::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerEquipEmotesToProfile_EquipPregameEmotesToProfile, EmotesToEquip) == 0x000008, "Member 'MarinerEquipEmotesToProfile_EquipPregameEmotesToProfile::EmotesToEquip' has a wrong offset!");
static_assert(offsetof(MarinerEquipEmotesToProfile_EquipPregameEmotesToProfile, Param_PlayableCharacter) == 0x000018, "Member 'MarinerEquipEmotesToProfile_EquipPregameEmotesToProfile::Param_PlayableCharacter' has a wrong offset!");
static_assert(offsetof(MarinerEquipEmotesToProfile_EquipPregameEmotesToProfile, ReturnValue) == 0x000020, "Member 'MarinerEquipEmotesToProfile_EquipPregameEmotesToProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerEquipEmotesToProfile.EquipVictoryEmoteToProfile
// 0x0028 (0x0028 - 0x0000)
struct MarinerEquipEmotesToProfile_EquipVictoryEmoteToProfile final
{
public:
	const class UObject*                          Param_WorldContextObject;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoEquippedEmote                    EmoteToEquip;                                      // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	const class UMarinerPlayableCharacter*        Param_PlayableCharacter;                           // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerEquipEmotesToProfile*           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEquipEmotesToProfile_EquipVictoryEmoteToProfile) == 0x000008, "Wrong alignment on MarinerEquipEmotesToProfile_EquipVictoryEmoteToProfile");
static_assert(sizeof(MarinerEquipEmotesToProfile_EquipVictoryEmoteToProfile) == 0x000028, "Wrong size on MarinerEquipEmotesToProfile_EquipVictoryEmoteToProfile");
static_assert(offsetof(MarinerEquipEmotesToProfile_EquipVictoryEmoteToProfile, Param_WorldContextObject) == 0x000000, "Member 'MarinerEquipEmotesToProfile_EquipVictoryEmoteToProfile::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerEquipEmotesToProfile_EquipVictoryEmoteToProfile, EmoteToEquip) == 0x000008, "Member 'MarinerEquipEmotesToProfile_EquipVictoryEmoteToProfile::EmoteToEquip' has a wrong offset!");
static_assert(offsetof(MarinerEquipEmotesToProfile_EquipVictoryEmoteToProfile, Param_PlayableCharacter) == 0x000018, "Member 'MarinerEquipEmotesToProfile_EquipVictoryEmoteToProfile::Param_PlayableCharacter' has a wrong offset!");
static_assert(offsetof(MarinerEquipEmotesToProfile_EquipVictoryEmoteToProfile, ReturnValue) == 0x000020, "Member 'MarinerEquipEmotesToProfile_EquipVictoryEmoteToProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerChangeableMaterialInterface.GetOriginalMaterials
// 0x0050 (0x0050 - 0x0000)
struct MarinerChangeableMaterialInterface_GetOriginalMaterials final
{
public:
	TMap<int32, struct FMarinerMatSwapData>       ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChangeableMaterialInterface_GetOriginalMaterials) == 0x000008, "Wrong alignment on MarinerChangeableMaterialInterface_GetOriginalMaterials");
static_assert(sizeof(MarinerChangeableMaterialInterface_GetOriginalMaterials) == 0x000050, "Wrong size on MarinerChangeableMaterialInterface_GetOriginalMaterials");
static_assert(offsetof(MarinerChangeableMaterialInterface_GetOriginalMaterials, ReturnValue) == 0x000000, "Member 'MarinerChangeableMaterialInterface_GetOriginalMaterials::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerChangeableMaterialInterface.RevertMaterial
// 0x0028 (0x0028 - 0x0000)
struct MarinerChangeableMaterialInterface_RevertMaterial final
{
public:
	struct FMarinerMatSwapJob                     RevertJob;                                         // 0x0000(0x0028)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChangeableMaterialInterface_RevertMaterial) == 0x000008, "Wrong alignment on MarinerChangeableMaterialInterface_RevertMaterial");
static_assert(sizeof(MarinerChangeableMaterialInterface_RevertMaterial) == 0x000028, "Wrong size on MarinerChangeableMaterialInterface_RevertMaterial");
static_assert(offsetof(MarinerChangeableMaterialInterface_RevertMaterial, RevertJob) == 0x000000, "Member 'MarinerChangeableMaterialInterface_RevertMaterial::RevertJob' has a wrong offset!");

// Function Mariner.MarinerChangeableMaterialInterface.RevertMaterials
// 0x0010 (0x0010 - 0x0000)
struct MarinerChangeableMaterialInterface_RevertMaterials final
{
public:
	TArray<struct FMarinerMatSwapJob>             InRevertJobs;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChangeableMaterialInterface_RevertMaterials) == 0x000008, "Wrong alignment on MarinerChangeableMaterialInterface_RevertMaterials");
static_assert(sizeof(MarinerChangeableMaterialInterface_RevertMaterials) == 0x000010, "Wrong size on MarinerChangeableMaterialInterface_RevertMaterials");
static_assert(offsetof(MarinerChangeableMaterialInterface_RevertMaterials, InRevertJobs) == 0x000000, "Member 'MarinerChangeableMaterialInterface_RevertMaterials::InRevertJobs' has a wrong offset!");

// Function Mariner.MarinerChangeableMaterialInterface.RevertMesh
// 0x0001 (0x0001 - 0x0000)
struct MarinerChangeableMaterialInterface_RevertMesh final
{
public:
	EMarinerChangeMeshEnum                        MeshTypeToRevert;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChangeableMaterialInterface_RevertMesh) == 0x000001, "Wrong alignment on MarinerChangeableMaterialInterface_RevertMesh");
static_assert(sizeof(MarinerChangeableMaterialInterface_RevertMesh) == 0x000001, "Wrong size on MarinerChangeableMaterialInterface_RevertMesh");
static_assert(offsetof(MarinerChangeableMaterialInterface_RevertMesh, MeshTypeToRevert) == 0x000000, "Member 'MarinerChangeableMaterialInterface_RevertMesh::MeshTypeToRevert' has a wrong offset!");

// Function Mariner.MarinerChangeableMaterialInterface.RevertMeshes
// 0x0010 (0x0010 - 0x0000)
struct MarinerChangeableMaterialInterface_RevertMeshes final
{
public:
	TArray<EMarinerChangeMeshEnum>                MeshTypesToRevert;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChangeableMaterialInterface_RevertMeshes) == 0x000008, "Wrong alignment on MarinerChangeableMaterialInterface_RevertMeshes");
static_assert(sizeof(MarinerChangeableMaterialInterface_RevertMeshes) == 0x000010, "Wrong size on MarinerChangeableMaterialInterface_RevertMeshes");
static_assert(offsetof(MarinerChangeableMaterialInterface_RevertMeshes, MeshTypesToRevert) == 0x000000, "Member 'MarinerChangeableMaterialInterface_RevertMeshes::MeshTypesToRevert' has a wrong offset!");

// Function Mariner.MarinerChangeableMaterialInterface.SwapMaterial
// 0x0028 (0x0028 - 0x0000)
struct MarinerChangeableMaterialInterface_SwapMaterial final
{
public:
	struct FMarinerMatSwapJob                     MatSwap;                                           // 0x0000(0x0028)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChangeableMaterialInterface_SwapMaterial) == 0x000008, "Wrong alignment on MarinerChangeableMaterialInterface_SwapMaterial");
static_assert(sizeof(MarinerChangeableMaterialInterface_SwapMaterial) == 0x000028, "Wrong size on MarinerChangeableMaterialInterface_SwapMaterial");
static_assert(offsetof(MarinerChangeableMaterialInterface_SwapMaterial, MatSwap) == 0x000000, "Member 'MarinerChangeableMaterialInterface_SwapMaterial::MatSwap' has a wrong offset!");

// Function Mariner.MarinerChangeableMaterialInterface.SwapMaterials
// 0x0010 (0x0010 - 0x0000)
struct MarinerChangeableMaterialInterface_SwapMaterials final
{
public:
	TArray<struct FMarinerMatSwapJob>             InMatSwaps;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChangeableMaterialInterface_SwapMaterials) == 0x000008, "Wrong alignment on MarinerChangeableMaterialInterface_SwapMaterials");
static_assert(sizeof(MarinerChangeableMaterialInterface_SwapMaterials) == 0x000010, "Wrong size on MarinerChangeableMaterialInterface_SwapMaterials");
static_assert(offsetof(MarinerChangeableMaterialInterface_SwapMaterials, InMatSwaps) == 0x000000, "Member 'MarinerChangeableMaterialInterface_SwapMaterials::InMatSwaps' has a wrong offset!");

// Function Mariner.MarinerChangeableMaterialInterface.SwapMesh
// 0x0008 (0x0008 - 0x0000)
struct MarinerChangeableMaterialInterface_SwapMesh final
{
public:
	class UMarinerMeshSwapJob*                    MeshSwap;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChangeableMaterialInterface_SwapMesh) == 0x000008, "Wrong alignment on MarinerChangeableMaterialInterface_SwapMesh");
static_assert(sizeof(MarinerChangeableMaterialInterface_SwapMesh) == 0x000008, "Wrong size on MarinerChangeableMaterialInterface_SwapMesh");
static_assert(offsetof(MarinerChangeableMaterialInterface_SwapMesh, MeshSwap) == 0x000000, "Member 'MarinerChangeableMaterialInterface_SwapMesh::MeshSwap' has a wrong offset!");

// Function Mariner.MarinerChangeableMaterialInterface.SwapMeshes
// 0x0010 (0x0010 - 0x0000)
struct MarinerChangeableMaterialInterface_SwapMeshes final
{
public:
	TArray<class UMarinerMeshSwapJob*>            InMeshSwaps;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChangeableMaterialInterface_SwapMeshes) == 0x000008, "Wrong alignment on MarinerChangeableMaterialInterface_SwapMeshes");
static_assert(sizeof(MarinerChangeableMaterialInterface_SwapMeshes) == 0x000010, "Wrong size on MarinerChangeableMaterialInterface_SwapMeshes");
static_assert(offsetof(MarinerChangeableMaterialInterface_SwapMeshes, InMeshSwaps) == 0x000000, "Member 'MarinerChangeableMaterialInterface_SwapMeshes::InMeshSwaps' has a wrong offset!");

// Function Mariner.MarinerChangeableMaterialInterface.UpdateMaterial
// 0x0030 (0x0030 - 0x0000)
struct MarinerChangeableMaterialInterface_UpdateMaterial final
{
public:
	struct FMarinerMatSwapJob                     UpdateMatJob;                                      // 0x0000(0x0028)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bRevertImmediately;                                // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1685[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerChangeableMaterialInterface_UpdateMaterial) == 0x000008, "Wrong alignment on MarinerChangeableMaterialInterface_UpdateMaterial");
static_assert(sizeof(MarinerChangeableMaterialInterface_UpdateMaterial) == 0x000030, "Wrong size on MarinerChangeableMaterialInterface_UpdateMaterial");
static_assert(offsetof(MarinerChangeableMaterialInterface_UpdateMaterial, UpdateMatJob) == 0x000000, "Member 'MarinerChangeableMaterialInterface_UpdateMaterial::UpdateMatJob' has a wrong offset!");
static_assert(offsetof(MarinerChangeableMaterialInterface_UpdateMaterial, bRevertImmediately) == 0x000028, "Member 'MarinerChangeableMaterialInterface_UpdateMaterial::bRevertImmediately' has a wrong offset!");

// Function Mariner.MarinerChangeableMaterialInterface.UpdateMaterials
// 0x0018 (0x0018 - 0x0000)
struct MarinerChangeableMaterialInterface_UpdateMaterials final
{
public:
	TArray<struct FMarinerMatSwapJob>             InUpdateMatJobs;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bRevertImmediately;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1686[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerChangeableMaterialInterface_UpdateMaterials) == 0x000008, "Wrong alignment on MarinerChangeableMaterialInterface_UpdateMaterials");
static_assert(sizeof(MarinerChangeableMaterialInterface_UpdateMaterials) == 0x000018, "Wrong size on MarinerChangeableMaterialInterface_UpdateMaterials");
static_assert(offsetof(MarinerChangeableMaterialInterface_UpdateMaterials, InUpdateMatJobs) == 0x000000, "Member 'MarinerChangeableMaterialInterface_UpdateMaterials::InUpdateMatJobs' has a wrong offset!");
static_assert(offsetof(MarinerChangeableMaterialInterface_UpdateMaterials, bRevertImmediately) == 0x000010, "Member 'MarinerChangeableMaterialInterface_UpdateMaterials::bRevertImmediately' has a wrong offset!");

// Function Mariner.MarinerChangeableMaterialInterface.UsingOriginalMaterial
// 0x0002 (0x0002 - 0x0000)
struct MarinerChangeableMaterialInterface_UsingOriginalMaterial final
{
public:
	EMarinerChangeMaterialFlags                   MaterialType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChangeableMaterialInterface_UsingOriginalMaterial) == 0x000001, "Wrong alignment on MarinerChangeableMaterialInterface_UsingOriginalMaterial");
static_assert(sizeof(MarinerChangeableMaterialInterface_UsingOriginalMaterial) == 0x000002, "Wrong size on MarinerChangeableMaterialInterface_UsingOriginalMaterial");
static_assert(offsetof(MarinerChangeableMaterialInterface_UsingOriginalMaterial, MaterialType) == 0x000000, "Member 'MarinerChangeableMaterialInterface_UsingOriginalMaterial::MaterialType' has a wrong offset!");
static_assert(offsetof(MarinerChangeableMaterialInterface_UsingOriginalMaterial, ReturnValue) == 0x000001, "Member 'MarinerChangeableMaterialInterface_UsingOriginalMaterial::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerChangeableMaterialInterface.HasPendingMeshSwapForMeshType
// 0x0002 (0x0002 - 0x0000)
struct MarinerChangeableMaterialInterface_HasPendingMeshSwapForMeshType final
{
public:
	EMarinerChangeMeshEnum                        MeshType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChangeableMaterialInterface_HasPendingMeshSwapForMeshType) == 0x000001, "Wrong alignment on MarinerChangeableMaterialInterface_HasPendingMeshSwapForMeshType");
static_assert(sizeof(MarinerChangeableMaterialInterface_HasPendingMeshSwapForMeshType) == 0x000002, "Wrong size on MarinerChangeableMaterialInterface_HasPendingMeshSwapForMeshType");
static_assert(offsetof(MarinerChangeableMaterialInterface_HasPendingMeshSwapForMeshType, MeshType) == 0x000000, "Member 'MarinerChangeableMaterialInterface_HasPendingMeshSwapForMeshType::MeshType' has a wrong offset!");
static_assert(offsetof(MarinerChangeableMaterialInterface_HasPendingMeshSwapForMeshType, ReturnValue) == 0x000001, "Member 'MarinerChangeableMaterialInterface_HasPendingMeshSwapForMeshType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerChangeableMaterialInterface.IsUsingOriginalMesh
// 0x0002 (0x0002 - 0x0000)
struct MarinerChangeableMaterialInterface_IsUsingOriginalMesh final
{
public:
	EMarinerChangeMeshEnum                        MeshType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChangeableMaterialInterface_IsUsingOriginalMesh) == 0x000001, "Wrong alignment on MarinerChangeableMaterialInterface_IsUsingOriginalMesh");
static_assert(sizeof(MarinerChangeableMaterialInterface_IsUsingOriginalMesh) == 0x000002, "Wrong size on MarinerChangeableMaterialInterface_IsUsingOriginalMesh");
static_assert(offsetof(MarinerChangeableMaterialInterface_IsUsingOriginalMesh, MeshType) == 0x000000, "Member 'MarinerChangeableMaterialInterface_IsUsingOriginalMesh::MeshType' has a wrong offset!");
static_assert(offsetof(MarinerChangeableMaterialInterface_IsUsingOriginalMesh, ReturnValue) == 0x000001, "Member 'MarinerChangeableMaterialInterface_IsUsingOriginalMesh::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastCollisionComponent.CheckIsColliding
// 0x0028 (0x0028 - 0x0000)
struct MarinerFastCollisionComponent_CheckIsColliding final
{
public:
	struct FVector                                OutCollisionPoint;                                 // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionNormal;                                // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerFastCollisionComponent*         OutHitCollider;                                    // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1688[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastCollisionComponent_CheckIsColliding) == 0x000008, "Wrong alignment on MarinerFastCollisionComponent_CheckIsColliding");
static_assert(sizeof(MarinerFastCollisionComponent_CheckIsColliding) == 0x000028, "Wrong size on MarinerFastCollisionComponent_CheckIsColliding");
static_assert(offsetof(MarinerFastCollisionComponent_CheckIsColliding, OutCollisionPoint) == 0x000000, "Member 'MarinerFastCollisionComponent_CheckIsColliding::OutCollisionPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionComponent_CheckIsColliding, OutCollisionNormal) == 0x00000C, "Member 'MarinerFastCollisionComponent_CheckIsColliding::OutCollisionNormal' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionComponent_CheckIsColliding, OutHitCollider) == 0x000018, "Member 'MarinerFastCollisionComponent_CheckIsColliding::OutHitCollider' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionComponent_CheckIsColliding, ReturnValue) == 0x000020, "Member 'MarinerFastCollisionComponent_CheckIsColliding::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastCollisionComponent.DisableCollision
// 0x0001 (0x0001 - 0x0000)
struct MarinerFastCollisionComponent_DisableCollision final
{
public:
	bool                                          DisableParentCollision;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFastCollisionComponent_DisableCollision) == 0x000001, "Wrong alignment on MarinerFastCollisionComponent_DisableCollision");
static_assert(sizeof(MarinerFastCollisionComponent_DisableCollision) == 0x000001, "Wrong size on MarinerFastCollisionComponent_DisableCollision");
static_assert(offsetof(MarinerFastCollisionComponent_DisableCollision, DisableParentCollision) == 0x000000, "Member 'MarinerFastCollisionComponent_DisableCollision::DisableParentCollision' has a wrong offset!");

// Function Mariner.MarinerFastCollisionComponent.EnableCollision
// 0x0001 (0x0001 - 0x0000)
struct MarinerFastCollisionComponent_EnableCollision final
{
public:
	bool                                          EnableParentCollision;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFastCollisionComponent_EnableCollision) == 0x000001, "Wrong alignment on MarinerFastCollisionComponent_EnableCollision");
static_assert(sizeof(MarinerFastCollisionComponent_EnableCollision) == 0x000001, "Wrong size on MarinerFastCollisionComponent_EnableCollision");
static_assert(offsetof(MarinerFastCollisionComponent_EnableCollision, EnableParentCollision) == 0x000000, "Member 'MarinerFastCollisionComponent_EnableCollision::EnableParentCollision' has a wrong offset!");

// Function Mariner.MarinerFastCollisionComponent.SetCanCollideWithArenaBounds
// 0x0001 (0x0001 - 0x0000)
struct MarinerFastCollisionComponent_SetCanCollideWithArenaBounds final
{
public:
	bool                                          bCanCollide;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFastCollisionComponent_SetCanCollideWithArenaBounds) == 0x000001, "Wrong alignment on MarinerFastCollisionComponent_SetCanCollideWithArenaBounds");
static_assert(sizeof(MarinerFastCollisionComponent_SetCanCollideWithArenaBounds) == 0x000001, "Wrong size on MarinerFastCollisionComponent_SetCanCollideWithArenaBounds");
static_assert(offsetof(MarinerFastCollisionComponent_SetCanCollideWithArenaBounds, bCanCollide) == 0x000000, "Member 'MarinerFastCollisionComponent_SetCanCollideWithArenaBounds::bCanCollide' has a wrong offset!");

// Function Mariner.MarinerFastCollisionComponent.GetCanCollideWithArenaBounds
// 0x0001 (0x0001 - 0x0000)
struct MarinerFastCollisionComponent_GetCanCollideWithArenaBounds final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFastCollisionComponent_GetCanCollideWithArenaBounds) == 0x000001, "Wrong alignment on MarinerFastCollisionComponent_GetCanCollideWithArenaBounds");
static_assert(sizeof(MarinerFastCollisionComponent_GetCanCollideWithArenaBounds) == 0x000001, "Wrong size on MarinerFastCollisionComponent_GetCanCollideWithArenaBounds");
static_assert(offsetof(MarinerFastCollisionComponent_GetCanCollideWithArenaBounds, ReturnValue) == 0x000000, "Member 'MarinerFastCollisionComponent_GetCanCollideWithArenaBounds::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastCollisionComponent.IsCollisionDisabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerFastCollisionComponent_IsCollisionDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFastCollisionComponent_IsCollisionDisabled) == 0x000001, "Wrong alignment on MarinerFastCollisionComponent_IsCollisionDisabled");
static_assert(sizeof(MarinerFastCollisionComponent_IsCollisionDisabled) == 0x000001, "Wrong size on MarinerFastCollisionComponent_IsCollisionDisabled");
static_assert(offsetof(MarinerFastCollisionComponent_IsCollisionDisabled, ReturnValue) == 0x000000, "Member 'MarinerFastCollisionComponent_IsCollisionDisabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.AltFireByAxis
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_AltFireByAxis final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_AltFireByAxis) == 0x000004, "Wrong alignment on MarinerCharacter_AltFireByAxis");
static_assert(sizeof(MarinerCharacter_AltFireByAxis) == 0x000004, "Wrong size on MarinerCharacter_AltFireByAxis");
static_assert(offsetof(MarinerCharacter_AltFireByAxis, Value) == 0x000000, "Member 'MarinerCharacter_AltFireByAxis::Value' has a wrong offset!");

// Function Mariner.MarinerCharacter.ApplyInstigatorsMegablastFX
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_ApplyInstigatorsMegablastFX final
{
public:
	const class AMarinerPlayerState*              MegablastInstigator;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ApplyInstigatorsMegablastFX) == 0x000008, "Wrong alignment on MarinerCharacter_ApplyInstigatorsMegablastFX");
static_assert(sizeof(MarinerCharacter_ApplyInstigatorsMegablastFX) == 0x000008, "Wrong size on MarinerCharacter_ApplyInstigatorsMegablastFX");
static_assert(offsetof(MarinerCharacter_ApplyInstigatorsMegablastFX, MegablastInstigator) == 0x000000, "Member 'MarinerCharacter_ApplyInstigatorsMegablastFX::MegablastInstigator' has a wrong offset!");

// Function Mariner.MarinerCharacter.ApplyMouseAndGamepadSensitivityModifier
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_ApplyMouseAndGamepadSensitivityModifier final
{
public:
	float                                         MouseTurnRateModifier;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseLookUpRateModifier;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadTurnRateModifier;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadLookUpRateModifier;                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ApplyMouseAndGamepadSensitivityModifier) == 0x000004, "Wrong alignment on MarinerCharacter_ApplyMouseAndGamepadSensitivityModifier");
static_assert(sizeof(MarinerCharacter_ApplyMouseAndGamepadSensitivityModifier) == 0x000010, "Wrong size on MarinerCharacter_ApplyMouseAndGamepadSensitivityModifier");
static_assert(offsetof(MarinerCharacter_ApplyMouseAndGamepadSensitivityModifier, MouseTurnRateModifier) == 0x000000, "Member 'MarinerCharacter_ApplyMouseAndGamepadSensitivityModifier::MouseTurnRateModifier' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_ApplyMouseAndGamepadSensitivityModifier, MouseLookUpRateModifier) == 0x000004, "Member 'MarinerCharacter_ApplyMouseAndGamepadSensitivityModifier::MouseLookUpRateModifier' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_ApplyMouseAndGamepadSensitivityModifier, GamepadTurnRateModifier) == 0x000008, "Member 'MarinerCharacter_ApplyMouseAndGamepadSensitivityModifier::GamepadTurnRateModifier' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_ApplyMouseAndGamepadSensitivityModifier, GamepadLookUpRateModifier) == 0x00000C, "Member 'MarinerCharacter_ApplyMouseAndGamepadSensitivityModifier::GamepadLookUpRateModifier' has a wrong offset!");

// Function Mariner.MarinerCharacter.ApplySkinFromOtherCharacter
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_ApplySkinFromOtherCharacter final
{
public:
	class AMarinerCharacter*                      OtherCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ApplySkinFromOtherCharacter) == 0x000008, "Wrong alignment on MarinerCharacter_ApplySkinFromOtherCharacter");
static_assert(sizeof(MarinerCharacter_ApplySkinFromOtherCharacter) == 0x000008, "Wrong size on MarinerCharacter_ApplySkinFromOtherCharacter");
static_assert(offsetof(MarinerCharacter_ApplySkinFromOtherCharacter, OtherCharacter) == 0x000000, "Member 'MarinerCharacter_ApplySkinFromOtherCharacter::OtherCharacter' has a wrong offset!");

// Function Mariner.MarinerCharacter.ApplySkinFromProfileObjectManager
// 0x0030 (0x0030 - 0x0000)
struct MarinerCharacter_ApplySkinFromProfileObjectManager final
{
public:
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> InCollectionPath;                                  // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUpdate;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A7[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_ApplySkinFromProfileObjectManager) == 0x000008, "Wrong alignment on MarinerCharacter_ApplySkinFromProfileObjectManager");
static_assert(sizeof(MarinerCharacter_ApplySkinFromProfileObjectManager) == 0x000030, "Wrong size on MarinerCharacter_ApplySkinFromProfileObjectManager");
static_assert(offsetof(MarinerCharacter_ApplySkinFromProfileObjectManager, InCollectionPath) == 0x000000, "Member 'MarinerCharacter_ApplySkinFromProfileObjectManager::InCollectionPath' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_ApplySkinFromProfileObjectManager, bForceUpdate) == 0x000028, "Member 'MarinerCharacter_ApplySkinFromProfileObjectManager::bForceUpdate' has a wrong offset!");

// Function Mariner.MarinerCharacter.AuthoritySetCurrentReality
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_AuthoritySetCurrentReality final
{
public:
	EMarinerRealityState                          DesiredRealityState;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_AuthoritySetCurrentReality) == 0x000001, "Wrong alignment on MarinerCharacter_AuthoritySetCurrentReality");
static_assert(sizeof(MarinerCharacter_AuthoritySetCurrentReality) == 0x000001, "Wrong size on MarinerCharacter_AuthoritySetCurrentReality");
static_assert(offsetof(MarinerCharacter_AuthoritySetCurrentReality, DesiredRealityState) == 0x000000, "Member 'MarinerCharacter_AuthoritySetCurrentReality::DesiredRealityState' has a wrong offset!");

// Function Mariner.MarinerCharacter.AuthorityToggleBlastedTrail
// 0x0002 (0x0002 - 0x0000)
struct MarinerCharacter_AuthorityToggleBlastedTrail final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsMegablasted;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_AuthorityToggleBlastedTrail) == 0x000001, "Wrong alignment on MarinerCharacter_AuthorityToggleBlastedTrail");
static_assert(sizeof(MarinerCharacter_AuthorityToggleBlastedTrail) == 0x000002, "Wrong size on MarinerCharacter_AuthorityToggleBlastedTrail");
static_assert(offsetof(MarinerCharacter_AuthorityToggleBlastedTrail, bActivate) == 0x000000, "Member 'MarinerCharacter_AuthorityToggleBlastedTrail::bActivate' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_AuthorityToggleBlastedTrail, bInIsMegablasted) == 0x000001, "Member 'MarinerCharacter_AuthorityToggleBlastedTrail::bInIsMegablasted' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_GetOverrideLocalVisibilityForComponent
// 0x0018 (0x0018 - 0x0000)
struct MarinerCharacter_BP_GetOverrideLocalVisibilityForComponent final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ComponentOwner;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWantsToBeVisible;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A8[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_BP_GetOverrideLocalVisibilityForComponent) == 0x000008, "Wrong alignment on MarinerCharacter_BP_GetOverrideLocalVisibilityForComponent");
static_assert(sizeof(MarinerCharacter_BP_GetOverrideLocalVisibilityForComponent) == 0x000018, "Wrong size on MarinerCharacter_BP_GetOverrideLocalVisibilityForComponent");
static_assert(offsetof(MarinerCharacter_BP_GetOverrideLocalVisibilityForComponent, Component) == 0x000000, "Member 'MarinerCharacter_BP_GetOverrideLocalVisibilityForComponent::Component' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_BP_GetOverrideLocalVisibilityForComponent, ComponentOwner) == 0x000008, "Member 'MarinerCharacter_BP_GetOverrideLocalVisibilityForComponent::ComponentOwner' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_BP_GetOverrideLocalVisibilityForComponent, bWantsToBeVisible) == 0x000010, "Member 'MarinerCharacter_BP_GetOverrideLocalVisibilityForComponent::bWantsToBeVisible' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_BP_GetOverrideLocalVisibilityForComponent, ReturnValue) == 0x000011, "Member 'MarinerCharacter_BP_GetOverrideLocalVisibilityForComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_InvokeLocalGameplayCues
// 0x0020 (0x0020 - 0x0000)
struct MarinerCharacter_BP_InvokeLocalGameplayCues final
{
public:
	struct FGameplayTagContainer                  GameplayCues;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_InvokeLocalGameplayCues) == 0x000008, "Wrong alignment on MarinerCharacter_BP_InvokeLocalGameplayCues");
static_assert(sizeof(MarinerCharacter_BP_InvokeLocalGameplayCues) == 0x000020, "Wrong size on MarinerCharacter_BP_InvokeLocalGameplayCues");
static_assert(offsetof(MarinerCharacter_BP_InvokeLocalGameplayCues, GameplayCues) == 0x000000, "Member 'MarinerCharacter_BP_InvokeLocalGameplayCues::GameplayCues' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnChangePerspective
// 0x0158 (0x0158 - 0x0000)
struct MarinerCharacter_BP_OnChangePerspective final
{
public:
	class FName                                   PerspectiveName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerCameraPerspective              Perspective;                                       // 0x0008(0x00A8)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarinerCameraPerspective              ReturnValue;                                       // 0x00B0(0x00A8)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_OnChangePerspective) == 0x000008, "Wrong alignment on MarinerCharacter_BP_OnChangePerspective");
static_assert(sizeof(MarinerCharacter_BP_OnChangePerspective) == 0x000158, "Wrong size on MarinerCharacter_BP_OnChangePerspective");
static_assert(offsetof(MarinerCharacter_BP_OnChangePerspective, PerspectiveName) == 0x000000, "Member 'MarinerCharacter_BP_OnChangePerspective::PerspectiveName' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_BP_OnChangePerspective, Perspective) == 0x000008, "Member 'MarinerCharacter_BP_OnChangePerspective::Perspective' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_BP_OnChangePerspective, ReturnValue) == 0x0000B0, "Member 'MarinerCharacter_BP_OnChangePerspective::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnEnteredReality_OnOtherCharacter
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_BP_OnEnteredReality_OnOtherCharacter final
{
public:
	class AMarinerCharacter*                      NonTransitioningCharacter;                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerRealityState                          CurrentReality;                                    // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A9[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_BP_OnEnteredReality_OnOtherCharacter) == 0x000008, "Wrong alignment on MarinerCharacter_BP_OnEnteredReality_OnOtherCharacter");
static_assert(sizeof(MarinerCharacter_BP_OnEnteredReality_OnOtherCharacter) == 0x000010, "Wrong size on MarinerCharacter_BP_OnEnteredReality_OnOtherCharacter");
static_assert(offsetof(MarinerCharacter_BP_OnEnteredReality_OnOtherCharacter, NonTransitioningCharacter) == 0x000000, "Member 'MarinerCharacter_BP_OnEnteredReality_OnOtherCharacter::NonTransitioningCharacter' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_BP_OnEnteredReality_OnOtherCharacter, CurrentReality) == 0x000008, "Member 'MarinerCharacter_BP_OnEnteredReality_OnOtherCharacter::CurrentReality' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnEnterMegablastState
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_BP_OnEnterMegablastState final
{
public:
	class AMarinerPlayerState*                    MegablastInstigator;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_OnEnterMegablastState) == 0x000008, "Wrong alignment on MarinerCharacter_BP_OnEnterMegablastState");
static_assert(sizeof(MarinerCharacter_BP_OnEnterMegablastState) == 0x000008, "Wrong size on MarinerCharacter_BP_OnEnterMegablastState");
static_assert(offsetof(MarinerCharacter_BP_OnEnterMegablastState, MegablastInstigator) == 0x000000, "Member 'MarinerCharacter_BP_OnEnterMegablastState::MegablastInstigator' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnEnterReality
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_BP_OnEnterReality final
{
public:
	class AMarinerCharacter*                      TransitioningCharacter;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerRealityState                          CurrentReality;                                    // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16AA[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_BP_OnEnterReality) == 0x000008, "Wrong alignment on MarinerCharacter_BP_OnEnterReality");
static_assert(sizeof(MarinerCharacter_BP_OnEnterReality) == 0x000010, "Wrong size on MarinerCharacter_BP_OnEnterReality");
static_assert(offsetof(MarinerCharacter_BP_OnEnterReality, TransitioningCharacter) == 0x000000, "Member 'MarinerCharacter_BP_OnEnterReality::TransitioningCharacter' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_BP_OnEnterReality, CurrentReality) == 0x000008, "Member 'MarinerCharacter_BP_OnEnterReality::CurrentReality' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnExitMegablastState
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_BP_OnExitMegablastState final
{
public:
	class AMarinerPlayerState*                    MegablastInstigator;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_OnExitMegablastState) == 0x000008, "Wrong alignment on MarinerCharacter_BP_OnExitMegablastState");
static_assert(sizeof(MarinerCharacter_BP_OnExitMegablastState) == 0x000008, "Wrong size on MarinerCharacter_BP_OnExitMegablastState");
static_assert(offsetof(MarinerCharacter_BP_OnExitMegablastState, MegablastInstigator) == 0x000000, "Member 'MarinerCharacter_BP_OnExitMegablastState::MegablastInstigator' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnGameplayTagListenedForEvent
// 0x000C (0x000C - 0x0000)
struct MarinerCharacter_BP_OnGameplayTagListenedForEvent final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_OnGameplayTagListenedForEvent) == 0x000004, "Wrong alignment on MarinerCharacter_BP_OnGameplayTagListenedForEvent");
static_assert(sizeof(MarinerCharacter_BP_OnGameplayTagListenedForEvent) == 0x00000C, "Wrong size on MarinerCharacter_BP_OnGameplayTagListenedForEvent");
static_assert(offsetof(MarinerCharacter_BP_OnGameplayTagListenedForEvent, GameplayTag) == 0x000000, "Member 'MarinerCharacter_BP_OnGameplayTagListenedForEvent::GameplayTag' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_BP_OnGameplayTagListenedForEvent, Count) == 0x000008, "Member 'MarinerCharacter_BP_OnGameplayTagListenedForEvent::Count' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnHandleFellOutOfWorld
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_BP_OnHandleFellOutOfWorld final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_OnHandleFellOutOfWorld) == 0x000001, "Wrong alignment on MarinerCharacter_BP_OnHandleFellOutOfWorld");
static_assert(sizeof(MarinerCharacter_BP_OnHandleFellOutOfWorld) == 0x000001, "Wrong size on MarinerCharacter_BP_OnHandleFellOutOfWorld");
static_assert(offsetof(MarinerCharacter_BP_OnHandleFellOutOfWorld, ReturnValue) == 0x000000, "Member 'MarinerCharacter_BP_OnHandleFellOutOfWorld::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnKnockedOut
// 0x0018 (0x0018 - 0x0000)
struct MarinerCharacter_BP_OnKnockedOut final
{
public:
	class AMarinerCharacter*                      KnockOutInstigator;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                KnockOutDirection;                                 // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16AB[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_BP_OnKnockedOut) == 0x000008, "Wrong alignment on MarinerCharacter_BP_OnKnockedOut");
static_assert(sizeof(MarinerCharacter_BP_OnKnockedOut) == 0x000018, "Wrong size on MarinerCharacter_BP_OnKnockedOut");
static_assert(offsetof(MarinerCharacter_BP_OnKnockedOut, KnockOutInstigator) == 0x000000, "Member 'MarinerCharacter_BP_OnKnockedOut::KnockOutInstigator' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_BP_OnKnockedOut, KnockOutDirection) == 0x000008, "Member 'MarinerCharacter_BP_OnKnockedOut::KnockOutDirection' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnKnockedOutFromMegablast
// 0x0018 (0x0018 - 0x0000)
struct MarinerCharacter_BP_OnKnockedOutFromMegablast final
{
public:
	class AMarinerCharacter*                      MegablastInstigator;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                KnockOutDirection;                                 // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16AC[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_BP_OnKnockedOutFromMegablast) == 0x000008, "Wrong alignment on MarinerCharacter_BP_OnKnockedOutFromMegablast");
static_assert(sizeof(MarinerCharacter_BP_OnKnockedOutFromMegablast) == 0x000018, "Wrong size on MarinerCharacter_BP_OnKnockedOutFromMegablast");
static_assert(offsetof(MarinerCharacter_BP_OnKnockedOutFromMegablast, MegablastInstigator) == 0x000000, "Member 'MarinerCharacter_BP_OnKnockedOutFromMegablast::MegablastInstigator' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_BP_OnKnockedOutFromMegablast, KnockOutDirection) == 0x000008, "Member 'MarinerCharacter_BP_OnKnockedOutFromMegablast::KnockOutDirection' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnMatchStateChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_BP_OnMatchStateChanged final
{
public:
	class FName                                   State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_OnMatchStateChanged) == 0x000004, "Wrong alignment on MarinerCharacter_BP_OnMatchStateChanged");
static_assert(sizeof(MarinerCharacter_BP_OnMatchStateChanged) == 0x000008, "Wrong size on MarinerCharacter_BP_OnMatchStateChanged");
static_assert(offsetof(MarinerCharacter_BP_OnMatchStateChanged, State) == 0x000000, "Member 'MarinerCharacter_BP_OnMatchStateChanged::State' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnMegablastApplied
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_BP_OnMegablastApplied final
{
public:
	class AMarinerPlayerState*                    MegablastInstigatorPlayerState;                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_OnMegablastApplied) == 0x000008, "Wrong alignment on MarinerCharacter_BP_OnMegablastApplied");
static_assert(sizeof(MarinerCharacter_BP_OnMegablastApplied) == 0x000008, "Wrong size on MarinerCharacter_BP_OnMegablastApplied");
static_assert(offsetof(MarinerCharacter_BP_OnMegablastApplied, MegablastInstigatorPlayerState) == 0x000000, "Member 'MarinerCharacter_BP_OnMegablastApplied::MegablastInstigatorPlayerState' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnMegablastRemoved
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_BP_OnMegablastRemoved final
{
public:
	class AMarinerPlayerState*                    MegablastInstigator;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_OnMegablastRemoved) == 0x000008, "Wrong alignment on MarinerCharacter_BP_OnMegablastRemoved");
static_assert(sizeof(MarinerCharacter_BP_OnMegablastRemoved) == 0x000008, "Wrong size on MarinerCharacter_BP_OnMegablastRemoved");
static_assert(offsetof(MarinerCharacter_BP_OnMegablastRemoved, MegablastInstigator) == 0x000000, "Member 'MarinerCharacter_BP_OnMegablastRemoved::MegablastInstigator' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnMoveAffectingGameplayEffectApplied
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_BP_OnMoveAffectingGameplayEffectApplied final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriorGameplayEffectCount;                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_OnMoveAffectingGameplayEffectApplied) == 0x000008, "Wrong alignment on MarinerCharacter_BP_OnMoveAffectingGameplayEffectApplied");
static_assert(sizeof(MarinerCharacter_BP_OnMoveAffectingGameplayEffectApplied) == 0x000010, "Wrong size on MarinerCharacter_BP_OnMoveAffectingGameplayEffectApplied");
static_assert(offsetof(MarinerCharacter_BP_OnMoveAffectingGameplayEffectApplied, GameplayEffect) == 0x000000, "Member 'MarinerCharacter_BP_OnMoveAffectingGameplayEffectApplied::GameplayEffect' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_BP_OnMoveAffectingGameplayEffectApplied, PriorGameplayEffectCount) == 0x000008, "Member 'MarinerCharacter_BP_OnMoveAffectingGameplayEffectApplied::PriorGameplayEffectCount' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_BP_OnMoveAffectingGameplayEffectApplied, GameplayEffectLevel) == 0x00000C, "Member 'MarinerCharacter_BP_OnMoveAffectingGameplayEffectApplied::GameplayEffectLevel' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnMoveAffectingGameplayEffectRemoved
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_BP_OnMoveAffectingGameplayEffectRemoved final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriorGameplayEffectCount;                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_OnMoveAffectingGameplayEffectRemoved) == 0x000008, "Wrong alignment on MarinerCharacter_BP_OnMoveAffectingGameplayEffectRemoved");
static_assert(sizeof(MarinerCharacter_BP_OnMoveAffectingGameplayEffectRemoved) == 0x000010, "Wrong size on MarinerCharacter_BP_OnMoveAffectingGameplayEffectRemoved");
static_assert(offsetof(MarinerCharacter_BP_OnMoveAffectingGameplayEffectRemoved, GameplayEffect) == 0x000000, "Member 'MarinerCharacter_BP_OnMoveAffectingGameplayEffectRemoved::GameplayEffect' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_BP_OnMoveAffectingGameplayEffectRemoved, PriorGameplayEffectCount) == 0x000008, "Member 'MarinerCharacter_BP_OnMoveAffectingGameplayEffectRemoved::PriorGameplayEffectCount' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_BP_OnMoveAffectingGameplayEffectRemoved, GameplayEffectLevel) == 0x00000C, "Member 'MarinerCharacter_BP_OnMoveAffectingGameplayEffectRemoved::GameplayEffectLevel' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnMoveUpdateDataDefaultsUsed
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_BP_OnMoveUpdateDataDefaultsUsed final
{
public:
	TSubclassOf<class UMarinerMoveUpdateDefaults> DefaultsUsed;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_OnMoveUpdateDataDefaultsUsed) == 0x000008, "Wrong alignment on MarinerCharacter_BP_OnMoveUpdateDataDefaultsUsed");
static_assert(sizeof(MarinerCharacter_BP_OnMoveUpdateDataDefaultsUsed) == 0x000008, "Wrong size on MarinerCharacter_BP_OnMoveUpdateDataDefaultsUsed");
static_assert(offsetof(MarinerCharacter_BP_OnMoveUpdateDataDefaultsUsed, DefaultsUsed) == 0x000000, "Member 'MarinerCharacter_BP_OnMoveUpdateDataDefaultsUsed::DefaultsUsed' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnMoveUpdateRootMotionApplied
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_BP_OnMoveUpdateRootMotionApplied final
{
public:
	class FName                                   RootMotionName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_OnMoveUpdateRootMotionApplied) == 0x000004, "Wrong alignment on MarinerCharacter_BP_OnMoveUpdateRootMotionApplied");
static_assert(sizeof(MarinerCharacter_BP_OnMoveUpdateRootMotionApplied) == 0x000008, "Wrong size on MarinerCharacter_BP_OnMoveUpdateRootMotionApplied");
static_assert(offsetof(MarinerCharacter_BP_OnMoveUpdateRootMotionApplied, RootMotionName) == 0x000000, "Member 'MarinerCharacter_BP_OnMoveUpdateRootMotionApplied::RootMotionName' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OnMoveUpdateRootMotionManuallyRemoved
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_BP_OnMoveUpdateRootMotionManuallyRemoved final
{
public:
	class FName                                   RootMotionName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_OnMoveUpdateRootMotionManuallyRemoved) == 0x000004, "Wrong alignment on MarinerCharacter_BP_OnMoveUpdateRootMotionManuallyRemoved");
static_assert(sizeof(MarinerCharacter_BP_OnMoveUpdateRootMotionManuallyRemoved) == 0x000008, "Wrong size on MarinerCharacter_BP_OnMoveUpdateRootMotionManuallyRemoved");
static_assert(offsetof(MarinerCharacter_BP_OnMoveUpdateRootMotionManuallyRemoved, RootMotionName) == 0x000000, "Member 'MarinerCharacter_BP_OnMoveUpdateRootMotionManuallyRemoved::RootMotionName' has a wrong offset!");

// Function Mariner.MarinerCharacter.ChangePerspective
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_ChangePerspective final
{
public:
	class FName                                   PerspectiveName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ChangePerspective) == 0x000004, "Wrong alignment on MarinerCharacter_ChangePerspective");
static_assert(sizeof(MarinerCharacter_ChangePerspective) == 0x000008, "Wrong size on MarinerCharacter_ChangePerspective");
static_assert(offsetof(MarinerCharacter_ChangePerspective, PerspectiveName) == 0x000000, "Member 'MarinerCharacter_ChangePerspective::PerspectiveName' has a wrong offset!");

// Function Mariner.MarinerCharacter.ClientPrintPlayerLaunchedTrailDetails
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_ClientPrintPlayerLaunchedTrailDetails final
{
public:
	class FString                                 ServerDetailsString;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ClientPrintPlayerLaunchedTrailDetails) == 0x000008, "Wrong alignment on MarinerCharacter_ClientPrintPlayerLaunchedTrailDetails");
static_assert(sizeof(MarinerCharacter_ClientPrintPlayerLaunchedTrailDetails) == 0x000010, "Wrong size on MarinerCharacter_ClientPrintPlayerLaunchedTrailDetails");
static_assert(offsetof(MarinerCharacter_ClientPrintPlayerLaunchedTrailDetails, ServerDetailsString) == 0x000000, "Member 'MarinerCharacter_ClientPrintPlayerLaunchedTrailDetails::ServerDetailsString' has a wrong offset!");

// Function Mariner.MarinerCharacter.ClientSendMoveUpdate
// 0x0090 (0x0090 - 0x0000)
struct MarinerCharacter_ClientSendMoveUpdate final
{
public:
	struct FMarinerMoveUpdate                     NewMoveUpdate;                                     // 0x0000(0x0090)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ClientSendMoveUpdate) == 0x000008, "Wrong alignment on MarinerCharacter_ClientSendMoveUpdate");
static_assert(sizeof(MarinerCharacter_ClientSendMoveUpdate) == 0x000090, "Wrong size on MarinerCharacter_ClientSendMoveUpdate");
static_assert(offsetof(MarinerCharacter_ClientSendMoveUpdate, NewMoveUpdate) == 0x000000, "Member 'MarinerCharacter_ClientSendMoveUpdate::NewMoveUpdate' has a wrong offset!");

// Function Mariner.MarinerCharacter.DebugApplyHitStun
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_DebugApplyHitStun final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_DebugApplyHitStun) == 0x000004, "Wrong alignment on MarinerCharacter_DebugApplyHitStun");
static_assert(sizeof(MarinerCharacter_DebugApplyHitStun) == 0x000004, "Wrong size on MarinerCharacter_DebugApplyHitStun");
static_assert(offsetof(MarinerCharacter_DebugApplyHitStun, Duration) == 0x000000, "Member 'MarinerCharacter_DebugApplyHitStun::Duration' has a wrong offset!");

// Function Mariner.MarinerCharacter.DebugHurtMe
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_DebugHurtMe final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_DebugHurtMe) == 0x000004, "Wrong alignment on MarinerCharacter_DebugHurtMe");
static_assert(sizeof(MarinerCharacter_DebugHurtMe) == 0x000004, "Wrong size on MarinerCharacter_DebugHurtMe");
static_assert(offsetof(MarinerCharacter_DebugHurtMe, Amount) == 0x000000, "Member 'MarinerCharacter_DebugHurtMe::Amount' has a wrong offset!");

// Function Mariner.MarinerCharacter.DebugSetCameraPerspective
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_DebugSetCameraPerspective final
{
public:
	class FName                                   PerspectiveName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_DebugSetCameraPerspective) == 0x000004, "Wrong alignment on MarinerCharacter_DebugSetCameraPerspective");
static_assert(sizeof(MarinerCharacter_DebugSetCameraPerspective) == 0x000008, "Wrong size on MarinerCharacter_DebugSetCameraPerspective");
static_assert(offsetof(MarinerCharacter_DebugSetCameraPerspective, PerspectiveName) == 0x000000, "Member 'MarinerCharacter_DebugSetCameraPerspective::PerspectiveName' has a wrong offset!");

// Function Mariner.MarinerCharacter.DoFootstep
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_DoFootstep final
{
public:
	EMarinerCharacterFoot                         FootThatLanded;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_DoFootstep) == 0x000001, "Wrong alignment on MarinerCharacter_DoFootstep");
static_assert(sizeof(MarinerCharacter_DoFootstep) == 0x000001, "Wrong size on MarinerCharacter_DoFootstep");
static_assert(offsetof(MarinerCharacter_DoFootstep, FootThatLanded) == 0x000000, "Member 'MarinerCharacter_DoFootstep::FootThatLanded' has a wrong offset!");

// Function Mariner.MarinerCharacter.DynamicServerMove
// 0x00B0 (0x00B0 - 0x0000)
struct MarinerCharacter_DynamicServerMove final
{
public:
	struct FMarinerDynamicServerMove              ServerMoveInfo;                                    // 0x0000(0x00B0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_DynamicServerMove) == 0x000008, "Wrong alignment on MarinerCharacter_DynamicServerMove");
static_assert(sizeof(MarinerCharacter_DynamicServerMove) == 0x0000B0, "Wrong size on MarinerCharacter_DynamicServerMove");
static_assert(offsetof(MarinerCharacter_DynamicServerMove, ServerMoveInfo) == 0x000000, "Member 'MarinerCharacter_DynamicServerMove::ServerMoveInfo' has a wrong offset!");

// Function Mariner.MarinerCharacter.DynamicServerMoveDual
// 0x00B0 (0x00B0 - 0x0000)
struct MarinerCharacter_DynamicServerMoveDual final
{
public:
	struct FMarinerDynamicServerMove              ServerMoveInfo;                                    // 0x0000(0x00B0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_DynamicServerMoveDual) == 0x000008, "Wrong alignment on MarinerCharacter_DynamicServerMoveDual");
static_assert(sizeof(MarinerCharacter_DynamicServerMoveDual) == 0x0000B0, "Wrong size on MarinerCharacter_DynamicServerMoveDual");
static_assert(offsetof(MarinerCharacter_DynamicServerMoveDual, ServerMoveInfo) == 0x000000, "Member 'MarinerCharacter_DynamicServerMoveDual::ServerMoveInfo' has a wrong offset!");

// Function Mariner.MarinerCharacter.DynamicServerMoveDualHybridRootMotion
// 0x00B0 (0x00B0 - 0x0000)
struct MarinerCharacter_DynamicServerMoveDualHybridRootMotion final
{
public:
	struct FMarinerDynamicServerMove              ServerMoveInfo;                                    // 0x0000(0x00B0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_DynamicServerMoveDualHybridRootMotion) == 0x000008, "Wrong alignment on MarinerCharacter_DynamicServerMoveDualHybridRootMotion");
static_assert(sizeof(MarinerCharacter_DynamicServerMoveDualHybridRootMotion) == 0x0000B0, "Wrong size on MarinerCharacter_DynamicServerMoveDualHybridRootMotion");
static_assert(offsetof(MarinerCharacter_DynamicServerMoveDualHybridRootMotion, ServerMoveInfo) == 0x000000, "Member 'MarinerCharacter_DynamicServerMoveDualHybridRootMotion::ServerMoveInfo' has a wrong offset!");

// Function Mariner.MarinerCharacter.DynamicServerMoveOld
// 0x00B0 (0x00B0 - 0x0000)
struct MarinerCharacter_DynamicServerMoveOld final
{
public:
	struct FMarinerDynamicServerMove              ServerMoveInfo;                                    // 0x0000(0x00B0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_DynamicServerMoveOld) == 0x000008, "Wrong alignment on MarinerCharacter_DynamicServerMoveOld");
static_assert(sizeof(MarinerCharacter_DynamicServerMoveOld) == 0x0000B0, "Wrong size on MarinerCharacter_DynamicServerMoveOld");
static_assert(offsetof(MarinerCharacter_DynamicServerMoveOld, ServerMoveInfo) == 0x000000, "Member 'MarinerCharacter_DynamicServerMoveOld::ServerMoveInfo' has a wrong offset!");

// Function Mariner.MarinerCharacter.FindPerspective
// 0x00B0 (0x00B0 - 0x0000)
struct MarinerCharacter_FindPerspective final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerCameraPerspective              ReturnValue;                                       // 0x0008(0x00A8)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_FindPerspective) == 0x000008, "Wrong alignment on MarinerCharacter_FindPerspective");
static_assert(sizeof(MarinerCharacter_FindPerspective) == 0x0000B0, "Wrong size on MarinerCharacter_FindPerspective");
static_assert(offsetof(MarinerCharacter_FindPerspective, Key) == 0x000000, "Member 'MarinerCharacter_FindPerspective::Key' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_FindPerspective, ReturnValue) == 0x000008, "Member 'MarinerCharacter_FindPerspective::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.FireByAxis
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_FireByAxis final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_FireByAxis) == 0x000004, "Wrong alignment on MarinerCharacter_FireByAxis");
static_assert(sizeof(MarinerCharacter_FireByAxis) == 0x000004, "Wrong size on MarinerCharacter_FireByAxis");
static_assert(offsetof(MarinerCharacter_FireByAxis, Value) == 0x000000, "Member 'MarinerCharacter_FireByAxis::Value' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetJumpFXParticleSystemComponent
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_GetJumpFXParticleSystemComponent final
{
public:
	int32                                         CurrentJumpCount;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16AD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetJumpFXParticleSystemComponent) == 0x000008, "Wrong alignment on MarinerCharacter_GetJumpFXParticleSystemComponent");
static_assert(sizeof(MarinerCharacter_GetJumpFXParticleSystemComponent) == 0x000010, "Wrong size on MarinerCharacter_GetJumpFXParticleSystemComponent");
static_assert(offsetof(MarinerCharacter_GetJumpFXParticleSystemComponent, CurrentJumpCount) == 0x000000, "Member 'MarinerCharacter_GetJumpFXParticleSystemComponent::CurrentJumpCount' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_GetJumpFXParticleSystemComponent, ReturnValue) == 0x000008, "Member 'MarinerCharacter_GetJumpFXParticleSystemComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetJumpParticlesOffset
// 0x000C (0x000C - 0x0000)
struct MarinerCharacter_GetJumpParticlesOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetJumpParticlesOffset) == 0x000004, "Wrong alignment on MarinerCharacter_GetJumpParticlesOffset");
static_assert(sizeof(MarinerCharacter_GetJumpParticlesOffset) == 0x00000C, "Wrong size on MarinerCharacter_GetJumpParticlesOffset");
static_assert(offsetof(MarinerCharacter_GetJumpParticlesOffset, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetJumpParticlesOffset::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetLastKnockedOutTimeStamp
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_GetLastKnockedOutTimeStamp final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetLastKnockedOutTimeStamp) == 0x000004, "Wrong alignment on MarinerCharacter_GetLastKnockedOutTimeStamp");
static_assert(sizeof(MarinerCharacter_GetLastKnockedOutTimeStamp) == 0x000004, "Wrong size on MarinerCharacter_GetLastKnockedOutTimeStamp");
static_assert(offsetof(MarinerCharacter_GetLastKnockedOutTimeStamp, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetLastKnockedOutTimeStamp::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetMeshesToApplyHitFeedbackFlash
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_GetMeshesToApplyHitFeedbackFlash final
{
public:
	TArray<class UMeshComponent*>                 ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetMeshesToApplyHitFeedbackFlash) == 0x000008, "Wrong alignment on MarinerCharacter_GetMeshesToApplyHitFeedbackFlash");
static_assert(sizeof(MarinerCharacter_GetMeshesToApplyHitFeedbackFlash) == 0x000010, "Wrong size on MarinerCharacter_GetMeshesToApplyHitFeedbackFlash");
static_assert(offsetof(MarinerCharacter_GetMeshesToApplyHitFeedbackFlash, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetMeshesToApplyHitFeedbackFlash::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetSocketLocation
// 0x0018 (0x0018 - 0x0000)
struct MarinerCharacter_GetSocketLocation final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccountForProjection;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16AE[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetSocketLocation) == 0x000004, "Wrong alignment on MarinerCharacter_GetSocketLocation");
static_assert(sizeof(MarinerCharacter_GetSocketLocation) == 0x000018, "Wrong size on MarinerCharacter_GetSocketLocation");
static_assert(offsetof(MarinerCharacter_GetSocketLocation, SocketName) == 0x000000, "Member 'MarinerCharacter_GetSocketLocation::SocketName' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_GetSocketLocation, bAccountForProjection) == 0x000008, "Member 'MarinerCharacter_GetSocketLocation::bAccountForProjection' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_GetSocketLocation, ReturnValue) == 0x00000C, "Member 'MarinerCharacter_GetSocketLocation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IncrementPlayerStat
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_IncrementPlayerStat final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGiveGameplayAward;                                // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16AF[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_IncrementPlayerStat) == 0x000004, "Wrong alignment on MarinerCharacter_IncrementPlayerStat");
static_assert(sizeof(MarinerCharacter_IncrementPlayerStat) == 0x000010, "Wrong size on MarinerCharacter_IncrementPlayerStat");
static_assert(offsetof(MarinerCharacter_IncrementPlayerStat, StatName) == 0x000000, "Member 'MarinerCharacter_IncrementPlayerStat::StatName' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_IncrementPlayerStat, Value) == 0x000008, "Member 'MarinerCharacter_IncrementPlayerStat::Value' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_IncrementPlayerStat, bGiveGameplayAward) == 0x00000C, "Member 'MarinerCharacter_IncrementPlayerStat::bGiveGameplayAward' has a wrong offset!");

// Function Mariner.MarinerCharacter.ListenForGameplayTagChanges
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_ListenForGameplayTagChanges final
{
public:
	struct FGameplayTag                           GameplayTagToListenFor;                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ListenForGameplayTagChanges) == 0x000004, "Wrong alignment on MarinerCharacter_ListenForGameplayTagChanges");
static_assert(sizeof(MarinerCharacter_ListenForGameplayTagChanges) == 0x000008, "Wrong size on MarinerCharacter_ListenForGameplayTagChanges");
static_assert(offsetof(MarinerCharacter_ListenForGameplayTagChanges, GameplayTagToListenFor) == 0x000000, "Member 'MarinerCharacter_ListenForGameplayTagChanges::GameplayTagToListenFor' has a wrong offset!");

// Function Mariner.MarinerCharacter.ListenForGameplayTagChangesInBundle
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_ListenForGameplayTagChangesInBundle final
{
public:
	TSubclassOf<class UMarinerGameplayTagBundle>  GameplayTagBundleToListenFor;                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ListenForGameplayTagChangesInBundle) == 0x000008, "Wrong alignment on MarinerCharacter_ListenForGameplayTagChangesInBundle");
static_assert(sizeof(MarinerCharacter_ListenForGameplayTagChangesInBundle) == 0x000008, "Wrong size on MarinerCharacter_ListenForGameplayTagChangesInBundle");
static_assert(offsetof(MarinerCharacter_ListenForGameplayTagChangesInBundle, GameplayTagBundleToListenFor) == 0x000000, "Member 'MarinerCharacter_ListenForGameplayTagChangesInBundle::GameplayTagBundleToListenFor' has a wrong offset!");

// Function Mariner.MarinerCharacter.ListenForGameplayTagChangesInBundles
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_ListenForGameplayTagChangesInBundles final
{
public:
	TArray<TSubclassOf<class UMarinerGameplayTagBundle>> GameplayTagBundlesToListenFor;                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ListenForGameplayTagChangesInBundles) == 0x000008, "Wrong alignment on MarinerCharacter_ListenForGameplayTagChangesInBundles");
static_assert(sizeof(MarinerCharacter_ListenForGameplayTagChangesInBundles) == 0x000010, "Wrong size on MarinerCharacter_ListenForGameplayTagChangesInBundles");
static_assert(offsetof(MarinerCharacter_ListenForGameplayTagChangesInBundles, GameplayTagBundlesToListenFor) == 0x000000, "Member 'MarinerCharacter_ListenForGameplayTagChangesInBundles::GameplayTagBundlesToListenFor' has a wrong offset!");

// Function Mariner.MarinerCharacter.ListenForGameplayTagChangesInContainer
// 0x0020 (0x0020 - 0x0000)
struct MarinerCharacter_ListenForGameplayTagChangesInContainer final
{
public:
	struct FGameplayTagContainer                  GameplayTagsToListenForInContainer;                // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ListenForGameplayTagChangesInContainer) == 0x000008, "Wrong alignment on MarinerCharacter_ListenForGameplayTagChangesInContainer");
static_assert(sizeof(MarinerCharacter_ListenForGameplayTagChangesInContainer) == 0x000020, "Wrong size on MarinerCharacter_ListenForGameplayTagChangesInContainer");
static_assert(offsetof(MarinerCharacter_ListenForGameplayTagChangesInContainer, GameplayTagsToListenForInContainer) == 0x000000, "Member 'MarinerCharacter_ListenForGameplayTagChangesInContainer::GameplayTagsToListenForInContainer' has a wrong offset!");

// Function Mariner.MarinerCharacter.ListenToAnimInstace
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_ListenToAnimInstace final
{
public:
	class UObject*                                MontageListener;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerCharacterAnimListenerContext          ListenerContext;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_ListenToAnimInstace) == 0x000008, "Wrong alignment on MarinerCharacter_ListenToAnimInstace");
static_assert(sizeof(MarinerCharacter_ListenToAnimInstace) == 0x000010, "Wrong size on MarinerCharacter_ListenToAnimInstace");
static_assert(offsetof(MarinerCharacter_ListenToAnimInstace, MontageListener) == 0x000000, "Member 'MarinerCharacter_ListenToAnimInstace::MontageListener' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_ListenToAnimInstace, ListenerContext) == 0x000008, "Member 'MarinerCharacter_ListenToAnimInstace::ListenerContext' has a wrong offset!");

// Function Mariner.MarinerCharacter.MoveBackward
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_MoveBackward final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_MoveBackward) == 0x000004, "Wrong alignment on MarinerCharacter_MoveBackward");
static_assert(sizeof(MarinerCharacter_MoveBackward) == 0x000004, "Wrong size on MarinerCharacter_MoveBackward");
static_assert(offsetof(MarinerCharacter_MoveBackward, Val) == 0x000000, "Member 'MarinerCharacter_MoveBackward::Val' has a wrong offset!");

// Function Mariner.MarinerCharacter.MoveForward
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_MoveForward final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_MoveForward) == 0x000004, "Wrong alignment on MarinerCharacter_MoveForward");
static_assert(sizeof(MarinerCharacter_MoveForward) == 0x000004, "Wrong size on MarinerCharacter_MoveForward");
static_assert(offsetof(MarinerCharacter_MoveForward, Val) == 0x000000, "Member 'MarinerCharacter_MoveForward::Val' has a wrong offset!");

// Function Mariner.MarinerCharacter.MulticastOnDamageImpulse
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_MulticastOnDamageImpulse final
{
public:
	float                                         ImpulseTaken;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    ImpulseLocation;                                   // 0x0004(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_MulticastOnDamageImpulse) == 0x000004, "Wrong alignment on MarinerCharacter_MulticastOnDamageImpulse");
static_assert(sizeof(MarinerCharacter_MulticastOnDamageImpulse) == 0x000010, "Wrong size on MarinerCharacter_MulticastOnDamageImpulse");
static_assert(offsetof(MarinerCharacter_MulticastOnDamageImpulse, ImpulseTaken) == 0x000000, "Member 'MarinerCharacter_MulticastOnDamageImpulse::ImpulseTaken' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_MulticastOnDamageImpulse, ImpulseLocation) == 0x000004, "Member 'MarinerCharacter_MulticastOnDamageImpulse::ImpulseLocation' has a wrong offset!");

// Function Mariner.MarinerCharacter.OnAbilityGiven
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_OnAbilityGiven final
{
public:
	class UGameplayAbility*                       Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_OnAbilityGiven) == 0x000008, "Wrong alignment on MarinerCharacter_OnAbilityGiven");
static_assert(sizeof(MarinerCharacter_OnAbilityGiven) == 0x000008, "Wrong size on MarinerCharacter_OnAbilityGiven");
static_assert(offsetof(MarinerCharacter_OnAbilityGiven, Ability) == 0x000000, "Member 'MarinerCharacter_OnAbilityGiven::Ability' has a wrong offset!");

// Function Mariner.MarinerCharacter.OnAnyPlayerChangedTeams
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_OnAnyPlayerChangedTeams final
{
public:
	class AMarinerPlayerState*                    PlayerChangedTeam;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_OnAnyPlayerChangedTeams) == 0x000008, "Wrong alignment on MarinerCharacter_OnAnyPlayerChangedTeams");
static_assert(sizeof(MarinerCharacter_OnAnyPlayerChangedTeams) == 0x000008, "Wrong size on MarinerCharacter_OnAnyPlayerChangedTeams");
static_assert(offsetof(MarinerCharacter_OnAnyPlayerChangedTeams, PlayerChangedTeam) == 0x000000, "Member 'MarinerCharacter_OnAnyPlayerChangedTeams::PlayerChangedTeam' has a wrong offset!");

// Function Mariner.MarinerCharacter.OnDebugApplyHitStun
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_OnDebugApplyHitStun final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_OnDebugApplyHitStun) == 0x000004, "Wrong alignment on MarinerCharacter_OnDebugApplyHitStun");
static_assert(sizeof(MarinerCharacter_OnDebugApplyHitStun) == 0x000004, "Wrong size on MarinerCharacter_OnDebugApplyHitStun");
static_assert(offsetof(MarinerCharacter_OnDebugApplyHitStun, Duration) == 0x000000, "Member 'MarinerCharacter_OnDebugApplyHitStun::Duration' has a wrong offset!");

// Function Mariner.MarinerCharacter.OnDebugApplyMegablast
// 0x000C (0x000C - 0x0000)
struct MarinerCharacter_OnDebugApplyMegablast final
{
public:
	struct FVector                                MegablastDirection;                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_OnDebugApplyMegablast) == 0x000004, "Wrong alignment on MarinerCharacter_OnDebugApplyMegablast");
static_assert(sizeof(MarinerCharacter_OnDebugApplyMegablast) == 0x00000C, "Wrong size on MarinerCharacter_OnDebugApplyMegablast");
static_assert(offsetof(MarinerCharacter_OnDebugApplyMegablast, MegablastDirection) == 0x000000, "Member 'MarinerCharacter_OnDebugApplyMegablast::MegablastDirection' has a wrong offset!");

// Function Mariner.MarinerCharacter.OnDebugHurtMe
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_OnDebugHurtMe final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_OnDebugHurtMe) == 0x000004, "Wrong alignment on MarinerCharacter_OnDebugHurtMe");
static_assert(sizeof(MarinerCharacter_OnDebugHurtMe) == 0x000004, "Wrong size on MarinerCharacter_OnDebugHurtMe");
static_assert(offsetof(MarinerCharacter_OnDebugHurtMe, Amount) == 0x000000, "Member 'MarinerCharacter_OnDebugHurtMe::Amount' has a wrong offset!");

// Function Mariner.MarinerCharacter.OnGameplayTagListenedForEvent
// 0x000C (0x000C - 0x0000)
struct MarinerCharacter_OnGameplayTagListenedForEvent final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_OnGameplayTagListenedForEvent) == 0x000004, "Wrong alignment on MarinerCharacter_OnGameplayTagListenedForEvent");
static_assert(sizeof(MarinerCharacter_OnGameplayTagListenedForEvent) == 0x00000C, "Wrong size on MarinerCharacter_OnGameplayTagListenedForEvent");
static_assert(offsetof(MarinerCharacter_OnGameplayTagListenedForEvent, GameplayTag) == 0x000000, "Member 'MarinerCharacter_OnGameplayTagListenedForEvent::GameplayTag' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_OnGameplayTagListenedForEvent, Count) == 0x000008, "Member 'MarinerCharacter_OnGameplayTagListenedForEvent::Count' has a wrong offset!");

// Function Mariner.MarinerCharacter.OnLaunchEvent
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_OnLaunchEvent final
{
public:
	struct FVector                                PostLaunchVelocity;                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLaunchContainedHostileImpulse;                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLaunchWasMegablast;                               // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B1[0x2];                                     // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_OnLaunchEvent) == 0x000004, "Wrong alignment on MarinerCharacter_OnLaunchEvent");
static_assert(sizeof(MarinerCharacter_OnLaunchEvent) == 0x000010, "Wrong size on MarinerCharacter_OnLaunchEvent");
static_assert(offsetof(MarinerCharacter_OnLaunchEvent, PostLaunchVelocity) == 0x000000, "Member 'MarinerCharacter_OnLaunchEvent::PostLaunchVelocity' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_OnLaunchEvent, bLaunchContainedHostileImpulse) == 0x00000C, "Member 'MarinerCharacter_OnLaunchEvent::bLaunchContainedHostileImpulse' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_OnLaunchEvent, bLaunchWasMegablast) == 0x00000D, "Member 'MarinerCharacter_OnLaunchEvent::bLaunchWasMegablast' has a wrong offset!");

// Function Mariner.MarinerCharacter.OnMontageBlendingOutStarted
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_OnMontageBlendingOutStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_OnMontageBlendingOutStarted) == 0x000008, "Wrong alignment on MarinerCharacter_OnMontageBlendingOutStarted");
static_assert(sizeof(MarinerCharacter_OnMontageBlendingOutStarted) == 0x000010, "Wrong size on MarinerCharacter_OnMontageBlendingOutStarted");
static_assert(offsetof(MarinerCharacter_OnMontageBlendingOutStarted, Montage) == 0x000000, "Member 'MarinerCharacter_OnMontageBlendingOutStarted::Montage' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_OnMontageBlendingOutStarted, bInterrupted) == 0x000008, "Member 'MarinerCharacter_OnMontageBlendingOutStarted::bInterrupted' has a wrong offset!");

// Function Mariner.MarinerCharacter.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_OnMontageEnded) == 0x000008, "Wrong alignment on MarinerCharacter_OnMontageEnded");
static_assert(sizeof(MarinerCharacter_OnMontageEnded) == 0x000010, "Wrong size on MarinerCharacter_OnMontageEnded");
static_assert(offsetof(MarinerCharacter_OnMontageEnded, Montage) == 0x000000, "Member 'MarinerCharacter_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_OnMontageEnded, bInterrupted) == 0x000008, "Member 'MarinerCharacter_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function Mariner.MarinerCharacter.OnMontageStarted
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_OnMontageStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_OnMontageStarted) == 0x000008, "Wrong alignment on MarinerCharacter_OnMontageStarted");
static_assert(sizeof(MarinerCharacter_OnMontageStarted) == 0x000008, "Wrong size on MarinerCharacter_OnMontageStarted");
static_assert(offsetof(MarinerCharacter_OnMontageStarted, Montage) == 0x000000, "Member 'MarinerCharacter_OnMontageStarted::Montage' has a wrong offset!");

// Function Mariner.MarinerCharacter.OnRep_ArenaReturnState
// 0x0070 (0x0070 - 0x0000)
struct MarinerCharacter_OnRep_ArenaReturnState final
{
public:
	struct FArenaReturnState                      PreviousArenaReturnState;                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_OnRep_ArenaReturnState) == 0x000008, "Wrong alignment on MarinerCharacter_OnRep_ArenaReturnState");
static_assert(sizeof(MarinerCharacter_OnRep_ArenaReturnState) == 0x000070, "Wrong size on MarinerCharacter_OnRep_ArenaReturnState");
static_assert(offsetof(MarinerCharacter_OnRep_ArenaReturnState, PreviousArenaReturnState) == 0x000000, "Member 'MarinerCharacter_OnRep_ArenaReturnState::PreviousArenaReturnState' has a wrong offset!");

// Function Mariner.MarinerCharacter.OnRep_CurrentWeapon
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_OnRep_CurrentWeapon final
{
public:
	class AMarinerWeapon*                         LastWeapon;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_OnRep_CurrentWeapon) == 0x000008, "Wrong alignment on MarinerCharacter_OnRep_CurrentWeapon");
static_assert(sizeof(MarinerCharacter_OnRep_CurrentWeapon) == 0x000008, "Wrong size on MarinerCharacter_OnRep_CurrentWeapon");
static_assert(offsetof(MarinerCharacter_OnRep_CurrentWeapon, LastWeapon) == 0x000000, "Member 'MarinerCharacter_OnRep_CurrentWeapon::LastWeapon' has a wrong offset!");

// Function Mariner.MarinerCharacter.PlayMarinerCharacterMontage
// 0x0028 (0x0028 - 0x0000)
struct MarinerCharacter_PlayMarinerCharacterMontage final
{
public:
	const class UMarinerCharacterMontage*         CharacterMontage;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSectionName;                                  // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B4[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                OptionalMontageListener;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B5[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_PlayMarinerCharacterMontage) == 0x000008, "Wrong alignment on MarinerCharacter_PlayMarinerCharacterMontage");
static_assert(sizeof(MarinerCharacter_PlayMarinerCharacterMontage) == 0x000028, "Wrong size on MarinerCharacter_PlayMarinerCharacterMontage");
static_assert(offsetof(MarinerCharacter_PlayMarinerCharacterMontage, CharacterMontage) == 0x000000, "Member 'MarinerCharacter_PlayMarinerCharacterMontage::CharacterMontage' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_PlayMarinerCharacterMontage, PlayRate) == 0x000008, "Member 'MarinerCharacter_PlayMarinerCharacterMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_PlayMarinerCharacterMontage, StartSectionName) == 0x00000C, "Member 'MarinerCharacter_PlayMarinerCharacterMontage::StartSectionName' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_PlayMarinerCharacterMontage, OptionalMontageListener) == 0x000018, "Member 'MarinerCharacter_PlayMarinerCharacterMontage::OptionalMontageListener' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_PlayMarinerCharacterMontage, ReturnValue) == 0x000020, "Member 'MarinerCharacter_PlayMarinerCharacterMontage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.ResetFlashHitFeedback
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_ResetFlashHitFeedback final
{
public:
	bool                                          bRestartAfterStopped;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ResetFlashHitFeedback) == 0x000001, "Wrong alignment on MarinerCharacter_ResetFlashHitFeedback");
static_assert(sizeof(MarinerCharacter_ResetFlashHitFeedback) == 0x000001, "Wrong size on MarinerCharacter_ResetFlashHitFeedback");
static_assert(offsetof(MarinerCharacter_ResetFlashHitFeedback, bRestartAfterStopped) == 0x000000, "Member 'MarinerCharacter_ResetFlashHitFeedback::bRestartAfterStopped' has a wrong offset!");

// Function Mariner.MarinerCharacter.ServerEchoSuppressionEffect
// 0x0018 (0x0018 - 0x0000)
struct MarinerCharacter_ServerEchoSuppressionEffect final
{
public:
	struct FPredictionKey                         SuppressionEffectPredictionKey;                    // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ServerEchoSuppressionEffect) == 0x000008, "Wrong alignment on MarinerCharacter_ServerEchoSuppressionEffect");
static_assert(sizeof(MarinerCharacter_ServerEchoSuppressionEffect) == 0x000018, "Wrong size on MarinerCharacter_ServerEchoSuppressionEffect");
static_assert(offsetof(MarinerCharacter_ServerEchoSuppressionEffect, SuppressionEffectPredictionKey) == 0x000000, "Member 'MarinerCharacter_ServerEchoSuppressionEffect::SuppressionEffectPredictionKey' has a wrong offset!");

// Function Mariner.MarinerCharacter.ServerEquipWeapon
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_ServerEquipWeapon final
{
public:
	class AMarinerWeapon*                         NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ServerEquipWeapon) == 0x000008, "Wrong alignment on MarinerCharacter_ServerEquipWeapon");
static_assert(sizeof(MarinerCharacter_ServerEquipWeapon) == 0x000008, "Wrong size on MarinerCharacter_ServerEquipWeapon");
static_assert(offsetof(MarinerCharacter_ServerEquipWeapon, NewWeapon) == 0x000000, "Member 'MarinerCharacter_ServerEquipWeapon::NewWeapon' has a wrong offset!");

// Function Mariner.MarinerCharacter.ServerSetAimAssistState
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_ServerSetAimAssistState final
{
public:
	EMarinerAimAssistState                        AimAssistState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ServerSetAimAssistState) == 0x000001, "Wrong alignment on MarinerCharacter_ServerSetAimAssistState");
static_assert(sizeof(MarinerCharacter_ServerSetAimAssistState) == 0x000001, "Wrong size on MarinerCharacter_ServerSetAimAssistState");
static_assert(offsetof(MarinerCharacter_ServerSetAimAssistState, AimAssistState) == 0x000000, "Member 'MarinerCharacter_ServerSetAimAssistState::AimAssistState' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetAbilityInputSuppressionByTag
// 0x0002 (0x0002 - 0x0000)
struct MarinerCharacter_SetAbilityInputSuppressionByTag final
{
public:
	bool                                          bSuppress;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetAbilityInputSuppressionByTag) == 0x000001, "Wrong alignment on MarinerCharacter_SetAbilityInputSuppressionByTag");
static_assert(sizeof(MarinerCharacter_SetAbilityInputSuppressionByTag) == 0x000002, "Wrong size on MarinerCharacter_SetAbilityInputSuppressionByTag");
static_assert(offsetof(MarinerCharacter_SetAbilityInputSuppressionByTag, bSuppress) == 0x000000, "Member 'MarinerCharacter_SetAbilityInputSuppressionByTag::bSuppress' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_SetAbilityInputSuppressionByTag, ReturnValue) == 0x000001, "Member 'MarinerCharacter_SetAbilityInputSuppressionByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetAllItemPickupSuppressionByTag
// 0x0002 (0x0002 - 0x0000)
struct MarinerCharacter_SetAllItemPickupSuppressionByTag final
{
public:
	bool                                          bSuppress;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetAllItemPickupSuppressionByTag) == 0x000001, "Wrong alignment on MarinerCharacter_SetAllItemPickupSuppressionByTag");
static_assert(sizeof(MarinerCharacter_SetAllItemPickupSuppressionByTag) == 0x000002, "Wrong size on MarinerCharacter_SetAllItemPickupSuppressionByTag");
static_assert(offsetof(MarinerCharacter_SetAllItemPickupSuppressionByTag, bSuppress) == 0x000000, "Member 'MarinerCharacter_SetAllItemPickupSuppressionByTag::bSuppress' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_SetAllItemPickupSuppressionByTag, ReturnValue) == 0x000001, "Member 'MarinerCharacter_SetAllItemPickupSuppressionByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetAllowAltFireSpecialAbilitySwap
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_SetAllowAltFireSpecialAbilitySwap final
{
public:
	bool                                          InBool;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetAllowAltFireSpecialAbilitySwap) == 0x000001, "Wrong alignment on MarinerCharacter_SetAllowAltFireSpecialAbilitySwap");
static_assert(sizeof(MarinerCharacter_SetAllowAltFireSpecialAbilitySwap) == 0x000001, "Wrong size on MarinerCharacter_SetAllowAltFireSpecialAbilitySwap");
static_assert(offsetof(MarinerCharacter_SetAllowAltFireSpecialAbilitySwap, InBool) == 0x000000, "Member 'MarinerCharacter_SetAllowAltFireSpecialAbilitySwap::InBool' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetAllSuppressionTags
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_SetAllSuppressionTags final
{
public:
	bool                                          bIsSuppressed;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetAllSuppressionTags) == 0x000001, "Wrong alignment on MarinerCharacter_SetAllSuppressionTags");
static_assert(sizeof(MarinerCharacter_SetAllSuppressionTags) == 0x000001, "Wrong size on MarinerCharacter_SetAllSuppressionTags");
static_assert(offsetof(MarinerCharacter_SetAllSuppressionTags, bIsSuppressed) == 0x000000, "Member 'MarinerCharacter_SetAllSuppressionTags::bIsSuppressed' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetFixedFootIK
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_SetFixedFootIK final
{
public:
	bool                                          bFixed;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetFixedFootIK) == 0x000001, "Wrong alignment on MarinerCharacter_SetFixedFootIK");
static_assert(sizeof(MarinerCharacter_SetFixedFootIK) == 0x000001, "Wrong size on MarinerCharacter_SetFixedFootIK");
static_assert(offsetof(MarinerCharacter_SetFixedFootIK, bFixed) == 0x000000, "Member 'MarinerCharacter_SetFixedFootIK::bFixed' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetGameplayEffect
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_SetGameplayEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B6[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetGameplayEffect) == 0x000008, "Wrong alignment on MarinerCharacter_SetGameplayEffect");
static_assert(sizeof(MarinerCharacter_SetGameplayEffect) == 0x000010, "Wrong size on MarinerCharacter_SetGameplayEffect");
static_assert(offsetof(MarinerCharacter_SetGameplayEffect, GameplayEffect) == 0x000000, "Member 'MarinerCharacter_SetGameplayEffect::GameplayEffect' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_SetGameplayEffect, bApply) == 0x000008, "Member 'MarinerCharacter_SetGameplayEffect::bApply' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_SetGameplayEffect, Level) == 0x00000C, "Member 'MarinerCharacter_SetGameplayEffect::Level' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetInputFilter
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_SetInputFilter final
{
public:
	class UCurveVector*                           InCurve;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetInputFilter) == 0x000008, "Wrong alignment on MarinerCharacter_SetInputFilter");
static_assert(sizeof(MarinerCharacter_SetInputFilter) == 0x000008, "Wrong size on MarinerCharacter_SetInputFilter");
static_assert(offsetof(MarinerCharacter_SetInputFilter, InCurve) == 0x000000, "Member 'MarinerCharacter_SetInputFilter::InCurve' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetItemUseSuppressionByTag
// 0x0002 (0x0002 - 0x0000)
struct MarinerCharacter_SetItemUseSuppressionByTag final
{
public:
	bool                                          bSuppress;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetItemUseSuppressionByTag) == 0x000001, "Wrong alignment on MarinerCharacter_SetItemUseSuppressionByTag");
static_assert(sizeof(MarinerCharacter_SetItemUseSuppressionByTag) == 0x000002, "Wrong size on MarinerCharacter_SetItemUseSuppressionByTag");
static_assert(offsetof(MarinerCharacter_SetItemUseSuppressionByTag, bSuppress) == 0x000000, "Member 'MarinerCharacter_SetItemUseSuppressionByTag::bSuppress' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_SetItemUseSuppressionByTag, ReturnValue) == 0x000001, "Member 'MarinerCharacter_SetItemUseSuppressionByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetJumpSuppressionByTag
// 0x0002 (0x0002 - 0x0000)
struct MarinerCharacter_SetJumpSuppressionByTag final
{
public:
	bool                                          bSuppress;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetJumpSuppressionByTag) == 0x000001, "Wrong alignment on MarinerCharacter_SetJumpSuppressionByTag");
static_assert(sizeof(MarinerCharacter_SetJumpSuppressionByTag) == 0x000002, "Wrong size on MarinerCharacter_SetJumpSuppressionByTag");
static_assert(offsetof(MarinerCharacter_SetJumpSuppressionByTag, bSuppress) == 0x000000, "Member 'MarinerCharacter_SetJumpSuppressionByTag::bSuppress' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_SetJumpSuppressionByTag, ReturnValue) == 0x000001, "Member 'MarinerCharacter_SetJumpSuppressionByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetLookInputSuppressionByTag
// 0x0002 (0x0002 - 0x0000)
struct MarinerCharacter_SetLookInputSuppressionByTag final
{
public:
	bool                                          bSuppress;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetLookInputSuppressionByTag) == 0x000001, "Wrong alignment on MarinerCharacter_SetLookInputSuppressionByTag");
static_assert(sizeof(MarinerCharacter_SetLookInputSuppressionByTag) == 0x000002, "Wrong size on MarinerCharacter_SetLookInputSuppressionByTag");
static_assert(offsetof(MarinerCharacter_SetLookInputSuppressionByTag, bSuppress) == 0x000000, "Member 'MarinerCharacter_SetLookInputSuppressionByTag::bSuppress' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_SetLookInputSuppressionByTag, ReturnValue) == 0x000001, "Member 'MarinerCharacter_SetLookInputSuppressionByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetMovementInputSuppressionByTag
// 0x0002 (0x0002 - 0x0000)
struct MarinerCharacter_SetMovementInputSuppressionByTag final
{
public:
	bool                                          bSuppress;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetMovementInputSuppressionByTag) == 0x000001, "Wrong alignment on MarinerCharacter_SetMovementInputSuppressionByTag");
static_assert(sizeof(MarinerCharacter_SetMovementInputSuppressionByTag) == 0x000002, "Wrong size on MarinerCharacter_SetMovementInputSuppressionByTag");
static_assert(offsetof(MarinerCharacter_SetMovementInputSuppressionByTag, bSuppress) == 0x000000, "Member 'MarinerCharacter_SetMovementInputSuppressionByTag::bSuppress' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_SetMovementInputSuppressionByTag, ReturnValue) == 0x000001, "Member 'MarinerCharacter_SetMovementInputSuppressionByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetNonPriorityItemPickupSuppressionByTag
// 0x0002 (0x0002 - 0x0000)
struct MarinerCharacter_SetNonPriorityItemPickupSuppressionByTag final
{
public:
	bool                                          bSuppress;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetNonPriorityItemPickupSuppressionByTag) == 0x000001, "Wrong alignment on MarinerCharacter_SetNonPriorityItemPickupSuppressionByTag");
static_assert(sizeof(MarinerCharacter_SetNonPriorityItemPickupSuppressionByTag) == 0x000002, "Wrong size on MarinerCharacter_SetNonPriorityItemPickupSuppressionByTag");
static_assert(offsetof(MarinerCharacter_SetNonPriorityItemPickupSuppressionByTag, bSuppress) == 0x000000, "Member 'MarinerCharacter_SetNonPriorityItemPickupSuppressionByTag::bSuppress' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_SetNonPriorityItemPickupSuppressionByTag, ReturnValue) == 0x000001, "Member 'MarinerCharacter_SetNonPriorityItemPickupSuppressionByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetPriorityItemPickupSuppressionByTag
// 0x0002 (0x0002 - 0x0000)
struct MarinerCharacter_SetPriorityItemPickupSuppressionByTag final
{
public:
	bool                                          bSuppress;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetPriorityItemPickupSuppressionByTag) == 0x000001, "Wrong alignment on MarinerCharacter_SetPriorityItemPickupSuppressionByTag");
static_assert(sizeof(MarinerCharacter_SetPriorityItemPickupSuppressionByTag) == 0x000002, "Wrong size on MarinerCharacter_SetPriorityItemPickupSuppressionByTag");
static_assert(offsetof(MarinerCharacter_SetPriorityItemPickupSuppressionByTag, bSuppress) == 0x000000, "Member 'MarinerCharacter_SetPriorityItemPickupSuppressionByTag::bSuppress' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_SetPriorityItemPickupSuppressionByTag, ReturnValue) == 0x000001, "Member 'MarinerCharacter_SetPriorityItemPickupSuppressionByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetRuntimeStickAccelerationEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_SetRuntimeStickAccelerationEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetRuntimeStickAccelerationEnabled) == 0x000001, "Wrong alignment on MarinerCharacter_SetRuntimeStickAccelerationEnabled");
static_assert(sizeof(MarinerCharacter_SetRuntimeStickAccelerationEnabled) == 0x000001, "Wrong size on MarinerCharacter_SetRuntimeStickAccelerationEnabled");
static_assert(offsetof(MarinerCharacter_SetRuntimeStickAccelerationEnabled, bEnabled) == 0x000000, "Member 'MarinerCharacter_SetRuntimeStickAccelerationEnabled::bEnabled' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetSensitivityFromIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_SetSensitivityFromIndex final
{
public:
	int32                                         SpecificationIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetSensitivityFromIndex) == 0x000004, "Wrong alignment on MarinerCharacter_SetSensitivityFromIndex");
static_assert(sizeof(MarinerCharacter_SetSensitivityFromIndex) == 0x000004, "Wrong size on MarinerCharacter_SetSensitivityFromIndex");
static_assert(offsetof(MarinerCharacter_SetSensitivityFromIndex, SpecificationIndex) == 0x000000, "Member 'MarinerCharacter_SetSensitivityFromIndex::SpecificationIndex' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetSuppressionTags
// 0x0028 (0x0028 - 0x0000)
struct MarinerCharacter_SetSuppressionTags final
{
public:
	struct FGameplayTagContainer                  SuppressionTagsToSet;                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsSuppressed;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B7[0x6];                                     // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_SetSuppressionTags) == 0x000008, "Wrong alignment on MarinerCharacter_SetSuppressionTags");
static_assert(sizeof(MarinerCharacter_SetSuppressionTags) == 0x000028, "Wrong size on MarinerCharacter_SetSuppressionTags");
static_assert(offsetof(MarinerCharacter_SetSuppressionTags, SuppressionTagsToSet) == 0x000000, "Member 'MarinerCharacter_SetSuppressionTags::SuppressionTagsToSet' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_SetSuppressionTags, bIsSuppressed) == 0x000020, "Member 'MarinerCharacter_SetSuppressionTags::bIsSuppressed' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_SetSuppressionTags, ReturnValue) == 0x000021, "Member 'MarinerCharacter_SetSuppressionTags::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_SetTeamIndex final
{
public:
	int32                                         InTeamIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetTeamIndex) == 0x000004, "Wrong alignment on MarinerCharacter_SetTeamIndex");
static_assert(sizeof(MarinerCharacter_SetTeamIndex) == 0x000004, "Wrong size on MarinerCharacter_SetTeamIndex");
static_assert(offsetof(MarinerCharacter_SetTeamIndex, InTeamIndex) == 0x000000, "Member 'MarinerCharacter_SetTeamIndex::InTeamIndex' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetWASDSuppressionByTag
// 0x0002 (0x0002 - 0x0000)
struct MarinerCharacter_SetWASDSuppressionByTag final
{
public:
	bool                                          bSuppress;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetWASDSuppressionByTag) == 0x000001, "Wrong alignment on MarinerCharacter_SetWASDSuppressionByTag");
static_assert(sizeof(MarinerCharacter_SetWASDSuppressionByTag) == 0x000002, "Wrong size on MarinerCharacter_SetWASDSuppressionByTag");
static_assert(offsetof(MarinerCharacter_SetWASDSuppressionByTag, bSuppress) == 0x000000, "Member 'MarinerCharacter_SetWASDSuppressionByTag::bSuppress' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_SetWASDSuppressionByTag, ReturnValue) == 0x000001, "Member 'MarinerCharacter_SetWASDSuppressionByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.SetWeaponInputSuppressionByTag
// 0x0002 (0x0002 - 0x0000)
struct MarinerCharacter_SetWeaponInputSuppressionByTag final
{
public:
	bool                                          bSuppress;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_SetWeaponInputSuppressionByTag) == 0x000001, "Wrong alignment on MarinerCharacter_SetWeaponInputSuppressionByTag");
static_assert(sizeof(MarinerCharacter_SetWeaponInputSuppressionByTag) == 0x000002, "Wrong size on MarinerCharacter_SetWeaponInputSuppressionByTag");
static_assert(offsetof(MarinerCharacter_SetWeaponInputSuppressionByTag, bSuppress) == 0x000000, "Member 'MarinerCharacter_SetWeaponInputSuppressionByTag::bSuppress' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_SetWeaponInputSuppressionByTag, ReturnValue) == 0x000001, "Member 'MarinerCharacter_SetWeaponInputSuppressionByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.StartJumpLoop
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_StartJumpLoop final
{
public:
	int32                                         InJumpLoopFrameTarget;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_StartJumpLoop) == 0x000004, "Wrong alignment on MarinerCharacter_StartJumpLoop");
static_assert(sizeof(MarinerCharacter_StartJumpLoop) == 0x000004, "Wrong size on MarinerCharacter_StartJumpLoop");
static_assert(offsetof(MarinerCharacter_StartJumpLoop, InJumpLoopFrameTarget) == 0x000000, "Member 'MarinerCharacter_StartJumpLoop::InJumpLoopFrameTarget' has a wrong offset!");

// Function Mariner.MarinerCharacter.StopListeningToAnimInstance
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_StopListeningToAnimInstance final
{
public:
	class UObject*                                MontageListener;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerCharacterAnimListenerContext          ListenerContext;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_StopListeningToAnimInstance) == 0x000008, "Wrong alignment on MarinerCharacter_StopListeningToAnimInstance");
static_assert(sizeof(MarinerCharacter_StopListeningToAnimInstance) == 0x000010, "Wrong size on MarinerCharacter_StopListeningToAnimInstance");
static_assert(offsetof(MarinerCharacter_StopListeningToAnimInstance, MontageListener) == 0x000000, "Member 'MarinerCharacter_StopListeningToAnimInstance::MontageListener' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_StopListeningToAnimInstance, ListenerContext) == 0x000008, "Member 'MarinerCharacter_StopListeningToAnimInstance::ListenerContext' has a wrong offset!");

// Function Mariner.MarinerCharacter.StopMarinerCharacterMontage
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_StopMarinerCharacterMontage final
{
public:
	float                                         BlendOutTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B9[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UMarinerCharacterMontage*         CharacterMontage;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_StopMarinerCharacterMontage) == 0x000008, "Wrong alignment on MarinerCharacter_StopMarinerCharacterMontage");
static_assert(sizeof(MarinerCharacter_StopMarinerCharacterMontage) == 0x000010, "Wrong size on MarinerCharacter_StopMarinerCharacterMontage");
static_assert(offsetof(MarinerCharacter_StopMarinerCharacterMontage, BlendOutTime) == 0x000000, "Member 'MarinerCharacter_StopMarinerCharacterMontage::BlendOutTime' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_StopMarinerCharacterMontage, CharacterMontage) == 0x000008, "Member 'MarinerCharacter_StopMarinerCharacterMontage::CharacterMontage' has a wrong offset!");

// Function Mariner.MarinerCharacter.TransitionCamera
// 0x00B0 (0x00B0 - 0x0000)
struct MarinerCharacter_TransitionCamera final
{
public:
	class FName                                   PerspectiveName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerCameraPerspective              Perspective;                                       // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_TransitionCamera) == 0x000008, "Wrong alignment on MarinerCharacter_TransitionCamera");
static_assert(sizeof(MarinerCharacter_TransitionCamera) == 0x0000B0, "Wrong size on MarinerCharacter_TransitionCamera");
static_assert(offsetof(MarinerCharacter_TransitionCamera, PerspectiveName) == 0x000000, "Member 'MarinerCharacter_TransitionCamera::PerspectiveName' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_TransitionCamera, Perspective) == 0x000008, "Member 'MarinerCharacter_TransitionCamera::Perspective' has a wrong offset!");

// Function Mariner.MarinerCharacter.TryInitiateFlashHitFeedback
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_TryInitiateFlashHitFeedback final
{
public:
	class APawn*                                  HitInstigator;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16BA[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_TryInitiateFlashHitFeedback) == 0x000008, "Wrong alignment on MarinerCharacter_TryInitiateFlashHitFeedback");
static_assert(sizeof(MarinerCharacter_TryInitiateFlashHitFeedback) == 0x000010, "Wrong size on MarinerCharacter_TryInitiateFlashHitFeedback");
static_assert(offsetof(MarinerCharacter_TryInitiateFlashHitFeedback, HitInstigator) == 0x000000, "Member 'MarinerCharacter_TryInitiateFlashHitFeedback::HitInstigator' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_TryInitiateFlashHitFeedback, ReturnValue) == 0x000008, "Member 'MarinerCharacter_TryInitiateFlashHitFeedback::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.UpdateOtherCharacterVisibilitiesByReality
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_UpdateOtherCharacterVisibilitiesByReality final
{
public:
	class AMarinerBasePlayerController*           LocalController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_UpdateOtherCharacterVisibilitiesByReality) == 0x000008, "Wrong alignment on MarinerCharacter_UpdateOtherCharacterVisibilitiesByReality");
static_assert(sizeof(MarinerCharacter_UpdateOtherCharacterVisibilitiesByReality) == 0x000008, "Wrong size on MarinerCharacter_UpdateOtherCharacterVisibilitiesByReality");
static_assert(offsetof(MarinerCharacter_UpdateOtherCharacterVisibilitiesByReality, LocalController) == 0x000000, "Member 'MarinerCharacter_UpdateOtherCharacterVisibilitiesByReality::LocalController' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_GetDamageableComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_BP_GetDamageableComponent final
{
public:
	class UMarinerDamageableComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_GetDamageableComponent) == 0x000008, "Wrong alignment on MarinerCharacter_BP_GetDamageableComponent");
static_assert(sizeof(MarinerCharacter_BP_GetDamageableComponent) == 0x000008, "Wrong size on MarinerCharacter_BP_GetDamageableComponent");
static_assert(offsetof(MarinerCharacter_BP_GetDamageableComponent, ReturnValue) == 0x000000, "Member 'MarinerCharacter_BP_GetDamageableComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.BP_OverrideCanUseViewCatchCapsule
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_BP_OverrideCanUseViewCatchCapsule final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_BP_OverrideCanUseViewCatchCapsule) == 0x000001, "Wrong alignment on MarinerCharacter_BP_OverrideCanUseViewCatchCapsule");
static_assert(sizeof(MarinerCharacter_BP_OverrideCanUseViewCatchCapsule) == 0x000001, "Wrong size on MarinerCharacter_BP_OverrideCanUseViewCatchCapsule");
static_assert(offsetof(MarinerCharacter_BP_OverrideCanUseViewCatchCapsule, ReturnValue) == 0x000000, "Member 'MarinerCharacter_BP_OverrideCanUseViewCatchCapsule::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.ClearAllSuppressionTags
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_ClearAllSuppressionTags final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ClearAllSuppressionTags) == 0x000001, "Wrong alignment on MarinerCharacter_ClearAllSuppressionTags");
static_assert(sizeof(MarinerCharacter_ClearAllSuppressionTags) == 0x000001, "Wrong size on MarinerCharacter_ClearAllSuppressionTags");
static_assert(offsetof(MarinerCharacter_ClearAllSuppressionTags, ReturnValue) == 0x000000, "Member 'MarinerCharacter_ClearAllSuppressionTags::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.ClearSuppressionTags
// 0x0028 (0x0028 - 0x0000)
struct MarinerCharacter_ClearSuppressionTags final
{
public:
	struct FGameplayTagContainer                  SuppressionTagsToClear;                            // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16BB[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_ClearSuppressionTags) == 0x000008, "Wrong alignment on MarinerCharacter_ClearSuppressionTags");
static_assert(sizeof(MarinerCharacter_ClearSuppressionTags) == 0x000028, "Wrong size on MarinerCharacter_ClearSuppressionTags");
static_assert(offsetof(MarinerCharacter_ClearSuppressionTags, SuppressionTagsToClear) == 0x000000, "Member 'MarinerCharacter_ClearSuppressionTags::SuppressionTagsToClear' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_ClearSuppressionTags, ReturnValue) == 0x000020, "Member 'MarinerCharacter_ClearSuppressionTags::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetActiveCapsuleComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetActiveCapsuleComponent final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetActiveCapsuleComponent) == 0x000008, "Wrong alignment on MarinerCharacter_GetActiveCapsuleComponent");
static_assert(sizeof(MarinerCharacter_GetActiveCapsuleComponent) == 0x000008, "Wrong size on MarinerCharacter_GetActiveCapsuleComponent");
static_assert(offsetof(MarinerCharacter_GetActiveCapsuleComponent, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetActiveCapsuleComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetAimOffsets
// 0x000C (0x000C - 0x0000)
struct MarinerCharacter_GetAimOffsets final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetAimOffsets) == 0x000004, "Wrong alignment on MarinerCharacter_GetAimOffsets");
static_assert(sizeof(MarinerCharacter_GetAimOffsets) == 0x00000C, "Wrong size on MarinerCharacter_GetAimOffsets");
static_assert(offsetof(MarinerCharacter_GetAimOffsets, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetAimOffsets::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetAimTarget
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetAimTarget final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetAimTarget) == 0x000008, "Wrong alignment on MarinerCharacter_GetAimTarget");
static_assert(sizeof(MarinerCharacter_GetAimTarget) == 0x000008, "Wrong size on MarinerCharacter_GetAimTarget");
static_assert(offsetof(MarinerCharacter_GetAimTarget, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetAimTarget::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetAllNonMesh1PSceneComponents
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_GetAllNonMesh1PSceneComponents final
{
public:
	TArray<class USceneComponent*>                OutNonMesh1PSceneComponents;                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetAllNonMesh1PSceneComponents) == 0x000008, "Wrong alignment on MarinerCharacter_GetAllNonMesh1PSceneComponents");
static_assert(sizeof(MarinerCharacter_GetAllNonMesh1PSceneComponents) == 0x000010, "Wrong size on MarinerCharacter_GetAllNonMesh1PSceneComponents");
static_assert(offsetof(MarinerCharacter_GetAllNonMesh1PSceneComponents, OutNonMesh1PSceneComponents) == 0x000000, "Member 'MarinerCharacter_GetAllNonMesh1PSceneComponents::OutNonMesh1PSceneComponents' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetAllowAltFireSpecialAbilitySwap
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_GetAllowAltFireSpecialAbilitySwap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetAllowAltFireSpecialAbilitySwap) == 0x000001, "Wrong alignment on MarinerCharacter_GetAllowAltFireSpecialAbilitySwap");
static_assert(sizeof(MarinerCharacter_GetAllowAltFireSpecialAbilitySwap) == 0x000001, "Wrong size on MarinerCharacter_GetAllowAltFireSpecialAbilitySwap");
static_assert(offsetof(MarinerCharacter_GetAllowAltFireSpecialAbilitySwap, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetAllowAltFireSpecialAbilitySwap::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetArenaReturnState
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_GetArenaReturnState final
{
public:
	EMarinerArenaReturnState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetArenaReturnState) == 0x000001, "Wrong alignment on MarinerCharacter_GetArenaReturnState");
static_assert(sizeof(MarinerCharacter_GetArenaReturnState) == 0x000001, "Wrong size on MarinerCharacter_GetArenaReturnState");
static_assert(offsetof(MarinerCharacter_GetArenaReturnState, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetArenaReturnState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetBaseTurnSpeed
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetBaseTurnSpeed final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetBaseTurnSpeed) == 0x000004, "Wrong alignment on MarinerCharacter_GetBaseTurnSpeed");
static_assert(sizeof(MarinerCharacter_GetBaseTurnSpeed) == 0x000008, "Wrong size on MarinerCharacter_GetBaseTurnSpeed");
static_assert(offsetof(MarinerCharacter_GetBaseTurnSpeed, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetBaseTurnSpeed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetCharacterKnockoutAchievement
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_GetCharacterKnockoutAchievement final
{
public:
	EMarinerAchievement                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetCharacterKnockoutAchievement) == 0x000001, "Wrong alignment on MarinerCharacter_GetCharacterKnockoutAchievement");
static_assert(sizeof(MarinerCharacter_GetCharacterKnockoutAchievement) == 0x000001, "Wrong size on MarinerCharacter_GetCharacterKnockoutAchievement");
static_assert(offsetof(MarinerCharacter_GetCharacterKnockoutAchievement, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetCharacterKnockoutAchievement::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetCharacterWinsAchievement
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_GetCharacterWinsAchievement final
{
public:
	EMarinerAchievement                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetCharacterWinsAchievement) == 0x000001, "Wrong alignment on MarinerCharacter_GetCharacterWinsAchievement");
static_assert(sizeof(MarinerCharacter_GetCharacterWinsAchievement) == 0x000001, "Wrong size on MarinerCharacter_GetCharacterWinsAchievement");
static_assert(offsetof(MarinerCharacter_GetCharacterWinsAchievement, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetCharacterWinsAchievement::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetControllerInputMagnitudeFilter
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetControllerInputMagnitudeFilter final
{
public:
	class UCurveFloat*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetControllerInputMagnitudeFilter) == 0x000008, "Wrong alignment on MarinerCharacter_GetControllerInputMagnitudeFilter");
static_assert(sizeof(MarinerCharacter_GetControllerInputMagnitudeFilter) == 0x000008, "Wrong size on MarinerCharacter_GetControllerInputMagnitudeFilter");
static_assert(offsetof(MarinerCharacter_GetControllerInputMagnitudeFilter, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetControllerInputMagnitudeFilter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetControllerInputPlatformFilter
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetControllerInputPlatformFilter final
{
public:
	class UCurveVector*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetControllerInputPlatformFilter) == 0x000008, "Wrong alignment on MarinerCharacter_GetControllerInputPlatformFilter");
static_assert(sizeof(MarinerCharacter_GetControllerInputPlatformFilter) == 0x000008, "Wrong size on MarinerCharacter_GetControllerInputPlatformFilter");
static_assert(offsetof(MarinerCharacter_GetControllerInputPlatformFilter, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetControllerInputPlatformFilter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetCurrentArenaReturnState
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_GetCurrentArenaReturnState final
{
public:
	EMarinerArenaReturnState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetCurrentArenaReturnState) == 0x000001, "Wrong alignment on MarinerCharacter_GetCurrentArenaReturnState");
static_assert(sizeof(MarinerCharacter_GetCurrentArenaReturnState) == 0x000001, "Wrong size on MarinerCharacter_GetCurrentArenaReturnState");
static_assert(offsetof(MarinerCharacter_GetCurrentArenaReturnState, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetCurrentArenaReturnState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetCurrentArenaReturnTarget
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetCurrentArenaReturnTarget final
{
public:
	class AMarinerArenaReturnTarget*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetCurrentArenaReturnTarget) == 0x000008, "Wrong alignment on MarinerCharacter_GetCurrentArenaReturnTarget");
static_assert(sizeof(MarinerCharacter_GetCurrentArenaReturnTarget) == 0x000008, "Wrong size on MarinerCharacter_GetCurrentArenaReturnTarget");
static_assert(offsetof(MarinerCharacter_GetCurrentArenaReturnTarget, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetCurrentArenaReturnTarget::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetCurrentInputs
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetCurrentInputs final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetCurrentInputs) == 0x000004, "Wrong alignment on MarinerCharacter_GetCurrentInputs");
static_assert(sizeof(MarinerCharacter_GetCurrentInputs) == 0x000008, "Wrong size on MarinerCharacter_GetCurrentInputs");
static_assert(offsetof(MarinerCharacter_GetCurrentInputs, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetCurrentInputs::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetCurrentJumpCount
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_GetCurrentJumpCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetCurrentJumpCount) == 0x000004, "Wrong alignment on MarinerCharacter_GetCurrentJumpCount");
static_assert(sizeof(MarinerCharacter_GetCurrentJumpCount) == 0x000004, "Wrong size on MarinerCharacter_GetCurrentJumpCount");
static_assert(offsetof(MarinerCharacter_GetCurrentJumpCount, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetCurrentJumpCount::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetCurrentSkinCollection
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetCurrentSkinCollection final
{
public:
	class UMarinerSkinCollectionDataAsset*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetCurrentSkinCollection) == 0x000008, "Wrong alignment on MarinerCharacter_GetCurrentSkinCollection");
static_assert(sizeof(MarinerCharacter_GetCurrentSkinCollection) == 0x000008, "Wrong size on MarinerCharacter_GetCurrentSkinCollection");
static_assert(offsetof(MarinerCharacter_GetCurrentSkinCollection, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetCurrentSkinCollection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetCurrentVelocity
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetCurrentVelocity final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetCurrentVelocity) == 0x000004, "Wrong alignment on MarinerCharacter_GetCurrentVelocity");
static_assert(sizeof(MarinerCharacter_GetCurrentVelocity) == 0x000008, "Wrong size on MarinerCharacter_GetCurrentVelocity");
static_assert(offsetof(MarinerCharacter_GetCurrentVelocity, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetCurrentVelocity::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetDamageDealtMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_GetDamageDealtMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetDamageDealtMultiplier) == 0x000004, "Wrong alignment on MarinerCharacter_GetDamageDealtMultiplier");
static_assert(sizeof(MarinerCharacter_GetDamageDealtMultiplier) == 0x000004, "Wrong size on MarinerCharacter_GetDamageDealtMultiplier");
static_assert(offsetof(MarinerCharacter_GetDamageDealtMultiplier, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetDamageDealtMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetDamageInstigatorMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_GetDamageInstigatorMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetDamageInstigatorMultiplier) == 0x000004, "Wrong alignment on MarinerCharacter_GetDamageInstigatorMultiplier");
static_assert(sizeof(MarinerCharacter_GetDamageInstigatorMultiplier) == 0x000004, "Wrong size on MarinerCharacter_GetDamageInstigatorMultiplier");
static_assert(offsetof(MarinerCharacter_GetDamageInstigatorMultiplier, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetDamageInstigatorMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetDeadzonedInput
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetDeadzonedInput final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetDeadzonedInput) == 0x000004, "Wrong alignment on MarinerCharacter_GetDeadzonedInput");
static_assert(sizeof(MarinerCharacter_GetDeadzonedInput) == 0x000008, "Wrong size on MarinerCharacter_GetDeadzonedInput");
static_assert(offsetof(MarinerCharacter_GetDeadzonedInput, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetDeadzonedInput::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetDefaultSkinCollection
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetDefaultSkinCollection final
{
public:
	class UMarinerSkinCollectionDataAsset*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetDefaultSkinCollection) == 0x000008, "Wrong alignment on MarinerCharacter_GetDefaultSkinCollection");
static_assert(sizeof(MarinerCharacter_GetDefaultSkinCollection) == 0x000008, "Wrong size on MarinerCharacter_GetDefaultSkinCollection");
static_assert(offsetof(MarinerCharacter_GetDefaultSkinCollection, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetDefaultSkinCollection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetFallbackArenaReturnData
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetFallbackArenaReturnData final
{
public:
	struct FMarinerCharacterFallbackReturnData    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetFallbackArenaReturnData) == 0x000004, "Wrong alignment on MarinerCharacter_GetFallbackArenaReturnData");
static_assert(sizeof(MarinerCharacter_GetFallbackArenaReturnData) == 0x000008, "Wrong size on MarinerCharacter_GetFallbackArenaReturnData");
static_assert(offsetof(MarinerCharacter_GetFallbackArenaReturnData, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetFallbackArenaReturnData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetFireRateMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_GetFireRateMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetFireRateMultiplier) == 0x000004, "Wrong alignment on MarinerCharacter_GetFireRateMultiplier");
static_assert(sizeof(MarinerCharacter_GetFireRateMultiplier) == 0x000004, "Wrong size on MarinerCharacter_GetFireRateMultiplier");
static_assert(offsetof(MarinerCharacter_GetFireRateMultiplier, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetFireRateMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetHomingComponentOverride
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetHomingComponentOverride final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetHomingComponentOverride) == 0x000008, "Wrong alignment on MarinerCharacter_GetHomingComponentOverride");
static_assert(sizeof(MarinerCharacter_GetHomingComponentOverride) == 0x000008, "Wrong size on MarinerCharacter_GetHomingComponentOverride");
static_assert(offsetof(MarinerCharacter_GetHomingComponentOverride, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetHomingComponentOverride::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetHomingLocation
// 0x000C (0x000C - 0x0000)
struct MarinerCharacter_GetHomingLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetHomingLocation) == 0x000004, "Wrong alignment on MarinerCharacter_GetHomingLocation");
static_assert(sizeof(MarinerCharacter_GetHomingLocation) == 0x00000C, "Wrong size on MarinerCharacter_GetHomingLocation");
static_assert(offsetof(MarinerCharacter_GetHomingLocation, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetHomingLocation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetHomingTarget
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetHomingTarget final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetHomingTarget) == 0x000008, "Wrong alignment on MarinerCharacter_GetHomingTarget");
static_assert(sizeof(MarinerCharacter_GetHomingTarget) == 0x000008, "Wrong size on MarinerCharacter_GetHomingTarget");
static_assert(offsetof(MarinerCharacter_GetHomingTarget, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetHomingTarget::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetImpulseDealtMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_GetImpulseDealtMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetImpulseDealtMultiplier) == 0x000004, "Wrong alignment on MarinerCharacter_GetImpulseDealtMultiplier");
static_assert(sizeof(MarinerCharacter_GetImpulseDealtMultiplier) == 0x000004, "Wrong size on MarinerCharacter_GetImpulseDealtMultiplier");
static_assert(offsetof(MarinerCharacter_GetImpulseDealtMultiplier, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetImpulseDealtMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetImpulseInstigatorMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_GetImpulseInstigatorMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetImpulseInstigatorMultiplier) == 0x000004, "Wrong alignment on MarinerCharacter_GetImpulseInstigatorMultiplier");
static_assert(sizeof(MarinerCharacter_GetImpulseInstigatorMultiplier) == 0x000004, "Wrong size on MarinerCharacter_GetImpulseInstigatorMultiplier");
static_assert(offsetof(MarinerCharacter_GetImpulseInstigatorMultiplier, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetImpulseInstigatorMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetInputBuffer
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetInputBuffer final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetInputBuffer) == 0x000004, "Wrong alignment on MarinerCharacter_GetInputBuffer");
static_assert(sizeof(MarinerCharacter_GetInputBuffer) == 0x000008, "Wrong size on MarinerCharacter_GetInputBuffer");
static_assert(offsetof(MarinerCharacter_GetInputBuffer, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetInputBuffer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetItemInteractionComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetItemInteractionComponent final
{
public:
	class UMarinerItemInteractionComponent*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetItemInteractionComponent) == 0x000008, "Wrong alignment on MarinerCharacter_GetItemInteractionComponent");
static_assert(sizeof(MarinerCharacter_GetItemInteractionComponent) == 0x000008, "Wrong size on MarinerCharacter_GetItemInteractionComponent");
static_assert(offsetof(MarinerCharacter_GetItemInteractionComponent, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetItemInteractionComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetMarinerMovement
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetMarinerMovement final
{
public:
	class UMarinerCharacterMovement*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetMarinerMovement) == 0x000008, "Wrong alignment on MarinerCharacter_GetMarinerMovement");
static_assert(sizeof(MarinerCharacter_GetMarinerMovement) == 0x000008, "Wrong size on MarinerCharacter_GetMarinerMovement");
static_assert(offsetof(MarinerCharacter_GetMarinerMovement, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetMarinerMovement::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetMatSwapManagerComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetMatSwapManagerComponent final
{
public:
	class UMarinerMaterialsSwapManagerComponent*  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetMatSwapManagerComponent) == 0x000008, "Wrong alignment on MarinerCharacter_GetMatSwapManagerComponent");
static_assert(sizeof(MarinerCharacter_GetMatSwapManagerComponent) == 0x000008, "Wrong size on MarinerCharacter_GetMatSwapManagerComponent");
static_assert(offsetof(MarinerCharacter_GetMatSwapManagerComponent, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetMatSwapManagerComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetMegablastSpeed
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_GetMegablastSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetMegablastSpeed) == 0x000004, "Wrong alignment on MarinerCharacter_GetMegablastSpeed");
static_assert(sizeof(MarinerCharacter_GetMegablastSpeed) == 0x000004, "Wrong size on MarinerCharacter_GetMegablastSpeed");
static_assert(offsetof(MarinerCharacter_GetMegablastSpeed, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetMegablastSpeed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetOriginalCapsuleHalfHeight
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_GetOriginalCapsuleHalfHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetOriginalCapsuleHalfHeight) == 0x000004, "Wrong alignment on MarinerCharacter_GetOriginalCapsuleHalfHeight");
static_assert(sizeof(MarinerCharacter_GetOriginalCapsuleHalfHeight) == 0x000004, "Wrong size on MarinerCharacter_GetOriginalCapsuleHalfHeight");
static_assert(offsetof(MarinerCharacter_GetOriginalCapsuleHalfHeight, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetOriginalCapsuleHalfHeight::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetOriginalCapsuleRadius
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_GetOriginalCapsuleRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetOriginalCapsuleRadius) == 0x000004, "Wrong alignment on MarinerCharacter_GetOriginalCapsuleRadius");
static_assert(sizeof(MarinerCharacter_GetOriginalCapsuleRadius) == 0x000004, "Wrong size on MarinerCharacter_GetOriginalCapsuleRadius");
static_assert(offsetof(MarinerCharacter_GetOriginalCapsuleRadius, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetOriginalCapsuleRadius::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetPawnMesh
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetPawnMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetPawnMesh) == 0x000008, "Wrong alignment on MarinerCharacter_GetPawnMesh");
static_assert(sizeof(MarinerCharacter_GetPawnMesh) == 0x000008, "Wrong size on MarinerCharacter_GetPawnMesh");
static_assert(offsetof(MarinerCharacter_GetPawnMesh, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetPawnMesh::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetPeggedInputVelocityCurve
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetPeggedInputVelocityCurve final
{
public:
	class UCurveFloat*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetPeggedInputVelocityCurve) == 0x000008, "Wrong alignment on MarinerCharacter_GetPeggedInputVelocityCurve");
static_assert(sizeof(MarinerCharacter_GetPeggedInputVelocityCurve) == 0x000008, "Wrong size on MarinerCharacter_GetPeggedInputVelocityCurve");
static_assert(offsetof(MarinerCharacter_GetPeggedInputVelocityCurve, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetPeggedInputVelocityCurve::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetProjectileSpawnLocation
// 0x000C (0x000C - 0x0000)
struct MarinerCharacter_GetProjectileSpawnLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetProjectileSpawnLocation) == 0x000004, "Wrong alignment on MarinerCharacter_GetProjectileSpawnLocation");
static_assert(sizeof(MarinerCharacter_GetProjectileSpawnLocation) == 0x00000C, "Wrong size on MarinerCharacter_GetProjectileSpawnLocation");
static_assert(offsetof(MarinerCharacter_GetProjectileSpawnLocation, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetProjectileSpawnLocation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetRuntimeStickAccelerationEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_GetRuntimeStickAccelerationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetRuntimeStickAccelerationEnabled) == 0x000001, "Wrong alignment on MarinerCharacter_GetRuntimeStickAccelerationEnabled");
static_assert(sizeof(MarinerCharacter_GetRuntimeStickAccelerationEnabled) == 0x000001, "Wrong size on MarinerCharacter_GetRuntimeStickAccelerationEnabled");
static_assert(offsetof(MarinerCharacter_GetRuntimeStickAccelerationEnabled, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetRuntimeStickAccelerationEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetSensitivityTimeWhilePegged
// 0x000C (0x000C - 0x0000)
struct MarinerCharacter_GetSensitivityTimeWhilePegged final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetSensitivityTimeWhilePegged) == 0x000004, "Wrong alignment on MarinerCharacter_GetSensitivityTimeWhilePegged");
static_assert(sizeof(MarinerCharacter_GetSensitivityTimeWhilePegged) == 0x00000C, "Wrong size on MarinerCharacter_GetSensitivityTimeWhilePegged");
static_assert(offsetof(MarinerCharacter_GetSensitivityTimeWhilePegged, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetSensitivityTimeWhilePegged::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetSplinePathComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetSplinePathComponent final
{
public:
	class UMarinerSplineComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetSplinePathComponent) == 0x000008, "Wrong alignment on MarinerCharacter_GetSplinePathComponent");
static_assert(sizeof(MarinerCharacter_GetSplinePathComponent) == 0x000008, "Wrong size on MarinerCharacter_GetSplinePathComponent");
static_assert(offsetof(MarinerCharacter_GetSplinePathComponent, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetSplinePathComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_GetTeamIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetTeamIndex) == 0x000004, "Wrong alignment on MarinerCharacter_GetTeamIndex");
static_assert(sizeof(MarinerCharacter_GetTeamIndex) == 0x000004, "Wrong size on MarinerCharacter_GetTeamIndex");
static_assert(offsetof(MarinerCharacter_GetTeamIndex, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetTeamIndex::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetThirdPersonCamera
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetThirdPersonCamera final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetThirdPersonCamera) == 0x000008, "Wrong alignment on MarinerCharacter_GetThirdPersonCamera");
static_assert(sizeof(MarinerCharacter_GetThirdPersonCamera) == 0x000008, "Wrong size on MarinerCharacter_GetThirdPersonCamera");
static_assert(offsetof(MarinerCharacter_GetThirdPersonCamera, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetThirdPersonCamera::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetThirdPersonCameraArm
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetThirdPersonCameraArm final
{
public:
	class UMarinerSpringArmComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetThirdPersonCameraArm) == 0x000008, "Wrong alignment on MarinerCharacter_GetThirdPersonCameraArm");
static_assert(sizeof(MarinerCharacter_GetThirdPersonCameraArm) == 0x000008, "Wrong size on MarinerCharacter_GetThirdPersonCameraArm");
static_assert(offsetof(MarinerCharacter_GetThirdPersonCameraArm, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetThirdPersonCameraArm::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetTimePeggedUntilAtTopEndTurnSpeed
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacter_GetTimePeggedUntilAtTopEndTurnSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetTimePeggedUntilAtTopEndTurnSpeed) == 0x000004, "Wrong alignment on MarinerCharacter_GetTimePeggedUntilAtTopEndTurnSpeed");
static_assert(sizeof(MarinerCharacter_GetTimePeggedUntilAtTopEndTurnSpeed) == 0x000004, "Wrong size on MarinerCharacter_GetTimePeggedUntilAtTopEndTurnSpeed");
static_assert(offsetof(MarinerCharacter_GetTimePeggedUntilAtTopEndTurnSpeed, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetTimePeggedUntilAtTopEndTurnSpeed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetTopEndTurnSpeed
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetTopEndTurnSpeed final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetTopEndTurnSpeed) == 0x000004, "Wrong alignment on MarinerCharacter_GetTopEndTurnSpeed");
static_assert(sizeof(MarinerCharacter_GetTopEndTurnSpeed) == 0x000008, "Wrong size on MarinerCharacter_GetTopEndTurnSpeed");
static_assert(offsetof(MarinerCharacter_GetTopEndTurnSpeed, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetTopEndTurnSpeed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetWeapon
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetWeapon final
{
public:
	class AMarinerWeapon*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetWeapon) == 0x000008, "Wrong alignment on MarinerCharacter_GetWeapon");
static_assert(sizeof(MarinerCharacter_GetWeapon) == 0x000008, "Wrong size on MarinerCharacter_GetWeapon");
static_assert(offsetof(MarinerCharacter_GetWeapon, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetWeapon::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetWeaponAttributes
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetWeaponAttributes final
{
public:
	class UMarinerWeaponAttributes*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetWeaponAttributes) == 0x000008, "Wrong alignment on MarinerCharacter_GetWeaponAttributes");
static_assert(sizeof(MarinerCharacter_GetWeaponAttributes) == 0x000008, "Wrong size on MarinerCharacter_GetWeaponAttributes");
static_assert(offsetof(MarinerCharacter_GetWeaponAttributes, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetWeaponAttributes::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetWeaponMesh
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetWeaponMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetWeaponMesh) == 0x000008, "Wrong alignment on MarinerCharacter_GetWeaponMesh");
static_assert(sizeof(MarinerCharacter_GetWeaponMesh) == 0x000008, "Wrong size on MarinerCharacter_GetWeaponMesh");
static_assert(offsetof(MarinerCharacter_GetWeaponMesh, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetWeaponMesh::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetWeaponMesh1P
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetWeaponMesh1P final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetWeaponMesh1P) == 0x000008, "Wrong alignment on MarinerCharacter_GetWeaponMesh1P");
static_assert(sizeof(MarinerCharacter_GetWeaponMesh1P) == 0x000008, "Wrong size on MarinerCharacter_GetWeaponMesh1P");
static_assert(offsetof(MarinerCharacter_GetWeaponMesh1P, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetWeaponMesh1P::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.GetWeaponMesh3P
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacter_GetWeaponMesh3P final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_GetWeaponMesh3P) == 0x000008, "Wrong alignment on MarinerCharacter_GetWeaponMesh3P");
static_assert(sizeof(MarinerCharacter_GetWeaponMesh3P) == 0x000008, "Wrong size on MarinerCharacter_GetWeaponMesh3P");
static_assert(offsetof(MarinerCharacter_GetWeaponMesh3P, ReturnValue) == 0x000000, "Member 'MarinerCharacter_GetWeaponMesh3P::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.HasAnyOfGivenSuppressionTags
// 0x0028 (0x0028 - 0x0000)
struct MarinerCharacter_HasAnyOfGivenSuppressionTags final
{
public:
	struct FGameplayTagContainer                  SuppressionTagsToCheck;                            // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16BC[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_HasAnyOfGivenSuppressionTags) == 0x000008, "Wrong alignment on MarinerCharacter_HasAnyOfGivenSuppressionTags");
static_assert(sizeof(MarinerCharacter_HasAnyOfGivenSuppressionTags) == 0x000028, "Wrong size on MarinerCharacter_HasAnyOfGivenSuppressionTags");
static_assert(offsetof(MarinerCharacter_HasAnyOfGivenSuppressionTags, SuppressionTagsToCheck) == 0x000000, "Member 'MarinerCharacter_HasAnyOfGivenSuppressionTags::SuppressionTagsToCheck' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_HasAnyOfGivenSuppressionTags, ReturnValue) == 0x000020, "Member 'MarinerCharacter_HasAnyOfGivenSuppressionTags::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.HasPriorityItem
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_HasPriorityItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_HasPriorityItem) == 0x000001, "Wrong alignment on MarinerCharacter_HasPriorityItem");
static_assert(sizeof(MarinerCharacter_HasPriorityItem) == 0x000001, "Wrong size on MarinerCharacter_HasPriorityItem");
static_assert(offsetof(MarinerCharacter_HasPriorityItem, ReturnValue) == 0x000000, "Member 'MarinerCharacter_HasPriorityItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.HasValidHomingTarget
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_HasValidHomingTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_HasValidHomingTarget) == 0x000001, "Wrong alignment on MarinerCharacter_HasValidHomingTarget");
static_assert(sizeof(MarinerCharacter_HasValidHomingTarget) == 0x000001, "Wrong size on MarinerCharacter_HasValidHomingTarget");
static_assert(offsetof(MarinerCharacter_HasValidHomingTarget, ReturnValue) == 0x000000, "Member 'MarinerCharacter_HasValidHomingTarget::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsAbilityInputSuppressedByTag
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsAbilityInputSuppressedByTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsAbilityInputSuppressedByTag) == 0x000001, "Wrong alignment on MarinerCharacter_IsAbilityInputSuppressedByTag");
static_assert(sizeof(MarinerCharacter_IsAbilityInputSuppressedByTag) == 0x000001, "Wrong size on MarinerCharacter_IsAbilityInputSuppressedByTag");
static_assert(offsetof(MarinerCharacter_IsAbilityInputSuppressedByTag, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsAbilityInputSuppressedByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsAimMagnetismActive
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsAimMagnetismActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsAimMagnetismActive) == 0x000001, "Wrong alignment on MarinerCharacter_IsAimMagnetismActive");
static_assert(sizeof(MarinerCharacter_IsAimMagnetismActive) == 0x000001, "Wrong size on MarinerCharacter_IsAimMagnetismActive");
static_assert(offsetof(MarinerCharacter_IsAimMagnetismActive, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsAimMagnetismActive::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsAllItemPickupSuppressedByTag
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsAllItemPickupSuppressedByTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsAllItemPickupSuppressedByTag) == 0x000001, "Wrong alignment on MarinerCharacter_IsAllItemPickupSuppressedByTag");
static_assert(sizeof(MarinerCharacter_IsAllItemPickupSuppressedByTag) == 0x000001, "Wrong size on MarinerCharacter_IsAllItemPickupSuppressedByTag");
static_assert(offsetof(MarinerCharacter_IsAllItemPickupSuppressedByTag, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsAllItemPickupSuppressedByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsCameraTransitioning
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsCameraTransitioning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsCameraTransitioning) == 0x000001, "Wrong alignment on MarinerCharacter_IsCameraTransitioning");
static_assert(sizeof(MarinerCharacter_IsCameraTransitioning) == 0x000001, "Wrong size on MarinerCharacter_IsCameraTransitioning");
static_assert(offsetof(MarinerCharacter_IsCameraTransitioning, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsCameraTransitioning::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsCharacterStateAdditiveJumping
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsCharacterStateAdditiveJumping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsCharacterStateAdditiveJumping) == 0x000001, "Wrong alignment on MarinerCharacter_IsCharacterStateAdditiveJumping");
static_assert(sizeof(MarinerCharacter_IsCharacterStateAdditiveJumping) == 0x000001, "Wrong size on MarinerCharacter_IsCharacterStateAdditiveJumping");
static_assert(offsetof(MarinerCharacter_IsCharacterStateAdditiveJumping, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsCharacterStateAdditiveJumping::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsFiring
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsFiring final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsFiring) == 0x000001, "Wrong alignment on MarinerCharacter_IsFiring");
static_assert(sizeof(MarinerCharacter_IsFiring) == 0x000001, "Wrong size on MarinerCharacter_IsFiring");
static_assert(offsetof(MarinerCharacter_IsFiring, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsFiring::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsFirstPerson final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsFirstPerson) == 0x000001, "Wrong alignment on MarinerCharacter_IsFirstPerson");
static_assert(sizeof(MarinerCharacter_IsFirstPerson) == 0x000001, "Wrong size on MarinerCharacter_IsFirstPerson");
static_assert(offsetof(MarinerCharacter_IsFirstPerson, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsFirstPerson::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsIndependentCharacter
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsIndependentCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsIndependentCharacter) == 0x000001, "Wrong alignment on MarinerCharacter_IsIndependentCharacter");
static_assert(sizeof(MarinerCharacter_IsIndependentCharacter) == 0x000001, "Wrong size on MarinerCharacter_IsIndependentCharacter");
static_assert(offsetof(MarinerCharacter_IsIndependentCharacter, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsIndependentCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsItemUseSuppressedByTag
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsItemUseSuppressedByTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsItemUseSuppressedByTag) == 0x000001, "Wrong alignment on MarinerCharacter_IsItemUseSuppressedByTag");
static_assert(sizeof(MarinerCharacter_IsItemUseSuppressedByTag) == 0x000001, "Wrong size on MarinerCharacter_IsItemUseSuppressedByTag");
static_assert(offsetof(MarinerCharacter_IsItemUseSuppressedByTag, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsItemUseSuppressedByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsLookInputSuppressedByTag
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsLookInputSuppressedByTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsLookInputSuppressedByTag) == 0x000001, "Wrong alignment on MarinerCharacter_IsLookInputSuppressedByTag");
static_assert(sizeof(MarinerCharacter_IsLookInputSuppressedByTag) == 0x000001, "Wrong size on MarinerCharacter_IsLookInputSuppressedByTag");
static_assert(offsetof(MarinerCharacter_IsLookInputSuppressedByTag, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsLookInputSuppressedByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsMegablasted
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsMegablasted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsMegablasted) == 0x000001, "Wrong alignment on MarinerCharacter_IsMegablasted");
static_assert(sizeof(MarinerCharacter_IsMegablasted) == 0x000001, "Wrong size on MarinerCharacter_IsMegablasted");
static_assert(offsetof(MarinerCharacter_IsMegablasted, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsMegablasted::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsMovementInputSuppressedByTag
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsMovementInputSuppressedByTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsMovementInputSuppressedByTag) == 0x000001, "Wrong alignment on MarinerCharacter_IsMovementInputSuppressedByTag");
static_assert(sizeof(MarinerCharacter_IsMovementInputSuppressedByTag) == 0x000001, "Wrong size on MarinerCharacter_IsMovementInputSuppressedByTag");
static_assert(offsetof(MarinerCharacter_IsMovementInputSuppressedByTag, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsMovementInputSuppressedByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsNonPriorityItemPickupSuppressedByTag
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsNonPriorityItemPickupSuppressedByTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsNonPriorityItemPickupSuppressedByTag) == 0x000001, "Wrong alignment on MarinerCharacter_IsNonPriorityItemPickupSuppressedByTag");
static_assert(sizeof(MarinerCharacter_IsNonPriorityItemPickupSuppressedByTag) == 0x000001, "Wrong size on MarinerCharacter_IsNonPriorityItemPickupSuppressedByTag");
static_assert(offsetof(MarinerCharacter_IsNonPriorityItemPickupSuppressedByTag, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsNonPriorityItemPickupSuppressedByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsPlayingMarinerCharacterMontage
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_IsPlayingMarinerCharacterMontage final
{
public:
	const class UMarinerCharacterMontage*         CharacterMontage;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16BD[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_IsPlayingMarinerCharacterMontage) == 0x000008, "Wrong alignment on MarinerCharacter_IsPlayingMarinerCharacterMontage");
static_assert(sizeof(MarinerCharacter_IsPlayingMarinerCharacterMontage) == 0x000010, "Wrong size on MarinerCharacter_IsPlayingMarinerCharacterMontage");
static_assert(offsetof(MarinerCharacter_IsPlayingMarinerCharacterMontage, CharacterMontage) == 0x000000, "Member 'MarinerCharacter_IsPlayingMarinerCharacterMontage::CharacterMontage' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_IsPlayingMarinerCharacterMontage, ReturnValue) == 0x000008, "Member 'MarinerCharacter_IsPlayingMarinerCharacterMontage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsPlayingMontage
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacter_IsPlayingMontage final
{
public:
	const class UAnimMontage*                     Montage;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16BE[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacter_IsPlayingMontage) == 0x000008, "Wrong alignment on MarinerCharacter_IsPlayingMontage");
static_assert(sizeof(MarinerCharacter_IsPlayingMontage) == 0x000010, "Wrong size on MarinerCharacter_IsPlayingMontage");
static_assert(offsetof(MarinerCharacter_IsPlayingMontage, Montage) == 0x000000, "Member 'MarinerCharacter_IsPlayingMontage::Montage' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_IsPlayingMontage, ReturnValue) == 0x000008, "Member 'MarinerCharacter_IsPlayingMontage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsPriorityItemPickupSuppressedByTag
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsPriorityItemPickupSuppressedByTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsPriorityItemPickupSuppressedByTag) == 0x000001, "Wrong alignment on MarinerCharacter_IsPriorityItemPickupSuppressedByTag");
static_assert(sizeof(MarinerCharacter_IsPriorityItemPickupSuppressedByTag) == 0x000001, "Wrong size on MarinerCharacter_IsPriorityItemPickupSuppressedByTag");
static_assert(offsetof(MarinerCharacter_IsPriorityItemPickupSuppressedByTag, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsPriorityItemPickupSuppressedByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsReticleRed
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsReticleRed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsReticleRed) == 0x000001, "Wrong alignment on MarinerCharacter_IsReticleRed");
static_assert(sizeof(MarinerCharacter_IsReticleRed) == 0x000001, "Wrong size on MarinerCharacter_IsReticleRed");
static_assert(offsetof(MarinerCharacter_IsReticleRed, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsReticleRed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsReturningToArena
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsReturningToArena final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsReturningToArena) == 0x000001, "Wrong alignment on MarinerCharacter_IsReturningToArena");
static_assert(sizeof(MarinerCharacter_IsReturningToArena) == 0x000001, "Wrong size on MarinerCharacter_IsReturningToArena");
static_assert(offsetof(MarinerCharacter_IsReturningToArena, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsReturningToArena::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsSimulatingClient
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsSimulatingClient final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsSimulatingClient) == 0x000001, "Wrong alignment on MarinerCharacter_IsSimulatingClient");
static_assert(sizeof(MarinerCharacter_IsSimulatingClient) == 0x000001, "Wrong size on MarinerCharacter_IsSimulatingClient");
static_assert(offsetof(MarinerCharacter_IsSimulatingClient, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsSimulatingClient::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.IsWeaponInputSuppressedByTag
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacter_IsWeaponInputSuppressedByTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_IsWeaponInputSuppressedByTag) == 0x000001, "Wrong alignment on MarinerCharacter_IsWeaponInputSuppressedByTag");
static_assert(sizeof(MarinerCharacter_IsWeaponInputSuppressedByTag) == 0x000001, "Wrong size on MarinerCharacter_IsWeaponInputSuppressedByTag");
static_assert(offsetof(MarinerCharacter_IsWeaponInputSuppressedByTag, ReturnValue) == 0x000000, "Member 'MarinerCharacter_IsWeaponInputSuppressedByTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacter.ShouldKnockoutInitiateSplat
// 0x0002 (0x0002 - 0x0000)
struct MarinerCharacter_ShouldKnockoutInitiateSplat final
{
public:
	bool                                          bWasKnockoutDueToMegablast;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacter_ShouldKnockoutInitiateSplat) == 0x000001, "Wrong alignment on MarinerCharacter_ShouldKnockoutInitiateSplat");
static_assert(sizeof(MarinerCharacter_ShouldKnockoutInitiateSplat) == 0x000002, "Wrong size on MarinerCharacter_ShouldKnockoutInitiateSplat");
static_assert(offsetof(MarinerCharacter_ShouldKnockoutInitiateSplat, bWasKnockoutDueToMegablast) == 0x000000, "Member 'MarinerCharacter_ShouldKnockoutInitiateSplat::bWasKnockoutDueToMegablast' has a wrong offset!");
static_assert(offsetof(MarinerCharacter_ShouldKnockoutInitiateSplat, ReturnValue) == 0x000001, "Member 'MarinerCharacter_ShouldKnockoutInitiateSplat::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterAbilityWidget.PopulateUsingSoftReference
// 0x0028 (0x0028 - 0x0000)
struct MarinerCharacterAbilityWidget_PopulateUsingSoftReference final
{
public:
	TSoftClassPtr<class UClass>                   Character;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterAbilityWidget_PopulateUsingSoftReference) == 0x000008, "Wrong alignment on MarinerCharacterAbilityWidget_PopulateUsingSoftReference");
static_assert(sizeof(MarinerCharacterAbilityWidget_PopulateUsingSoftReference) == 0x000028, "Wrong size on MarinerCharacterAbilityWidget_PopulateUsingSoftReference");
static_assert(offsetof(MarinerCharacterAbilityWidget_PopulateUsingSoftReference, Character) == 0x000000, "Member 'MarinerCharacterAbilityWidget_PopulateUsingSoftReference::Character' has a wrong offset!");

// Function Mariner.MarinerCharacterFrontendSkinUIData.GetPaletteColors
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacterFrontendSkinUIData_GetPaletteColors final
{
public:
	TArray<struct FLinearColor>                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterFrontendSkinUIData_GetPaletteColors) == 0x000008, "Wrong alignment on MarinerCharacterFrontendSkinUIData_GetPaletteColors");
static_assert(sizeof(MarinerCharacterFrontendSkinUIData_GetPaletteColors) == 0x000010, "Wrong size on MarinerCharacterFrontendSkinUIData_GetPaletteColors");
static_assert(offsetof(MarinerCharacterFrontendSkinUIData_GetPaletteColors, ReturnValue) == 0x000000, "Member 'MarinerCharacterFrontendSkinUIData_GetPaletteColors::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterFrontendSkinUIData.GetPortraitBackground
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterFrontendSkinUIData_GetPortraitBackground final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterFrontendSkinUIData_GetPortraitBackground) == 0x000008, "Wrong alignment on MarinerCharacterFrontendSkinUIData_GetPortraitBackground");
static_assert(sizeof(MarinerCharacterFrontendSkinUIData_GetPortraitBackground) == 0x000008, "Wrong size on MarinerCharacterFrontendSkinUIData_GetPortraitBackground");
static_assert(offsetof(MarinerCharacterFrontendSkinUIData_GetPortraitBackground, ReturnValue) == 0x000000, "Member 'MarinerCharacterFrontendSkinUIData_GetPortraitBackground::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.DebugDrawFastOverlapListenerHandle
// 0x0018 (0x0018 - 0x0000)
struct MarinerFastCollisionUtils_DebugDrawFastOverlapListenerHandle final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerProjectileFastOverlapListenerHandle Handle;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawDuration;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 DrawColor;                                         // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C1[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastCollisionUtils_DebugDrawFastOverlapListenerHandle) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_DebugDrawFastOverlapListenerHandle");
static_assert(sizeof(MarinerFastCollisionUtils_DebugDrawFastOverlapListenerHandle) == 0x000018, "Wrong size on MarinerFastCollisionUtils_DebugDrawFastOverlapListenerHandle");
static_assert(offsetof(MarinerFastCollisionUtils_DebugDrawFastOverlapListenerHandle, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_DebugDrawFastOverlapListenerHandle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_DebugDrawFastOverlapListenerHandle, Handle) == 0x000008, "Member 'MarinerFastCollisionUtils_DebugDrawFastOverlapListenerHandle::Handle' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_DebugDrawFastOverlapListenerHandle, DrawDuration) == 0x00000C, "Member 'MarinerFastCollisionUtils_DebugDrawFastOverlapListenerHandle::DrawDuration' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_DebugDrawFastOverlapListenerHandle, DrawColor) == 0x000010, "Member 'MarinerFastCollisionUtils_DebugDrawFastOverlapListenerHandle::DrawColor' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.FastOverlapBox
// 0x0080 (0x0080 - 0x0000)
struct MarinerFastCollisionUtils_FastOverlapBox final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   OverlapperBox;                                     // 0x0008(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C2[0xC];                                     // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BoxTransform;                                      // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             OverlapChannel;                                    // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C3[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarinerFastCollisionComponent*> OutHits;                                           // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C4[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastCollisionUtils_FastOverlapBox) == 0x000010, "Wrong alignment on MarinerFastCollisionUtils_FastOverlapBox");
static_assert(sizeof(MarinerFastCollisionUtils_FastOverlapBox) == 0x000080, "Wrong size on MarinerFastCollisionUtils_FastOverlapBox");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapBox, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_FastOverlapBox::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapBox, OverlapperBox) == 0x000008, "Member 'MarinerFastCollisionUtils_FastOverlapBox::OverlapperBox' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapBox, BoxTransform) == 0x000030, "Member 'MarinerFastCollisionUtils_FastOverlapBox::BoxTransform' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapBox, OverlapChannel) == 0x000060, "Member 'MarinerFastCollisionUtils_FastOverlapBox::OverlapChannel' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapBox, OutHits) == 0x000068, "Member 'MarinerFastCollisionUtils_FastOverlapBox::OutHits' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapBox, ReturnValue) == 0x000078, "Member 'MarinerFastCollisionUtils_FastOverlapBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.FastOverlapBoxWithCollection
// 0x0080 (0x0080 - 0x0000)
struct MarinerFastCollisionUtils_FastOverlapBoxWithCollection final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   OverlapperBox;                                     // 0x0008(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C5[0xC];                                     // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BoxTransform;                                      // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             OverlapChannel;                                    // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C6[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarinerFastCollisionComponent*> OutHits;                                           // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         CollectionToCollideAgainst;                        // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x007C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C7[0x3];                                     // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastCollisionUtils_FastOverlapBoxWithCollection) == 0x000010, "Wrong alignment on MarinerFastCollisionUtils_FastOverlapBoxWithCollection");
static_assert(sizeof(MarinerFastCollisionUtils_FastOverlapBoxWithCollection) == 0x000080, "Wrong size on MarinerFastCollisionUtils_FastOverlapBoxWithCollection");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapBoxWithCollection, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_FastOverlapBoxWithCollection::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapBoxWithCollection, OverlapperBox) == 0x000008, "Member 'MarinerFastCollisionUtils_FastOverlapBoxWithCollection::OverlapperBox' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapBoxWithCollection, BoxTransform) == 0x000030, "Member 'MarinerFastCollisionUtils_FastOverlapBoxWithCollection::BoxTransform' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapBoxWithCollection, OverlapChannel) == 0x000060, "Member 'MarinerFastCollisionUtils_FastOverlapBoxWithCollection::OverlapChannel' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapBoxWithCollection, OutHits) == 0x000068, "Member 'MarinerFastCollisionUtils_FastOverlapBoxWithCollection::OutHits' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapBoxWithCollection, CollectionToCollideAgainst) == 0x000078, "Member 'MarinerFastCollisionUtils_FastOverlapBoxWithCollection::CollectionToCollideAgainst' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapBoxWithCollection, ReturnValue) == 0x00007C, "Member 'MarinerFastCollisionUtils_FastOverlapBoxWithCollection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.FastOverlapCapsule
// 0x0040 (0x0040 - 0x0000)
struct MarinerFastCollisionUtils_FastOverlapCapsule final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPoint;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OverlapChannel;                                    // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C8[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarinerFastCollisionComponent*> OutHits;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C9[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastCollisionUtils_FastOverlapCapsule) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_FastOverlapCapsule");
static_assert(sizeof(MarinerFastCollisionUtils_FastOverlapCapsule) == 0x000040, "Wrong size on MarinerFastCollisionUtils_FastOverlapCapsule");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapCapsule, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_FastOverlapCapsule::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapCapsule, CapsuleRadius) == 0x000008, "Member 'MarinerFastCollisionUtils_FastOverlapCapsule::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapCapsule, StartPoint) == 0x00000C, "Member 'MarinerFastCollisionUtils_FastOverlapCapsule::StartPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapCapsule, EndPoint) == 0x000018, "Member 'MarinerFastCollisionUtils_FastOverlapCapsule::EndPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapCapsule, OverlapChannel) == 0x000024, "Member 'MarinerFastCollisionUtils_FastOverlapCapsule::OverlapChannel' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapCapsule, OutHits) == 0x000028, "Member 'MarinerFastCollisionUtils_FastOverlapCapsule::OutHits' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapCapsule, ReturnValue) == 0x000038, "Member 'MarinerFastCollisionUtils_FastOverlapCapsule::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.FastOverlapCapsuleWithCollection
// 0x0040 (0x0040 - 0x0000)
struct MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPoint;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OverlapChannel;                                    // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16CA[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarinerFastCollisionComponent*> OutHits;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         CollectionToCollideAgainst;                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16CB[0x3];                                     // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection");
static_assert(sizeof(MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection) == 0x000040, "Wrong size on MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection, CapsuleRadius) == 0x000008, "Member 'MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection, StartPoint) == 0x00000C, "Member 'MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection::StartPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection, EndPoint) == 0x000018, "Member 'MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection::EndPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection, OverlapChannel) == 0x000024, "Member 'MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection::OverlapChannel' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection, OutHits) == 0x000028, "Member 'MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection::OutHits' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection, CollectionToCollideAgainst) == 0x000038, "Member 'MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection::CollectionToCollideAgainst' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection, ReturnValue) == 0x00003C, "Member 'MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.FastOverlapSphere
// 0x0038 (0x0038 - 0x0000)
struct MarinerFastCollisionUtils_FastOverlapSphere final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OverlapChannel;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16CC[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarinerFastCollisionComponent*> OutHits;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16CD[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastCollisionUtils_FastOverlapSphere) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_FastOverlapSphere");
static_assert(sizeof(MarinerFastCollisionUtils_FastOverlapSphere) == 0x000038, "Wrong size on MarinerFastCollisionUtils_FastOverlapSphere");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapSphere, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_FastOverlapSphere::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapSphere, SphereRadius) == 0x000008, "Member 'MarinerFastCollisionUtils_FastOverlapSphere::SphereRadius' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapSphere, Location) == 0x00000C, "Member 'MarinerFastCollisionUtils_FastOverlapSphere::Location' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapSphere, OverlapChannel) == 0x000018, "Member 'MarinerFastCollisionUtils_FastOverlapSphere::OverlapChannel' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapSphere, OutHits) == 0x000020, "Member 'MarinerFastCollisionUtils_FastOverlapSphere::OutHits' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapSphere, ReturnValue) == 0x000030, "Member 'MarinerFastCollisionUtils_FastOverlapSphere::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.FastOverlapSphereWithCollection
// 0x0038 (0x0038 - 0x0000)
struct MarinerFastCollisionUtils_FastOverlapSphereWithCollection final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OverlapChannel;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16CE[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarinerFastCollisionComponent*> OutHits;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         CollectionToCollideAgainst;                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16CF[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastCollisionUtils_FastOverlapSphereWithCollection) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_FastOverlapSphereWithCollection");
static_assert(sizeof(MarinerFastCollisionUtils_FastOverlapSphereWithCollection) == 0x000038, "Wrong size on MarinerFastCollisionUtils_FastOverlapSphereWithCollection");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapSphereWithCollection, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_FastOverlapSphereWithCollection::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapSphereWithCollection, SphereRadius) == 0x000008, "Member 'MarinerFastCollisionUtils_FastOverlapSphereWithCollection::SphereRadius' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapSphereWithCollection, Location) == 0x00000C, "Member 'MarinerFastCollisionUtils_FastOverlapSphereWithCollection::Location' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapSphereWithCollection, OverlapChannel) == 0x000018, "Member 'MarinerFastCollisionUtils_FastOverlapSphereWithCollection::OverlapChannel' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapSphereWithCollection, OutHits) == 0x000020, "Member 'MarinerFastCollisionUtils_FastOverlapSphereWithCollection::OutHits' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapSphereWithCollection, CollectionToCollideAgainst) == 0x000030, "Member 'MarinerFastCollisionUtils_FastOverlapSphereWithCollection::CollectionToCollideAgainst' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_FastOverlapSphereWithCollection, ReturnValue) == 0x000034, "Member 'MarinerFastCollisionUtils_FastOverlapSphereWithCollection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.IsProjectileFastOverlapListenerVolumeValid
// 0x0010 (0x0010 - 0x0000)
struct MarinerFastCollisionUtils_IsProjectileFastOverlapListenerVolumeValid final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerProjectileFastOverlapListenerHandle Handle;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16D0[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastCollisionUtils_IsProjectileFastOverlapListenerVolumeValid) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_IsProjectileFastOverlapListenerVolumeValid");
static_assert(sizeof(MarinerFastCollisionUtils_IsProjectileFastOverlapListenerVolumeValid) == 0x000010, "Wrong size on MarinerFastCollisionUtils_IsProjectileFastOverlapListenerVolumeValid");
static_assert(offsetof(MarinerFastCollisionUtils_IsProjectileFastOverlapListenerVolumeValid, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_IsProjectileFastOverlapListenerVolumeValid::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_IsProjectileFastOverlapListenerVolumeValid, Handle) == 0x000008, "Member 'MarinerFastCollisionUtils_IsProjectileFastOverlapListenerVolumeValid::Handle' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_IsProjectileFastOverlapListenerVolumeValid, ReturnValue) == 0x00000C, "Member 'MarinerFastCollisionUtils_IsProjectileFastOverlapListenerVolumeValid::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.RegisterProjectileFastOverlapListenerBoxVolume
// 0x0040 (0x0040 - 0x0000)
struct MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OverlapResponder;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extents;                                           // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             OverlapChannel;                                    // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16D1[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CollectionToCollideAgainst;                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerProjectileFastOverlapListenerHandle ReturnValue;                                       // 0x003C(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume");
static_assert(sizeof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume) == 0x000040, "Wrong size on MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume, OverlapResponder) == 0x000008, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume::OverlapResponder' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume, Extents) == 0x000010, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume::Extents' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume, Location) == 0x00001C, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume::Location' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume, Rotation) == 0x000028, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume::Rotation' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume, OverlapChannel) == 0x000034, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume::OverlapChannel' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume, CollectionToCollideAgainst) == 0x000038, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume::CollectionToCollideAgainst' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume, ReturnValue) == 0x00003C, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.RegisterProjectileFastOverlapListenerCapsuleVolume
// 0x0040 (0x0040 - 0x0000)
struct MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OverlapResponder;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             OverlapChannel;                                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16D2[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CollectionToCollideAgainst;                        // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerProjectileFastOverlapListenerHandle ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16D3[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume");
static_assert(sizeof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume) == 0x000040, "Wrong size on MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume, OverlapResponder) == 0x000008, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume::OverlapResponder' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume, Radius) == 0x000010, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume::Radius' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume, HalfHeight) == 0x000014, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume::HalfHeight' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume, Location) == 0x000018, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume::Location' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume, Rotation) == 0x000024, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume::Rotation' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume, OverlapChannel) == 0x000030, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume::OverlapChannel' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume, CollectionToCollideAgainst) == 0x000034, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume::CollectionToCollideAgainst' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume, ReturnValue) == 0x000038, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.RegisterProjectileFastOverlapListenerSphereVolume
// 0x0030 (0x0030 - 0x0000)
struct MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OverlapResponder;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OverlapChannel;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16D4[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CollectionToCollideAgainst;                        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerProjectileFastOverlapListenerHandle ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16D5[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume");
static_assert(sizeof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume) == 0x000030, "Wrong size on MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume, OverlapResponder) == 0x000008, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume::OverlapResponder' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume, Radius) == 0x000010, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume::Radius' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume, Location) == 0x000014, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume::Location' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume, OverlapChannel) == 0x000020, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume::OverlapChannel' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume, CollectionToCollideAgainst) == 0x000024, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume::CollectionToCollideAgainst' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume, ReturnValue) == 0x000028, "Member 'MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.UnregisterProjectileFastOverlapListenerVolume
// 0x0010 (0x0010 - 0x0000)
struct MarinerFastCollisionUtils_UnregisterProjectileFastOverlapListenerVolume final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerProjectileFastOverlapListenerHandle Handle;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16D6[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastCollisionUtils_UnregisterProjectileFastOverlapListenerVolume) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_UnregisterProjectileFastOverlapListenerVolume");
static_assert(sizeof(MarinerFastCollisionUtils_UnregisterProjectileFastOverlapListenerVolume) == 0x000010, "Wrong size on MarinerFastCollisionUtils_UnregisterProjectileFastOverlapListenerVolume");
static_assert(offsetof(MarinerFastCollisionUtils_UnregisterProjectileFastOverlapListenerVolume, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_UnregisterProjectileFastOverlapListenerVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UnregisterProjectileFastOverlapListenerVolume, Handle) == 0x000008, "Member 'MarinerFastCollisionUtils_UnregisterProjectileFastOverlapListenerVolume::Handle' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.UpdateProjectileFastOverlapListenerBoxVolume
// 0x0030 (0x0030 - 0x0000)
struct MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerProjectileFastOverlapListenerHandle Handle;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extents;                                           // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume");
static_assert(sizeof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume) == 0x000030, "Wrong size on MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume, Handle) == 0x000008, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume::Handle' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume, Extents) == 0x00000C, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume::Extents' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume, Location) == 0x000018, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume::Location' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume, Rotation) == 0x000024, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume::Rotation' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.UpdateProjectileFastOverlapListenerCapsuleVolume
// 0x0030 (0x0030 - 0x0000)
struct MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerProjectileFastOverlapListenerHandle Handle;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_16D7[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume");
static_assert(sizeof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume) == 0x000030, "Wrong size on MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume, Handle) == 0x000008, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume::Handle' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume, Radius) == 0x00000C, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume::Radius' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume, HalfHeight) == 0x000010, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume::HalfHeight' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume, Location) == 0x000014, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume::Location' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume, Rotation) == 0x000020, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume::Rotation' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.UpdateProjectileFastOverlapListenerLocation
// 0x0018 (0x0018 - 0x0000)
struct MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerProjectileFastOverlapListenerHandle Handle;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocation) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocation");
static_assert(sizeof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocation) == 0x000018, "Wrong size on MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocation");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocation, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocation, Handle) == 0x000008, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocation::Handle' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocation, Location) == 0x00000C, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocation::Location' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.UpdateProjectileFastOverlapListenerLocationAndRotation
// 0x0028 (0x0028 - 0x0000)
struct MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocationAndRotation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerProjectileFastOverlapListenerHandle Handle;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_16D8[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocationAndRotation) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocationAndRotation");
static_assert(sizeof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocationAndRotation) == 0x000028, "Wrong size on MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocationAndRotation");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocationAndRotation, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocationAndRotation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocationAndRotation, Handle) == 0x000008, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocationAndRotation::Handle' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocationAndRotation, Location) == 0x00000C, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocationAndRotation::Location' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocationAndRotation, Rotation) == 0x000018, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocationAndRotation::Rotation' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.UpdateProjectileFastOverlapListenerRotation
// 0x0018 (0x0018 - 0x0000)
struct MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerRotation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerProjectileFastOverlapListenerHandle Handle;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerRotation) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerRotation");
static_assert(sizeof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerRotation) == 0x000018, "Wrong size on MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerRotation");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerRotation, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerRotation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerRotation, Handle) == 0x000008, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerRotation::Handle' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerRotation, Rotation) == 0x00000C, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerRotation::Rotation' has a wrong offset!");

// Function Mariner.MarinerFastCollisionUtils.UpdateProjectileFastOverlapListenerSphereVolume
// 0x0020 (0x0020 - 0x0000)
struct MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerSphereVolume final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerProjectileFastOverlapListenerHandle Handle;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16D9[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerSphereVolume) == 0x000008, "Wrong alignment on MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerSphereVolume");
static_assert(sizeof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerSphereVolume) == 0x000020, "Wrong size on MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerSphereVolume");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerSphereVolume, WorldContextObject) == 0x000000, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerSphereVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerSphereVolume, Handle) == 0x000008, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerSphereVolume::Handle' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerSphereVolume, Radius) == 0x00000C, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerSphereVolume::Radius' has a wrong offset!");
static_assert(offsetof(MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerSphereVolume, Location) == 0x000010, "Member 'MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerSphereVolume::Location' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.GetPostGameResultsCameraXOffset
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacterLite_GetPostGameResultsCameraXOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_GetPostGameResultsCameraXOffset) == 0x000004, "Wrong alignment on MarinerCharacterLite_GetPostGameResultsCameraXOffset");
static_assert(sizeof(MarinerCharacterLite_GetPostGameResultsCameraXOffset) == 0x000004, "Wrong size on MarinerCharacterLite_GetPostGameResultsCameraXOffset");
static_assert(offsetof(MarinerCharacterLite_GetPostGameResultsCameraXOffset, ReturnValue) == 0x000000, "Member 'MarinerCharacterLite_GetPostGameResultsCameraXOffset::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.GetPostGameResultsCameraZOffset
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacterLite_GetPostGameResultsCameraZOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_GetPostGameResultsCameraZOffset) == 0x000004, "Wrong alignment on MarinerCharacterLite_GetPostGameResultsCameraZOffset");
static_assert(sizeof(MarinerCharacterLite_GetPostGameResultsCameraZOffset) == 0x000004, "Wrong size on MarinerCharacterLite_GetPostGameResultsCameraZOffset");
static_assert(offsetof(MarinerCharacterLite_GetPostGameResultsCameraZOffset, ReturnValue) == 0x000000, "Member 'MarinerCharacterLite_GetPostGameResultsCameraZOffset::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.PlayBlastOffMontage
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterLite_PlayBlastOffMontage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_PlayBlastOffMontage) == 0x000001, "Wrong alignment on MarinerCharacterLite_PlayBlastOffMontage");
static_assert(sizeof(MarinerCharacterLite_PlayBlastOffMontage) == 0x000001, "Wrong size on MarinerCharacterLite_PlayBlastOffMontage");
static_assert(offsetof(MarinerCharacterLite_PlayBlastOffMontage, ReturnValue) == 0x000000, "Member 'MarinerCharacterLite_PlayBlastOffMontage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.PlayDefeatMontage
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterLite_PlayDefeatMontage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_PlayDefeatMontage) == 0x000001, "Wrong alignment on MarinerCharacterLite_PlayDefeatMontage");
static_assert(sizeof(MarinerCharacterLite_PlayDefeatMontage) == 0x000001, "Wrong size on MarinerCharacterLite_PlayDefeatMontage");
static_assert(offsetof(MarinerCharacterLite_PlayDefeatMontage, ReturnValue) == 0x000000, "Member 'MarinerCharacterLite_PlayDefeatMontage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.PlayDrawMontage
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterLite_PlayDrawMontage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_PlayDrawMontage) == 0x000001, "Wrong alignment on MarinerCharacterLite_PlayDrawMontage");
static_assert(sizeof(MarinerCharacterLite_PlayDrawMontage) == 0x000001, "Wrong size on MarinerCharacterLite_PlayDrawMontage");
static_assert(offsetof(MarinerCharacterLite_PlayDrawMontage, ReturnValue) == 0x000000, "Member 'MarinerCharacterLite_PlayDrawMontage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.PlayVictoryMontage
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterLite_PlayVictoryMontage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_PlayVictoryMontage) == 0x000001, "Wrong alignment on MarinerCharacterLite_PlayVictoryMontage");
static_assert(sizeof(MarinerCharacterLite_PlayVictoryMontage) == 0x000001, "Wrong size on MarinerCharacterLite_PlayVictoryMontage");
static_assert(offsetof(MarinerCharacterLite_PlayVictoryMontage, ReturnValue) == 0x000000, "Member 'MarinerCharacterLite_PlayVictoryMontage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.SetEnableDizzy
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterLite_SetEnableDizzy final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_SetEnableDizzy) == 0x000001, "Wrong alignment on MarinerCharacterLite_SetEnableDizzy");
static_assert(sizeof(MarinerCharacterLite_SetEnableDizzy) == 0x000001, "Wrong size on MarinerCharacterLite_SetEnableDizzy");
static_assert(offsetof(MarinerCharacterLite_SetEnableDizzy, bEnable) == 0x000000, "Member 'MarinerCharacterLite_SetEnableDizzy::bEnable' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.SetEnableFidget
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterLite_SetEnableFidget final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_SetEnableFidget) == 0x000001, "Wrong alignment on MarinerCharacterLite_SetEnableFidget");
static_assert(sizeof(MarinerCharacterLite_SetEnableFidget) == 0x000001, "Wrong size on MarinerCharacterLite_SetEnableFidget");
static_assert(offsetof(MarinerCharacterLite_SetEnableFidget, bEnable) == 0x000000, "Member 'MarinerCharacterLite_SetEnableFidget::bEnable' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.SetEnableGreeting
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterLite_SetEnableGreeting final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_SetEnableGreeting) == 0x000001, "Wrong alignment on MarinerCharacterLite_SetEnableGreeting");
static_assert(sizeof(MarinerCharacterLite_SetEnableGreeting) == 0x000001, "Wrong size on MarinerCharacterLite_SetEnableGreeting");
static_assert(offsetof(MarinerCharacterLite_SetEnableGreeting, bEnable) == 0x000000, "Member 'MarinerCharacterLite_SetEnableGreeting::bEnable' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.SetEnableTickle
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterLite_SetEnableTickle final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_SetEnableTickle) == 0x000001, "Wrong alignment on MarinerCharacterLite_SetEnableTickle");
static_assert(sizeof(MarinerCharacterLite_SetEnableTickle) == 0x000001, "Wrong size on MarinerCharacterLite_SetEnableTickle");
static_assert(offsetof(MarinerCharacterLite_SetEnableTickle, bEnable) == 0x000000, "Member 'MarinerCharacterLite_SetEnableTickle::bEnable' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.SetInteractableBehaviorAllowed
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterLite_SetInteractableBehaviorAllowed final
{
public:
	bool                                          bAllowed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_SetInteractableBehaviorAllowed) == 0x000001, "Wrong alignment on MarinerCharacterLite_SetInteractableBehaviorAllowed");
static_assert(sizeof(MarinerCharacterLite_SetInteractableBehaviorAllowed) == 0x000001, "Wrong size on MarinerCharacterLite_SetInteractableBehaviorAllowed");
static_assert(offsetof(MarinerCharacterLite_SetInteractableBehaviorAllowed, bAllowed) == 0x000000, "Member 'MarinerCharacterLite_SetInteractableBehaviorAllowed::bAllowed' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.SetIsLooping
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterLite_SetIsLooping final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_SetIsLooping) == 0x000001, "Wrong alignment on MarinerCharacterLite_SetIsLooping");
static_assert(sizeof(MarinerCharacterLite_SetIsLooping) == 0x000001, "Wrong size on MarinerCharacterLite_SetIsLooping");
static_assert(offsetof(MarinerCharacterLite_SetIsLooping, bEnable) == 0x000000, "Member 'MarinerCharacterLite_SetIsLooping::bEnable' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.SetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterLite_SetPlayerState final
{
public:
	class AMarinerPlayerState*                    NewPlayerState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_SetPlayerState) == 0x000008, "Wrong alignment on MarinerCharacterLite_SetPlayerState");
static_assert(sizeof(MarinerCharacterLite_SetPlayerState) == 0x000008, "Wrong size on MarinerCharacterLite_SetPlayerState");
static_assert(offsetof(MarinerCharacterLite_SetPlayerState, NewPlayerState) == 0x000000, "Member 'MarinerCharacterLite_SetPlayerState::NewPlayerState' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.SetPreviewAnimationModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterLite_SetPreviewAnimationModeEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_SetPreviewAnimationModeEnabled) == 0x000001, "Wrong alignment on MarinerCharacterLite_SetPreviewAnimationModeEnabled");
static_assert(sizeof(MarinerCharacterLite_SetPreviewAnimationModeEnabled) == 0x000001, "Wrong size on MarinerCharacterLite_SetPreviewAnimationModeEnabled");
static_assert(offsetof(MarinerCharacterLite_SetPreviewAnimationModeEnabled, bEnabled) == 0x000000, "Member 'MarinerCharacterLite_SetPreviewAnimationModeEnabled::bEnabled' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.GetCapsuleComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterLite_GetCapsuleComponent final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_GetCapsuleComponent) == 0x000008, "Wrong alignment on MarinerCharacterLite_GetCapsuleComponent");
static_assert(sizeof(MarinerCharacterLite_GetCapsuleComponent) == 0x000008, "Wrong size on MarinerCharacterLite_GetCapsuleComponent");
static_assert(offsetof(MarinerCharacterLite_GetCapsuleComponent, ReturnValue) == 0x000000, "Member 'MarinerCharacterLite_GetCapsuleComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.GetCharacterClass
// 0x0028 (0x0028 - 0x0000)
struct MarinerCharacterLite_GetCharacterClass final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_GetCharacterClass) == 0x000008, "Wrong alignment on MarinerCharacterLite_GetCharacterClass");
static_assert(sizeof(MarinerCharacterLite_GetCharacterClass) == 0x000028, "Wrong size on MarinerCharacterLite_GetCharacterClass");
static_assert(offsetof(MarinerCharacterLite_GetCharacterClass, ReturnValue) == 0x000000, "Member 'MarinerCharacterLite_GetCharacterClass::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.GetCharacterMesh
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterLite_GetCharacterMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_GetCharacterMesh) == 0x000008, "Wrong alignment on MarinerCharacterLite_GetCharacterMesh");
static_assert(sizeof(MarinerCharacterLite_GetCharacterMesh) == 0x000008, "Wrong size on MarinerCharacterLite_GetCharacterMesh");
static_assert(offsetof(MarinerCharacterLite_GetCharacterMesh, ReturnValue) == 0x000000, "Member 'MarinerCharacterLite_GetCharacterMesh::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.GetCurrentSkinCollection
// 0x0028 (0x0028 - 0x0000)
struct MarinerCharacterLite_GetCurrentSkinCollection final
{
public:
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_GetCurrentSkinCollection) == 0x000008, "Wrong alignment on MarinerCharacterLite_GetCurrentSkinCollection");
static_assert(sizeof(MarinerCharacterLite_GetCurrentSkinCollection) == 0x000028, "Wrong size on MarinerCharacterLite_GetCurrentSkinCollection");
static_assert(offsetof(MarinerCharacterLite_GetCurrentSkinCollection, ReturnValue) == 0x000000, "Member 'MarinerCharacterLite_GetCurrentSkinCollection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.GetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterLite_GetPlayerState final
{
public:
	class AMarinerPlayerState*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_GetPlayerState) == 0x000008, "Wrong alignment on MarinerCharacterLite_GetPlayerState");
static_assert(sizeof(MarinerCharacterLite_GetPlayerState) == 0x000008, "Wrong size on MarinerCharacterLite_GetPlayerState");
static_assert(offsetof(MarinerCharacterLite_GetPlayerState, ReturnValue) == 0x000000, "Member 'MarinerCharacterLite_GetPlayerState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterLite.GetWeaponMesh
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterLite_GetWeaponMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterLite_GetWeaponMesh) == 0x000008, "Wrong alignment on MarinerCharacterLite_GetWeaponMesh");
static_assert(sizeof(MarinerCharacterLite_GetWeaponMesh) == 0x000008, "Wrong size on MarinerCharacterLite_GetWeaponMesh");
static_assert(offsetof(MarinerCharacterLite_GetWeaponMesh, ReturnValue) == 0x000000, "Member 'MarinerCharacterLite_GetWeaponMesh::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterManager.IsCharacterOnFreeRotation
// 0x0030 (0x0030 - 0x0000)
struct MarinerCharacterManager_IsCharacterOnFreeRotation final
{
public:
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16DF[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterManager_IsCharacterOnFreeRotation) == 0x000008, "Wrong alignment on MarinerCharacterManager_IsCharacterOnFreeRotation");
static_assert(sizeof(MarinerCharacterManager_IsCharacterOnFreeRotation) == 0x000030, "Wrong size on MarinerCharacterManager_IsCharacterOnFreeRotation");
static_assert(offsetof(MarinerCharacterManager_IsCharacterOnFreeRotation, CharacterClass) == 0x000000, "Member 'MarinerCharacterManager_IsCharacterOnFreeRotation::CharacterClass' has a wrong offset!");
static_assert(offsetof(MarinerCharacterManager_IsCharacterOnFreeRotation, ReturnValue) == 0x000028, "Member 'MarinerCharacterManager_IsCharacterOnFreeRotation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMontage.Contains
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacterMontage_Contains final
{
public:
	const class UAnimMontage*                     Montage;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16E0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterMontage_Contains) == 0x000008, "Wrong alignment on MarinerCharacterMontage_Contains");
static_assert(sizeof(MarinerCharacterMontage_Contains) == 0x000010, "Wrong size on MarinerCharacterMontage_Contains");
static_assert(offsetof(MarinerCharacterMontage_Contains, Montage) == 0x000000, "Member 'MarinerCharacterMontage_Contains::Montage' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMontage_Contains, ReturnValue) == 0x000008, "Member 'MarinerCharacterMontage_Contains::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFrontEndGlobals.GetNewsGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerFrontEndGlobals_GetNewsGlobals final
{
public:
	class UMarinerNewsGlobals*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFrontEndGlobals_GetNewsGlobals) == 0x000008, "Wrong alignment on MarinerFrontEndGlobals_GetNewsGlobals");
static_assert(sizeof(MarinerFrontEndGlobals_GetNewsGlobals) == 0x000008, "Wrong size on MarinerFrontEndGlobals_GetNewsGlobals");
static_assert(offsetof(MarinerFrontEndGlobals_GetNewsGlobals, ReturnValue) == 0x000000, "Member 'MarinerFrontEndGlobals_GetNewsGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFrontEndGlobals.GetPlaylistGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerFrontEndGlobals_GetPlaylistGlobals final
{
public:
	class UMarinerPlaylistGlobals*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFrontEndGlobals_GetPlaylistGlobals) == 0x000008, "Wrong alignment on MarinerFrontEndGlobals_GetPlaylistGlobals");
static_assert(sizeof(MarinerFrontEndGlobals_GetPlaylistGlobals) == 0x000008, "Wrong size on MarinerFrontEndGlobals_GetPlaylistGlobals");
static_assert(offsetof(MarinerFrontEndGlobals_GetPlaylistGlobals, ReturnValue) == 0x000000, "Member 'MarinerFrontEndGlobals_GetPlaylistGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFrontEndGlobals.GetStoreGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerFrontEndGlobals_GetStoreGlobals final
{
public:
	class UMarinerStoreGlobals*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFrontEndGlobals_GetStoreGlobals) == 0x000008, "Wrong alignment on MarinerFrontEndGlobals_GetStoreGlobals");
static_assert(sizeof(MarinerFrontEndGlobals_GetStoreGlobals) == 0x000008, "Wrong size on MarinerFrontEndGlobals_GetStoreGlobals");
static_assert(offsetof(MarinerFrontEndGlobals_GetStoreGlobals, ReturnValue) == 0x000000, "Member 'MarinerFrontEndGlobals_GetStoreGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.ApplyHitStun
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacterMovement_ApplyHitStun final
{
public:
	float                                         HitStunDuration;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_ApplyHitStun) == 0x000004, "Wrong alignment on MarinerCharacterMovement_ApplyHitStun");
static_assert(sizeof(MarinerCharacterMovement_ApplyHitStun) == 0x000004, "Wrong size on MarinerCharacterMovement_ApplyHitStun");
static_assert(offsetof(MarinerCharacterMovement_ApplyHitStun, HitStunDuration) == 0x000000, "Member 'MarinerCharacterMovement_ApplyHitStun::HitStunDuration' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.ApplyLerpToSpeedRootMotion
// 0x0028 (0x0028 - 0x0000)
struct MarinerCharacterMovement_ApplyLerpToSpeedRootMotion final
{
public:
	TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed> Defaults;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideDuration;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideExtendedDurationOnStop;                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            OverrideVelocityChangeOverTimeCurve;               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideStartingVelocityMagnitude;                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideTargetVelocityMagnitude;                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerLerpToSpeedRootMotionPolicy           OverrideLerpTowardsTargetPolicy;                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16F5[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterMovement_ApplyLerpToSpeedRootMotion) == 0x000008, "Wrong alignment on MarinerCharacterMovement_ApplyLerpToSpeedRootMotion");
static_assert(sizeof(MarinerCharacterMovement_ApplyLerpToSpeedRootMotion) == 0x000028, "Wrong size on MarinerCharacterMovement_ApplyLerpToSpeedRootMotion");
static_assert(offsetof(MarinerCharacterMovement_ApplyLerpToSpeedRootMotion, Defaults) == 0x000000, "Member 'MarinerCharacterMovement_ApplyLerpToSpeedRootMotion::Defaults' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyLerpToSpeedRootMotion, OverrideDuration) == 0x000008, "Member 'MarinerCharacterMovement_ApplyLerpToSpeedRootMotion::OverrideDuration' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyLerpToSpeedRootMotion, OverrideExtendedDurationOnStop) == 0x00000C, "Member 'MarinerCharacterMovement_ApplyLerpToSpeedRootMotion::OverrideExtendedDurationOnStop' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyLerpToSpeedRootMotion, OverrideVelocityChangeOverTimeCurve) == 0x000010, "Member 'MarinerCharacterMovement_ApplyLerpToSpeedRootMotion::OverrideVelocityChangeOverTimeCurve' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyLerpToSpeedRootMotion, OverrideStartingVelocityMagnitude) == 0x000018, "Member 'MarinerCharacterMovement_ApplyLerpToSpeedRootMotion::OverrideStartingVelocityMagnitude' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyLerpToSpeedRootMotion, OverrideTargetVelocityMagnitude) == 0x00001C, "Member 'MarinerCharacterMovement_ApplyLerpToSpeedRootMotion::OverrideTargetVelocityMagnitude' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyLerpToSpeedRootMotion, OverrideLerpTowardsTargetPolicy) == 0x000020, "Member 'MarinerCharacterMovement_ApplyLerpToSpeedRootMotion::OverrideLerpTowardsTargetPolicy' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.ApplyMoveToDynamicForceRootMotion
// 0x0058 (0x0058 - 0x0000)
struct MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion final
{
public:
	TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce> Defaults;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetStartLocationFromCharacter;                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16F6[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideDuration;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideRestrictSpeedToExpected;                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16F7[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           OverridePathOffsetCurve;                           // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            OverrideTimeMappingCurve;                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionAccumulateMode                     OverrideAccumulateMode;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 OverrideFinishVelocityParams_Mode;                 // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16F8[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideFinishVelocityParams_ClampVelocity;        // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OverrideFinishVelocityParams_SetVelocity;          // 0x0048(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16F9[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion) == 0x000008, "Wrong alignment on MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion");
static_assert(sizeof(MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion) == 0x000058, "Wrong size on MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion");
static_assert(offsetof(MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion, Defaults) == 0x000000, "Member 'MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion::Defaults' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion, StartLocation) == 0x000008, "Member 'MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion::StartLocation' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion, TargetLocation) == 0x000014, "Member 'MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion::TargetLocation' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion, bGetStartLocationFromCharacter) == 0x000020, "Member 'MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion::bGetStartLocationFromCharacter' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion, OverrideDuration) == 0x000024, "Member 'MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion::OverrideDuration' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion, bOverrideRestrictSpeedToExpected) == 0x000028, "Member 'MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion::bOverrideRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion, OverridePathOffsetCurve) == 0x000030, "Member 'MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion::OverridePathOffsetCurve' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion, OverrideTimeMappingCurve) == 0x000038, "Member 'MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion::OverrideTimeMappingCurve' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion, OverrideAccumulateMode) == 0x000040, "Member 'MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion::OverrideAccumulateMode' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion, OverrideFinishVelocityParams_Mode) == 0x000041, "Member 'MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion::OverrideFinishVelocityParams_Mode' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion, OverrideFinishVelocityParams_ClampVelocity) == 0x000044, "Member 'MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion::OverrideFinishVelocityParams_ClampVelocity' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion, OverrideFinishVelocityParams_SetVelocity) == 0x000048, "Member 'MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion::OverrideFinishVelocityParams_SetVelocity' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.ApplySlowToStopRootMotion
// 0x0020 (0x0020 - 0x0000)
struct MarinerCharacterMovement_ApplySlowToStopRootMotion final
{
public:
	TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_SlowToStop> Defaults;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideDuration;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16FA[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            OverrideDecelerationCurve;                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideStartingSpeed;                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16FB[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterMovement_ApplySlowToStopRootMotion) == 0x000008, "Wrong alignment on MarinerCharacterMovement_ApplySlowToStopRootMotion");
static_assert(sizeof(MarinerCharacterMovement_ApplySlowToStopRootMotion) == 0x000020, "Wrong size on MarinerCharacterMovement_ApplySlowToStopRootMotion");
static_assert(offsetof(MarinerCharacterMovement_ApplySlowToStopRootMotion, Defaults) == 0x000000, "Member 'MarinerCharacterMovement_ApplySlowToStopRootMotion::Defaults' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplySlowToStopRootMotion, OverrideDuration) == 0x000008, "Member 'MarinerCharacterMovement_ApplySlowToStopRootMotion::OverrideDuration' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplySlowToStopRootMotion, OverrideDecelerationCurve) == 0x000010, "Member 'MarinerCharacterMovement_ApplySlowToStopRootMotion::OverrideDecelerationCurve' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_ApplySlowToStopRootMotion, OverrideStartingSpeed) == 0x000018, "Member 'MarinerCharacterMovement_ApplySlowToStopRootMotion::OverrideStartingSpeed' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.AuthorityRemoveRootMotionSourceByID
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacterMovement_AuthorityRemoveRootMotionSourceByID final
{
public:
	int32                                         RootMotionSourceID;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_AuthorityRemoveRootMotionSourceByID) == 0x000004, "Wrong alignment on MarinerCharacterMovement_AuthorityRemoveRootMotionSourceByID");
static_assert(sizeof(MarinerCharacterMovement_AuthorityRemoveRootMotionSourceByID) == 0x000004, "Wrong size on MarinerCharacterMovement_AuthorityRemoveRootMotionSourceByID");
static_assert(offsetof(MarinerCharacterMovement_AuthorityRemoveRootMotionSourceByID, RootMotionSourceID) == 0x000000, "Member 'MarinerCharacterMovement_AuthorityRemoveRootMotionSourceByID::RootMotionSourceID' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.AuthoritySetDisableDynamicGravityFrictionAndBraking
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterMovement_AuthoritySetDisableDynamicGravityFrictionAndBraking final
{
public:
	bool                                          bIsDisabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_AuthoritySetDisableDynamicGravityFrictionAndBraking) == 0x000001, "Wrong alignment on MarinerCharacterMovement_AuthoritySetDisableDynamicGravityFrictionAndBraking");
static_assert(sizeof(MarinerCharacterMovement_AuthoritySetDisableDynamicGravityFrictionAndBraking) == 0x000001, "Wrong size on MarinerCharacterMovement_AuthoritySetDisableDynamicGravityFrictionAndBraking");
static_assert(offsetof(MarinerCharacterMovement_AuthoritySetDisableDynamicGravityFrictionAndBraking, bIsDisabled) == 0x000000, "Member 'MarinerCharacterMovement_AuthoritySetDisableDynamicGravityFrictionAndBraking::bIsDisabled' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.IsRootMotionSourceActive
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterMovement_IsRootMotionSourceActive final
{
public:
	int32                                         RootMotionSourceID;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16FC[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterMovement_IsRootMotionSourceActive) == 0x000004, "Wrong alignment on MarinerCharacterMovement_IsRootMotionSourceActive");
static_assert(sizeof(MarinerCharacterMovement_IsRootMotionSourceActive) == 0x000008, "Wrong size on MarinerCharacterMovement_IsRootMotionSourceActive");
static_assert(offsetof(MarinerCharacterMovement_IsRootMotionSourceActive, RootMotionSourceID) == 0x000000, "Member 'MarinerCharacterMovement_IsRootMotionSourceActive::RootMotionSourceID' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_IsRootMotionSourceActive, ReturnValue) == 0x000004, "Member 'MarinerCharacterMovement_IsRootMotionSourceActive::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.MulticastLerpBetweenPoints
// 0x0048 (0x0048 - 0x0000)
struct MarinerCharacterMovement_MulticastLerpBetweenPoints final
{
public:
	class FName                                   MotionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    PositionAtZero;                                    // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNonQuantizedRotator                   RotationAtZero;                                    // 0x0014(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    PositionAtOne;                                     // 0x0020(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNonQuantizedRotator                   RotationAtOne;                                     // 0x002C(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LerpCurve;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideMegablasts;                               // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16FD[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterMovement_MulticastLerpBetweenPoints) == 0x000008, "Wrong alignment on MarinerCharacterMovement_MulticastLerpBetweenPoints");
static_assert(sizeof(MarinerCharacterMovement_MulticastLerpBetweenPoints) == 0x000048, "Wrong size on MarinerCharacterMovement_MulticastLerpBetweenPoints");
static_assert(offsetof(MarinerCharacterMovement_MulticastLerpBetweenPoints, MotionName) == 0x000000, "Member 'MarinerCharacterMovement_MulticastLerpBetweenPoints::MotionName' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_MulticastLerpBetweenPoints, PositionAtZero) == 0x000008, "Member 'MarinerCharacterMovement_MulticastLerpBetweenPoints::PositionAtZero' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_MulticastLerpBetweenPoints, RotationAtZero) == 0x000014, "Member 'MarinerCharacterMovement_MulticastLerpBetweenPoints::RotationAtZero' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_MulticastLerpBetweenPoints, PositionAtOne) == 0x000020, "Member 'MarinerCharacterMovement_MulticastLerpBetweenPoints::PositionAtOne' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_MulticastLerpBetweenPoints, RotationAtOne) == 0x00002C, "Member 'MarinerCharacterMovement_MulticastLerpBetweenPoints::RotationAtOne' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_MulticastLerpBetweenPoints, LerpCurve) == 0x000038, "Member 'MarinerCharacterMovement_MulticastLerpBetweenPoints::LerpCurve' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_MulticastLerpBetweenPoints, bOverrideMegablasts) == 0x000040, "Member 'MarinerCharacterMovement_MulticastLerpBetweenPoints::bOverrideMegablasts' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.MulticastMegablastApplied
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterMovement_MulticastMegablastApplied final
{
public:
	class AMarinerPlayerState*                    MegablastInstigator;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_MulticastMegablastApplied) == 0x000008, "Wrong alignment on MarinerCharacterMovement_MulticastMegablastApplied");
static_assert(sizeof(MarinerCharacterMovement_MulticastMegablastApplied) == 0x000008, "Wrong size on MarinerCharacterMovement_MulticastMegablastApplied");
static_assert(offsetof(MarinerCharacterMovement_MulticastMegablastApplied, MegablastInstigator) == 0x000000, "Member 'MarinerCharacterMovement_MulticastMegablastApplied::MegablastInstigator' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.MulticastMoveAlongCharacterSpline_ArenaReturn
// 0x0028 (0x0028 - 0x0000)
struct MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn final
{
public:
	class FName                                   MotionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssignedSplineID;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16FE[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharacterMovementStartCurve;                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CharacterMovementEndCurve;                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterEndRotationBlendTime;                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16FF[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn) == 0x000008, "Wrong alignment on MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn");
static_assert(sizeof(MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn) == 0x000028, "Wrong size on MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn");
static_assert(offsetof(MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn, MotionName) == 0x000000, "Member 'MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn::MotionName' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn, AssignedSplineID) == 0x000008, "Member 'MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn::AssignedSplineID' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn, CharacterMovementStartCurve) == 0x000010, "Member 'MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn::CharacterMovementStartCurve' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn, CharacterMovementEndCurve) == 0x000018, "Member 'MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn::CharacterMovementEndCurve' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn, CharacterEndRotationBlendTime) == 0x000020, "Member 'MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn::CharacterEndRotationBlendTime' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.MulticastRemoveRootMotionSource
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterMovement_MulticastRemoveRootMotionSource final
{
public:
	class FName                                   MotionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_MulticastRemoveRootMotionSource) == 0x000004, "Wrong alignment on MarinerCharacterMovement_MulticastRemoveRootMotionSource");
static_assert(sizeof(MarinerCharacterMovement_MulticastRemoveRootMotionSource) == 0x000008, "Wrong size on MarinerCharacterMovement_MulticastRemoveRootMotionSource");
static_assert(offsetof(MarinerCharacterMovement_MulticastRemoveRootMotionSource, MotionName) == 0x000000, "Member 'MarinerCharacterMovement_MulticastRemoveRootMotionSource::MotionName' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.MulticastSlowToStop
// 0x0018 (0x0018 - 0x0000)
struct MarinerCharacterMovement_MulticastSlowToStop final
{
public:
	class FName                                   MotionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecelerationTime;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1700[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DecelerationCurve;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_MulticastSlowToStop) == 0x000008, "Wrong alignment on MarinerCharacterMovement_MulticastSlowToStop");
static_assert(sizeof(MarinerCharacterMovement_MulticastSlowToStop) == 0x000018, "Wrong size on MarinerCharacterMovement_MulticastSlowToStop");
static_assert(offsetof(MarinerCharacterMovement_MulticastSlowToStop, MotionName) == 0x000000, "Member 'MarinerCharacterMovement_MulticastSlowToStop::MotionName' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_MulticastSlowToStop, DecelerationTime) == 0x000008, "Member 'MarinerCharacterMovement_MulticastSlowToStop::DecelerationTime' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_MulticastSlowToStop, DecelerationCurve) == 0x000010, "Member 'MarinerCharacterMovement_MulticastSlowToStop::DecelerationCurve' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.OnMegablastBounce
// 0x008C (0x008C - 0x0000)
struct MarinerCharacterMovement_OnMegablastBounce final
{
public:
	struct FHitResult                             BounceHitResult;                                   // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIsMegaBlastBouncing;                              // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1701[0x3];                                     // 0x0089(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterMovement_OnMegablastBounce) == 0x000004, "Wrong alignment on MarinerCharacterMovement_OnMegablastBounce");
static_assert(sizeof(MarinerCharacterMovement_OnMegablastBounce) == 0x00008C, "Wrong size on MarinerCharacterMovement_OnMegablastBounce");
static_assert(offsetof(MarinerCharacterMovement_OnMegablastBounce, BounceHitResult) == 0x000000, "Member 'MarinerCharacterMovement_OnMegablastBounce::BounceHitResult' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_OnMegablastBounce, bIsMegaBlastBouncing) == 0x000088, "Member 'MarinerCharacterMovement_OnMegablastBounce::bIsMegaBlastBouncing' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.RemoveRootMotion
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterMovement_RemoveRootMotion final
{
public:
	class FName                                   RootMotionName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_RemoveRootMotion) == 0x000004, "Wrong alignment on MarinerCharacterMovement_RemoveRootMotion");
static_assert(sizeof(MarinerCharacterMovement_RemoveRootMotion) == 0x000008, "Wrong size on MarinerCharacterMovement_RemoveRootMotion");
static_assert(offsetof(MarinerCharacterMovement_RemoveRootMotion, RootMotionName) == 0x000000, "Member 'MarinerCharacterMovement_RemoveRootMotion::RootMotionName' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.RemoveRootMotionSourceByNameLocal
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterMovement_RemoveRootMotionSourceByNameLocal final
{
public:
	class FName                                   MotionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_RemoveRootMotionSourceByNameLocal) == 0x000004, "Wrong alignment on MarinerCharacterMovement_RemoveRootMotionSourceByNameLocal");
static_assert(sizeof(MarinerCharacterMovement_RemoveRootMotionSourceByNameLocal) == 0x000008, "Wrong size on MarinerCharacterMovement_RemoveRootMotionSourceByNameLocal");
static_assert(offsetof(MarinerCharacterMovement_RemoveRootMotionSourceByNameLocal, MotionName) == 0x000000, "Member 'MarinerCharacterMovement_RemoveRootMotionSourceByNameLocal::MotionName' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.RootMotionLerpBetweenPoints
// 0x0048 (0x0048 - 0x0000)
struct MarinerCharacterMovement_RootMotionLerpBetweenPoints final
{
public:
	class FName                                   MotionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PositionAtZero;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNonQuantizedRotator                   RotationAtZero;                                    // 0x0014(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PositionAtOne;                                     // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNonQuantizedRotator                   RotationAtOne;                                     // 0x002C(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LerpCurve;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideMegablasts;                               // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1702[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_RootMotionLerpBetweenPoints) == 0x000008, "Wrong alignment on MarinerCharacterMovement_RootMotionLerpBetweenPoints");
static_assert(sizeof(MarinerCharacterMovement_RootMotionLerpBetweenPoints) == 0x000048, "Wrong size on MarinerCharacterMovement_RootMotionLerpBetweenPoints");
static_assert(offsetof(MarinerCharacterMovement_RootMotionLerpBetweenPoints, MotionName) == 0x000000, "Member 'MarinerCharacterMovement_RootMotionLerpBetweenPoints::MotionName' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_RootMotionLerpBetweenPoints, PositionAtZero) == 0x000008, "Member 'MarinerCharacterMovement_RootMotionLerpBetweenPoints::PositionAtZero' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_RootMotionLerpBetweenPoints, RotationAtZero) == 0x000014, "Member 'MarinerCharacterMovement_RootMotionLerpBetweenPoints::RotationAtZero' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_RootMotionLerpBetweenPoints, PositionAtOne) == 0x000020, "Member 'MarinerCharacterMovement_RootMotionLerpBetweenPoints::PositionAtOne' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_RootMotionLerpBetweenPoints, RotationAtOne) == 0x00002C, "Member 'MarinerCharacterMovement_RootMotionLerpBetweenPoints::RotationAtOne' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_RootMotionLerpBetweenPoints, LerpCurve) == 0x000038, "Member 'MarinerCharacterMovement_RootMotionLerpBetweenPoints::LerpCurve' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_RootMotionLerpBetweenPoints, bOverrideMegablasts) == 0x000040, "Member 'MarinerCharacterMovement_RootMotionLerpBetweenPoints::bOverrideMegablasts' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_RootMotionLerpBetweenPoints, ReturnValue) == 0x000044, "Member 'MarinerCharacterMovement_RootMotionLerpBetweenPoints::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.RootMotionMoveAlongCharacterSpline_ArenaReturn
// 0x0028 (0x0028 - 0x0000)
struct MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn final
{
public:
	class FName                                   MotionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssignedSplineID;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1703[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharacterMovementStartCurve;                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CharacterMovementEndCurve;                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterEndArenaReturnRotationBlendTime;          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn) == 0x000008, "Wrong alignment on MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn");
static_assert(sizeof(MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn) == 0x000028, "Wrong size on MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn");
static_assert(offsetof(MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn, MotionName) == 0x000000, "Member 'MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn::MotionName' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn, AssignedSplineID) == 0x000008, "Member 'MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn::AssignedSplineID' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn, CharacterMovementStartCurve) == 0x000010, "Member 'MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn::CharacterMovementStartCurve' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn, CharacterMovementEndCurve) == 0x000018, "Member 'MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn::CharacterMovementEndCurve' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn, CharacterEndArenaReturnRotationBlendTime) == 0x000020, "Member 'MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn::CharacterEndArenaReturnRotationBlendTime' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn, ReturnValue) == 0x000024, "Member 'MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.RootMotionSlowToStop
// 0x0020 (0x0020 - 0x0000)
struct MarinerCharacterMovement_RootMotionSlowToStop final
{
public:
	class FName                                   MotionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecelerationTime;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1704[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DecelerationCurve;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1705[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterMovement_RootMotionSlowToStop) == 0x000008, "Wrong alignment on MarinerCharacterMovement_RootMotionSlowToStop");
static_assert(sizeof(MarinerCharacterMovement_RootMotionSlowToStop) == 0x000020, "Wrong size on MarinerCharacterMovement_RootMotionSlowToStop");
static_assert(offsetof(MarinerCharacterMovement_RootMotionSlowToStop, MotionName) == 0x000000, "Member 'MarinerCharacterMovement_RootMotionSlowToStop::MotionName' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_RootMotionSlowToStop, DecelerationTime) == 0x000008, "Member 'MarinerCharacterMovement_RootMotionSlowToStop::DecelerationTime' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_RootMotionSlowToStop, DecelerationCurve) == 0x000010, "Member 'MarinerCharacterMovement_RootMotionSlowToStop::DecelerationCurve' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_RootMotionSlowToStop, ReturnValue) == 0x000018, "Member 'MarinerCharacterMovement_RootMotionSlowToStop::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.SetDodgeState
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterMovement_SetDodgeState final
{
public:
	bool                                          bInIsDodgeActive;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_SetDodgeState) == 0x000001, "Wrong alignment on MarinerCharacterMovement_SetDodgeState");
static_assert(sizeof(MarinerCharacterMovement_SetDodgeState) == 0x000001, "Wrong size on MarinerCharacterMovement_SetDodgeState");
static_assert(offsetof(MarinerCharacterMovement_SetDodgeState, bInIsDodgeActive) == 0x000000, "Member 'MarinerCharacterMovement_SetDodgeState::bInIsDodgeActive' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.SetMegablastLookRotation
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacterMovement_SetMegablastLookRotation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_SetMegablastLookRotation) == 0x000004, "Wrong alignment on MarinerCharacterMovement_SetMegablastLookRotation");
static_assert(sizeof(MarinerCharacterMovement_SetMegablastLookRotation) == 0x000004, "Wrong size on MarinerCharacterMovement_SetMegablastLookRotation");
static_assert(offsetof(MarinerCharacterMovement_SetMegablastLookRotation, DeltaTime) == 0x000000, "Member 'MarinerCharacterMovement_SetMegablastLookRotation::DeltaTime' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.GetBlastedAirborneDescendingGravityScalar
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacterMovement_GetBlastedAirborneDescendingGravityScalar final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_GetBlastedAirborneDescendingGravityScalar) == 0x000004, "Wrong alignment on MarinerCharacterMovement_GetBlastedAirborneDescendingGravityScalar");
static_assert(sizeof(MarinerCharacterMovement_GetBlastedAirborneDescendingGravityScalar) == 0x000004, "Wrong size on MarinerCharacterMovement_GetBlastedAirborneDescendingGravityScalar");
static_assert(offsetof(MarinerCharacterMovement_GetBlastedAirborneDescendingGravityScalar, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_GetBlastedAirborneDescendingGravityScalar::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.GetCurrentClientTime
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacterMovement_GetCurrentClientTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_GetCurrentClientTime) == 0x000004, "Wrong alignment on MarinerCharacterMovement_GetCurrentClientTime");
static_assert(sizeof(MarinerCharacterMovement_GetCurrentClientTime) == 0x000004, "Wrong size on MarinerCharacterMovement_GetCurrentClientTime");
static_assert(offsetof(MarinerCharacterMovement_GetCurrentClientTime, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_GetCurrentClientTime::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.GetGravityScale
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacterMovement_GetGravityScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_GetGravityScale) == 0x000004, "Wrong alignment on MarinerCharacterMovement_GetGravityScale");
static_assert(sizeof(MarinerCharacterMovement_GetGravityScale) == 0x000004, "Wrong size on MarinerCharacterMovement_GetGravityScale");
static_assert(offsetof(MarinerCharacterMovement_GetGravityScale, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_GetGravityScale::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.GetLaunchMagnitudeMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacterMovement_GetLaunchMagnitudeMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_GetLaunchMagnitudeMultiplier) == 0x000004, "Wrong alignment on MarinerCharacterMovement_GetLaunchMagnitudeMultiplier");
static_assert(sizeof(MarinerCharacterMovement_GetLaunchMagnitudeMultiplier) == 0x000004, "Wrong size on MarinerCharacterMovement_GetLaunchMagnitudeMultiplier");
static_assert(offsetof(MarinerCharacterMovement_GetLaunchMagnitudeMultiplier, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_GetLaunchMagnitudeMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.GetMarinerCharacterOwner
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterMovement_GetMarinerCharacterOwner final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_GetMarinerCharacterOwner) == 0x000008, "Wrong alignment on MarinerCharacterMovement_GetMarinerCharacterOwner");
static_assert(sizeof(MarinerCharacterMovement_GetMarinerCharacterOwner) == 0x000008, "Wrong size on MarinerCharacterMovement_GetMarinerCharacterOwner");
static_assert(offsetof(MarinerCharacterMovement_GetMarinerCharacterOwner, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_GetMarinerCharacterOwner::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.GetMaxJumpCount
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacterMovement_GetMaxJumpCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_GetMaxJumpCount) == 0x000004, "Wrong alignment on MarinerCharacterMovement_GetMaxJumpCount");
static_assert(sizeof(MarinerCharacterMovement_GetMaxJumpCount) == 0x000004, "Wrong size on MarinerCharacterMovement_GetMaxJumpCount");
static_assert(offsetof(MarinerCharacterMovement_GetMaxJumpCount, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_GetMaxJumpCount::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.GetMegablastRotation
// 0x000C (0x000C - 0x0000)
struct MarinerCharacterMovement_GetMegablastRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_GetMegablastRotation) == 0x000004, "Wrong alignment on MarinerCharacterMovement_GetMegablastRotation");
static_assert(sizeof(MarinerCharacterMovement_GetMegablastRotation) == 0x00000C, "Wrong size on MarinerCharacterMovement_GetMegablastRotation");
static_assert(offsetof(MarinerCharacterMovement_GetMegablastRotation, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_GetMegablastRotation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.GetMegablastSpeed
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacterMovement_GetMegablastSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_GetMegablastSpeed) == 0x000004, "Wrong alignment on MarinerCharacterMovement_GetMegablastSpeed");
static_assert(sizeof(MarinerCharacterMovement_GetMegablastSpeed) == 0x000004, "Wrong size on MarinerCharacterMovement_GetMegablastSpeed");
static_assert(offsetof(MarinerCharacterMovement_GetMegablastSpeed, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_GetMegablastSpeed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.GetMoveRearwardInputScaleMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacterMovement_GetMoveRearwardInputScaleMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_GetMoveRearwardInputScaleMultiplier) == 0x000004, "Wrong alignment on MarinerCharacterMovement_GetMoveRearwardInputScaleMultiplier");
static_assert(sizeof(MarinerCharacterMovement_GetMoveRearwardInputScaleMultiplier) == 0x000004, "Wrong size on MarinerCharacterMovement_GetMoveRearwardInputScaleMultiplier");
static_assert(offsetof(MarinerCharacterMovement_GetMoveRearwardInputScaleMultiplier, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_GetMoveRearwardInputScaleMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.GetSelfBlastedAirborneDescendingGravityScalar
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacterMovement_GetSelfBlastedAirborneDescendingGravityScalar final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_GetSelfBlastedAirborneDescendingGravityScalar) == 0x000004, "Wrong alignment on MarinerCharacterMovement_GetSelfBlastedAirborneDescendingGravityScalar");
static_assert(sizeof(MarinerCharacterMovement_GetSelfBlastedAirborneDescendingGravityScalar) == 0x000004, "Wrong size on MarinerCharacterMovement_GetSelfBlastedAirborneDescendingGravityScalar");
static_assert(offsetof(MarinerCharacterMovement_GetSelfBlastedAirborneDescendingGravityScalar, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_GetSelfBlastedAirborneDescendingGravityScalar::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.HasOwnerAuthority
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterMovement_HasOwnerAuthority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_HasOwnerAuthority) == 0x000001, "Wrong alignment on MarinerCharacterMovement_HasOwnerAuthority");
static_assert(sizeof(MarinerCharacterMovement_HasOwnerAuthority) == 0x000001, "Wrong size on MarinerCharacterMovement_HasOwnerAuthority");
static_assert(offsetof(MarinerCharacterMovement_HasOwnerAuthority, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_HasOwnerAuthority::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.InGroundJumpWhileFallingGracePeriod
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterMovement_InGroundJumpWhileFallingGracePeriod final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_InGroundJumpWhileFallingGracePeriod) == 0x000001, "Wrong alignment on MarinerCharacterMovement_InGroundJumpWhileFallingGracePeriod");
static_assert(sizeof(MarinerCharacterMovement_InGroundJumpWhileFallingGracePeriod) == 0x000001, "Wrong size on MarinerCharacterMovement_InGroundJumpWhileFallingGracePeriod");
static_assert(offsetof(MarinerCharacterMovement_InGroundJumpWhileFallingGracePeriod, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_InGroundJumpWhileFallingGracePeriod::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.InOverrideRootMotion
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterMovement_InOverrideRootMotion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_InOverrideRootMotion) == 0x000001, "Wrong alignment on MarinerCharacterMovement_InOverrideRootMotion");
static_assert(sizeof(MarinerCharacterMovement_InOverrideRootMotion) == 0x000001, "Wrong size on MarinerCharacterMovement_InOverrideRootMotion");
static_assert(offsetof(MarinerCharacterMovement_InOverrideRootMotion, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_InOverrideRootMotion::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.IsDynamicGravityBrakingAndFrictionDisabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterMovement_IsDynamicGravityBrakingAndFrictionDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_IsDynamicGravityBrakingAndFrictionDisabled) == 0x000001, "Wrong alignment on MarinerCharacterMovement_IsDynamicGravityBrakingAndFrictionDisabled");
static_assert(sizeof(MarinerCharacterMovement_IsDynamicGravityBrakingAndFrictionDisabled) == 0x000001, "Wrong size on MarinerCharacterMovement_IsDynamicGravityBrakingAndFrictionDisabled");
static_assert(offsetof(MarinerCharacterMovement_IsDynamicGravityBrakingAndFrictionDisabled, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_IsDynamicGravityBrakingAndFrictionDisabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.IsHitStunActiveOrPendingApply
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterMovement_IsHitStunActiveOrPendingApply final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_IsHitStunActiveOrPendingApply) == 0x000001, "Wrong alignment on MarinerCharacterMovement_IsHitStunActiveOrPendingApply");
static_assert(sizeof(MarinerCharacterMovement_IsHitStunActiveOrPendingApply) == 0x000001, "Wrong size on MarinerCharacterMovement_IsHitStunActiveOrPendingApply");
static_assert(offsetof(MarinerCharacterMovement_IsHitStunActiveOrPendingApply, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_IsHitStunActiveOrPendingApply::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.IsHitStunned
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterMovement_IsHitStunned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_IsHitStunned) == 0x000001, "Wrong alignment on MarinerCharacterMovement_IsHitStunned");
static_assert(sizeof(MarinerCharacterMovement_IsHitStunned) == 0x000001, "Wrong size on MarinerCharacterMovement_IsHitStunned");
static_assert(offsetof(MarinerCharacterMovement_IsHitStunned, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_IsHitStunned::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.IsHitStunPendingApply
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterMovement_IsHitStunPendingApply final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_IsHitStunPendingApply) == 0x000001, "Wrong alignment on MarinerCharacterMovement_IsHitStunPendingApply");
static_assert(sizeof(MarinerCharacterMovement_IsHitStunPendingApply) == 0x000001, "Wrong size on MarinerCharacterMovement_IsHitStunPendingApply");
static_assert(offsetof(MarinerCharacterMovement_IsHitStunPendingApply, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_IsHitStunPendingApply::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.IsMoveAffectingGameplayEffectPendingApply
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingApply final
{
public:
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutPendingCount;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1706[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingApply) == 0x000008, "Wrong alignment on MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingApply");
static_assert(sizeof(MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingApply) == 0x000010, "Wrong size on MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingApply");
static_assert(offsetof(MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingApply, Effect) == 0x000000, "Member 'MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingApply::Effect' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingApply, OutPendingCount) == 0x000008, "Member 'MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingApply::OutPendingCount' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingApply, ReturnValue) == 0x00000C, "Member 'MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingApply::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.IsMoveAffectingGameplayEffectPendingRemove
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingRemove final
{
public:
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutPendingCount;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1707[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingRemove) == 0x000008, "Wrong alignment on MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingRemove");
static_assert(sizeof(MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingRemove) == 0x000010, "Wrong size on MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingRemove");
static_assert(offsetof(MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingRemove, Effect) == 0x000000, "Member 'MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingRemove::Effect' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingRemove, OutPendingCount) == 0x000008, "Member 'MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingRemove::OutPendingCount' has a wrong offset!");
static_assert(offsetof(MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingRemove, ReturnValue) == 0x00000C, "Member 'MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingRemove::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.IsOwnerLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterMovement_IsOwnerLocallyControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_IsOwnerLocallyControlled) == 0x000001, "Wrong alignment on MarinerCharacterMovement_IsOwnerLocallyControlled");
static_assert(sizeof(MarinerCharacterMovement_IsOwnerLocallyControlled) == 0x000001, "Wrong size on MarinerCharacterMovement_IsOwnerLocallyControlled");
static_assert(offsetof(MarinerCharacterMovement_IsOwnerLocallyControlled, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_IsOwnerLocallyControlled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterMovement.IsReplayingMoves
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterMovement_IsReplayingMoves final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterMovement_IsReplayingMoves) == 0x000001, "Wrong alignment on MarinerCharacterMovement_IsReplayingMoves");
static_assert(sizeof(MarinerCharacterMovement_IsReplayingMoves) == 0x000001, "Wrong size on MarinerCharacterMovement_IsReplayingMoves");
static_assert(offsetof(MarinerCharacterMovement_IsReplayingMoves, ReturnValue) == 0x000000, "Member 'MarinerCharacterMovement_IsReplayingMoves::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterPinWidget.HandleMegablastEvent
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterPinWidget_HandleMegablastEvent final
{
public:
	class AMarinerPlayerState*                    MegablastInstigator;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterPinWidget_HandleMegablastEvent) == 0x000008, "Wrong alignment on MarinerCharacterPinWidget_HandleMegablastEvent");
static_assert(sizeof(MarinerCharacterPinWidget_HandleMegablastEvent) == 0x000008, "Wrong size on MarinerCharacterPinWidget_HandleMegablastEvent");
static_assert(offsetof(MarinerCharacterPinWidget_HandleMegablastEvent, MegablastInstigator) == 0x000000, "Member 'MarinerCharacterPinWidget_HandleMegablastEvent::MegablastInstigator' has a wrong offset!");

// Function Mariner.MarinerCharacterPinWidget.OnCharacterArenaReturnStateChanged
// 0x0002 (0x0002 - 0x0000)
struct MarinerCharacterPinWidget_OnCharacterArenaReturnStateChanged final
{
public:
	EMarinerArenaReturnState                      PreviousState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerArenaReturnState                      NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterPinWidget_OnCharacterArenaReturnStateChanged) == 0x000001, "Wrong alignment on MarinerCharacterPinWidget_OnCharacterArenaReturnStateChanged");
static_assert(sizeof(MarinerCharacterPinWidget_OnCharacterArenaReturnStateChanged) == 0x000002, "Wrong size on MarinerCharacterPinWidget_OnCharacterArenaReturnStateChanged");
static_assert(offsetof(MarinerCharacterPinWidget_OnCharacterArenaReturnStateChanged, PreviousState) == 0x000000, "Member 'MarinerCharacterPinWidget_OnCharacterArenaReturnStateChanged::PreviousState' has a wrong offset!");
static_assert(offsetof(MarinerCharacterPinWidget_OnCharacterArenaReturnStateChanged, NewState) == 0x000001, "Member 'MarinerCharacterPinWidget_OnCharacterArenaReturnStateChanged::NewState' has a wrong offset!");

// Function Mariner.MarinerCharacterPinWidget.OnInNameViewConeChanged
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterPinWidget_OnInNameViewConeChanged final
{
public:
	bool                                          bInNameViewCone;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterPinWidget_OnInNameViewConeChanged) == 0x000001, "Wrong alignment on MarinerCharacterPinWidget_OnInNameViewConeChanged");
static_assert(sizeof(MarinerCharacterPinWidget_OnInNameViewConeChanged) == 0x000001, "Wrong size on MarinerCharacterPinWidget_OnInNameViewConeChanged");
static_assert(offsetof(MarinerCharacterPinWidget_OnInNameViewConeChanged, bInNameViewCone) == 0x000000, "Member 'MarinerCharacterPinWidget_OnInNameViewConeChanged::bInNameViewCone' has a wrong offset!");

// Function Mariner.MarinerCharacterPinWidget.OnIntersectsAimRayChanged
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterPinWidget_OnIntersectsAimRayChanged final
{
public:
	bool                                          bIntersectsAimRay;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterPinWidget_OnIntersectsAimRayChanged) == 0x000001, "Wrong alignment on MarinerCharacterPinWidget_OnIntersectsAimRayChanged");
static_assert(sizeof(MarinerCharacterPinWidget_OnIntersectsAimRayChanged) == 0x000001, "Wrong size on MarinerCharacterPinWidget_OnIntersectsAimRayChanged");
static_assert(offsetof(MarinerCharacterPinWidget_OnIntersectsAimRayChanged, bIntersectsAimRay) == 0x000000, "Member 'MarinerCharacterPinWidget_OnIntersectsAimRayChanged::bIntersectsAimRay' has a wrong offset!");

// Function Mariner.MarinerCharacterPinWidget.OnTrackedPlayerChangedTeams
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterPinWidget_OnTrackedPlayerChangedTeams final
{
public:
	class AMarinerPlayerState*                    TrackedPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterPinWidget_OnTrackedPlayerChangedTeams) == 0x000008, "Wrong alignment on MarinerCharacterPinWidget_OnTrackedPlayerChangedTeams");
static_assert(sizeof(MarinerCharacterPinWidget_OnTrackedPlayerChangedTeams) == 0x000008, "Wrong size on MarinerCharacterPinWidget_OnTrackedPlayerChangedTeams");
static_assert(offsetof(MarinerCharacterPinWidget_OnTrackedPlayerChangedTeams, TrackedPlayerState) == 0x000000, "Member 'MarinerCharacterPinWidget_OnTrackedPlayerChangedTeams::TrackedPlayerState' has a wrong offset!");

// Function Mariner.MarinerCharacterPinWidget.SetActionText
// 0x0018 (0x0018 - 0x0000)
struct MarinerCharacterPinWidget_SetActionText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterPinWidget_SetActionText) == 0x000008, "Wrong alignment on MarinerCharacterPinWidget_SetActionText");
static_assert(sizeof(MarinerCharacterPinWidget_SetActionText) == 0x000018, "Wrong size on MarinerCharacterPinWidget_SetActionText");
static_assert(offsetof(MarinerCharacterPinWidget_SetActionText, Text) == 0x000000, "Member 'MarinerCharacterPinWidget_SetActionText::Text' has a wrong offset!");

// Function Mariner.MarinerCharacterPinWidget.SetForcedOn
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterPinWidget_SetForcedOn final
{
public:
	bool                                          bForcedOn;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterPinWidget_SetForcedOn) == 0x000001, "Wrong alignment on MarinerCharacterPinWidget_SetForcedOn");
static_assert(sizeof(MarinerCharacterPinWidget_SetForcedOn) == 0x000001, "Wrong size on MarinerCharacterPinWidget_SetForcedOn");
static_assert(offsetof(MarinerCharacterPinWidget_SetForcedOn, bForcedOn) == 0x000000, "Member 'MarinerCharacterPinWidget_SetForcedOn::bForcedOn' has a wrong offset!");

// Function Mariner.MarinerCharacterPinWidget.SetGameModeWidget
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacterPinWidget_SetGameModeWidget final
{
public:
	TSubclassOf<class UMarinerPinGameModeWidget>  GameModeWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterPinWidget_SetGameModeWidget) == 0x000008, "Wrong alignment on MarinerCharacterPinWidget_SetGameModeWidget");
static_assert(sizeof(MarinerCharacterPinWidget_SetGameModeWidget) == 0x000010, "Wrong size on MarinerCharacterPinWidget_SetGameModeWidget");
static_assert(offsetof(MarinerCharacterPinWidget_SetGameModeWidget, GameModeWidget) == 0x000000, "Member 'MarinerCharacterPinWidget_SetGameModeWidget::GameModeWidget' has a wrong offset!");
static_assert(offsetof(MarinerCharacterPinWidget_SetGameModeWidget, PlayerState) == 0x000008, "Member 'MarinerCharacterPinWidget_SetGameModeWidget::PlayerState' has a wrong offset!");

// Function Mariner.MarinerCharacterPinWidget.SetIcon
// 0x0090 (0x0090 - 0x0000)
struct MarinerCharacterPinWidget_SetIcon final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bForcesPinVisible;                                 // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImageCanDim;                                      // 0x0089(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_170A[0x6];                                     // 0x008A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterPinWidget_SetIcon) == 0x000008, "Wrong alignment on MarinerCharacterPinWidget_SetIcon");
static_assert(sizeof(MarinerCharacterPinWidget_SetIcon) == 0x000090, "Wrong size on MarinerCharacterPinWidget_SetIcon");
static_assert(offsetof(MarinerCharacterPinWidget_SetIcon, Brush) == 0x000000, "Member 'MarinerCharacterPinWidget_SetIcon::Brush' has a wrong offset!");
static_assert(offsetof(MarinerCharacterPinWidget_SetIcon, bForcesPinVisible) == 0x000088, "Member 'MarinerCharacterPinWidget_SetIcon::bForcesPinVisible' has a wrong offset!");
static_assert(offsetof(MarinerCharacterPinWidget_SetIcon, bImageCanDim) == 0x000089, "Member 'MarinerCharacterPinWidget_SetIcon::bImageCanDim' has a wrong offset!");

// Function Mariner.MarinerCharacterPinWidget.GetCharacterArenaReturnState
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterPinWidget_GetCharacterArenaReturnState final
{
public:
	EMarinerArenaReturnState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterPinWidget_GetCharacterArenaReturnState) == 0x000001, "Wrong alignment on MarinerCharacterPinWidget_GetCharacterArenaReturnState");
static_assert(sizeof(MarinerCharacterPinWidget_GetCharacterArenaReturnState) == 0x000001, "Wrong size on MarinerCharacterPinWidget_GetCharacterArenaReturnState");
static_assert(offsetof(MarinerCharacterPinWidget_GetCharacterArenaReturnState, ReturnValue) == 0x000000, "Member 'MarinerCharacterPinWidget_GetCharacterArenaReturnState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterPinWidget.GetCharacterReference
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterPinWidget_GetCharacterReference final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterPinWidget_GetCharacterReference) == 0x000008, "Wrong alignment on MarinerCharacterPinWidget_GetCharacterReference");
static_assert(sizeof(MarinerCharacterPinWidget_GetCharacterReference) == 0x000008, "Wrong size on MarinerCharacterPinWidget_GetCharacterReference");
static_assert(offsetof(MarinerCharacterPinWidget_GetCharacterReference, ReturnValue) == 0x000000, "Member 'MarinerCharacterPinWidget_GetCharacterReference::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterPinWidget.IsInNameViewCone
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterPinWidget_IsInNameViewCone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterPinWidget_IsInNameViewCone) == 0x000001, "Wrong alignment on MarinerCharacterPinWidget_IsInNameViewCone");
static_assert(sizeof(MarinerCharacterPinWidget_IsInNameViewCone) == 0x000001, "Wrong size on MarinerCharacterPinWidget_IsInNameViewCone");
static_assert(offsetof(MarinerCharacterPinWidget_IsInNameViewCone, ReturnValue) == 0x000000, "Member 'MarinerCharacterPinWidget_IsInNameViewCone::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterPinWidget.IsIntersectingAimRay
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterPinWidget_IsIntersectingAimRay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterPinWidget_IsIntersectingAimRay) == 0x000001, "Wrong alignment on MarinerCharacterPinWidget_IsIntersectingAimRay");
static_assert(sizeof(MarinerCharacterPinWidget_IsIntersectingAimRay) == 0x000001, "Wrong size on MarinerCharacterPinWidget_IsIntersectingAimRay");
static_assert(offsetof(MarinerCharacterPinWidget_IsIntersectingAimRay, ReturnValue) == 0x000000, "Member 'MarinerCharacterPinWidget_IsIntersectingAimRay::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterProgressionButton.InitCharacterProgression
// 0x0028 (0x0028 - 0x0000)
struct MarinerCharacterProgressionButton_InitCharacterProgression final
{
public:
	int32                                         RewardLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_170B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoProgressionCharacterLevelReward  CharacterReward;                                   // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterProgressionButton_InitCharacterProgression) == 0x000008, "Wrong alignment on MarinerCharacterProgressionButton_InitCharacterProgression");
static_assert(sizeof(MarinerCharacterProgressionButton_InitCharacterProgression) == 0x000028, "Wrong size on MarinerCharacterProgressionButton_InitCharacterProgression");
static_assert(offsetof(MarinerCharacterProgressionButton_InitCharacterProgression, RewardLevel) == 0x000000, "Member 'MarinerCharacterProgressionButton_InitCharacterProgression::RewardLevel' has a wrong offset!");
static_assert(offsetof(MarinerCharacterProgressionButton_InitCharacterProgression, CharacterReward) == 0x000008, "Member 'MarinerCharacterProgressionButton_InitCharacterProgression::CharacterReward' has a wrong offset!");

// Function Mariner.MarinerReturnRocketLaunchpad.OnDestruction
// 0x0008 (0x0008 - 0x0000)
struct MarinerReturnRocketLaunchpad_OnDestruction final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerReturnRocketLaunchpad_OnDestruction) == 0x000008, "Wrong alignment on MarinerReturnRocketLaunchpad_OnDestruction");
static_assert(sizeof(MarinerReturnRocketLaunchpad_OnDestruction) == 0x000008, "Wrong size on MarinerReturnRocketLaunchpad_OnDestruction");
static_assert(offsetof(MarinerReturnRocketLaunchpad_OnDestruction, DestroyedActor) == 0x000000, "Member 'MarinerReturnRocketLaunchpad_OnDestruction::DestroyedActor' has a wrong offset!");

// Function Mariner.MarinerReturnRocketLaunchpad.GetLaunchLocation
// 0x000C (0x000C - 0x0000)
struct MarinerReturnRocketLaunchpad_GetLaunchLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerReturnRocketLaunchpad_GetLaunchLocation) == 0x000004, "Wrong alignment on MarinerReturnRocketLaunchpad_GetLaunchLocation");
static_assert(sizeof(MarinerReturnRocketLaunchpad_GetLaunchLocation) == 0x00000C, "Wrong size on MarinerReturnRocketLaunchpad_GetLaunchLocation");
static_assert(offsetof(MarinerReturnRocketLaunchpad_GetLaunchLocation, ReturnValue) == 0x000000, "Member 'MarinerReturnRocketLaunchpad_GetLaunchLocation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerReturnRocketLaunchpad.GetLaunchRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct MarinerReturnRocketLaunchpad_GetLaunchRotationYaw final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerReturnRocketLaunchpad_GetLaunchRotationYaw) == 0x000004, "Wrong alignment on MarinerReturnRocketLaunchpad_GetLaunchRotationYaw");
static_assert(sizeof(MarinerReturnRocketLaunchpad_GetLaunchRotationYaw) == 0x000004, "Wrong size on MarinerReturnRocketLaunchpad_GetLaunchRotationYaw");
static_assert(offsetof(MarinerReturnRocketLaunchpad_GetLaunchRotationYaw, ReturnValue) == 0x000000, "Member 'MarinerReturnRocketLaunchpad_GetLaunchRotationYaw::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerReturnRocketLaunchpad.MulticastPrepareCharacterForLaunch
// 0x0008 (0x0008 - 0x0000)
struct MarinerReturnRocketLaunchpad_MulticastPrepareCharacterForLaunch final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerReturnRocketLaunchpad_MulticastPrepareCharacterForLaunch) == 0x000008, "Wrong alignment on MarinerReturnRocketLaunchpad_MulticastPrepareCharacterForLaunch");
static_assert(sizeof(MarinerReturnRocketLaunchpad_MulticastPrepareCharacterForLaunch) == 0x000008, "Wrong size on MarinerReturnRocketLaunchpad_MulticastPrepareCharacterForLaunch");
static_assert(offsetof(MarinerReturnRocketLaunchpad_MulticastPrepareCharacterForLaunch, Character) == 0x000000, "Member 'MarinerReturnRocketLaunchpad_MulticastPrepareCharacterForLaunch::Character' has a wrong offset!");

// Function Mariner.MarinerItemLoaderButtonBase.LoadAndPopulate
// 0x0098 (0x0098 - 0x0000)
struct MarinerItemLoaderButtonBase_LoadAndPopulate final
{
public:
	class UTextBlock*                             InAuxText;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             InAuxDesc;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             InRarityText;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 InItemImage;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 InTotemImage;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 InRarityImage;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 InRaritySymbol;                                    // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 InNameImage;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            InLoadingSpinner;                                  // 0x0040(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoItem                             InItem;                                            // 0x0048(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemLoaderButtonBase_LoadAndPopulate) == 0x000008, "Wrong alignment on MarinerItemLoaderButtonBase_LoadAndPopulate");
static_assert(sizeof(MarinerItemLoaderButtonBase_LoadAndPopulate) == 0x000098, "Wrong size on MarinerItemLoaderButtonBase_LoadAndPopulate");
static_assert(offsetof(MarinerItemLoaderButtonBase_LoadAndPopulate, InAuxText) == 0x000000, "Member 'MarinerItemLoaderButtonBase_LoadAndPopulate::InAuxText' has a wrong offset!");
static_assert(offsetof(MarinerItemLoaderButtonBase_LoadAndPopulate, InAuxDesc) == 0x000008, "Member 'MarinerItemLoaderButtonBase_LoadAndPopulate::InAuxDesc' has a wrong offset!");
static_assert(offsetof(MarinerItemLoaderButtonBase_LoadAndPopulate, InRarityText) == 0x000010, "Member 'MarinerItemLoaderButtonBase_LoadAndPopulate::InRarityText' has a wrong offset!");
static_assert(offsetof(MarinerItemLoaderButtonBase_LoadAndPopulate, InItemImage) == 0x000018, "Member 'MarinerItemLoaderButtonBase_LoadAndPopulate::InItemImage' has a wrong offset!");
static_assert(offsetof(MarinerItemLoaderButtonBase_LoadAndPopulate, InTotemImage) == 0x000020, "Member 'MarinerItemLoaderButtonBase_LoadAndPopulate::InTotemImage' has a wrong offset!");
static_assert(offsetof(MarinerItemLoaderButtonBase_LoadAndPopulate, InRarityImage) == 0x000028, "Member 'MarinerItemLoaderButtonBase_LoadAndPopulate::InRarityImage' has a wrong offset!");
static_assert(offsetof(MarinerItemLoaderButtonBase_LoadAndPopulate, InRaritySymbol) == 0x000030, "Member 'MarinerItemLoaderButtonBase_LoadAndPopulate::InRaritySymbol' has a wrong offset!");
static_assert(offsetof(MarinerItemLoaderButtonBase_LoadAndPopulate, InNameImage) == 0x000038, "Member 'MarinerItemLoaderButtonBase_LoadAndPopulate::InNameImage' has a wrong offset!");
static_assert(offsetof(MarinerItemLoaderButtonBase_LoadAndPopulate, InLoadingSpinner) == 0x000040, "Member 'MarinerItemLoaderButtonBase_LoadAndPopulate::InLoadingSpinner' has a wrong offset!");
static_assert(offsetof(MarinerItemLoaderButtonBase_LoadAndPopulate, InItem) == 0x000048, "Member 'MarinerItemLoaderButtonBase_LoadAndPopulate::InItem' has a wrong offset!");

// Function Mariner.MarinerItemLoaderButtonBase.PopulateCharacterIcon
// 0x0088 (0x0088 - 0x0000)
struct MarinerItemLoaderButtonBase_PopulateCharacterIcon final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemLoaderButtonBase_PopulateCharacterIcon) == 0x000008, "Wrong alignment on MarinerItemLoaderButtonBase_PopulateCharacterIcon");
static_assert(sizeof(MarinerItemLoaderButtonBase_PopulateCharacterIcon) == 0x000088, "Wrong size on MarinerItemLoaderButtonBase_PopulateCharacterIcon");
static_assert(offsetof(MarinerItemLoaderButtonBase_PopulateCharacterIcon, Brush) == 0x000000, "Member 'MarinerItemLoaderButtonBase_PopulateCharacterIcon::Brush' has a wrong offset!");

// Function Mariner.MarinerItemLoaderButtonBase.PopulateDefaultIcon
// 0x00A0 (0x00A0 - 0x0000)
struct MarinerItemLoaderButtonBase_PopulateDefaultIcon final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UImage*                                 InItemImage;                                       // 0x0088(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 InTotemImage;                                      // 0x0090(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 InNameIcon;                                        // 0x0098(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemLoaderButtonBase_PopulateDefaultIcon) == 0x000008, "Wrong alignment on MarinerItemLoaderButtonBase_PopulateDefaultIcon");
static_assert(sizeof(MarinerItemLoaderButtonBase_PopulateDefaultIcon) == 0x0000A0, "Wrong size on MarinerItemLoaderButtonBase_PopulateDefaultIcon");
static_assert(offsetof(MarinerItemLoaderButtonBase_PopulateDefaultIcon, Brush) == 0x000000, "Member 'MarinerItemLoaderButtonBase_PopulateDefaultIcon::Brush' has a wrong offset!");
static_assert(offsetof(MarinerItemLoaderButtonBase_PopulateDefaultIcon, InItemImage) == 0x000088, "Member 'MarinerItemLoaderButtonBase_PopulateDefaultIcon::InItemImage' has a wrong offset!");
static_assert(offsetof(MarinerItemLoaderButtonBase_PopulateDefaultIcon, InTotemImage) == 0x000090, "Member 'MarinerItemLoaderButtonBase_PopulateDefaultIcon::InTotemImage' has a wrong offset!");
static_assert(offsetof(MarinerItemLoaderButtonBase_PopulateDefaultIcon, InNameIcon) == 0x000098, "Member 'MarinerItemLoaderButtonBase_PopulateDefaultIcon::InNameIcon' has a wrong offset!");

// Function Mariner.MarinerCharacterProgressionWidget.Init
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterProgressionWidget_Init final
{
public:
	class UMarinerPlayableCharacter*              Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterProgressionWidget_Init) == 0x000008, "Wrong alignment on MarinerCharacterProgressionWidget_Init");
static_assert(sizeof(MarinerCharacterProgressionWidget_Init) == 0x000008, "Wrong size on MarinerCharacterProgressionWidget_Init");
static_assert(offsetof(MarinerCharacterProgressionWidget_Init, Character) == 0x000000, "Member 'MarinerCharacterProgressionWidget_Init::Character' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectButton.SetButtonsCharacterData
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacterSelectButton_SetButtonsCharacterData final
{
public:
	class UMarinerPlayableCharacter*              InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerCharacterLockState                    InLockState;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAllowUnviewedFlag;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEnableGamepadAutoSelect;                        // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1711[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterSelectButton_SetButtonsCharacterData) == 0x000008, "Wrong alignment on MarinerCharacterSelectButton_SetButtonsCharacterData");
static_assert(sizeof(MarinerCharacterSelectButton_SetButtonsCharacterData) == 0x000010, "Wrong size on MarinerCharacterSelectButton_SetButtonsCharacterData");
static_assert(offsetof(MarinerCharacterSelectButton_SetButtonsCharacterData, InCharacter) == 0x000000, "Member 'MarinerCharacterSelectButton_SetButtonsCharacterData::InCharacter' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSelectButton_SetButtonsCharacterData, InLockState) == 0x000008, "Member 'MarinerCharacterSelectButton_SetButtonsCharacterData::InLockState' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSelectButton_SetButtonsCharacterData, bInAllowUnviewedFlag) == 0x000009, "Member 'MarinerCharacterSelectButton_SetButtonsCharacterData::bInAllowUnviewedFlag' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSelectButton_SetButtonsCharacterData, bInEnableGamepadAutoSelect) == 0x00000A, "Member 'MarinerCharacterSelectButton_SetButtonsCharacterData::bInEnableGamepadAutoSelect' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectButton.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSelectButton_GetCharacter final
{
public:
	class UMarinerPlayableCharacter*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectButton_GetCharacter) == 0x000008, "Wrong alignment on MarinerCharacterSelectButton_GetCharacter");
static_assert(sizeof(MarinerCharacterSelectButton_GetCharacter) == 0x000008, "Wrong size on MarinerCharacterSelectButton_GetCharacter");
static_assert(offsetof(MarinerCharacterSelectButton_GetCharacter, ReturnValue) == 0x000000, "Member 'MarinerCharacterSelectButton_GetCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectButton.GetCharacterLockStateSFX
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSelectButton_GetCharacterLockStateSFX final
{
public:
	class UAkAudioEvent*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectButton_GetCharacterLockStateSFX) == 0x000008, "Wrong alignment on MarinerCharacterSelectButton_GetCharacterLockStateSFX");
static_assert(sizeof(MarinerCharacterSelectButton_GetCharacterLockStateSFX) == 0x000008, "Wrong size on MarinerCharacterSelectButton_GetCharacterLockStateSFX");
static_assert(offsetof(MarinerCharacterSelectButton_GetCharacterLockStateSFX, ReturnValue) == 0x000000, "Member 'MarinerCharacterSelectButton_GetCharacterLockStateSFX::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectButton.GetCharacterSelectedSFX
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSelectButton_GetCharacterSelectedSFX final
{
public:
	class UAkAudioEvent*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectButton_GetCharacterSelectedSFX) == 0x000008, "Wrong alignment on MarinerCharacterSelectButton_GetCharacterSelectedSFX");
static_assert(sizeof(MarinerCharacterSelectButton_GetCharacterSelectedSFX) == 0x000008, "Wrong size on MarinerCharacterSelectButton_GetCharacterSelectedSFX");
static_assert(offsetof(MarinerCharacterSelectButton_GetCharacterSelectedSFX, ReturnValue) == 0x000000, "Member 'MarinerCharacterSelectButton_GetCharacterSelectedSFX::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSkinnedSelectedCharacterWidget.DisplayData
// 0x0020 (0x0020 - 0x0000)
struct MarinerSkinnedSelectedCharacterWidget_DisplayData final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerSkinCollectionDataAsset*        ActiveSkin;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1712[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerArtifactDataAsset*              Artifact;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinnedSelectedCharacterWidget_DisplayData) == 0x000008, "Wrong alignment on MarinerSkinnedSelectedCharacterWidget_DisplayData");
static_assert(sizeof(MarinerSkinnedSelectedCharacterWidget_DisplayData) == 0x000020, "Wrong size on MarinerSkinnedSelectedCharacterWidget_DisplayData");
static_assert(offsetof(MarinerSkinnedSelectedCharacterWidget_DisplayData, PlayerState) == 0x000000, "Member 'MarinerSkinnedSelectedCharacterWidget_DisplayData::PlayerState' has a wrong offset!");
static_assert(offsetof(MarinerSkinnedSelectedCharacterWidget_DisplayData, ActiveSkin) == 0x000008, "Member 'MarinerSkinnedSelectedCharacterWidget_DisplayData::ActiveSkin' has a wrong offset!");
static_assert(offsetof(MarinerSkinnedSelectedCharacterWidget_DisplayData, Level) == 0x000010, "Member 'MarinerSkinnedSelectedCharacterWidget_DisplayData::Level' has a wrong offset!");
static_assert(offsetof(MarinerSkinnedSelectedCharacterWidget_DisplayData, Artifact) == 0x000018, "Member 'MarinerSkinnedSelectedCharacterWidget_DisplayData::Artifact' has a wrong offset!");

// Function Mariner.MarinerSkinnedSelectedCharacterWidget.GetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct MarinerSkinnedSelectedCharacterWidget_GetPlayerState final
{
public:
	class AMarinerPlayerState*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinnedSelectedCharacterWidget_GetPlayerState) == 0x000008, "Wrong alignment on MarinerSkinnedSelectedCharacterWidget_GetPlayerState");
static_assert(sizeof(MarinerSkinnedSelectedCharacterWidget_GetPlayerState) == 0x000008, "Wrong size on MarinerSkinnedSelectedCharacterWidget_GetPlayerState");
static_assert(offsetof(MarinerSkinnedSelectedCharacterWidget_GetPlayerState, ReturnValue) == 0x000000, "Member 'MarinerSkinnedSelectedCharacterWidget_GetPlayerState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSkinnedSelectedCharacterWidget.OnOwnerSelectedCharacterChanged
// 0x0010 (0x0010 - 0x0000)
struct MarinerSkinnedSelectedCharacterWidget_OnOwnerSelectedCharacterChanged final
{
public:
	class FString                                 SelectedCharacter;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinnedSelectedCharacterWidget_OnOwnerSelectedCharacterChanged) == 0x000008, "Wrong alignment on MarinerSkinnedSelectedCharacterWidget_OnOwnerSelectedCharacterChanged");
static_assert(sizeof(MarinerSkinnedSelectedCharacterWidget_OnOwnerSelectedCharacterChanged) == 0x000010, "Wrong size on MarinerSkinnedSelectedCharacterWidget_OnOwnerSelectedCharacterChanged");
static_assert(offsetof(MarinerSkinnedSelectedCharacterWidget_OnOwnerSelectedCharacterChanged, SelectedCharacter) == 0x000000, "Member 'MarinerSkinnedSelectedCharacterWidget_OnOwnerSelectedCharacterChanged::SelectedCharacter' has a wrong offset!");

// Function Mariner.MarinerSkinnedSelectedCharacterWidget.SetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct MarinerSkinnedSelectedCharacterWidget_SetPlayerState final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinnedSelectedCharacterWidget_SetPlayerState) == 0x000008, "Wrong alignment on MarinerSkinnedSelectedCharacterWidget_SetPlayerState");
static_assert(sizeof(MarinerSkinnedSelectedCharacterWidget_SetPlayerState) == 0x000008, "Wrong size on MarinerSkinnedSelectedCharacterWidget_SetPlayerState");
static_assert(offsetof(MarinerSkinnedSelectedCharacterWidget_SetPlayerState, PlayerState) == 0x000000, "Member 'MarinerSkinnedSelectedCharacterWidget_SetPlayerState::PlayerState' has a wrong offset!");

// Function Mariner.MarinerGameState.AddImportantThrowTarget
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameState_AddImportantThrowTarget final
{
public:
	class AActor*                                 ThrowTargetActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetForTeamIndex;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1721[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGameState_AddImportantThrowTarget) == 0x000008, "Wrong alignment on MarinerGameState_AddImportantThrowTarget");
static_assert(sizeof(MarinerGameState_AddImportantThrowTarget) == 0x000010, "Wrong size on MarinerGameState_AddImportantThrowTarget");
static_assert(offsetof(MarinerGameState_AddImportantThrowTarget, ThrowTargetActor) == 0x000000, "Member 'MarinerGameState_AddImportantThrowTarget::ThrowTargetActor' has a wrong offset!");
static_assert(offsetof(MarinerGameState_AddImportantThrowTarget, TargetForTeamIndex) == 0x000008, "Member 'MarinerGameState_AddImportantThrowTarget::TargetForTeamIndex' has a wrong offset!");

// Function Mariner.MarinerGameState.AuthorityApplyModeHUDState
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameState_AuthorityApplyModeHUDState final
{
public:
	TSubclassOf<class UMarinerHUDState>           State;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_AuthorityApplyModeHUDState) == 0x000008, "Wrong alignment on MarinerGameState_AuthorityApplyModeHUDState");
static_assert(sizeof(MarinerGameState_AuthorityApplyModeHUDState) == 0x000008, "Wrong size on MarinerGameState_AuthorityApplyModeHUDState");
static_assert(offsetof(MarinerGameState_AuthorityApplyModeHUDState, State) == 0x000000, "Member 'MarinerGameState_AuthorityApplyModeHUDState::State' has a wrong offset!");

// Function Mariner.MarinerGameState.AuthorityRecordFloatKnockoutAnalytic
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameState_AuthorityRecordFloatKnockoutAnalytic final
{
public:
	EMarinerKnockoutAnalyticEntries               AnalyticToRecord;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1722[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_AuthorityRecordFloatKnockoutAnalytic) == 0x000004, "Wrong alignment on MarinerGameState_AuthorityRecordFloatKnockoutAnalytic");
static_assert(sizeof(MarinerGameState_AuthorityRecordFloatKnockoutAnalytic) == 0x000008, "Wrong size on MarinerGameState_AuthorityRecordFloatKnockoutAnalytic");
static_assert(offsetof(MarinerGameState_AuthorityRecordFloatKnockoutAnalytic, AnalyticToRecord) == 0x000000, "Member 'MarinerGameState_AuthorityRecordFloatKnockoutAnalytic::AnalyticToRecord' has a wrong offset!");
static_assert(offsetof(MarinerGameState_AuthorityRecordFloatKnockoutAnalytic, Value) == 0x000004, "Member 'MarinerGameState_AuthorityRecordFloatKnockoutAnalytic::Value' has a wrong offset!");

// Function Mariner.MarinerGameState.AuthorityRecordRocketballGoalAnalytic
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameState_AuthorityRecordRocketballGoalAnalytic final
{
public:
	EMarinerRocketballGoalType                    GoalType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_AuthorityRecordRocketballGoalAnalytic) == 0x000001, "Wrong alignment on MarinerGameState_AuthorityRecordRocketballGoalAnalytic");
static_assert(sizeof(MarinerGameState_AuthorityRecordRocketballGoalAnalytic) == 0x000001, "Wrong size on MarinerGameState_AuthorityRecordRocketballGoalAnalytic");
static_assert(offsetof(MarinerGameState_AuthorityRecordRocketballGoalAnalytic, GoalType) == 0x000000, "Member 'MarinerGameState_AuthorityRecordRocketballGoalAnalytic::GoalType' has a wrong offset!");

// Function Mariner.MarinerGameState.AuthorityRecordRocketballResetAnalytic
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameState_AuthorityRecordRocketballResetAnalytic final
{
public:
	EMarinerRocketballResetType                   ResetType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_AuthorityRecordRocketballResetAnalytic) == 0x000001, "Wrong alignment on MarinerGameState_AuthorityRecordRocketballResetAnalytic");
static_assert(sizeof(MarinerGameState_AuthorityRecordRocketballResetAnalytic) == 0x000001, "Wrong size on MarinerGameState_AuthorityRecordRocketballResetAnalytic");
static_assert(offsetof(MarinerGameState_AuthorityRecordRocketballResetAnalytic, ResetType) == 0x000000, "Member 'MarinerGameState_AuthorityRecordRocketballResetAnalytic::ResetType' has a wrong offset!");

// Function Mariner.MarinerGameState.AuthorityRemoveModeHUDState
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameState_AuthorityRemoveModeHUDState final
{
public:
	TSubclassOf<class UMarinerHUDState>           State;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_AuthorityRemoveModeHUDState) == 0x000008, "Wrong alignment on MarinerGameState_AuthorityRemoveModeHUDState");
static_assert(sizeof(MarinerGameState_AuthorityRemoveModeHUDState) == 0x000008, "Wrong size on MarinerGameState_AuthorityRemoveModeHUDState");
static_assert(offsetof(MarinerGameState_AuthorityRemoveModeHUDState, State) == 0x000000, "Member 'MarinerGameState_AuthorityRemoveModeHUDState::State' has a wrong offset!");

// Function Mariner.MarinerGameState.AwardPointsToTeam
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameState_AwardPointsToTeam final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointsToAward;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_AwardPointsToTeam) == 0x000004, "Wrong alignment on MarinerGameState_AwardPointsToTeam");
static_assert(sizeof(MarinerGameState_AwardPointsToTeam) == 0x000008, "Wrong size on MarinerGameState_AwardPointsToTeam");
static_assert(offsetof(MarinerGameState_AwardPointsToTeam, TeamIndex) == 0x000000, "Member 'MarinerGameState_AwardPointsToTeam::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerGameState_AwardPointsToTeam, PointsToAward) == 0x000004, "Member 'MarinerGameState_AwardPointsToTeam::PointsToAward' has a wrong offset!");

// Function Mariner.MarinerGameState.EnableWorldUILevel
// 0x0014 (0x0014 - 0x0000)
struct MarinerGameState_EnableWorldUILevel final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1723[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bIsVisible)>              OnComplete;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_EnableWorldUILevel) == 0x000004, "Wrong alignment on MarinerGameState_EnableWorldUILevel");
static_assert(sizeof(MarinerGameState_EnableWorldUILevel) == 0x000014, "Wrong size on MarinerGameState_EnableWorldUILevel");
static_assert(offsetof(MarinerGameState_EnableWorldUILevel, bEnabled) == 0x000000, "Member 'MarinerGameState_EnableWorldUILevel::bEnabled' has a wrong offset!");
static_assert(offsetof(MarinerGameState_EnableWorldUILevel, OnComplete) == 0x000004, "Member 'MarinerGameState_EnableWorldUILevel::OnComplete' has a wrong offset!");

// Function Mariner.MarinerGameState.GetFastCollisionManager
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameState_GetFastCollisionManager final
{
public:
	class UFastCollisionManager*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetFastCollisionManager) == 0x000008, "Wrong alignment on MarinerGameState_GetFastCollisionManager");
static_assert(sizeof(MarinerGameState_GetFastCollisionManager) == 0x000008, "Wrong size on MarinerGameState_GetFastCollisionManager");
static_assert(offsetof(MarinerGameState_GetFastCollisionManager, ReturnValue) == 0x000000, "Member 'MarinerGameState_GetFastCollisionManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetPoolingManager
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameState_GetPoolingManager final
{
public:
	class UMarinerPoolingManager*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetPoolingManager) == 0x000008, "Wrong alignment on MarinerGameState_GetPoolingManager");
static_assert(sizeof(MarinerGameState_GetPoolingManager) == 0x000008, "Wrong size on MarinerGameState_GetPoolingManager");
static_assert(offsetof(MarinerGameState_GetPoolingManager, ReturnValue) == 0x000000, "Member 'MarinerGameState_GetPoolingManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetPregameState
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameState_GetPregameState final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetPregameState) == 0x000004, "Wrong alignment on MarinerGameState_GetPregameState");
static_assert(sizeof(MarinerGameState_GetPregameState) == 0x000008, "Wrong size on MarinerGameState_GetPregameState");
static_assert(offsetof(MarinerGameState_GetPregameState, ReturnValue) == 0x000000, "Member 'MarinerGameState_GetPregameState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetTeamScore
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameState_GetTeamScore final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetTeamScore) == 0x000004, "Wrong alignment on MarinerGameState_GetTeamScore");
static_assert(sizeof(MarinerGameState_GetTeamScore) == 0x000008, "Wrong size on MarinerGameState_GetTeamScore");
static_assert(offsetof(MarinerGameState_GetTeamScore, TeamIndex) == 0x000000, "Member 'MarinerGameState_GetTeamScore::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerGameState_GetTeamScore, ReturnValue) == 0x000004, "Member 'MarinerGameState_GetTeamScore::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.HACK_UpdateBlastballParticleSystems
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameState_HACK_UpdateBlastballParticleSystems final
{
public:
	TArray<class UParticleSystemComponent*>       ParticleSystemComponentsToUpdate;                  // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_HACK_UpdateBlastballParticleSystems) == 0x000008, "Wrong alignment on MarinerGameState_HACK_UpdateBlastballParticleSystems");
static_assert(sizeof(MarinerGameState_HACK_UpdateBlastballParticleSystems) == 0x000010, "Wrong size on MarinerGameState_HACK_UpdateBlastballParticleSystems");
static_assert(offsetof(MarinerGameState_HACK_UpdateBlastballParticleSystems, ParticleSystemComponentsToUpdate) == 0x000000, "Member 'MarinerGameState_HACK_UpdateBlastballParticleSystems::ParticleSystemComponentsToUpdate' has a wrong offset!");

// Function Mariner.MarinerGameState.IncrementTeamScore
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameState_IncrementTeamScore final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_IncrementTeamScore) == 0x000004, "Wrong alignment on MarinerGameState_IncrementTeamScore");
static_assert(sizeof(MarinerGameState_IncrementTeamScore) == 0x000004, "Wrong size on MarinerGameState_IncrementTeamScore");
static_assert(offsetof(MarinerGameState_IncrementTeamScore, TeamIndex) == 0x000000, "Member 'MarinerGameState_IncrementTeamScore::TeamIndex' has a wrong offset!");

// Function Mariner.MarinerGameState.OnPlayerChagnedTeam
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameState_OnPlayerChagnedTeam final
{
public:
	class AMarinerPlayerState*                    PlayerChangedTeam;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_OnPlayerChagnedTeam) == 0x000008, "Wrong alignment on MarinerGameState_OnPlayerChagnedTeam");
static_assert(sizeof(MarinerGameState_OnPlayerChagnedTeam) == 0x000008, "Wrong size on MarinerGameState_OnPlayerChagnedTeam");
static_assert(offsetof(MarinerGameState_OnPlayerChagnedTeam, PlayerChangedTeam) == 0x000000, "Member 'MarinerGameState_OnPlayerChagnedTeam::PlayerChangedTeam' has a wrong offset!");

// Function Mariner.MarinerGameState.OnRep_ActiveModeHUDStates
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameState_OnRep_ActiveModeHUDStates final
{
public:
	int32                                         OldActiveModeHUDStates;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_OnRep_ActiveModeHUDStates) == 0x000004, "Wrong alignment on MarinerGameState_OnRep_ActiveModeHUDStates");
static_assert(sizeof(MarinerGameState_OnRep_ActiveModeHUDStates) == 0x000004, "Wrong size on MarinerGameState_OnRep_ActiveModeHUDStates");
static_assert(offsetof(MarinerGameState_OnRep_ActiveModeHUDStates, OldActiveModeHUDStates) == 0x000000, "Member 'MarinerGameState_OnRep_ActiveModeHUDStates::OldActiveModeHUDStates' has a wrong offset!");

// Function Mariner.MarinerGameState.RemoveImportantThrowTarget
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameState_RemoveImportantThrowTarget final
{
public:
	class AActor*                                 ThrowTargetActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_RemoveImportantThrowTarget) == 0x000008, "Wrong alignment on MarinerGameState_RemoveImportantThrowTarget");
static_assert(sizeof(MarinerGameState_RemoveImportantThrowTarget) == 0x000008, "Wrong size on MarinerGameState_RemoveImportantThrowTarget");
static_assert(offsetof(MarinerGameState_RemoveImportantThrowTarget, ThrowTargetActor) == 0x000000, "Member 'MarinerGameState_RemoveImportantThrowTarget::ThrowTargetActor' has a wrong offset!");

// Function Mariner.MarinerGameState.RemovePointsFromTeam
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameState_RemovePointsFromTeam final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointsToDecrement;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_RemovePointsFromTeam) == 0x000004, "Wrong alignment on MarinerGameState_RemovePointsFromTeam");
static_assert(sizeof(MarinerGameState_RemovePointsFromTeam) == 0x000008, "Wrong size on MarinerGameState_RemovePointsFromTeam");
static_assert(offsetof(MarinerGameState_RemovePointsFromTeam, TeamIndex) == 0x000000, "Member 'MarinerGameState_RemovePointsFromTeam::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerGameState_RemovePointsFromTeam, PointsToDecrement) == 0x000004, "Member 'MarinerGameState_RemovePointsFromTeam::PointsToDecrement' has a wrong offset!");

// Function Mariner.MarinerGameState.SetMatchEndJsonString
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameState_SetMatchEndJsonString final
{
public:
	class FString                                 MatchEnd;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_SetMatchEndJsonString) == 0x000008, "Wrong alignment on MarinerGameState_SetMatchEndJsonString");
static_assert(sizeof(MarinerGameState_SetMatchEndJsonString) == 0x000010, "Wrong size on MarinerGameState_SetMatchEndJsonString");
static_assert(offsetof(MarinerGameState_SetMatchEndJsonString, MatchEnd) == 0x000000, "Member 'MarinerGameState_SetMatchEndJsonString::MatchEnd' has a wrong offset!");

// Function Mariner.MarinerGameState.SetPregameState
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameState_SetPregameState final
{
public:
	class FName                                   NewState;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_SetPregameState) == 0x000004, "Wrong alignment on MarinerGameState_SetPregameState");
static_assert(sizeof(MarinerGameState_SetPregameState) == 0x000008, "Wrong size on MarinerGameState_SetPregameState");
static_assert(offsetof(MarinerGameState_SetPregameState, NewState) == 0x000000, "Member 'MarinerGameState_SetPregameState::NewState' has a wrong offset!");

// Function Mariner.MarinerGameState.SetPreRoundCountdownTime
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameState_SetPreRoundCountdownTime final
{
public:
	int32                                         InPreRoundCountdownTime;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_SetPreRoundCountdownTime) == 0x000004, "Wrong alignment on MarinerGameState_SetPreRoundCountdownTime");
static_assert(sizeof(MarinerGameState_SetPreRoundCountdownTime) == 0x000004, "Wrong size on MarinerGameState_SetPreRoundCountdownTime");
static_assert(offsetof(MarinerGameState_SetPreRoundCountdownTime, InPreRoundCountdownTime) == 0x000000, "Member 'MarinerGameState_SetPreRoundCountdownTime::InPreRoundCountdownTime' has a wrong offset!");

// Function Mariner.MarinerGameState.SetTimeToLeaveSessionForTeam
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameState_SetTimeToLeaveSessionForTeam final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_SetTimeToLeaveSessionForTeam) == 0x000004, "Wrong alignment on MarinerGameState_SetTimeToLeaveSessionForTeam");
static_assert(sizeof(MarinerGameState_SetTimeToLeaveSessionForTeam) == 0x000004, "Wrong size on MarinerGameState_SetTimeToLeaveSessionForTeam");
static_assert(offsetof(MarinerGameState_SetTimeToLeaveSessionForTeam, TeamIndex) == 0x000000, "Member 'MarinerGameState_SetTimeToLeaveSessionForTeam::TeamIndex' has a wrong offset!");

// Function Mariner.MarinerGameState.GetDefaultBotName
// 0x0018 (0x0018 - 0x0000)
struct MarinerGameState_GetDefaultBotName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetDefaultBotName) == 0x000008, "Wrong alignment on MarinerGameState_GetDefaultBotName");
static_assert(sizeof(MarinerGameState_GetDefaultBotName) == 0x000018, "Wrong size on MarinerGameState_GetDefaultBotName");
static_assert(offsetof(MarinerGameState_GetDefaultBotName, ReturnValue) == 0x000000, "Member 'MarinerGameState_GetDefaultBotName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetEnabledCharacters
// 0x0018 (0x0018 - 0x0000)
struct MarinerGameState_GetEnabledCharacters final
{
public:
	EMarinerEnabledCharacterFilter                Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1724[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarinerPlayableCharacter*>      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetEnabledCharacters) == 0x000008, "Wrong alignment on MarinerGameState_GetEnabledCharacters");
static_assert(sizeof(MarinerGameState_GetEnabledCharacters) == 0x000018, "Wrong size on MarinerGameState_GetEnabledCharacters");
static_assert(offsetof(MarinerGameState_GetEnabledCharacters, Filter) == 0x000000, "Member 'MarinerGameState_GetEnabledCharacters::Filter' has a wrong offset!");
static_assert(offsetof(MarinerGameState_GetEnabledCharacters, ReturnValue) == 0x000008, "Member 'MarinerGameState_GetEnabledCharacters::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetGameOutcome
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameState_GetGameOutcome final
{
public:
	const class AMarinerPlayerState*              PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerGameOutcome                           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1725[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGameState_GetGameOutcome) == 0x000008, "Wrong alignment on MarinerGameState_GetGameOutcome");
static_assert(sizeof(MarinerGameState_GetGameOutcome) == 0x000010, "Wrong size on MarinerGameState_GetGameOutcome");
static_assert(offsetof(MarinerGameState_GetGameOutcome, PlayerState) == 0x000000, "Member 'MarinerGameState_GetGameOutcome::PlayerState' has a wrong offset!");
static_assert(offsetof(MarinerGameState_GetGameOutcome, ReturnValue) == 0x000008, "Member 'MarinerGameState_GetGameOutcome::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetHealthToRecoverOnKnockout
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameState_GetHealthToRecoverOnKnockout final
{
public:
	class AMarinerPlayerState*                    PlayerStateOfReturningCharacter;                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1726[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGameState_GetHealthToRecoverOnKnockout) == 0x000008, "Wrong alignment on MarinerGameState_GetHealthToRecoverOnKnockout");
static_assert(sizeof(MarinerGameState_GetHealthToRecoverOnKnockout) == 0x000010, "Wrong size on MarinerGameState_GetHealthToRecoverOnKnockout");
static_assert(offsetof(MarinerGameState_GetHealthToRecoverOnKnockout, PlayerStateOfReturningCharacter) == 0x000000, "Member 'MarinerGameState_GetHealthToRecoverOnKnockout::PlayerStateOfReturningCharacter' has a wrong offset!");
static_assert(offsetof(MarinerGameState_GetHealthToRecoverOnKnockout, ReturnValue) == 0x000008, "Member 'MarinerGameState_GetHealthToRecoverOnKnockout::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetIndependentNonBotPlayers
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameState_GetIndependentNonBotPlayers final
{
public:
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetIndependentNonBotPlayers) == 0x000008, "Wrong alignment on MarinerGameState_GetIndependentNonBotPlayers");
static_assert(sizeof(MarinerGameState_GetIndependentNonBotPlayers) == 0x000010, "Wrong size on MarinerGameState_GetIndependentNonBotPlayers");
static_assert(offsetof(MarinerGameState_GetIndependentNonBotPlayers, ReturnValue) == 0x000000, "Member 'MarinerGameState_GetIndependentNonBotPlayers::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetIndependentPlayers
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameState_GetIndependentPlayers final
{
public:
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetIndependentPlayers) == 0x000008, "Wrong alignment on MarinerGameState_GetIndependentPlayers");
static_assert(sizeof(MarinerGameState_GetIndependentPlayers) == 0x000010, "Wrong size on MarinerGameState_GetIndependentPlayers");
static_assert(offsetof(MarinerGameState_GetIndependentPlayers, ReturnValue) == 0x000000, "Member 'MarinerGameState_GetIndependentPlayers::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetIndependentPlayersOnTeam
// 0x0018 (0x0018 - 0x0000)
struct MarinerGameState_GetIndependentPlayersOnTeam final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1727[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetIndependentPlayersOnTeam) == 0x000008, "Wrong alignment on MarinerGameState_GetIndependentPlayersOnTeam");
static_assert(sizeof(MarinerGameState_GetIndependentPlayersOnTeam) == 0x000018, "Wrong size on MarinerGameState_GetIndependentPlayersOnTeam");
static_assert(offsetof(MarinerGameState_GetIndependentPlayersOnTeam, TeamIndex) == 0x000000, "Member 'MarinerGameState_GetIndependentPlayersOnTeam::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerGameState_GetIndependentPlayersOnTeam, ReturnValue) == 0x000008, "Member 'MarinerGameState_GetIndependentPlayersOnTeam::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetMatchId
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameState_GetMatchId final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetMatchId) == 0x000004, "Wrong alignment on MarinerGameState_GetMatchId");
static_assert(sizeof(MarinerGameState_GetMatchId) == 0x000010, "Wrong size on MarinerGameState_GetMatchId");
static_assert(offsetof(MarinerGameState_GetMatchId, ReturnValue) == 0x000000, "Member 'MarinerGameState_GetMatchId::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetMidMatchRoundTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameState_GetMidMatchRoundTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetMidMatchRoundTimeRemaining) == 0x000004, "Wrong alignment on MarinerGameState_GetMidMatchRoundTimeRemaining");
static_assert(sizeof(MarinerGameState_GetMidMatchRoundTimeRemaining) == 0x000004, "Wrong size on MarinerGameState_GetMidMatchRoundTimeRemaining");
static_assert(offsetof(MarinerGameState_GetMidMatchRoundTimeRemaining, ReturnValue) == 0x000000, "Member 'MarinerGameState_GetMidMatchRoundTimeRemaining::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetNonBotPlayersOnTeam
// 0x0018 (0x0018 - 0x0000)
struct MarinerGameState_GetNonBotPlayersOnTeam final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1728[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetNonBotPlayersOnTeam) == 0x000008, "Wrong alignment on MarinerGameState_GetNonBotPlayersOnTeam");
static_assert(sizeof(MarinerGameState_GetNonBotPlayersOnTeam) == 0x000018, "Wrong size on MarinerGameState_GetNonBotPlayersOnTeam");
static_assert(offsetof(MarinerGameState_GetNonBotPlayersOnTeam, TeamIndex) == 0x000000, "Member 'MarinerGameState_GetNonBotPlayersOnTeam::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerGameState_GetNonBotPlayersOnTeam, ReturnValue) == 0x000008, "Member 'MarinerGameState_GetNonBotPlayersOnTeam::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetNumPlayersOnTeam
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameState_GetNumPlayersOnTeam final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetNumPlayersOnTeam) == 0x000004, "Wrong alignment on MarinerGameState_GetNumPlayersOnTeam");
static_assert(sizeof(MarinerGameState_GetNumPlayersOnTeam) == 0x000008, "Wrong size on MarinerGameState_GetNumPlayersOnTeam");
static_assert(offsetof(MarinerGameState_GetNumPlayersOnTeam, TeamIndex) == 0x000000, "Member 'MarinerGameState_GetNumPlayersOnTeam::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerGameState_GetNumPlayersOnTeam, ReturnValue) == 0x000004, "Member 'MarinerGameState_GetNumPlayersOnTeam::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetPlayersOnTeam
// 0x0018 (0x0018 - 0x0000)
struct MarinerGameState_GetPlayersOnTeam final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1729[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetPlayersOnTeam) == 0x000008, "Wrong alignment on MarinerGameState_GetPlayersOnTeam");
static_assert(sizeof(MarinerGameState_GetPlayersOnTeam) == 0x000018, "Wrong size on MarinerGameState_GetPlayersOnTeam");
static_assert(offsetof(MarinerGameState_GetPlayersOnTeam, TeamIndex) == 0x000000, "Member 'MarinerGameState_GetPlayersOnTeam::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerGameState_GetPlayersOnTeam, ReturnValue) == 0x000008, "Member 'MarinerGameState_GetPlayersOnTeam::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetPlaylistEventId
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameState_GetPlaylistEventId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetPlaylistEventId) == 0x000008, "Wrong alignment on MarinerGameState_GetPlaylistEventId");
static_assert(sizeof(MarinerGameState_GetPlaylistEventId) == 0x000010, "Wrong size on MarinerGameState_GetPlaylistEventId");
static_assert(offsetof(MarinerGameState_GetPlaylistEventId, ReturnValue) == 0x000000, "Member 'MarinerGameState_GetPlaylistEventId::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetPlaylistName
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameState_GetPlaylistName final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetPlaylistName) == 0x000004, "Wrong alignment on MarinerGameState_GetPlaylistName");
static_assert(sizeof(MarinerGameState_GetPlaylistName) == 0x000010, "Wrong size on MarinerGameState_GetPlaylistName");
static_assert(offsetof(MarinerGameState_GetPlaylistName, ReturnValue) == 0x000000, "Member 'MarinerGameState_GetPlaylistName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.GetPreRoundCountdownTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameState_GetPreRoundCountdownTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_GetPreRoundCountdownTimeRemaining) == 0x000004, "Wrong alignment on MarinerGameState_GetPreRoundCountdownTimeRemaining");
static_assert(sizeof(MarinerGameState_GetPreRoundCountdownTimeRemaining) == 0x000004, "Wrong size on MarinerGameState_GetPreRoundCountdownTimeRemaining");
static_assert(offsetof(MarinerGameState_GetPreRoundCountdownTimeRemaining, ReturnValue) == 0x000000, "Member 'MarinerGameState_GetPreRoundCountdownTimeRemaining::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.IsCharacterStackingAllowed
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameState_IsCharacterStackingAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_IsCharacterStackingAllowed) == 0x000001, "Wrong alignment on MarinerGameState_IsCharacterStackingAllowed");
static_assert(sizeof(MarinerGameState_IsCharacterStackingAllowed) == 0x000001, "Wrong size on MarinerGameState_IsCharacterStackingAllowed");
static_assert(offsetof(MarinerGameState_IsCharacterStackingAllowed, ReturnValue) == 0x000000, "Member 'MarinerGameState_IsCharacterStackingAllowed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.IsForceRandomSelectionEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameState_IsForceRandomSelectionEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_IsForceRandomSelectionEnabled) == 0x000001, "Wrong alignment on MarinerGameState_IsForceRandomSelectionEnabled");
static_assert(sizeof(MarinerGameState_IsForceRandomSelectionEnabled) == 0x000001, "Wrong size on MarinerGameState_IsForceRandomSelectionEnabled");
static_assert(offsetof(MarinerGameState_IsForceRandomSelectionEnabled, ReturnValue) == 0x000000, "Member 'MarinerGameState_IsForceRandomSelectionEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.IsGameCurrentlyRunning
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameState_IsGameCurrentlyRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_IsGameCurrentlyRunning) == 0x000001, "Wrong alignment on MarinerGameState_IsGameCurrentlyRunning");
static_assert(sizeof(MarinerGameState_IsGameCurrentlyRunning) == 0x000001, "Wrong size on MarinerGameState_IsGameCurrentlyRunning");
static_assert(offsetof(MarinerGameState_IsGameCurrentlyRunning, ReturnValue) == 0x000000, "Member 'MarinerGameState_IsGameCurrentlyRunning::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.IsGameTimerPaused
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameState_IsGameTimerPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_IsGameTimerPaused) == 0x000001, "Wrong alignment on MarinerGameState_IsGameTimerPaused");
static_assert(sizeof(MarinerGameState_IsGameTimerPaused) == 0x000001, "Wrong size on MarinerGameState_IsGameTimerPaused");
static_assert(offsetof(MarinerGameState_IsGameTimerPaused, ReturnValue) == 0x000000, "Member 'MarinerGameState_IsGameTimerPaused::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.IsMatchMade
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameState_IsMatchMade final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_IsMatchMade) == 0x000001, "Wrong alignment on MarinerGameState_IsMatchMade");
static_assert(sizeof(MarinerGameState_IsMatchMade) == 0x000001, "Wrong size on MarinerGameState_IsMatchMade");
static_assert(offsetof(MarinerGameState_IsMatchMade, ReturnValue) == 0x000000, "Member 'MarinerGameState_IsMatchMade::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.IsMatchTied
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameState_IsMatchTied final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_IsMatchTied) == 0x000001, "Wrong alignment on MarinerGameState_IsMatchTied");
static_assert(sizeof(MarinerGameState_IsMatchTied) == 0x000001, "Wrong size on MarinerGameState_IsMatchTied");
static_assert(offsetof(MarinerGameState_IsMatchTied, ReturnValue) == 0x000000, "Member 'MarinerGameState_IsMatchTied::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.IsPlaylistPvE
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameState_IsPlaylistPvE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_IsPlaylistPvE) == 0x000001, "Wrong alignment on MarinerGameState_IsPlaylistPvE");
static_assert(sizeof(MarinerGameState_IsPlaylistPvE) == 0x000001, "Wrong size on MarinerGameState_IsPlaylistPvE");
static_assert(offsetof(MarinerGameState_IsPlaylistPvE, ReturnValue) == 0x000000, "Member 'MarinerGameState_IsPlaylistPvE::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.IsRanked
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameState_IsRanked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_IsRanked) == 0x000001, "Wrong alignment on MarinerGameState_IsRanked");
static_assert(sizeof(MarinerGameState_IsRanked) == 0x000001, "Wrong size on MarinerGameState_IsRanked");
static_assert(offsetof(MarinerGameState_IsRanked, ReturnValue) == 0x000000, "Member 'MarinerGameState_IsRanked::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.IsSessionSafeToLeave
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameState_IsSessionSafeToLeave final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_172A[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGameState_IsSessionSafeToLeave) == 0x000004, "Wrong alignment on MarinerGameState_IsSessionSafeToLeave");
static_assert(sizeof(MarinerGameState_IsSessionSafeToLeave) == 0x000008, "Wrong size on MarinerGameState_IsSessionSafeToLeave");
static_assert(offsetof(MarinerGameState_IsSessionSafeToLeave, TeamIndex) == 0x000000, "Member 'MarinerGameState_IsSessionSafeToLeave::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerGameState_IsSessionSafeToLeave, ReturnValue) == 0x000004, "Member 'MarinerGameState_IsSessionSafeToLeave::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.IsSessonWithEarlyDisconnect
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameState_IsSessonWithEarlyDisconnect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_IsSessonWithEarlyDisconnect) == 0x000001, "Wrong alignment on MarinerGameState_IsSessonWithEarlyDisconnect");
static_assert(sizeof(MarinerGameState_IsSessonWithEarlyDisconnect) == 0x000001, "Wrong size on MarinerGameState_IsSessonWithEarlyDisconnect");
static_assert(offsetof(MarinerGameState_IsSessonWithEarlyDisconnect, ReturnValue) == 0x000000, "Member 'MarinerGameState_IsSessonWithEarlyDisconnect::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.ShouldEnterOvertime
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameState_ShouldEnterOvertime final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_ShouldEnterOvertime) == 0x000001, "Wrong alignment on MarinerGameState_ShouldEnterOvertime");
static_assert(sizeof(MarinerGameState_ShouldEnterOvertime) == 0x000001, "Wrong size on MarinerGameState_ShouldEnterOvertime");
static_assert(offsetof(MarinerGameState_ShouldEnterOvertime, ReturnValue) == 0x000000, "Member 'MarinerGameState_ShouldEnterOvertime::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameState.ShouldResetCooldownsOnKnockout
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameState_ShouldResetCooldownsOnKnockout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameState_ShouldResetCooldownsOnKnockout) == 0x000001, "Wrong alignment on MarinerGameState_ShouldResetCooldownsOnKnockout");
static_assert(sizeof(MarinerGameState_ShouldResetCooldownsOnKnockout) == 0x000001, "Wrong size on MarinerGameState_ShouldResetCooldownsOnKnockout");
static_assert(offsetof(MarinerGameState_ShouldResetCooldownsOnKnockout, ReturnValue) == 0x000000, "Member 'MarinerGameState_ShouldResetCooldownsOnKnockout::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectedWidget.DisplayHoveredData
// 0x0028 (0x0028 - 0x0000)
struct MarinerCharacterSelectedWidget_DisplayHoveredData final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerPlayableCharacter*              CharacterData;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerSkinCollectionDataAsset*        ActiveSkin;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_172D[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerArtifactDataAsset*              Artifact;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectedWidget_DisplayHoveredData) == 0x000008, "Wrong alignment on MarinerCharacterSelectedWidget_DisplayHoveredData");
static_assert(sizeof(MarinerCharacterSelectedWidget_DisplayHoveredData) == 0x000028, "Wrong size on MarinerCharacterSelectedWidget_DisplayHoveredData");
static_assert(offsetof(MarinerCharacterSelectedWidget_DisplayHoveredData, PlayerState) == 0x000000, "Member 'MarinerCharacterSelectedWidget_DisplayHoveredData::PlayerState' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSelectedWidget_DisplayHoveredData, CharacterData) == 0x000008, "Member 'MarinerCharacterSelectedWidget_DisplayHoveredData::CharacterData' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSelectedWidget_DisplayHoveredData, ActiveSkin) == 0x000010, "Member 'MarinerCharacterSelectedWidget_DisplayHoveredData::ActiveSkin' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSelectedWidget_DisplayHoveredData, Level) == 0x000018, "Member 'MarinerCharacterSelectedWidget_DisplayHoveredData::Level' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSelectedWidget_DisplayHoveredData, Artifact) == 0x000020, "Member 'MarinerCharacterSelectedWidget_DisplayHoveredData::Artifact' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectedWidget.OnPlayerStateCharacterRequestFailed
// 0x0020 (0x0020 - 0x0000)
struct MarinerCharacterSelectedWidget_OnPlayerStateCharacterRequestFailed final
{
public:
	class FString                                 FailedCharacterRequest;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastKnownCharacterString;                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectedWidget_OnPlayerStateCharacterRequestFailed) == 0x000008, "Wrong alignment on MarinerCharacterSelectedWidget_OnPlayerStateCharacterRequestFailed");
static_assert(sizeof(MarinerCharacterSelectedWidget_OnPlayerStateCharacterRequestFailed) == 0x000020, "Wrong size on MarinerCharacterSelectedWidget_OnPlayerStateCharacterRequestFailed");
static_assert(offsetof(MarinerCharacterSelectedWidget_OnPlayerStateCharacterRequestFailed, FailedCharacterRequest) == 0x000000, "Member 'MarinerCharacterSelectedWidget_OnPlayerStateCharacterRequestFailed::FailedCharacterRequest' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSelectedWidget_OnPlayerStateCharacterRequestFailed, LastKnownCharacterString) == 0x000010, "Member 'MarinerCharacterSelectedWidget_OnPlayerStateCharacterRequestFailed::LastKnownCharacterString' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectedWidget.OnPlayerStateCharacterSelected
// 0x0030 (0x0030 - 0x0000)
struct MarinerCharacterSelectedWidget_OnPlayerStateCharacterSelected final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SelectedCharacter;                                 // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectedWidget_OnPlayerStateCharacterSelected) == 0x000008, "Wrong alignment on MarinerCharacterSelectedWidget_OnPlayerStateCharacterSelected");
static_assert(sizeof(MarinerCharacterSelectedWidget_OnPlayerStateCharacterSelected) == 0x000030, "Wrong size on MarinerCharacterSelectedWidget_OnPlayerStateCharacterSelected");
static_assert(offsetof(MarinerCharacterSelectedWidget_OnPlayerStateCharacterSelected, PlayerState) == 0x000000, "Member 'MarinerCharacterSelectedWidget_OnPlayerStateCharacterSelected::PlayerState' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSelectedWidget_OnPlayerStateCharacterSelected, SelectedCharacter) == 0x000008, "Member 'MarinerCharacterSelectedWidget_OnPlayerStateCharacterSelected::SelectedCharacter' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectedWidget.OnPlayerStateSelectedCharacterChanged
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacterSelectedWidget_OnPlayerStateSelectedCharacterChanged final
{
public:
	class FString                                 SelectedCharacter;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectedWidget_OnPlayerStateSelectedCharacterChanged) == 0x000008, "Wrong alignment on MarinerCharacterSelectedWidget_OnPlayerStateSelectedCharacterChanged");
static_assert(sizeof(MarinerCharacterSelectedWidget_OnPlayerStateSelectedCharacterChanged) == 0x000010, "Wrong size on MarinerCharacterSelectedWidget_OnPlayerStateSelectedCharacterChanged");
static_assert(offsetof(MarinerCharacterSelectedWidget_OnPlayerStateSelectedCharacterChanged, SelectedCharacter) == 0x000000, "Member 'MarinerCharacterSelectedWidget_OnPlayerStateSelectedCharacterChanged::SelectedCharacter' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectedWidget.OnPlayerTalking
// 0x0028 (0x0028 - 0x0000)
struct MarinerCharacterSelectedWidget_OnPlayerTalking final
{
public:
	class FString                                 ChannelName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTalking;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_172E[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterSelectedWidget_OnPlayerTalking) == 0x000008, "Wrong alignment on MarinerCharacterSelectedWidget_OnPlayerTalking");
static_assert(sizeof(MarinerCharacterSelectedWidget_OnPlayerTalking) == 0x000028, "Wrong size on MarinerCharacterSelectedWidget_OnPlayerTalking");
static_assert(offsetof(MarinerCharacterSelectedWidget_OnPlayerTalking, ChannelName) == 0x000000, "Member 'MarinerCharacterSelectedWidget_OnPlayerTalking::ChannelName' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSelectedWidget_OnPlayerTalking, PlayerName) == 0x000010, "Member 'MarinerCharacterSelectedWidget_OnPlayerTalking::PlayerName' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSelectedWidget_OnPlayerTalking, bIsTalking) == 0x000020, "Member 'MarinerCharacterSelectedWidget_OnPlayerTalking::bIsTalking' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.GetSelectedButton
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSelectMenu_GetSelectedButton final
{
public:
	class UMarinerCharacterSelectButton*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_GetSelectedButton) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_GetSelectedButton");
static_assert(sizeof(MarinerCharacterSelectMenu_GetSelectedButton) == 0x000008, "Wrong size on MarinerCharacterSelectMenu_GetSelectedButton");
static_assert(offsetof(MarinerCharacterSelectMenu_GetSelectedButton, ReturnValue) == 0x000000, "Member 'MarinerCharacterSelectMenu_GetSelectedButton::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnAnyPlayerChangedTeam
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSelectMenu_OnAnyPlayerChangedTeam final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnAnyPlayerChangedTeam) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_OnAnyPlayerChangedTeam");
static_assert(sizeof(MarinerCharacterSelectMenu_OnAnyPlayerChangedTeam) == 0x000008, "Wrong size on MarinerCharacterSelectMenu_OnAnyPlayerChangedTeam");
static_assert(offsetof(MarinerCharacterSelectMenu_OnAnyPlayerChangedTeam, PlayerState) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnAnyPlayerChangedTeam::PlayerState' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnCancelSelectionButtonPressed
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSelectMenu_OnCancelSelectionButtonPressed final
{
public:
	class UMarinerLayeredButton*                  LayeredButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnCancelSelectionButtonPressed) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_OnCancelSelectionButtonPressed");
static_assert(sizeof(MarinerCharacterSelectMenu_OnCancelSelectionButtonPressed) == 0x000008, "Wrong size on MarinerCharacterSelectMenu_OnCancelSelectionButtonPressed");
static_assert(offsetof(MarinerCharacterSelectMenu_OnCancelSelectionButtonPressed, LayeredButton) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnCancelSelectionButtonPressed::LayeredButton' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnCharacterButtonHovered
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacterSelectMenu_OnCharacterButtonHovered final
{
public:
	class UMarinerLayeredButton*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromKeyboard;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromMouse;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1732[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterSelectMenu_OnCharacterButtonHovered) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_OnCharacterButtonHovered");
static_assert(sizeof(MarinerCharacterSelectMenu_OnCharacterButtonHovered) == 0x000010, "Wrong size on MarinerCharacterSelectMenu_OnCharacterButtonHovered");
static_assert(offsetof(MarinerCharacterSelectMenu_OnCharacterButtonHovered, Instance) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnCharacterButtonHovered::Instance' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSelectMenu_OnCharacterButtonHovered, bFromKeyboard) == 0x000008, "Member 'MarinerCharacterSelectMenu_OnCharacterButtonHovered::bFromKeyboard' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSelectMenu_OnCharacterButtonHovered, bFromMouse) == 0x000009, "Member 'MarinerCharacterSelectMenu_OnCharacterButtonHovered::bFromMouse' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnCharacterButtonSelected
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSelectMenu_OnCharacterButtonSelected final
{
public:
	class UMarinerLayeredButton*                  LayeredButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnCharacterButtonSelected) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_OnCharacterButtonSelected");
static_assert(sizeof(MarinerCharacterSelectMenu_OnCharacterButtonSelected) == 0x000008, "Wrong size on MarinerCharacterSelectMenu_OnCharacterButtonSelected");
static_assert(offsetof(MarinerCharacterSelectMenu_OnCharacterButtonSelected, LayeredButton) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnCharacterButtonSelected::LayeredButton' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnCharacterButtonUnHovered
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSelectMenu_OnCharacterButtonUnHovered final
{
public:
	class UMarinerLayeredButton*                  LayeredButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnCharacterButtonUnHovered) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_OnCharacterButtonUnHovered");
static_assert(sizeof(MarinerCharacterSelectMenu_OnCharacterButtonUnHovered) == 0x000008, "Wrong size on MarinerCharacterSelectMenu_OnCharacterButtonUnHovered");
static_assert(offsetof(MarinerCharacterSelectMenu_OnCharacterButtonUnHovered, LayeredButton) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnCharacterButtonUnHovered::LayeredButton' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnCharacterHighlightChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSelectMenu_OnCharacterHighlightChanged final
{
public:
	class UMarinerPlayableCharacter*              Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnCharacterHighlightChanged) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_OnCharacterHighlightChanged");
static_assert(sizeof(MarinerCharacterSelectMenu_OnCharacterHighlightChanged) == 0x000008, "Wrong size on MarinerCharacterSelectMenu_OnCharacterHighlightChanged");
static_assert(offsetof(MarinerCharacterSelectMenu_OnCharacterHighlightChanged, Character) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnCharacterHighlightChanged::Character' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnEmotePressed
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterSelectMenu_OnEmotePressed final
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnEmotePressed) == 0x000001, "Wrong alignment on MarinerCharacterSelectMenu_OnEmotePressed");
static_assert(sizeof(MarinerCharacterSelectMenu_OnEmotePressed) == 0x000001, "Wrong size on MarinerCharacterSelectMenu_OnEmotePressed");
static_assert(offsetof(MarinerCharacterSelectMenu_OnEmotePressed, InputAction) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnEmotePressed::InputAction' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnInitialRandomCharacterSet
// 0x0028 (0x0028 - 0x0000)
struct MarinerCharacterSelectMenu_OnInitialRandomCharacterSet final
{
public:
	TSoftClassPtr<class UClass>                   Character;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnInitialRandomCharacterSet) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_OnInitialRandomCharacterSet");
static_assert(sizeof(MarinerCharacterSelectMenu_OnInitialRandomCharacterSet) == 0x000028, "Wrong size on MarinerCharacterSelectMenu_OnInitialRandomCharacterSet");
static_assert(offsetof(MarinerCharacterSelectMenu_OnInitialRandomCharacterSet, Character) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnInitialRandomCharacterSet::Character' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnOwningPlayerStateCharacterRequestFailed
// 0x0020 (0x0020 - 0x0000)
struct MarinerCharacterSelectMenu_OnOwningPlayerStateCharacterRequestFailed final
{
public:
	class FString                                 RequestedCharacterString;                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastKnownSelectedCharacter;                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnOwningPlayerStateCharacterRequestFailed) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_OnOwningPlayerStateCharacterRequestFailed");
static_assert(sizeof(MarinerCharacterSelectMenu_OnOwningPlayerStateCharacterRequestFailed) == 0x000020, "Wrong size on MarinerCharacterSelectMenu_OnOwningPlayerStateCharacterRequestFailed");
static_assert(offsetof(MarinerCharacterSelectMenu_OnOwningPlayerStateCharacterRequestFailed, RequestedCharacterString) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnOwningPlayerStateCharacterRequestFailed::RequestedCharacterString' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSelectMenu_OnOwningPlayerStateCharacterRequestFailed, LastKnownSelectedCharacter) == 0x000010, "Member 'MarinerCharacterSelectMenu_OnOwningPlayerStateCharacterRequestFailed::LastKnownSelectedCharacter' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnOwningPlayerStateIntialRandomCharacterSet
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacterSelectMenu_OnOwningPlayerStateIntialRandomCharacterSet final
{
public:
	class FString                                 RequestedCharacterData;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnOwningPlayerStateIntialRandomCharacterSet) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_OnOwningPlayerStateIntialRandomCharacterSet");
static_assert(sizeof(MarinerCharacterSelectMenu_OnOwningPlayerStateIntialRandomCharacterSet) == 0x000010, "Wrong size on MarinerCharacterSelectMenu_OnOwningPlayerStateIntialRandomCharacterSet");
static_assert(offsetof(MarinerCharacterSelectMenu_OnOwningPlayerStateIntialRandomCharacterSet, RequestedCharacterData) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnOwningPlayerStateIntialRandomCharacterSet::RequestedCharacterData' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnOwningPlayerStateReplicated
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSelectMenu_OnOwningPlayerStateReplicated final
{
public:
	class AMarinerPlayerController*               ControllerHostingState;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnOwningPlayerStateReplicated) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_OnOwningPlayerStateReplicated");
static_assert(sizeof(MarinerCharacterSelectMenu_OnOwningPlayerStateReplicated) == 0x000008, "Wrong size on MarinerCharacterSelectMenu_OnOwningPlayerStateReplicated");
static_assert(offsetof(MarinerCharacterSelectMenu_OnOwningPlayerStateReplicated, ControllerHostingState) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnOwningPlayerStateReplicated::ControllerHostingState' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnOwningPlayerStateSelectedCharacterChanged
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacterSelectMenu_OnOwningPlayerStateSelectedCharacterChanged final
{
public:
	class FString                                 RequestedCharacterData;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnOwningPlayerStateSelectedCharacterChanged) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_OnOwningPlayerStateSelectedCharacterChanged");
static_assert(sizeof(MarinerCharacterSelectMenu_OnOwningPlayerStateSelectedCharacterChanged) == 0x000010, "Wrong size on MarinerCharacterSelectMenu_OnOwningPlayerStateSelectedCharacterChanged");
static_assert(offsetof(MarinerCharacterSelectMenu_OnOwningPlayerStateSelectedCharacterChanged, RequestedCharacterData) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnOwningPlayerStateSelectedCharacterChanged::RequestedCharacterData' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnPlayerAdded
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSelectMenu_OnPlayerAdded final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnPlayerAdded) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_OnPlayerAdded");
static_assert(sizeof(MarinerCharacterSelectMenu_OnPlayerAdded) == 0x000008, "Wrong size on MarinerCharacterSelectMenu_OnPlayerAdded");
static_assert(offsetof(MarinerCharacterSelectMenu_OnPlayerAdded, PlayerState) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnPlayerAdded::PlayerState' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnPlayerRemoved
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSelectMenu_OnPlayerRemoved final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnPlayerRemoved) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_OnPlayerRemoved");
static_assert(sizeof(MarinerCharacterSelectMenu_OnPlayerRemoved) == 0x000008, "Wrong size on MarinerCharacterSelectMenu_OnPlayerRemoved");
static_assert(offsetof(MarinerCharacterSelectMenu_OnPlayerRemoved, PlayerState) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnPlayerRemoved::PlayerState' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnPregameStateChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSelectMenu_OnPregameStateChanged final
{
public:
	class FName                                   NewPregameState;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnPregameStateChanged) == 0x000004, "Wrong alignment on MarinerCharacterSelectMenu_OnPregameStateChanged");
static_assert(sizeof(MarinerCharacterSelectMenu_OnPregameStateChanged) == 0x000008, "Wrong size on MarinerCharacterSelectMenu_OnPregameStateChanged");
static_assert(offsetof(MarinerCharacterSelectMenu_OnPregameStateChanged, NewPregameState) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnPregameStateChanged::NewPregameState' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnSelectCharacterButtonPressed
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSelectMenu_OnSelectCharacterButtonPressed final
{
public:
	class UMarinerLayeredButton*                  LayeredButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnSelectCharacterButtonPressed) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_OnSelectCharacterButtonPressed");
static_assert(sizeof(MarinerCharacterSelectMenu_OnSelectCharacterButtonPressed) == 0x000008, "Wrong size on MarinerCharacterSelectMenu_OnSelectCharacterButtonPressed");
static_assert(offsetof(MarinerCharacterSelectMenu_OnSelectCharacterButtonPressed, LayeredButton) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnSelectCharacterButtonPressed::LayeredButton' has a wrong offset!");

// Function Mariner.MarinerCharacterSelectMenu.OnSoftSelectionChanged
// 0x0028 (0x0028 - 0x0000)
struct MarinerCharacterSelectMenu_OnSoftSelectionChanged final
{
public:
	TSoftClassPtr<class UClass>                   SelectedCharacter;                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSelectMenu_OnSoftSelectionChanged) == 0x000008, "Wrong alignment on MarinerCharacterSelectMenu_OnSoftSelectionChanged");
static_assert(sizeof(MarinerCharacterSelectMenu_OnSoftSelectionChanged) == 0x000028, "Wrong size on MarinerCharacterSelectMenu_OnSoftSelectionChanged");
static_assert(offsetof(MarinerCharacterSelectMenu_OnSoftSelectionChanged, SelectedCharacter) == 0x000000, "Member 'MarinerCharacterSelectMenu_OnSoftSelectionChanged::SelectedCharacter' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.ApplyTotemCollection
// 0x0038 (0x0038 - 0x0000)
struct MarinerRocketTotem_ApplyTotemCollection final
{
public:
	struct FMarinerRocketTotemCollection          TotemCollection;                                   // 0x0000(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_ApplyTotemCollection) == 0x000008, "Wrong alignment on MarinerRocketTotem_ApplyTotemCollection");
static_assert(sizeof(MarinerRocketTotem_ApplyTotemCollection) == 0x000038, "Wrong size on MarinerRocketTotem_ApplyTotemCollection");
static_assert(offsetof(MarinerRocketTotem_ApplyTotemCollection, TotemCollection) == 0x000000, "Member 'MarinerRocketTotem_ApplyTotemCollection::TotemCollection' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.GetCachedTotemChanges
// 0x0038 (0x0038 - 0x0000)
struct MarinerRocketTotem_GetCachedTotemChanges final
{
public:
	struct FMarinerRocketTotemCollection          ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_GetCachedTotemChanges) == 0x000008, "Wrong alignment on MarinerRocketTotem_GetCachedTotemChanges");
static_assert(sizeof(MarinerRocketTotem_GetCachedTotemChanges) == 0x000038, "Wrong size on MarinerRocketTotem_GetCachedTotemChanges");
static_assert(offsetof(MarinerRocketTotem_GetCachedTotemChanges, ReturnValue) == 0x000000, "Member 'MarinerRocketTotem_GetCachedTotemChanges::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.OnAnyPlayerChangedTeams
// 0x0008 (0x0008 - 0x0000)
struct MarinerRocketTotem_OnAnyPlayerChangedTeams final
{
public:
	class AMarinerPlayerState*                    PlayerChangingTeams;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_OnAnyPlayerChangedTeams) == 0x000008, "Wrong alignment on MarinerRocketTotem_OnAnyPlayerChangedTeams");
static_assert(sizeof(MarinerRocketTotem_OnAnyPlayerChangedTeams) == 0x000008, "Wrong size on MarinerRocketTotem_OnAnyPlayerChangedTeams");
static_assert(offsetof(MarinerRocketTotem_OnAnyPlayerChangedTeams, PlayerChangingTeams) == 0x000000, "Member 'MarinerRocketTotem_OnAnyPlayerChangedTeams::PlayerChangingTeams' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.OnPlayerJoinedOrLeftGame
// 0x0008 (0x0008 - 0x0000)
struct MarinerRocketTotem_OnPlayerJoinedOrLeftGame final
{
public:
	class APlayerState*                           JoiningPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_OnPlayerJoinedOrLeftGame) == 0x000008, "Wrong alignment on MarinerRocketTotem_OnPlayerJoinedOrLeftGame");
static_assert(sizeof(MarinerRocketTotem_OnPlayerJoinedOrLeftGame) == 0x000008, "Wrong size on MarinerRocketTotem_OnPlayerJoinedOrLeftGame");
static_assert(offsetof(MarinerRocketTotem_OnPlayerJoinedOrLeftGame, JoiningPlayer) == 0x000000, "Member 'MarinerRocketTotem_OnPlayerJoinedOrLeftGame::JoiningPlayer' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.ResetParticles
// 0x0001 (0x0001 - 0x0000)
struct MarinerRocketTotem_ResetParticles final
{
public:
	bool                                          bEmptyInstances;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_ResetParticles) == 0x000001, "Wrong alignment on MarinerRocketTotem_ResetParticles");
static_assert(sizeof(MarinerRocketTotem_ResetParticles) == 0x000001, "Wrong size on MarinerRocketTotem_ResetParticles");
static_assert(offsetof(MarinerRocketTotem_ResetParticles, bEmptyInstances) == 0x000000, "Member 'MarinerRocketTotem_ResetParticles::bEmptyInstances' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.SetBannerBorder
// 0x0008 (0x0008 - 0x0000)
struct MarinerRocketTotem_SetBannerBorder final
{
public:
	class UMarinerRocketTotemBorderDataAsset*     DataAsset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_SetBannerBorder) == 0x000008, "Wrong alignment on MarinerRocketTotem_SetBannerBorder");
static_assert(sizeof(MarinerRocketTotem_SetBannerBorder) == 0x000008, "Wrong size on MarinerRocketTotem_SetBannerBorder");
static_assert(offsetof(MarinerRocketTotem_SetBannerBorder, DataAsset) == 0x000000, "Member 'MarinerRocketTotem_SetBannerBorder::DataAsset' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.SetBannerPattern
// 0x0008 (0x0008 - 0x0000)
struct MarinerRocketTotem_SetBannerPattern final
{
public:
	class UMarinerRocketTotemPatternDataAsset*    DataAsset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_SetBannerPattern) == 0x000008, "Wrong alignment on MarinerRocketTotem_SetBannerPattern");
static_assert(sizeof(MarinerRocketTotem_SetBannerPattern) == 0x000008, "Wrong size on MarinerRocketTotem_SetBannerPattern");
static_assert(offsetof(MarinerRocketTotem_SetBannerPattern, DataAsset) == 0x000000, "Member 'MarinerRocketTotem_SetBannerPattern::DataAsset' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.SetBannerShape
// 0x0008 (0x0008 - 0x0000)
struct MarinerRocketTotem_SetBannerShape final
{
public:
	class UMarinerRocketTotemShapeDataAsset*      DataAsset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_SetBannerShape) == 0x000008, "Wrong alignment on MarinerRocketTotem_SetBannerShape");
static_assert(sizeof(MarinerRocketTotem_SetBannerShape) == 0x000008, "Wrong size on MarinerRocketTotem_SetBannerShape");
static_assert(offsetof(MarinerRocketTotem_SetBannerShape, DataAsset) == 0x000000, "Member 'MarinerRocketTotem_SetBannerShape::DataAsset' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.SetBannerSymbol
// 0x0008 (0x0008 - 0x0000)
struct MarinerRocketTotem_SetBannerSymbol final
{
public:
	class UMarinerRocketTotemSymbolsDataAsset*    DataAsset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_SetBannerSymbol) == 0x000008, "Wrong alignment on MarinerRocketTotem_SetBannerSymbol");
static_assert(sizeof(MarinerRocketTotem_SetBannerSymbol) == 0x000008, "Wrong size on MarinerRocketTotem_SetBannerSymbol");
static_assert(offsetof(MarinerRocketTotem_SetBannerSymbol, DataAsset) == 0x000000, "Member 'MarinerRocketTotem_SetBannerSymbol::DataAsset' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.SetCompanion
// 0x0008 (0x0008 - 0x0000)
struct MarinerRocketTotem_SetCompanion final
{
public:
	class UMarinerRocketTotemCompanionDataAsset*  DataAsset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_SetCompanion) == 0x000008, "Wrong alignment on MarinerRocketTotem_SetCompanion");
static_assert(sizeof(MarinerRocketTotem_SetCompanion) == 0x000008, "Wrong size on MarinerRocketTotem_SetCompanion");
static_assert(offsetof(MarinerRocketTotem_SetCompanion, DataAsset) == 0x000000, "Member 'MarinerRocketTotem_SetCompanion::DataAsset' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.SetProfileStateData
// 0x0038 (0x0038 - 0x0000)
struct MarinerRocketTotem_SetProfileStateData final
{
public:
	struct FMarinerRocketTotemCollection          TotemCollection;                                   // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_SetProfileStateData) == 0x000008, "Wrong alignment on MarinerRocketTotem_SetProfileStateData");
static_assert(sizeof(MarinerRocketTotem_SetProfileStateData) == 0x000038, "Wrong size on MarinerRocketTotem_SetProfileStateData");
static_assert(offsetof(MarinerRocketTotem_SetProfileStateData, TotemCollection) == 0x000000, "Member 'MarinerRocketTotem_SetProfileStateData::TotemCollection' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.SetStandMesh
// 0x0008 (0x0008 - 0x0000)
struct MarinerRocketTotem_SetStandMesh final
{
public:
	class UMarinerRocketTotemStandDataAsset*      DataAsset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_SetStandMesh) == 0x000008, "Wrong alignment on MarinerRocketTotem_SetStandMesh");
static_assert(sizeof(MarinerRocketTotem_SetStandMesh) == 0x000008, "Wrong size on MarinerRocketTotem_SetStandMesh");
static_assert(offsetof(MarinerRocketTotem_SetStandMesh, DataAsset) == 0x000000, "Member 'MarinerRocketTotem_SetStandMesh::DataAsset' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.SetVFX
// 0x0008 (0x0008 - 0x0000)
struct MarinerRocketTotem_SetVFX final
{
public:
	class UMarinerRocketTotemVFXDataAsset*        DataAsset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_SetVFX) == 0x000008, "Wrong alignment on MarinerRocketTotem_SetVFX");
static_assert(sizeof(MarinerRocketTotem_SetVFX) == 0x000008, "Wrong size on MarinerRocketTotem_SetVFX");
static_assert(offsetof(MarinerRocketTotem_SetVFX, DataAsset) == 0x000000, "Member 'MarinerRocketTotem_SetVFX::DataAsset' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.GetCapsuleComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerRocketTotem_GetCapsuleComponent final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_GetCapsuleComponent) == 0x000008, "Wrong alignment on MarinerRocketTotem_GetCapsuleComponent");
static_assert(sizeof(MarinerRocketTotem_GetCapsuleComponent) == 0x000008, "Wrong size on MarinerRocketTotem_GetCapsuleComponent");
static_assert(offsetof(MarinerRocketTotem_GetCapsuleComponent, ReturnValue) == 0x000000, "Member 'MarinerRocketTotem_GetCapsuleComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.GetStartingRotation
// 0x000C (0x000C - 0x0000)
struct MarinerRocketTotem_GetStartingRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_GetStartingRotation) == 0x000004, "Wrong alignment on MarinerRocketTotem_GetStartingRotation");
static_assert(sizeof(MarinerRocketTotem_GetStartingRotation) == 0x00000C, "Wrong size on MarinerRocketTotem_GetStartingRotation");
static_assert(offsetof(MarinerRocketTotem_GetStartingRotation, ReturnValue) == 0x000000, "Member 'MarinerRocketTotem_GetStartingRotation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRocketTotem.IsPlayerAssigned
// 0x0001 (0x0001 - 0x0000)
struct MarinerRocketTotem_IsPlayerAssigned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTotem_IsPlayerAssigned) == 0x000001, "Wrong alignment on MarinerRocketTotem_IsPlayerAssigned");
static_assert(sizeof(MarinerRocketTotem_IsPlayerAssigned) == 0x000001, "Wrong size on MarinerRocketTotem_IsPlayerAssigned");
static_assert(offsetof(MarinerRocketTotem_IsPlayerAssigned, ReturnValue) == 0x000000, "Member 'MarinerRocketTotem_IsPlayerAssigned::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterSpawner.ApplySkin
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSpawner_ApplySkin final
{
public:
	class UMarinerSkinCollectionDataAsset*        InSkinCollection;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSpawner_ApplySkin) == 0x000008, "Wrong alignment on MarinerCharacterSpawner_ApplySkin");
static_assert(sizeof(MarinerCharacterSpawner_ApplySkin) == 0x000008, "Wrong size on MarinerCharacterSpawner_ApplySkin");
static_assert(offsetof(MarinerCharacterSpawner_ApplySkin, InSkinCollection) == 0x000000, "Member 'MarinerCharacterSpawner_ApplySkin::InSkinCollection' has a wrong offset!");

// Function Mariner.MarinerCharacterSpawner.GetCurrentLoadedCharacter
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSpawner_GetCurrentLoadedCharacter final
{
public:
	class AMarinerCharacterLite*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSpawner_GetCurrentLoadedCharacter) == 0x000008, "Wrong alignment on MarinerCharacterSpawner_GetCurrentLoadedCharacter");
static_assert(sizeof(MarinerCharacterSpawner_GetCurrentLoadedCharacter) == 0x000008, "Wrong size on MarinerCharacterSpawner_GetCurrentLoadedCharacter");
static_assert(offsetof(MarinerCharacterSpawner_GetCurrentLoadedCharacter, ReturnValue) == 0x000000, "Member 'MarinerCharacterSpawner_GetCurrentLoadedCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterSpawner.LoadCharacter
// 0x0010 (0x0010 - 0x0000)
struct MarinerCharacterSpawner_LoadCharacter final
{
public:
	TSubclassOf<class AMarinerCharacterLite>      InClass;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_173E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCharacterSpawner_LoadCharacter) == 0x000008, "Wrong alignment on MarinerCharacterSpawner_LoadCharacter");
static_assert(sizeof(MarinerCharacterSpawner_LoadCharacter) == 0x000010, "Wrong size on MarinerCharacterSpawner_LoadCharacter");
static_assert(offsetof(MarinerCharacterSpawner_LoadCharacter, InClass) == 0x000000, "Member 'MarinerCharacterSpawner_LoadCharacter::InClass' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSpawner_LoadCharacter, ReturnValue) == 0x000008, "Member 'MarinerCharacterSpawner_LoadCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCharacterSpawner.LoadCharacterWithSkin
// 0x0050 (0x0050 - 0x0000)
struct MarinerCharacterSpawner_LoadCharacterWithSkin final
{
public:
	TSoftClassPtr<class UClass>                   InClass;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> InSkin;                                            // 0x0028(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSpawner_LoadCharacterWithSkin) == 0x000008, "Wrong alignment on MarinerCharacterSpawner_LoadCharacterWithSkin");
static_assert(sizeof(MarinerCharacterSpawner_LoadCharacterWithSkin) == 0x000050, "Wrong size on MarinerCharacterSpawner_LoadCharacterWithSkin");
static_assert(offsetof(MarinerCharacterSpawner_LoadCharacterWithSkin, InClass) == 0x000000, "Member 'MarinerCharacterSpawner_LoadCharacterWithSkin::InClass' has a wrong offset!");
static_assert(offsetof(MarinerCharacterSpawner_LoadCharacterWithSkin, InSkin) == 0x000028, "Member 'MarinerCharacterSpawner_LoadCharacterWithSkin::InSkin' has a wrong offset!");

// Function Mariner.MarinerCharacterSpawner.OnLoadedCharacterSkinApplied
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSpawner_OnLoadedCharacterSkinApplied final
{
public:
	class UMarinerSkinCollectionDataAsset*        Collection;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSpawner_OnLoadedCharacterSkinApplied) == 0x000008, "Wrong alignment on MarinerCharacterSpawner_OnLoadedCharacterSkinApplied");
static_assert(sizeof(MarinerCharacterSpawner_OnLoadedCharacterSkinApplied) == 0x000008, "Wrong size on MarinerCharacterSpawner_OnLoadedCharacterSkinApplied");
static_assert(offsetof(MarinerCharacterSpawner_OnLoadedCharacterSkinApplied, Collection) == 0x000000, "Member 'MarinerCharacterSpawner_OnLoadedCharacterSkinApplied::Collection' has a wrong offset!");

// Function Mariner.MarinerCharacterSpawner.OnPortraitBackgroundLoaded
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSpawner_OnPortraitBackgroundLoaded final
{
public:
	class UTexture*                               Portrait;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSpawner_OnPortraitBackgroundLoaded) == 0x000008, "Wrong alignment on MarinerCharacterSpawner_OnPortraitBackgroundLoaded");
static_assert(sizeof(MarinerCharacterSpawner_OnPortraitBackgroundLoaded) == 0x000008, "Wrong size on MarinerCharacterSpawner_OnPortraitBackgroundLoaded");
static_assert(offsetof(MarinerCharacterSpawner_OnPortraitBackgroundLoaded, Portrait) == 0x000000, "Member 'MarinerCharacterSpawner_OnPortraitBackgroundLoaded::Portrait' has a wrong offset!");

// Function Mariner.MarinerCharacterSpawner.OnSkinApplied
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSpawner_OnSkinApplied final
{
public:
	class UMarinerSkinCollectionDataAsset*        InSkinCollection;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSpawner_OnSkinApplied) == 0x000008, "Wrong alignment on MarinerCharacterSpawner_OnSkinApplied");
static_assert(sizeof(MarinerCharacterSpawner_OnSkinApplied) == 0x000008, "Wrong size on MarinerCharacterSpawner_OnSkinApplied");
static_assert(offsetof(MarinerCharacterSpawner_OnSkinApplied, InSkinCollection) == 0x000000, "Member 'MarinerCharacterSpawner_OnSkinApplied::InSkinCollection' has a wrong offset!");

// Function Mariner.MarinerCharacterSpawner.SetVictoryAnimationTime
// 0x0004 (0x0004 - 0x0000)
struct MarinerCharacterSpawner_SetVictoryAnimationTime final
{
public:
	float                                         AnimationTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSpawner_SetVictoryAnimationTime) == 0x000004, "Wrong alignment on MarinerCharacterSpawner_SetVictoryAnimationTime");
static_assert(sizeof(MarinerCharacterSpawner_SetVictoryAnimationTime) == 0x000004, "Wrong size on MarinerCharacterSpawner_SetVictoryAnimationTime");
static_assert(offsetof(MarinerCharacterSpawner_SetVictoryAnimationTime, AnimationTime) == 0x000000, "Member 'MarinerCharacterSpawner_SetVictoryAnimationTime::AnimationTime' has a wrong offset!");

// Function Mariner.MarinerCharacterSpawner.ShowEmoteAnimation
// 0x0008 (0x0008 - 0x0000)
struct MarinerCharacterSpawner_ShowEmoteAnimation final
{
public:
	class UAnimMontage*                           InAnim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterSpawner_ShowEmoteAnimation) == 0x000008, "Wrong alignment on MarinerCharacterSpawner_ShowEmoteAnimation");
static_assert(sizeof(MarinerCharacterSpawner_ShowEmoteAnimation) == 0x000008, "Wrong size on MarinerCharacterSpawner_ShowEmoteAnimation");
static_assert(offsetof(MarinerCharacterSpawner_ShowEmoteAnimation, InAnim) == 0x000000, "Member 'MarinerCharacterSpawner_ShowEmoteAnimation::InAnim' has a wrong offset!");

// Function Mariner.MarinerStackHeader.IsHeaderAllowed
// 0x0001 (0x0001 - 0x0000)
struct MarinerStackHeader_IsHeaderAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerStackHeader_IsHeaderAllowed) == 0x000001, "Wrong alignment on MarinerStackHeader_IsHeaderAllowed");
static_assert(sizeof(MarinerStackHeader_IsHeaderAllowed) == 0x000001, "Wrong size on MarinerStackHeader_IsHeaderAllowed");
static_assert(offsetof(MarinerStackHeader_IsHeaderAllowed, ReturnValue) == 0x000000, "Member 'MarinerStackHeader_IsHeaderAllowed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerStackHeader.IsHeaderDirty
// 0x0001 (0x0001 - 0x0000)
struct MarinerStackHeader_IsHeaderDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerStackHeader_IsHeaderDirty) == 0x000001, "Wrong alignment on MarinerStackHeader_IsHeaderDirty");
static_assert(sizeof(MarinerStackHeader_IsHeaderDirty) == 0x000001, "Wrong size on MarinerStackHeader_IsHeaderDirty");
static_assert(offsetof(MarinerStackHeader_IsHeaderDirty, ReturnValue) == 0x000000, "Member 'MarinerStackHeader_IsHeaderDirty::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerStackHeader.UpdateEquippedArtifactsPreset
// 0x0001 (0x0001 - 0x0000)
struct MarinerStackHeader_UpdateEquippedArtifactsPreset final
{
public:
	bool                                          bRankedPreset;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerStackHeader_UpdateEquippedArtifactsPreset) == 0x000001, "Wrong alignment on MarinerStackHeader_UpdateEquippedArtifactsPreset");
static_assert(sizeof(MarinerStackHeader_UpdateEquippedArtifactsPreset) == 0x000001, "Wrong size on MarinerStackHeader_UpdateEquippedArtifactsPreset");
static_assert(offsetof(MarinerStackHeader_UpdateEquippedArtifactsPreset, bRankedPreset) == 0x000000, "Member 'MarinerStackHeader_UpdateEquippedArtifactsPreset::bRankedPreset' has a wrong offset!");

// Function Mariner.MarinerGauntletController.OnMatchStateChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerGauntletController_OnMatchStateChanged final
{
public:
	class FName                                   NewGameState;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGauntletController_OnMatchStateChanged) == 0x000004, "Wrong alignment on MarinerGauntletController_OnMatchStateChanged");
static_assert(sizeof(MarinerGauntletController_OnMatchStateChanged) == 0x000008, "Wrong size on MarinerGauntletController_OnMatchStateChanged");
static_assert(offsetof(MarinerGauntletController_OnMatchStateChanged, NewGameState) == 0x000000, "Member 'MarinerGauntletController_OnMatchStateChanged::NewGameState' has a wrong offset!");

// Function Mariner.MarinerCharacterStackHeader.UpdateEquippedArtifacts
// 0x0001 (0x0001 - 0x0000)
struct MarinerCharacterStackHeader_UpdateEquippedArtifacts final
{
public:
	bool                                          bRankedPreset;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCharacterStackHeader_UpdateEquippedArtifacts) == 0x000001, "Wrong alignment on MarinerCharacterStackHeader_UpdateEquippedArtifacts");
static_assert(sizeof(MarinerCharacterStackHeader_UpdateEquippedArtifacts) == 0x000001, "Wrong size on MarinerCharacterStackHeader_UpdateEquippedArtifacts");
static_assert(offsetof(MarinerCharacterStackHeader_UpdateEquippedArtifacts, bRankedPreset) == 0x000000, "Member 'MarinerCharacterStackHeader_UpdateEquippedArtifacts::bRankedPreset' has a wrong offset!");

// Function Mariner.MarinerChatGlobals.GetChatWheelRoot
// 0x0008 (0x0008 - 0x0000)
struct MarinerChatGlobals_GetChatWheelRoot final
{
public:
	class UMarinerChatWheel_ParentNode*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChatGlobals_GetChatWheelRoot) == 0x000008, "Wrong alignment on MarinerChatGlobals_GetChatWheelRoot");
static_assert(sizeof(MarinerChatGlobals_GetChatWheelRoot) == 0x000008, "Wrong size on MarinerChatGlobals_GetChatWheelRoot");
static_assert(offsetof(MarinerChatGlobals_GetChatWheelRoot, ReturnValue) == 0x000000, "Member 'MarinerChatGlobals_GetChatWheelRoot::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerChatGlobals.MapChatInputToSlot
// 0x0008 (0x0008 - 0x0000)
struct MarinerChatGlobals_MapChatInputToSlot final
{
public:
	EMarinerInputActions                          InInput;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1742[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChatGlobals_MapChatInputToSlot) == 0x000004, "Wrong alignment on MarinerChatGlobals_MapChatInputToSlot");
static_assert(sizeof(MarinerChatGlobals_MapChatInputToSlot) == 0x000008, "Wrong size on MarinerChatGlobals_MapChatInputToSlot");
static_assert(offsetof(MarinerChatGlobals_MapChatInputToSlot, InInput) == 0x000000, "Member 'MarinerChatGlobals_MapChatInputToSlot::InInput' has a wrong offset!");
static_assert(offsetof(MarinerChatGlobals_MapChatInputToSlot, ReturnValue) == 0x000004, "Member 'MarinerChatGlobals_MapChatInputToSlot::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerChatGlobals.MapChatSlotToInput
// 0x0008 (0x0008 - 0x0000)
struct MarinerChatGlobals_MapChatSlotToInput final
{
public:
	int32                                         InSlot;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerInputActions                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1743[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerChatGlobals_MapChatSlotToInput) == 0x000004, "Wrong alignment on MarinerChatGlobals_MapChatSlotToInput");
static_assert(sizeof(MarinerChatGlobals_MapChatSlotToInput) == 0x000008, "Wrong size on MarinerChatGlobals_MapChatSlotToInput");
static_assert(offsetof(MarinerChatGlobals_MapChatSlotToInput, InSlot) == 0x000000, "Member 'MarinerChatGlobals_MapChatSlotToInput::InSlot' has a wrong offset!");
static_assert(offsetof(MarinerChatGlobals_MapChatSlotToInput, ReturnValue) == 0x000004, "Member 'MarinerChatGlobals_MapChatSlotToInput::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.AddGameplayCue
// 0x00C8 (0x00C8 - 0x0000)
struct MarinerGameplayFrameworkBlueprintLibrary_AddGameplayCue final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameplayFrameworkBlueprintLibrary_AddGameplayCue) == 0x000008, "Wrong alignment on MarinerGameplayFrameworkBlueprintLibrary_AddGameplayCue");
static_assert(sizeof(MarinerGameplayFrameworkBlueprintLibrary_AddGameplayCue) == 0x0000C8, "Wrong size on MarinerGameplayFrameworkBlueprintLibrary_AddGameplayCue");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_AddGameplayCue, TargetActor) == 0x000000, "Member 'MarinerGameplayFrameworkBlueprintLibrary_AddGameplayCue::TargetActor' has a wrong offset!");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_AddGameplayCue, GameplayCueTag) == 0x000008, "Member 'MarinerGameplayFrameworkBlueprintLibrary_AddGameplayCue::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_AddGameplayCue, Parameters) == 0x000010, "Member 'MarinerGameplayFrameworkBlueprintLibrary_AddGameplayCue::Parameters' has a wrong offset!");

// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.ApplyAbilityToInputActions
// 0x0018 (0x0018 - 0x0000)
struct MarinerGameplayFrameworkBlueprintLibrary_ApplyAbilityToInputActions final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerAbility>            AbilityClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerInputActions                          InputAction;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1746[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGameplayFrameworkBlueprintLibrary_ApplyAbilityToInputActions) == 0x000008, "Wrong alignment on MarinerGameplayFrameworkBlueprintLibrary_ApplyAbilityToInputActions");
static_assert(sizeof(MarinerGameplayFrameworkBlueprintLibrary_ApplyAbilityToInputActions) == 0x000018, "Wrong size on MarinerGameplayFrameworkBlueprintLibrary_ApplyAbilityToInputActions");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_ApplyAbilityToInputActions, Character) == 0x000000, "Member 'MarinerGameplayFrameworkBlueprintLibrary_ApplyAbilityToInputActions::Character' has a wrong offset!");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_ApplyAbilityToInputActions, AbilityClass) == 0x000008, "Member 'MarinerGameplayFrameworkBlueprintLibrary_ApplyAbilityToInputActions::AbilityClass' has a wrong offset!");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_ApplyAbilityToInputActions, InputAction) == 0x000010, "Member 'MarinerGameplayFrameworkBlueprintLibrary_ApplyAbilityToInputActions::InputAction' has a wrong offset!");

// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.CastAimDataFromHandle
// 0x0078 (0x0078 - 0x0000)
struct MarinerGameplayFrameworkBlueprintLibrary_CastAimDataFromHandle final
{
public:
	struct FGameplayAbilityTargetDataHandle       AimDataHandle;                                     // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMarinerGameplayAbilityTargetData_Aim  ReturnValue;                                       // 0x0028(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameplayFrameworkBlueprintLibrary_CastAimDataFromHandle) == 0x000008, "Wrong alignment on MarinerGameplayFrameworkBlueprintLibrary_CastAimDataFromHandle");
static_assert(sizeof(MarinerGameplayFrameworkBlueprintLibrary_CastAimDataFromHandle) == 0x000078, "Wrong size on MarinerGameplayFrameworkBlueprintLibrary_CastAimDataFromHandle");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_CastAimDataFromHandle, AimDataHandle) == 0x000000, "Member 'MarinerGameplayFrameworkBlueprintLibrary_CastAimDataFromHandle::AimDataHandle' has a wrong offset!");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_CastAimDataFromHandle, ReturnValue) == 0x000028, "Member 'MarinerGameplayFrameworkBlueprintLibrary_CastAimDataFromHandle::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.DoesAbilitySpecExistForSpecHandle
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameplayFrameworkBlueprintLibrary_DoesAbilitySpecExistForSpecHandle final
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             AbilitySpecHandle;                                 // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1747[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGameplayFrameworkBlueprintLibrary_DoesAbilitySpecExistForSpecHandle) == 0x000008, "Wrong alignment on MarinerGameplayFrameworkBlueprintLibrary_DoesAbilitySpecExistForSpecHandle");
static_assert(sizeof(MarinerGameplayFrameworkBlueprintLibrary_DoesAbilitySpecExistForSpecHandle) == 0x000010, "Wrong size on MarinerGameplayFrameworkBlueprintLibrary_DoesAbilitySpecExistForSpecHandle");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_DoesAbilitySpecExistForSpecHandle, AbilitySystemComponent) == 0x000000, "Member 'MarinerGameplayFrameworkBlueprintLibrary_DoesAbilitySpecExistForSpecHandle::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_DoesAbilitySpecExistForSpecHandle, AbilitySpecHandle) == 0x000008, "Member 'MarinerGameplayFrameworkBlueprintLibrary_DoesAbilitySpecExistForSpecHandle::AbilitySpecHandle' has a wrong offset!");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_DoesAbilitySpecExistForSpecHandle, ReturnValue) == 0x00000C, "Member 'MarinerGameplayFrameworkBlueprintLibrary_DoesAbilitySpecExistForSpecHandle::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.GetPrimaryAbilityInstance
// 0x0018 (0x0018 - 0x0000)
struct MarinerGameplayFrameworkBlueprintLibrary_GetPrimaryAbilityInstance final
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             AbilitySpecHandle;                                 // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1748[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayAbility*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameplayFrameworkBlueprintLibrary_GetPrimaryAbilityInstance) == 0x000008, "Wrong alignment on MarinerGameplayFrameworkBlueprintLibrary_GetPrimaryAbilityInstance");
static_assert(sizeof(MarinerGameplayFrameworkBlueprintLibrary_GetPrimaryAbilityInstance) == 0x000018, "Wrong size on MarinerGameplayFrameworkBlueprintLibrary_GetPrimaryAbilityInstance");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_GetPrimaryAbilityInstance, AbilitySystemComponent) == 0x000000, "Member 'MarinerGameplayFrameworkBlueprintLibrary_GetPrimaryAbilityInstance::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_GetPrimaryAbilityInstance, AbilitySpecHandle) == 0x000008, "Member 'MarinerGameplayFrameworkBlueprintLibrary_GetPrimaryAbilityInstance::AbilitySpecHandle' has a wrong offset!");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_GetPrimaryAbilityInstance, ReturnValue) == 0x000010, "Member 'MarinerGameplayFrameworkBlueprintLibrary_GetPrimaryAbilityInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.GetWorldFromWorldContext
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameplayFrameworkBlueprintLibrary_GetWorldFromWorldContext final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameplayFrameworkBlueprintLibrary_GetWorldFromWorldContext) == 0x000008, "Wrong alignment on MarinerGameplayFrameworkBlueprintLibrary_GetWorldFromWorldContext");
static_assert(sizeof(MarinerGameplayFrameworkBlueprintLibrary_GetWorldFromWorldContext) == 0x000010, "Wrong size on MarinerGameplayFrameworkBlueprintLibrary_GetWorldFromWorldContext");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_GetWorldFromWorldContext, WorldContextObject) == 0x000000, "Member 'MarinerGameplayFrameworkBlueprintLibrary_GetWorldFromWorldContext::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_GetWorldFromWorldContext, ReturnValue) == 0x000008, "Member 'MarinerGameplayFrameworkBlueprintLibrary_GetWorldFromWorldContext::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.IsAbilityActive
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameplayFrameworkBlueprintLibrary_IsAbilityActive final
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             AbilitySpecHandle;                                 // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1749[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGameplayFrameworkBlueprintLibrary_IsAbilityActive) == 0x000008, "Wrong alignment on MarinerGameplayFrameworkBlueprintLibrary_IsAbilityActive");
static_assert(sizeof(MarinerGameplayFrameworkBlueprintLibrary_IsAbilityActive) == 0x000010, "Wrong size on MarinerGameplayFrameworkBlueprintLibrary_IsAbilityActive");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_IsAbilityActive, AbilitySystemComponent) == 0x000000, "Member 'MarinerGameplayFrameworkBlueprintLibrary_IsAbilityActive::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_IsAbilityActive, AbilitySpecHandle) == 0x000008, "Member 'MarinerGameplayFrameworkBlueprintLibrary_IsAbilityActive::AbilitySpecHandle' has a wrong offset!");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_IsAbilityActive, ReturnValue) == 0x00000C, "Member 'MarinerGameplayFrameworkBlueprintLibrary_IsAbilityActive::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.IsGameplayAbilitySpecHandleValid
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameplayFrameworkBlueprintLibrary_IsGameplayAbilitySpecHandleValid final
{
public:
	struct FGameplayAbilitySpecHandle             AbilitySpecHandle;                                 // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174A[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGameplayFrameworkBlueprintLibrary_IsGameplayAbilitySpecHandleValid) == 0x000004, "Wrong alignment on MarinerGameplayFrameworkBlueprintLibrary_IsGameplayAbilitySpecHandleValid");
static_assert(sizeof(MarinerGameplayFrameworkBlueprintLibrary_IsGameplayAbilitySpecHandleValid) == 0x000008, "Wrong size on MarinerGameplayFrameworkBlueprintLibrary_IsGameplayAbilitySpecHandleValid");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_IsGameplayAbilitySpecHandleValid, AbilitySpecHandle) == 0x000000, "Member 'MarinerGameplayFrameworkBlueprintLibrary_IsGameplayAbilitySpecHandleValid::AbilitySpecHandle' has a wrong offset!");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_IsGameplayAbilitySpecHandleValid, ReturnValue) == 0x000004, "Member 'MarinerGameplayFrameworkBlueprintLibrary_IsGameplayAbilitySpecHandleValid::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.RemoveGameplayCue
// 0x00C8 (0x00C8 - 0x0000)
struct MarinerGameplayFrameworkBlueprintLibrary_RemoveGameplayCue final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameplayFrameworkBlueprintLibrary_RemoveGameplayCue) == 0x000008, "Wrong alignment on MarinerGameplayFrameworkBlueprintLibrary_RemoveGameplayCue");
static_assert(sizeof(MarinerGameplayFrameworkBlueprintLibrary_RemoveGameplayCue) == 0x0000C8, "Wrong size on MarinerGameplayFrameworkBlueprintLibrary_RemoveGameplayCue");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_RemoveGameplayCue, TargetActor) == 0x000000, "Member 'MarinerGameplayFrameworkBlueprintLibrary_RemoveGameplayCue::TargetActor' has a wrong offset!");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_RemoveGameplayCue, GameplayCueTag) == 0x000008, "Member 'MarinerGameplayFrameworkBlueprintLibrary_RemoveGameplayCue::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(MarinerGameplayFrameworkBlueprintLibrary_RemoveGameplayCue, Parameters) == 0x000010, "Member 'MarinerGameplayFrameworkBlueprintLibrary_RemoveGameplayCue::Parameters' has a wrong offset!");

// Function Mariner.MarinerChatWheel_BaseNode.GetChatWheelDisplayText
// 0x0020 (0x0020 - 0x0000)
struct MarinerChatWheel_BaseNode_GetChatWheelDisplayText final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChatWheel_BaseNode_GetChatWheelDisplayText) == 0x000008, "Wrong alignment on MarinerChatWheel_BaseNode_GetChatWheelDisplayText");
static_assert(sizeof(MarinerChatWheel_BaseNode_GetChatWheelDisplayText) == 0x000020, "Wrong size on MarinerChatWheel_BaseNode_GetChatWheelDisplayText");
static_assert(offsetof(MarinerChatWheel_BaseNode_GetChatWheelDisplayText, WorldContextObject) == 0x000000, "Member 'MarinerChatWheel_BaseNode_GetChatWheelDisplayText::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerChatWheel_BaseNode_GetChatWheelDisplayText, ReturnValue) == 0x000008, "Member 'MarinerChatWheel_BaseNode_GetChatWheelDisplayText::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerChatWheel_ParentNode.GetChildByTraversalDirection
// 0x0010 (0x0010 - 0x0000)
struct MarinerChatWheel_ParentNode_GetChildByTraversalDirection final
{
public:
	EMarinerTraversalDirection                    TraversalDirection;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerChatWheel_BaseNode*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChatWheel_ParentNode_GetChildByTraversalDirection) == 0x000008, "Wrong alignment on MarinerChatWheel_ParentNode_GetChildByTraversalDirection");
static_assert(sizeof(MarinerChatWheel_ParentNode_GetChildByTraversalDirection) == 0x000010, "Wrong size on MarinerChatWheel_ParentNode_GetChildByTraversalDirection");
static_assert(offsetof(MarinerChatWheel_ParentNode_GetChildByTraversalDirection, TraversalDirection) == 0x000000, "Member 'MarinerChatWheel_ParentNode_GetChildByTraversalDirection::TraversalDirection' has a wrong offset!");
static_assert(offsetof(MarinerChatWheel_ParentNode_GetChildByTraversalDirection, ReturnValue) == 0x000008, "Member 'MarinerChatWheel_ParentNode_GetChildByTraversalDirection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerChatWheel_LeafNode.GetMessageToSend
// 0x0010 (0x0010 - 0x0000)
struct MarinerChatWheel_LeafNode_GetMessageToSend final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerLocalMessage>       ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerChatWheel_LeafNode_GetMessageToSend) == 0x000008, "Wrong alignment on MarinerChatWheel_LeafNode_GetMessageToSend");
static_assert(sizeof(MarinerChatWheel_LeafNode_GetMessageToSend) == 0x000010, "Wrong size on MarinerChatWheel_LeafNode_GetMessageToSend");
static_assert(offsetof(MarinerChatWheel_LeafNode_GetMessageToSend, WorldContextObject) == 0x000000, "Member 'MarinerChatWheel_LeafNode_GetMessageToSend::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerChatWheel_LeafNode_GetMessageToSend, ReturnValue) == 0x000008, "Member 'MarinerChatWheel_LeafNode_GetMessageToSend::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.ApplySkin
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectile_ApplySkin final
{
public:
	class UMarinerAbilitySkinData_Base*           ProfileSkinData;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_ApplySkin) == 0x000008, "Wrong alignment on MarinerProjectile_ApplySkin");
static_assert(sizeof(MarinerProjectile_ApplySkin) == 0x000008, "Wrong size on MarinerProjectile_ApplySkin");
static_assert(offsetof(MarinerProjectile_ApplySkin, ProfileSkinData) == 0x000000, "Member 'MarinerProjectile_ApplySkin::ProfileSkinData' has a wrong offset!");

// Function Mariner.MarinerProjectile.AuthorityAddDamageImmuneActor
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectile_AuthorityAddDamageImmuneActor final
{
public:
	class AActor*                                 DamageImmuneActor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_AuthorityAddDamageImmuneActor) == 0x000008, "Wrong alignment on MarinerProjectile_AuthorityAddDamageImmuneActor");
static_assert(sizeof(MarinerProjectile_AuthorityAddDamageImmuneActor) == 0x000008, "Wrong size on MarinerProjectile_AuthorityAddDamageImmuneActor");
static_assert(offsetof(MarinerProjectile_AuthorityAddDamageImmuneActor, DamageImmuneActor) == 0x000000, "Member 'MarinerProjectile_AuthorityAddDamageImmuneActor::DamageImmuneActor' has a wrong offset!");

// Function Mariner.MarinerProjectile.AuthorityApplyProjectileModifier
// 0x0020 (0x0020 - 0x0000)
struct MarinerProjectile_AuthorityApplyProjectileModifier final
{
public:
	float                                         LifetimeMultiplier;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewSpeedMultiplier;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewGravityScaleMultiplier;                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176B[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ModifyInstigator;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176C[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerProjectile_AuthorityApplyProjectileModifier) == 0x000008, "Wrong alignment on MarinerProjectile_AuthorityApplyProjectileModifier");
static_assert(sizeof(MarinerProjectile_AuthorityApplyProjectileModifier) == 0x000020, "Wrong size on MarinerProjectile_AuthorityApplyProjectileModifier");
static_assert(offsetof(MarinerProjectile_AuthorityApplyProjectileModifier, LifetimeMultiplier) == 0x000000, "Member 'MarinerProjectile_AuthorityApplyProjectileModifier::LifetimeMultiplier' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityApplyProjectileModifier, NewSpeedMultiplier) == 0x000004, "Member 'MarinerProjectile_AuthorityApplyProjectileModifier::NewSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityApplyProjectileModifier, NewGravityScaleMultiplier) == 0x000008, "Member 'MarinerProjectile_AuthorityApplyProjectileModifier::NewGravityScaleMultiplier' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityApplyProjectileModifier, ModifyInstigator) == 0x000010, "Member 'MarinerProjectile_AuthorityApplyProjectileModifier::ModifyInstigator' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityApplyProjectileModifier, ReturnValue) == 0x000018, "Member 'MarinerProjectile_AuthorityApplyProjectileModifier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.AuthorityApplyTimedProjectileModifier
// 0x0020 (0x0020 - 0x0000)
struct MarinerProjectile_AuthorityApplyTimedProjectileModifier final
{
public:
	float                                         LifetimeMultiplier;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewSpeedMultiplier;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewGravityScaleMultiplier;                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176D[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ModifyInstigator;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176E[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerProjectile_AuthorityApplyTimedProjectileModifier) == 0x000008, "Wrong alignment on MarinerProjectile_AuthorityApplyTimedProjectileModifier");
static_assert(sizeof(MarinerProjectile_AuthorityApplyTimedProjectileModifier) == 0x000020, "Wrong size on MarinerProjectile_AuthorityApplyTimedProjectileModifier");
static_assert(offsetof(MarinerProjectile_AuthorityApplyTimedProjectileModifier, LifetimeMultiplier) == 0x000000, "Member 'MarinerProjectile_AuthorityApplyTimedProjectileModifier::LifetimeMultiplier' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityApplyTimedProjectileModifier, NewSpeedMultiplier) == 0x000004, "Member 'MarinerProjectile_AuthorityApplyTimedProjectileModifier::NewSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityApplyTimedProjectileModifier, NewGravityScaleMultiplier) == 0x000008, "Member 'MarinerProjectile_AuthorityApplyTimedProjectileModifier::NewGravityScaleMultiplier' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityApplyTimedProjectileModifier, ModifyInstigator) == 0x000010, "Member 'MarinerProjectile_AuthorityApplyTimedProjectileModifier::ModifyInstigator' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityApplyTimedProjectileModifier, Duration) == 0x000018, "Member 'MarinerProjectile_AuthorityApplyTimedProjectileModifier::Duration' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityApplyTimedProjectileModifier, ReturnValue) == 0x00001C, "Member 'MarinerProjectile_AuthorityApplyTimedProjectileModifier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.AuthorityEnableFromPool
// 0x0048 (0x0048 - 0x0000)
struct MarinerProjectile_AuthorityEnableFromPool final
{
public:
	struct FVector                                InitialLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InstigatorEyeLocation;                             // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  InInstigator;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOwner;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShootDirection;                                    // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176F[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        HomingTarget;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HomingTargetSocketName;                            // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_AuthorityEnableFromPool) == 0x000008, "Wrong alignment on MarinerProjectile_AuthorityEnableFromPool");
static_assert(sizeof(MarinerProjectile_AuthorityEnableFromPool) == 0x000048, "Wrong size on MarinerProjectile_AuthorityEnableFromPool");
static_assert(offsetof(MarinerProjectile_AuthorityEnableFromPool, InitialLocation) == 0x000000, "Member 'MarinerProjectile_AuthorityEnableFromPool::InitialLocation' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityEnableFromPool, InstigatorEyeLocation) == 0x00000C, "Member 'MarinerProjectile_AuthorityEnableFromPool::InstigatorEyeLocation' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityEnableFromPool, InInstigator) == 0x000018, "Member 'MarinerProjectile_AuthorityEnableFromPool::InInstigator' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityEnableFromPool, InOwner) == 0x000020, "Member 'MarinerProjectile_AuthorityEnableFromPool::InOwner' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityEnableFromPool, ShootDirection) == 0x000028, "Member 'MarinerProjectile_AuthorityEnableFromPool::ShootDirection' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityEnableFromPool, HomingTarget) == 0x000038, "Member 'MarinerProjectile_AuthorityEnableFromPool::HomingTarget' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityEnableFromPool, HomingTargetSocketName) == 0x000040, "Member 'MarinerProjectile_AuthorityEnableFromPool::HomingTargetSocketName' has a wrong offset!");

// Function Mariner.MarinerProjectile.AuthorityOnMatchStateSet
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectile_AuthorityOnMatchStateSet final
{
public:
	class FName                                   InMatchState;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_AuthorityOnMatchStateSet) == 0x000004, "Wrong alignment on MarinerProjectile_AuthorityOnMatchStateSet");
static_assert(sizeof(MarinerProjectile_AuthorityOnMatchStateSet) == 0x000008, "Wrong size on MarinerProjectile_AuthorityOnMatchStateSet");
static_assert(offsetof(MarinerProjectile_AuthorityOnMatchStateSet, InMatchState) == 0x000000, "Member 'MarinerProjectile_AuthorityOnMatchStateSet::InMatchState' has a wrong offset!");

// Function Mariner.MarinerProjectile.AuthorityRemoveDamageImmuneActor
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectile_AuthorityRemoveDamageImmuneActor final
{
public:
	class AActor*                                 DamageImmuneActor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_AuthorityRemoveDamageImmuneActor) == 0x000008, "Wrong alignment on MarinerProjectile_AuthorityRemoveDamageImmuneActor");
static_assert(sizeof(MarinerProjectile_AuthorityRemoveDamageImmuneActor) == 0x000008, "Wrong size on MarinerProjectile_AuthorityRemoveDamageImmuneActor");
static_assert(offsetof(MarinerProjectile_AuthorityRemoveDamageImmuneActor, DamageImmuneActor) == 0x000000, "Member 'MarinerProjectile_AuthorityRemoveDamageImmuneActor::DamageImmuneActor' has a wrong offset!");

// Function Mariner.MarinerProjectile.AuthorityRemoveProjectileModifier
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectile_AuthorityRemoveProjectileModifier final
{
public:
	class AActor*                                 ModifyInstigator;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_AuthorityRemoveProjectileModifier) == 0x000008, "Wrong alignment on MarinerProjectile_AuthorityRemoveProjectileModifier");
static_assert(sizeof(MarinerProjectile_AuthorityRemoveProjectileModifier) == 0x000008, "Wrong size on MarinerProjectile_AuthorityRemoveProjectileModifier");
static_assert(offsetof(MarinerProjectile_AuthorityRemoveProjectileModifier, ModifyInstigator) == 0x000000, "Member 'MarinerProjectile_AuthorityRemoveProjectileModifier::ModifyInstigator' has a wrong offset!");

// Function Mariner.MarinerProjectile.AuthorityRemoveTimedProjectileModifier
// 0x0010 (0x0010 - 0x0000)
struct MarinerProjectile_AuthorityRemoveTimedProjectileModifier final
{
public:
	class AActor*                                 ModifyInstigator;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ImprintedProjectileEnableId;                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1770[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerProjectile_AuthorityRemoveTimedProjectileModifier) == 0x000008, "Wrong alignment on MarinerProjectile_AuthorityRemoveTimedProjectileModifier");
static_assert(sizeof(MarinerProjectile_AuthorityRemoveTimedProjectileModifier) == 0x000010, "Wrong size on MarinerProjectile_AuthorityRemoveTimedProjectileModifier");
static_assert(offsetof(MarinerProjectile_AuthorityRemoveTimedProjectileModifier, ModifyInstigator) == 0x000000, "Member 'MarinerProjectile_AuthorityRemoveTimedProjectileModifier::ModifyInstigator' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityRemoveTimedProjectileModifier, ImprintedProjectileEnableId) == 0x000008, "Member 'MarinerProjectile_AuthorityRemoveTimedProjectileModifier::ImprintedProjectileEnableId' has a wrong offset!");

// Function Mariner.MarinerProjectile.BP_GetOverrideMegaBlastDamageRequirement
// 0x0004 (0x0004 - 0x0000)
struct MarinerProjectile_BP_GetOverrideMegaBlastDamageRequirement final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_BP_GetOverrideMegaBlastDamageRequirement) == 0x000004, "Wrong alignment on MarinerProjectile_BP_GetOverrideMegaBlastDamageRequirement");
static_assert(sizeof(MarinerProjectile_BP_GetOverrideMegaBlastDamageRequirement) == 0x000004, "Wrong size on MarinerProjectile_BP_GetOverrideMegaBlastDamageRequirement");
static_assert(offsetof(MarinerProjectile_BP_GetOverrideMegaBlastDamageRequirement, ReturnValue) == 0x000000, "Member 'MarinerProjectile_BP_GetOverrideMegaBlastDamageRequirement::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.BP_IsTargetValidForHoming
// 0x0010 (0x0010 - 0x0000)
struct MarinerProjectile_BP_IsTargetValidForHoming final
{
public:
	class AActor*                                 PotentialHomingTarget;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1771[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerProjectile_BP_IsTargetValidForHoming) == 0x000008, "Wrong alignment on MarinerProjectile_BP_IsTargetValidForHoming");
static_assert(sizeof(MarinerProjectile_BP_IsTargetValidForHoming) == 0x000010, "Wrong size on MarinerProjectile_BP_IsTargetValidForHoming");
static_assert(offsetof(MarinerProjectile_BP_IsTargetValidForHoming, PotentialHomingTarget) == 0x000000, "Member 'MarinerProjectile_BP_IsTargetValidForHoming::PotentialHomingTarget' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_BP_IsTargetValidForHoming, ReturnValue) == 0x000008, "Member 'MarinerProjectile_BP_IsTargetValidForHoming::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.BP_OnFailedToStickToImpactedObject
// 0x0110 (0x0110 - 0x0000)
struct MarinerProjectile_BP_OnFailedToStickToImpactedObject final
{
public:
	struct FHitResult                             ImpactHit;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                             StickySweep;                                       // 0x0088(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_BP_OnFailedToStickToImpactedObject) == 0x000004, "Wrong alignment on MarinerProjectile_BP_OnFailedToStickToImpactedObject");
static_assert(sizeof(MarinerProjectile_BP_OnFailedToStickToImpactedObject) == 0x000110, "Wrong size on MarinerProjectile_BP_OnFailedToStickToImpactedObject");
static_assert(offsetof(MarinerProjectile_BP_OnFailedToStickToImpactedObject, ImpactHit) == 0x000000, "Member 'MarinerProjectile_BP_OnFailedToStickToImpactedObject::ImpactHit' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_BP_OnFailedToStickToImpactedObject, StickySweep) == 0x000088, "Member 'MarinerProjectile_BP_OnFailedToStickToImpactedObject::StickySweep' has a wrong offset!");

// Function Mariner.MarinerProjectile.BP_OnImpact
// 0x0088 (0x0088 - 0x0000)
struct MarinerProjectile_BP_OnImpact final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_BP_OnImpact) == 0x000004, "Wrong alignment on MarinerProjectile_BP_OnImpact");
static_assert(sizeof(MarinerProjectile_BP_OnImpact) == 0x000088, "Wrong size on MarinerProjectile_BP_OnImpact");
static_assert(offsetof(MarinerProjectile_BP_OnImpact, HitResult) == 0x000000, "Member 'MarinerProjectile_BP_OnImpact::HitResult' has a wrong offset!");

// Function Mariner.MarinerProjectile.BP_OnInstigatorGameplayTagEvent
// 0x000C (0x000C - 0x0000)
struct MarinerProjectile_BP_OnInstigatorGameplayTagEvent final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_BP_OnInstigatorGameplayTagEvent) == 0x000004, "Wrong alignment on MarinerProjectile_BP_OnInstigatorGameplayTagEvent");
static_assert(sizeof(MarinerProjectile_BP_OnInstigatorGameplayTagEvent) == 0x00000C, "Wrong size on MarinerProjectile_BP_OnInstigatorGameplayTagEvent");
static_assert(offsetof(MarinerProjectile_BP_OnInstigatorGameplayTagEvent, GameplayTag) == 0x000000, "Member 'MarinerProjectile_BP_OnInstigatorGameplayTagEvent::GameplayTag' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_BP_OnInstigatorGameplayTagEvent, Count) == 0x000008, "Member 'MarinerProjectile_BP_OnInstigatorGameplayTagEvent::Count' has a wrong offset!");

// Function Mariner.MarinerProjectile.BP_OnLostHomingTarget
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectile_BP_OnLostHomingTarget final
{
public:
	class AActor*                                 ExHomingTarget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_BP_OnLostHomingTarget) == 0x000008, "Wrong alignment on MarinerProjectile_BP_OnLostHomingTarget");
static_assert(sizeof(MarinerProjectile_BP_OnLostHomingTarget) == 0x000008, "Wrong size on MarinerProjectile_BP_OnLostHomingTarget");
static_assert(offsetof(MarinerProjectile_BP_OnLostHomingTarget, ExHomingTarget) == 0x000000, "Member 'MarinerProjectile_BP_OnLostHomingTarget::ExHomingTarget' has a wrong offset!");

// Function Mariner.MarinerProjectile.BP_OnStuckToImpactedObject
// 0x0088 (0x0088 - 0x0000)
struct MarinerProjectile_BP_OnStuckToImpactedObject final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_BP_OnStuckToImpactedObject) == 0x000004, "Wrong alignment on MarinerProjectile_BP_OnStuckToImpactedObject");
static_assert(sizeof(MarinerProjectile_BP_OnStuckToImpactedObject) == 0x000088, "Wrong size on MarinerProjectile_BP_OnStuckToImpactedObject");
static_assert(offsetof(MarinerProjectile_BP_OnStuckToImpactedObject, Hit) == 0x000000, "Member 'MarinerProjectile_BP_OnStuckToImpactedObject::Hit' has a wrong offset!");

// Function Mariner.MarinerProjectile.BP_ToggleHideComponentsOnRealityChange
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectile_BP_ToggleHideComponentsOnRealityChange final
{
public:
	bool                                          bShouldBeHidden;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_BP_ToggleHideComponentsOnRealityChange) == 0x000001, "Wrong alignment on MarinerProjectile_BP_ToggleHideComponentsOnRealityChange");
static_assert(sizeof(MarinerProjectile_BP_ToggleHideComponentsOnRealityChange) == 0x000001, "Wrong size on MarinerProjectile_BP_ToggleHideComponentsOnRealityChange");
static_assert(offsetof(MarinerProjectile_BP_ToggleHideComponentsOnRealityChange, bShouldBeHidden) == 0x000000, "Member 'MarinerProjectile_BP_ToggleHideComponentsOnRealityChange::bShouldBeHidden' has a wrong offset!");

// Function Mariner.MarinerProjectile.ExplodeFromImpact
// 0x0088 (0x0088 - 0x0000)
struct MarinerProjectile_ExplodeFromImpact final
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_ExplodeFromImpact) == 0x000004, "Wrong alignment on MarinerProjectile_ExplodeFromImpact");
static_assert(sizeof(MarinerProjectile_ExplodeFromImpact) == 0x000088, "Wrong size on MarinerProjectile_ExplodeFromImpact");
static_assert(offsetof(MarinerProjectile_ExplodeFromImpact, Impact) == 0x000000, "Member 'MarinerProjectile_ExplodeFromImpact::Impact' has a wrong offset!");

// Function Mariner.MarinerProjectile.InitDirection
// 0x000C (0x000C - 0x0000)
struct MarinerProjectile_InitDirection final
{
public:
	struct FVector                                ShootDirection;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_InitDirection) == 0x000004, "Wrong alignment on MarinerProjectile_InitDirection");
static_assert(sizeof(MarinerProjectile_InitDirection) == 0x00000C, "Wrong size on MarinerProjectile_InitDirection");
static_assert(offsetof(MarinerProjectile_InitDirection, ShootDirection) == 0x000000, "Member 'MarinerProjectile_InitDirection::ShootDirection' has a wrong offset!");

// Function Mariner.MarinerProjectile.InitDirectionAndSpeed
// 0x0010 (0x0010 - 0x0000)
struct MarinerProjectile_InitDirectionAndSpeed final
{
public:
	struct FVector                                ShootDirection;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_InitDirectionAndSpeed) == 0x000004, "Wrong alignment on MarinerProjectile_InitDirectionAndSpeed");
static_assert(sizeof(MarinerProjectile_InitDirectionAndSpeed) == 0x000010, "Wrong size on MarinerProjectile_InitDirectionAndSpeed");
static_assert(offsetof(MarinerProjectile_InitDirectionAndSpeed, ShootDirection) == 0x000000, "Member 'MarinerProjectile_InitDirectionAndSpeed::ShootDirection' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_InitDirectionAndSpeed, Speed) == 0x00000C, "Member 'MarinerProjectile_InitDirectionAndSpeed::Speed' has a wrong offset!");

// Function Mariner.MarinerProjectile.MulticastDisableToPool
// 0x0004 (0x0004 - 0x0000)
struct MarinerProjectile_MulticastDisableToPool final
{
public:
	float                                         CurrentTimeStamp;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_MulticastDisableToPool) == 0x000004, "Wrong alignment on MarinerProjectile_MulticastDisableToPool");
static_assert(sizeof(MarinerProjectile_MulticastDisableToPool) == 0x000004, "Wrong size on MarinerProjectile_MulticastDisableToPool");
static_assert(offsetof(MarinerProjectile_MulticastDisableToPool, CurrentTimeStamp) == 0x000000, "Member 'MarinerProjectile_MulticastDisableToPool::CurrentTimeStamp' has a wrong offset!");

// Function Mariner.MarinerProjectile.MulticastEnableFromPool_Expanded
// 0x0048 (0x0048 - 0x0000)
struct MarinerProjectile_MulticastEnableFromPool_Expanded final
{
public:
	struct FVector_NetQuantize                    InitialLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    InstigatorEyeLocation;                             // 0x000C(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 InitialDirection;                                  // 0x0018(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FireSocket;                                        // 0x0024(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1772[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        HomingTarget;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HomingTargetSocketName;                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTimeStamp;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1773[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerProjectile_MulticastEnableFromPool_Expanded) == 0x000008, "Wrong alignment on MarinerProjectile_MulticastEnableFromPool_Expanded");
static_assert(sizeof(MarinerProjectile_MulticastEnableFromPool_Expanded) == 0x000048, "Wrong size on MarinerProjectile_MulticastEnableFromPool_Expanded");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_Expanded, InitialLocation) == 0x000000, "Member 'MarinerProjectile_MulticastEnableFromPool_Expanded::InitialLocation' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_Expanded, InstigatorEyeLocation) == 0x00000C, "Member 'MarinerProjectile_MulticastEnableFromPool_Expanded::InstigatorEyeLocation' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_Expanded, InitialDirection) == 0x000018, "Member 'MarinerProjectile_MulticastEnableFromPool_Expanded::InitialDirection' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_Expanded, FireSocket) == 0x000024, "Member 'MarinerProjectile_MulticastEnableFromPool_Expanded::FireSocket' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_Expanded, HomingTarget) == 0x000030, "Member 'MarinerProjectile_MulticastEnableFromPool_Expanded::HomingTarget' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_Expanded, HomingTargetSocketName) == 0x000038, "Member 'MarinerProjectile_MulticastEnableFromPool_Expanded::HomingTargetSocketName' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_Expanded, CurrentTimeStamp) == 0x000040, "Member 'MarinerProjectile_MulticastEnableFromPool_Expanded::CurrentTimeStamp' has a wrong offset!");

// Function Mariner.MarinerProjectile.MulticastEnableFromPool_Minimal
// 0x0028 (0x0028 - 0x0000)
struct MarinerProjectile_MulticastEnableFromPool_Minimal final
{
public:
	struct FVector_NetQuantize                    InitialLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    InstigatorEyeLocation;                             // 0x000C(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 InitialDirection;                                  // 0x0018(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTimeStamp;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_MulticastEnableFromPool_Minimal) == 0x000004, "Wrong alignment on MarinerProjectile_MulticastEnableFromPool_Minimal");
static_assert(sizeof(MarinerProjectile_MulticastEnableFromPool_Minimal) == 0x000028, "Wrong size on MarinerProjectile_MulticastEnableFromPool_Minimal");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_Minimal, InitialLocation) == 0x000000, "Member 'MarinerProjectile_MulticastEnableFromPool_Minimal::InitialLocation' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_Minimal, InstigatorEyeLocation) == 0x00000C, "Member 'MarinerProjectile_MulticastEnableFromPool_Minimal::InstigatorEyeLocation' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_Minimal, InitialDirection) == 0x000018, "Member 'MarinerProjectile_MulticastEnableFromPool_Minimal::InitialDirection' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_Minimal, CurrentTimeStamp) == 0x000024, "Member 'MarinerProjectile_MulticastEnableFromPool_Minimal::CurrentTimeStamp' has a wrong offset!");

// Function Mariner.MarinerProjectile.MulticastEnableFromPool_NonDefaultFireSocket
// 0x0030 (0x0030 - 0x0000)
struct MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket final
{
public:
	struct FVector_NetQuantize                    InitialLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    InstigatorEyeLocation;                             // 0x000C(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 InitialDirection;                                  // 0x0018(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FireSocket;                                        // 0x0024(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTimeStamp;                                  // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket) == 0x000004, "Wrong alignment on MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket");
static_assert(sizeof(MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket) == 0x000030, "Wrong size on MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket, InitialLocation) == 0x000000, "Member 'MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket::InitialLocation' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket, InstigatorEyeLocation) == 0x00000C, "Member 'MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket::InstigatorEyeLocation' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket, InitialDirection) == 0x000018, "Member 'MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket::InitialDirection' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket, FireSocket) == 0x000024, "Member 'MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket::FireSocket' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket, CurrentTimeStamp) == 0x00002C, "Member 'MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket::CurrentTimeStamp' has a wrong offset!");

// Function Mariner.MarinerProjectile.MulticastEnableFromPool_WithHoming
// 0x0040 (0x0040 - 0x0000)
struct MarinerProjectile_MulticastEnableFromPool_WithHoming final
{
public:
	struct FVector_NetQuantize                    InitialLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    InstigatorEyeLocation;                             // 0x000C(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 InitialDirection;                                  // 0x0018(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1774[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        HomingTarget;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HomingTargetSocketName;                            // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTimeStamp;                                  // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1775[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerProjectile_MulticastEnableFromPool_WithHoming) == 0x000008, "Wrong alignment on MarinerProjectile_MulticastEnableFromPool_WithHoming");
static_assert(sizeof(MarinerProjectile_MulticastEnableFromPool_WithHoming) == 0x000040, "Wrong size on MarinerProjectile_MulticastEnableFromPool_WithHoming");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_WithHoming, InitialLocation) == 0x000000, "Member 'MarinerProjectile_MulticastEnableFromPool_WithHoming::InitialLocation' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_WithHoming, InstigatorEyeLocation) == 0x00000C, "Member 'MarinerProjectile_MulticastEnableFromPool_WithHoming::InstigatorEyeLocation' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_WithHoming, InitialDirection) == 0x000018, "Member 'MarinerProjectile_MulticastEnableFromPool_WithHoming::InitialDirection' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_WithHoming, HomingTarget) == 0x000028, "Member 'MarinerProjectile_MulticastEnableFromPool_WithHoming::HomingTarget' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_WithHoming, HomingTargetSocketName) == 0x000030, "Member 'MarinerProjectile_MulticastEnableFromPool_WithHoming::HomingTargetSocketName' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_MulticastEnableFromPool_WithHoming, CurrentTimeStamp) == 0x000038, "Member 'MarinerProjectile_MulticastEnableFromPool_WithHoming::CurrentTimeStamp' has a wrong offset!");

// Function Mariner.MarinerProjectile.OnImpact
// 0x0088 (0x0088 - 0x0000)
struct MarinerProjectile_OnImpact final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_OnImpact) == 0x000004, "Wrong alignment on MarinerProjectile_OnImpact");
static_assert(sizeof(MarinerProjectile_OnImpact) == 0x000088, "Wrong size on MarinerProjectile_OnImpact");
static_assert(offsetof(MarinerProjectile_OnImpact, HitResult) == 0x000000, "Member 'MarinerProjectile_OnImpact::HitResult' has a wrong offset!");

// Function Mariner.MarinerProjectile.OnInstigatorGameplayTagEvent
// 0x000C (0x000C - 0x0000)
struct MarinerProjectile_OnInstigatorGameplayTagEvent final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_OnInstigatorGameplayTagEvent) == 0x000004, "Wrong alignment on MarinerProjectile_OnInstigatorGameplayTagEvent");
static_assert(sizeof(MarinerProjectile_OnInstigatorGameplayTagEvent) == 0x00000C, "Wrong size on MarinerProjectile_OnInstigatorGameplayTagEvent");
static_assert(offsetof(MarinerProjectile_OnInstigatorGameplayTagEvent, GameplayTag) == 0x000000, "Member 'MarinerProjectile_OnInstigatorGameplayTagEvent::GameplayTag' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_OnInstigatorGameplayTagEvent, Count) == 0x000008, "Member 'MarinerProjectile_OnInstigatorGameplayTagEvent::Count' has a wrong offset!");

// Function Mariner.MarinerProjectile.OnLocalCharacterChangedReality
// 0x0002 (0x0002 - 0x0000)
struct MarinerProjectile_OnLocalCharacterChangedReality final
{
public:
	EMarinerRealityState                          OldReality;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerRealityState                          NewReality;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_OnLocalCharacterChangedReality) == 0x000001, "Wrong alignment on MarinerProjectile_OnLocalCharacterChangedReality");
static_assert(sizeof(MarinerProjectile_OnLocalCharacterChangedReality) == 0x000002, "Wrong size on MarinerProjectile_OnLocalCharacterChangedReality");
static_assert(offsetof(MarinerProjectile_OnLocalCharacterChangedReality, OldReality) == 0x000000, "Member 'MarinerProjectile_OnLocalCharacterChangedReality::OldReality' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_OnLocalCharacterChangedReality, NewReality) == 0x000001, "Member 'MarinerProjectile_OnLocalCharacterChangedReality::NewReality' has a wrong offset!");

// Function Mariner.MarinerProjectile.OnModifierInstigatorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectile_OnModifierInstigatorDestroyed final
{
public:
	class AActor*                                 ModifyInstigator;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_OnModifierInstigatorDestroyed) == 0x000008, "Wrong alignment on MarinerProjectile_OnModifierInstigatorDestroyed");
static_assert(sizeof(MarinerProjectile_OnModifierInstigatorDestroyed) == 0x000008, "Wrong size on MarinerProjectile_OnModifierInstigatorDestroyed");
static_assert(offsetof(MarinerProjectile_OnModifierInstigatorDestroyed, ModifyInstigator) == 0x000000, "Member 'MarinerProjectile_OnModifierInstigatorDestroyed::ModifyInstigator' has a wrong offset!");

// Function Mariner.MarinerProjectile.OnOwnerMangoUserUpdated
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectile_OnOwnerMangoUserUpdated final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_OnOwnerMangoUserUpdated) == 0x000008, "Wrong alignment on MarinerProjectile_OnOwnerMangoUserUpdated");
static_assert(sizeof(MarinerProjectile_OnOwnerMangoUserUpdated) == 0x000008, "Wrong size on MarinerProjectile_OnOwnerMangoUserUpdated");
static_assert(offsetof(MarinerProjectile_OnOwnerMangoUserUpdated, PlayerState) == 0x000000, "Member 'MarinerProjectile_OnOwnerMangoUserUpdated::PlayerState' has a wrong offset!");

// Function Mariner.MarinerProjectile.OnOwningCharacterDestroyed
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectile_OnOwningCharacterDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_OnOwningCharacterDestroyed) == 0x000008, "Wrong alignment on MarinerProjectile_OnOwningCharacterDestroyed");
static_assert(sizeof(MarinerProjectile_OnOwningCharacterDestroyed) == 0x000008, "Wrong size on MarinerProjectile_OnOwningCharacterDestroyed");
static_assert(offsetof(MarinerProjectile_OnOwningCharacterDestroyed, DestroyedActor) == 0x000000, "Member 'MarinerProjectile_OnOwningCharacterDestroyed::DestroyedActor' has a wrong offset!");

// Function Mariner.MarinerProjectile.PauseVisualComponentMoveData
// 0x0010 (0x0010 - 0x0000)
struct MarinerProjectile_PauseVisualComponentMoveData final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_PauseVisualComponentMoveData) == 0x000008, "Wrong alignment on MarinerProjectile_PauseVisualComponentMoveData");
static_assert(sizeof(MarinerProjectile_PauseVisualComponentMoveData) == 0x000010, "Wrong size on MarinerProjectile_PauseVisualComponentMoveData");
static_assert(offsetof(MarinerProjectile_PauseVisualComponentMoveData, Param_Name) == 0x000000, "Member 'MarinerProjectile_PauseVisualComponentMoveData::Param_Name' has a wrong offset!");

// Function Mariner.MarinerProjectile.ReverseVisualComponentMoveData
// 0x0010 (0x0010 - 0x0000)
struct MarinerProjectile_ReverseVisualComponentMoveData final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_ReverseVisualComponentMoveData) == 0x000008, "Wrong alignment on MarinerProjectile_ReverseVisualComponentMoveData");
static_assert(sizeof(MarinerProjectile_ReverseVisualComponentMoveData) == 0x000010, "Wrong size on MarinerProjectile_ReverseVisualComponentMoveData");
static_assert(offsetof(MarinerProjectile_ReverseVisualComponentMoveData, Param_Name) == 0x000000, "Member 'MarinerProjectile_ReverseVisualComponentMoveData::Param_Name' has a wrong offset!");

// Function Mariner.MarinerProjectile.SetFirePointSocketName
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectile_SetFirePointSocketName final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_SetFirePointSocketName) == 0x000004, "Wrong alignment on MarinerProjectile_SetFirePointSocketName");
static_assert(sizeof(MarinerProjectile_SetFirePointSocketName) == 0x000008, "Wrong size on MarinerProjectile_SetFirePointSocketName");
static_assert(offsetof(MarinerProjectile_SetFirePointSocketName, SocketName) == 0x000000, "Member 'MarinerProjectile_SetFirePointSocketName::SocketName' has a wrong offset!");

// Function Mariner.MarinerProjectile.SetInstancedMeshVisibility
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectile_SetInstancedMeshVisibility final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_SetInstancedMeshVisibility) == 0x000001, "Wrong alignment on MarinerProjectile_SetInstancedMeshVisibility");
static_assert(sizeof(MarinerProjectile_SetInstancedMeshVisibility) == 0x000001, "Wrong size on MarinerProjectile_SetInstancedMeshVisibility");
static_assert(offsetof(MarinerProjectile_SetInstancedMeshVisibility, bIsVisible) == 0x000000, "Member 'MarinerProjectile_SetInstancedMeshVisibility::bIsVisible' has a wrong offset!");

// Function Mariner.MarinerProjectile.SetTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerProjectile_SetTeamIndex final
{
public:
	int32                                         InTeamIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_SetTeamIndex) == 0x000004, "Wrong alignment on MarinerProjectile_SetTeamIndex");
static_assert(sizeof(MarinerProjectile_SetTeamIndex) == 0x000004, "Wrong size on MarinerProjectile_SetTeamIndex");
static_assert(offsetof(MarinerProjectile_SetTeamIndex, InTeamIndex) == 0x000000, "Member 'MarinerProjectile_SetTeamIndex::InTeamIndex' has a wrong offset!");

// Function Mariner.MarinerProjectile.StopVisualComponentMoveData
// 0x0010 (0x0010 - 0x0000)
struct MarinerProjectile_StopVisualComponentMoveData final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_StopVisualComponentMoveData) == 0x000008, "Wrong alignment on MarinerProjectile_StopVisualComponentMoveData");
static_assert(sizeof(MarinerProjectile_StopVisualComponentMoveData) == 0x000010, "Wrong size on MarinerProjectile_StopVisualComponentMoveData");
static_assert(offsetof(MarinerProjectile_StopVisualComponentMoveData, Param_Name) == 0x000000, "Member 'MarinerProjectile_StopVisualComponentMoveData::Param_Name' has a wrong offset!");

// Function Mariner.MarinerProjectile.UnpauseVisualComponentMoveData
// 0x0010 (0x0010 - 0x0000)
struct MarinerProjectile_UnpauseVisualComponentMoveData final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_UnpauseVisualComponentMoveData) == 0x000008, "Wrong alignment on MarinerProjectile_UnpauseVisualComponentMoveData");
static_assert(sizeof(MarinerProjectile_UnpauseVisualComponentMoveData) == 0x000010, "Wrong size on MarinerProjectile_UnpauseVisualComponentMoveData");
static_assert(offsetof(MarinerProjectile_UnpauseVisualComponentMoveData, Param_Name) == 0x000000, "Member 'MarinerProjectile_UnpauseVisualComponentMoveData::Param_Name' has a wrong offset!");

// Function Mariner.MarinerProjectile.AuthorityIsActorDamageImmune
// 0x0010 (0x0010 - 0x0000)
struct MarinerProjectile_AuthorityIsActorDamageImmune final
{
public:
	class AActor*                                 DamageImmuneActor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1776[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerProjectile_AuthorityIsActorDamageImmune) == 0x000008, "Wrong alignment on MarinerProjectile_AuthorityIsActorDamageImmune");
static_assert(sizeof(MarinerProjectile_AuthorityIsActorDamageImmune) == 0x000010, "Wrong size on MarinerProjectile_AuthorityIsActorDamageImmune");
static_assert(offsetof(MarinerProjectile_AuthorityIsActorDamageImmune, DamageImmuneActor) == 0x000000, "Member 'MarinerProjectile_AuthorityIsActorDamageImmune::DamageImmuneActor' has a wrong offset!");
static_assert(offsetof(MarinerProjectile_AuthorityIsActorDamageImmune, ReturnValue) == 0x000008, "Member 'MarinerProjectile_AuthorityIsActorDamageImmune::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.BP_GetExtraManagedParticleComponents
// 0x0050 (0x0050 - 0x0000)
struct MarinerProjectile_BP_GetExtraManagedParticleComponents final
{
public:
	TMap<class UParticleSystemComponent*, struct FVector> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_BP_GetExtraManagedParticleComponents) == 0x000008, "Wrong alignment on MarinerProjectile_BP_GetExtraManagedParticleComponents");
static_assert(sizeof(MarinerProjectile_BP_GetExtraManagedParticleComponents) == 0x000050, "Wrong size on MarinerProjectile_BP_GetExtraManagedParticleComponents");
static_assert(offsetof(MarinerProjectile_BP_GetExtraManagedParticleComponents, ReturnValue) == 0x000000, "Member 'MarinerProjectile_BP_GetExtraManagedParticleComponents::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.BP_GetExtraManagedParticleTrailComponents
// 0x0050 (0x0050 - 0x0000)
struct MarinerProjectile_BP_GetExtraManagedParticleTrailComponents final
{
public:
	TMap<class UParticleSystemComponent*, struct FVector> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_BP_GetExtraManagedParticleTrailComponents) == 0x000008, "Wrong alignment on MarinerProjectile_BP_GetExtraManagedParticleTrailComponents");
static_assert(sizeof(MarinerProjectile_BP_GetExtraManagedParticleTrailComponents) == 0x000050, "Wrong size on MarinerProjectile_BP_GetExtraManagedParticleTrailComponents");
static_assert(offsetof(MarinerProjectile_BP_GetExtraManagedParticleTrailComponents, ReturnValue) == 0x000000, "Member 'MarinerProjectile_BP_GetExtraManagedParticleTrailComponents::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.BP_GetExtraManagedVisualComponents
// 0x0010 (0x0010 - 0x0000)
struct MarinerProjectile_BP_GetExtraManagedVisualComponents final
{
public:
	TArray<class USceneComponent*>                ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_BP_GetExtraManagedVisualComponents) == 0x000008, "Wrong alignment on MarinerProjectile_BP_GetExtraManagedVisualComponents");
static_assert(sizeof(MarinerProjectile_BP_GetExtraManagedVisualComponents) == 0x000010, "Wrong size on MarinerProjectile_BP_GetExtraManagedVisualComponents");
static_assert(offsetof(MarinerProjectile_BP_GetExtraManagedVisualComponents, ReturnValue) == 0x000000, "Member 'MarinerProjectile_BP_GetExtraManagedVisualComponents::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.DoesExplodeOnImpact
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectile_DoesExplodeOnImpact final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_DoesExplodeOnImpact) == 0x000001, "Wrong alignment on MarinerProjectile_DoesExplodeOnImpact");
static_assert(sizeof(MarinerProjectile_DoesExplodeOnImpact) == 0x000001, "Wrong size on MarinerProjectile_DoesExplodeOnImpact");
static_assert(offsetof(MarinerProjectile_DoesExplodeOnImpact, ReturnValue) == 0x000000, "Member 'MarinerProjectile_DoesExplodeOnImpact::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.GetAuthorityTimeStamp
// 0x0004 (0x0004 - 0x0000)
struct MarinerProjectile_GetAuthorityTimeStamp final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_GetAuthorityTimeStamp) == 0x000004, "Wrong alignment on MarinerProjectile_GetAuthorityTimeStamp");
static_assert(sizeof(MarinerProjectile_GetAuthorityTimeStamp) == 0x000004, "Wrong size on MarinerProjectile_GetAuthorityTimeStamp");
static_assert(offsetof(MarinerProjectile_GetAuthorityTimeStamp, ReturnValue) == 0x000000, "Member 'MarinerProjectile_GetAuthorityTimeStamp::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.GetCreationTime
// 0x0004 (0x0004 - 0x0000)
struct MarinerProjectile_GetCreationTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_GetCreationTime) == 0x000004, "Wrong alignment on MarinerProjectile_GetCreationTime");
static_assert(sizeof(MarinerProjectile_GetCreationTime) == 0x000004, "Wrong size on MarinerProjectile_GetCreationTime");
static_assert(offsetof(MarinerProjectile_GetCreationTime, ReturnValue) == 0x000000, "Member 'MarinerProjectile_GetCreationTime::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.GetDamageMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerProjectile_GetDamageMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_GetDamageMultiplier) == 0x000004, "Wrong alignment on MarinerProjectile_GetDamageMultiplier");
static_assert(sizeof(MarinerProjectile_GetDamageMultiplier) == 0x000004, "Wrong size on MarinerProjectile_GetDamageMultiplier");
static_assert(offsetof(MarinerProjectile_GetDamageMultiplier, ReturnValue) == 0x000000, "Member 'MarinerProjectile_GetDamageMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.GetImpulseBatchingType
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectile_GetImpulseBatchingType final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_GetImpulseBatchingType) == 0x000001, "Wrong alignment on MarinerProjectile_GetImpulseBatchingType");
static_assert(sizeof(MarinerProjectile_GetImpulseBatchingType) == 0x000001, "Wrong size on MarinerProjectile_GetImpulseBatchingType");
static_assert(offsetof(MarinerProjectile_GetImpulseBatchingType, ReturnValue) == 0x000000, "Member 'MarinerProjectile_GetImpulseBatchingType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.GetImpulseMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerProjectile_GetImpulseMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_GetImpulseMultiplier) == 0x000004, "Wrong alignment on MarinerProjectile_GetImpulseMultiplier");
static_assert(sizeof(MarinerProjectile_GetImpulseMultiplier) == 0x000004, "Wrong size on MarinerProjectile_GetImpulseMultiplier");
static_assert(offsetof(MarinerProjectile_GetImpulseMultiplier, ReturnValue) == 0x000000, "Member 'MarinerProjectile_GetImpulseMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.GetInstigatorAbilitySystemComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectile_GetInstigatorAbilitySystemComponent final
{
public:
	class UMarinerAbilitySystemComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_GetInstigatorAbilitySystemComponent) == 0x000008, "Wrong alignment on MarinerProjectile_GetInstigatorAbilitySystemComponent");
static_assert(sizeof(MarinerProjectile_GetInstigatorAbilitySystemComponent) == 0x000008, "Wrong size on MarinerProjectile_GetInstigatorAbilitySystemComponent");
static_assert(offsetof(MarinerProjectile_GetInstigatorAbilitySystemComponent, ReturnValue) == 0x000000, "Member 'MarinerProjectile_GetInstigatorAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.GetIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectile_GetIsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_GetIsEnabled) == 0x000001, "Wrong alignment on MarinerProjectile_GetIsEnabled");
static_assert(sizeof(MarinerProjectile_GetIsEnabled) == 0x000001, "Wrong size on MarinerProjectile_GetIsEnabled");
static_assert(offsetof(MarinerProjectile_GetIsEnabled, ReturnValue) == 0x000000, "Member 'MarinerProjectile_GetIsEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.GetMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectile_GetMovementComponent final
{
public:
	class UMarinerProjectileMoveComponent*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_GetMovementComponent) == 0x000008, "Wrong alignment on MarinerProjectile_GetMovementComponent");
static_assert(sizeof(MarinerProjectile_GetMovementComponent) == 0x000008, "Wrong size on MarinerProjectile_GetMovementComponent");
static_assert(offsetof(MarinerProjectile_GetMovementComponent, ReturnValue) == 0x000000, "Member 'MarinerProjectile_GetMovementComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.GetSkinData
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectile_GetSkinData final
{
public:
	class UMarinerAbilitySkinData_Base*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_GetSkinData) == 0x000008, "Wrong alignment on MarinerProjectile_GetSkinData");
static_assert(sizeof(MarinerProjectile_GetSkinData) == 0x000008, "Wrong size on MarinerProjectile_GetSkinData");
static_assert(offsetof(MarinerProjectile_GetSkinData, ReturnValue) == 0x000000, "Member 'MarinerProjectile_GetSkinData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.GetTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerProjectile_GetTeamIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_GetTeamIndex) == 0x000004, "Wrong alignment on MarinerProjectile_GetTeamIndex");
static_assert(sizeof(MarinerProjectile_GetTeamIndex) == 0x000004, "Wrong size on MarinerProjectile_GetTeamIndex");
static_assert(offsetof(MarinerProjectile_GetTeamIndex, ReturnValue) == 0x000000, "Member 'MarinerProjectile_GetTeamIndex::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.GetTotalLifetimeModifier
// 0x0004 (0x0004 - 0x0000)
struct MarinerProjectile_GetTotalLifetimeModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_GetTotalLifetimeModifier) == 0x000004, "Wrong alignment on MarinerProjectile_GetTotalLifetimeModifier");
static_assert(sizeof(MarinerProjectile_GetTotalLifetimeModifier) == 0x000004, "Wrong size on MarinerProjectile_GetTotalLifetimeModifier");
static_assert(offsetof(MarinerProjectile_GetTotalLifetimeModifier, ReturnValue) == 0x000000, "Member 'MarinerProjectile_GetTotalLifetimeModifier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.GetTotalSpeedModifier
// 0x0004 (0x0004 - 0x0000)
struct MarinerProjectile_GetTotalSpeedModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_GetTotalSpeedModifier) == 0x000004, "Wrong alignment on MarinerProjectile_GetTotalSpeedModifier");
static_assert(sizeof(MarinerProjectile_GetTotalSpeedModifier) == 0x000004, "Wrong size on MarinerProjectile_GetTotalSpeedModifier");
static_assert(offsetof(MarinerProjectile_GetTotalSpeedModifier, ReturnValue) == 0x000000, "Member 'MarinerProjectile_GetTotalSpeedModifier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.IsProjectileEnablePoolTimerActive
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectile_IsProjectileEnablePoolTimerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_IsProjectileEnablePoolTimerActive) == 0x000001, "Wrong alignment on MarinerProjectile_IsProjectileEnablePoolTimerActive");
static_assert(sizeof(MarinerProjectile_IsProjectileEnablePoolTimerActive) == 0x000001, "Wrong size on MarinerProjectile_IsProjectileEnablePoolTimerActive");
static_assert(offsetof(MarinerProjectile_IsProjectileEnablePoolTimerActive, ReturnValue) == 0x000000, "Member 'MarinerProjectile_IsProjectileEnablePoolTimerActive::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectile.UsesImpulseBatching
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectile_UsesImpulseBatching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectile_UsesImpulseBatching) == 0x000001, "Wrong alignment on MarinerProjectile_UsesImpulseBatching");
static_assert(sizeof(MarinerProjectile_UsesImpulseBatching) == 0x000001, "Wrong size on MarinerProjectile_UsesImpulseBatching");
static_assert(offsetof(MarinerProjectile_UsesImpulseBatching, ReturnValue) == 0x000000, "Member 'MarinerProjectile_UsesImpulseBatching::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGrapplingHook.AttachGrapplingHookCableToCharacter
// 0x0010 (0x0010 - 0x0000)
struct MarinerGrapplingHook_AttachGrapplingHookCableToCharacter final
{
public:
	class AMarinerCharacter*                      CharacterToAttachTo;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGrapplingHook_AttachGrapplingHookCableToCharacter) == 0x000008, "Wrong alignment on MarinerGrapplingHook_AttachGrapplingHookCableToCharacter");
static_assert(sizeof(MarinerGrapplingHook_AttachGrapplingHookCableToCharacter) == 0x000010, "Wrong size on MarinerGrapplingHook_AttachGrapplingHookCableToCharacter");
static_assert(offsetof(MarinerGrapplingHook_AttachGrapplingHookCableToCharacter, CharacterToAttachTo) == 0x000000, "Member 'MarinerGrapplingHook_AttachGrapplingHookCableToCharacter::CharacterToAttachTo' has a wrong offset!");
static_assert(offsetof(MarinerGrapplingHook_AttachGrapplingHookCableToCharacter, AttachSocketName) == 0x000008, "Member 'MarinerGrapplingHook_AttachGrapplingHookCableToCharacter::AttachSocketName' has a wrong offset!");

// Function Mariner.MarinerGrapplingHook.AttachGrapplingHookCableToComponent
// 0x0010 (0x0010 - 0x0000)
struct MarinerGrapplingHook_AttachGrapplingHookCableToComponent final
{
public:
	class USceneComponent*                        ComponentToAttachTo;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGrapplingHook_AttachGrapplingHookCableToComponent) == 0x000008, "Wrong alignment on MarinerGrapplingHook_AttachGrapplingHookCableToComponent");
static_assert(sizeof(MarinerGrapplingHook_AttachGrapplingHookCableToComponent) == 0x000010, "Wrong size on MarinerGrapplingHook_AttachGrapplingHookCableToComponent");
static_assert(offsetof(MarinerGrapplingHook_AttachGrapplingHookCableToComponent, ComponentToAttachTo) == 0x000000, "Member 'MarinerGrapplingHook_AttachGrapplingHookCableToComponent::ComponentToAttachTo' has a wrong offset!");
static_assert(offsetof(MarinerGrapplingHook_AttachGrapplingHookCableToComponent, AttachSocketName) == 0x000008, "Member 'MarinerGrapplingHook_AttachGrapplingHookCableToComponent::AttachSocketName' has a wrong offset!");

// Function Mariner.MarinerGrapplingHook.OnHookAttachedActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct MarinerGrapplingHook_OnHookAttachedActorDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGrapplingHook_OnHookAttachedActorDestroyed) == 0x000008, "Wrong alignment on MarinerGrapplingHook_OnHookAttachedActorDestroyed");
static_assert(sizeof(MarinerGrapplingHook_OnHookAttachedActorDestroyed) == 0x000008, "Wrong size on MarinerGrapplingHook_OnHookAttachedActorDestroyed");
static_assert(offsetof(MarinerGrapplingHook_OnHookAttachedActorDestroyed, DestroyedActor) == 0x000000, "Member 'MarinerGrapplingHook_OnHookAttachedActorDestroyed::DestroyedActor' has a wrong offset!");

// Function Mariner.MarinerGrapplingHook.OnHookAttachedItemPickedUp
// 0x0010 (0x0010 - 0x0000)
struct MarinerGrapplingHook_OnHookAttachedItemPickedUp final
{
public:
	class AMarinerItem*                           AttachedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerCharacter*                      NewItemHolder;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGrapplingHook_OnHookAttachedItemPickedUp) == 0x000008, "Wrong alignment on MarinerGrapplingHook_OnHookAttachedItemPickedUp");
static_assert(sizeof(MarinerGrapplingHook_OnHookAttachedItemPickedUp) == 0x000010, "Wrong size on MarinerGrapplingHook_OnHookAttachedItemPickedUp");
static_assert(offsetof(MarinerGrapplingHook_OnHookAttachedItemPickedUp, AttachedItem) == 0x000000, "Member 'MarinerGrapplingHook_OnHookAttachedItemPickedUp::AttachedItem' has a wrong offset!");
static_assert(offsetof(MarinerGrapplingHook_OnHookAttachedItemPickedUp, NewItemHolder) == 0x000008, "Member 'MarinerGrapplingHook_OnHookAttachedItemPickedUp::NewItemHolder' has a wrong offset!");

// Function Mariner.MarinerGrapplingHook.IsGrapplingHookCableAttached
// 0x0001 (0x0001 - 0x0000)
struct MarinerGrapplingHook_IsGrapplingHookCableAttached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGrapplingHook_IsGrapplingHookCableAttached) == 0x000001, "Wrong alignment on MarinerGrapplingHook_IsGrapplingHookCableAttached");
static_assert(sizeof(MarinerGrapplingHook_IsGrapplingHookCableAttached) == 0x000001, "Wrong size on MarinerGrapplingHook_IsGrapplingHookCableAttached");
static_assert(offsetof(MarinerGrapplingHook_IsGrapplingHookCableAttached, ReturnValue) == 0x000000, "Member 'MarinerGrapplingHook_IsGrapplingHookCableAttached::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCheatManager.ChangeTeam
// 0x0004 (0x0004 - 0x0000)
struct MarinerCheatManager_ChangeTeam final
{
public:
	int32                                         NewTeamNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_ChangeTeam) == 0x000004, "Wrong alignment on MarinerCheatManager_ChangeTeam");
static_assert(sizeof(MarinerCheatManager_ChangeTeam) == 0x000004, "Wrong size on MarinerCheatManager_ChangeTeam");
static_assert(offsetof(MarinerCheatManager_ChangeTeam, NewTeamNumber) == 0x000000, "Member 'MarinerCheatManager_ChangeTeam::NewTeamNumber' has a wrong offset!");

// Function Mariner.MarinerCheatManager.Cheat
// 0x0010 (0x0010 - 0x0000)
struct MarinerCheatManager_Cheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_Cheat) == 0x000008, "Wrong alignment on MarinerCheatManager_Cheat");
static_assert(sizeof(MarinerCheatManager_Cheat) == 0x000010, "Wrong size on MarinerCheatManager_Cheat");
static_assert(offsetof(MarinerCheatManager_Cheat, Msg) == 0x000000, "Member 'MarinerCheatManager_Cheat::Msg' has a wrong offset!");

// Function Mariner.MarinerCheatManager.ClientCheat
// 0x0010 (0x0010 - 0x0000)
struct MarinerCheatManager_ClientCheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_ClientCheat) == 0x000008, "Wrong alignment on MarinerCheatManager_ClientCheat");
static_assert(sizeof(MarinerCheatManager_ClientCheat) == 0x000010, "Wrong size on MarinerCheatManager_ClientCheat");
static_assert(offsetof(MarinerCheatManager_ClientCheat, Msg) == 0x000000, "Member 'MarinerCheatManager_ClientCheat::Msg' has a wrong offset!");

// Function Mariner.MarinerCheatManager.EnableBotAbilities
// 0x0001 (0x0001 - 0x0000)
struct MarinerCheatManager_EnableBotAbilities final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_EnableBotAbilities) == 0x000001, "Wrong alignment on MarinerCheatManager_EnableBotAbilities");
static_assert(sizeof(MarinerCheatManager_EnableBotAbilities) == 0x000001, "Wrong size on MarinerCheatManager_EnableBotAbilities");
static_assert(offsetof(MarinerCheatManager_EnableBotAbilities, bEnable) == 0x000000, "Member 'MarinerCheatManager_EnableBotAbilities::bEnable' has a wrong offset!");

// Function Mariner.MarinerCheatManager.GetMedal
// 0x0010 (0x0010 - 0x0000)
struct MarinerCheatManager_GetMedal final
{
public:
	class FString                                 MessagePath;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_GetMedal) == 0x000008, "Wrong alignment on MarinerCheatManager_GetMedal");
static_assert(sizeof(MarinerCheatManager_GetMedal) == 0x000010, "Wrong size on MarinerCheatManager_GetMedal");
static_assert(offsetof(MarinerCheatManager_GetMedal, MessagePath) == 0x000000, "Member 'MarinerCheatManager_GetMedal::MessagePath' has a wrong offset!");

// Function Mariner.MarinerCheatManager.PossessNewPawn
// 0x0010 (0x0010 - 0x0000)
struct MarinerCheatManager_PossessNewPawn final
{
public:
	class FString                                 PawnPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_PossessNewPawn) == 0x000008, "Wrong alignment on MarinerCheatManager_PossessNewPawn");
static_assert(sizeof(MarinerCheatManager_PossessNewPawn) == 0x000010, "Wrong size on MarinerCheatManager_PossessNewPawn");
static_assert(offsetof(MarinerCheatManager_PossessNewPawn, PawnPath) == 0x000000, "Member 'MarinerCheatManager_PossessNewPawn::PawnPath' has a wrong offset!");

// Function Mariner.MarinerCheatManager.RecordPressInputToProjectileTime
// 0x0010 (0x0010 - 0x0000)
struct MarinerCheatManager_RecordPressInputToProjectileTime final
{
public:
	class FString                                 InputName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_RecordPressInputToProjectileTime) == 0x000008, "Wrong alignment on MarinerCheatManager_RecordPressInputToProjectileTime");
static_assert(sizeof(MarinerCheatManager_RecordPressInputToProjectileTime) == 0x000010, "Wrong size on MarinerCheatManager_RecordPressInputToProjectileTime");
static_assert(offsetof(MarinerCheatManager_RecordPressInputToProjectileTime, InputName) == 0x000000, "Member 'MarinerCheatManager_RecordPressInputToProjectileTime::InputName' has a wrong offset!");

// Function Mariner.MarinerCheatManager.RecordReleaseInputToProjectileTime
// 0x0010 (0x0010 - 0x0000)
struct MarinerCheatManager_RecordReleaseInputToProjectileTime final
{
public:
	class FString                                 InputName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_RecordReleaseInputToProjectileTime) == 0x000008, "Wrong alignment on MarinerCheatManager_RecordReleaseInputToProjectileTime");
static_assert(sizeof(MarinerCheatManager_RecordReleaseInputToProjectileTime) == 0x000010, "Wrong size on MarinerCheatManager_RecordReleaseInputToProjectileTime");
static_assert(offsetof(MarinerCheatManager_RecordReleaseInputToProjectileTime, InputName) == 0x000000, "Member 'MarinerCheatManager_RecordReleaseInputToProjectileTime::InputName' has a wrong offset!");

// Function Mariner.MarinerCheatManager.SetArtifact
// 0x0010 (0x0010 - 0x0000)
struct MarinerCheatManager_SetArtifact final
{
public:
	class FString                                 ArtifactName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_SetArtifact) == 0x000008, "Wrong alignment on MarinerCheatManager_SetArtifact");
static_assert(sizeof(MarinerCheatManager_SetArtifact) == 0x000010, "Wrong size on MarinerCheatManager_SetArtifact");
static_assert(offsetof(MarinerCheatManager_SetArtifact, ArtifactName) == 0x000000, "Member 'MarinerCheatManager_SetArtifact::ArtifactName' has a wrong offset!");

// Function Mariner.MarinerCheatManager.SetArtifactLevel
// 0x0004 (0x0004 - 0x0000)
struct MarinerCheatManager_SetArtifactLevel final
{
public:
	int32                                         ArtifactLevel;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_SetArtifactLevel) == 0x000004, "Wrong alignment on MarinerCheatManager_SetArtifactLevel");
static_assert(sizeof(MarinerCheatManager_SetArtifactLevel) == 0x000004, "Wrong size on MarinerCheatManager_SetArtifactLevel");
static_assert(offsetof(MarinerCheatManager_SetArtifactLevel, ArtifactLevel) == 0x000000, "Member 'MarinerCheatManager_SetArtifactLevel::ArtifactLevel' has a wrong offset!");

// Function Mariner.MarinerCheatManager.SetCharacterLightingEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerCheatManager_SetCharacterLightingEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_SetCharacterLightingEnabled) == 0x000001, "Wrong alignment on MarinerCheatManager_SetCharacterLightingEnabled");
static_assert(sizeof(MarinerCheatManager_SetCharacterLightingEnabled) == 0x000001, "Wrong size on MarinerCheatManager_SetCharacterLightingEnabled");
static_assert(offsetof(MarinerCheatManager_SetCharacterLightingEnabled, bEnable) == 0x000000, "Member 'MarinerCheatManager_SetCharacterLightingEnabled::bEnable' has a wrong offset!");

// Function Mariner.MarinerCheatManager.SetChatEmote
// 0x0018 (0x0018 - 0x0000)
struct MarinerCheatManager_SetChatEmote final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1779[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChatEmoteName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_SetChatEmote) == 0x000008, "Wrong alignment on MarinerCheatManager_SetChatEmote");
static_assert(sizeof(MarinerCheatManager_SetChatEmote) == 0x000018, "Wrong size on MarinerCheatManager_SetChatEmote");
static_assert(offsetof(MarinerCheatManager_SetChatEmote, Slot) == 0x000000, "Member 'MarinerCheatManager_SetChatEmote::Slot' has a wrong offset!");
static_assert(offsetof(MarinerCheatManager_SetChatEmote, ChatEmoteName) == 0x000008, "Member 'MarinerCheatManager_SetChatEmote::ChatEmoteName' has a wrong offset!");

// Function Mariner.MarinerCheatManager.SetMegaBlast
// 0x0010 (0x0010 - 0x0000)
struct MarinerCheatManager_SetMegaBlast final
{
public:
	class FString                                 MegaBlastName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_SetMegaBlast) == 0x000008, "Wrong alignment on MarinerCheatManager_SetMegaBlast");
static_assert(sizeof(MarinerCheatManager_SetMegaBlast) == 0x000010, "Wrong size on MarinerCheatManager_SetMegaBlast");
static_assert(offsetof(MarinerCheatManager_SetMegaBlast, MegaBlastName) == 0x000000, "Member 'MarinerCheatManager_SetMegaBlast::MegaBlastName' has a wrong offset!");

// Function Mariner.MarinerCheatManager.SetOutlinesEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerCheatManager_SetOutlinesEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_SetOutlinesEnabled) == 0x000001, "Wrong alignment on MarinerCheatManager_SetOutlinesEnabled");
static_assert(sizeof(MarinerCheatManager_SetOutlinesEnabled) == 0x000001, "Wrong size on MarinerCheatManager_SetOutlinesEnabled");
static_assert(offsetof(MarinerCheatManager_SetOutlinesEnabled, bEnable) == 0x000000, "Member 'MarinerCheatManager_SetOutlinesEnabled::bEnable' has a wrong offset!");

// Function Mariner.MarinerCheatManager.SetPreGameEmote
// 0x0018 (0x0018 - 0x0000)
struct MarinerCheatManager_SetPreGameEmote final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_177A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreGameEmoteName;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_SetPreGameEmote) == 0x000008, "Wrong alignment on MarinerCheatManager_SetPreGameEmote");
static_assert(sizeof(MarinerCheatManager_SetPreGameEmote) == 0x000018, "Wrong size on MarinerCheatManager_SetPreGameEmote");
static_assert(offsetof(MarinerCheatManager_SetPreGameEmote, Slot) == 0x000000, "Member 'MarinerCheatManager_SetPreGameEmote::Slot' has a wrong offset!");
static_assert(offsetof(MarinerCheatManager_SetPreGameEmote, PreGameEmoteName) == 0x000008, "Member 'MarinerCheatManager_SetPreGameEmote::PreGameEmoteName' has a wrong offset!");

// Function Mariner.MarinerCheatManager.SetProjectileLatencyCompensationEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerCheatManager_SetProjectileLatencyCompensationEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_SetProjectileLatencyCompensationEnabled) == 0x000001, "Wrong alignment on MarinerCheatManager_SetProjectileLatencyCompensationEnabled");
static_assert(sizeof(MarinerCheatManager_SetProjectileLatencyCompensationEnabled) == 0x000001, "Wrong size on MarinerCheatManager_SetProjectileLatencyCompensationEnabled");
static_assert(offsetof(MarinerCheatManager_SetProjectileLatencyCompensationEnabled, bEnabled) == 0x000000, "Member 'MarinerCheatManager_SetProjectileLatencyCompensationEnabled::bEnabled' has a wrong offset!");

// Function Mariner.MarinerCheatManager.SetReturnTrail
// 0x0010 (0x0010 - 0x0000)
struct MarinerCheatManager_SetReturnTrail final
{
public:
	class FString                                 ReturnTrailName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_SetReturnTrail) == 0x000008, "Wrong alignment on MarinerCheatManager_SetReturnTrail");
static_assert(sizeof(MarinerCheatManager_SetReturnTrail) == 0x000010, "Wrong size on MarinerCheatManager_SetReturnTrail");
static_assert(offsetof(MarinerCheatManager_SetReturnTrail, ReturnTrailName) == 0x000000, "Member 'MarinerCheatManager_SetReturnTrail::ReturnTrailName' has a wrong offset!");

// Function Mariner.MarinerCheatManager.SetSkin
// 0x0004 (0x0004 - 0x0000)
struct MarinerCheatManager_SetSkin final
{
public:
	int32                                         SkinIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_SetSkin) == 0x000004, "Wrong alignment on MarinerCheatManager_SetSkin");
static_assert(sizeof(MarinerCheatManager_SetSkin) == 0x000004, "Wrong size on MarinerCheatManager_SetSkin");
static_assert(offsetof(MarinerCheatManager_SetSkin, SkinIndex) == 0x000000, "Member 'MarinerCheatManager_SetSkin::SkinIndex' has a wrong offset!");

// Function Mariner.MarinerCheatManager.SetVictoryPose
// 0x0010 (0x0010 - 0x0000)
struct MarinerCheatManager_SetVictoryPose final
{
public:
	class FString                                 ArtifactName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCheatManager_SetVictoryPose) == 0x000008, "Wrong alignment on MarinerCheatManager_SetVictoryPose");
static_assert(sizeof(MarinerCheatManager_SetVictoryPose) == 0x000010, "Wrong size on MarinerCheatManager_SetVictoryPose");
static_assert(offsetof(MarinerCheatManager_SetVictoryPose, ArtifactName) == 0x000000, "Member 'MarinerCheatManager_SetVictoryPose::ArtifactName' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetSensitivitySpecification
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetSensitivitySpecification final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetSensitivitySpecification) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetSensitivitySpecification");
static_assert(sizeof(MarinerGameUserSettings_GetSensitivitySpecification) == 0x000004, "Wrong size on MarinerGameUserSettings_GetSensitivitySpecification");
static_assert(offsetof(MarinerGameUserSettings_GetSensitivitySpecification, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetSensitivitySpecification::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetAimAssistState
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetAimAssistState final
{
public:
	EMarinerAimAssistState                        InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetAimAssistState) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetAimAssistState");
static_assert(sizeof(MarinerGameUserSettings_SetAimAssistState) == 0x000001, "Wrong size on MarinerGameUserSettings_SetAimAssistState");
static_assert(offsetof(MarinerGameUserSettings_SetAimAssistState, InState) == 0x000000, "Member 'MarinerGameUserSettings_SetAimAssistState::InState' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetAimSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetAimSensitivity final
{
public:
	float                                         InSensitivity;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetAimSensitivity) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetAimSensitivity");
static_assert(sizeof(MarinerGameUserSettings_SetAimSensitivity) == 0x000004, "Wrong size on MarinerGameUserSettings_SetAimSensitivity");
static_assert(offsetof(MarinerGameUserSettings_SetAimSensitivity, InSensitivity) == 0x000000, "Member 'MarinerGameUserSettings_SetAimSensitivity::InSensitivity' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetColorDeficiency
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetColorDeficiency final
{
public:
	EColorVisionDeficiency                        InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetColorDeficiency) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetColorDeficiency");
static_assert(sizeof(MarinerGameUserSettings_SetColorDeficiency) == 0x000001, "Wrong size on MarinerGameUserSettings_SetColorDeficiency");
static_assert(offsetof(MarinerGameUserSettings_SetColorDeficiency, InValue) == 0x000000, "Member 'MarinerGameUserSettings_SetColorDeficiency::InValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetColorDeficiencySeverity
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetColorDeficiencySeverity final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetColorDeficiencySeverity) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetColorDeficiencySeverity");
static_assert(sizeof(MarinerGameUserSettings_SetColorDeficiencySeverity) == 0x000004, "Wrong size on MarinerGameUserSettings_SetColorDeficiencySeverity");
static_assert(offsetof(MarinerGameUserSettings_SetColorDeficiencySeverity, InValue) == 0x000000, "Member 'MarinerGameUserSettings_SetColorDeficiencySeverity::InValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetControllerAxialDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetControllerAxialDeadzone final
{
public:
	float                                         InAxialDeadzone;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetControllerAxialDeadzone) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetControllerAxialDeadzone");
static_assert(sizeof(MarinerGameUserSettings_SetControllerAxialDeadzone) == 0x000004, "Wrong size on MarinerGameUserSettings_SetControllerAxialDeadzone");
static_assert(offsetof(MarinerGameUserSettings_SetControllerAxialDeadzone, InAxialDeadzone) == 0x000000, "Member 'MarinerGameUserSettings_SetControllerAxialDeadzone::InAxialDeadzone' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetControllerConfiguration
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetControllerConfiguration final
{
public:
	int32                                         InConfiguration;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetControllerConfiguration) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetControllerConfiguration");
static_assert(sizeof(MarinerGameUserSettings_SetControllerConfiguration) == 0x000004, "Wrong size on MarinerGameUserSettings_SetControllerConfiguration");
static_assert(offsetof(MarinerGameUserSettings_SetControllerConfiguration, InConfiguration) == 0x000000, "Member 'MarinerGameUserSettings_SetControllerConfiguration::InConfiguration' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetControllerInnerRadialDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetControllerInnerRadialDeadzone final
{
public:
	float                                         InInnerRadialDeadzone;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetControllerInnerRadialDeadzone) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetControllerInnerRadialDeadzone");
static_assert(sizeof(MarinerGameUserSettings_SetControllerInnerRadialDeadzone) == 0x000004, "Wrong size on MarinerGameUserSettings_SetControllerInnerRadialDeadzone");
static_assert(offsetof(MarinerGameUserSettings_SetControllerInnerRadialDeadzone, InInnerRadialDeadzone) == 0x000000, "Member 'MarinerGameUserSettings_SetControllerInnerRadialDeadzone::InInnerRadialDeadzone' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetControllerInversionHorizontal
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetControllerInversionHorizontal final
{
public:
	bool                                          InBool;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetControllerInversionHorizontal) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetControllerInversionHorizontal");
static_assert(sizeof(MarinerGameUserSettings_SetControllerInversionHorizontal) == 0x000001, "Wrong size on MarinerGameUserSettings_SetControllerInversionHorizontal");
static_assert(offsetof(MarinerGameUserSettings_SetControllerInversionHorizontal, InBool) == 0x000000, "Member 'MarinerGameUserSettings_SetControllerInversionHorizontal::InBool' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetControllerInversionVertical
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetControllerInversionVertical final
{
public:
	bool                                          InBool;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetControllerInversionVertical) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetControllerInversionVertical");
static_assert(sizeof(MarinerGameUserSettings_SetControllerInversionVertical) == 0x000001, "Wrong size on MarinerGameUserSettings_SetControllerInversionVertical");
static_assert(offsetof(MarinerGameUserSettings_SetControllerInversionVertical, InBool) == 0x000000, "Member 'MarinerGameUserSettings_SetControllerInversionVertical::InBool' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetControllerMenuDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetControllerMenuDeadzone final
{
public:
	float                                         InMenuDeadzone;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetControllerMenuDeadzone) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetControllerMenuDeadzone");
static_assert(sizeof(MarinerGameUserSettings_SetControllerMenuDeadzone) == 0x000004, "Wrong size on MarinerGameUserSettings_SetControllerMenuDeadzone");
static_assert(offsetof(MarinerGameUserSettings_SetControllerMenuDeadzone, InMenuDeadzone) == 0x000000, "Member 'MarinerGameUserSettings_SetControllerMenuDeadzone::InMenuDeadzone' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetControllerOuterRadialDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetControllerOuterRadialDeadzone final
{
public:
	float                                         InOuterRadialDeadzone;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetControllerOuterRadialDeadzone) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetControllerOuterRadialDeadzone");
static_assert(sizeof(MarinerGameUserSettings_SetControllerOuterRadialDeadzone) == 0x000004, "Wrong size on MarinerGameUserSettings_SetControllerOuterRadialDeadzone");
static_assert(offsetof(MarinerGameUserSettings_SetControllerOuterRadialDeadzone, InOuterRadialDeadzone) == 0x000000, "Member 'MarinerGameUserSettings_SetControllerOuterRadialDeadzone::InOuterRadialDeadzone' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetCrossplayNoticeViewed
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetCrossplayNoticeViewed final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetCrossplayNoticeViewed) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetCrossplayNoticeViewed");
static_assert(sizeof(MarinerGameUserSettings_SetCrossplayNoticeViewed) == 0x000001, "Wrong size on MarinerGameUserSettings_SetCrossplayNoticeViewed");
static_assert(offsetof(MarinerGameUserSettings_SetCrossplayNoticeViewed, bInValue) == 0x000000, "Member 'MarinerGameUserSettings_SetCrossplayNoticeViewed::bInValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetCrossplayState
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetCrossplayState final
{
public:
	EMarinerCrossplayState                        InCrossplayState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetCrossplayState) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetCrossplayState");
static_assert(sizeof(MarinerGameUserSettings_SetCrossplayState) == 0x000001, "Wrong size on MarinerGameUserSettings_SetCrossplayState");
static_assert(offsetof(MarinerGameUserSettings_SetCrossplayState, InCrossplayState) == 0x000000, "Member 'MarinerGameUserSettings_SetCrossplayState::InCrossplayState' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetFastTurnState
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetFastTurnState final
{
public:
	int32                                         InSetting;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetFastTurnState) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetFastTurnState");
static_assert(sizeof(MarinerGameUserSettings_SetFastTurnState) == 0x000004, "Wrong size on MarinerGameUserSettings_SetFastTurnState");
static_assert(offsetof(MarinerGameUserSettings_SetFastTurnState, InSetting) == 0x000000, "Member 'MarinerGameUserSettings_SetFastTurnState::InSetting' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetGameScreenPercentage
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetGameScreenPercentage final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetGameScreenPercentage) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetGameScreenPercentage");
static_assert(sizeof(MarinerGameUserSettings_SetGameScreenPercentage) == 0x000004, "Wrong size on MarinerGameUserSettings_SetGameScreenPercentage");
static_assert(offsetof(MarinerGameUserSettings_SetGameScreenPercentage, Value) == 0x000000, "Member 'MarinerGameUserSettings_SetGameScreenPercentage::Value' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetGamma
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetGamma final
{
public:
	float                                         InGamma;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetGamma) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetGamma");
static_assert(sizeof(MarinerGameUserSettings_SetGamma) == 0x000004, "Wrong size on MarinerGameUserSettings_SetGamma");
static_assert(offsetof(MarinerGameUserSettings_SetGamma, InGamma) == 0x000000, "Member 'MarinerGameUserSettings_SetGamma::InGamma' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetHorizontalFOV
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetHorizontalFOV final
{
public:
	float                                         InFOV;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetHorizontalFOV) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetHorizontalFOV");
static_assert(sizeof(MarinerGameUserSettings_SetHorizontalFOV) == 0x000004, "Wrong size on MarinerGameUserSettings_SetHorizontalFOV");
static_assert(offsetof(MarinerGameUserSettings_SetHorizontalFOV, InFOV) == 0x000000, "Member 'MarinerGameUserSettings_SetHorizontalFOV::InFOV' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetLastGameliftDnsName
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameUserSettings_SetLastGameliftDnsName final
{
public:
	class FString                                 InGameliftDnsName;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetLastGameliftDnsName) == 0x000008, "Wrong alignment on MarinerGameUserSettings_SetLastGameliftDnsName");
static_assert(sizeof(MarinerGameUserSettings_SetLastGameliftDnsName) == 0x000010, "Wrong size on MarinerGameUserSettings_SetLastGameliftDnsName");
static_assert(offsetof(MarinerGameUserSettings_SetLastGameliftDnsName, InGameliftDnsName) == 0x000000, "Member 'MarinerGameUserSettings_SetLastGameliftDnsName::InGameliftDnsName' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetLastGameliftSessionId
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameUserSettings_SetLastGameliftSessionId final
{
public:
	class FString                                 InGameliftSessionId;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetLastGameliftSessionId) == 0x000008, "Wrong alignment on MarinerGameUserSettings_SetLastGameliftSessionId");
static_assert(sizeof(MarinerGameUserSettings_SetLastGameliftSessionId) == 0x000010, "Wrong size on MarinerGameUserSettings_SetLastGameliftSessionId");
static_assert(offsetof(MarinerGameUserSettings_SetLastGameliftSessionId, InGameliftSessionId) == 0x000000, "Member 'MarinerGameUserSettings_SetLastGameliftSessionId::InGameliftSessionId' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetLegalDocsAccepted
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetLegalDocsAccepted final
{
public:
	bool                                          bAccepted;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetLegalDocsAccepted) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetLegalDocsAccepted");
static_assert(sizeof(MarinerGameUserSettings_SetLegalDocsAccepted) == 0x000001, "Wrong size on MarinerGameUserSettings_SetLegalDocsAccepted");
static_assert(offsetof(MarinerGameUserSettings_SetLegalDocsAccepted, bAccepted) == 0x000000, "Member 'MarinerGameUserSettings_SetLegalDocsAccepted::bAccepted' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetMasterVolume final
{
public:
	float                                         InMasterVolume;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetMasterVolume) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetMasterVolume");
static_assert(sizeof(MarinerGameUserSettings_SetMasterVolume) == 0x000004, "Wrong size on MarinerGameUserSettings_SetMasterVolume");
static_assert(offsetof(MarinerGameUserSettings_SetMasterVolume, InMasterVolume) == 0x000000, "Member 'MarinerGameUserSettings_SetMasterVolume::InMasterVolume' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetMenuNarrationVolume
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetMenuNarrationVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetMenuNarrationVolume) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetMenuNarrationVolume");
static_assert(sizeof(MarinerGameUserSettings_SetMenuNarrationVolume) == 0x000004, "Wrong size on MarinerGameUserSettings_SetMenuNarrationVolume");
static_assert(offsetof(MarinerGameUserSettings_SetMenuNarrationVolume, InVolume) == 0x000000, "Member 'MarinerGameUserSettings_SetMenuNarrationVolume::InVolume' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetMouseInvertedXAxis
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetMouseInvertedXAxis final
{
public:
	bool                                          bInvert;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetMouseInvertedXAxis) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetMouseInvertedXAxis");
static_assert(sizeof(MarinerGameUserSettings_SetMouseInvertedXAxis) == 0x000001, "Wrong size on MarinerGameUserSettings_SetMouseInvertedXAxis");
static_assert(offsetof(MarinerGameUserSettings_SetMouseInvertedXAxis, bInvert) == 0x000000, "Member 'MarinerGameUserSettings_SetMouseInvertedXAxis::bInvert' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetMouseInvertedYAxis
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetMouseInvertedYAxis final
{
public:
	bool                                          bInvert;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetMouseInvertedYAxis) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetMouseInvertedYAxis");
static_assert(sizeof(MarinerGameUserSettings_SetMouseInvertedYAxis) == 0x000001, "Wrong size on MarinerGameUserSettings_SetMouseInvertedYAxis");
static_assert(offsetof(MarinerGameUserSettings_SetMouseInvertedYAxis, bInvert) == 0x000000, "Member 'MarinerGameUserSettings_SetMouseInvertedYAxis::bInvert' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetMouseLookUpSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetMouseLookUpSensitivity final
{
public:
	float                                         InSensitivity;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetMouseLookUpSensitivity) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetMouseLookUpSensitivity");
static_assert(sizeof(MarinerGameUserSettings_SetMouseLookUpSensitivity) == 0x000004, "Wrong size on MarinerGameUserSettings_SetMouseLookUpSensitivity");
static_assert(offsetof(MarinerGameUserSettings_SetMouseLookUpSensitivity, InSensitivity) == 0x000000, "Member 'MarinerGameUserSettings_SetMouseLookUpSensitivity::InSensitivity' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetMouseTurnSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetMouseTurnSensitivity final
{
public:
	float                                         InSensitivity;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetMouseTurnSensitivity) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetMouseTurnSensitivity");
static_assert(sizeof(MarinerGameUserSettings_SetMouseTurnSensitivity) == 0x000004, "Wrong size on MarinerGameUserSettings_SetMouseTurnSensitivity");
static_assert(offsetof(MarinerGameUserSettings_SetMouseTurnSensitivity, InSensitivity) == 0x000000, "Member 'MarinerGameUserSettings_SetMouseTurnSensitivity::InSensitivity' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetMusicVolume final
{
public:
	float                                         InMusicVolume;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetMusicVolume) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetMusicVolume");
static_assert(sizeof(MarinerGameUserSettings_SetMusicVolume) == 0x000004, "Wrong size on MarinerGameUserSettings_SetMusicVolume");
static_assert(offsetof(MarinerGameUserSettings_SetMusicVolume, InMusicVolume) == 0x000000, "Member 'MarinerGameUserSettings_SetMusicVolume::InMusicVolume' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetMythicUpsellViewed
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetMythicUpsellViewed final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetMythicUpsellViewed) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetMythicUpsellViewed");
static_assert(sizeof(MarinerGameUserSettings_SetMythicUpsellViewed) == 0x000001, "Wrong size on MarinerGameUserSettings_SetMythicUpsellViewed");
static_assert(offsetof(MarinerGameUserSettings_SetMythicUpsellViewed, bInValue) == 0x000000, "Member 'MarinerGameUserSettings_SetMythicUpsellViewed::bInValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetNarrationEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetNarrationEnabled final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetNarrationEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetNarrationEnabled");
static_assert(sizeof(MarinerGameUserSettings_SetNarrationEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_SetNarrationEnabled");
static_assert(offsetof(MarinerGameUserSettings_SetNarrationEnabled, bInValue) == 0x000000, "Member 'MarinerGameUserSettings_SetNarrationEnabled::bInValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetPartyIsPrivate
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetPartyIsPrivate final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetPartyIsPrivate) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetPartyIsPrivate");
static_assert(sizeof(MarinerGameUserSettings_SetPartyIsPrivate) == 0x000001, "Wrong size on MarinerGameUserSettings_SetPartyIsPrivate");
static_assert(offsetof(MarinerGameUserSettings_SetPartyIsPrivate, bInValue) == 0x000000, "Member 'MarinerGameUserSettings_SetPartyIsPrivate::bInValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetSavedCulture
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameUserSettings_SetSavedCulture final
{
public:
	class FString                                 InCultureName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetSavedCulture) == 0x000008, "Wrong alignment on MarinerGameUserSettings_SetSavedCulture");
static_assert(sizeof(MarinerGameUserSettings_SetSavedCulture) == 0x000010, "Wrong size on MarinerGameUserSettings_SetSavedCulture");
static_assert(offsetof(MarinerGameUserSettings_SetSavedCulture, InCultureName) == 0x000000, "Member 'MarinerGameUserSettings_SetSavedCulture::InCultureName' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetSensitivitySpecification
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetSensitivitySpecification final
{
public:
	int32                                         InSensitivity;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetSensitivitySpecification) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetSensitivitySpecification");
static_assert(sizeof(MarinerGameUserSettings_SetSensitivitySpecification) == 0x000004, "Wrong size on MarinerGameUserSettings_SetSensitivitySpecification");
static_assert(offsetof(MarinerGameUserSettings_SetSensitivitySpecification, InSensitivity) == 0x000000, "Member 'MarinerGameUserSettings_SetSensitivitySpecification::InSensitivity' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetSFXVolume
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetSFXVolume final
{
public:
	float                                         InSFXVolume;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetSFXVolume) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetSFXVolume");
static_assert(sizeof(MarinerGameUserSettings_SetSFXVolume) == 0x000004, "Wrong size on MarinerGameUserSettings_SetSFXVolume");
static_assert(offsetof(MarinerGameUserSettings_SetSFXVolume, InSFXVolume) == 0x000000, "Member 'MarinerGameUserSettings_SetSFXVolume::InSFXVolume' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetSharingExternalUsageData
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetSharingExternalUsageData final
{
public:
	bool                                          bSharing;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetSharingExternalUsageData) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetSharingExternalUsageData");
static_assert(sizeof(MarinerGameUserSettings_SetSharingExternalUsageData) == 0x000001, "Wrong size on MarinerGameUserSettings_SetSharingExternalUsageData");
static_assert(offsetof(MarinerGameUserSettings_SetSharingExternalUsageData, bSharing) == 0x000000, "Member 'MarinerGameUserSettings_SetSharingExternalUsageData::bSharing' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetSharingUsageData
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetSharingUsageData final
{
public:
	bool                                          bSharing;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetSharingUsageData) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetSharingUsageData");
static_assert(sizeof(MarinerGameUserSettings_SetSharingUsageData) == 0x000001, "Wrong size on MarinerGameUserSettings_SetSharingUsageData");
static_assert(offsetof(MarinerGameUserSettings_SetSharingUsageData, bSharing) == 0x000000, "Member 'MarinerGameUserSettings_SetSharingUsageData::bSharing' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetShowInGameIcons
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetShowInGameIcons final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetShowInGameIcons) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetShowInGameIcons");
static_assert(sizeof(MarinerGameUserSettings_SetShowInGameIcons) == 0x000001, "Wrong size on MarinerGameUserSettings_SetShowInGameIcons");
static_assert(offsetof(MarinerGameUserSettings_SetShowInGameIcons, bInValue) == 0x000000, "Member 'MarinerGameUserSettings_SetShowInGameIcons::bInValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetShowNetworkInformation
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetShowNetworkInformation final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetShowNetworkInformation) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetShowNetworkInformation");
static_assert(sizeof(MarinerGameUserSettings_SetShowNetworkInformation) == 0x000001, "Wrong size on MarinerGameUserSettings_SetShowNetworkInformation");
static_assert(offsetof(MarinerGameUserSettings_SetShowNetworkInformation, bInValue) == 0x000000, "Member 'MarinerGameUserSettings_SetShowNetworkInformation::bInValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetSpeechToTextEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetSpeechToTextEnabled final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetSpeechToTextEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetSpeechToTextEnabled");
static_assert(sizeof(MarinerGameUserSettings_SetSpeechToTextEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_SetSpeechToTextEnabled");
static_assert(offsetof(MarinerGameUserSettings_SetSpeechToTextEnabled, bInValue) == 0x000000, "Member 'MarinerGameUserSettings_SetSpeechToTextEnabled::bInValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetSSRQuality
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetSSRQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetSSRQuality) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetSSRQuality");
static_assert(sizeof(MarinerGameUserSettings_SetSSRQuality) == 0x000004, "Wrong size on MarinerGameUserSettings_SetSSRQuality");
static_assert(offsetof(MarinerGameUserSettings_SetSSRQuality, Value) == 0x000000, "Member 'MarinerGameUserSettings_SetSSRQuality::Value' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetStickAccelerationEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetStickAccelerationEnabled final
{
public:
	bool                                          InBool;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetStickAccelerationEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetStickAccelerationEnabled");
static_assert(sizeof(MarinerGameUserSettings_SetStickAccelerationEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_SetStickAccelerationEnabled");
static_assert(offsetof(MarinerGameUserSettings_SetStickAccelerationEnabled, InBool) == 0x000000, "Member 'MarinerGameUserSettings_SetStickAccelerationEnabled::InBool' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetSubtitlesEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetSubtitlesEnabled final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetSubtitlesEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetSubtitlesEnabled");
static_assert(sizeof(MarinerGameUserSettings_SetSubtitlesEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_SetSubtitlesEnabled");
static_assert(offsetof(MarinerGameUserSettings_SetSubtitlesEnabled, bInValue) == 0x000000, "Member 'MarinerGameUserSettings_SetSubtitlesEnabled::bInValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetTextToSpeechEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetTextToSpeechEnabled final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetTextToSpeechEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetTextToSpeechEnabled");
static_assert(sizeof(MarinerGameUserSettings_SetTextToSpeechEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_SetTextToSpeechEnabled");
static_assert(offsetof(MarinerGameUserSettings_SetTextToSpeechEnabled, bInValue) == 0x000000, "Member 'MarinerGameUserSettings_SetTextToSpeechEnabled::bInValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetUserSelectedMatchmakingRegion
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameUserSettings_SetUserSelectedMatchmakingRegion final
{
public:
	class FString                                 InUserSelectedMatchmakingRegion;                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetUserSelectedMatchmakingRegion) == 0x000008, "Wrong alignment on MarinerGameUserSettings_SetUserSelectedMatchmakingRegion");
static_assert(sizeof(MarinerGameUserSettings_SetUserSelectedMatchmakingRegion) == 0x000010, "Wrong size on MarinerGameUserSettings_SetUserSelectedMatchmakingRegion");
static_assert(offsetof(MarinerGameUserSettings_SetUserSelectedMatchmakingRegion, InUserSelectedMatchmakingRegion) == 0x000000, "Member 'MarinerGameUserSettings_SetUserSelectedMatchmakingRegion::InUserSelectedMatchmakingRegion' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetVibrationEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetVibrationEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetVibrationEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetVibrationEnabled");
static_assert(sizeof(MarinerGameUserSettings_SetVibrationEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_SetVibrationEnabled");
static_assert(offsetof(MarinerGameUserSettings_SetVibrationEnabled, bEnabled) == 0x000000, "Member 'MarinerGameUserSettings_SetVibrationEnabled::bEnabled' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetVoiceChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetVoiceChatEnabled final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetVoiceChatEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetVoiceChatEnabled");
static_assert(sizeof(MarinerGameUserSettings_SetVoiceChatEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_SetVoiceChatEnabled");
static_assert(offsetof(MarinerGameUserSettings_SetVoiceChatEnabled, bInValue) == 0x000000, "Member 'MarinerGameUserSettings_SetVoiceChatEnabled::bInValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetVoiceChatPushToTalkEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_SetVoiceChatPushToTalkEnabled final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetVoiceChatPushToTalkEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_SetVoiceChatPushToTalkEnabled");
static_assert(sizeof(MarinerGameUserSettings_SetVoiceChatPushToTalkEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_SetVoiceChatPushToTalkEnabled");
static_assert(offsetof(MarinerGameUserSettings_SetVoiceChatPushToTalkEnabled, bInValue) == 0x000000, "Member 'MarinerGameUserSettings_SetVoiceChatPushToTalkEnabled::bInValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetVoiceChatVolume
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetVoiceChatVolume final
{
public:
	float                                         InVoiceChatVolume;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetVoiceChatVolume) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetVoiceChatVolume");
static_assert(sizeof(MarinerGameUserSettings_SetVoiceChatVolume) == 0x000004, "Wrong size on MarinerGameUserSettings_SetVoiceChatVolume");
static_assert(offsetof(MarinerGameUserSettings_SetVoiceChatVolume, InVoiceChatVolume) == 0x000000, "Member 'MarinerGameUserSettings_SetVoiceChatVolume::InVoiceChatVolume' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.SetVoiceVolume
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_SetVoiceVolume final
{
public:
	float                                         InVoiceVolume;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_SetVoiceVolume) == 0x000004, "Wrong alignment on MarinerGameUserSettings_SetVoiceVolume");
static_assert(sizeof(MarinerGameUserSettings_SetVoiceVolume) == 0x000004, "Wrong size on MarinerGameUserSettings_SetVoiceVolume");
static_assert(offsetof(MarinerGameUserSettings_SetVoiceVolume, InVoiceVolume) == 0x000000, "Member 'MarinerGameUserSettings_SetVoiceVolume::InVoiceVolume' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetAimAssistState
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetAimAssistState final
{
public:
	EMarinerAimAssistState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetAimAssistState) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetAimAssistState");
static_assert(sizeof(MarinerGameUserSettings_GetAimAssistState) == 0x000001, "Wrong size on MarinerGameUserSettings_GetAimAssistState");
static_assert(offsetof(MarinerGameUserSettings_GetAimAssistState, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetAimAssistState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetAimSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetAimSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetAimSensitivity) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetAimSensitivity");
static_assert(sizeof(MarinerGameUserSettings_GetAimSensitivity) == 0x000004, "Wrong size on MarinerGameUserSettings_GetAimSensitivity");
static_assert(offsetof(MarinerGameUserSettings_GetAimSensitivity, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetAimSensitivity::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetColorDeficiency
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetColorDeficiency final
{
public:
	EColorVisionDeficiency                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetColorDeficiency) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetColorDeficiency");
static_assert(sizeof(MarinerGameUserSettings_GetColorDeficiency) == 0x000001, "Wrong size on MarinerGameUserSettings_GetColorDeficiency");
static_assert(offsetof(MarinerGameUserSettings_GetColorDeficiency, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetColorDeficiency::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetColorDeficiencySeverity
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetColorDeficiencySeverity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetColorDeficiencySeverity) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetColorDeficiencySeverity");
static_assert(sizeof(MarinerGameUserSettings_GetColorDeficiencySeverity) == 0x000004, "Wrong size on MarinerGameUserSettings_GetColorDeficiencySeverity");
static_assert(offsetof(MarinerGameUserSettings_GetColorDeficiencySeverity, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetColorDeficiencySeverity::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetControllerAxialDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetControllerAxialDeadzone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetControllerAxialDeadzone) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetControllerAxialDeadzone");
static_assert(sizeof(MarinerGameUserSettings_GetControllerAxialDeadzone) == 0x000004, "Wrong size on MarinerGameUserSettings_GetControllerAxialDeadzone");
static_assert(offsetof(MarinerGameUserSettings_GetControllerAxialDeadzone, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetControllerAxialDeadzone::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetControllerConfiguration
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetControllerConfiguration final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetControllerConfiguration) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetControllerConfiguration");
static_assert(sizeof(MarinerGameUserSettings_GetControllerConfiguration) == 0x000004, "Wrong size on MarinerGameUserSettings_GetControllerConfiguration");
static_assert(offsetof(MarinerGameUserSettings_GetControllerConfiguration, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetControllerConfiguration::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetControllerInnerRadialDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetControllerInnerRadialDeadzone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetControllerInnerRadialDeadzone) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetControllerInnerRadialDeadzone");
static_assert(sizeof(MarinerGameUserSettings_GetControllerInnerRadialDeadzone) == 0x000004, "Wrong size on MarinerGameUserSettings_GetControllerInnerRadialDeadzone");
static_assert(offsetof(MarinerGameUserSettings_GetControllerInnerRadialDeadzone, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetControllerInnerRadialDeadzone::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetControllerInversionHorizontal
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetControllerInversionHorizontal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetControllerInversionHorizontal) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetControllerInversionHorizontal");
static_assert(sizeof(MarinerGameUserSettings_GetControllerInversionHorizontal) == 0x000001, "Wrong size on MarinerGameUserSettings_GetControllerInversionHorizontal");
static_assert(offsetof(MarinerGameUserSettings_GetControllerInversionHorizontal, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetControllerInversionHorizontal::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetControllerInversionVertical
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetControllerInversionVertical final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetControllerInversionVertical) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetControllerInversionVertical");
static_assert(sizeof(MarinerGameUserSettings_GetControllerInversionVertical) == 0x000001, "Wrong size on MarinerGameUserSettings_GetControllerInversionVertical");
static_assert(offsetof(MarinerGameUserSettings_GetControllerInversionVertical, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetControllerInversionVertical::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetControllerMenuDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetControllerMenuDeadzone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetControllerMenuDeadzone) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetControllerMenuDeadzone");
static_assert(sizeof(MarinerGameUserSettings_GetControllerMenuDeadzone) == 0x000004, "Wrong size on MarinerGameUserSettings_GetControllerMenuDeadzone");
static_assert(offsetof(MarinerGameUserSettings_GetControllerMenuDeadzone, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetControllerMenuDeadzone::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetControllerOuterRadialDeadzone
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetControllerOuterRadialDeadzone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetControllerOuterRadialDeadzone) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetControllerOuterRadialDeadzone");
static_assert(sizeof(MarinerGameUserSettings_GetControllerOuterRadialDeadzone) == 0x000004, "Wrong size on MarinerGameUserSettings_GetControllerOuterRadialDeadzone");
static_assert(offsetof(MarinerGameUserSettings_GetControllerOuterRadialDeadzone, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetControllerOuterRadialDeadzone::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetCrossplayNoticeViewed
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetCrossplayNoticeViewed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetCrossplayNoticeViewed) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetCrossplayNoticeViewed");
static_assert(sizeof(MarinerGameUserSettings_GetCrossplayNoticeViewed) == 0x000001, "Wrong size on MarinerGameUserSettings_GetCrossplayNoticeViewed");
static_assert(offsetof(MarinerGameUserSettings_GetCrossplayNoticeViewed, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetCrossplayNoticeViewed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetCrossplayState
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetCrossplayState final
{
public:
	EMarinerCrossplayState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetCrossplayState) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetCrossplayState");
static_assert(sizeof(MarinerGameUserSettings_GetCrossplayState) == 0x000001, "Wrong size on MarinerGameUserSettings_GetCrossplayState");
static_assert(offsetof(MarinerGameUserSettings_GetCrossplayState, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetCrossplayState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetFastTurnState
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetFastTurnState final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetFastTurnState) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetFastTurnState");
static_assert(sizeof(MarinerGameUserSettings_GetFastTurnState) == 0x000004, "Wrong size on MarinerGameUserSettings_GetFastTurnState");
static_assert(offsetof(MarinerGameUserSettings_GetFastTurnState, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetFastTurnState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetGameScreenPercentage
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetGameScreenPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetGameScreenPercentage) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetGameScreenPercentage");
static_assert(sizeof(MarinerGameUserSettings_GetGameScreenPercentage) == 0x000004, "Wrong size on MarinerGameUserSettings_GetGameScreenPercentage");
static_assert(offsetof(MarinerGameUserSettings_GetGameScreenPercentage, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetGameScreenPercentage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetGamma
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetGamma final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetGamma) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetGamma");
static_assert(sizeof(MarinerGameUserSettings_GetGamma) == 0x000004, "Wrong size on MarinerGameUserSettings_GetGamma");
static_assert(offsetof(MarinerGameUserSettings_GetGamma, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetGamma::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetHorizontalFOV
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetHorizontalFOV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetHorizontalFOV) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetHorizontalFOV");
static_assert(sizeof(MarinerGameUserSettings_GetHorizontalFOV) == 0x000004, "Wrong size on MarinerGameUserSettings_GetHorizontalFOV");
static_assert(offsetof(MarinerGameUserSettings_GetHorizontalFOV, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetHorizontalFOV::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetLastGameLiftDnsName
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameUserSettings_GetLastGameLiftDnsName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetLastGameLiftDnsName) == 0x000008, "Wrong alignment on MarinerGameUserSettings_GetLastGameLiftDnsName");
static_assert(sizeof(MarinerGameUserSettings_GetLastGameLiftDnsName) == 0x000010, "Wrong size on MarinerGameUserSettings_GetLastGameLiftDnsName");
static_assert(offsetof(MarinerGameUserSettings_GetLastGameLiftDnsName, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetLastGameLiftDnsName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetLastGameLiftSessionId
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameUserSettings_GetLastGameLiftSessionId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetLastGameLiftSessionId) == 0x000008, "Wrong alignment on MarinerGameUserSettings_GetLastGameLiftSessionId");
static_assert(sizeof(MarinerGameUserSettings_GetLastGameLiftSessionId) == 0x000010, "Wrong size on MarinerGameUserSettings_GetLastGameLiftSessionId");
static_assert(offsetof(MarinerGameUserSettings_GetLastGameLiftSessionId, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetLastGameLiftSessionId::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetMasterVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetMasterVolume) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetMasterVolume");
static_assert(sizeof(MarinerGameUserSettings_GetMasterVolume) == 0x000004, "Wrong size on MarinerGameUserSettings_GetMasterVolume");
static_assert(offsetof(MarinerGameUserSettings_GetMasterVolume, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetMasterVolume::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetMenuNarrationVolume
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetMenuNarrationVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetMenuNarrationVolume) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetMenuNarrationVolume");
static_assert(sizeof(MarinerGameUserSettings_GetMenuNarrationVolume) == 0x000004, "Wrong size on MarinerGameUserSettings_GetMenuNarrationVolume");
static_assert(offsetof(MarinerGameUserSettings_GetMenuNarrationVolume, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetMenuNarrationVolume::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetMouseLookUpSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetMouseLookUpSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetMouseLookUpSensitivity) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetMouseLookUpSensitivity");
static_assert(sizeof(MarinerGameUserSettings_GetMouseLookUpSensitivity) == 0x000004, "Wrong size on MarinerGameUserSettings_GetMouseLookUpSensitivity");
static_assert(offsetof(MarinerGameUserSettings_GetMouseLookUpSensitivity, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetMouseLookUpSensitivity::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetMouseTurnSensitivity
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetMouseTurnSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetMouseTurnSensitivity) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetMouseTurnSensitivity");
static_assert(sizeof(MarinerGameUserSettings_GetMouseTurnSensitivity) == 0x000004, "Wrong size on MarinerGameUserSettings_GetMouseTurnSensitivity");
static_assert(offsetof(MarinerGameUserSettings_GetMouseTurnSensitivity, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetMouseTurnSensitivity::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetMusicVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetMusicVolume) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetMusicVolume");
static_assert(sizeof(MarinerGameUserSettings_GetMusicVolume) == 0x000004, "Wrong size on MarinerGameUserSettings_GetMusicVolume");
static_assert(offsetof(MarinerGameUserSettings_GetMusicVolume, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetMusicVolume::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetMythicUpsellViewed
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetMythicUpsellViewed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetMythicUpsellViewed) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetMythicUpsellViewed");
static_assert(sizeof(MarinerGameUserSettings_GetMythicUpsellViewed) == 0x000001, "Wrong size on MarinerGameUserSettings_GetMythicUpsellViewed");
static_assert(offsetof(MarinerGameUserSettings_GetMythicUpsellViewed, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetMythicUpsellViewed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetNarrationEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetNarrationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetNarrationEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetNarrationEnabled");
static_assert(sizeof(MarinerGameUserSettings_GetNarrationEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_GetNarrationEnabled");
static_assert(offsetof(MarinerGameUserSettings_GetNarrationEnabled, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetNarrationEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetPartyIsPrivate
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetPartyIsPrivate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetPartyIsPrivate) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetPartyIsPrivate");
static_assert(sizeof(MarinerGameUserSettings_GetPartyIsPrivate) == 0x000001, "Wrong size on MarinerGameUserSettings_GetPartyIsPrivate");
static_assert(offsetof(MarinerGameUserSettings_GetPartyIsPrivate, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetPartyIsPrivate::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetSavedCulture
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameUserSettings_GetSavedCulture final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetSavedCulture) == 0x000008, "Wrong alignment on MarinerGameUserSettings_GetSavedCulture");
static_assert(sizeof(MarinerGameUserSettings_GetSavedCulture) == 0x000010, "Wrong size on MarinerGameUserSettings_GetSavedCulture");
static_assert(offsetof(MarinerGameUserSettings_GetSavedCulture, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetSavedCulture::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetSFXVolume
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetSFXVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetSFXVolume) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetSFXVolume");
static_assert(sizeof(MarinerGameUserSettings_GetSFXVolume) == 0x000004, "Wrong size on MarinerGameUserSettings_GetSFXVolume");
static_assert(offsetof(MarinerGameUserSettings_GetSFXVolume, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetSFXVolume::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetShowInGameIcons
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetShowInGameIcons final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetShowInGameIcons) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetShowInGameIcons");
static_assert(sizeof(MarinerGameUserSettings_GetShowInGameIcons) == 0x000001, "Wrong size on MarinerGameUserSettings_GetShowInGameIcons");
static_assert(offsetof(MarinerGameUserSettings_GetShowInGameIcons, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetShowInGameIcons::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetShowNetworkInformation
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetShowNetworkInformation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetShowNetworkInformation) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetShowNetworkInformation");
static_assert(sizeof(MarinerGameUserSettings_GetShowNetworkInformation) == 0x000001, "Wrong size on MarinerGameUserSettings_GetShowNetworkInformation");
static_assert(offsetof(MarinerGameUserSettings_GetShowNetworkInformation, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetShowNetworkInformation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetSpeechToTextEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetSpeechToTextEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetSpeechToTextEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetSpeechToTextEnabled");
static_assert(sizeof(MarinerGameUserSettings_GetSpeechToTextEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_GetSpeechToTextEnabled");
static_assert(offsetof(MarinerGameUserSettings_GetSpeechToTextEnabled, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetSpeechToTextEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetSSRQuality
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetSSRQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetSSRQuality) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetSSRQuality");
static_assert(sizeof(MarinerGameUserSettings_GetSSRQuality) == 0x000004, "Wrong size on MarinerGameUserSettings_GetSSRQuality");
static_assert(offsetof(MarinerGameUserSettings_GetSSRQuality, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetSSRQuality::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetStickAccelerationEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetStickAccelerationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetStickAccelerationEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetStickAccelerationEnabled");
static_assert(sizeof(MarinerGameUserSettings_GetStickAccelerationEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_GetStickAccelerationEnabled");
static_assert(offsetof(MarinerGameUserSettings_GetStickAccelerationEnabled, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetStickAccelerationEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetSubtitlesEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetSubtitlesEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetSubtitlesEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetSubtitlesEnabled");
static_assert(sizeof(MarinerGameUserSettings_GetSubtitlesEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_GetSubtitlesEnabled");
static_assert(offsetof(MarinerGameUserSettings_GetSubtitlesEnabled, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetSubtitlesEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetTextToSpeechEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetTextToSpeechEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetTextToSpeechEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetTextToSpeechEnabled");
static_assert(sizeof(MarinerGameUserSettings_GetTextToSpeechEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_GetTextToSpeechEnabled");
static_assert(offsetof(MarinerGameUserSettings_GetTextToSpeechEnabled, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetTextToSpeechEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetUserSelectedMatchmakingRegion
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameUserSettings_GetUserSelectedMatchmakingRegion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetUserSelectedMatchmakingRegion) == 0x000008, "Wrong alignment on MarinerGameUserSettings_GetUserSelectedMatchmakingRegion");
static_assert(sizeof(MarinerGameUserSettings_GetUserSelectedMatchmakingRegion) == 0x000010, "Wrong size on MarinerGameUserSettings_GetUserSelectedMatchmakingRegion");
static_assert(offsetof(MarinerGameUserSettings_GetUserSelectedMatchmakingRegion, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetUserSelectedMatchmakingRegion::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetVibrationEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetVibrationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetVibrationEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetVibrationEnabled");
static_assert(sizeof(MarinerGameUserSettings_GetVibrationEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_GetVibrationEnabled");
static_assert(offsetof(MarinerGameUserSettings_GetVibrationEnabled, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetVibrationEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetVoiceChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetVoiceChatEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetVoiceChatEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetVoiceChatEnabled");
static_assert(sizeof(MarinerGameUserSettings_GetVoiceChatEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_GetVoiceChatEnabled");
static_assert(offsetof(MarinerGameUserSettings_GetVoiceChatEnabled, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetVoiceChatEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetVoiceChatPushToTalkEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_GetVoiceChatPushToTalkEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetVoiceChatPushToTalkEnabled) == 0x000001, "Wrong alignment on MarinerGameUserSettings_GetVoiceChatPushToTalkEnabled");
static_assert(sizeof(MarinerGameUserSettings_GetVoiceChatPushToTalkEnabled) == 0x000001, "Wrong size on MarinerGameUserSettings_GetVoiceChatPushToTalkEnabled");
static_assert(offsetof(MarinerGameUserSettings_GetVoiceChatPushToTalkEnabled, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetVoiceChatPushToTalkEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetVoiceChatVolume
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetVoiceChatVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetVoiceChatVolume) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetVoiceChatVolume");
static_assert(sizeof(MarinerGameUserSettings_GetVoiceChatVolume) == 0x000004, "Wrong size on MarinerGameUserSettings_GetVoiceChatVolume");
static_assert(offsetof(MarinerGameUserSettings_GetVoiceChatVolume, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetVoiceChatVolume::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.GetVoiceVolume
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameUserSettings_GetVoiceVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_GetVoiceVolume) == 0x000004, "Wrong alignment on MarinerGameUserSettings_GetVoiceVolume");
static_assert(sizeof(MarinerGameUserSettings_GetVoiceVolume) == 0x000004, "Wrong size on MarinerGameUserSettings_GetVoiceVolume");
static_assert(offsetof(MarinerGameUserSettings_GetVoiceVolume, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_GetVoiceVolume::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.HasAcceptedLegalDocs
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_HasAcceptedLegalDocs final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_HasAcceptedLegalDocs) == 0x000001, "Wrong alignment on MarinerGameUserSettings_HasAcceptedLegalDocs");
static_assert(sizeof(MarinerGameUserSettings_HasAcceptedLegalDocs) == 0x000001, "Wrong size on MarinerGameUserSettings_HasAcceptedLegalDocs");
static_assert(offsetof(MarinerGameUserSettings_HasAcceptedLegalDocs, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_HasAcceptedLegalDocs::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.IsMouseInvertedXAxis
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_IsMouseInvertedXAxis final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_IsMouseInvertedXAxis) == 0x000001, "Wrong alignment on MarinerGameUserSettings_IsMouseInvertedXAxis");
static_assert(sizeof(MarinerGameUserSettings_IsMouseInvertedXAxis) == 0x000001, "Wrong size on MarinerGameUserSettings_IsMouseInvertedXAxis");
static_assert(offsetof(MarinerGameUserSettings_IsMouseInvertedXAxis, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_IsMouseInvertedXAxis::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.IsMouseInvertedYAxis
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_IsMouseInvertedYAxis final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_IsMouseInvertedYAxis) == 0x000001, "Wrong alignment on MarinerGameUserSettings_IsMouseInvertedYAxis");
static_assert(sizeof(MarinerGameUserSettings_IsMouseInvertedYAxis) == 0x000001, "Wrong size on MarinerGameUserSettings_IsMouseInvertedYAxis");
static_assert(offsetof(MarinerGameUserSettings_IsMouseInvertedYAxis, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_IsMouseInvertedYAxis::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.IsSharingExternalUsageData
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_IsSharingExternalUsageData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_IsSharingExternalUsageData) == 0x000001, "Wrong alignment on MarinerGameUserSettings_IsSharingExternalUsageData");
static_assert(sizeof(MarinerGameUserSettings_IsSharingExternalUsageData) == 0x000001, "Wrong size on MarinerGameUserSettings_IsSharingExternalUsageData");
static_assert(offsetof(MarinerGameUserSettings_IsSharingExternalUsageData, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_IsSharingExternalUsageData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameUserSettings.IsSharingUsageData
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameUserSettings_IsSharingUsageData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameUserSettings_IsSharingUsageData) == 0x000001, "Wrong alignment on MarinerGameUserSettings_IsSharingUsageData");
static_assert(sizeof(MarinerGameUserSettings_IsSharingUsageData) == 0x000001, "Wrong size on MarinerGameUserSettings_IsSharingUsageData");
static_assert(offsetof(MarinerGameUserSettings_IsSharingUsageData, ReturnValue) == 0x000000, "Member 'MarinerGameUserSettings_IsSharingUsageData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobals.GetAchievementsGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobals_GetAchievementsGlobals final
{
public:
	class UMarinerAchievementsGlobals*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobals_GetAchievementsGlobals) == 0x000008, "Wrong alignment on MarinerGlobals_GetAchievementsGlobals");
static_assert(sizeof(MarinerGlobals_GetAchievementsGlobals) == 0x000008, "Wrong size on MarinerGlobals_GetAchievementsGlobals");
static_assert(offsetof(MarinerGlobals_GetAchievementsGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobals_GetAchievementsGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobals.GetActiveSettingsGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobals_GetActiveSettingsGlobals final
{
public:
	class UMarinerSettingsGlobals*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobals_GetActiveSettingsGlobals) == 0x000008, "Wrong alignment on MarinerGlobals_GetActiveSettingsGlobals");
static_assert(sizeof(MarinerGlobals_GetActiveSettingsGlobals) == 0x000008, "Wrong size on MarinerGlobals_GetActiveSettingsGlobals");
static_assert(offsetof(MarinerGlobals_GetActiveSettingsGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobals_GetActiveSettingsGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobals.GetCameraGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobals_GetCameraGlobals final
{
public:
	class UMarinerCameraGlobals*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobals_GetCameraGlobals) == 0x000008, "Wrong alignment on MarinerGlobals_GetCameraGlobals");
static_assert(sizeof(MarinerGlobals_GetCameraGlobals) == 0x000008, "Wrong size on MarinerGlobals_GetCameraGlobals");
static_assert(offsetof(MarinerGlobals_GetCameraGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobals_GetCameraGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobals.GetCharacterLiteGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobals_GetCharacterLiteGlobals final
{
public:
	class UMarinerCharacterLiteGlobals*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobals_GetCharacterLiteGlobals) == 0x000008, "Wrong alignment on MarinerGlobals_GetCharacterLiteGlobals");
static_assert(sizeof(MarinerGlobals_GetCharacterLiteGlobals) == 0x000008, "Wrong size on MarinerGlobals_GetCharacterLiteGlobals");
static_assert(offsetof(MarinerGlobals_GetCharacterLiteGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobals_GetCharacterLiteGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobals.GetChatGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobals_GetChatGlobals final
{
public:
	class UMarinerChatGlobals*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobals_GetChatGlobals) == 0x000008, "Wrong alignment on MarinerGlobals_GetChatGlobals");
static_assert(sizeof(MarinerGlobals_GetChatGlobals) == 0x000008, "Wrong size on MarinerGlobals_GetChatGlobals");
static_assert(offsetof(MarinerGlobals_GetChatGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobals_GetChatGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobals.GetDemoGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobals_GetDemoGlobals final
{
public:
	class UMarinerDemoGlobals*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobals_GetDemoGlobals) == 0x000008, "Wrong alignment on MarinerGlobals_GetDemoGlobals");
static_assert(sizeof(MarinerGlobals_GetDemoGlobals) == 0x000008, "Wrong size on MarinerGlobals_GetDemoGlobals");
static_assert(offsetof(MarinerGlobals_GetDemoGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobals_GetDemoGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobals.GetFrontEndGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobals_GetFrontEndGlobals final
{
public:
	class UMarinerFrontEndGlobals*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobals_GetFrontEndGlobals) == 0x000008, "Wrong alignment on MarinerGlobals_GetFrontEndGlobals");
static_assert(sizeof(MarinerGlobals_GetFrontEndGlobals) == 0x000008, "Wrong size on MarinerGlobals_GetFrontEndGlobals");
static_assert(offsetof(MarinerGlobals_GetFrontEndGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobals_GetFrontEndGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobals.GetGameGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobals_GetGameGlobals final
{
public:
	class UMarinerGameGlobals*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobals_GetGameGlobals) == 0x000008, "Wrong alignment on MarinerGlobals_GetGameGlobals");
static_assert(sizeof(MarinerGlobals_GetGameGlobals) == 0x000008, "Wrong size on MarinerGlobals_GetGameGlobals");
static_assert(offsetof(MarinerGlobals_GetGameGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobals_GetGameGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobals.GetInputGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobals_GetInputGlobals final
{
public:
	class UMarinerInputGlobals*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobals_GetInputGlobals) == 0x000008, "Wrong alignment on MarinerGlobals_GetInputGlobals");
static_assert(sizeof(MarinerGlobals_GetInputGlobals) == 0x000008, "Wrong size on MarinerGlobals_GetInputGlobals");
static_assert(offsetof(MarinerGlobals_GetInputGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobals_GetInputGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobals.GetMapGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobals_GetMapGlobals final
{
public:
	class UMarinerMapGlobals*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobals_GetMapGlobals) == 0x000008, "Wrong alignment on MarinerGlobals_GetMapGlobals");
static_assert(sizeof(MarinerGlobals_GetMapGlobals) == 0x000008, "Wrong size on MarinerGlobals_GetMapGlobals");
static_assert(offsetof(MarinerGlobals_GetMapGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobals_GetMapGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobals.GetMenuGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobals_GetMenuGlobals final
{
public:
	class UMarinerMenuGlobals*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobals_GetMenuGlobals) == 0x000008, "Wrong alignment on MarinerGlobals_GetMenuGlobals");
static_assert(sizeof(MarinerGlobals_GetMenuGlobals) == 0x000008, "Wrong size on MarinerGlobals_GetMenuGlobals");
static_assert(offsetof(MarinerGlobals_GetMenuGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobals_GetMenuGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobals.GetModeGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobals_GetModeGlobals final
{
public:
	class UMarinerModeGlobals*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobals_GetModeGlobals) == 0x000008, "Wrong alignment on MarinerGlobals_GetModeGlobals");
static_assert(sizeof(MarinerGlobals_GetModeGlobals) == 0x000008, "Wrong size on MarinerGlobals_GetModeGlobals");
static_assert(offsetof(MarinerGlobals_GetModeGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobals_GetModeGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobals.GetTotemGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobals_GetTotemGlobals final
{
public:
	class UMarinerTotemGlobals*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobals_GetTotemGlobals) == 0x000008, "Wrong alignment on MarinerGlobals_GetTotemGlobals");
static_assert(sizeof(MarinerGlobals_GetTotemGlobals) == 0x000008, "Wrong size on MarinerGlobals_GetTotemGlobals");
static_assert(offsetof(MarinerGlobals_GetTotemGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobals_GetTotemGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobals.GetUIGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobals_GetUIGlobals final
{
public:
	class UMarinerUIGlobals*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobals_GetUIGlobals) == 0x000008, "Wrong alignment on MarinerGlobals_GetUIGlobals");
static_assert(sizeof(MarinerGlobals_GetUIGlobals) == 0x000008, "Wrong size on MarinerGlobals_GetUIGlobals");
static_assert(offsetof(MarinerGlobals_GetUIGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobals_GetUIGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCircleProgress.SetInnerRadius
// 0x0004 (0x0004 - 0x0000)
struct MarinerCircleProgress_SetInnerRadius final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCircleProgress_SetInnerRadius) == 0x000004, "Wrong alignment on MarinerCircleProgress_SetInnerRadius");
static_assert(sizeof(MarinerCircleProgress_SetInnerRadius) == 0x000004, "Wrong size on MarinerCircleProgress_SetInnerRadius");
static_assert(offsetof(MarinerCircleProgress_SetInnerRadius, InPercent) == 0x000000, "Member 'MarinerCircleProgress_SetInnerRadius::InPercent' has a wrong offset!");

// Function Mariner.MarinerCircleProgress.SetProgress
// 0x0004 (0x0004 - 0x0000)
struct MarinerCircleProgress_SetProgress final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCircleProgress_SetProgress) == 0x000004, "Wrong alignment on MarinerCircleProgress_SetProgress");
static_assert(sizeof(MarinerCircleProgress_SetProgress) == 0x000004, "Wrong size on MarinerCircleProgress_SetProgress");
static_assert(offsetof(MarinerCircleProgress_SetProgress, InPercent) == 0x000000, "Member 'MarinerCircleProgress_SetProgress::InPercent' has a wrong offset!");

// Function Mariner.MarinerRichTextBlock.SetText
// 0x0018 (0x0018 - 0x0000)
struct MarinerRichTextBlock_SetText final
{
public:
	class FText                                   Param_Text;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRichTextBlock_SetText) == 0x000008, "Wrong alignment on MarinerRichTextBlock_SetText");
static_assert(sizeof(MarinerRichTextBlock_SetText) == 0x000018, "Wrong size on MarinerRichTextBlock_SetText");
static_assert(offsetof(MarinerRichTextBlock_SetText, Param_Text) == 0x000000, "Member 'MarinerRichTextBlock_SetText::Param_Text' has a wrong offset!");

// Function Mariner.MarinerCollectableObject.BP_OnClientBeginPlayOverlappingLocalPlayer
// 0x0008 (0x0008 - 0x0000)
struct MarinerCollectableObject_BP_OnClientBeginPlayOverlappingLocalPlayer final
{
public:
	class APawn*                                  LocalPlayerPawn;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectableObject_BP_OnClientBeginPlayOverlappingLocalPlayer) == 0x000008, "Wrong alignment on MarinerCollectableObject_BP_OnClientBeginPlayOverlappingLocalPlayer");
static_assert(sizeof(MarinerCollectableObject_BP_OnClientBeginPlayOverlappingLocalPlayer) == 0x000008, "Wrong size on MarinerCollectableObject_BP_OnClientBeginPlayOverlappingLocalPlayer");
static_assert(offsetof(MarinerCollectableObject_BP_OnClientBeginPlayOverlappingLocalPlayer, LocalPlayerPawn) == 0x000000, "Member 'MarinerCollectableObject_BP_OnClientBeginPlayOverlappingLocalPlayer::LocalPlayerPawn' has a wrong offset!");

// Function Mariner.MarinerCollectableObject.OnPickedUpEvent
// 0x0008 (0x0008 - 0x0000)
struct MarinerCollectableObject_OnPickedUpEvent final
{
public:
	class AMarinerCharacter*                      InPickedUpBy;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectableObject_OnPickedUpEvent) == 0x000008, "Wrong alignment on MarinerCollectableObject_OnPickedUpEvent");
static_assert(sizeof(MarinerCollectableObject_OnPickedUpEvent) == 0x000008, "Wrong size on MarinerCollectableObject_OnPickedUpEvent");
static_assert(offsetof(MarinerCollectableObject_OnPickedUpEvent, InPickedUpBy) == 0x000000, "Member 'MarinerCollectableObject_OnPickedUpEvent::InPickedUpBy' has a wrong offset!");

// Function Mariner.MarinerCollectableObject.TryToPickup
// 0x0010 (0x0010 - 0x0000)
struct MarinerCollectableObject_TryToPickup final
{
public:
	class AMarinerCharacter*                      Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_178C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCollectableObject_TryToPickup) == 0x000008, "Wrong alignment on MarinerCollectableObject_TryToPickup");
static_assert(sizeof(MarinerCollectableObject_TryToPickup) == 0x000010, "Wrong size on MarinerCollectableObject_TryToPickup");
static_assert(offsetof(MarinerCollectableObject_TryToPickup, Pawn) == 0x000000, "Member 'MarinerCollectableObject_TryToPickup::Pawn' has a wrong offset!");
static_assert(offsetof(MarinerCollectableObject_TryToPickup, ReturnValue) == 0x000008, "Member 'MarinerCollectableObject_TryToPickup::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectableObject.BP_CanBePickedUp
// 0x0010 (0x0010 - 0x0000)
struct MarinerCollectableObject_BP_CanBePickedUp final
{
public:
	const class AMarinerCharacter*                TestPawn;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_178D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCollectableObject_BP_CanBePickedUp) == 0x000008, "Wrong alignment on MarinerCollectableObject_BP_CanBePickedUp");
static_assert(sizeof(MarinerCollectableObject_BP_CanBePickedUp) == 0x000010, "Wrong size on MarinerCollectableObject_BP_CanBePickedUp");
static_assert(offsetof(MarinerCollectableObject_BP_CanBePickedUp, TestPawn) == 0x000000, "Member 'MarinerCollectableObject_BP_CanBePickedUp::TestPawn' has a wrong offset!");
static_assert(offsetof(MarinerCollectableObject_BP_CanBePickedUp, ReturnValue) == 0x000008, "Member 'MarinerCollectableObject_BP_CanBePickedUp::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectableObject.GetDroppedBy
// 0x0008 (0x0008 - 0x0000)
struct MarinerCollectableObject_GetDroppedBy final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectableObject_GetDroppedBy) == 0x000008, "Wrong alignment on MarinerCollectableObject_GetDroppedBy");
static_assert(sizeof(MarinerCollectableObject_GetDroppedBy) == 0x000008, "Wrong size on MarinerCollectableObject_GetDroppedBy");
static_assert(offsetof(MarinerCollectableObject_GetDroppedBy, ReturnValue) == 0x000000, "Member 'MarinerCollectableObject_GetDroppedBy::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectableObject.GetPickedUpBy
// 0x0008 (0x0008 - 0x0000)
struct MarinerCollectableObject_GetPickedUpBy final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectableObject_GetPickedUpBy) == 0x000008, "Wrong alignment on MarinerCollectableObject_GetPickedUpBy");
static_assert(sizeof(MarinerCollectableObject_GetPickedUpBy) == 0x000008, "Wrong size on MarinerCollectableObject_GetPickedUpBy");
static_assert(offsetof(MarinerCollectableObject_GetPickedUpBy, ReturnValue) == 0x000000, "Member 'MarinerCollectableObject_GetPickedUpBy::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionDataAsset.BeginCollectionPurchase
// 0x0010 (0x0010 - 0x0000)
struct MarinerCollectionDataAsset_BeginCollectionPurchase final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPreviewMessageBox;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1790[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCollectionDataAsset_BeginCollectionPurchase) == 0x000008, "Wrong alignment on MarinerCollectionDataAsset_BeginCollectionPurchase");
static_assert(sizeof(MarinerCollectionDataAsset_BeginCollectionPurchase) == 0x000010, "Wrong size on MarinerCollectionDataAsset_BeginCollectionPurchase");
static_assert(offsetof(MarinerCollectionDataAsset_BeginCollectionPurchase, WorldContextObject) == 0x000000, "Member 'MarinerCollectionDataAsset_BeginCollectionPurchase::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerCollectionDataAsset_BeginCollectionPurchase, bAllowPreviewMessageBox) == 0x000008, "Member 'MarinerCollectionDataAsset_BeginCollectionPurchase::bAllowPreviewMessageBox' has a wrong offset!");

// Function Mariner.MarinerCollectionDataAsset.OnPreviewMessageBoxConfirmed
// 0x0018 (0x0018 - 0x0000)
struct MarinerCollectionDataAsset_OnPreviewMessageBoxConfirmed final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionDataAsset_OnPreviewMessageBoxConfirmed) == 0x000008, "Wrong alignment on MarinerCollectionDataAsset_OnPreviewMessageBoxConfirmed");
static_assert(sizeof(MarinerCollectionDataAsset_OnPreviewMessageBoxConfirmed) == 0x000018, "Wrong size on MarinerCollectionDataAsset_OnPreviewMessageBoxConfirmed");
static_assert(offsetof(MarinerCollectionDataAsset_OnPreviewMessageBoxConfirmed, KeyPressed) == 0x000000, "Member 'MarinerCollectionDataAsset_OnPreviewMessageBoxConfirmed::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerCollectionDataAsset.CanPurchase
// 0x0001 (0x0001 - 0x0000)
struct MarinerCollectionDataAsset_CanPurchase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionDataAsset_CanPurchase) == 0x000001, "Wrong alignment on MarinerCollectionDataAsset_CanPurchase");
static_assert(sizeof(MarinerCollectionDataAsset_CanPurchase) == 0x000001, "Wrong size on MarinerCollectionDataAsset_CanPurchase");
static_assert(offsetof(MarinerCollectionDataAsset_CanPurchase, ReturnValue) == 0x000000, "Member 'MarinerCollectionDataAsset_CanPurchase::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionDataAsset.ContainsItem
// 0x0058 (0x0058 - 0x0000)
struct MarinerCollectionDataAsset_ContainsItem final
{
public:
	struct FMangoItem                             Item;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1791[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCollectionDataAsset_ContainsItem) == 0x000008, "Wrong alignment on MarinerCollectionDataAsset_ContainsItem");
static_assert(sizeof(MarinerCollectionDataAsset_ContainsItem) == 0x000058, "Wrong size on MarinerCollectionDataAsset_ContainsItem");
static_assert(offsetof(MarinerCollectionDataAsset_ContainsItem, Item) == 0x000000, "Member 'MarinerCollectionDataAsset_ContainsItem::Item' has a wrong offset!");
static_assert(offsetof(MarinerCollectionDataAsset_ContainsItem, ReturnValue) == 0x000050, "Member 'MarinerCollectionDataAsset_ContainsItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionDataAsset.GetCollectionIcon
// 0x0088 (0x0088 - 0x0000)
struct MarinerCollectionDataAsset_GetCollectionIcon final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionDataAsset_GetCollectionIcon) == 0x000008, "Wrong alignment on MarinerCollectionDataAsset_GetCollectionIcon");
static_assert(sizeof(MarinerCollectionDataAsset_GetCollectionIcon) == 0x000088, "Wrong size on MarinerCollectionDataAsset_GetCollectionIcon");
static_assert(offsetof(MarinerCollectionDataAsset_GetCollectionIcon, ReturnValue) == 0x000000, "Member 'MarinerCollectionDataAsset_GetCollectionIcon::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionDataAsset.GetLockIcon
// 0x0088 (0x0088 - 0x0000)
struct MarinerCollectionDataAsset_GetLockIcon final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionDataAsset_GetLockIcon) == 0x000008, "Wrong alignment on MarinerCollectionDataAsset_GetLockIcon");
static_assert(sizeof(MarinerCollectionDataAsset_GetLockIcon) == 0x000088, "Wrong size on MarinerCollectionDataAsset_GetLockIcon");
static_assert(offsetof(MarinerCollectionDataAsset_GetLockIcon, ReturnValue) == 0x000000, "Member 'MarinerCollectionDataAsset_GetLockIcon::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionDataAsset.GetOfferButtonText
// 0x0018 (0x0018 - 0x0000)
struct MarinerCollectionDataAsset_GetOfferButtonText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionDataAsset_GetOfferButtonText) == 0x000008, "Wrong alignment on MarinerCollectionDataAsset_GetOfferButtonText");
static_assert(sizeof(MarinerCollectionDataAsset_GetOfferButtonText) == 0x000018, "Wrong size on MarinerCollectionDataAsset_GetOfferButtonText");
static_assert(offsetof(MarinerCollectionDataAsset_GetOfferButtonText, ReturnValue) == 0x000000, "Member 'MarinerCollectionDataAsset_GetOfferButtonText::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameMode.AddToRedundantElapsedTime
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameMode_AddToRedundantElapsedTime final
{
public:
	int32                                         SecondsToAdd;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_AddToRedundantElapsedTime) == 0x000004, "Wrong alignment on MarinerGameMode_AddToRedundantElapsedTime");
static_assert(sizeof(MarinerGameMode_AddToRedundantElapsedTime) == 0x000008, "Wrong size on MarinerGameMode_AddToRedundantElapsedTime");
static_assert(offsetof(MarinerGameMode_AddToRedundantElapsedTime, SecondsToAdd) == 0x000000, "Member 'MarinerGameMode_AddToRedundantElapsedTime::SecondsToAdd' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_AddToRedundantElapsedTime, ReturnValue) == 0x000004, "Member 'MarinerGameMode_AddToRedundantElapsedTime::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameMode.BP_OnPlayerRejoined
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameMode_BP_OnPlayerRejoined final
{
public:
	class AMarinerPlayerState*                    RejoinedPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_BP_OnPlayerRejoined) == 0x000008, "Wrong alignment on MarinerGameMode_BP_OnPlayerRejoined");
static_assert(sizeof(MarinerGameMode_BP_OnPlayerRejoined) == 0x000008, "Wrong size on MarinerGameMode_BP_OnPlayerRejoined");
static_assert(offsetof(MarinerGameMode_BP_OnPlayerRejoined, RejoinedPlayer) == 0x000000, "Member 'MarinerGameMode_BP_OnPlayerRejoined::RejoinedPlayer' has a wrong offset!");

// Function Mariner.MarinerGameMode.BroadcastMessage
// 0x0020 (0x0020 - 0x0000)
struct MarinerGameMode_BroadcastMessage final
{
public:
	TSubclassOf<class ULocalMessage>              Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState_1;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState_2;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalObject;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_BroadcastMessage) == 0x000008, "Wrong alignment on MarinerGameMode_BroadcastMessage");
static_assert(sizeof(MarinerGameMode_BroadcastMessage) == 0x000020, "Wrong size on MarinerGameMode_BroadcastMessage");
static_assert(offsetof(MarinerGameMode_BroadcastMessage, Message) == 0x000000, "Member 'MarinerGameMode_BroadcastMessage::Message' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_BroadcastMessage, RelatedPlayerState_1) == 0x000008, "Member 'MarinerGameMode_BroadcastMessage::RelatedPlayerState_1' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_BroadcastMessage, RelatedPlayerState_2) == 0x000010, "Member 'MarinerGameMode_BroadcastMessage::RelatedPlayerState_2' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_BroadcastMessage, OptionalObject) == 0x000018, "Member 'MarinerGameMode_BroadcastMessage::OptionalObject' has a wrong offset!");

// Function Mariner.MarinerGameMode.BroadcastMessageToAll
// 0x0020 (0x0020 - 0x0000)
struct MarinerGameMode_BroadcastMessageToAll final
{
public:
	TSubclassOf<class ULocalMessage>              Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState_1;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState_2;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalObject;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_BroadcastMessageToAll) == 0x000008, "Wrong alignment on MarinerGameMode_BroadcastMessageToAll");
static_assert(sizeof(MarinerGameMode_BroadcastMessageToAll) == 0x000020, "Wrong size on MarinerGameMode_BroadcastMessageToAll");
static_assert(offsetof(MarinerGameMode_BroadcastMessageToAll, Message) == 0x000000, "Member 'MarinerGameMode_BroadcastMessageToAll::Message' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_BroadcastMessageToAll, RelatedPlayerState_1) == 0x000008, "Member 'MarinerGameMode_BroadcastMessageToAll::RelatedPlayerState_1' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_BroadcastMessageToAll, RelatedPlayerState_2) == 0x000010, "Member 'MarinerGameMode_BroadcastMessageToAll::RelatedPlayerState_2' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_BroadcastMessageToAll, OptionalObject) == 0x000018, "Member 'MarinerGameMode_BroadcastMessageToAll::OptionalObject' has a wrong offset!");

// Function Mariner.MarinerGameMode.BroadcastMessageToPlayers
// 0x0030 (0x0030 - 0x0000)
struct MarinerGameMode_BroadcastMessageToPlayers final
{
public:
	TArray<class APlayerState*>                   ToPlayers;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ULocalMessage>              Message;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState_1;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState_2;                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalObject;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_BroadcastMessageToPlayers) == 0x000008, "Wrong alignment on MarinerGameMode_BroadcastMessageToPlayers");
static_assert(sizeof(MarinerGameMode_BroadcastMessageToPlayers) == 0x000030, "Wrong size on MarinerGameMode_BroadcastMessageToPlayers");
static_assert(offsetof(MarinerGameMode_BroadcastMessageToPlayers, ToPlayers) == 0x000000, "Member 'MarinerGameMode_BroadcastMessageToPlayers::ToPlayers' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_BroadcastMessageToPlayers, Message) == 0x000010, "Member 'MarinerGameMode_BroadcastMessageToPlayers::Message' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_BroadcastMessageToPlayers, RelatedPlayerState_1) == 0x000018, "Member 'MarinerGameMode_BroadcastMessageToPlayers::RelatedPlayerState_1' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_BroadcastMessageToPlayers, RelatedPlayerState_2) == 0x000020, "Member 'MarinerGameMode_BroadcastMessageToPlayers::RelatedPlayerState_2' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_BroadcastMessageToPlayers, OptionalObject) == 0x000028, "Member 'MarinerGameMode_BroadcastMessageToPlayers::OptionalObject' has a wrong offset!");

// Function Mariner.MarinerGameMode.CanBotHaveUniqueName
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameMode_CanBotHaveUniqueName final
{
public:
	const class AMarinerPlayerState*              BotPlayerState;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGameMode_CanBotHaveUniqueName) == 0x000008, "Wrong alignment on MarinerGameMode_CanBotHaveUniqueName");
static_assert(sizeof(MarinerGameMode_CanBotHaveUniqueName) == 0x000010, "Wrong size on MarinerGameMode_CanBotHaveUniqueName");
static_assert(offsetof(MarinerGameMode_CanBotHaveUniqueName, BotPlayerState) == 0x000000, "Member 'MarinerGameMode_CanBotHaveUniqueName::BotPlayerState' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_CanBotHaveUniqueName, ReturnValue) == 0x000008, "Member 'MarinerGameMode_CanBotHaveUniqueName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameMode.ChooseTeam
// 0x0020 (0x0020 - 0x0000)
struct MarinerGameMode_ChooseTeam final
{
public:
	const class AMarinerPlayerState*              InPlayerState;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                   Players;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A4[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGameMode_ChooseTeam) == 0x000008, "Wrong alignment on MarinerGameMode_ChooseTeam");
static_assert(sizeof(MarinerGameMode_ChooseTeam) == 0x000020, "Wrong size on MarinerGameMode_ChooseTeam");
static_assert(offsetof(MarinerGameMode_ChooseTeam, InPlayerState) == 0x000000, "Member 'MarinerGameMode_ChooseTeam::InPlayerState' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_ChooseTeam, Players) == 0x000008, "Member 'MarinerGameMode_ChooseTeam::Players' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_ChooseTeam, ReturnValue) == 0x000018, "Member 'MarinerGameMode_ChooseTeam::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameMode.CreateBot
// 0x0018 (0x0018 - 0x0000)
struct MarinerGameMode_CreateBot final
{
public:
	TSubclassOf<class AMarinerCharacter>          OverridePawnClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBotDifficultyLevel                           Difficulty;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A5[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamNum;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerAIController*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_CreateBot) == 0x000008, "Wrong alignment on MarinerGameMode_CreateBot");
static_assert(sizeof(MarinerGameMode_CreateBot) == 0x000018, "Wrong size on MarinerGameMode_CreateBot");
static_assert(offsetof(MarinerGameMode_CreateBot, OverridePawnClass) == 0x000000, "Member 'MarinerGameMode_CreateBot::OverridePawnClass' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_CreateBot, Difficulty) == 0x000008, "Member 'MarinerGameMode_CreateBot::Difficulty' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_CreateBot, TeamNum) == 0x00000C, "Member 'MarinerGameMode_CreateBot::TeamNum' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_CreateBot, ReturnValue) == 0x000010, "Member 'MarinerGameMode_CreateBot::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameMode.FinishMatchWithWinningTeam
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameMode_FinishMatchWithWinningTeam final
{
public:
	int32                                         WinningTeam;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_FinishMatchWithWinningTeam) == 0x000004, "Wrong alignment on MarinerGameMode_FinishMatchWithWinningTeam");
static_assert(sizeof(MarinerGameMode_FinishMatchWithWinningTeam) == 0x000004, "Wrong size on MarinerGameMode_FinishMatchWithWinningTeam");
static_assert(offsetof(MarinerGameMode_FinishMatchWithWinningTeam, WinningTeam) == 0x000000, "Member 'MarinerGameMode_FinishMatchWithWinningTeam::WinningTeam' has a wrong offset!");

// Function Mariner.MarinerGameMode.GetBotInitialPawnClass
// 0x0018 (0x0018 - 0x0000)
struct MarinerGameMode_GetBotInitialPawnClass final
{
public:
	const class AMarinerGameState*                MarinerGameState;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotTeam;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A6[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AMarinerCharacter>          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_GetBotInitialPawnClass) == 0x000008, "Wrong alignment on MarinerGameMode_GetBotInitialPawnClass");
static_assert(sizeof(MarinerGameMode_GetBotInitialPawnClass) == 0x000018, "Wrong size on MarinerGameMode_GetBotInitialPawnClass");
static_assert(offsetof(MarinerGameMode_GetBotInitialPawnClass, MarinerGameState) == 0x000000, "Member 'MarinerGameMode_GetBotInitialPawnClass::MarinerGameState' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_GetBotInitialPawnClass, BotTeam) == 0x000008, "Member 'MarinerGameMode_GetBotInitialPawnClass::BotTeam' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_GetBotInitialPawnClass, ReturnValue) == 0x000010, "Member 'MarinerGameMode_GetBotInitialPawnClass::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameMode.HandleStartingNewController
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameMode_HandleStartingNewController final
{
public:
	class AController*                            NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_HandleStartingNewController) == 0x000008, "Wrong alignment on MarinerGameMode_HandleStartingNewController");
static_assert(sizeof(MarinerGameMode_HandleStartingNewController) == 0x000008, "Wrong size on MarinerGameMode_HandleStartingNewController");
static_assert(offsetof(MarinerGameMode_HandleStartingNewController, NewPlayer) == 0x000000, "Member 'MarinerGameMode_HandleStartingNewController::NewPlayer' has a wrong offset!");

// Function Mariner.MarinerGameMode.InitiateRoundReset
// 0x0002 (0x0002 - 0x0000)
struct MarinerGameMode_InitiateRoundReset final
{
public:
	bool                                          bRespawnPlayers;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearProjectiles;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_InitiateRoundReset) == 0x000001, "Wrong alignment on MarinerGameMode_InitiateRoundReset");
static_assert(sizeof(MarinerGameMode_InitiateRoundReset) == 0x000002, "Wrong size on MarinerGameMode_InitiateRoundReset");
static_assert(offsetof(MarinerGameMode_InitiateRoundReset, bRespawnPlayers) == 0x000000, "Member 'MarinerGameMode_InitiateRoundReset::bRespawnPlayers' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_InitiateRoundReset, bClearProjectiles) == 0x000001, "Member 'MarinerGameMode_InitiateRoundReset::bClearProjectiles' has a wrong offset!");

// Function Mariner.MarinerGameMode.InitiateTimerToRoundReset
// 0x0002 (0x0002 - 0x0000)
struct MarinerGameMode_InitiateTimerToRoundReset final
{
public:
	bool                                          bRespawnPlayers;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearProjectiles;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_InitiateTimerToRoundReset) == 0x000001, "Wrong alignment on MarinerGameMode_InitiateTimerToRoundReset");
static_assert(sizeof(MarinerGameMode_InitiateTimerToRoundReset) == 0x000002, "Wrong size on MarinerGameMode_InitiateTimerToRoundReset");
static_assert(offsetof(MarinerGameMode_InitiateTimerToRoundReset, bRespawnPlayers) == 0x000000, "Member 'MarinerGameMode_InitiateTimerToRoundReset::bRespawnPlayers' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_InitiateTimerToRoundReset, bClearProjectiles) == 0x000001, "Member 'MarinerGameMode_InitiateTimerToRoundReset::bClearProjectiles' has a wrong offset!");

// Function Mariner.MarinerGameMode.IsDeveloperCheatingAllowed
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameMode_IsDeveloperCheatingAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_IsDeveloperCheatingAllowed) == 0x000001, "Wrong alignment on MarinerGameMode_IsDeveloperCheatingAllowed");
static_assert(sizeof(MarinerGameMode_IsDeveloperCheatingAllowed) == 0x000001, "Wrong size on MarinerGameMode_IsDeveloperCheatingAllowed");
static_assert(offsetof(MarinerGameMode_IsDeveloperCheatingAllowed, ReturnValue) == 0x000000, "Member 'MarinerGameMode_IsDeveloperCheatingAllowed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameMode.ModifySuppressionTagLayersForAllPlayers
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameMode_ModifySuppressionTagLayersForAllPlayers final
{
public:
	bool                                          bAdd;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_ModifySuppressionTagLayersForAllPlayers) == 0x000001, "Wrong alignment on MarinerGameMode_ModifySuppressionTagLayersForAllPlayers");
static_assert(sizeof(MarinerGameMode_ModifySuppressionTagLayersForAllPlayers) == 0x000001, "Wrong size on MarinerGameMode_ModifySuppressionTagLayersForAllPlayers");
static_assert(offsetof(MarinerGameMode_ModifySuppressionTagLayersForAllPlayers, bAdd) == 0x000000, "Member 'MarinerGameMode_ModifySuppressionTagLayersForAllPlayers::bAdd' has a wrong offset!");

// Function Mariner.MarinerGameMode.NotifyPlayersOfArtifactEvent
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameMode_NotifyPlayersOfArtifactEvent final
{
public:
	EArtifactEventTypes                           ArtifactEventType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_NotifyPlayersOfArtifactEvent) == 0x000001, "Wrong alignment on MarinerGameMode_NotifyPlayersOfArtifactEvent");
static_assert(sizeof(MarinerGameMode_NotifyPlayersOfArtifactEvent) == 0x000001, "Wrong size on MarinerGameMode_NotifyPlayersOfArtifactEvent");
static_assert(offsetof(MarinerGameMode_NotifyPlayersOfArtifactEvent, ArtifactEventType) == 0x000000, "Member 'MarinerGameMode_NotifyPlayersOfArtifactEvent::ArtifactEventType' has a wrong offset!");

// Function Mariner.MarinerGameMode.OnCharacterSelectRemainingTimeChanged
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameMode_OnCharacterSelectRemainingTimeChanged final
{
public:
	int32                                         RemainingTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_OnCharacterSelectRemainingTimeChanged) == 0x000004, "Wrong alignment on MarinerGameMode_OnCharacterSelectRemainingTimeChanged");
static_assert(sizeof(MarinerGameMode_OnCharacterSelectRemainingTimeChanged) == 0x000004, "Wrong size on MarinerGameMode_OnCharacterSelectRemainingTimeChanged");
static_assert(offsetof(MarinerGameMode_OnCharacterSelectRemainingTimeChanged, RemainingTime) == 0x000000, "Member 'MarinerGameMode_OnCharacterSelectRemainingTimeChanged::RemainingTime' has a wrong offset!");

// Function Mariner.MarinerGameMode.OnDamageCaused
// 0x0028 (0x0028 - 0x0000)
struct MarinerGameMode_OnDamageCaused final
{
public:
	const class AActor*                           DamagedActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAOEDamage;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMegablastDamage;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A7[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageApplied;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageBlocked;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class APawn*                            InstigatorPawn;                                    // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_OnDamageCaused) == 0x000008, "Wrong alignment on MarinerGameMode_OnDamageCaused");
static_assert(sizeof(MarinerGameMode_OnDamageCaused) == 0x000028, "Wrong size on MarinerGameMode_OnDamageCaused");
static_assert(offsetof(MarinerGameMode_OnDamageCaused, DamagedActor) == 0x000000, "Member 'MarinerGameMode_OnDamageCaused::DamagedActor' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_OnDamageCaused, bIsAOEDamage) == 0x000008, "Member 'MarinerGameMode_OnDamageCaused::bIsAOEDamage' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_OnDamageCaused, bIsMegablastDamage) == 0x000009, "Member 'MarinerGameMode_OnDamageCaused::bIsMegablastDamage' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_OnDamageCaused, DamageType) == 0x000010, "Member 'MarinerGameMode_OnDamageCaused::DamageType' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_OnDamageCaused, DamageApplied) == 0x000018, "Member 'MarinerGameMode_OnDamageCaused::DamageApplied' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_OnDamageCaused, DamageBlocked) == 0x00001C, "Member 'MarinerGameMode_OnDamageCaused::DamageBlocked' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_OnDamageCaused, InstigatorPawn) == 0x000020, "Member 'MarinerGameMode_OnDamageCaused::InstigatorPawn' has a wrong offset!");

// Function Mariner.MarinerGameMode.OnGameModeObjectOutOfBounds
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameMode_OnGameModeObjectOutOfBounds final
{
public:
	class AActor*                                 GameModeObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGameMode_OnGameModeObjectOutOfBounds) == 0x000008, "Wrong alignment on MarinerGameMode_OnGameModeObjectOutOfBounds");
static_assert(sizeof(MarinerGameMode_OnGameModeObjectOutOfBounds) == 0x000010, "Wrong size on MarinerGameMode_OnGameModeObjectOutOfBounds");
static_assert(offsetof(MarinerGameMode_OnGameModeObjectOutOfBounds, GameModeObject) == 0x000000, "Member 'MarinerGameMode_OnGameModeObjectOutOfBounds::GameModeObject' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_OnGameModeObjectOutOfBounds, ReturnValue) == 0x000008, "Member 'MarinerGameMode_OnGameModeObjectOutOfBounds::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameMode.OnItemDropped
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameMode_OnItemDropped final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerItem*                           DroppedBall;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_OnItemDropped) == 0x000008, "Wrong alignment on MarinerGameMode_OnItemDropped");
static_assert(sizeof(MarinerGameMode_OnItemDropped) == 0x000010, "Wrong size on MarinerGameMode_OnItemDropped");
static_assert(offsetof(MarinerGameMode_OnItemDropped, Player) == 0x000000, "Member 'MarinerGameMode_OnItemDropped::Player' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_OnItemDropped, DroppedBall) == 0x000008, "Member 'MarinerGameMode_OnItemDropped::DroppedBall' has a wrong offset!");

// Function Mariner.MarinerGameMode.OnItemPickedUp
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameMode_OnItemPickedUp final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerItem*                           Ball;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_OnItemPickedUp) == 0x000008, "Wrong alignment on MarinerGameMode_OnItemPickedUp");
static_assert(sizeof(MarinerGameMode_OnItemPickedUp) == 0x000010, "Wrong size on MarinerGameMode_OnItemPickedUp");
static_assert(offsetof(MarinerGameMode_OnItemPickedUp, Player) == 0x000000, "Member 'MarinerGameMode_OnItemPickedUp::Player' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_OnItemPickedUp, Ball) == 0x000008, "Member 'MarinerGameMode_OnItemPickedUp::Ball' has a wrong offset!");

// Function Mariner.MarinerGameMode.OnItemStolen
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameMode_OnItemStolen final
{
public:
	class APlayerState*                           StealingPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           StolenFromPlayer;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_OnItemStolen) == 0x000008, "Wrong alignment on MarinerGameMode_OnItemStolen");
static_assert(sizeof(MarinerGameMode_OnItemStolen) == 0x000010, "Wrong size on MarinerGameMode_OnItemStolen");
static_assert(offsetof(MarinerGameMode_OnItemStolen, StealingPlayer) == 0x000000, "Member 'MarinerGameMode_OnItemStolen::StealingPlayer' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_OnItemStolen, StolenFromPlayer) == 0x000008, "Member 'MarinerGameMode_OnItemStolen::StolenFromPlayer' has a wrong offset!");

// Function Mariner.MarinerGameMode.OnKnockout
// 0x0020 (0x0020 - 0x0000)
struct MarinerGameMode_OnKnockout final
{
public:
	class AController*                            Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            KilledPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  KilledPawn;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDamageType*                      DamageType;                                        // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_OnKnockout) == 0x000008, "Wrong alignment on MarinerGameMode_OnKnockout");
static_assert(sizeof(MarinerGameMode_OnKnockout) == 0x000020, "Wrong size on MarinerGameMode_OnKnockout");
static_assert(offsetof(MarinerGameMode_OnKnockout, Killer) == 0x000000, "Member 'MarinerGameMode_OnKnockout::Killer' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_OnKnockout, KilledPlayer) == 0x000008, "Member 'MarinerGameMode_OnKnockout::KilledPlayer' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_OnKnockout, KilledPawn) == 0x000010, "Member 'MarinerGameMode_OnKnockout::KilledPawn' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_OnKnockout, DamageType) == 0x000018, "Member 'MarinerGameMode_OnKnockout::DamageType' has a wrong offset!");

// Function Mariner.MarinerGameMode.OnPossessPawn
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameMode_OnPossessPawn final
{
public:
	class AMarinerPlayerController*               PossessingController;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  PossessedPawn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_OnPossessPawn) == 0x000008, "Wrong alignment on MarinerGameMode_OnPossessPawn");
static_assert(sizeof(MarinerGameMode_OnPossessPawn) == 0x000010, "Wrong size on MarinerGameMode_OnPossessPawn");
static_assert(offsetof(MarinerGameMode_OnPossessPawn, PossessingController) == 0x000000, "Member 'MarinerGameMode_OnPossessPawn::PossessingController' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_OnPossessPawn, PossessedPawn) == 0x000008, "Member 'MarinerGameMode_OnPossessPawn::PossessedPawn' has a wrong offset!");

// Function Mariner.MarinerGameMode.OnPregameStateBegin
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameMode_OnPregameStateBegin final
{
public:
	class FName                                   NewPregameState;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_OnPregameStateBegin) == 0x000004, "Wrong alignment on MarinerGameMode_OnPregameStateBegin");
static_assert(sizeof(MarinerGameMode_OnPregameStateBegin) == 0x000008, "Wrong size on MarinerGameMode_OnPregameStateBegin");
static_assert(offsetof(MarinerGameMode_OnPregameStateBegin, NewPregameState) == 0x000000, "Member 'MarinerGameMode_OnPregameStateBegin::NewPregameState' has a wrong offset!");

// Function Mariner.MarinerGameMode.OnPregameStateEnded
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameMode_OnPregameStateEnded final
{
public:
	class FName                                   OldPregameState;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_OnPregameStateEnded) == 0x000004, "Wrong alignment on MarinerGameMode_OnPregameStateEnded");
static_assert(sizeof(MarinerGameMode_OnPregameStateEnded) == 0x000008, "Wrong size on MarinerGameMode_OnPregameStateEnded");
static_assert(offsetof(MarinerGameMode_OnPregameStateEnded, OldPregameState) == 0x000000, "Member 'MarinerGameMode_OnPregameStateEnded::OldPregameState' has a wrong offset!");

// Function Mariner.MarinerGameMode.OnTimerUpdated
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameMode_OnTimerUpdated final
{
public:
	int32                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_OnTimerUpdated) == 0x000004, "Wrong alignment on MarinerGameMode_OnTimerUpdated");
static_assert(sizeof(MarinerGameMode_OnTimerUpdated) == 0x000004, "Wrong size on MarinerGameMode_OnTimerUpdated");
static_assert(offsetof(MarinerGameMode_OnTimerUpdated, TimeRemaining) == 0x000000, "Member 'MarinerGameMode_OnTimerUpdated::TimeRemaining' has a wrong offset!");

// Function Mariner.MarinerGameMode.PauseTimer
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameMode_PauseTimer final
{
public:
	bool                                          bIsPaused;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_PauseTimer) == 0x000001, "Wrong alignment on MarinerGameMode_PauseTimer");
static_assert(sizeof(MarinerGameMode_PauseTimer) == 0x000001, "Wrong size on MarinerGameMode_PauseTimer");
static_assert(offsetof(MarinerGameMode_PauseTimer, bIsPaused) == 0x000000, "Member 'MarinerGameMode_PauseTimer::bIsPaused' has a wrong offset!");

// Function Mariner.MarinerGameMode.ReactToPreRoundCountdownStarted
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameMode_ReactToPreRoundCountdownStarted final
{
public:
	float                                         PreRoundCountdownEndTimeStamp;                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_ReactToPreRoundCountdownStarted) == 0x000004, "Wrong alignment on MarinerGameMode_ReactToPreRoundCountdownStarted");
static_assert(sizeof(MarinerGameMode_ReactToPreRoundCountdownStarted) == 0x000004, "Wrong size on MarinerGameMode_ReactToPreRoundCountdownStarted");
static_assert(offsetof(MarinerGameMode_ReactToPreRoundCountdownStarted, PreRoundCountdownEndTimeStamp) == 0x000000, "Member 'MarinerGameMode_ReactToPreRoundCountdownStarted::PreRoundCountdownEndTimeStamp' has a wrong offset!");

// Function Mariner.MarinerGameMode.SetAllowBots
// 0x000C (0x000C - 0x0000)
struct MarinerGameMode_SetAllowBots final
{
public:
	bool                                          bInAllowBots;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InMaxBots;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBotDifficultyLevel                           InBotDifficulty;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17AA[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGameMode_SetAllowBots) == 0x000004, "Wrong alignment on MarinerGameMode_SetAllowBots");
static_assert(sizeof(MarinerGameMode_SetAllowBots) == 0x00000C, "Wrong size on MarinerGameMode_SetAllowBots");
static_assert(offsetof(MarinerGameMode_SetAllowBots, bInAllowBots) == 0x000000, "Member 'MarinerGameMode_SetAllowBots::bInAllowBots' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_SetAllowBots, InMaxBots) == 0x000004, "Member 'MarinerGameMode_SetAllowBots::InMaxBots' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_SetAllowBots, InBotDifficulty) == 0x000008, "Member 'MarinerGameMode_SetAllowBots::InBotDifficulty' has a wrong offset!");

// Function Mariner.MarinerGameMode.ShouldDelayPawnSelectionUntilCharacterSelect
// 0x0018 (0x0018 - 0x0000)
struct MarinerGameMode_ShouldDelayPawnSelectionUntilCharacterSelect final
{
public:
	const class AMarinerGameState*                MarinerGameState;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerPlayerState*                    BotPlayerState;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17AB[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGameMode_ShouldDelayPawnSelectionUntilCharacterSelect) == 0x000008, "Wrong alignment on MarinerGameMode_ShouldDelayPawnSelectionUntilCharacterSelect");
static_assert(sizeof(MarinerGameMode_ShouldDelayPawnSelectionUntilCharacterSelect) == 0x000018, "Wrong size on MarinerGameMode_ShouldDelayPawnSelectionUntilCharacterSelect");
static_assert(offsetof(MarinerGameMode_ShouldDelayPawnSelectionUntilCharacterSelect, MarinerGameState) == 0x000000, "Member 'MarinerGameMode_ShouldDelayPawnSelectionUntilCharacterSelect::MarinerGameState' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_ShouldDelayPawnSelectionUntilCharacterSelect, BotPlayerState) == 0x000008, "Member 'MarinerGameMode_ShouldDelayPawnSelectionUntilCharacterSelect::BotPlayerState' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_ShouldDelayPawnSelectionUntilCharacterSelect, ReturnValue) == 0x000010, "Member 'MarinerGameMode_ShouldDelayPawnSelectionUntilCharacterSelect::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameMode.ChooseBestReturnRocketLaunchpad
// 0x0028 (0x0028 - 0x0000)
struct MarinerGameMode_ChooseBestReturnRocketLaunchpad final
{
public:
	const class AMarinerCharacter*                Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterTeamIndex;                                // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17AC[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMarinerReturnRocketLaunchpad*>  EligibleLaunchpads;                                // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AMarinerReturnRocketLaunchpad*          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_ChooseBestReturnRocketLaunchpad) == 0x000008, "Wrong alignment on MarinerGameMode_ChooseBestReturnRocketLaunchpad");
static_assert(sizeof(MarinerGameMode_ChooseBestReturnRocketLaunchpad) == 0x000028, "Wrong size on MarinerGameMode_ChooseBestReturnRocketLaunchpad");
static_assert(offsetof(MarinerGameMode_ChooseBestReturnRocketLaunchpad, Character) == 0x000000, "Member 'MarinerGameMode_ChooseBestReturnRocketLaunchpad::Character' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_ChooseBestReturnRocketLaunchpad, CharacterTeamIndex) == 0x000008, "Member 'MarinerGameMode_ChooseBestReturnRocketLaunchpad::CharacterTeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_ChooseBestReturnRocketLaunchpad, EligibleLaunchpads) == 0x000010, "Member 'MarinerGameMode_ChooseBestReturnRocketLaunchpad::EligibleLaunchpads' has a wrong offset!");
static_assert(offsetof(MarinerGameMode_ChooseBestReturnRocketLaunchpad, ReturnValue) == 0x000020, "Member 'MarinerGameMode_ChooseBestReturnRocketLaunchpad::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameMode.GetBotControllerClass
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameMode_GetBotControllerClass final
{
public:
	TSubclassOf<class AMarinerAIController>       ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_GetBotControllerClass) == 0x000008, "Wrong alignment on MarinerGameMode_GetBotControllerClass");
static_assert(sizeof(MarinerGameMode_GetBotControllerClass) == 0x000008, "Wrong size on MarinerGameMode_GetBotControllerClass");
static_assert(offsetof(MarinerGameMode_GetBotControllerClass, ReturnValue) == 0x000000, "Member 'MarinerGameMode_GetBotControllerClass::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameMode.GetBotManager
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameMode_GetBotManager final
{
public:
	class AMarinerBotManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_GetBotManager) == 0x000008, "Wrong alignment on MarinerGameMode_GetBotManager");
static_assert(sizeof(MarinerGameMode_GetBotManager) == 0x000008, "Wrong size on MarinerGameMode_GetBotManager");
static_assert(offsetof(MarinerGameMode_GetBotManager, ReturnValue) == 0x000000, "Member 'MarinerGameMode_GetBotManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameMode.GetRedundantElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameMode_GetRedundantElapsedTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_GetRedundantElapsedTime) == 0x000004, "Wrong alignment on MarinerGameMode_GetRedundantElapsedTime");
static_assert(sizeof(MarinerGameMode_GetRedundantElapsedTime) == 0x000004, "Wrong size on MarinerGameMode_GetRedundantElapsedTime");
static_assert(offsetof(MarinerGameMode_GetRedundantElapsedTime, ReturnValue) == 0x000000, "Member 'MarinerGameMode_GetRedundantElapsedTime::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameMode.IsMatchTied
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameMode_IsMatchTied final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_IsMatchTied) == 0x000001, "Wrong alignment on MarinerGameMode_IsMatchTied");
static_assert(sizeof(MarinerGameMode_IsMatchTied) == 0x000001, "Wrong size on MarinerGameMode_IsMatchTied");
static_assert(offsetof(MarinerGameMode_IsMatchTied, ReturnValue) == 0x000000, "Member 'MarinerGameMode_IsMatchTied::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameMode.ShouldExtendGameTimer
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameMode_ShouldExtendGameTimer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameMode_ShouldExtendGameTimer) == 0x000001, "Wrong alignment on MarinerGameMode_ShouldExtendGameTimer");
static_assert(sizeof(MarinerGameMode_ShouldExtendGameTimer) == 0x000001, "Wrong size on MarinerGameMode_ShouldExtendGameTimer");
static_assert(offsetof(MarinerGameMode_ShouldExtendGameTimer, ReturnValue) == 0x000000, "Member 'MarinerGameMode_ShouldExtendGameTimer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.GetTrophyType
// 0x0010 (0x0010 - 0x0000)
struct MarinerCollectionGameMode_GetTrophyType final
{
public:
	const class AMarinerCollectableObject*        CollectableObject;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerTrophyType                            OutTrophyType;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17B3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCollectionGameMode_GetTrophyType) == 0x000008, "Wrong alignment on MarinerCollectionGameMode_GetTrophyType");
static_assert(sizeof(MarinerCollectionGameMode_GetTrophyType) == 0x000010, "Wrong size on MarinerCollectionGameMode_GetTrophyType");
static_assert(offsetof(MarinerCollectionGameMode_GetTrophyType, CollectableObject) == 0x000000, "Member 'MarinerCollectionGameMode_GetTrophyType::CollectableObject' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_GetTrophyType, OutTrophyType) == 0x000008, "Member 'MarinerCollectionGameMode_GetTrophyType::OutTrophyType' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.IncrementsCharacterTrophyPointsAndCount
// 0x0010 (0x0010 - 0x0000)
struct MarinerCollectionGameMode_IncrementsCharacterTrophyPointsAndCount final
{
public:
	const class AMarinerCharacter*                PickedUpBy;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointsToAward;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17B4[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCollectionGameMode_IncrementsCharacterTrophyPointsAndCount) == 0x000008, "Wrong alignment on MarinerCollectionGameMode_IncrementsCharacterTrophyPointsAndCount");
static_assert(sizeof(MarinerCollectionGameMode_IncrementsCharacterTrophyPointsAndCount) == 0x000010, "Wrong size on MarinerCollectionGameMode_IncrementsCharacterTrophyPointsAndCount");
static_assert(offsetof(MarinerCollectionGameMode_IncrementsCharacterTrophyPointsAndCount, PickedUpBy) == 0x000000, "Member 'MarinerCollectionGameMode_IncrementsCharacterTrophyPointsAndCount::PickedUpBy' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_IncrementsCharacterTrophyPointsAndCount, PointsToAward) == 0x000008, "Member 'MarinerCollectionGameMode_IncrementsCharacterTrophyPointsAndCount::PointsToAward' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.IncrementsTeamTrophyPoints
// 0x0008 (0x0008 - 0x0000)
struct MarinerCollectionGameMode_IncrementsTeamTrophyPoints final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointsToAward;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_IncrementsTeamTrophyPoints) == 0x000004, "Wrong alignment on MarinerCollectionGameMode_IncrementsTeamTrophyPoints");
static_assert(sizeof(MarinerCollectionGameMode_IncrementsTeamTrophyPoints) == 0x000008, "Wrong size on MarinerCollectionGameMode_IncrementsTeamTrophyPoints");
static_assert(offsetof(MarinerCollectionGameMode_IncrementsTeamTrophyPoints, TeamIndex) == 0x000000, "Member 'MarinerCollectionGameMode_IncrementsTeamTrophyPoints::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_IncrementsTeamTrophyPoints, PointsToAward) == 0x000004, "Member 'MarinerCollectionGameMode_IncrementsTeamTrophyPoints::PointsToAward' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.MoveTrophyToOriginalSpawnLocation
// 0x0010 (0x0010 - 0x0000)
struct MarinerCollectionGameMode_MoveTrophyToOriginalSpawnLocation final
{
public:
	class AMarinerCollectableObject*              TrophyToTeleport;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17B5[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCollectionGameMode_MoveTrophyToOriginalSpawnLocation) == 0x000008, "Wrong alignment on MarinerCollectionGameMode_MoveTrophyToOriginalSpawnLocation");
static_assert(sizeof(MarinerCollectionGameMode_MoveTrophyToOriginalSpawnLocation) == 0x000010, "Wrong size on MarinerCollectionGameMode_MoveTrophyToOriginalSpawnLocation");
static_assert(offsetof(MarinerCollectionGameMode_MoveTrophyToOriginalSpawnLocation, TrophyToTeleport) == 0x000000, "Member 'MarinerCollectionGameMode_MoveTrophyToOriginalSpawnLocation::TrophyToTeleport' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_MoveTrophyToOriginalSpawnLocation, ReturnValue) == 0x000008, "Member 'MarinerCollectionGameMode_MoveTrophyToOriginalSpawnLocation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.OnAccumulatedDamageChange
// 0x0010 (0x0010 - 0x0000)
struct MarinerCollectionGameMode_OnAccumulatedDamageChange final
{
public:
	const class UMarinerDamageableComponent*      DamageableComponent;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewAccumulatedDamage;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldAccumulatedDamage;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_OnAccumulatedDamageChange) == 0x000008, "Wrong alignment on MarinerCollectionGameMode_OnAccumulatedDamageChange");
static_assert(sizeof(MarinerCollectionGameMode_OnAccumulatedDamageChange) == 0x000010, "Wrong size on MarinerCollectionGameMode_OnAccumulatedDamageChange");
static_assert(offsetof(MarinerCollectionGameMode_OnAccumulatedDamageChange, DamageableComponent) == 0x000000, "Member 'MarinerCollectionGameMode_OnAccumulatedDamageChange::DamageableComponent' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_OnAccumulatedDamageChange, NewAccumulatedDamage) == 0x000008, "Member 'MarinerCollectionGameMode_OnAccumulatedDamageChange::NewAccumulatedDamage' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_OnAccumulatedDamageChange, OldAccumulatedDamage) == 0x00000C, "Member 'MarinerCollectionGameMode_OnAccumulatedDamageChange::OldAccumulatedDamage' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.OnCharacterBeginDropPlayerTrophy
// 0x0008 (0x0008 - 0x0000)
struct MarinerCollectionGameMode_OnCharacterBeginDropPlayerTrophy final
{
public:
	const class UMarinerDamageableComponent*      DroppedByDamageComponent;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_OnCharacterBeginDropPlayerTrophy) == 0x000008, "Wrong alignment on MarinerCollectionGameMode_OnCharacterBeginDropPlayerTrophy");
static_assert(sizeof(MarinerCollectionGameMode_OnCharacterBeginDropPlayerTrophy) == 0x000008, "Wrong size on MarinerCollectionGameMode_OnCharacterBeginDropPlayerTrophy");
static_assert(offsetof(MarinerCollectionGameMode_OnCharacterBeginDropPlayerTrophy, DroppedByDamageComponent) == 0x000000, "Member 'MarinerCollectionGameMode_OnCharacterBeginDropPlayerTrophy::DroppedByDamageComponent' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.OnCollectableObjectOutOfBounds
// 0x0010 (0x0010 - 0x0000)
struct MarinerCollectionGameMode_OnCollectableObjectOutOfBounds final
{
public:
	const class AMarinerCollectableObject*        CollectableObject;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldDestroy;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17B6[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCollectionGameMode_OnCollectableObjectOutOfBounds) == 0x000008, "Wrong alignment on MarinerCollectionGameMode_OnCollectableObjectOutOfBounds");
static_assert(sizeof(MarinerCollectionGameMode_OnCollectableObjectOutOfBounds) == 0x000010, "Wrong size on MarinerCollectionGameMode_OnCollectableObjectOutOfBounds");
static_assert(offsetof(MarinerCollectionGameMode_OnCollectableObjectOutOfBounds, CollectableObject) == 0x000000, "Member 'MarinerCollectionGameMode_OnCollectableObjectOutOfBounds::CollectableObject' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_OnCollectableObjectOutOfBounds, bShouldDestroy) == 0x000008, "Member 'MarinerCollectionGameMode_OnCollectableObjectOutOfBounds::bShouldDestroy' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.OnCollectablePickedUp
// 0x0010 (0x0010 - 0x0000)
struct MarinerCollectionGameMode_OnCollectablePickedUp final
{
public:
	class AMarinerCharacter*                      PickedUpBy;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerCollectableObject*              CollectableObject;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_OnCollectablePickedUp) == 0x000008, "Wrong alignment on MarinerCollectionGameMode_OnCollectablePickedUp");
static_assert(sizeof(MarinerCollectionGameMode_OnCollectablePickedUp) == 0x000010, "Wrong size on MarinerCollectionGameMode_OnCollectablePickedUp");
static_assert(offsetof(MarinerCollectionGameMode_OnCollectablePickedUp, PickedUpBy) == 0x000000, "Member 'MarinerCollectionGameMode_OnCollectablePickedUp::PickedUpBy' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_OnCollectablePickedUp, CollectableObject) == 0x000008, "Member 'MarinerCollectionGameMode_OnCollectablePickedUp::CollectableObject' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.RespawnRocketTrophyFromOriginalSpawner
// 0x0018 (0x0018 - 0x0000)
struct MarinerCollectionGameMode_RespawnRocketTrophyFromOriginalSpawner final
{
public:
	float                                         TimeToSpawn;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17B7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCollectableObject*              TrophyToRespawn;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerRocketTrophySpawner*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_RespawnRocketTrophyFromOriginalSpawner) == 0x000008, "Wrong alignment on MarinerCollectionGameMode_RespawnRocketTrophyFromOriginalSpawner");
static_assert(sizeof(MarinerCollectionGameMode_RespawnRocketTrophyFromOriginalSpawner) == 0x000018, "Wrong size on MarinerCollectionGameMode_RespawnRocketTrophyFromOriginalSpawner");
static_assert(offsetof(MarinerCollectionGameMode_RespawnRocketTrophyFromOriginalSpawner, TimeToSpawn) == 0x000000, "Member 'MarinerCollectionGameMode_RespawnRocketTrophyFromOriginalSpawner::TimeToSpawn' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_RespawnRocketTrophyFromOriginalSpawner, TrophyToRespawn) == 0x000008, "Member 'MarinerCollectionGameMode_RespawnRocketTrophyFromOriginalSpawner::TrophyToRespawn' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_RespawnRocketTrophyFromOriginalSpawner, ReturnValue) == 0x000010, "Member 'MarinerCollectionGameMode_RespawnRocketTrophyFromOriginalSpawner::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.SetPlayerTrophyBlastability
// 0x0004 (0x0004 - 0x0000)
struct MarinerCollectionGameMode_SetPlayerTrophyBlastability final
{
public:
	float                                         InPlayerTrophyBlastability;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_SetPlayerTrophyBlastability) == 0x000004, "Wrong alignment on MarinerCollectionGameMode_SetPlayerTrophyBlastability");
static_assert(sizeof(MarinerCollectionGameMode_SetPlayerTrophyBlastability) == 0x000004, "Wrong size on MarinerCollectionGameMode_SetPlayerTrophyBlastability");
static_assert(offsetof(MarinerCollectionGameMode_SetPlayerTrophyBlastability, InPlayerTrophyBlastability) == 0x000000, "Member 'MarinerCollectionGameMode_SetPlayerTrophyBlastability::InPlayerTrophyBlastability' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.SetPlayerTrophyBounceDirectionMode
// 0x0001 (0x0001 - 0x0000)
struct MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionMode final
{
public:
	EPlayerTrophyBounceDirectionMode              InPlayerTrophyBounceDirectionMode;                 // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionMode) == 0x000001, "Wrong alignment on MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionMode");
static_assert(sizeof(MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionMode) == 0x000001, "Wrong size on MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionMode");
static_assert(offsetof(MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionMode, InPlayerTrophyBounceDirectionMode) == 0x000000, "Member 'MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionMode::InPlayerTrophyBounceDirectionMode' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.SetPlayerTrophyBounceDirectionOverride
// 0x000C (0x000C - 0x0000)
struct MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionOverride final
{
public:
	struct FVector                                InPlayerTrophyBounceDirectionOverride;             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionOverride) == 0x000004, "Wrong alignment on MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionOverride");
static_assert(sizeof(MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionOverride) == 0x00000C, "Wrong size on MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionOverride");
static_assert(offsetof(MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionOverride, InPlayerTrophyBounceDirectionOverride) == 0x000000, "Member 'MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionOverride::InPlayerTrophyBounceDirectionOverride' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.SetPlayerTrophyBounceOrigin
// 0x000C (0x000C - 0x0000)
struct MarinerCollectionGameMode_SetPlayerTrophyBounceOrigin final
{
public:
	struct FVector                                InPlayerTrophyBounceOrigin;                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_SetPlayerTrophyBounceOrigin) == 0x000004, "Wrong alignment on MarinerCollectionGameMode_SetPlayerTrophyBounceOrigin");
static_assert(sizeof(MarinerCollectionGameMode_SetPlayerTrophyBounceOrigin) == 0x00000C, "Wrong size on MarinerCollectionGameMode_SetPlayerTrophyBounceOrigin");
static_assert(offsetof(MarinerCollectionGameMode_SetPlayerTrophyBounceOrigin, InPlayerTrophyBounceOrigin) == 0x000000, "Member 'MarinerCollectionGameMode_SetPlayerTrophyBounceOrigin::InPlayerTrophyBounceOrigin' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.SetPlayerTrophyBouncePitch
// 0x0004 (0x0004 - 0x0000)
struct MarinerCollectionGameMode_SetPlayerTrophyBouncePitch final
{
public:
	float                                         InPitch;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_SetPlayerTrophyBouncePitch) == 0x000004, "Wrong alignment on MarinerCollectionGameMode_SetPlayerTrophyBouncePitch");
static_assert(sizeof(MarinerCollectionGameMode_SetPlayerTrophyBouncePitch) == 0x000004, "Wrong size on MarinerCollectionGameMode_SetPlayerTrophyBouncePitch");
static_assert(offsetof(MarinerCollectionGameMode_SetPlayerTrophyBouncePitch, InPitch) == 0x000000, "Member 'MarinerCollectionGameMode_SetPlayerTrophyBouncePitch::InPitch' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.SetTrophyHuntMaxScore
// 0x0004 (0x0004 - 0x0000)
struct MarinerCollectionGameMode_SetTrophyHuntMaxScore final
{
public:
	int32                                         InTrophyHuntMaxScore;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_SetTrophyHuntMaxScore) == 0x000004, "Wrong alignment on MarinerCollectionGameMode_SetTrophyHuntMaxScore");
static_assert(sizeof(MarinerCollectionGameMode_SetTrophyHuntMaxScore) == 0x000004, "Wrong size on MarinerCollectionGameMode_SetTrophyHuntMaxScore");
static_assert(offsetof(MarinerCollectionGameMode_SetTrophyHuntMaxScore, InTrophyHuntMaxScore) == 0x000000, "Member 'MarinerCollectionGameMode_SetTrophyHuntMaxScore::InTrophyHuntMaxScore' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.SpawnPlayerTrophy
// 0x0018 (0x0018 - 0x0000)
struct MarinerCollectionGameMode_SpawnPlayerTrophy final
{
public:
	class AMarinerCharacter*                      DamagedCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DropDirection;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17B8[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCollectionGameMode_SpawnPlayerTrophy) == 0x000008, "Wrong alignment on MarinerCollectionGameMode_SpawnPlayerTrophy");
static_assert(sizeof(MarinerCollectionGameMode_SpawnPlayerTrophy) == 0x000018, "Wrong size on MarinerCollectionGameMode_SpawnPlayerTrophy");
static_assert(offsetof(MarinerCollectionGameMode_SpawnPlayerTrophy, DamagedCharacter) == 0x000000, "Member 'MarinerCollectionGameMode_SpawnPlayerTrophy::DamagedCharacter' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_SpawnPlayerTrophy, DropDirection) == 0x000008, "Member 'MarinerCollectionGameMode_SpawnPlayerTrophy::DropDirection' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.SpawnRocketTrophy
// 0x0010 (0x0010 - 0x0000)
struct MarinerCollectionGameMode_SpawnRocketTrophy final
{
public:
	float                                         TimeToSpawn;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17B9[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerRocketTrophySpawner*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_SpawnRocketTrophy) == 0x000008, "Wrong alignment on MarinerCollectionGameMode_SpawnRocketTrophy");
static_assert(sizeof(MarinerCollectionGameMode_SpawnRocketTrophy) == 0x000010, "Wrong size on MarinerCollectionGameMode_SpawnRocketTrophy");
static_assert(offsetof(MarinerCollectionGameMode_SpawnRocketTrophy, TimeToSpawn) == 0x000000, "Member 'MarinerCollectionGameMode_SpawnRocketTrophy::TimeToSpawn' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_SpawnRocketTrophy, ReturnValue) == 0x000008, "Member 'MarinerCollectionGameMode_SpawnRocketTrophy::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.SpawnRocketTrophyUsingSpawnerID
// 0x0010 (0x0010 - 0x0000)
struct MarinerCollectionGameMode_SpawnRocketTrophyUsingSpawnerID final
{
public:
	float                                         TimeToSpawn;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnerID;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerRocketTrophySpawner*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_SpawnRocketTrophyUsingSpawnerID) == 0x000008, "Wrong alignment on MarinerCollectionGameMode_SpawnRocketTrophyUsingSpawnerID");
static_assert(sizeof(MarinerCollectionGameMode_SpawnRocketTrophyUsingSpawnerID) == 0x000010, "Wrong size on MarinerCollectionGameMode_SpawnRocketTrophyUsingSpawnerID");
static_assert(offsetof(MarinerCollectionGameMode_SpawnRocketTrophyUsingSpawnerID, TimeToSpawn) == 0x000000, "Member 'MarinerCollectionGameMode_SpawnRocketTrophyUsingSpawnerID::TimeToSpawn' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_SpawnRocketTrophyUsingSpawnerID, SpawnerID) == 0x000004, "Member 'MarinerCollectionGameMode_SpawnRocketTrophyUsingSpawnerID::SpawnerID' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_SpawnRocketTrophyUsingSpawnerID, ReturnValue) == 0x000008, "Member 'MarinerCollectionGameMode_SpawnRocketTrophyUsingSpawnerID::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.SpawnRocketTrophyUsingSpecificSpawner
// 0x0018 (0x0018 - 0x0000)
struct MarinerCollectionGameMode_SpawnRocketTrophyUsingSpecificSpawner final
{
public:
	float                                         TimeToSpawn;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17BA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerRocketTrophySpawner*            SpecificSpawner;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerRocketTrophySpawner*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_SpawnRocketTrophyUsingSpecificSpawner) == 0x000008, "Wrong alignment on MarinerCollectionGameMode_SpawnRocketTrophyUsingSpecificSpawner");
static_assert(sizeof(MarinerCollectionGameMode_SpawnRocketTrophyUsingSpecificSpawner) == 0x000018, "Wrong size on MarinerCollectionGameMode_SpawnRocketTrophyUsingSpecificSpawner");
static_assert(offsetof(MarinerCollectionGameMode_SpawnRocketTrophyUsingSpecificSpawner, TimeToSpawn) == 0x000000, "Member 'MarinerCollectionGameMode_SpawnRocketTrophyUsingSpecificSpawner::TimeToSpawn' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_SpawnRocketTrophyUsingSpecificSpawner, SpecificSpawner) == 0x000008, "Member 'MarinerCollectionGameMode_SpawnRocketTrophyUsingSpecificSpawner::SpecificSpawner' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_SpawnRocketTrophyUsingSpecificSpawner, ReturnValue) == 0x000010, "Member 'MarinerCollectionGameMode_SpawnRocketTrophyUsingSpecificSpawner::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.AreAvailableSpawners
// 0x0001 (0x0001 - 0x0000)
struct MarinerCollectionGameMode_AreAvailableSpawners final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_AreAvailableSpawners) == 0x000001, "Wrong alignment on MarinerCollectionGameMode_AreAvailableSpawners");
static_assert(sizeof(MarinerCollectionGameMode_AreAvailableSpawners) == 0x000001, "Wrong size on MarinerCollectionGameMode_AreAvailableSpawners");
static_assert(offsetof(MarinerCollectionGameMode_AreAvailableSpawners, ReturnValue) == 0x000000, "Member 'MarinerCollectionGameMode_AreAvailableSpawners::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.GetActiveRocketTrophySpawnerCount
// 0x0004 (0x0004 - 0x0000)
struct MarinerCollectionGameMode_GetActiveRocketTrophySpawnerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_GetActiveRocketTrophySpawnerCount) == 0x000004, "Wrong alignment on MarinerCollectionGameMode_GetActiveRocketTrophySpawnerCount");
static_assert(sizeof(MarinerCollectionGameMode_GetActiveRocketTrophySpawnerCount) == 0x000004, "Wrong size on MarinerCollectionGameMode_GetActiveRocketTrophySpawnerCount");
static_assert(offsetof(MarinerCollectionGameMode_GetActiveRocketTrophySpawnerCount, ReturnValue) == 0x000000, "Member 'MarinerCollectionGameMode_GetActiveRocketTrophySpawnerCount::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.GetEnemyPlayerTrophyValue
// 0x0004 (0x0004 - 0x0000)
struct MarinerCollectionGameMode_GetEnemyPlayerTrophyValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_GetEnemyPlayerTrophyValue) == 0x000004, "Wrong alignment on MarinerCollectionGameMode_GetEnemyPlayerTrophyValue");
static_assert(sizeof(MarinerCollectionGameMode_GetEnemyPlayerTrophyValue) == 0x000004, "Wrong size on MarinerCollectionGameMode_GetEnemyPlayerTrophyValue");
static_assert(offsetof(MarinerCollectionGameMode_GetEnemyPlayerTrophyValue, ReturnValue) == 0x000000, "Member 'MarinerCollectionGameMode_GetEnemyPlayerTrophyValue::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.GetFriendPlayerTrophyValue
// 0x0004 (0x0004 - 0x0000)
struct MarinerCollectionGameMode_GetFriendPlayerTrophyValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_GetFriendPlayerTrophyValue) == 0x000004, "Wrong alignment on MarinerCollectionGameMode_GetFriendPlayerTrophyValue");
static_assert(sizeof(MarinerCollectionGameMode_GetFriendPlayerTrophyValue) == 0x000004, "Wrong size on MarinerCollectionGameMode_GetFriendPlayerTrophyValue");
static_assert(offsetof(MarinerCollectionGameMode_GetFriendPlayerTrophyValue, ReturnValue) == 0x000000, "Member 'MarinerCollectionGameMode_GetFriendPlayerTrophyValue::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.GetQueuedRocketTrophySpawnCount
// 0x0004 (0x0004 - 0x0000)
struct MarinerCollectionGameMode_GetQueuedRocketTrophySpawnCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_GetQueuedRocketTrophySpawnCount) == 0x000004, "Wrong alignment on MarinerCollectionGameMode_GetQueuedRocketTrophySpawnCount");
static_assert(sizeof(MarinerCollectionGameMode_GetQueuedRocketTrophySpawnCount) == 0x000004, "Wrong size on MarinerCollectionGameMode_GetQueuedRocketTrophySpawnCount");
static_assert(offsetof(MarinerCollectionGameMode_GetQueuedRocketTrophySpawnCount, ReturnValue) == 0x000000, "Member 'MarinerCollectionGameMode_GetQueuedRocketTrophySpawnCount::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.GetRocketTrophiesInCirculation
// 0x0004 (0x0004 - 0x0000)
struct MarinerCollectionGameMode_GetRocketTrophiesInCirculation final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_GetRocketTrophiesInCirculation) == 0x000004, "Wrong alignment on MarinerCollectionGameMode_GetRocketTrophiesInCirculation");
static_assert(sizeof(MarinerCollectionGameMode_GetRocketTrophiesInCirculation) == 0x000004, "Wrong size on MarinerCollectionGameMode_GetRocketTrophiesInCirculation");
static_assert(offsetof(MarinerCollectionGameMode_GetRocketTrophiesInCirculation, ReturnValue) == 0x000000, "Member 'MarinerCollectionGameMode_GetRocketTrophiesInCirculation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.GetRocketTrophyValue
// 0x0004 (0x0004 - 0x0000)
struct MarinerCollectionGameMode_GetRocketTrophyValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_GetRocketTrophyValue) == 0x000004, "Wrong alignment on MarinerCollectionGameMode_GetRocketTrophyValue");
static_assert(sizeof(MarinerCollectionGameMode_GetRocketTrophyValue) == 0x000004, "Wrong size on MarinerCollectionGameMode_GetRocketTrophyValue");
static_assert(offsetof(MarinerCollectionGameMode_GetRocketTrophyValue, ReturnValue) == 0x000000, "Member 'MarinerCollectionGameMode_GetRocketTrophyValue::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.GetTrophyRewardPoints
// 0x0018 (0x0018 - 0x0000)
struct MarinerCollectionGameMode_GetTrophyRewardPoints final
{
public:
	const class AMarinerCharacter*                PickedUpBy;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerCollectableObject*              CollectableObject;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17BB[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCollectionGameMode_GetTrophyRewardPoints) == 0x000008, "Wrong alignment on MarinerCollectionGameMode_GetTrophyRewardPoints");
static_assert(sizeof(MarinerCollectionGameMode_GetTrophyRewardPoints) == 0x000018, "Wrong size on MarinerCollectionGameMode_GetTrophyRewardPoints");
static_assert(offsetof(MarinerCollectionGameMode_GetTrophyRewardPoints, PickedUpBy) == 0x000000, "Member 'MarinerCollectionGameMode_GetTrophyRewardPoints::PickedUpBy' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_GetTrophyRewardPoints, CollectableObject) == 0x000008, "Member 'MarinerCollectionGameMode_GetTrophyRewardPoints::CollectableObject' has a wrong offset!");
static_assert(offsetof(MarinerCollectionGameMode_GetTrophyRewardPoints, ReturnValue) == 0x000010, "Member 'MarinerCollectionGameMode_GetTrophyRewardPoints::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCollectionGameMode.GetTrophySpawnersCount
// 0x0004 (0x0004 - 0x0000)
struct MarinerCollectionGameMode_GetTrophySpawnersCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCollectionGameMode_GetTrophySpawnersCount) == 0x000004, "Wrong alignment on MarinerCollectionGameMode_GetTrophySpawnersCount");
static_assert(sizeof(MarinerCollectionGameMode_GetTrophySpawnersCount) == 0x000004, "Wrong size on MarinerCollectionGameMode_GetTrophySpawnersCount");
static_assert(offsetof(MarinerCollectionGameMode_GetTrophySpawnersCount, ReturnValue) == 0x000000, "Member 'MarinerCollectionGameMode_GetTrophySpawnersCount::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerComboBoxString.SelectionChanged
// 0x0018 (0x0018 - 0x0000)
struct MarinerComboBoxString_SelectionChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17BF[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerComboBoxString_SelectionChanged) == 0x000008, "Wrong alignment on MarinerComboBoxString_SelectionChanged");
static_assert(sizeof(MarinerComboBoxString_SelectionChanged) == 0x000018, "Wrong size on MarinerComboBoxString_SelectionChanged");
static_assert(offsetof(MarinerComboBoxString_SelectionChanged, SelectedItem) == 0x000000, "Member 'MarinerComboBoxString_SelectionChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(MarinerComboBoxString_SelectionChanged, SelectionType) == 0x000010, "Member 'MarinerComboBoxString_SelectionChanged::SelectionType' has a wrong offset!");

// Function Mariner.MarinerComboBoxString.SetHeaderHighlightState
// 0x0001 (0x0001 - 0x0000)
struct MarinerComboBoxString_SetHeaderHighlightState final
{
public:
	bool                                          bHighlighted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerComboBoxString_SetHeaderHighlightState) == 0x000001, "Wrong alignment on MarinerComboBoxString_SetHeaderHighlightState");
static_assert(sizeof(MarinerComboBoxString_SetHeaderHighlightState) == 0x000001, "Wrong size on MarinerComboBoxString_SetHeaderHighlightState");
static_assert(offsetof(MarinerComboBoxString_SetHeaderHighlightState, bHighlighted) == 0x000000, "Member 'MarinerComboBoxString_SetHeaderHighlightState::bHighlighted' has a wrong offset!");

// Function Mariner.MarinerComboBoxString.SetHightlightedOptionViaIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerComboBoxString_SetHightlightedOptionViaIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerComboBoxString_SetHightlightedOptionViaIndex) == 0x000004, "Wrong alignment on MarinerComboBoxString_SetHightlightedOptionViaIndex");
static_assert(sizeof(MarinerComboBoxString_SetHightlightedOptionViaIndex) == 0x000004, "Wrong size on MarinerComboBoxString_SetHightlightedOptionViaIndex");
static_assert(offsetof(MarinerComboBoxString_SetHightlightedOptionViaIndex, Param_Index) == 0x000000, "Member 'MarinerComboBoxString_SetHightlightedOptionViaIndex::Param_Index' has a wrong offset!");

// Function Mariner.MarinerComboBoxString.SetIsOpen
// 0x0001 (0x0001 - 0x0000)
struct MarinerComboBoxString_SetIsOpen final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerComboBoxString_SetIsOpen) == 0x000001, "Wrong alignment on MarinerComboBoxString_SetIsOpen");
static_assert(sizeof(MarinerComboBoxString_SetIsOpen) == 0x000001, "Wrong size on MarinerComboBoxString_SetIsOpen");
static_assert(offsetof(MarinerComboBoxString_SetIsOpen, bOpen) == 0x000000, "Member 'MarinerComboBoxString_SetIsOpen::bOpen' has a wrong offset!");

// Function Mariner.MarinerComboBoxString.SetSelectedOptionViaIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerComboBoxString_SetSelectedOptionViaIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerComboBoxString_SetSelectedOptionViaIndex) == 0x000004, "Wrong alignment on MarinerComboBoxString_SetSelectedOptionViaIndex");
static_assert(sizeof(MarinerComboBoxString_SetSelectedOptionViaIndex) == 0x000004, "Wrong size on MarinerComboBoxString_SetSelectedOptionViaIndex");
static_assert(offsetof(MarinerComboBoxString_SetSelectedOptionViaIndex, Param_Index) == 0x000000, "Member 'MarinerComboBoxString_SetSelectedOptionViaIndex::Param_Index' has a wrong offset!");

// Function Mariner.MarinerContentGrid.GetHighlightedItem
// 0x0008 (0x0008 - 0x0000)
struct MarinerContentGrid_GetHighlightedItem final
{
public:
	class UMarinerLayeredButton*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerContentGrid_GetHighlightedItem) == 0x000008, "Wrong alignment on MarinerContentGrid_GetHighlightedItem");
static_assert(sizeof(MarinerContentGrid_GetHighlightedItem) == 0x000008, "Wrong size on MarinerContentGrid_GetHighlightedItem");
static_assert(offsetof(MarinerContentGrid_GetHighlightedItem, ReturnValue) == 0x000000, "Member 'MarinerContentGrid_GetHighlightedItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerContentGrid.HighlightItem
// 0x0018 (0x0018 - 0x0000)
struct MarinerContentGrid_HighlightItem final
{
public:
	class FString                                 LookupId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerLayeredButton*                  ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerContentGrid_HighlightItem) == 0x000008, "Wrong alignment on MarinerContentGrid_HighlightItem");
static_assert(sizeof(MarinerContentGrid_HighlightItem) == 0x000018, "Wrong size on MarinerContentGrid_HighlightItem");
static_assert(offsetof(MarinerContentGrid_HighlightItem, LookupId) == 0x000000, "Member 'MarinerContentGrid_HighlightItem::LookupId' has a wrong offset!");
static_assert(offsetof(MarinerContentGrid_HighlightItem, ReturnValue) == 0x000010, "Member 'MarinerContentGrid_HighlightItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerContentGrid.InitCharacterContentGrid
// 0x0048 (0x0048 - 0x0000)
struct MarinerContentGrid_InitCharacterContentGrid final
{
public:
	TArray<class UMarinerPlayableCharacter*>      LoadedItems;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerLayeredButton>      LayeredButtonSubclass;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UMarinerPlayableCharacter* Character)> OnCharacterAddedToGrid;                            // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   Header;                                            // 0x0028(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         InNumColumns;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillEmpty;                                        // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerContentGridType                       InContentType;                                     // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C2[0x2];                                     // 0x0046(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerContentGrid_InitCharacterContentGrid) == 0x000008, "Wrong alignment on MarinerContentGrid_InitCharacterContentGrid");
static_assert(sizeof(MarinerContentGrid_InitCharacterContentGrid) == 0x000048, "Wrong size on MarinerContentGrid_InitCharacterContentGrid");
static_assert(offsetof(MarinerContentGrid_InitCharacterContentGrid, LoadedItems) == 0x000000, "Member 'MarinerContentGrid_InitCharacterContentGrid::LoadedItems' has a wrong offset!");
static_assert(offsetof(MarinerContentGrid_InitCharacterContentGrid, LayeredButtonSubclass) == 0x000010, "Member 'MarinerContentGrid_InitCharacterContentGrid::LayeredButtonSubclass' has a wrong offset!");
static_assert(offsetof(MarinerContentGrid_InitCharacterContentGrid, OnCharacterAddedToGrid) == 0x000018, "Member 'MarinerContentGrid_InitCharacterContentGrid::OnCharacterAddedToGrid' has a wrong offset!");
static_assert(offsetof(MarinerContentGrid_InitCharacterContentGrid, Header) == 0x000028, "Member 'MarinerContentGrid_InitCharacterContentGrid::Header' has a wrong offset!");
static_assert(offsetof(MarinerContentGrid_InitCharacterContentGrid, InNumColumns) == 0x000040, "Member 'MarinerContentGrid_InitCharacterContentGrid::InNumColumns' has a wrong offset!");
static_assert(offsetof(MarinerContentGrid_InitCharacterContentGrid, bFillEmpty) == 0x000044, "Member 'MarinerContentGrid_InitCharacterContentGrid::bFillEmpty' has a wrong offset!");
static_assert(offsetof(MarinerContentGrid_InitCharacterContentGrid, InContentType) == 0x000045, "Member 'MarinerContentGrid_InitCharacterContentGrid::InContentType' has a wrong offset!");

// Function Mariner.MarinerContentGrid.InitEmptyContentGrid
// 0x0010 (0x0010 - 0x0000)
struct MarinerContentGrid_InitEmptyContentGrid final
{
public:
	int32                                         InNumColumns;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNumRow;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEmptyItemWidth;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InEmptyItemHeight;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerContentGrid_InitEmptyContentGrid) == 0x000004, "Wrong alignment on MarinerContentGrid_InitEmptyContentGrid");
static_assert(sizeof(MarinerContentGrid_InitEmptyContentGrid) == 0x000010, "Wrong size on MarinerContentGrid_InitEmptyContentGrid");
static_assert(offsetof(MarinerContentGrid_InitEmptyContentGrid, InNumColumns) == 0x000000, "Member 'MarinerContentGrid_InitEmptyContentGrid::InNumColumns' has a wrong offset!");
static_assert(offsetof(MarinerContentGrid_InitEmptyContentGrid, InNumRow) == 0x000004, "Member 'MarinerContentGrid_InitEmptyContentGrid::InNumRow' has a wrong offset!");
static_assert(offsetof(MarinerContentGrid_InitEmptyContentGrid, InEmptyItemWidth) == 0x000008, "Member 'MarinerContentGrid_InitEmptyContentGrid::InEmptyItemWidth' has a wrong offset!");
static_assert(offsetof(MarinerContentGrid_InitEmptyContentGrid, InEmptyItemHeight) == 0x00000C, "Member 'MarinerContentGrid_InitEmptyContentGrid::InEmptyItemHeight' has a wrong offset!");

// Function Mariner.MarinerContentGrid.InitItemsContentGrid
// 0x0048 (0x0048 - 0x0000)
struct MarinerContentGrid_InitItemsContentGrid final
{
public:
	TArray<class UItemLoadResponse*>              LoadedItems;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerLayeredButton>      LayeredButtonSubclass;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UItemLoadResponse* Item, bool bRanked)> OnItemAddedToGrid;                                 // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   Header;                                            // 0x0028(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         InNumColumns;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillEmpty;                                        // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C3[0x3];                                     // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerContentGrid_InitItemsContentGrid) == 0x000008, "Wrong alignment on MarinerContentGrid_InitItemsContentGrid");
static_assert(sizeof(MarinerContentGrid_InitItemsContentGrid) == 0x000048, "Wrong size on MarinerContentGrid_InitItemsContentGrid");
static_assert(offsetof(MarinerContentGrid_InitItemsContentGrid, LoadedItems) == 0x000000, "Member 'MarinerContentGrid_InitItemsContentGrid::LoadedItems' has a wrong offset!");
static_assert(offsetof(MarinerContentGrid_InitItemsContentGrid, LayeredButtonSubclass) == 0x000010, "Member 'MarinerContentGrid_InitItemsContentGrid::LayeredButtonSubclass' has a wrong offset!");
static_assert(offsetof(MarinerContentGrid_InitItemsContentGrid, OnItemAddedToGrid) == 0x000018, "Member 'MarinerContentGrid_InitItemsContentGrid::OnItemAddedToGrid' has a wrong offset!");
static_assert(offsetof(MarinerContentGrid_InitItemsContentGrid, Header) == 0x000028, "Member 'MarinerContentGrid_InitItemsContentGrid::Header' has a wrong offset!");
static_assert(offsetof(MarinerContentGrid_InitItemsContentGrid, InNumColumns) == 0x000040, "Member 'MarinerContentGrid_InitItemsContentGrid::InNumColumns' has a wrong offset!");
static_assert(offsetof(MarinerContentGrid_InitItemsContentGrid, bFillEmpty) == 0x000044, "Member 'MarinerContentGrid_InitItemsContentGrid::bFillEmpty' has a wrong offset!");

// Function Mariner.MarinerCosmeticReactiveProp.ReactToDamage
// 0x0018 (0x0018 - 0x0000)
struct MarinerCosmeticReactiveProp_ReactToDamage final
{
public:
	struct FVector                                DamageOrigin;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageDirection;                                   // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCosmeticReactiveProp_ReactToDamage) == 0x000004, "Wrong alignment on MarinerCosmeticReactiveProp_ReactToDamage");
static_assert(sizeof(MarinerCosmeticReactiveProp_ReactToDamage) == 0x000018, "Wrong size on MarinerCosmeticReactiveProp_ReactToDamage");
static_assert(offsetof(MarinerCosmeticReactiveProp_ReactToDamage, DamageOrigin) == 0x000000, "Member 'MarinerCosmeticReactiveProp_ReactToDamage::DamageOrigin' has a wrong offset!");
static_assert(offsetof(MarinerCosmeticReactiveProp_ReactToDamage, DamageDirection) == 0x00000C, "Member 'MarinerCosmeticReactiveProp_ReactToDamage::DamageDirection' has a wrong offset!");

// Function Mariner.MarinerCosmeticReactiveProp.ReplicateDamageReaction
// 0x0018 (0x0018 - 0x0000)
struct MarinerCosmeticReactiveProp_ReplicateDamageReaction final
{
public:
	struct FVector                                DamageOrigin;                                      // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              DamageDirection;                                   // 0x000C(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCosmeticReactiveProp_ReplicateDamageReaction) == 0x000004, "Wrong alignment on MarinerCosmeticReactiveProp_ReplicateDamageReaction");
static_assert(sizeof(MarinerCosmeticReactiveProp_ReplicateDamageReaction) == 0x000018, "Wrong size on MarinerCosmeticReactiveProp_ReplicateDamageReaction");
static_assert(offsetof(MarinerCosmeticReactiveProp_ReplicateDamageReaction, DamageOrigin) == 0x000000, "Member 'MarinerCosmeticReactiveProp_ReplicateDamageReaction::DamageOrigin' has a wrong offset!");
static_assert(offsetof(MarinerCosmeticReactiveProp_ReplicateDamageReaction, DamageDirection) == 0x00000C, "Member 'MarinerCosmeticReactiveProp_ReplicateDamageReaction::DamageDirection' has a wrong offset!");

// Function Mariner.MarinerInGamePauseMenu.EndMatchConfirm
// 0x0018 (0x0018 - 0x0000)
struct MarinerInGamePauseMenu_EndMatchConfirm final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInGamePauseMenu_EndMatchConfirm) == 0x000008, "Wrong alignment on MarinerInGamePauseMenu_EndMatchConfirm");
static_assert(sizeof(MarinerInGamePauseMenu_EndMatchConfirm) == 0x000018, "Wrong size on MarinerInGamePauseMenu_EndMatchConfirm");
static_assert(offsetof(MarinerInGamePauseMenu_EndMatchConfirm, KeyPressed) == 0x000000, "Member 'MarinerInGamePauseMenu_EndMatchConfirm::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerInGamePauseMenu.HandleQuitMatchButton
// 0x0004 (0x0004 - 0x0000)
struct MarinerInGamePauseMenu_HandleQuitMatchButton final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInGamePauseMenu_HandleQuitMatchButton) == 0x000004, "Wrong alignment on MarinerInGamePauseMenu_HandleQuitMatchButton");
static_assert(sizeof(MarinerInGamePauseMenu_HandleQuitMatchButton) == 0x000004, "Wrong size on MarinerInGamePauseMenu_HandleQuitMatchButton");
static_assert(offsetof(MarinerInGamePauseMenu_HandleQuitMatchButton, TeamIndex) == 0x000000, "Member 'MarinerInGamePauseMenu_HandleQuitMatchButton::TeamIndex' has a wrong offset!");

// Function Mariner.MarinerCueNotify_ManagedCharacterEffectBase.GetSpawnedCameraEffect
// 0x0008 (0x0008 - 0x0000)
struct MarinerCueNotify_ManagedCharacterEffectBase_GetSpawnedCameraEffect final
{
public:
	class AEmitterCameraLensEffectBase*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCueNotify_ManagedCharacterEffectBase_GetSpawnedCameraEffect) == 0x000008, "Wrong alignment on MarinerCueNotify_ManagedCharacterEffectBase_GetSpawnedCameraEffect");
static_assert(sizeof(MarinerCueNotify_ManagedCharacterEffectBase_GetSpawnedCameraEffect) == 0x000008, "Wrong size on MarinerCueNotify_ManagedCharacterEffectBase_GetSpawnedCameraEffect");
static_assert(offsetof(MarinerCueNotify_ManagedCharacterEffectBase_GetSpawnedCameraEffect, ReturnValue) == 0x000000, "Member 'MarinerCueNotify_ManagedCharacterEffectBase_GetSpawnedCameraEffect::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCueNotify_ManagedCharacterEffectBase.GetTargetCharacter
// 0x0008 (0x0008 - 0x0000)
struct MarinerCueNotify_ManagedCharacterEffectBase_GetTargetCharacter final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCueNotify_ManagedCharacterEffectBase_GetTargetCharacter) == 0x000008, "Wrong alignment on MarinerCueNotify_ManagedCharacterEffectBase_GetTargetCharacter");
static_assert(sizeof(MarinerCueNotify_ManagedCharacterEffectBase_GetTargetCharacter) == 0x000008, "Wrong size on MarinerCueNotify_ManagedCharacterEffectBase_GetTargetCharacter");
static_assert(offsetof(MarinerCueNotify_ManagedCharacterEffectBase_GetTargetCharacter, ReturnValue) == 0x000000, "Member 'MarinerCueNotify_ManagedCharacterEffectBase_GetTargetCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCueNotify_ManagedCharacterEffectBase.PostAkEvent
// 0x0010 (0x0010 - 0x0000)
struct MarinerCueNotify_ManagedCharacterEffectBase_PostAkEvent final
{
public:
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17CB[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCueNotify_ManagedCharacterEffectBase_PostAkEvent) == 0x000008, "Wrong alignment on MarinerCueNotify_ManagedCharacterEffectBase_PostAkEvent");
static_assert(sizeof(MarinerCueNotify_ManagedCharacterEffectBase_PostAkEvent) == 0x000010, "Wrong size on MarinerCueNotify_ManagedCharacterEffectBase_PostAkEvent");
static_assert(offsetof(MarinerCueNotify_ManagedCharacterEffectBase_PostAkEvent, AudioEvent) == 0x000000, "Member 'MarinerCueNotify_ManagedCharacterEffectBase_PostAkEvent::AudioEvent' has a wrong offset!");
static_assert(offsetof(MarinerCueNotify_ManagedCharacterEffectBase_PostAkEvent, ReturnValue) == 0x000008, "Member 'MarinerCueNotify_ManagedCharacterEffectBase_PostAkEvent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCueNotify_ManagedCharacterEffectBase.HasTargetCharacter
// 0x0001 (0x0001 - 0x0000)
struct MarinerCueNotify_ManagedCharacterEffectBase_HasTargetCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCueNotify_ManagedCharacterEffectBase_HasTargetCharacter) == 0x000001, "Wrong alignment on MarinerCueNotify_ManagedCharacterEffectBase_HasTargetCharacter");
static_assert(sizeof(MarinerCueNotify_ManagedCharacterEffectBase_HasTargetCharacter) == 0x000001, "Wrong size on MarinerCueNotify_ManagedCharacterEffectBase_HasTargetCharacter");
static_assert(offsetof(MarinerCueNotify_ManagedCharacterEffectBase_HasTargetCharacter, ReturnValue) == 0x000000, "Member 'MarinerCueNotify_ManagedCharacterEffectBase_HasTargetCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCueNotify_ManagedCharacterEffectBase.IsFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct MarinerCueNotify_ManagedCharacterEffectBase_IsFirstPerson final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCueNotify_ManagedCharacterEffectBase_IsFirstPerson) == 0x000001, "Wrong alignment on MarinerCueNotify_ManagedCharacterEffectBase_IsFirstPerson");
static_assert(sizeof(MarinerCueNotify_ManagedCharacterEffectBase_IsFirstPerson) == 0x000001, "Wrong size on MarinerCueNotify_ManagedCharacterEffectBase_IsFirstPerson");
static_assert(offsetof(MarinerCueNotify_ManagedCharacterEffectBase_IsFirstPerson, ReturnValue) == 0x000000, "Member 'MarinerCueNotify_ManagedCharacterEffectBase_IsFirstPerson::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputOverlay.OnAnalogNavigation
// 0x0002 (0x0002 - 0x0000)
struct MarinerInputOverlay_OnAnalogNavigation final
{
public:
	EMarinerInputActions                          InAction;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRepeat;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputOverlay_OnAnalogNavigation) == 0x000001, "Wrong alignment on MarinerInputOverlay_OnAnalogNavigation");
static_assert(sizeof(MarinerInputOverlay_OnAnalogNavigation) == 0x000002, "Wrong size on MarinerInputOverlay_OnAnalogNavigation");
static_assert(offsetof(MarinerInputOverlay_OnAnalogNavigation, InAction) == 0x000000, "Member 'MarinerInputOverlay_OnAnalogNavigation::InAction' has a wrong offset!");
static_assert(offsetof(MarinerInputOverlay_OnAnalogNavigation, bIsRepeat) == 0x000001, "Member 'MarinerInputOverlay_OnAnalogNavigation::bIsRepeat' has a wrong offset!");

// Function Mariner.MarinerInputOverlay.GetActiveInputType
// 0x0001 (0x0001 - 0x0000)
struct MarinerInputOverlay_GetActiveInputType final
{
public:
	EPlayerInputType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputOverlay_GetActiveInputType) == 0x000001, "Wrong alignment on MarinerInputOverlay_GetActiveInputType");
static_assert(sizeof(MarinerInputOverlay_GetActiveInputType) == 0x000001, "Wrong size on MarinerInputOverlay_GetActiveInputType");
static_assert(offsetof(MarinerInputOverlay_GetActiveInputType, ReturnValue) == 0x000000, "Member 'MarinerInputOverlay_GetActiveInputType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputOverlay.GetLastActiveGamepadType
// 0x0001 (0x0001 - 0x0000)
struct MarinerInputOverlay_GetLastActiveGamepadType final
{
public:
	EPlayerInputType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputOverlay_GetLastActiveGamepadType) == 0x000001, "Wrong alignment on MarinerInputOverlay_GetLastActiveGamepadType");
static_assert(sizeof(MarinerInputOverlay_GetLastActiveGamepadType) == 0x000001, "Wrong size on MarinerInputOverlay_GetLastActiveGamepadType");
static_assert(offsetof(MarinerInputOverlay_GetLastActiveGamepadType, ReturnValue) == 0x000000, "Member 'MarinerInputOverlay_GetLastActiveGamepadType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputOverlay.IsGamepadConnected
// 0x0001 (0x0001 - 0x0000)
struct MarinerInputOverlay_IsGamepadConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputOverlay_IsGamepadConnected) == 0x000001, "Wrong alignment on MarinerInputOverlay_IsGamepadConnected");
static_assert(sizeof(MarinerInputOverlay_IsGamepadConnected) == 0x000001, "Wrong size on MarinerInputOverlay_IsGamepadConnected");
static_assert(offsetof(MarinerInputOverlay_IsGamepadConnected, ReturnValue) == 0x000000, "Member 'MarinerInputOverlay_IsGamepadConnected::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCueNotify_ManagedCharacterEffectSequence.OnParticleInFinished
// 0x0008 (0x0008 - 0x0000)
struct MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleInFinished final
{
public:
	class UParticleSystemComponent*               FinishedComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleInFinished) == 0x000008, "Wrong alignment on MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleInFinished");
static_assert(sizeof(MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleInFinished) == 0x000008, "Wrong size on MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleInFinished");
static_assert(offsetof(MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleInFinished, FinishedComponent) == 0x000000, "Member 'MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleInFinished::FinishedComponent' has a wrong offset!");

// Function Mariner.MarinerCueNotify_ManagedCharacterEffectSequence.OnParticleOutFinished
// 0x0008 (0x0008 - 0x0000)
struct MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleOutFinished final
{
public:
	class UParticleSystemComponent*               FinishedComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleOutFinished) == 0x000008, "Wrong alignment on MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleOutFinished");
static_assert(sizeof(MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleOutFinished) == 0x000008, "Wrong size on MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleOutFinished");
static_assert(offsetof(MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleOutFinished, FinishedComponent) == 0x000000, "Member 'MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleOutFinished::FinishedComponent' has a wrong offset!");

// Function Mariner.MarinerCueNotify_ManagedEffectSequence.OnParticleInFinished
// 0x0008 (0x0008 - 0x0000)
struct MarinerCueNotify_ManagedEffectSequence_OnParticleInFinished final
{
public:
	class UParticleSystemComponent*               FinishedComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCueNotify_ManagedEffectSequence_OnParticleInFinished) == 0x000008, "Wrong alignment on MarinerCueNotify_ManagedEffectSequence_OnParticleInFinished");
static_assert(sizeof(MarinerCueNotify_ManagedEffectSequence_OnParticleInFinished) == 0x000008, "Wrong size on MarinerCueNotify_ManagedEffectSequence_OnParticleInFinished");
static_assert(offsetof(MarinerCueNotify_ManagedEffectSequence_OnParticleInFinished, FinishedComponent) == 0x000000, "Member 'MarinerCueNotify_ManagedEffectSequence_OnParticleInFinished::FinishedComponent' has a wrong offset!");

// Function Mariner.MarinerCueNotify_ManagedEffectSequence.OnParticleOutFinished
// 0x0008 (0x0008 - 0x0000)
struct MarinerCueNotify_ManagedEffectSequence_OnParticleOutFinished final
{
public:
	class UParticleSystemComponent*               FinishedComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCueNotify_ManagedEffectSequence_OnParticleOutFinished) == 0x000008, "Wrong alignment on MarinerCueNotify_ManagedEffectSequence_OnParticleOutFinished");
static_assert(sizeof(MarinerCueNotify_ManagedEffectSequence_OnParticleOutFinished) == 0x000008, "Wrong size on MarinerCueNotify_ManagedEffectSequence_OnParticleOutFinished");
static_assert(offsetof(MarinerCueNotify_ManagedEffectSequence_OnParticleOutFinished, FinishedComponent) == 0x000000, "Member 'MarinerCueNotify_ManagedEffectSequence_OnParticleOutFinished::FinishedComponent' has a wrong offset!");

// Function Mariner.MarinerItem.AuthorityOnItemDamaged
// 0x0028 (0x0028 - 0x0000)
struct MarinerItem_AuthorityOnItemDamaged final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17EA[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_AuthorityOnItemDamaged) == 0x000008, "Wrong alignment on MarinerItem_AuthorityOnItemDamaged");
static_assert(sizeof(MarinerItem_AuthorityOnItemDamaged) == 0x000028, "Wrong size on MarinerItem_AuthorityOnItemDamaged");
static_assert(offsetof(MarinerItem_AuthorityOnItemDamaged, DamagedActor) == 0x000000, "Member 'MarinerItem_AuthorityOnItemDamaged::DamagedActor' has a wrong offset!");
static_assert(offsetof(MarinerItem_AuthorityOnItemDamaged, Damage) == 0x000008, "Member 'MarinerItem_AuthorityOnItemDamaged::Damage' has a wrong offset!");
static_assert(offsetof(MarinerItem_AuthorityOnItemDamaged, DamageType) == 0x000010, "Member 'MarinerItem_AuthorityOnItemDamaged::DamageType' has a wrong offset!");
static_assert(offsetof(MarinerItem_AuthorityOnItemDamaged, InstigatedBy) == 0x000018, "Member 'MarinerItem_AuthorityOnItemDamaged::InstigatedBy' has a wrong offset!");
static_assert(offsetof(MarinerItem_AuthorityOnItemDamaged, DamageCauser) == 0x000020, "Member 'MarinerItem_AuthorityOnItemDamaged::DamageCauser' has a wrong offset!");

// Function Mariner.MarinerItem.AuthorityOnItemHit
// 0x00A8 (0x00A8 - 0x0000)
struct MarinerItem_AuthorityOnItemHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_17EB[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerItem_AuthorityOnItemHit) == 0x000008, "Wrong alignment on MarinerItem_AuthorityOnItemHit");
static_assert(sizeof(MarinerItem_AuthorityOnItemHit) == 0x0000A8, "Wrong size on MarinerItem_AuthorityOnItemHit");
static_assert(offsetof(MarinerItem_AuthorityOnItemHit, SelfActor) == 0x000000, "Member 'MarinerItem_AuthorityOnItemHit::SelfActor' has a wrong offset!");
static_assert(offsetof(MarinerItem_AuthorityOnItemHit, OtherActor) == 0x000008, "Member 'MarinerItem_AuthorityOnItemHit::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerItem_AuthorityOnItemHit, NormalImpulse) == 0x000010, "Member 'MarinerItem_AuthorityOnItemHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(MarinerItem_AuthorityOnItemHit, Hit) == 0x00001C, "Member 'MarinerItem_AuthorityOnItemHit::Hit' has a wrong offset!");

// Function Mariner.MarinerItem.BP_OnDropped
// 0x0008 (0x0008 - 0x0000)
struct MarinerItem_BP_OnDropped final
{
public:
	class AMarinerCharacter*                      CharacterDroppingItem;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_BP_OnDropped) == 0x000008, "Wrong alignment on MarinerItem_BP_OnDropped");
static_assert(sizeof(MarinerItem_BP_OnDropped) == 0x000008, "Wrong size on MarinerItem_BP_OnDropped");
static_assert(offsetof(MarinerItem_BP_OnDropped, CharacterDroppingItem) == 0x000000, "Member 'MarinerItem_BP_OnDropped::CharacterDroppingItem' has a wrong offset!");

// Function Mariner.MarinerItem.BP_OnPickedUp
// 0x0008 (0x0008 - 0x0000)
struct MarinerItem_BP_OnPickedUp final
{
public:
	class AMarinerCharacter*                      CharacterHoldingItem;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_BP_OnPickedUp) == 0x000008, "Wrong alignment on MarinerItem_BP_OnPickedUp");
static_assert(sizeof(MarinerItem_BP_OnPickedUp) == 0x000008, "Wrong size on MarinerItem_BP_OnPickedUp");
static_assert(offsetof(MarinerItem_BP_OnPickedUp, CharacterHoldingItem) == 0x000000, "Member 'MarinerItem_BP_OnPickedUp::CharacterHoldingItem' has a wrong offset!");

// Function Mariner.MarinerItem.GetItemActivationUIPrefixText
// 0x0018 (0x0018 - 0x0000)
struct MarinerItem_GetItemActivationUIPrefixText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_GetItemActivationUIPrefixText) == 0x000008, "Wrong alignment on MarinerItem_GetItemActivationUIPrefixText");
static_assert(sizeof(MarinerItem_GetItemActivationUIPrefixText) == 0x000018, "Wrong size on MarinerItem_GetItemActivationUIPrefixText");
static_assert(offsetof(MarinerItem_GetItemActivationUIPrefixText, ReturnValue) == 0x000000, "Member 'MarinerItem_GetItemActivationUIPrefixText::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItem.GetItemActivationUIText
// 0x0018 (0x0018 - 0x0000)
struct MarinerItem_GetItemActivationUIText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_GetItemActivationUIText) == 0x000008, "Wrong alignment on MarinerItem_GetItemActivationUIText");
static_assert(sizeof(MarinerItem_GetItemActivationUIText) == 0x000018, "Wrong size on MarinerItem_GetItemActivationUIText");
static_assert(offsetof(MarinerItem_GetItemActivationUIText, ReturnValue) == 0x000000, "Member 'MarinerItem_GetItemActivationUIText::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItem.GetItemActivationUITexture
// 0x0008 (0x0008 - 0x0000)
struct MarinerItem_GetItemActivationUITexture final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_GetItemActivationUITexture) == 0x000008, "Wrong alignment on MarinerItem_GetItemActivationUITexture");
static_assert(sizeof(MarinerItem_GetItemActivationUITexture) == 0x000008, "Wrong size on MarinerItem_GetItemActivationUITexture");
static_assert(offsetof(MarinerItem_GetItemActivationUITexture, ReturnValue) == 0x000000, "Member 'MarinerItem_GetItemActivationUITexture::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItem.OnHoldingCharacterMegablasted
// 0x0018 (0x0018 - 0x0000)
struct MarinerItem_OnHoldingCharacterMegablasted final
{
public:
	const class UMarinerDamageableComponent*      RelevantDamageableComponent;                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AMarinerPlayerState*              MegablastInstigator;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnteredState;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17EC[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerItem_OnHoldingCharacterMegablasted) == 0x000008, "Wrong alignment on MarinerItem_OnHoldingCharacterMegablasted");
static_assert(sizeof(MarinerItem_OnHoldingCharacterMegablasted) == 0x000018, "Wrong size on MarinerItem_OnHoldingCharacterMegablasted");
static_assert(offsetof(MarinerItem_OnHoldingCharacterMegablasted, RelevantDamageableComponent) == 0x000000, "Member 'MarinerItem_OnHoldingCharacterMegablasted::RelevantDamageableComponent' has a wrong offset!");
static_assert(offsetof(MarinerItem_OnHoldingCharacterMegablasted, MegablastInstigator) == 0x000008, "Member 'MarinerItem_OnHoldingCharacterMegablasted::MegablastInstigator' has a wrong offset!");
static_assert(offsetof(MarinerItem_OnHoldingCharacterMegablasted, bEnteredState) == 0x000010, "Member 'MarinerItem_OnHoldingCharacterMegablasted::bEnteredState' has a wrong offset!");

// Function Mariner.MarinerItem.OnItemAbilityEnded
// 0x0008 (0x0008 - 0x0000)
struct MarinerItem_OnItemAbilityEnded final
{
public:
	class UGameplayAbility*                       EndedAbility;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_OnItemAbilityEnded) == 0x000008, "Wrong alignment on MarinerItem_OnItemAbilityEnded");
static_assert(sizeof(MarinerItem_OnItemAbilityEnded) == 0x000008, "Wrong size on MarinerItem_OnItemAbilityEnded");
static_assert(offsetof(MarinerItem_OnItemAbilityEnded, EndedAbility) == 0x000000, "Member 'MarinerItem_OnItemAbilityEnded::EndedAbility' has a wrong offset!");

// Function Mariner.MarinerItem.OnTakeDamage
// 0x0028 (0x0028 - 0x0000)
struct MarinerItem_OnTakeDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17ED[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            DamageInstigator;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageSourceActor;                                 // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_OnTakeDamage) == 0x000008, "Wrong alignment on MarinerItem_OnTakeDamage");
static_assert(sizeof(MarinerItem_OnTakeDamage) == 0x000028, "Wrong size on MarinerItem_OnTakeDamage");
static_assert(offsetof(MarinerItem_OnTakeDamage, DamagedActor) == 0x000000, "Member 'MarinerItem_OnTakeDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(MarinerItem_OnTakeDamage, Damage) == 0x000008, "Member 'MarinerItem_OnTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(MarinerItem_OnTakeDamage, DamageType) == 0x000010, "Member 'MarinerItem_OnTakeDamage::DamageType' has a wrong offset!");
static_assert(offsetof(MarinerItem_OnTakeDamage, DamageInstigator) == 0x000018, "Member 'MarinerItem_OnTakeDamage::DamageInstigator' has a wrong offset!");
static_assert(offsetof(MarinerItem_OnTakeDamage, DamageSourceActor) == 0x000020, "Member 'MarinerItem_OnTakeDamage::DamageSourceActor' has a wrong offset!");

// Function Mariner.MarinerItem.SetCanBePickedUp
// 0x0001 (0x0001 - 0x0000)
struct MarinerItem_SetCanBePickedUp final
{
public:
	bool                                          bNewCanBePickedUp;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_SetCanBePickedUp) == 0x000001, "Wrong alignment on MarinerItem_SetCanBePickedUp");
static_assert(sizeof(MarinerItem_SetCanBePickedUp) == 0x000001, "Wrong size on MarinerItem_SetCanBePickedUp");
static_assert(offsetof(MarinerItem_SetCanBePickedUp, bNewCanBePickedUp) == 0x000000, "Member 'MarinerItem_SetCanBePickedUp::bNewCanBePickedUp' has a wrong offset!");

// Function Mariner.MarinerItem.SetPriorityPickupActor
// 0x0010 (0x0010 - 0x0000)
struct MarinerItem_SetPriorityPickupActor final
{
public:
	class AActor*                                 NewPriorityPickupActor;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       OptionalSphereCollision;                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_SetPriorityPickupActor) == 0x000008, "Wrong alignment on MarinerItem_SetPriorityPickupActor");
static_assert(sizeof(MarinerItem_SetPriorityPickupActor) == 0x000010, "Wrong size on MarinerItem_SetPriorityPickupActor");
static_assert(offsetof(MarinerItem_SetPriorityPickupActor, NewPriorityPickupActor) == 0x000000, "Member 'MarinerItem_SetPriorityPickupActor::NewPriorityPickupActor' has a wrong offset!");
static_assert(offsetof(MarinerItem_SetPriorityPickupActor, OptionalSphereCollision) == 0x000008, "Member 'MarinerItem_SetPriorityPickupActor::OptionalSphereCollision' has a wrong offset!");

// Function Mariner.MarinerItem.GetItemAbilityInstance
// 0x0008 (0x0008 - 0x0000)
struct MarinerItem_GetItemAbilityInstance final
{
public:
	class UMarinerAbility*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_GetItemAbilityInstance) == 0x000008, "Wrong alignment on MarinerItem_GetItemAbilityInstance");
static_assert(sizeof(MarinerItem_GetItemAbilityInstance) == 0x000008, "Wrong size on MarinerItem_GetItemAbilityInstance");
static_assert(offsetof(MarinerItem_GetItemAbilityInstance, ReturnValue) == 0x000000, "Member 'MarinerItem_GetItemAbilityInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItem.GetLastPlayerAffectingItemFromTeam
// 0x0010 (0x0010 - 0x0000)
struct MarinerItem_GetLastPlayerAffectingItemFromTeam final
{
public:
	int32                                         InTeamIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17EE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerPlayerState*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_GetLastPlayerAffectingItemFromTeam) == 0x000008, "Wrong alignment on MarinerItem_GetLastPlayerAffectingItemFromTeam");
static_assert(sizeof(MarinerItem_GetLastPlayerAffectingItemFromTeam) == 0x000010, "Wrong size on MarinerItem_GetLastPlayerAffectingItemFromTeam");
static_assert(offsetof(MarinerItem_GetLastPlayerAffectingItemFromTeam, InTeamIndex) == 0x000000, "Member 'MarinerItem_GetLastPlayerAffectingItemFromTeam::InTeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerItem_GetLastPlayerAffectingItemFromTeam, ReturnValue) == 0x000008, "Member 'MarinerItem_GetLastPlayerAffectingItemFromTeam::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItem.IsEnabledFromPool
// 0x0001 (0x0001 - 0x0000)
struct MarinerItem_IsEnabledFromPool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_IsEnabledFromPool) == 0x000001, "Wrong alignment on MarinerItem_IsEnabledFromPool");
static_assert(sizeof(MarinerItem_IsEnabledFromPool) == 0x000001, "Wrong size on MarinerItem_IsEnabledFromPool");
static_assert(offsetof(MarinerItem_IsEnabledFromPool, ReturnValue) == 0x000000, "Member 'MarinerItem_IsEnabledFromPool::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItem.IsItemRandomSpawned
// 0x0001 (0x0001 - 0x0000)
struct MarinerItem_IsItemRandomSpawned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_IsItemRandomSpawned) == 0x000001, "Wrong alignment on MarinerItem_IsItemRandomSpawned");
static_assert(sizeof(MarinerItem_IsItemRandomSpawned) == 0x000001, "Wrong size on MarinerItem_IsItemRandomSpawned");
static_assert(offsetof(MarinerItem_IsItemRandomSpawned, ReturnValue) == 0x000000, "Member 'MarinerItem_IsItemRandomSpawned::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItem.ShouldItemUsePool
// 0x0001 (0x0001 - 0x0000)
struct MarinerItem_ShouldItemUsePool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_ShouldItemUsePool) == 0x000001, "Wrong alignment on MarinerItem_ShouldItemUsePool");
static_assert(sizeof(MarinerItem_ShouldItemUsePool) == 0x000001, "Wrong size on MarinerItem_ShouldItemUsePool");
static_assert(offsetof(MarinerItem_ShouldItemUsePool, ReturnValue) == 0x000000, "Member 'MarinerItem_ShouldItemUsePool::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItem.ShouldUseThrowingRule
// 0x0001 (0x0001 - 0x0000)
struct MarinerItem_ShouldUseThrowingRule final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_ShouldUseThrowingRule) == 0x000001, "Wrong alignment on MarinerItem_ShouldUseThrowingRule");
static_assert(sizeof(MarinerItem_ShouldUseThrowingRule) == 0x000001, "Wrong size on MarinerItem_ShouldUseThrowingRule");
static_assert(offsetof(MarinerItem_ShouldUseThrowingRule, ReturnValue) == 0x000000, "Member 'MarinerItem_ShouldUseThrowingRule::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItem.UsesItemAbility
// 0x0001 (0x0001 - 0x0000)
struct MarinerItem_UsesItemAbility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItem_UsesItemAbility) == 0x000001, "Wrong alignment on MarinerItem_UsesItemAbility");
static_assert(sizeof(MarinerItem_UsesItemAbility) == 0x000001, "Wrong size on MarinerItem_UsesItemAbility");
static_assert(offsetof(MarinerItem_UsesItemAbility, ReturnValue) == 0x000000, "Member 'MarinerItem_UsesItemAbility::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerCustomDropdown.OnOptionHovered
// 0x0010 (0x0010 - 0x0000)
struct MarinerCustomDropdown_OnOptionHovered final
{
public:
	class UMarinerLayeredButton*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromKeyboard;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromMouse;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17F2[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerCustomDropdown_OnOptionHovered) == 0x000008, "Wrong alignment on MarinerCustomDropdown_OnOptionHovered");
static_assert(sizeof(MarinerCustomDropdown_OnOptionHovered) == 0x000010, "Wrong size on MarinerCustomDropdown_OnOptionHovered");
static_assert(offsetof(MarinerCustomDropdown_OnOptionHovered, Instance) == 0x000000, "Member 'MarinerCustomDropdown_OnOptionHovered::Instance' has a wrong offset!");
static_assert(offsetof(MarinerCustomDropdown_OnOptionHovered, bFromKeyboard) == 0x000008, "Member 'MarinerCustomDropdown_OnOptionHovered::bFromKeyboard' has a wrong offset!");
static_assert(offsetof(MarinerCustomDropdown_OnOptionHovered, bFromMouse) == 0x000009, "Member 'MarinerCustomDropdown_OnOptionHovered::bFromMouse' has a wrong offset!");

// Function Mariner.MarinerCustomDropdown.OnOptionSelected
// 0x0008 (0x0008 - 0x0000)
struct MarinerCustomDropdown_OnOptionSelected final
{
public:
	class UMarinerLayeredButton*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerCustomDropdown_OnOptionSelected) == 0x000008, "Wrong alignment on MarinerCustomDropdown_OnOptionSelected");
static_assert(sizeof(MarinerCustomDropdown_OnOptionSelected) == 0x000008, "Wrong size on MarinerCustomDropdown_OnOptionSelected");
static_assert(offsetof(MarinerCustomDropdown_OnOptionSelected, Instance) == 0x000000, "Member 'MarinerCustomDropdown_OnOptionSelected::Instance' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GenerateGamepadKeyIconMappings
// 0x0010 (0x0010 - 0x0000)
struct MarinerInputGlobals_GenerateGamepadKeyIconMappings final
{
public:
	class UDataTable*                             ControllerConfiguration;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ConsoleKeyIconMapping;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GenerateGamepadKeyIconMappings) == 0x000008, "Wrong alignment on MarinerInputGlobals_GenerateGamepadKeyIconMappings");
static_assert(sizeof(MarinerInputGlobals_GenerateGamepadKeyIconMappings) == 0x000010, "Wrong size on MarinerInputGlobals_GenerateGamepadKeyIconMappings");
static_assert(offsetof(MarinerInputGlobals_GenerateGamepadKeyIconMappings, ControllerConfiguration) == 0x000000, "Member 'MarinerInputGlobals_GenerateGamepadKeyIconMappings::ControllerConfiguration' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_GenerateGamepadKeyIconMappings, ConsoleKeyIconMapping) == 0x000008, "Member 'MarinerInputGlobals_GenerateGamepadKeyIconMappings::ConsoleKeyIconMapping' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GenerateKeyIconMappingsFromIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerInputGlobals_GenerateKeyIconMappingsFromIndex final
{
public:
	int32                                         ConfigurationIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GenerateKeyIconMappingsFromIndex) == 0x000004, "Wrong alignment on MarinerInputGlobals_GenerateKeyIconMappingsFromIndex");
static_assert(sizeof(MarinerInputGlobals_GenerateKeyIconMappingsFromIndex) == 0x000004, "Wrong size on MarinerInputGlobals_GenerateKeyIconMappingsFromIndex");
static_assert(offsetof(MarinerInputGlobals_GenerateKeyIconMappingsFromIndex, ConfigurationIndex) == 0x000000, "Member 'MarinerInputGlobals_GenerateKeyIconMappingsFromIndex::ConfigurationIndex' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetActiveKeySet
// 0x0008 (0x0008 - 0x0000)
struct MarinerInputGlobals_GetActiveKeySet final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GetActiveKeySet) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetActiveKeySet");
static_assert(sizeof(MarinerInputGlobals_GetActiveKeySet) == 0x000008, "Wrong size on MarinerInputGlobals_GetActiveKeySet");
static_assert(offsetof(MarinerInputGlobals_GetActiveKeySet, ReturnValue) == 0x000000, "Member 'MarinerInputGlobals_GetActiveKeySet::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetGamepadIconSetFromInputAction
// 0x0118 (0x0118 - 0x0000)
struct MarinerInputGlobals_GetGamepadIconSetFromInputAction final
{
public:
	EMarinerInputActions                          Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutCouldFindIcon;                                 // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17F5[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerIconSet                        ReturnValue;                                       // 0x0008(0x0110)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GetGamepadIconSetFromInputAction) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetGamepadIconSetFromInputAction");
static_assert(sizeof(MarinerInputGlobals_GetGamepadIconSetFromInputAction) == 0x000118, "Wrong size on MarinerInputGlobals_GetGamepadIconSetFromInputAction");
static_assert(offsetof(MarinerInputGlobals_GetGamepadIconSetFromInputAction, Action) == 0x000000, "Member 'MarinerInputGlobals_GetGamepadIconSetFromInputAction::Action' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_GetGamepadIconSetFromInputAction, bOutCouldFindIcon) == 0x000001, "Member 'MarinerInputGlobals_GetGamepadIconSetFromInputAction::bOutCouldFindIcon' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_GetGamepadIconSetFromInputAction, ReturnValue) == 0x000008, "Member 'MarinerInputGlobals_GetGamepadIconSetFromInputAction::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetInputActionFromKeyboardKeySet
// 0x0038 (0x0038 - 0x0000)
struct MarinerInputGlobals_GetInputActionFromKeyboardKeySet final
{
public:
	struct FMarinerKeySet                         KeySet;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGameplayOnly;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerInputActions                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17F6[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerInputGlobals_GetInputActionFromKeyboardKeySet) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetInputActionFromKeyboardKeySet");
static_assert(sizeof(MarinerInputGlobals_GetInputActionFromKeyboardKeySet) == 0x000038, "Wrong size on MarinerInputGlobals_GetInputActionFromKeyboardKeySet");
static_assert(offsetof(MarinerInputGlobals_GetInputActionFromKeyboardKeySet, KeySet) == 0x000000, "Member 'MarinerInputGlobals_GetInputActionFromKeyboardKeySet::KeySet' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_GetInputActionFromKeyboardKeySet, bGameplayOnly) == 0x000030, "Member 'MarinerInputGlobals_GetInputActionFromKeyboardKeySet::bGameplayOnly' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_GetInputActionFromKeyboardKeySet, ReturnValue) == 0x000031, "Member 'MarinerInputGlobals_GetInputActionFromKeyboardKeySet::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetKBMKeyOverrides
// 0x00E0 (0x00E0 - 0x0000)
struct MarinerInputGlobals_GetKBMKeyOverrides final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerKBMKeyOverrides                ReturnValue;                                       // 0x0018(0x00C8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GetKBMKeyOverrides) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetKBMKeyOverrides");
static_assert(sizeof(MarinerInputGlobals_GetKBMKeyOverrides) == 0x0000E0, "Wrong size on MarinerInputGlobals_GetKBMKeyOverrides");
static_assert(offsetof(MarinerInputGlobals_GetKBMKeyOverrides, InKey) == 0x000000, "Member 'MarinerInputGlobals_GetKBMKeyOverrides::InKey' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_GetKBMKeyOverrides, ReturnValue) == 0x000018, "Member 'MarinerInputGlobals_GetKBMKeyOverrides::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetKeyboardKeySetFromInputAction
// 0x0038 (0x0038 - 0x0000)
struct MarinerInputGlobals_GetKeyboardKeySetFromInputAction final
{
public:
	EMarinerInputActions                          Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17F7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerKeySet                         ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GetKeyboardKeySetFromInputAction) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetKeyboardKeySetFromInputAction");
static_assert(sizeof(MarinerInputGlobals_GetKeyboardKeySetFromInputAction) == 0x000038, "Wrong size on MarinerInputGlobals_GetKeyboardKeySetFromInputAction");
static_assert(offsetof(MarinerInputGlobals_GetKeyboardKeySetFromInputAction, Action) == 0x000000, "Member 'MarinerInputGlobals_GetKeyboardKeySetFromInputAction::Action' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_GetKeyboardKeySetFromInputAction, ReturnValue) == 0x000008, "Member 'MarinerInputGlobals_GetKeyboardKeySetFromInputAction::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetSensitivitySpeicificationFromIndex
// 0x0030 (0x0030 - 0x0000)
struct MarinerInputGlobals_GetSensitivitySpeicificationFromIndex final
{
public:
	int32                                         SpecificationIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17F8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerSensitivtySpecification        ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GetSensitivitySpeicificationFromIndex) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetSensitivitySpeicificationFromIndex");
static_assert(sizeof(MarinerInputGlobals_GetSensitivitySpeicificationFromIndex) == 0x000030, "Wrong size on MarinerInputGlobals_GetSensitivitySpeicificationFromIndex");
static_assert(offsetof(MarinerInputGlobals_GetSensitivitySpeicificationFromIndex, SpecificationIndex) == 0x000000, "Member 'MarinerInputGlobals_GetSensitivitySpeicificationFromIndex::SpecificationIndex' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_GetSensitivitySpeicificationFromIndex, ReturnValue) == 0x000008, "Member 'MarinerInputGlobals_GetSensitivitySpeicificationFromIndex::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.OnInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct MarinerInputGlobals_OnInputTypeChanged final
{
public:
	EPlayerInputType                              InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_OnInputTypeChanged) == 0x000001, "Wrong alignment on MarinerInputGlobals_OnInputTypeChanged");
static_assert(sizeof(MarinerInputGlobals_OnInputTypeChanged) == 0x000001, "Wrong size on MarinerInputGlobals_OnInputTypeChanged");
static_assert(offsetof(MarinerInputGlobals_OnInputTypeChanged, InputType) == 0x000000, "Member 'MarinerInputGlobals_OnInputTypeChanged::InputType' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.RestoreInputDefaults
// 0x0002 (0x0002 - 0x0000)
struct MarinerInputGlobals_RestoreInputDefaults final
{
public:
	bool                                          bKeyboardOnly;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConditionalRestore;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_RestoreInputDefaults) == 0x000001, "Wrong alignment on MarinerInputGlobals_RestoreInputDefaults");
static_assert(sizeof(MarinerInputGlobals_RestoreInputDefaults) == 0x000002, "Wrong size on MarinerInputGlobals_RestoreInputDefaults");
static_assert(offsetof(MarinerInputGlobals_RestoreInputDefaults, bKeyboardOnly) == 0x000000, "Member 'MarinerInputGlobals_RestoreInputDefaults::bKeyboardOnly' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_RestoreInputDefaults, bConditionalRestore) == 0x000001, "Member 'MarinerInputGlobals_RestoreInputDefaults::bConditionalRestore' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.SwapGamepadKeySetIcons
// 0x0002 (0x0002 - 0x0000)
struct MarinerInputGlobals_SwapGamepadKeySetIcons final
{
public:
	EMarinerInputActions                          FirstAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerInputActions                          SecondAction;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_SwapGamepadKeySetIcons) == 0x000001, "Wrong alignment on MarinerInputGlobals_SwapGamepadKeySetIcons");
static_assert(sizeof(MarinerInputGlobals_SwapGamepadKeySetIcons) == 0x000002, "Wrong size on MarinerInputGlobals_SwapGamepadKeySetIcons");
static_assert(offsetof(MarinerInputGlobals_SwapGamepadKeySetIcons, FirstAction) == 0x000000, "Member 'MarinerInputGlobals_SwapGamepadKeySetIcons::FirstAction' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_SwapGamepadKeySetIcons, SecondAction) == 0x000001, "Member 'MarinerInputGlobals_SwapGamepadKeySetIcons::SecondAction' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetActionNameFromKeySet
// 0x0048 (0x0048 - 0x0000)
struct MarinerInputGlobals_GetActionNameFromKeySet final
{
public:
	struct FMarinerKeySet                         InKeySet;                                          // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GetActionNameFromKeySet) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetActionNameFromKeySet");
static_assert(sizeof(MarinerInputGlobals_GetActionNameFromKeySet) == 0x000048, "Wrong size on MarinerInputGlobals_GetActionNameFromKeySet");
static_assert(offsetof(MarinerInputGlobals_GetActionNameFromKeySet, InKeySet) == 0x000000, "Member 'MarinerInputGlobals_GetActionNameFromKeySet::InKeySet' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_GetActionNameFromKeySet, ReturnValue) == 0x000030, "Member 'MarinerInputGlobals_GetActionNameFromKeySet::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetControllerConfigurationFromIndex
// 0x0010 (0x0010 - 0x0000)
struct MarinerInputGlobals_GetControllerConfigurationFromIndex final
{
public:
	int32                                         ConfigurationIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17F9[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GetControllerConfigurationFromIndex) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetControllerConfigurationFromIndex");
static_assert(sizeof(MarinerInputGlobals_GetControllerConfigurationFromIndex) == 0x000010, "Wrong size on MarinerInputGlobals_GetControllerConfigurationFromIndex");
static_assert(offsetof(MarinerInputGlobals_GetControllerConfigurationFromIndex, ConfigurationIndex) == 0x000000, "Member 'MarinerInputGlobals_GetControllerConfigurationFromIndex::ConfigurationIndex' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_GetControllerConfigurationFromIndex, ReturnValue) == 0x000008, "Member 'MarinerInputGlobals_GetControllerConfigurationFromIndex::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetDecelerationPercentage
// 0x0004 (0x0004 - 0x0000)
struct MarinerInputGlobals_GetDecelerationPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GetDecelerationPercentage) == 0x000004, "Wrong alignment on MarinerInputGlobals_GetDecelerationPercentage");
static_assert(sizeof(MarinerInputGlobals_GetDecelerationPercentage) == 0x000004, "Wrong size on MarinerInputGlobals_GetDecelerationPercentage");
static_assert(offsetof(MarinerInputGlobals_GetDecelerationPercentage, ReturnValue) == 0x000000, "Member 'MarinerInputGlobals_GetDecelerationPercentage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetDisplayTextFromInputAction
// 0x0020 (0x0020 - 0x0000)
struct MarinerInputGlobals_GetDisplayTextFromInputAction final
{
public:
	EMarinerInputActions                          InAction;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GetDisplayTextFromInputAction) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetDisplayTextFromInputAction");
static_assert(sizeof(MarinerInputGlobals_GetDisplayTextFromInputAction) == 0x000020, "Wrong size on MarinerInputGlobals_GetDisplayTextFromInputAction");
static_assert(offsetof(MarinerInputGlobals_GetDisplayTextFromInputAction, InAction) == 0x000000, "Member 'MarinerInputGlobals_GetDisplayTextFromInputAction::InAction' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_GetDisplayTextFromInputAction, ReturnValue) == 0x000008, "Member 'MarinerInputGlobals_GetDisplayTextFromInputAction::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetGamepadKeySetFromInputAction
// 0x0038 (0x0038 - 0x0000)
struct MarinerInputGlobals_GetGamepadKeySetFromInputAction final
{
public:
	EMarinerInputActions                          Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerKeySet                         ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GetGamepadKeySetFromInputAction) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetGamepadKeySetFromInputAction");
static_assert(sizeof(MarinerInputGlobals_GetGamepadKeySetFromInputAction) == 0x000038, "Wrong size on MarinerInputGlobals_GetGamepadKeySetFromInputAction");
static_assert(offsetof(MarinerInputGlobals_GetGamepadKeySetFromInputAction, Action) == 0x000000, "Member 'MarinerInputGlobals_GetGamepadKeySetFromInputAction::Action' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_GetGamepadKeySetFromInputAction, ReturnValue) == 0x000008, "Member 'MarinerInputGlobals_GetGamepadKeySetFromInputAction::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetIconForNeutralDpad
// 0x0088 (0x0088 - 0x0000)
struct MarinerInputGlobals_GetIconForNeutralDpad final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GetIconForNeutralDpad) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetIconForNeutralDpad");
static_assert(sizeof(MarinerInputGlobals_GetIconForNeutralDpad) == 0x000088, "Wrong size on MarinerInputGlobals_GetIconForNeutralDpad");
static_assert(offsetof(MarinerInputGlobals_GetIconForNeutralDpad, ReturnValue) == 0x000000, "Member 'MarinerInputGlobals_GetIconForNeutralDpad::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetInputActionFromKeySetInputBinding
// 0x0038 (0x0038 - 0x0000)
struct MarinerInputGlobals_GetInputActionFromKeySetInputBinding final
{
public:
	struct FMarinerKeySet                         KeySet;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerInputActions                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FC[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerInputGlobals_GetInputActionFromKeySetInputBinding) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetInputActionFromKeySetInputBinding");
static_assert(sizeof(MarinerInputGlobals_GetInputActionFromKeySetInputBinding) == 0x000038, "Wrong size on MarinerInputGlobals_GetInputActionFromKeySetInputBinding");
static_assert(offsetof(MarinerInputGlobals_GetInputActionFromKeySetInputBinding, KeySet) == 0x000000, "Member 'MarinerInputGlobals_GetInputActionFromKeySetInputBinding::KeySet' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_GetInputActionFromKeySetInputBinding, ReturnValue) == 0x000030, "Member 'MarinerInputGlobals_GetInputActionFromKeySetInputBinding::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetInputActionListFromKey
// 0x0028 (0x0028 - 0x0000)
struct MarinerInputGlobals_GetInputActionListFromKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerInputActionList                ReturnValue;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GetInputActionListFromKey) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetInputActionListFromKey");
static_assert(sizeof(MarinerInputGlobals_GetInputActionListFromKey) == 0x000028, "Wrong size on MarinerInputGlobals_GetInputActionListFromKey");
static_assert(offsetof(MarinerInputGlobals_GetInputActionListFromKey, Key) == 0x000000, "Member 'MarinerInputGlobals_GetInputActionListFromKey::Key' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_GetInputActionListFromKey, ReturnValue) == 0x000018, "Member 'MarinerInputGlobals_GetInputActionListFromKey::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetInputActionListFromKeySet
// 0x0040 (0x0040 - 0x0000)
struct MarinerInputGlobals_GetInputActionListFromKeySet final
{
public:
	struct FMarinerKeySet                         KeySet;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerInputActionList                ReturnValue;                                       // 0x0030(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GetInputActionListFromKeySet) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetInputActionListFromKeySet");
static_assert(sizeof(MarinerInputGlobals_GetInputActionListFromKeySet) == 0x000040, "Wrong size on MarinerInputGlobals_GetInputActionListFromKeySet");
static_assert(offsetof(MarinerInputGlobals_GetInputActionListFromKeySet, KeySet) == 0x000000, "Member 'MarinerInputGlobals_GetInputActionListFromKeySet::KeySet' has a wrong offset!");
static_assert(offsetof(MarinerInputGlobals_GetInputActionListFromKeySet, ReturnValue) == 0x000030, "Member 'MarinerInputGlobals_GetInputActionListFromKeySet::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetInputMagnitudeFilterCurve
// 0x0008 (0x0008 - 0x0000)
struct MarinerInputGlobals_GetInputMagnitudeFilterCurve final
{
public:
	class UCurveVector*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GetInputMagnitudeFilterCurve) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetInputMagnitudeFilterCurve");
static_assert(sizeof(MarinerInputGlobals_GetInputMagnitudeFilterCurve) == 0x000008, "Wrong size on MarinerInputGlobals_GetInputMagnitudeFilterCurve");
static_assert(offsetof(MarinerInputGlobals_GetInputMagnitudeFilterCurve, ReturnValue) == 0x000000, "Member 'MarinerInputGlobals_GetInputMagnitudeFilterCurve::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputGlobals.GetSensitivitySettings
// 0x0008 (0x0008 - 0x0000)
struct MarinerInputGlobals_GetSensitivitySettings final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputGlobals_GetSensitivitySettings) == 0x000008, "Wrong alignment on MarinerInputGlobals_GetSensitivitySettings");
static_assert(sizeof(MarinerInputGlobals_GetSensitivitySettings) == 0x000008, "Wrong size on MarinerInputGlobals_GetSensitivitySettings");
static_assert(offsetof(MarinerInputGlobals_GetSensitivitySettings, ReturnValue) == 0x000000, "Member 'MarinerInputGlobals_GetSensitivitySettings::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputInterface.Exit
// 0x0001 (0x0001 - 0x0000)
struct MarinerInputInterface_Exit final
{
public:
	bool                                          bToSubLayer;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputInterface_Exit) == 0x000001, "Wrong alignment on MarinerInputInterface_Exit");
static_assert(sizeof(MarinerInputInterface_Exit) == 0x000001, "Wrong size on MarinerInputInterface_Exit");
static_assert(offsetof(MarinerInputInterface_Exit, bToSubLayer) == 0x000000, "Member 'MarinerInputInterface_Exit::bToSubLayer' has a wrong offset!");

// Function Mariner.MarinerInputInterface.GetHighlightedObject
// 0x0010 (0x0010 - 0x0000)
struct MarinerInputInterface_GetHighlightedObject final
{
public:
	TScriptInterface<class IMarinerInputInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputInterface_GetHighlightedObject) == 0x000008, "Wrong alignment on MarinerInputInterface_GetHighlightedObject");
static_assert(sizeof(MarinerInputInterface_GetHighlightedObject) == 0x000010, "Wrong size on MarinerInputInterface_GetHighlightedObject");
static_assert(offsetof(MarinerInputInterface_GetHighlightedObject, ReturnValue) == 0x000000, "Member 'MarinerInputInterface_GetHighlightedObject::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputInterface.HandleGamepadConnectionChanged
// 0x0002 (0x0002 - 0x0000)
struct MarinerInputInterface_HandleGamepadConnectionChanged final
{
public:
	bool                                          bIsConnected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActiveDevice;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputInterface_HandleGamepadConnectionChanged) == 0x000001, "Wrong alignment on MarinerInputInterface_HandleGamepadConnectionChanged");
static_assert(sizeof(MarinerInputInterface_HandleGamepadConnectionChanged) == 0x000002, "Wrong size on MarinerInputInterface_HandleGamepadConnectionChanged");
static_assert(offsetof(MarinerInputInterface_HandleGamepadConnectionChanged, bIsConnected) == 0x000000, "Member 'MarinerInputInterface_HandleGamepadConnectionChanged::bIsConnected' has a wrong offset!");
static_assert(offsetof(MarinerInputInterface_HandleGamepadConnectionChanged, bIsActiveDevice) == 0x000001, "Member 'MarinerInputInterface_HandleGamepadConnectionChanged::bIsActiveDevice' has a wrong offset!");

// Function Mariner.MarinerInputInterface.HandleInput
// 0x0002 (0x0002 - 0x0000)
struct MarinerInputInterface_HandleInput final
{
public:
	EMarinerInputActions                          InInput;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputInterface_HandleInput) == 0x000001, "Wrong alignment on MarinerInputInterface_HandleInput");
static_assert(sizeof(MarinerInputInterface_HandleInput) == 0x000002, "Wrong size on MarinerInputInterface_HandleInput");
static_assert(offsetof(MarinerInputInterface_HandleInput, InInput) == 0x000000, "Member 'MarinerInputInterface_HandleInput::InInput' has a wrong offset!");
static_assert(offsetof(MarinerInputInterface_HandleInput, ReturnValue) == 0x000001, "Member 'MarinerInputInterface_HandleInput::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputInterface.HandleInputDeviceChanged
// 0x0001 (0x0001 - 0x0000)
struct MarinerInputInterface_HandleInputDeviceChanged final
{
public:
	EPlayerInputType                              InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputInterface_HandleInputDeviceChanged) == 0x000001, "Wrong alignment on MarinerInputInterface_HandleInputDeviceChanged");
static_assert(sizeof(MarinerInputInterface_HandleInputDeviceChanged) == 0x000001, "Wrong size on MarinerInputInterface_HandleInputDeviceChanged");
static_assert(offsetof(MarinerInputInterface_HandleInputDeviceChanged, InputType) == 0x000000, "Member 'MarinerInputInterface_HandleInputDeviceChanged::InputType' has a wrong offset!");

// Function Mariner.MarinerInputInterface.HandleInputPressed
// 0x0002 (0x0002 - 0x0000)
struct MarinerInputInterface_HandleInputPressed final
{
public:
	EMarinerInputActions                          InInput;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputInterface_HandleInputPressed) == 0x000001, "Wrong alignment on MarinerInputInterface_HandleInputPressed");
static_assert(sizeof(MarinerInputInterface_HandleInputPressed) == 0x000002, "Wrong size on MarinerInputInterface_HandleInputPressed");
static_assert(offsetof(MarinerInputInterface_HandleInputPressed, InInput) == 0x000000, "Member 'MarinerInputInterface_HandleInputPressed::InInput' has a wrong offset!");
static_assert(offsetof(MarinerInputInterface_HandleInputPressed, ReturnValue) == 0x000001, "Member 'MarinerInputInterface_HandleInputPressed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputInterface.HandleInputReleased
// 0x0002 (0x0002 - 0x0000)
struct MarinerInputInterface_HandleInputReleased final
{
public:
	EMarinerInputActions                          InInput;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputInterface_HandleInputReleased) == 0x000001, "Wrong alignment on MarinerInputInterface_HandleInputReleased");
static_assert(sizeof(MarinerInputInterface_HandleInputReleased) == 0x000002, "Wrong size on MarinerInputInterface_HandleInputReleased");
static_assert(offsetof(MarinerInputInterface_HandleInputReleased, InInput) == 0x000000, "Member 'MarinerInputInterface_HandleInputReleased::InInput' has a wrong offset!");
static_assert(offsetof(MarinerInputInterface_HandleInputReleased, ReturnValue) == 0x000001, "Member 'MarinerInputInterface_HandleInputReleased::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputInterface.HandleKeyDown
// 0x0020 (0x0020 - 0x0000)
struct MarinerInputInterface_HandleKeyDown final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRepeat;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FD[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerInputInterface_HandleKeyDown) == 0x000008, "Wrong alignment on MarinerInputInterface_HandleKeyDown");
static_assert(sizeof(MarinerInputInterface_HandleKeyDown) == 0x000020, "Wrong size on MarinerInputInterface_HandleKeyDown");
static_assert(offsetof(MarinerInputInterface_HandleKeyDown, InKey) == 0x000000, "Member 'MarinerInputInterface_HandleKeyDown::InKey' has a wrong offset!");
static_assert(offsetof(MarinerInputInterface_HandleKeyDown, bIsRepeat) == 0x000018, "Member 'MarinerInputInterface_HandleKeyDown::bIsRepeat' has a wrong offset!");
static_assert(offsetof(MarinerInputInterface_HandleKeyDown, ReturnValue) == 0x000019, "Member 'MarinerInputInterface_HandleKeyDown::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInputInterface.CanHighlight
// 0x0001 (0x0001 - 0x0000)
struct MarinerInputInterface_CanHighlight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInputInterface_CanHighlight) == 0x000001, "Wrong alignment on MarinerInputInterface_CanHighlight");
static_assert(sizeof(MarinerInputInterface_CanHighlight) == 0x000001, "Wrong size on MarinerInputInterface_CanHighlight");
static_assert(offsetof(MarinerInputInterface_CanHighlight, ReturnValue) == 0x000000, "Member 'MarinerInputInterface_CanHighlight::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInteractableObjectInterface.OnInteractableDrag
// 0x0008 (0x0008 - 0x0000)
struct MarinerInteractableObjectInterface_OnInteractableDrag final
{
public:
	float                                         FDeltaX;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FDeltaY;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInteractableObjectInterface_OnInteractableDrag) == 0x000004, "Wrong alignment on MarinerInteractableObjectInterface_OnInteractableDrag");
static_assert(sizeof(MarinerInteractableObjectInterface_OnInteractableDrag) == 0x000008, "Wrong size on MarinerInteractableObjectInterface_OnInteractableDrag");
static_assert(offsetof(MarinerInteractableObjectInterface_OnInteractableDrag, FDeltaX) == 0x000000, "Member 'MarinerInteractableObjectInterface_OnInteractableDrag::FDeltaX' has a wrong offset!");
static_assert(offsetof(MarinerInteractableObjectInterface_OnInteractableDrag, FDeltaY) == 0x000004, "Member 'MarinerInteractableObjectInterface_OnInteractableDrag::FDeltaY' has a wrong offset!");

// Function Mariner.MarinerInteractableObjectInterface.GetInteractableData
// 0x0008 (0x0008 - 0x0000)
struct MarinerInteractableObjectInterface_GetInteractableData final
{
public:
	struct FMarinerInteractableData               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInteractableObjectInterface_GetInteractableData) == 0x000004, "Wrong alignment on MarinerInteractableObjectInterface_GetInteractableData");
static_assert(sizeof(MarinerInteractableObjectInterface_GetInteractableData) == 0x000008, "Wrong size on MarinerInteractableObjectInterface_GetInteractableData");
static_assert(offsetof(MarinerInteractableObjectInterface_GetInteractableData, ReturnValue) == 0x000000, "Member 'MarinerInteractableObjectInterface_GetInteractableData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.AccumulatedDamageChanged
// 0x0010 (0x0010 - 0x0000)
struct MarinerDamageableComponent_AccumulatedDamageChanged final
{
public:
	const class UMarinerDamageableComponent*      RelevantDamageableComponent;                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewAccumulatedDamage;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldAccumulatedDamage;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_AccumulatedDamageChanged) == 0x000008, "Wrong alignment on MarinerDamageableComponent_AccumulatedDamageChanged");
static_assert(sizeof(MarinerDamageableComponent_AccumulatedDamageChanged) == 0x000010, "Wrong size on MarinerDamageableComponent_AccumulatedDamageChanged");
static_assert(offsetof(MarinerDamageableComponent_AccumulatedDamageChanged, RelevantDamageableComponent) == 0x000000, "Member 'MarinerDamageableComponent_AccumulatedDamageChanged::RelevantDamageableComponent' has a wrong offset!");
static_assert(offsetof(MarinerDamageableComponent_AccumulatedDamageChanged, NewAccumulatedDamage) == 0x000008, "Member 'MarinerDamageableComponent_AccumulatedDamageChanged::NewAccumulatedDamage' has a wrong offset!");
static_assert(offsetof(MarinerDamageableComponent_AccumulatedDamageChanged, OldAccumulatedDamage) == 0x00000C, "Member 'MarinerDamageableComponent_AccumulatedDamageChanged::OldAccumulatedDamage' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.AuthoritativeSetIsInvulnerable
// 0x0001 (0x0001 - 0x0000)
struct MarinerDamageableComponent_AuthoritativeSetIsInvulnerable final
{
public:
	bool                                          bInIsInvulnerable;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_AuthoritativeSetIsInvulnerable) == 0x000001, "Wrong alignment on MarinerDamageableComponent_AuthoritativeSetIsInvulnerable");
static_assert(sizeof(MarinerDamageableComponent_AuthoritativeSetIsInvulnerable) == 0x000001, "Wrong size on MarinerDamageableComponent_AuthoritativeSetIsInvulnerable");
static_assert(offsetof(MarinerDamageableComponent_AuthoritativeSetIsInvulnerable, bInIsInvulnerable) == 0x000000, "Member 'MarinerDamageableComponent_AuthoritativeSetIsInvulnerable::bInIsInvulnerable' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.AuthoritySetAccumulatedDamage
// 0x0008 (0x0008 - 0x0000)
struct MarinerDamageableComponent_AuthoritySetAccumulatedDamage final
{
public:
	float                                         NewAccumulatedDamage;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverflowsMegablastDanger;                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1806[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDamageableComponent_AuthoritySetAccumulatedDamage) == 0x000004, "Wrong alignment on MarinerDamageableComponent_AuthoritySetAccumulatedDamage");
static_assert(sizeof(MarinerDamageableComponent_AuthoritySetAccumulatedDamage) == 0x000008, "Wrong size on MarinerDamageableComponent_AuthoritySetAccumulatedDamage");
static_assert(offsetof(MarinerDamageableComponent_AuthoritySetAccumulatedDamage, NewAccumulatedDamage) == 0x000000, "Member 'MarinerDamageableComponent_AuthoritySetAccumulatedDamage::NewAccumulatedDamage' has a wrong offset!");
static_assert(offsetof(MarinerDamageableComponent_AuthoritySetAccumulatedDamage, bOverflowsMegablastDanger) == 0x000004, "Member 'MarinerDamageableComponent_AuthoritySetAccumulatedDamage::bOverflowsMegablastDanger' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.OnCharacterTakeAnyDamage
// 0x0028 (0x0028 - 0x0000)
struct MarinerDamageableComponent_OnCharacterTakeAnyDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1807[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_OnCharacterTakeAnyDamage) == 0x000008, "Wrong alignment on MarinerDamageableComponent_OnCharacterTakeAnyDamage");
static_assert(sizeof(MarinerDamageableComponent_OnCharacterTakeAnyDamage) == 0x000028, "Wrong size on MarinerDamageableComponent_OnCharacterTakeAnyDamage");
static_assert(offsetof(MarinerDamageableComponent_OnCharacterTakeAnyDamage, DamagedActor) == 0x000000, "Member 'MarinerDamageableComponent_OnCharacterTakeAnyDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(MarinerDamageableComponent_OnCharacterTakeAnyDamage, Damage) == 0x000008, "Member 'MarinerDamageableComponent_OnCharacterTakeAnyDamage::Damage' has a wrong offset!");
static_assert(offsetof(MarinerDamageableComponent_OnCharacterTakeAnyDamage, DamageType) == 0x000010, "Member 'MarinerDamageableComponent_OnCharacterTakeAnyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(MarinerDamageableComponent_OnCharacterTakeAnyDamage, InstigatedBy) == 0x000018, "Member 'MarinerDamageableComponent_OnCharacterTakeAnyDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(MarinerDamageableComponent_OnCharacterTakeAnyDamage, DamageCauser) == 0x000020, "Member 'MarinerDamageableComponent_OnCharacterTakeAnyDamage::DamageCauser' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.OnRep_AccumulatedDamageAsNonAttribute
// 0x0004 (0x0004 - 0x0000)
struct MarinerDamageableComponent_OnRep_AccumulatedDamageAsNonAttribute final
{
public:
	float                                         OldAccumulatedDamage;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_OnRep_AccumulatedDamageAsNonAttribute) == 0x000004, "Wrong alignment on MarinerDamageableComponent_OnRep_AccumulatedDamageAsNonAttribute");
static_assert(sizeof(MarinerDamageableComponent_OnRep_AccumulatedDamageAsNonAttribute) == 0x000004, "Wrong size on MarinerDamageableComponent_OnRep_AccumulatedDamageAsNonAttribute");
static_assert(offsetof(MarinerDamageableComponent_OnRep_AccumulatedDamageAsNonAttribute, OldAccumulatedDamage) == 0x000000, "Member 'MarinerDamageableComponent_OnRep_AccumulatedDamageAsNonAttribute::OldAccumulatedDamage' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.RemoveDamage
// 0x0004 (0x0004 - 0x0000)
struct MarinerDamageableComponent_RemoveDamage final
{
public:
	float                                         DamageToRemove;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_RemoveDamage) == 0x000004, "Wrong alignment on MarinerDamageableComponent_RemoveDamage");
static_assert(sizeof(MarinerDamageableComponent_RemoveDamage) == 0x000004, "Wrong size on MarinerDamageableComponent_RemoveDamage");
static_assert(offsetof(MarinerDamageableComponent_RemoveDamage, DamageToRemove) == 0x000000, "Member 'MarinerDamageableComponent_RemoveDamage::DamageToRemove' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.CanDieFromDamage
// 0x0001 (0x0001 - 0x0000)
struct MarinerDamageableComponent_CanDieFromDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_CanDieFromDamage) == 0x000001, "Wrong alignment on MarinerDamageableComponent_CanDieFromDamage");
static_assert(sizeof(MarinerDamageableComponent_CanDieFromDamage) == 0x000001, "Wrong size on MarinerDamageableComponent_CanDieFromDamage");
static_assert(offsetof(MarinerDamageableComponent_CanDieFromDamage, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_CanDieFromDamage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.GetAccumulatedDamage
// 0x0004 (0x0004 - 0x0000)
struct MarinerDamageableComponent_GetAccumulatedDamage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_GetAccumulatedDamage) == 0x000004, "Wrong alignment on MarinerDamageableComponent_GetAccumulatedDamage");
static_assert(sizeof(MarinerDamageableComponent_GetAccumulatedDamage) == 0x000004, "Wrong size on MarinerDamageableComponent_GetAccumulatedDamage");
static_assert(offsetof(MarinerDamageableComponent_GetAccumulatedDamage, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_GetAccumulatedDamage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.GetAccumulatedDamageRegenPerSecond
// 0x0004 (0x0004 - 0x0000)
struct MarinerDamageableComponent_GetAccumulatedDamageRegenPerSecond final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_GetAccumulatedDamageRegenPerSecond) == 0x000004, "Wrong alignment on MarinerDamageableComponent_GetAccumulatedDamageRegenPerSecond");
static_assert(sizeof(MarinerDamageableComponent_GetAccumulatedDamageRegenPerSecond) == 0x000004, "Wrong size on MarinerDamageableComponent_GetAccumulatedDamageRegenPerSecond");
static_assert(offsetof(MarinerDamageableComponent_GetAccumulatedDamageRegenPerSecond, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_GetAccumulatedDamageRegenPerSecond::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.GetAccumulatedDamageRegenSuppressionTime
// 0x0004 (0x0004 - 0x0000)
struct MarinerDamageableComponent_GetAccumulatedDamageRegenSuppressionTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_GetAccumulatedDamageRegenSuppressionTime) == 0x000004, "Wrong alignment on MarinerDamageableComponent_GetAccumulatedDamageRegenSuppressionTime");
static_assert(sizeof(MarinerDamageableComponent_GetAccumulatedDamageRegenSuppressionTime) == 0x000004, "Wrong size on MarinerDamageableComponent_GetAccumulatedDamageRegenSuppressionTime");
static_assert(offsetof(MarinerDamageableComponent_GetAccumulatedDamageRegenSuppressionTime, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_GetAccumulatedDamageRegenSuppressionTime::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.GetBlastableLevel
// 0x0001 (0x0001 - 0x0000)
struct MarinerDamageableComponent_GetBlastableLevel final
{
public:
	EMarinerBlastableLevel                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_GetBlastableLevel) == 0x000001, "Wrong alignment on MarinerDamageableComponent_GetBlastableLevel");
static_assert(sizeof(MarinerDamageableComponent_GetBlastableLevel) == 0x000001, "Wrong size on MarinerDamageableComponent_GetBlastableLevel");
static_assert(offsetof(MarinerDamageableComponent_GetBlastableLevel, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_GetBlastableLevel::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.GetCriticalDamageThreshold
// 0x0004 (0x0004 - 0x0000)
struct MarinerDamageableComponent_GetCriticalDamageThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_GetCriticalDamageThreshold) == 0x000004, "Wrong alignment on MarinerDamageableComponent_GetCriticalDamageThreshold");
static_assert(sizeof(MarinerDamageableComponent_GetCriticalDamageThreshold) == 0x000004, "Wrong size on MarinerDamageableComponent_GetCriticalDamageThreshold");
static_assert(offsetof(MarinerDamageableComponent_GetCriticalDamageThreshold, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_GetCriticalDamageThreshold::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.GetDamageMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerDamageableComponent_GetDamageMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_GetDamageMultiplier) == 0x000004, "Wrong alignment on MarinerDamageableComponent_GetDamageMultiplier");
static_assert(sizeof(MarinerDamageableComponent_GetDamageMultiplier) == 0x000004, "Wrong size on MarinerDamageableComponent_GetDamageMultiplier");
static_assert(offsetof(MarinerDamageableComponent_GetDamageMultiplier, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_GetDamageMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.GetDamageReceivedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerDamageableComponent_GetDamageReceivedMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_GetDamageReceivedMultiplier) == 0x000004, "Wrong alignment on MarinerDamageableComponent_GetDamageReceivedMultiplier");
static_assert(sizeof(MarinerDamageableComponent_GetDamageReceivedMultiplier) == 0x000004, "Wrong size on MarinerDamageableComponent_GetDamageReceivedMultiplier");
static_assert(offsetof(MarinerDamageableComponent_GetDamageReceivedMultiplier, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_GetDamageReceivedMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.GetDeathDamageThreshold
// 0x0004 (0x0004 - 0x0000)
struct MarinerDamageableComponent_GetDeathDamageThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_GetDeathDamageThreshold) == 0x000004, "Wrong alignment on MarinerDamageableComponent_GetDeathDamageThreshold");
static_assert(sizeof(MarinerDamageableComponent_GetDeathDamageThreshold) == 0x000004, "Wrong size on MarinerDamageableComponent_GetDeathDamageThreshold");
static_assert(offsetof(MarinerDamageableComponent_GetDeathDamageThreshold, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_GetDeathDamageThreshold::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.GetImpulseMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerDamageableComponent_GetImpulseMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_GetImpulseMultiplier) == 0x000004, "Wrong alignment on MarinerDamageableComponent_GetImpulseMultiplier");
static_assert(sizeof(MarinerDamageableComponent_GetImpulseMultiplier) == 0x000004, "Wrong size on MarinerDamageableComponent_GetImpulseMultiplier");
static_assert(offsetof(MarinerDamageableComponent_GetImpulseMultiplier, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_GetImpulseMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.GetLastDamageEventClosestHitResult
// 0x0088 (0x0088 - 0x0000)
struct MarinerDamageableComponent_GetLastDamageEventClosestHitResult final
{
public:
	struct FHitResult                             ReturnValue;                                       // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_GetLastDamageEventClosestHitResult) == 0x000004, "Wrong alignment on MarinerDamageableComponent_GetLastDamageEventClosestHitResult");
static_assert(sizeof(MarinerDamageableComponent_GetLastDamageEventClosestHitResult) == 0x000088, "Wrong size on MarinerDamageableComponent_GetLastDamageEventClosestHitResult");
static_assert(offsetof(MarinerDamageableComponent_GetLastDamageEventClosestHitResult, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_GetLastDamageEventClosestHitResult::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.GetLastDamageEventDirection
// 0x000C (0x000C - 0x0000)
struct MarinerDamageableComponent_GetLastDamageEventDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_GetLastDamageEventDirection) == 0x000004, "Wrong alignment on MarinerDamageableComponent_GetLastDamageEventDirection");
static_assert(sizeof(MarinerDamageableComponent_GetLastDamageEventDirection) == 0x00000C, "Wrong size on MarinerDamageableComponent_GetLastDamageEventDirection");
static_assert(offsetof(MarinerDamageableComponent_GetLastDamageEventDirection, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_GetLastDamageEventDirection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.GetLastDamageEventOrigin
// 0x000C (0x000C - 0x0000)
struct MarinerDamageableComponent_GetLastDamageEventOrigin final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_GetLastDamageEventOrigin) == 0x000004, "Wrong alignment on MarinerDamageableComponent_GetLastDamageEventOrigin");
static_assert(sizeof(MarinerDamageableComponent_GetLastDamageEventOrigin) == 0x00000C, "Wrong size on MarinerDamageableComponent_GetLastDamageEventOrigin");
static_assert(offsetof(MarinerDamageableComponent_GetLastDamageEventOrigin, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_GetLastDamageEventOrigin::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.GetMegablastDuration
// 0x0004 (0x0004 - 0x0000)
struct MarinerDamageableComponent_GetMegablastDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_GetMegablastDuration) == 0x000004, "Wrong alignment on MarinerDamageableComponent_GetMegablastDuration");
static_assert(sizeof(MarinerDamageableComponent_GetMegablastDuration) == 0x000004, "Wrong size on MarinerDamageableComponent_GetMegablastDuration");
static_assert(offsetof(MarinerDamageableComponent_GetMegablastDuration, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_GetMegablastDuration::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.GetMegablastGameplayEffect
// 0x0008 (0x0008 - 0x0000)
struct MarinerDamageableComponent_GetMegablastGameplayEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_GetMegablastGameplayEffect) == 0x000008, "Wrong alignment on MarinerDamageableComponent_GetMegablastGameplayEffect");
static_assert(sizeof(MarinerDamageableComponent_GetMegablastGameplayEffect) == 0x000008, "Wrong size on MarinerDamageableComponent_GetMegablastGameplayEffect");
static_assert(offsetof(MarinerDamageableComponent_GetMegablastGameplayEffect, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_GetMegablastGameplayEffect::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.GetSelfImpulseMultiplier
// 0x0004 (0x0004 - 0x0000)
struct MarinerDamageableComponent_GetSelfImpulseMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_GetSelfImpulseMultiplier) == 0x000004, "Wrong alignment on MarinerDamageableComponent_GetSelfImpulseMultiplier");
static_assert(sizeof(MarinerDamageableComponent_GetSelfImpulseMultiplier) == 0x000004, "Wrong size on MarinerDamageableComponent_GetSelfImpulseMultiplier");
static_assert(offsetof(MarinerDamageableComponent_GetSelfImpulseMultiplier, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_GetSelfImpulseMultiplier::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.IsInvulnerable
// 0x0001 (0x0001 - 0x0000)
struct MarinerDamageableComponent_IsInvulnerable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_IsInvulnerable) == 0x000001, "Wrong alignment on MarinerDamageableComponent_IsInvulnerable");
static_assert(sizeof(MarinerDamageableComponent_IsInvulnerable) == 0x000001, "Wrong size on MarinerDamageableComponent_IsInvulnerable");
static_assert(offsetof(MarinerDamageableComponent_IsInvulnerable, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_IsInvulnerable::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.IsMegablastActiveOrPending
// 0x0001 (0x0001 - 0x0000)
struct MarinerDamageableComponent_IsMegablastActiveOrPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_IsMegablastActiveOrPending) == 0x000001, "Wrong alignment on MarinerDamageableComponent_IsMegablastActiveOrPending");
static_assert(sizeof(MarinerDamageableComponent_IsMegablastActiveOrPending) == 0x000001, "Wrong size on MarinerDamageableComponent_IsMegablastActiveOrPending");
static_assert(offsetof(MarinerDamageableComponent_IsMegablastActiveOrPending, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_IsMegablastActiveOrPending::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.IsMegablasted
// 0x0001 (0x0001 - 0x0000)
struct MarinerDamageableComponent_IsMegablasted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_IsMegablasted) == 0x000001, "Wrong alignment on MarinerDamageableComponent_IsMegablasted");
static_assert(sizeof(MarinerDamageableComponent_IsMegablasted) == 0x000001, "Wrong size on MarinerDamageableComponent_IsMegablasted");
static_assert(offsetof(MarinerDamageableComponent_IsMegablasted, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_IsMegablasted::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.IsRecentlyDamaged
// 0x0001 (0x0001 - 0x0000)
struct MarinerDamageableComponent_IsRecentlyDamaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_IsRecentlyDamaged) == 0x000001, "Wrong alignment on MarinerDamageableComponent_IsRecentlyDamaged");
static_assert(sizeof(MarinerDamageableComponent_IsRecentlyDamaged) == 0x000001, "Wrong size on MarinerDamageableComponent_IsRecentlyDamaged");
static_assert(offsetof(MarinerDamageableComponent_IsRecentlyDamaged, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_IsRecentlyDamaged::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableComponent.IsRegenerating
// 0x0001 (0x0001 - 0x0000)
struct MarinerDamageableComponent_IsRegenerating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableComponent_IsRegenerating) == 0x000001, "Wrong alignment on MarinerDamageableComponent_IsRegenerating");
static_assert(sizeof(MarinerDamageableComponent_IsRegenerating) == 0x000001, "Wrong size on MarinerDamageableComponent_IsRegenerating");
static_assert(offsetof(MarinerDamageableComponent_IsRegenerating, ReturnValue) == 0x000000, "Member 'MarinerDamageableComponent_IsRegenerating::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableObjectInterface.BP_GetDamageableComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerDamageableObjectInterface_BP_GetDamageableComponent final
{
public:
	class UMarinerDamageableComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableObjectInterface_BP_GetDamageableComponent) == 0x000008, "Wrong alignment on MarinerDamageableObjectInterface_BP_GetDamageableComponent");
static_assert(sizeof(MarinerDamageableObjectInterface_BP_GetDamageableComponent) == 0x000008, "Wrong size on MarinerDamageableObjectInterface_BP_GetDamageableComponent");
static_assert(offsetof(MarinerDamageableObjectInterface_BP_GetDamageableComponent, ReturnValue) == 0x000000, "Member 'MarinerDamageableObjectInterface_BP_GetDamageableComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableObjectInterface.ShouldGenerateCombo
// 0x0001 (0x0001 - 0x0000)
struct MarinerDamageableObjectInterface_ShouldGenerateCombo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableObjectInterface_ShouldGenerateCombo) == 0x000001, "Wrong alignment on MarinerDamageableObjectInterface_ShouldGenerateCombo");
static_assert(sizeof(MarinerDamageableObjectInterface_ShouldGenerateCombo) == 0x000001, "Wrong size on MarinerDamageableObjectInterface_ShouldGenerateCombo");
static_assert(offsetof(MarinerDamageableObjectInterface_ShouldGenerateCombo, ReturnValue) == 0x000000, "Member 'MarinerDamageableObjectInterface_ShouldGenerateCombo::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableObjectInterface.ShouldGenerateHitTicks
// 0x0001 (0x0001 - 0x0000)
struct MarinerDamageableObjectInterface_ShouldGenerateHitTicks final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableObjectInterface_ShouldGenerateHitTicks) == 0x000001, "Wrong alignment on MarinerDamageableObjectInterface_ShouldGenerateHitTicks");
static_assert(sizeof(MarinerDamageableObjectInterface_ShouldGenerateHitTicks) == 0x000001, "Wrong size on MarinerDamageableObjectInterface_ShouldGenerateHitTicks");
static_assert(offsetof(MarinerDamageableObjectInterface_ShouldGenerateHitTicks, ReturnValue) == 0x000000, "Member 'MarinerDamageableObjectInterface_ShouldGenerateHitTicks::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerKnockoutMiniScoreboard.CheckPlayerWidgetsBeforeGameStarts
// 0x0004 (0x0004 - 0x0000)
struct MarinerKnockoutMiniScoreboard_CheckPlayerWidgetsBeforeGameStarts final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerKnockoutMiniScoreboard_CheckPlayerWidgetsBeforeGameStarts) == 0x000004, "Wrong alignment on MarinerKnockoutMiniScoreboard_CheckPlayerWidgetsBeforeGameStarts");
static_assert(sizeof(MarinerKnockoutMiniScoreboard_CheckPlayerWidgetsBeforeGameStarts) == 0x000004, "Wrong size on MarinerKnockoutMiniScoreboard_CheckPlayerWidgetsBeforeGameStarts");
static_assert(offsetof(MarinerKnockoutMiniScoreboard_CheckPlayerWidgetsBeforeGameStarts, Timestamp) == 0x000000, "Member 'MarinerKnockoutMiniScoreboard_CheckPlayerWidgetsBeforeGameStarts::Timestamp' has a wrong offset!");

// Function Mariner.MarinerKnockoutMiniScoreboard.Init
// 0x0008 (0x0008 - 0x0000)
struct MarinerKnockoutMiniScoreboard_Init final
{
public:
	class AMarinerPlayerController*               MarinerPlayerController;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerKnockoutMiniScoreboard_Init) == 0x000008, "Wrong alignment on MarinerKnockoutMiniScoreboard_Init");
static_assert(sizeof(MarinerKnockoutMiniScoreboard_Init) == 0x000008, "Wrong size on MarinerKnockoutMiniScoreboard_Init");
static_assert(offsetof(MarinerKnockoutMiniScoreboard_Init, MarinerPlayerController) == 0x000000, "Member 'MarinerKnockoutMiniScoreboard_Init::MarinerPlayerController' has a wrong offset!");

// Function Mariner.MarinerKnockoutMiniScoreboard.OnPlayerAdded
// 0x0008 (0x0008 - 0x0000)
struct MarinerKnockoutMiniScoreboard_OnPlayerAdded final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerKnockoutMiniScoreboard_OnPlayerAdded) == 0x000008, "Wrong alignment on MarinerKnockoutMiniScoreboard_OnPlayerAdded");
static_assert(sizeof(MarinerKnockoutMiniScoreboard_OnPlayerAdded) == 0x000008, "Wrong size on MarinerKnockoutMiniScoreboard_OnPlayerAdded");
static_assert(offsetof(MarinerKnockoutMiniScoreboard_OnPlayerAdded, PlayerState) == 0x000000, "Member 'MarinerKnockoutMiniScoreboard_OnPlayerAdded::PlayerState' has a wrong offset!");

// Function Mariner.MarinerKnockoutMiniScoreboard.OnPlayerChangedTeam
// 0x0008 (0x0008 - 0x0000)
struct MarinerKnockoutMiniScoreboard_OnPlayerChangedTeam final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerKnockoutMiniScoreboard_OnPlayerChangedTeam) == 0x000008, "Wrong alignment on MarinerKnockoutMiniScoreboard_OnPlayerChangedTeam");
static_assert(sizeof(MarinerKnockoutMiniScoreboard_OnPlayerChangedTeam) == 0x000008, "Wrong size on MarinerKnockoutMiniScoreboard_OnPlayerChangedTeam");
static_assert(offsetof(MarinerKnockoutMiniScoreboard_OnPlayerChangedTeam, PlayerState) == 0x000000, "Member 'MarinerKnockoutMiniScoreboard_OnPlayerChangedTeam::PlayerState' has a wrong offset!");

// Function Mariner.MarinerKnockoutMiniScoreboard.OnPlayerRemoved
// 0x0008 (0x0008 - 0x0000)
struct MarinerKnockoutMiniScoreboard_OnPlayerRemoved final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerKnockoutMiniScoreboard_OnPlayerRemoved) == 0x000008, "Wrong alignment on MarinerKnockoutMiniScoreboard_OnPlayerRemoved");
static_assert(sizeof(MarinerKnockoutMiniScoreboard_OnPlayerRemoved) == 0x000008, "Wrong size on MarinerKnockoutMiniScoreboard_OnPlayerRemoved");
static_assert(offsetof(MarinerKnockoutMiniScoreboard_OnPlayerRemoved, PlayerState) == 0x000000, "Member 'MarinerKnockoutMiniScoreboard_OnPlayerRemoved::PlayerState' has a wrong offset!");

// Function Mariner.MarinerKnockoutMiniScoreboard.OnScoreChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerKnockoutMiniScoreboard_OnScoreChanged final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewScore;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerKnockoutMiniScoreboard_OnScoreChanged) == 0x000004, "Wrong alignment on MarinerKnockoutMiniScoreboard_OnScoreChanged");
static_assert(sizeof(MarinerKnockoutMiniScoreboard_OnScoreChanged) == 0x000008, "Wrong size on MarinerKnockoutMiniScoreboard_OnScoreChanged");
static_assert(offsetof(MarinerKnockoutMiniScoreboard_OnScoreChanged, TeamIndex) == 0x000000, "Member 'MarinerKnockoutMiniScoreboard_OnScoreChanged::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerKnockoutMiniScoreboard_OnScoreChanged, NewScore) == 0x000004, "Member 'MarinerKnockoutMiniScoreboard_OnScoreChanged::NewScore' has a wrong offset!");

// Function Mariner.MarinerKnockoutMiniScoreboard.SetUpPlayerWidget
// 0x0010 (0x0010 - 0x0000)
struct MarinerKnockoutMiniScoreboard_SetUpPlayerWidget final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerSkinnedSelectedCharacterWidget* PlayerWidget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerKnockoutMiniScoreboard_SetUpPlayerWidget) == 0x000008, "Wrong alignment on MarinerKnockoutMiniScoreboard_SetUpPlayerWidget");
static_assert(sizeof(MarinerKnockoutMiniScoreboard_SetUpPlayerWidget) == 0x000010, "Wrong size on MarinerKnockoutMiniScoreboard_SetUpPlayerWidget");
static_assert(offsetof(MarinerKnockoutMiniScoreboard_SetUpPlayerWidget, PlayerState) == 0x000000, "Member 'MarinerKnockoutMiniScoreboard_SetUpPlayerWidget::PlayerState' has a wrong offset!");
static_assert(offsetof(MarinerKnockoutMiniScoreboard_SetUpPlayerWidget, PlayerWidget) == 0x000008, "Member 'MarinerKnockoutMiniScoreboard_SetUpPlayerWidget::PlayerWidget' has a wrong offset!");

// Function Mariner.MarinerKnockoutMiniScoreboard.SetUpPlayerWidgetForOvertime
// 0x0008 (0x0008 - 0x0000)
struct MarinerKnockoutMiniScoreboard_SetUpPlayerWidgetForOvertime final
{
public:
	class UMarinerSkinnedSelectedCharacterWidget* PlayerWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerKnockoutMiniScoreboard_SetUpPlayerWidgetForOvertime) == 0x000008, "Wrong alignment on MarinerKnockoutMiniScoreboard_SetUpPlayerWidgetForOvertime");
static_assert(sizeof(MarinerKnockoutMiniScoreboard_SetUpPlayerWidgetForOvertime) == 0x000008, "Wrong size on MarinerKnockoutMiniScoreboard_SetUpPlayerWidgetForOvertime");
static_assert(offsetof(MarinerKnockoutMiniScoreboard_SetUpPlayerWidgetForOvertime, PlayerWidget) == 0x000000, "Member 'MarinerKnockoutMiniScoreboard_SetUpPlayerWidgetForOvertime::PlayerWidget' has a wrong offset!");

// Function Mariner.MarinerKnockoutMiniScoreboard.SetUpRocketBotAttackWidget
// 0x0008 (0x0008 - 0x0000)
struct MarinerKnockoutMiniScoreboard_SetUpRocketBotAttackWidget final
{
public:
	class UMarinerSkinnedSelectedCharacterWidget* PlayerWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerKnockoutMiniScoreboard_SetUpRocketBotAttackWidget) == 0x000008, "Wrong alignment on MarinerKnockoutMiniScoreboard_SetUpRocketBotAttackWidget");
static_assert(sizeof(MarinerKnockoutMiniScoreboard_SetUpRocketBotAttackWidget) == 0x000008, "Wrong size on MarinerKnockoutMiniScoreboard_SetUpRocketBotAttackWidget");
static_assert(offsetof(MarinerKnockoutMiniScoreboard_SetUpRocketBotAttackWidget, PlayerWidget) == 0x000000, "Member 'MarinerKnockoutMiniScoreboard_SetUpRocketBotAttackWidget::PlayerWidget' has a wrong offset!");

// Function Mariner.MarinerKnockoutMiniScoreboard.GetAnimationAssets
// 0x0020 (0x0020 - 0x0000)
struct MarinerKnockoutMiniScoreboard_GetAnimationAssets final
{
public:
	struct FMarinerKnockoutMiniScoreboardAnimations ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerKnockoutMiniScoreboard_GetAnimationAssets) == 0x000008, "Wrong alignment on MarinerKnockoutMiniScoreboard_GetAnimationAssets");
static_assert(sizeof(MarinerKnockoutMiniScoreboard_GetAnimationAssets) == 0x000020, "Wrong size on MarinerKnockoutMiniScoreboard_GetAnimationAssets");
static_assert(offsetof(MarinerKnockoutMiniScoreboard_GetAnimationAssets, ReturnValue) == 0x000000, "Member 'MarinerKnockoutMiniScoreboard_GetAnimationAssets::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageableProjectile.BP_GetDamageableComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerDamageableProjectile_BP_GetDamageableComponent final
{
public:
	class UMarinerDamageableComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageableProjectile_BP_GetDamageableComponent) == 0x000008, "Wrong alignment on MarinerDamageableProjectile_BP_GetDamageableComponent");
static_assert(sizeof(MarinerDamageableProjectile_BP_GetDamageableComponent) == 0x000008, "Wrong size on MarinerDamageableProjectile_BP_GetDamageableComponent");
static_assert(offsetof(MarinerDamageableProjectile_BP_GetDamageableComponent, ReturnValue) == 0x000000, "Member 'MarinerDamageableProjectile_BP_GetDamageableComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.AuthorityTryReceiveItem
// 0x0010 (0x0010 - 0x0000)
struct MarinerItemInteractionComponent_AuthorityTryReceiveItem final
{
public:
	class AMarinerItem*                           ItemToGive;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1814[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerItemInteractionComponent_AuthorityTryReceiveItem) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_AuthorityTryReceiveItem");
static_assert(sizeof(MarinerItemInteractionComponent_AuthorityTryReceiveItem) == 0x000010, "Wrong size on MarinerItemInteractionComponent_AuthorityTryReceiveItem");
static_assert(offsetof(MarinerItemInteractionComponent_AuthorityTryReceiveItem, ItemToGive) == 0x000000, "Member 'MarinerItemInteractionComponent_AuthorityTryReceiveItem::ItemToGive' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_AuthorityTryReceiveItem, ReturnValue) == 0x000008, "Member 'MarinerItemInteractionComponent_AuthorityTryReceiveItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.DropAnyItemInSlot
// 0x0028 (0x0028 - 0x0000)
struct MarinerItemInteractionComponent_DropAnyItemInSlot final
{
public:
	EMarinerItemSlot                              ItemSlotToDrop;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1815[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DropLocation;                                      // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        DropEffect;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagRequiredToDrop;                                 // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerItem*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_DropAnyItemInSlot) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_DropAnyItemInSlot");
static_assert(sizeof(MarinerItemInteractionComponent_DropAnyItemInSlot) == 0x000028, "Wrong size on MarinerItemInteractionComponent_DropAnyItemInSlot");
static_assert(offsetof(MarinerItemInteractionComponent_DropAnyItemInSlot, ItemSlotToDrop) == 0x000000, "Member 'MarinerItemInteractionComponent_DropAnyItemInSlot::ItemSlotToDrop' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_DropAnyItemInSlot, DropLocation) == 0x000004, "Member 'MarinerItemInteractionComponent_DropAnyItemInSlot::DropLocation' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_DropAnyItemInSlot, DropEffect) == 0x000010, "Member 'MarinerItemInteractionComponent_DropAnyItemInSlot::DropEffect' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_DropAnyItemInSlot, TagRequiredToDrop) == 0x000018, "Member 'MarinerItemInteractionComponent_DropAnyItemInSlot::TagRequiredToDrop' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_DropAnyItemInSlot, ReturnValue) == 0x000020, "Member 'MarinerItemInteractionComponent_DropAnyItemInSlot::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.DropAnyItemInSlotAtCurrentLocation
// 0x0020 (0x0020 - 0x0000)
struct MarinerItemInteractionComponent_DropAnyItemInSlotAtCurrentLocation final
{
public:
	EMarinerItemSlot                              ItemSlotToDrop;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1816[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        DropEffect;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagRequiredToDrop;                                 // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerItem*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_DropAnyItemInSlotAtCurrentLocation) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_DropAnyItemInSlotAtCurrentLocation");
static_assert(sizeof(MarinerItemInteractionComponent_DropAnyItemInSlotAtCurrentLocation) == 0x000020, "Wrong size on MarinerItemInteractionComponent_DropAnyItemInSlotAtCurrentLocation");
static_assert(offsetof(MarinerItemInteractionComponent_DropAnyItemInSlotAtCurrentLocation, ItemSlotToDrop) == 0x000000, "Member 'MarinerItemInteractionComponent_DropAnyItemInSlotAtCurrentLocation::ItemSlotToDrop' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_DropAnyItemInSlotAtCurrentLocation, DropEffect) == 0x000008, "Member 'MarinerItemInteractionComponent_DropAnyItemInSlotAtCurrentLocation::DropEffect' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_DropAnyItemInSlotAtCurrentLocation, TagRequiredToDrop) == 0x000010, "Member 'MarinerItemInteractionComponent_DropAnyItemInSlotAtCurrentLocation::TagRequiredToDrop' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_DropAnyItemInSlotAtCurrentLocation, ReturnValue) == 0x000018, "Member 'MarinerItemInteractionComponent_DropAnyItemInSlotAtCurrentLocation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.DropNextItem
// 0x0028 (0x0028 - 0x0000)
struct MarinerItemInteractionComponent_DropNextItem final
{
public:
	struct FVector                                DropLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1817[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        DropEffect;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagRequiredToDrop;                                 // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerItem*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_DropNextItem) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_DropNextItem");
static_assert(sizeof(MarinerItemInteractionComponent_DropNextItem) == 0x000028, "Wrong size on MarinerItemInteractionComponent_DropNextItem");
static_assert(offsetof(MarinerItemInteractionComponent_DropNextItem, DropLocation) == 0x000000, "Member 'MarinerItemInteractionComponent_DropNextItem::DropLocation' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_DropNextItem, DropEffect) == 0x000010, "Member 'MarinerItemInteractionComponent_DropNextItem::DropEffect' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_DropNextItem, TagRequiredToDrop) == 0x000018, "Member 'MarinerItemInteractionComponent_DropNextItem::TagRequiredToDrop' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_DropNextItem, ReturnValue) == 0x000020, "Member 'MarinerItemInteractionComponent_DropNextItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.HandleInputForTheGivenSlot
// 0x0001 (0x0001 - 0x0000)
struct MarinerItemInteractionComponent_HandleInputForTheGivenSlot final
{
public:
	EMarinerItemSlot                              SlotToInteractWith;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_HandleInputForTheGivenSlot) == 0x000001, "Wrong alignment on MarinerItemInteractionComponent_HandleInputForTheGivenSlot");
static_assert(sizeof(MarinerItemInteractionComponent_HandleInputForTheGivenSlot) == 0x000001, "Wrong size on MarinerItemInteractionComponent_HandleInputForTheGivenSlot");
static_assert(offsetof(MarinerItemInteractionComponent_HandleInputForTheGivenSlot, SlotToInteractWith) == 0x000000, "Member 'MarinerItemInteractionComponent_HandleInputForTheGivenSlot::SlotToInteractWith' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.LocalSetShouldItemAnimationsPlay
// 0x0001 (0x0001 - 0x0000)
struct MarinerItemInteractionComponent_LocalSetShouldItemAnimationsPlay final
{
public:
	bool                                          bShouldPlay;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_LocalSetShouldItemAnimationsPlay) == 0x000001, "Wrong alignment on MarinerItemInteractionComponent_LocalSetShouldItemAnimationsPlay");
static_assert(sizeof(MarinerItemInteractionComponent_LocalSetShouldItemAnimationsPlay) == 0x000001, "Wrong size on MarinerItemInteractionComponent_LocalSetShouldItemAnimationsPlay");
static_assert(offsetof(MarinerItemInteractionComponent_LocalSetShouldItemAnimationsPlay, bShouldPlay) == 0x000000, "Member 'MarinerItemInteractionComponent_LocalSetShouldItemAnimationsPlay::bShouldPlay' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.LockSlot
// 0x0002 (0x0002 - 0x0000)
struct MarinerItemInteractionComponent_LockSlot final
{
public:
	EMarinerItemSlot                              ItemSlotToLock;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldBeLocked;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_LockSlot) == 0x000001, "Wrong alignment on MarinerItemInteractionComponent_LockSlot");
static_assert(sizeof(MarinerItemInteractionComponent_LockSlot) == 0x000002, "Wrong size on MarinerItemInteractionComponent_LockSlot");
static_assert(offsetof(MarinerItemInteractionComponent_LockSlot, ItemSlotToLock) == 0x000000, "Member 'MarinerItemInteractionComponent_LockSlot::ItemSlotToLock' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_LockSlot, bShouldBeLocked) == 0x000001, "Member 'MarinerItemInteractionComponent_LockSlot::bShouldBeLocked' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.MatSwapItem
// 0x0010 (0x0010 - 0x0000)
struct MarinerItemInteractionComponent_MatSwapItem final
{
public:
	class UMaterialInterface*                     NewMaterial;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerItemSlot                              ItemType;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1818[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerItemInteractionComponent_MatSwapItem) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_MatSwapItem");
static_assert(sizeof(MarinerItemInteractionComponent_MatSwapItem) == 0x000010, "Wrong size on MarinerItemInteractionComponent_MatSwapItem");
static_assert(offsetof(MarinerItemInteractionComponent_MatSwapItem, NewMaterial) == 0x000000, "Member 'MarinerItemInteractionComponent_MatSwapItem::NewMaterial' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_MatSwapItem, ItemType) == 0x000008, "Member 'MarinerItemInteractionComponent_MatSwapItem::ItemType' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.MoveItemInSlotToAnotherCharacter
// 0x0018 (0x0018 - 0x0000)
struct MarinerItemInteractionComponent_MoveItemInSlotToAnotherCharacter final
{
public:
	EMarinerItemSlot                              ItemSlotToGiveAway;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1819[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      CharacterToGiveTo;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181A[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerItemInteractionComponent_MoveItemInSlotToAnotherCharacter) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_MoveItemInSlotToAnotherCharacter");
static_assert(sizeof(MarinerItemInteractionComponent_MoveItemInSlotToAnotherCharacter) == 0x000018, "Wrong size on MarinerItemInteractionComponent_MoveItemInSlotToAnotherCharacter");
static_assert(offsetof(MarinerItemInteractionComponent_MoveItemInSlotToAnotherCharacter, ItemSlotToGiveAway) == 0x000000, "Member 'MarinerItemInteractionComponent_MoveItemInSlotToAnotherCharacter::ItemSlotToGiveAway' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_MoveItemInSlotToAnotherCharacter, CharacterToGiveTo) == 0x000008, "Member 'MarinerItemInteractionComponent_MoveItemInSlotToAnotherCharacter::CharacterToGiveTo' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_MoveItemInSlotToAnotherCharacter, ReturnValue) == 0x000010, "Member 'MarinerItemInteractionComponent_MoveItemInSlotToAnotherCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.MulticastDropNextItem
// 0x0018 (0x0018 - 0x0000)
struct MarinerItemInteractionComponent_MulticastDropNextItem final
{
public:
	EMarinerItemSlot                              SlotToDropItemFrom;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    DropLocation;                                      // 0x0004(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        DropEffect;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_MulticastDropNextItem) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_MulticastDropNextItem");
static_assert(sizeof(MarinerItemInteractionComponent_MulticastDropNextItem) == 0x000018, "Wrong size on MarinerItemInteractionComponent_MulticastDropNextItem");
static_assert(offsetof(MarinerItemInteractionComponent_MulticastDropNextItem, SlotToDropItemFrom) == 0x000000, "Member 'MarinerItemInteractionComponent_MulticastDropNextItem::SlotToDropItemFrom' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_MulticastDropNextItem, DropLocation) == 0x000004, "Member 'MarinerItemInteractionComponent_MulticastDropNextItem::DropLocation' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_MulticastDropNextItem, DropEffect) == 0x000010, "Member 'MarinerItemInteractionComponent_MulticastDropNextItem::DropEffect' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.MulticastMoveItemInSlotToAnotherCharacter
// 0x0010 (0x0010 - 0x0000)
struct MarinerItemInteractionComponent_MulticastMoveItemInSlotToAnotherCharacter final
{
public:
	EMarinerItemSlot                              ItemSlotToGiveAway;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      CharacterToGiveTo;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_MulticastMoveItemInSlotToAnotherCharacter) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_MulticastMoveItemInSlotToAnotherCharacter");
static_assert(sizeof(MarinerItemInteractionComponent_MulticastMoveItemInSlotToAnotherCharacter) == 0x000010, "Wrong size on MarinerItemInteractionComponent_MulticastMoveItemInSlotToAnotherCharacter");
static_assert(offsetof(MarinerItemInteractionComponent_MulticastMoveItemInSlotToAnotherCharacter, ItemSlotToGiveAway) == 0x000000, "Member 'MarinerItemInteractionComponent_MulticastMoveItemInSlotToAnotherCharacter::ItemSlotToGiveAway' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_MulticastMoveItemInSlotToAnotherCharacter, CharacterToGiveTo) == 0x000008, "Member 'MarinerItemInteractionComponent_MulticastMoveItemInSlotToAnotherCharacter::CharacterToGiveTo' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.MulticastPerformThrowRelease
// 0x001C (0x001C - 0x0000)
struct MarinerItemInteractionComponent_MulticastPerformThrowRelease final
{
public:
	EMarinerItemSlot                              SlotToReleaseFrom;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    ThrowReleaseRelativeLocation;                      // 0x0004(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    ThrowVelocity;                                     // 0x0010(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_MulticastPerformThrowRelease) == 0x000004, "Wrong alignment on MarinerItemInteractionComponent_MulticastPerformThrowRelease");
static_assert(sizeof(MarinerItemInteractionComponent_MulticastPerformThrowRelease) == 0x00001C, "Wrong size on MarinerItemInteractionComponent_MulticastPerformThrowRelease");
static_assert(offsetof(MarinerItemInteractionComponent_MulticastPerformThrowRelease, SlotToReleaseFrom) == 0x000000, "Member 'MarinerItemInteractionComponent_MulticastPerformThrowRelease::SlotToReleaseFrom' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_MulticastPerformThrowRelease, ThrowReleaseRelativeLocation) == 0x000004, "Member 'MarinerItemInteractionComponent_MulticastPerformThrowRelease::ThrowReleaseRelativeLocation' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_MulticastPerformThrowRelease, ThrowVelocity) == 0x000010, "Member 'MarinerItemInteractionComponent_MulticastPerformThrowRelease::ThrowVelocity' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.OnHeldItemDestroyed
// 0x0008 (0x0008 - 0x0000)
struct MarinerItemInteractionComponent_OnHeldItemDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_OnHeldItemDestroyed) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_OnHeldItemDestroyed");
static_assert(sizeof(MarinerItemInteractionComponent_OnHeldItemDestroyed) == 0x000008, "Wrong size on MarinerItemInteractionComponent_OnHeldItemDestroyed");
static_assert(offsetof(MarinerItemInteractionComponent_OnHeldItemDestroyed, DestroyedActor) == 0x000000, "Member 'MarinerItemInteractionComponent_OnHeldItemDestroyed::DestroyedActor' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.OnMontageBlendingOutStarted
// 0x0010 (0x0010 - 0x0000)
struct MarinerItemInteractionComponent_OnMontageBlendingOutStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerItemInteractionComponent_OnMontageBlendingOutStarted) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_OnMontageBlendingOutStarted");
static_assert(sizeof(MarinerItemInteractionComponent_OnMontageBlendingOutStarted) == 0x000010, "Wrong size on MarinerItemInteractionComponent_OnMontageBlendingOutStarted");
static_assert(offsetof(MarinerItemInteractionComponent_OnMontageBlendingOutStarted, Montage) == 0x000000, "Member 'MarinerItemInteractionComponent_OnMontageBlendingOutStarted::Montage' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_OnMontageBlendingOutStarted, bInterrupted) == 0x000008, "Member 'MarinerItemInteractionComponent_OnMontageBlendingOutStarted::bInterrupted' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct MarinerItemInteractionComponent_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerItemInteractionComponent_OnMontageEnded) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_OnMontageEnded");
static_assert(sizeof(MarinerItemInteractionComponent_OnMontageEnded) == 0x000010, "Wrong size on MarinerItemInteractionComponent_OnMontageEnded");
static_assert(offsetof(MarinerItemInteractionComponent_OnMontageEnded, Montage) == 0x000000, "Member 'MarinerItemInteractionComponent_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_OnMontageEnded, bInterrupted) == 0x000008, "Member 'MarinerItemInteractionComponent_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.OnMontageStarted
// 0x0008 (0x0008 - 0x0000)
struct MarinerItemInteractionComponent_OnMontageStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_OnMontageStarted) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_OnMontageStarted");
static_assert(sizeof(MarinerItemInteractionComponent_OnMontageStarted) == 0x000008, "Wrong size on MarinerItemInteractionComponent_OnMontageStarted");
static_assert(offsetof(MarinerItemInteractionComponent_OnMontageStarted, Montage) == 0x000000, "Member 'MarinerItemInteractionComponent_OnMontageStarted::Montage' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.OnOwnerDeath
// 0x0020 (0x0020 - 0x0000)
struct MarinerItemInteractionComponent_OnOwnerDeath final
{
public:
	const class AActor*                           DeadActor;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMarinerDamageType*               KillingDamage;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            KillInstigator;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 KillingDamageSourceActor;                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_OnOwnerDeath) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_OnOwnerDeath");
static_assert(sizeof(MarinerItemInteractionComponent_OnOwnerDeath) == 0x000020, "Wrong size on MarinerItemInteractionComponent_OnOwnerDeath");
static_assert(offsetof(MarinerItemInteractionComponent_OnOwnerDeath, DeadActor) == 0x000000, "Member 'MarinerItemInteractionComponent_OnOwnerDeath::DeadActor' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_OnOwnerDeath, KillingDamage) == 0x000008, "Member 'MarinerItemInteractionComponent_OnOwnerDeath::KillingDamage' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_OnOwnerDeath, KillInstigator) == 0x000010, "Member 'MarinerItemInteractionComponent_OnOwnerDeath::KillInstigator' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_OnOwnerDeath, KillingDamageSourceActor) == 0x000018, "Member 'MarinerItemInteractionComponent_OnOwnerDeath::KillingDamageSourceActor' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.OnOwnerPerspectiveChanged
// 0x0010 (0x0010 - 0x0000)
struct MarinerItemInteractionComponent_OnOwnerPerspectiveChanged final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFirstPerson;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1820[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerItemInteractionComponent_OnOwnerPerspectiveChanged) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_OnOwnerPerspectiveChanged");
static_assert(sizeof(MarinerItemInteractionComponent_OnOwnerPerspectiveChanged) == 0x000010, "Wrong size on MarinerItemInteractionComponent_OnOwnerPerspectiveChanged");
static_assert(offsetof(MarinerItemInteractionComponent_OnOwnerPerspectiveChanged, Character) == 0x000000, "Member 'MarinerItemInteractionComponent_OnOwnerPerspectiveChanged::Character' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_OnOwnerPerspectiveChanged, bIsFirstPerson) == 0x000008, "Member 'MarinerItemInteractionComponent_OnOwnerPerspectiveChanged::bIsFirstPerson' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.OnReleaseAnimNotifyCharacterEvent
// 0x0001 (0x0001 - 0x0000)
struct MarinerItemInteractionComponent_OnReleaseAnimNotifyCharacterEvent final
{
public:
	EAnimNotifyCharacterEventType                 EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_OnReleaseAnimNotifyCharacterEvent) == 0x000001, "Wrong alignment on MarinerItemInteractionComponent_OnReleaseAnimNotifyCharacterEvent");
static_assert(sizeof(MarinerItemInteractionComponent_OnReleaseAnimNotifyCharacterEvent) == 0x000001, "Wrong size on MarinerItemInteractionComponent_OnReleaseAnimNotifyCharacterEvent");
static_assert(offsetof(MarinerItemInteractionComponent_OnReleaseAnimNotifyCharacterEvent, EventType) == 0x000000, "Member 'MarinerItemInteractionComponent_OnReleaseAnimNotifyCharacterEvent::EventType' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.ReceiveItem
// 0x0008 (0x0008 - 0x0000)
struct MarinerItemInteractionComponent_ReceiveItem final
{
public:
	class AMarinerItem*                           ItemReceived;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_ReceiveItem) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_ReceiveItem");
static_assert(sizeof(MarinerItemInteractionComponent_ReceiveItem) == 0x000008, "Wrong size on MarinerItemInteractionComponent_ReceiveItem");
static_assert(offsetof(MarinerItemInteractionComponent_ReceiveItem, ItemReceived) == 0x000000, "Member 'MarinerItemInteractionComponent_ReceiveItem::ItemReceived' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.RevertMatItem
// 0x0001 (0x0001 - 0x0000)
struct MarinerItemInteractionComponent_RevertMatItem final
{
public:
	EMarinerItemSlot                              ItemType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_RevertMatItem) == 0x000001, "Wrong alignment on MarinerItemInteractionComponent_RevertMatItem");
static_assert(sizeof(MarinerItemInteractionComponent_RevertMatItem) == 0x000001, "Wrong size on MarinerItemInteractionComponent_RevertMatItem");
static_assert(offsetof(MarinerItemInteractionComponent_RevertMatItem, ItemType) == 0x000000, "Member 'MarinerItemInteractionComponent_RevertMatItem::ItemType' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.ServerRequestActivateItem
// 0x0008 (0x0008 - 0x0000)
struct MarinerItemInteractionComponent_ServerRequestActivateItem final
{
public:
	class AMarinerItem*                           ItemToActivate;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_ServerRequestActivateItem) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_ServerRequestActivateItem");
static_assert(sizeof(MarinerItemInteractionComponent_ServerRequestActivateItem) == 0x000008, "Wrong size on MarinerItemInteractionComponent_ServerRequestActivateItem");
static_assert(offsetof(MarinerItemInteractionComponent_ServerRequestActivateItem, ItemToActivate) == 0x000000, "Member 'MarinerItemInteractionComponent_ServerRequestActivateItem::ItemToActivate' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.ServerRequestThrowItem
// 0x0002 (0x0002 - 0x0000)
struct MarinerItemInteractionComponent_ServerRequestThrowItem final
{
public:
	EMarinerItemSlot                              SlotToThrowFrom;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsThrowDrop;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_ServerRequestThrowItem) == 0x000001, "Wrong alignment on MarinerItemInteractionComponent_ServerRequestThrowItem");
static_assert(sizeof(MarinerItemInteractionComponent_ServerRequestThrowItem) == 0x000002, "Wrong size on MarinerItemInteractionComponent_ServerRequestThrowItem");
static_assert(offsetof(MarinerItemInteractionComponent_ServerRequestThrowItem, SlotToThrowFrom) == 0x000000, "Member 'MarinerItemInteractionComponent_ServerRequestThrowItem::SlotToThrowFrom' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_ServerRequestThrowItem, bIsThrowDrop) == 0x000001, "Member 'MarinerItemInteractionComponent_ServerRequestThrowItem::bIsThrowDrop' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.ServerRequestThrowRelease
// 0x001C (0x001C - 0x0000)
struct MarinerItemInteractionComponent_ServerRequestThrowRelease final
{
public:
	EMarinerItemSlot                              SlotToReleaseFrom;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1821[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    ThrowReleaseRelativeLocation;                      // 0x0004(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    ThrowVelocity;                                     // 0x0010(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_ServerRequestThrowRelease) == 0x000004, "Wrong alignment on MarinerItemInteractionComponent_ServerRequestThrowRelease");
static_assert(sizeof(MarinerItemInteractionComponent_ServerRequestThrowRelease) == 0x00001C, "Wrong size on MarinerItemInteractionComponent_ServerRequestThrowRelease");
static_assert(offsetof(MarinerItemInteractionComponent_ServerRequestThrowRelease, SlotToReleaseFrom) == 0x000000, "Member 'MarinerItemInteractionComponent_ServerRequestThrowRelease::SlotToReleaseFrom' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_ServerRequestThrowRelease, ThrowReleaseRelativeLocation) == 0x000004, "Member 'MarinerItemInteractionComponent_ServerRequestThrowRelease::ThrowReleaseRelativeLocation' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_ServerRequestThrowRelease, ThrowVelocity) == 0x000010, "Member 'MarinerItemInteractionComponent_ServerRequestThrowRelease::ThrowVelocity' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.CanPickupItem
// 0x0010 (0x0010 - 0x0000)
struct MarinerItemInteractionComponent_CanPickupItem final
{
public:
	const class AMarinerItem*                     ItemToTryToHold;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1822[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerItemInteractionComponent_CanPickupItem) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_CanPickupItem");
static_assert(sizeof(MarinerItemInteractionComponent_CanPickupItem) == 0x000010, "Wrong size on MarinerItemInteractionComponent_CanPickupItem");
static_assert(offsetof(MarinerItemInteractionComponent_CanPickupItem, ItemToTryToHold) == 0x000000, "Member 'MarinerItemInteractionComponent_CanPickupItem::ItemToTryToHold' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_CanPickupItem, ReturnValue) == 0x000008, "Member 'MarinerItemInteractionComponent_CanPickupItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.DoesSlotContainItem
// 0x0002 (0x0002 - 0x0000)
struct MarinerItemInteractionComponent_DoesSlotContainItem final
{
public:
	EMarinerItemSlot                              SlotToCheck;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_DoesSlotContainItem) == 0x000001, "Wrong alignment on MarinerItemInteractionComponent_DoesSlotContainItem");
static_assert(sizeof(MarinerItemInteractionComponent_DoesSlotContainItem) == 0x000002, "Wrong size on MarinerItemInteractionComponent_DoesSlotContainItem");
static_assert(offsetof(MarinerItemInteractionComponent_DoesSlotContainItem, SlotToCheck) == 0x000000, "Member 'MarinerItemInteractionComponent_DoesSlotContainItem::SlotToCheck' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_DoesSlotContainItem, ReturnValue) == 0x000001, "Member 'MarinerItemInteractionComponent_DoesSlotContainItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.GetFirstFullItemSlot
// 0x0001 (0x0001 - 0x0000)
struct MarinerItemInteractionComponent_GetFirstFullItemSlot final
{
public:
	EMarinerItemSlot                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_GetFirstFullItemSlot) == 0x000001, "Wrong alignment on MarinerItemInteractionComponent_GetFirstFullItemSlot");
static_assert(sizeof(MarinerItemInteractionComponent_GetFirstFullItemSlot) == 0x000001, "Wrong size on MarinerItemInteractionComponent_GetFirstFullItemSlot");
static_assert(offsetof(MarinerItemInteractionComponent_GetFirstFullItemSlot, ReturnValue) == 0x000000, "Member 'MarinerItemInteractionComponent_GetFirstFullItemSlot::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.GetFirstHeldItem
// 0x0008 (0x0008 - 0x0000)
struct MarinerItemInteractionComponent_GetFirstHeldItem final
{
public:
	class AMarinerItem*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_GetFirstHeldItem) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_GetFirstHeldItem");
static_assert(sizeof(MarinerItemInteractionComponent_GetFirstHeldItem) == 0x000008, "Wrong size on MarinerItemInteractionComponent_GetFirstHeldItem");
static_assert(offsetof(MarinerItemInteractionComponent_GetFirstHeldItem, ReturnValue) == 0x000000, "Member 'MarinerItemInteractionComponent_GetFirstHeldItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.GetItemAbilityType
// 0x0010 (0x0010 - 0x0000)
struct MarinerItemInteractionComponent_GetItemAbilityType final
{
public:
	EMarinerItemSlot                              ItemSlot;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1823[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerAbility>            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_GetItemAbilityType) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_GetItemAbilityType");
static_assert(sizeof(MarinerItemInteractionComponent_GetItemAbilityType) == 0x000010, "Wrong size on MarinerItemInteractionComponent_GetItemAbilityType");
static_assert(offsetof(MarinerItemInteractionComponent_GetItemAbilityType, ItemSlot) == 0x000000, "Member 'MarinerItemInteractionComponent_GetItemAbilityType::ItemSlot' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_GetItemAbilityType, ReturnValue) == 0x000008, "Member 'MarinerItemInteractionComponent_GetItemAbilityType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.GetItemBySlot
// 0x0010 (0x0010 - 0x0000)
struct MarinerItemInteractionComponent_GetItemBySlot final
{
public:
	EMarinerItemSlot                              ItemSlot;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1824[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerItem*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_GetItemBySlot) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_GetItemBySlot");
static_assert(sizeof(MarinerItemInteractionComponent_GetItemBySlot) == 0x000010, "Wrong size on MarinerItemInteractionComponent_GetItemBySlot");
static_assert(offsetof(MarinerItemInteractionComponent_GetItemBySlot, ItemSlot) == 0x000000, "Member 'MarinerItemInteractionComponent_GetItemBySlot::ItemSlot' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_GetItemBySlot, ReturnValue) == 0x000008, "Member 'MarinerItemInteractionComponent_GetItemBySlot::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.GetMarinerCharacterOwner
// 0x0008 (0x0008 - 0x0000)
struct MarinerItemInteractionComponent_GetMarinerCharacterOwner final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_GetMarinerCharacterOwner) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_GetMarinerCharacterOwner");
static_assert(sizeof(MarinerItemInteractionComponent_GetMarinerCharacterOwner) == 0x000008, "Wrong size on MarinerItemInteractionComponent_GetMarinerCharacterOwner");
static_assert(offsetof(MarinerItemInteractionComponent_GetMarinerCharacterOwner, ReturnValue) == 0x000000, "Member 'MarinerItemInteractionComponent_GetMarinerCharacterOwner::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.GetOwnerAbilitySystemComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerItemInteractionComponent_GetOwnerAbilitySystemComponent final
{
public:
	class UMarinerAbilitySystemComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_GetOwnerAbilitySystemComponent) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_GetOwnerAbilitySystemComponent");
static_assert(sizeof(MarinerItemInteractionComponent_GetOwnerAbilitySystemComponent) == 0x000008, "Wrong size on MarinerItemInteractionComponent_GetOwnerAbilitySystemComponent");
static_assert(offsetof(MarinerItemInteractionComponent_GetOwnerAbilitySystemComponent, ReturnValue) == 0x000000, "Member 'MarinerItemInteractionComponent_GetOwnerAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.HasRoomToHoldItem
// 0x0010 (0x0010 - 0x0000)
struct MarinerItemInteractionComponent_HasRoomToHoldItem final
{
public:
	const class AMarinerItem*                     ItemToTryToHold;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1825[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerItemInteractionComponent_HasRoomToHoldItem) == 0x000008, "Wrong alignment on MarinerItemInteractionComponent_HasRoomToHoldItem");
static_assert(sizeof(MarinerItemInteractionComponent_HasRoomToHoldItem) == 0x000010, "Wrong size on MarinerItemInteractionComponent_HasRoomToHoldItem");
static_assert(offsetof(MarinerItemInteractionComponent_HasRoomToHoldItem, ItemToTryToHold) == 0x000000, "Member 'MarinerItemInteractionComponent_HasRoomToHoldItem::ItemToTryToHold' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_HasRoomToHoldItem, ReturnValue) == 0x000008, "Member 'MarinerItemInteractionComponent_HasRoomToHoldItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.IsAllItemPickupSuppressed
// 0x0001 (0x0001 - 0x0000)
struct MarinerItemInteractionComponent_IsAllItemPickupSuppressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_IsAllItemPickupSuppressed) == 0x000001, "Wrong alignment on MarinerItemInteractionComponent_IsAllItemPickupSuppressed");
static_assert(sizeof(MarinerItemInteractionComponent_IsAllItemPickupSuppressed) == 0x000001, "Wrong size on MarinerItemInteractionComponent_IsAllItemPickupSuppressed");
static_assert(offsetof(MarinerItemInteractionComponent_IsAllItemPickupSuppressed, ReturnValue) == 0x000000, "Member 'MarinerItemInteractionComponent_IsAllItemPickupSuppressed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.IsHoldingItem
// 0x0001 (0x0001 - 0x0000)
struct MarinerItemInteractionComponent_IsHoldingItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_IsHoldingItem) == 0x000001, "Wrong alignment on MarinerItemInteractionComponent_IsHoldingItem");
static_assert(sizeof(MarinerItemInteractionComponent_IsHoldingItem) == 0x000001, "Wrong size on MarinerItemInteractionComponent_IsHoldingItem");
static_assert(offsetof(MarinerItemInteractionComponent_IsHoldingItem, ReturnValue) == 0x000000, "Member 'MarinerItemInteractionComponent_IsHoldingItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.IsNonPriorityItemPickupSuppressed
// 0x0001 (0x0001 - 0x0000)
struct MarinerItemInteractionComponent_IsNonPriorityItemPickupSuppressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_IsNonPriorityItemPickupSuppressed) == 0x000001, "Wrong alignment on MarinerItemInteractionComponent_IsNonPriorityItemPickupSuppressed");
static_assert(sizeof(MarinerItemInteractionComponent_IsNonPriorityItemPickupSuppressed) == 0x000001, "Wrong size on MarinerItemInteractionComponent_IsNonPriorityItemPickupSuppressed");
static_assert(offsetof(MarinerItemInteractionComponent_IsNonPriorityItemPickupSuppressed, ReturnValue) == 0x000000, "Member 'MarinerItemInteractionComponent_IsNonPriorityItemPickupSuppressed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.IsPriorityItemPickupSuppressed
// 0x0001 (0x0001 - 0x0000)
struct MarinerItemInteractionComponent_IsPriorityItemPickupSuppressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_IsPriorityItemPickupSuppressed) == 0x000001, "Wrong alignment on MarinerItemInteractionComponent_IsPriorityItemPickupSuppressed");
static_assert(sizeof(MarinerItemInteractionComponent_IsPriorityItemPickupSuppressed) == 0x000001, "Wrong size on MarinerItemInteractionComponent_IsPriorityItemPickupSuppressed");
static_assert(offsetof(MarinerItemInteractionComponent_IsPriorityItemPickupSuppressed, ReturnValue) == 0x000000, "Member 'MarinerItemInteractionComponent_IsPriorityItemPickupSuppressed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerItemInteractionComponent.IsSlotLocked
// 0x0002 (0x0002 - 0x0000)
struct MarinerItemInteractionComponent_IsSlotLocked final
{
public:
	EMarinerItemSlot                              ItemSlotToCheck;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerItemInteractionComponent_IsSlotLocked) == 0x000001, "Wrong alignment on MarinerItemInteractionComponent_IsSlotLocked");
static_assert(sizeof(MarinerItemInteractionComponent_IsSlotLocked) == 0x000002, "Wrong size on MarinerItemInteractionComponent_IsSlotLocked");
static_assert(offsetof(MarinerItemInteractionComponent_IsSlotLocked, ItemSlotToCheck) == 0x000000, "Member 'MarinerItemInteractionComponent_IsSlotLocked::ItemSlotToCheck' has a wrong offset!");
static_assert(offsetof(MarinerItemInteractionComponent_IsSlotLocked, ReturnValue) == 0x000001, "Member 'MarinerItemInteractionComponent_IsSlotLocked::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageAttributes.OnRep_AccumulatedDamage
// 0x0010 (0x0010 - 0x0000)
struct MarinerDamageAttributes_OnRep_AccumulatedDamage final
{
public:
	struct FMarinerGameplayAttributeData          OldAccumulatedDamage;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageAttributes_OnRep_AccumulatedDamage) == 0x000008, "Wrong alignment on MarinerDamageAttributes_OnRep_AccumulatedDamage");
static_assert(sizeof(MarinerDamageAttributes_OnRep_AccumulatedDamage) == 0x000010, "Wrong size on MarinerDamageAttributes_OnRep_AccumulatedDamage");
static_assert(offsetof(MarinerDamageAttributes_OnRep_AccumulatedDamage, OldAccumulatedDamage) == 0x000000, "Member 'MarinerDamageAttributes_OnRep_AccumulatedDamage::OldAccumulatedDamage' has a wrong offset!");

// Function Mariner.MarinerDamageAttributes.OnRep_AccumulatedDamageRegenPerSecond
// 0x0010 (0x0010 - 0x0000)
struct MarinerDamageAttributes_OnRep_AccumulatedDamageRegenPerSecond final
{
public:
	struct FMarinerGameplayAttributeData          OldAccumulatedDamageRegenPerSecond;                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageAttributes_OnRep_AccumulatedDamageRegenPerSecond) == 0x000008, "Wrong alignment on MarinerDamageAttributes_OnRep_AccumulatedDamageRegenPerSecond");
static_assert(sizeof(MarinerDamageAttributes_OnRep_AccumulatedDamageRegenPerSecond) == 0x000010, "Wrong size on MarinerDamageAttributes_OnRep_AccumulatedDamageRegenPerSecond");
static_assert(offsetof(MarinerDamageAttributes_OnRep_AccumulatedDamageRegenPerSecond, OldAccumulatedDamageRegenPerSecond) == 0x000000, "Member 'MarinerDamageAttributes_OnRep_AccumulatedDamageRegenPerSecond::OldAccumulatedDamageRegenPerSecond' has a wrong offset!");

// Function Mariner.MarinerDamageAttributes.OnRep_AccumulatedDamageRegenSuppressionTime
// 0x0010 (0x0010 - 0x0000)
struct MarinerDamageAttributes_OnRep_AccumulatedDamageRegenSuppressionTime final
{
public:
	struct FMarinerGameplayAttributeData          OldAccumulatedDamageRegenSuppressionTime;          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageAttributes_OnRep_AccumulatedDamageRegenSuppressionTime) == 0x000008, "Wrong alignment on MarinerDamageAttributes_OnRep_AccumulatedDamageRegenSuppressionTime");
static_assert(sizeof(MarinerDamageAttributes_OnRep_AccumulatedDamageRegenSuppressionTime) == 0x000010, "Wrong size on MarinerDamageAttributes_OnRep_AccumulatedDamageRegenSuppressionTime");
static_assert(offsetof(MarinerDamageAttributes_OnRep_AccumulatedDamageRegenSuppressionTime, OldAccumulatedDamageRegenSuppressionTime) == 0x000000, "Member 'MarinerDamageAttributes_OnRep_AccumulatedDamageRegenSuppressionTime::OldAccumulatedDamageRegenSuppressionTime' has a wrong offset!");

// Function Mariner.MarinerDamageAttributes.OnRep_DamageReceivedMultiplier
// 0x0010 (0x0010 - 0x0000)
struct MarinerDamageAttributes_OnRep_DamageReceivedMultiplier final
{
public:
	struct FMarinerGameplayAttributeData          OldDamageMultiplier;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageAttributes_OnRep_DamageReceivedMultiplier) == 0x000008, "Wrong alignment on MarinerDamageAttributes_OnRep_DamageReceivedMultiplier");
static_assert(sizeof(MarinerDamageAttributes_OnRep_DamageReceivedMultiplier) == 0x000010, "Wrong size on MarinerDamageAttributes_OnRep_DamageReceivedMultiplier");
static_assert(offsetof(MarinerDamageAttributes_OnRep_DamageReceivedMultiplier, OldDamageMultiplier) == 0x000000, "Member 'MarinerDamageAttributes_OnRep_DamageReceivedMultiplier::OldDamageMultiplier' has a wrong offset!");

// Function Mariner.MarinerDamageAttributes.OnRep_ImpulseReceivedMultiplier
// 0x0010 (0x0010 - 0x0000)
struct MarinerDamageAttributes_OnRep_ImpulseReceivedMultiplier final
{
public:
	struct FMarinerGameplayAttributeData          OldImpulseReceivedMultiplier;                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageAttributes_OnRep_ImpulseReceivedMultiplier) == 0x000008, "Wrong alignment on MarinerDamageAttributes_OnRep_ImpulseReceivedMultiplier");
static_assert(sizeof(MarinerDamageAttributes_OnRep_ImpulseReceivedMultiplier) == 0x000010, "Wrong size on MarinerDamageAttributes_OnRep_ImpulseReceivedMultiplier");
static_assert(offsetof(MarinerDamageAttributes_OnRep_ImpulseReceivedMultiplier, OldImpulseReceivedMultiplier) == 0x000000, "Member 'MarinerDamageAttributes_OnRep_ImpulseReceivedMultiplier::OldImpulseReceivedMultiplier' has a wrong offset!");

// Function Mariner.MarinerDamageAttributes.OnRep_SelfImpulseReceivedMultiplier
// 0x0010 (0x0010 - 0x0000)
struct MarinerDamageAttributes_OnRep_SelfImpulseReceivedMultiplier final
{
public:
	struct FMarinerGameplayAttributeData          OldSelfImpulseReceivedMultiplier;                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageAttributes_OnRep_SelfImpulseReceivedMultiplier) == 0x000008, "Wrong alignment on MarinerDamageAttributes_OnRep_SelfImpulseReceivedMultiplier");
static_assert(sizeof(MarinerDamageAttributes_OnRep_SelfImpulseReceivedMultiplier) == 0x000010, "Wrong size on MarinerDamageAttributes_OnRep_SelfImpulseReceivedMultiplier");
static_assert(offsetof(MarinerDamageAttributes_OnRep_SelfImpulseReceivedMultiplier, OldSelfImpulseReceivedMultiplier) == 0x000000, "Member 'MarinerDamageAttributes_OnRep_SelfImpulseReceivedMultiplier::OldSelfImpulseReceivedMultiplier' has a wrong offset!");

// Function Mariner.MarinerDamageAttributes.OnRep_ShieldUsesRemaining
// 0x0010 (0x0010 - 0x0000)
struct MarinerDamageAttributes_OnRep_ShieldUsesRemaining final
{
public:
	struct FMarinerGameplayAttributeData          OldShieldUsesRemaining;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageAttributes_OnRep_ShieldUsesRemaining) == 0x000008, "Wrong alignment on MarinerDamageAttributes_OnRep_ShieldUsesRemaining");
static_assert(sizeof(MarinerDamageAttributes_OnRep_ShieldUsesRemaining) == 0x000010, "Wrong size on MarinerDamageAttributes_OnRep_ShieldUsesRemaining");
static_assert(offsetof(MarinerDamageAttributes_OnRep_ShieldUsesRemaining, OldShieldUsesRemaining) == 0x000000, "Member 'MarinerDamageAttributes_OnRep_ShieldUsesRemaining::OldShieldUsesRemaining' has a wrong offset!");

// Function Mariner.MarinerDamageDebugManager.GetDamageDebugArchive
// 0x0010 (0x0010 - 0x0000)
struct MarinerDamageDebugManager_GetDamageDebugArchive final
{
public:
	TArray<class UMarinerDamageDebugRecord*>      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDamageDebugManager_GetDamageDebugArchive) == 0x000008, "Wrong alignment on MarinerDamageDebugManager_GetDamageDebugArchive");
static_assert(sizeof(MarinerDamageDebugManager_GetDamageDebugArchive) == 0x000010, "Wrong size on MarinerDamageDebugManager_GetDamageDebugArchive");
static_assert(offsetof(MarinerDamageDebugManager_GetDamageDebugArchive, ReturnValue) == 0x000000, "Member 'MarinerDamageDebugManager_GetDamageDebugArchive::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAOEDamageDebugRecord.GetDamageCandidateActorNames
// 0x0010 (0x0010 - 0x0000)
struct MarinerAOEDamageDebugRecord_GetDamageCandidateActorNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAOEDamageDebugRecord_GetDamageCandidateActorNames) == 0x000008, "Wrong alignment on MarinerAOEDamageDebugRecord_GetDamageCandidateActorNames");
static_assert(sizeof(MarinerAOEDamageDebugRecord_GetDamageCandidateActorNames) == 0x000010, "Wrong size on MarinerAOEDamageDebugRecord_GetDamageCandidateActorNames");
static_assert(offsetof(MarinerAOEDamageDebugRecord_GetDamageCandidateActorNames, ReturnValue) == 0x000000, "Member 'MarinerAOEDamageDebugRecord_GetDamageCandidateActorNames::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAOEDamageDebugRecord.GetDamagedActorNames
// 0x0010 (0x0010 - 0x0000)
struct MarinerAOEDamageDebugRecord_GetDamagedActorNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAOEDamageDebugRecord_GetDamagedActorNames) == 0x000008, "Wrong alignment on MarinerAOEDamageDebugRecord_GetDamagedActorNames");
static_assert(sizeof(MarinerAOEDamageDebugRecord_GetDamagedActorNames) == 0x000010, "Wrong size on MarinerAOEDamageDebugRecord_GetDamagedActorNames");
static_assert(offsetof(MarinerAOEDamageDebugRecord_GetDamagedActorNames, ReturnValue) == 0x000000, "Member 'MarinerAOEDamageDebugRecord_GetDamagedActorNames::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAOEDamageDebugRecord.GetDamageDebugRecordForActorDamaged
// 0x0048 (0x0048 - 0x0000)
struct MarinerAOEDamageDebugRecord_GetDamageDebugRecordForActorDamaged final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerActorDamagedDebugRecord        ReturnValue;                                       // 0x0008(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAOEDamageDebugRecord_GetDamageDebugRecordForActorDamaged) == 0x000004, "Wrong alignment on MarinerAOEDamageDebugRecord_GetDamageDebugRecordForActorDamaged");
static_assert(sizeof(MarinerAOEDamageDebugRecord_GetDamageDebugRecordForActorDamaged) == 0x000048, "Wrong size on MarinerAOEDamageDebugRecord_GetDamageDebugRecordForActorDamaged");
static_assert(offsetof(MarinerAOEDamageDebugRecord_GetDamageDebugRecordForActorDamaged, ActorName) == 0x000000, "Member 'MarinerAOEDamageDebugRecord_GetDamageDebugRecordForActorDamaged::ActorName' has a wrong offset!");
static_assert(offsetof(MarinerAOEDamageDebugRecord_GetDamageDebugRecordForActorDamaged, ReturnValue) == 0x000008, "Member 'MarinerAOEDamageDebugRecord_GetDamageDebugRecordForActorDamaged::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerAOEDamageDebugRecord.GetObstructionTestDebugRecordsForActor
// 0x0018 (0x0018 - 0x0000)
struct MarinerAOEDamageDebugRecord_GetObstructionTestDebugRecordsForActor final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarinerAOEObstructionTestDebugRecord> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerAOEDamageDebugRecord_GetObstructionTestDebugRecordsForActor) == 0x000008, "Wrong alignment on MarinerAOEDamageDebugRecord_GetObstructionTestDebugRecordsForActor");
static_assert(sizeof(MarinerAOEDamageDebugRecord_GetObstructionTestDebugRecordsForActor) == 0x000018, "Wrong size on MarinerAOEDamageDebugRecord_GetObstructionTestDebugRecordsForActor");
static_assert(offsetof(MarinerAOEDamageDebugRecord_GetObstructionTestDebugRecordsForActor, ActorName) == 0x000000, "Member 'MarinerAOEDamageDebugRecord_GetObstructionTestDebugRecordsForActor::ActorName' has a wrong offset!");
static_assert(offsetof(MarinerAOEDamageDebugRecord_GetObstructionTestDebugRecordsForActor, ReturnValue) == 0x000008, "Member 'MarinerAOEDamageDebugRecord_GetObstructionTestDebugRecordsForActor::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.GetArtifactSoftTexture
// 0x0048 (0x0048 - 0x0000)
struct MarinerUIGlobals_GetArtifactSoftTexture final
{
public:
	EMangoItemType                                ArtifactType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LookupId;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182C[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0020(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_GetArtifactSoftTexture) == 0x000008, "Wrong alignment on MarinerUIGlobals_GetArtifactSoftTexture");
static_assert(sizeof(MarinerUIGlobals_GetArtifactSoftTexture) == 0x000048, "Wrong size on MarinerUIGlobals_GetArtifactSoftTexture");
static_assert(offsetof(MarinerUIGlobals_GetArtifactSoftTexture, ArtifactType) == 0x000000, "Member 'MarinerUIGlobals_GetArtifactSoftTexture::ArtifactType' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_GetArtifactSoftTexture, LookupId) == 0x000008, "Member 'MarinerUIGlobals_GetArtifactSoftTexture::LookupId' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_GetArtifactSoftTexture, Level) == 0x000018, "Member 'MarinerUIGlobals_GetArtifactSoftTexture::Level' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_GetArtifactSoftTexture, ReturnValue) == 0x000020, "Member 'MarinerUIGlobals_GetArtifactSoftTexture::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.IsArtifactDataLoaded
// 0x0001 (0x0001 - 0x0000)
struct MarinerUIGlobals_IsArtifactDataLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_IsArtifactDataLoaded) == 0x000001, "Wrong alignment on MarinerUIGlobals_IsArtifactDataLoaded");
static_assert(sizeof(MarinerUIGlobals_IsArtifactDataLoaded) == 0x000001, "Wrong size on MarinerUIGlobals_IsArtifactDataLoaded");
static_assert(offsetof(MarinerUIGlobals_IsArtifactDataLoaded, ReturnValue) == 0x000000, "Member 'MarinerUIGlobals_IsArtifactDataLoaded::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.IsValidRank
// 0x0008 (0x0008 - 0x0000)
struct MarinerUIGlobals_IsValidRank final
{
public:
	int32                                         InPlayerRank;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182D[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIGlobals_IsValidRank) == 0x000004, "Wrong alignment on MarinerUIGlobals_IsValidRank");
static_assert(sizeof(MarinerUIGlobals_IsValidRank) == 0x000008, "Wrong size on MarinerUIGlobals_IsValidRank");
static_assert(offsetof(MarinerUIGlobals_IsValidRank, InPlayerRank) == 0x000000, "Member 'MarinerUIGlobals_IsValidRank::InPlayerRank' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_IsValidRank, ReturnValue) == 0x000004, "Member 'MarinerUIGlobals_IsValidRank::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.PopulateArtifactFromData
// 0x0018 (0x0018 - 0x0000)
struct MarinerUIGlobals_PopulateArtifactFromData final
{
public:
	const class UMarinerArtifactDataAsset*        ArtifactData;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLevel;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerArtifactImage*                  ArtifactImage;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_PopulateArtifactFromData) == 0x000008, "Wrong alignment on MarinerUIGlobals_PopulateArtifactFromData");
static_assert(sizeof(MarinerUIGlobals_PopulateArtifactFromData) == 0x000018, "Wrong size on MarinerUIGlobals_PopulateArtifactFromData");
static_assert(offsetof(MarinerUIGlobals_PopulateArtifactFromData, ArtifactData) == 0x000000, "Member 'MarinerUIGlobals_PopulateArtifactFromData::ArtifactData' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulateArtifactFromData, CurrentLevel) == 0x000008, "Member 'MarinerUIGlobals_PopulateArtifactFromData::CurrentLevel' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulateArtifactFromData, ArtifactImage) == 0x000010, "Member 'MarinerUIGlobals_PopulateArtifactFromData::ArtifactImage' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.PopulateEquippedCharacterArtifactForProfile
// 0x0320 (0x0320 - 0x0000)
struct MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile final
{
public:
	const class UMarinerGameInstance*             MarinerGameInstance;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x0008(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoProfile                          Profile;                                           // 0x0030(0x02E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x0310(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRanked;                                           // 0x0311(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182F[0x6];                                     // 0x0312(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerArtifactImage*                  ArtifactImage;                                     // 0x0318(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile) == 0x000008, "Wrong alignment on MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile");
static_assert(sizeof(MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile) == 0x000320, "Wrong size on MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile");
static_assert(offsetof(MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile, MarinerGameInstance) == 0x000000, "Member 'MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile::MarinerGameInstance' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile, CharacterClass) == 0x000008, "Member 'MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile::CharacterClass' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile, Profile) == 0x000030, "Member 'MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile::Profile' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile, ItemType) == 0x000310, "Member 'MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile::ItemType' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile, bRanked) == 0x000311, "Member 'MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile::bRanked' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile, ArtifactImage) == 0x000318, "Member 'MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile::ArtifactImage' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.PopulateLocalEquippedCharacterArtifact
// 0x0040 (0x0040 - 0x0000)
struct MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact final
{
public:
	const class UMarinerGameInstance*             MarinerGameInstance;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x0008(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRanked;                                           // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1830[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerArtifactImage*                  ArtifactImage;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact) == 0x000008, "Wrong alignment on MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact");
static_assert(sizeof(MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact) == 0x000040, "Wrong size on MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact");
static_assert(offsetof(MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact, MarinerGameInstance) == 0x000000, "Member 'MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact::MarinerGameInstance' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact, CharacterClass) == 0x000008, "Member 'MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact::CharacterClass' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact, ItemType) == 0x000030, "Member 'MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact::ItemType' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact, bRanked) == 0x000031, "Member 'MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact::bRanked' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact, ArtifactImage) == 0x000038, "Member 'MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact::ArtifactImage' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.PopulatePlatformIcon
// 0x0020 (0x0020 - 0x0000)
struct MarinerUIGlobals_PopulatePlatformIcon final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Icon;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Platform;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCrossplaySetting;                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1831[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIGlobals_PopulatePlatformIcon) == 0x000008, "Wrong alignment on MarinerUIGlobals_PopulatePlatformIcon");
static_assert(sizeof(MarinerUIGlobals_PopulatePlatformIcon) == 0x000020, "Wrong size on MarinerUIGlobals_PopulatePlatformIcon");
static_assert(offsetof(MarinerUIGlobals_PopulatePlatformIcon, WorldContextObject) == 0x000000, "Member 'MarinerUIGlobals_PopulatePlatformIcon::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulatePlatformIcon, Icon) == 0x000008, "Member 'MarinerUIGlobals_PopulatePlatformIcon::Icon' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulatePlatformIcon, Platform) == 0x000010, "Member 'MarinerUIGlobals_PopulatePlatformIcon::Platform' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulatePlatformIcon, bIgnoreCrossplaySetting) == 0x000018, "Member 'MarinerUIGlobals_PopulatePlatformIcon::bIgnoreCrossplaySetting' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.PopulateRankIcon
// 0x0018 (0x0018 - 0x0000)
struct MarinerUIGlobals_PopulateRankIcon final
{
public:
	int32                                         PlayerRank;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1832[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 RankIcon;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSmallImage;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1833[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIGlobals_PopulateRankIcon) == 0x000008, "Wrong alignment on MarinerUIGlobals_PopulateRankIcon");
static_assert(sizeof(MarinerUIGlobals_PopulateRankIcon) == 0x000018, "Wrong size on MarinerUIGlobals_PopulateRankIcon");
static_assert(offsetof(MarinerUIGlobals_PopulateRankIcon, PlayerRank) == 0x000000, "Member 'MarinerUIGlobals_PopulateRankIcon::PlayerRank' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulateRankIcon, RankIcon) == 0x000008, "Member 'MarinerUIGlobals_PopulateRankIcon::RankIcon' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_PopulateRankIcon, bUseSmallImage) == 0x000010, "Member 'MarinerUIGlobals_PopulateRankIcon::bUseSmallImage' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.GetAllArtifactsUIInfoForType
// 0x0058 (0x0058 - 0x0000)
struct MarinerUIGlobals_GetAllArtifactsUIInfoForType final
{
public:
	EMangoItemType                                ArtifactType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1834[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UItemLoadResponse*, class UMarinerArtifactDataAsset*> ReturnValue;                                       // 0x0008(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_GetAllArtifactsUIInfoForType) == 0x000008, "Wrong alignment on MarinerUIGlobals_GetAllArtifactsUIInfoForType");
static_assert(sizeof(MarinerUIGlobals_GetAllArtifactsUIInfoForType) == 0x000058, "Wrong size on MarinerUIGlobals_GetAllArtifactsUIInfoForType");
static_assert(offsetof(MarinerUIGlobals_GetAllArtifactsUIInfoForType, ArtifactType) == 0x000000, "Member 'MarinerUIGlobals_GetAllArtifactsUIInfoForType::ArtifactType' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_GetAllArtifactsUIInfoForType, ReturnValue) == 0x000008, "Member 'MarinerUIGlobals_GetAllArtifactsUIInfoForType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.GetArtifactUIDataAsset
// 0x0020 (0x0020 - 0x0000)
struct MarinerUIGlobals_GetArtifactUIDataAsset final
{
public:
	EMangoItemType                                ArtifactType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1835[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LookupId;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerArtifactDataAsset*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_GetArtifactUIDataAsset) == 0x000008, "Wrong alignment on MarinerUIGlobals_GetArtifactUIDataAsset");
static_assert(sizeof(MarinerUIGlobals_GetArtifactUIDataAsset) == 0x000020, "Wrong size on MarinerUIGlobals_GetArtifactUIDataAsset");
static_assert(offsetof(MarinerUIGlobals_GetArtifactUIDataAsset, ArtifactType) == 0x000000, "Member 'MarinerUIGlobals_GetArtifactUIDataAsset::ArtifactType' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_GetArtifactUIDataAsset, LookupId) == 0x000008, "Member 'MarinerUIGlobals_GetArtifactUIDataAsset::LookupId' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_GetArtifactUIDataAsset, ReturnValue) == 0x000018, "Member 'MarinerUIGlobals_GetArtifactUIDataAsset::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.GetCharacterAbility
// 0x0038 (0x0038 - 0x0000)
struct MarinerUIGlobals_GetCharacterAbility final
{
public:
	TSoftClassPtr<class UClass>                   Character;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerInputActions                          AbilityInput;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1836[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHUDAbilityUIData>          ReturnValue;                                       // 0x0030(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_GetCharacterAbility) == 0x000008, "Wrong alignment on MarinerUIGlobals_GetCharacterAbility");
static_assert(sizeof(MarinerUIGlobals_GetCharacterAbility) == 0x000038, "Wrong size on MarinerUIGlobals_GetCharacterAbility");
static_assert(offsetof(MarinerUIGlobals_GetCharacterAbility, Character) == 0x000000, "Member 'MarinerUIGlobals_GetCharacterAbility::Character' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_GetCharacterAbility, AbilityInput) == 0x000028, "Member 'MarinerUIGlobals_GetCharacterAbility::AbilityInput' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_GetCharacterAbility, ReturnValue) == 0x000030, "Member 'MarinerUIGlobals_GetCharacterAbility::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.GetCharactersAbilitiesUIData
// 0x0078 (0x0078 - 0x0000)
struct MarinerUIGlobals_GetCharactersAbilitiesUIData final
{
public:
	TSoftClassPtr<class UClass>                   Character;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerUICharacterAbilityData         ReturnValue;                                       // 0x0028(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_GetCharactersAbilitiesUIData) == 0x000008, "Wrong alignment on MarinerUIGlobals_GetCharactersAbilitiesUIData");
static_assert(sizeof(MarinerUIGlobals_GetCharactersAbilitiesUIData) == 0x000078, "Wrong size on MarinerUIGlobals_GetCharactersAbilitiesUIData");
static_assert(offsetof(MarinerUIGlobals_GetCharactersAbilitiesUIData, Character) == 0x000000, "Member 'MarinerUIGlobals_GetCharactersAbilitiesUIData::Character' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_GetCharactersAbilitiesUIData, ReturnValue) == 0x000028, "Member 'MarinerUIGlobals_GetCharactersAbilitiesUIData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.GetCollectionForItem
// 0x0058 (0x0058 - 0x0000)
struct MarinerUIGlobals_GetCollectionForItem final
{
public:
	struct FMangoItem                             Item;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UMarinerCollectionDataAsset*            ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_GetCollectionForItem) == 0x000008, "Wrong alignment on MarinerUIGlobals_GetCollectionForItem");
static_assert(sizeof(MarinerUIGlobals_GetCollectionForItem) == 0x000058, "Wrong size on MarinerUIGlobals_GetCollectionForItem");
static_assert(offsetof(MarinerUIGlobals_GetCollectionForItem, Item) == 0x000000, "Member 'MarinerUIGlobals_GetCollectionForItem::Item' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_GetCollectionForItem, ReturnValue) == 0x000050, "Member 'MarinerUIGlobals_GetCollectionForItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.GetItemTypeIcon
// 0x0090 (0x0090 - 0x0000)
struct MarinerUIGlobals_GetItemTypeIcon final
{
public:
	EMangoItemType                                ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1837[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ReturnValue;                                       // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_GetItemTypeIcon) == 0x000008, "Wrong alignment on MarinerUIGlobals_GetItemTypeIcon");
static_assert(sizeof(MarinerUIGlobals_GetItemTypeIcon) == 0x000090, "Wrong size on MarinerUIGlobals_GetItemTypeIcon");
static_assert(offsetof(MarinerUIGlobals_GetItemTypeIcon, ItemType) == 0x000000, "Member 'MarinerUIGlobals_GetItemTypeIcon::ItemType' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_GetItemTypeIcon, ReturnValue) == 0x000008, "Member 'MarinerUIGlobals_GetItemTypeIcon::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.GetItemTypeName
// 0x0068 (0x0068 - 0x0000)
struct MarinerUIGlobals_GetItemTypeName final
{
public:
	struct FMangoItem                             Item;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0050(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_GetItemTypeName) == 0x000008, "Wrong alignment on MarinerUIGlobals_GetItemTypeName");
static_assert(sizeof(MarinerUIGlobals_GetItemTypeName) == 0x000068, "Wrong size on MarinerUIGlobals_GetItemTypeName");
static_assert(offsetof(MarinerUIGlobals_GetItemTypeName, Item) == 0x000000, "Member 'MarinerUIGlobals_GetItemTypeName::Item' has a wrong offset!");
static_assert(offsetof(MarinerUIGlobals_GetItemTypeName, ReturnValue) == 0x000050, "Member 'MarinerUIGlobals_GetItemTypeName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.GetMythicEditionCollection
// 0x0008 (0x0008 - 0x0000)
struct MarinerUIGlobals_GetMythicEditionCollection final
{
public:
	class UMarinerCollectionDataAsset*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_GetMythicEditionCollection) == 0x000008, "Wrong alignment on MarinerUIGlobals_GetMythicEditionCollection");
static_assert(sizeof(MarinerUIGlobals_GetMythicEditionCollection) == 0x000008, "Wrong size on MarinerUIGlobals_GetMythicEditionCollection");
static_assert(offsetof(MarinerUIGlobals_GetMythicEditionCollection, ReturnValue) == 0x000000, "Member 'MarinerUIGlobals_GetMythicEditionCollection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.IsChatEmoteAnimationsEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerUIGlobals_IsChatEmoteAnimationsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_IsChatEmoteAnimationsEnabled) == 0x000001, "Wrong alignment on MarinerUIGlobals_IsChatEmoteAnimationsEnabled");
static_assert(sizeof(MarinerUIGlobals_IsChatEmoteAnimationsEnabled) == 0x000001, "Wrong size on MarinerUIGlobals_IsChatEmoteAnimationsEnabled");
static_assert(offsetof(MarinerUIGlobals_IsChatEmoteAnimationsEnabled, ReturnValue) == 0x000000, "Member 'MarinerUIGlobals_IsChatEmoteAnimationsEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.IsPreGameEmoteEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerUIGlobals_IsPreGameEmoteEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_IsPreGameEmoteEnabled) == 0x000001, "Wrong alignment on MarinerUIGlobals_IsPreGameEmoteEnabled");
static_assert(sizeof(MarinerUIGlobals_IsPreGameEmoteEnabled) == 0x000001, "Wrong size on MarinerUIGlobals_IsPreGameEmoteEnabled");
static_assert(offsetof(MarinerUIGlobals_IsPreGameEmoteEnabled, ReturnValue) == 0x000000, "Member 'MarinerUIGlobals_IsPreGameEmoteEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIGlobals.IsVictoryPoseEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerUIGlobals_IsVictoryPoseEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIGlobals_IsVictoryPoseEnabled) == 0x000001, "Wrong alignment on MarinerUIGlobals_IsVictoryPoseEnabled");
static_assert(sizeof(MarinerUIGlobals_IsVictoryPoseEnabled) == 0x000001, "Wrong size on MarinerUIGlobals_IsVictoryPoseEnabled");
static_assert(offsetof(MarinerUIGlobals_IsVictoryPoseEnabled, ReturnValue) == 0x000000, "Member 'MarinerUIGlobals_IsVictoryPoseEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageLibrary.CauseAOEDamage
// 0x0050 (0x0050 - 0x0000)
struct MarinerDamageLibrary_CauseAOEDamage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerDamageType>         DamageType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageOrigin;                                      // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1838[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            DamageInstigator;                                  // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageSourceActor;                                 // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirectHitOnCharacter;                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1839[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDamageMultiplier;                                // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183A[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDamageLibrary_CauseAOEDamage) == 0x000008, "Wrong alignment on MarinerDamageLibrary_CauseAOEDamage");
static_assert(sizeof(MarinerDamageLibrary_CauseAOEDamage) == 0x000050, "Wrong size on MarinerDamageLibrary_CauseAOEDamage");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamage, WorldContextObject) == 0x000000, "Member 'MarinerDamageLibrary_CauseAOEDamage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamage, DamageType) == 0x000008, "Member 'MarinerDamageLibrary_CauseAOEDamage::DamageType' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamage, DamageOrigin) == 0x000010, "Member 'MarinerDamageLibrary_CauseAOEDamage::DamageOrigin' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamage, IgnoreActors) == 0x000020, "Member 'MarinerDamageLibrary_CauseAOEDamage::IgnoreActors' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamage, DamageInstigator) == 0x000030, "Member 'MarinerDamageLibrary_CauseAOEDamage::DamageInstigator' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamage, DamageSourceActor) == 0x000038, "Member 'MarinerDamageLibrary_CauseAOEDamage::DamageSourceActor' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamage, bDirectHitOnCharacter) == 0x000040, "Member 'MarinerDamageLibrary_CauseAOEDamage::bDirectHitOnCharacter' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamage, InDamageMultiplier) == 0x000044, "Member 'MarinerDamageLibrary_CauseAOEDamage::InDamageMultiplier' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamage, ReturnValue) == 0x000048, "Member 'MarinerDamageLibrary_CauseAOEDamage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageLibrary.CauseAOEDamageAndGetDamagedActors
// 0x0058 (0x0058 - 0x0000)
struct MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerDamageType>         DamageType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageOrigin;                                      // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183B[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            DamageInstigator;                                  // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageSourceActor;                                 // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutDamagedActors;                                  // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         InDamageMultiplier;                                // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0054(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183C[0x3];                                     // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors) == 0x000008, "Wrong alignment on MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors");
static_assert(sizeof(MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors) == 0x000058, "Wrong size on MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors, WorldContextObject) == 0x000000, "Member 'MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors, DamageType) == 0x000008, "Member 'MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors::DamageType' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors, DamageOrigin) == 0x000010, "Member 'MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors::DamageOrigin' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors, IgnoreActors) == 0x000020, "Member 'MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors::IgnoreActors' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors, DamageInstigator) == 0x000030, "Member 'MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors::DamageInstigator' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors, DamageSourceActor) == 0x000038, "Member 'MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors::DamageSourceActor' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors, OutDamagedActors) == 0x000040, "Member 'MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors::OutDamagedActors' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors, InDamageMultiplier) == 0x000050, "Member 'MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors::InDamageMultiplier' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors, ReturnValue) == 0x000054, "Member 'MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageLibrary.CauseAOEDamageWithOuterRadiusOverride
// 0x0058 (0x0058 - 0x0000)
struct MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerDamageType>         DamageType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadiusOverride;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageOrigin;                                      // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            DamageInstigator;                                  // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageSourceActor;                                 // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutDamagedActors;                                  // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         InDamageMultiplier;                                // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0054(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183D[0x3];                                     // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride) == 0x000008, "Wrong alignment on MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride");
static_assert(sizeof(MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride) == 0x000058, "Wrong size on MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride, WorldContextObject) == 0x000000, "Member 'MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride, DamageType) == 0x000008, "Member 'MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride::DamageType' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride, OuterRadiusOverride) == 0x000010, "Member 'MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride::OuterRadiusOverride' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride, DamageOrigin) == 0x000014, "Member 'MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride::DamageOrigin' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride, IgnoreActors) == 0x000020, "Member 'MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride::IgnoreActors' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride, DamageInstigator) == 0x000030, "Member 'MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride::DamageInstigator' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride, DamageSourceActor) == 0x000038, "Member 'MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride::DamageSourceActor' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride, OutDamagedActors) == 0x000040, "Member 'MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride::OutDamagedActors' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride, InDamageMultiplier) == 0x000050, "Member 'MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride::InDamageMultiplier' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride, ReturnValue) == 0x000054, "Member 'MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageLibrary.CauseDamage
// 0x0038 (0x0038 - 0x0000)
struct MarinerDamageLibrary_CauseDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerDamageType>         DamageType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            DamageInstigator;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageSourceActor;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDamageMultiplier;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OverrideDamageDirection;                           // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldTreatAsAOE;                                 // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183E[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDamageLibrary_CauseDamage) == 0x000008, "Wrong alignment on MarinerDamageLibrary_CauseDamage");
static_assert(sizeof(MarinerDamageLibrary_CauseDamage) == 0x000038, "Wrong size on MarinerDamageLibrary_CauseDamage");
static_assert(offsetof(MarinerDamageLibrary_CauseDamage, DamagedActor) == 0x000000, "Member 'MarinerDamageLibrary_CauseDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseDamage, DamageType) == 0x000008, "Member 'MarinerDamageLibrary_CauseDamage::DamageType' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseDamage, DamageInstigator) == 0x000010, "Member 'MarinerDamageLibrary_CauseDamage::DamageInstigator' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseDamage, DamageSourceActor) == 0x000018, "Member 'MarinerDamageLibrary_CauseDamage::DamageSourceActor' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseDamage, InDamageMultiplier) == 0x000020, "Member 'MarinerDamageLibrary_CauseDamage::InDamageMultiplier' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseDamage, OverrideDamageDirection) == 0x000024, "Member 'MarinerDamageLibrary_CauseDamage::OverrideDamageDirection' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseDamage, bShouldTreatAsAOE) == 0x000030, "Member 'MarinerDamageLibrary_CauseDamage::bShouldTreatAsAOE' has a wrong offset!");

// Function Mariner.MarinerDamageLibrary.CauseDamageFromHit
// 0x00C0 (0x00C0 - 0x0000)
struct MarinerDamageLibrary_CauseDamageFromHit final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerDamageType>         DamageType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageDirection;                                   // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_183F[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            DamageInstigator;                                  // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageSourceActor;                                 // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDamageMultiplier;                                // 0x00B8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1840[0x4];                                     // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDamageLibrary_CauseDamageFromHit) == 0x000008, "Wrong alignment on MarinerDamageLibrary_CauseDamageFromHit");
static_assert(sizeof(MarinerDamageLibrary_CauseDamageFromHit) == 0x0000C0, "Wrong size on MarinerDamageLibrary_CauseDamageFromHit");
static_assert(offsetof(MarinerDamageLibrary_CauseDamageFromHit, DamagedActor) == 0x000000, "Member 'MarinerDamageLibrary_CauseDamageFromHit::DamagedActor' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseDamageFromHit, DamageType) == 0x000008, "Member 'MarinerDamageLibrary_CauseDamageFromHit::DamageType' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseDamageFromHit, DamageDirection) == 0x000010, "Member 'MarinerDamageLibrary_CauseDamageFromHit::DamageDirection' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseDamageFromHit, HitInfo) == 0x00001C, "Member 'MarinerDamageLibrary_CauseDamageFromHit::HitInfo' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseDamageFromHit, DamageInstigator) == 0x0000A8, "Member 'MarinerDamageLibrary_CauseDamageFromHit::DamageInstigator' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseDamageFromHit, DamageSourceActor) == 0x0000B0, "Member 'MarinerDamageLibrary_CauseDamageFromHit::DamageSourceActor' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_CauseDamageFromHit, InDamageMultiplier) == 0x0000B8, "Member 'MarinerDamageLibrary_CauseDamageFromHit::InDamageMultiplier' has a wrong offset!");

// Function Mariner.MarinerDamageLibrary.DoesActorHaveDirectionalImmunity
// 0x0028 (0x0028 - 0x0000)
struct MarinerDamageLibrary_DoesActorHaveDirectionalImmunity final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageOrigin;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1841[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerDamageType>         OptionalDamageSourceType;                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1842[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDamageLibrary_DoesActorHaveDirectionalImmunity) == 0x000008, "Wrong alignment on MarinerDamageLibrary_DoesActorHaveDirectionalImmunity");
static_assert(sizeof(MarinerDamageLibrary_DoesActorHaveDirectionalImmunity) == 0x000028, "Wrong size on MarinerDamageLibrary_DoesActorHaveDirectionalImmunity");
static_assert(offsetof(MarinerDamageLibrary_DoesActorHaveDirectionalImmunity, Actor) == 0x000000, "Member 'MarinerDamageLibrary_DoesActorHaveDirectionalImmunity::Actor' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_DoesActorHaveDirectionalImmunity, DamageOrigin) == 0x000008, "Member 'MarinerDamageLibrary_DoesActorHaveDirectionalImmunity::DamageOrigin' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_DoesActorHaveDirectionalImmunity, OptionalDamageSourceType) == 0x000018, "Member 'MarinerDamageLibrary_DoesActorHaveDirectionalImmunity::OptionalDamageSourceType' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_DoesActorHaveDirectionalImmunity, ReturnValue) == 0x000020, "Member 'MarinerDamageLibrary_DoesActorHaveDirectionalImmunity::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageLibrary.DoesComponentAbsorbExplosion
// 0x0010 (0x0010 - 0x0000)
struct MarinerDamageLibrary_DoesComponentAbsorbExplosion final
{
public:
	const class UPrimitiveComponent*              Component;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1843[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDamageLibrary_DoesComponentAbsorbExplosion) == 0x000008, "Wrong alignment on MarinerDamageLibrary_DoesComponentAbsorbExplosion");
static_assert(sizeof(MarinerDamageLibrary_DoesComponentAbsorbExplosion) == 0x000010, "Wrong size on MarinerDamageLibrary_DoesComponentAbsorbExplosion");
static_assert(offsetof(MarinerDamageLibrary_DoesComponentAbsorbExplosion, Component) == 0x000000, "Member 'MarinerDamageLibrary_DoesComponentAbsorbExplosion::Component' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_DoesComponentAbsorbExplosion, ReturnValue) == 0x000008, "Member 'MarinerDamageLibrary_DoesComponentAbsorbExplosion::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageLibrary.DoesComponentHaveVulnerabilityTag
// 0x0010 (0x0010 - 0x0000)
struct MarinerDamageLibrary_DoesComponentHaveVulnerabilityTag final
{
public:
	const class UPrimitiveComponent*              Component;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1844[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDamageLibrary_DoesComponentHaveVulnerabilityTag) == 0x000008, "Wrong alignment on MarinerDamageLibrary_DoesComponentHaveVulnerabilityTag");
static_assert(sizeof(MarinerDamageLibrary_DoesComponentHaveVulnerabilityTag) == 0x000010, "Wrong size on MarinerDamageLibrary_DoesComponentHaveVulnerabilityTag");
static_assert(offsetof(MarinerDamageLibrary_DoesComponentHaveVulnerabilityTag, Component) == 0x000000, "Member 'MarinerDamageLibrary_DoesComponentHaveVulnerabilityTag::Component' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_DoesComponentHaveVulnerabilityTag, ReturnValue) == 0x000008, "Member 'MarinerDamageLibrary_DoesComponentHaveVulnerabilityTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageLibrary.IsActorDamageable
// 0x0010 (0x0010 - 0x0000)
struct MarinerDamageLibrary_IsActorDamageable final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1845[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDamageLibrary_IsActorDamageable) == 0x000008, "Wrong alignment on MarinerDamageLibrary_IsActorDamageable");
static_assert(sizeof(MarinerDamageLibrary_IsActorDamageable) == 0x000010, "Wrong size on MarinerDamageLibrary_IsActorDamageable");
static_assert(offsetof(MarinerDamageLibrary_IsActorDamageable, Actor) == 0x000000, "Member 'MarinerDamageLibrary_IsActorDamageable::Actor' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_IsActorDamageable, ReturnValue) == 0x000008, "Member 'MarinerDamageLibrary_IsActorDamageable::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDamageLibrary.IsItemInvulnerable
// 0x0018 (0x0018 - 0x0000)
struct MarinerDamageLibrary_IsItemInvulnerable final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1846[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerDamageLibrary_IsItemInvulnerable) == 0x000008, "Wrong alignment on MarinerDamageLibrary_IsItemInvulnerable");
static_assert(sizeof(MarinerDamageLibrary_IsItemInvulnerable) == 0x000018, "Wrong size on MarinerDamageLibrary_IsItemInvulnerable");
static_assert(offsetof(MarinerDamageLibrary_IsItemInvulnerable, DamagedActor) == 0x000000, "Member 'MarinerDamageLibrary_IsItemInvulnerable::DamagedActor' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_IsItemInvulnerable, DamageInstigator) == 0x000008, "Member 'MarinerDamageLibrary_IsItemInvulnerable::DamageInstigator' has a wrong offset!");
static_assert(offsetof(MarinerDamageLibrary_IsItemInvulnerable, ReturnValue) == 0x000010, "Member 'MarinerDamageLibrary_IsItemInvulnerable::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerVoiceChatWidget.OnGameStatePlayerAdded
// 0x0008 (0x0008 - 0x0000)
struct MarinerVoiceChatWidget_OnGameStatePlayerAdded final
{
public:
	class APlayerState*                           AddedPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerVoiceChatWidget_OnGameStatePlayerAdded) == 0x000008, "Wrong alignment on MarinerVoiceChatWidget_OnGameStatePlayerAdded");
static_assert(sizeof(MarinerVoiceChatWidget_OnGameStatePlayerAdded) == 0x000008, "Wrong size on MarinerVoiceChatWidget_OnGameStatePlayerAdded");
static_assert(offsetof(MarinerVoiceChatWidget_OnGameStatePlayerAdded, AddedPlayer) == 0x000000, "Member 'MarinerVoiceChatWidget_OnGameStatePlayerAdded::AddedPlayer' has a wrong offset!");

// Function Mariner.MarinerVoiceChatWidget.OnGameStatePlayerMangoUserUpdated
// 0x0008 (0x0008 - 0x0000)
struct MarinerVoiceChatWidget_OnGameStatePlayerMangoUserUpdated final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerVoiceChatWidget_OnGameStatePlayerMangoUserUpdated) == 0x000008, "Wrong alignment on MarinerVoiceChatWidget_OnGameStatePlayerMangoUserUpdated");
static_assert(sizeof(MarinerVoiceChatWidget_OnGameStatePlayerMangoUserUpdated) == 0x000008, "Wrong size on MarinerVoiceChatWidget_OnGameStatePlayerMangoUserUpdated");
static_assert(offsetof(MarinerVoiceChatWidget_OnGameStatePlayerMangoUserUpdated, PlayerState) == 0x000000, "Member 'MarinerVoiceChatWidget_OnGameStatePlayerMangoUserUpdated::PlayerState' has a wrong offset!");

// Function Mariner.MarinerVoiceChatWidget.OnGameStatePlayerRemoved
// 0x0008 (0x0008 - 0x0000)
struct MarinerVoiceChatWidget_OnGameStatePlayerRemoved final
{
public:
	class APlayerState*                           RemovedPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerVoiceChatWidget_OnGameStatePlayerRemoved) == 0x000008, "Wrong alignment on MarinerVoiceChatWidget_OnGameStatePlayerRemoved");
static_assert(sizeof(MarinerVoiceChatWidget_OnGameStatePlayerRemoved) == 0x000008, "Wrong size on MarinerVoiceChatWidget_OnGameStatePlayerRemoved");
static_assert(offsetof(MarinerVoiceChatWidget_OnGameStatePlayerRemoved, RemovedPlayer) == 0x000000, "Member 'MarinerVoiceChatWidget_OnGameStatePlayerRemoved::RemovedPlayer' has a wrong offset!");

// Function Mariner.MarinerDemoGlobals.IsBetaBuild
// 0x0001 (0x0001 - 0x0000)
struct MarinerDemoGlobals_IsBetaBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDemoGlobals_IsBetaBuild) == 0x000001, "Wrong alignment on MarinerDemoGlobals_IsBetaBuild");
static_assert(sizeof(MarinerDemoGlobals_IsBetaBuild) == 0x000001, "Wrong size on MarinerDemoGlobals_IsBetaBuild");
static_assert(offsetof(MarinerDemoGlobals_IsBetaBuild, ReturnValue) == 0x000000, "Member 'MarinerDemoGlobals_IsBetaBuild::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerDemoGlobals.IsDemoE3_18
// 0x0001 (0x0001 - 0x0000)
struct MarinerDemoGlobals_IsDemoE3_18 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerDemoGlobals_IsDemoE3_18) == 0x000001, "Wrong alignment on MarinerDemoGlobals_IsDemoE3_18");
static_assert(sizeof(MarinerDemoGlobals_IsDemoE3_18) == 0x000001, "Wrong size on MarinerDemoGlobals_IsDemoE3_18");
static_assert(offsetof(MarinerDemoGlobals_IsDemoE3_18, ReturnValue) == 0x000000, "Member 'MarinerDemoGlobals_IsDemoE3_18::ReturnValue' has a wrong offset!");

// DelegateFunction Mariner.MarinerEditableTextBox.OnMarinerEditableTextBoxChangedEvent__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct MarinerEditableTextBox_OnMarinerEditableTextBoxChangedEvent__DelegateSignature final
{
public:
	class FText                                   Param_Text;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEditableTextBox_OnMarinerEditableTextBoxChangedEvent__DelegateSignature) == 0x000008, "Wrong alignment on MarinerEditableTextBox_OnMarinerEditableTextBoxChangedEvent__DelegateSignature");
static_assert(sizeof(MarinerEditableTextBox_OnMarinerEditableTextBoxChangedEvent__DelegateSignature) == 0x000018, "Wrong size on MarinerEditableTextBox_OnMarinerEditableTextBoxChangedEvent__DelegateSignature");
static_assert(offsetof(MarinerEditableTextBox_OnMarinerEditableTextBoxChangedEvent__DelegateSignature, Param_Text) == 0x000000, "Member 'MarinerEditableTextBox_OnMarinerEditableTextBoxChangedEvent__DelegateSignature::Param_Text' has a wrong offset!");

// DelegateFunction Mariner.MarinerEditableTextBox.OnMarinerEditableTextBoxCommittedEvent__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct MarinerEditableTextBox_OnMarinerEditableTextBoxCommittedEvent__DelegateSignature final
{
public:
	class FText                                   Param_Text;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1850[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerEditableTextBox_OnMarinerEditableTextBoxCommittedEvent__DelegateSignature) == 0x000008, "Wrong alignment on MarinerEditableTextBox_OnMarinerEditableTextBoxCommittedEvent__DelegateSignature");
static_assert(sizeof(MarinerEditableTextBox_OnMarinerEditableTextBoxCommittedEvent__DelegateSignature) == 0x000020, "Wrong size on MarinerEditableTextBox_OnMarinerEditableTextBoxCommittedEvent__DelegateSignature");
static_assert(offsetof(MarinerEditableTextBox_OnMarinerEditableTextBoxCommittedEvent__DelegateSignature, Param_Text) == 0x000000, "Member 'MarinerEditableTextBox_OnMarinerEditableTextBoxCommittedEvent__DelegateSignature::Param_Text' has a wrong offset!");
static_assert(offsetof(MarinerEditableTextBox_OnMarinerEditableTextBoxCommittedEvent__DelegateSignature, CommitMethod) == 0x000018, "Member 'MarinerEditableTextBox_OnMarinerEditableTextBoxCommittedEvent__DelegateSignature::CommitMethod' has a wrong offset!");

// Function Mariner.MarinerEditableTextBox.SetError
// 0x0018 (0x0018 - 0x0000)
struct MarinerEditableTextBox_SetError final
{
public:
	class FText                                   InError;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEditableTextBox_SetError) == 0x000008, "Wrong alignment on MarinerEditableTextBox_SetError");
static_assert(sizeof(MarinerEditableTextBox_SetError) == 0x000018, "Wrong size on MarinerEditableTextBox_SetError");
static_assert(offsetof(MarinerEditableTextBox_SetError, InError) == 0x000000, "Member 'MarinerEditableTextBox_SetError::InError' has a wrong offset!");

// Function Mariner.MarinerEditableTextBox.SetHintText
// 0x0018 (0x0018 - 0x0000)
struct MarinerEditableTextBox_SetHintText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEditableTextBox_SetHintText) == 0x000008, "Wrong alignment on MarinerEditableTextBox_SetHintText");
static_assert(sizeof(MarinerEditableTextBox_SetHintText) == 0x000018, "Wrong size on MarinerEditableTextBox_SetHintText");
static_assert(offsetof(MarinerEditableTextBox_SetHintText, InText) == 0x000000, "Member 'MarinerEditableTextBox_SetHintText::InText' has a wrong offset!");

// Function Mariner.MarinerEditableTextBox.SetHovered
// 0x0001 (0x0001 - 0x0000)
struct MarinerEditableTextBox_SetHovered final
{
public:
	bool                                          bHovered;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEditableTextBox_SetHovered) == 0x000001, "Wrong alignment on MarinerEditableTextBox_SetHovered");
static_assert(sizeof(MarinerEditableTextBox_SetHovered) == 0x000001, "Wrong size on MarinerEditableTextBox_SetHovered");
static_assert(offsetof(MarinerEditableTextBox_SetHovered, bHovered) == 0x000000, "Member 'MarinerEditableTextBox_SetHovered::bHovered' has a wrong offset!");

// Function Mariner.MarinerEditableTextBox.SetIsPassword
// 0x0001 (0x0001 - 0x0000)
struct MarinerEditableTextBox_SetIsPassword final
{
public:
	bool                                          bIsPassword;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEditableTextBox_SetIsPassword) == 0x000001, "Wrong alignment on MarinerEditableTextBox_SetIsPassword");
static_assert(sizeof(MarinerEditableTextBox_SetIsPassword) == 0x000001, "Wrong size on MarinerEditableTextBox_SetIsPassword");
static_assert(offsetof(MarinerEditableTextBox_SetIsPassword, bIsPassword) == 0x000000, "Member 'MarinerEditableTextBox_SetIsPassword::bIsPassword' has a wrong offset!");

// Function Mariner.MarinerEditableTextBox.SetIsReadOnly
// 0x0001 (0x0001 - 0x0000)
struct MarinerEditableTextBox_SetIsReadOnly final
{
public:
	bool                                          bReadOnly;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEditableTextBox_SetIsReadOnly) == 0x000001, "Wrong alignment on MarinerEditableTextBox_SetIsReadOnly");
static_assert(sizeof(MarinerEditableTextBox_SetIsReadOnly) == 0x000001, "Wrong size on MarinerEditableTextBox_SetIsReadOnly");
static_assert(offsetof(MarinerEditableTextBox_SetIsReadOnly, bReadOnly) == 0x000000, "Member 'MarinerEditableTextBox_SetIsReadOnly::bReadOnly' has a wrong offset!");

// Function Mariner.MarinerEditableTextBox.SetText
// 0x0018 (0x0018 - 0x0000)
struct MarinerEditableTextBox_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEditableTextBox_SetText) == 0x000008, "Wrong alignment on MarinerEditableTextBox_SetText");
static_assert(sizeof(MarinerEditableTextBox_SetText) == 0x000018, "Wrong size on MarinerEditableTextBox_SetText");
static_assert(offsetof(MarinerEditableTextBox_SetText, InText) == 0x000000, "Member 'MarinerEditableTextBox_SetText::InText' has a wrong offset!");

// Function Mariner.MarinerEditableTextBox.GetText
// 0x0018 (0x0018 - 0x0000)
struct MarinerEditableTextBox_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEditableTextBox_GetText) == 0x000008, "Wrong alignment on MarinerEditableTextBox_GetText");
static_assert(sizeof(MarinerEditableTextBox_GetText) == 0x000018, "Wrong size on MarinerEditableTextBox_GetText");
static_assert(offsetof(MarinerEditableTextBox_GetText, ReturnValue) == 0x000000, "Member 'MarinerEditableTextBox_GetText::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerEditableTextBox.HasError
// 0x0001 (0x0001 - 0x0000)
struct MarinerEditableTextBox_HasError final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEditableTextBox_HasError) == 0x000001, "Wrong alignment on MarinerEditableTextBox_HasError");
static_assert(sizeof(MarinerEditableTextBox_HasError) == 0x000001, "Wrong size on MarinerEditableTextBox_HasError");
static_assert(offsetof(MarinerEditableTextBox_HasError, ReturnValue) == 0x000000, "Member 'MarinerEditableTextBox_HasError::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerEditableTextWidget.OnWidgetTextCommited
// 0x0020 (0x0020 - 0x0000)
struct MarinerEditableTextWidget_OnWidgetTextCommited final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1853[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerEditableTextWidget_OnWidgetTextCommited) == 0x000008, "Wrong alignment on MarinerEditableTextWidget_OnWidgetTextCommited");
static_assert(sizeof(MarinerEditableTextWidget_OnWidgetTextCommited) == 0x000020, "Wrong size on MarinerEditableTextWidget_OnWidgetTextCommited");
static_assert(offsetof(MarinerEditableTextWidget_OnWidgetTextCommited, Text) == 0x000000, "Member 'MarinerEditableTextWidget_OnWidgetTextCommited::Text' has a wrong offset!");
static_assert(offsetof(MarinerEditableTextWidget_OnWidgetTextCommited, CommitMethod) == 0x000018, "Member 'MarinerEditableTextWidget_OnWidgetTextCommited::CommitMethod' has a wrong offset!");

// Function Mariner.MarinerEditorFunctionLibrary.DoesMaterialInstanceStaticBoolParamExist
// 0x0018 (0x0018 - 0x0000)
struct MarinerEditorFunctionLibrary_DoesMaterialInstanceStaticBoolParamExist final
{
public:
	class UMaterialInterface*                     InstanceToRead;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1854[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerEditorFunctionLibrary_DoesMaterialInstanceStaticBoolParamExist) == 0x000008, "Wrong alignment on MarinerEditorFunctionLibrary_DoesMaterialInstanceStaticBoolParamExist");
static_assert(sizeof(MarinerEditorFunctionLibrary_DoesMaterialInstanceStaticBoolParamExist) == 0x000018, "Wrong size on MarinerEditorFunctionLibrary_DoesMaterialInstanceStaticBoolParamExist");
static_assert(offsetof(MarinerEditorFunctionLibrary_DoesMaterialInstanceStaticBoolParamExist, InstanceToRead) == 0x000000, "Member 'MarinerEditorFunctionLibrary_DoesMaterialInstanceStaticBoolParamExist::InstanceToRead' has a wrong offset!");
static_assert(offsetof(MarinerEditorFunctionLibrary_DoesMaterialInstanceStaticBoolParamExist, ParameterName) == 0x000008, "Member 'MarinerEditorFunctionLibrary_DoesMaterialInstanceStaticBoolParamExist::ParameterName' has a wrong offset!");
static_assert(offsetof(MarinerEditorFunctionLibrary_DoesMaterialInstanceStaticBoolParamExist, ReturnValue) == 0x000010, "Member 'MarinerEditorFunctionLibrary_DoesMaterialInstanceStaticBoolParamExist::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerEditorFunctionLibrary.GetMaterialInstanceStaticBoolParamValue
// 0x0018 (0x0018 - 0x0000)
struct MarinerEditorFunctionLibrary_GetMaterialInstanceStaticBoolParamValue final
{
public:
	class UMaterialInterface*                     InstanceToRead;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1855[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerEditorFunctionLibrary_GetMaterialInstanceStaticBoolParamValue) == 0x000008, "Wrong alignment on MarinerEditorFunctionLibrary_GetMaterialInstanceStaticBoolParamValue");
static_assert(sizeof(MarinerEditorFunctionLibrary_GetMaterialInstanceStaticBoolParamValue) == 0x000018, "Wrong size on MarinerEditorFunctionLibrary_GetMaterialInstanceStaticBoolParamValue");
static_assert(offsetof(MarinerEditorFunctionLibrary_GetMaterialInstanceStaticBoolParamValue, InstanceToRead) == 0x000000, "Member 'MarinerEditorFunctionLibrary_GetMaterialInstanceStaticBoolParamValue::InstanceToRead' has a wrong offset!");
static_assert(offsetof(MarinerEditorFunctionLibrary_GetMaterialInstanceStaticBoolParamValue, ParameterName) == 0x000008, "Member 'MarinerEditorFunctionLibrary_GetMaterialInstanceStaticBoolParamValue::ParameterName' has a wrong offset!");
static_assert(offsetof(MarinerEditorFunctionLibrary_GetMaterialInstanceStaticBoolParamValue, ReturnValue) == 0x000010, "Member 'MarinerEditorFunctionLibrary_GetMaterialInstanceStaticBoolParamValue::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerEditorFunctionLibrary.GetTexture2DFromPath
// 0x0018 (0x0018 - 0x0000)
struct MarinerEditorFunctionLibrary_GetTexture2DFromPath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEditorFunctionLibrary_GetTexture2DFromPath) == 0x000008, "Wrong alignment on MarinerEditorFunctionLibrary_GetTexture2DFromPath");
static_assert(sizeof(MarinerEditorFunctionLibrary_GetTexture2DFromPath) == 0x000018, "Wrong size on MarinerEditorFunctionLibrary_GetTexture2DFromPath");
static_assert(offsetof(MarinerEditorFunctionLibrary_GetTexture2DFromPath, Path) == 0x000000, "Member 'MarinerEditorFunctionLibrary_GetTexture2DFromPath::Path' has a wrong offset!");
static_assert(offsetof(MarinerEditorFunctionLibrary_GetTexture2DFromPath, ReturnValue) == 0x000010, "Member 'MarinerEditorFunctionLibrary_GetTexture2DFromPath::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.OnButtonAdded
// 0x0018 (0x0018 - 0x0000)
struct MarinerInventoryBaseMenu_OnButtonAdded final
{
public:
	class UMarinerLayeredButton*                  IconInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemLoadResponse*                      Data;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRanked;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerInventoryBaseMenu_OnButtonAdded) == 0x000008, "Wrong alignment on MarinerInventoryBaseMenu_OnButtonAdded");
static_assert(sizeof(MarinerInventoryBaseMenu_OnButtonAdded) == 0x000018, "Wrong size on MarinerInventoryBaseMenu_OnButtonAdded");
static_assert(offsetof(MarinerInventoryBaseMenu_OnButtonAdded, IconInstance) == 0x000000, "Member 'MarinerInventoryBaseMenu_OnButtonAdded::IconInstance' has a wrong offset!");
static_assert(offsetof(MarinerInventoryBaseMenu_OnButtonAdded, Data) == 0x000008, "Member 'MarinerInventoryBaseMenu_OnButtonAdded::Data' has a wrong offset!");
static_assert(offsetof(MarinerInventoryBaseMenu_OnButtonAdded, bRanked) == 0x000010, "Member 'MarinerInventoryBaseMenu_OnButtonAdded::bRanked' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.OnButtonHovered
// 0x0010 (0x0010 - 0x0000)
struct MarinerInventoryBaseMenu_OnButtonHovered final
{
public:
	class UMarinerLayeredButton*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromKeyboard;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromMouse;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185C[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerInventoryBaseMenu_OnButtonHovered) == 0x000008, "Wrong alignment on MarinerInventoryBaseMenu_OnButtonHovered");
static_assert(sizeof(MarinerInventoryBaseMenu_OnButtonHovered) == 0x000010, "Wrong size on MarinerInventoryBaseMenu_OnButtonHovered");
static_assert(offsetof(MarinerInventoryBaseMenu_OnButtonHovered, Instance) == 0x000000, "Member 'MarinerInventoryBaseMenu_OnButtonHovered::Instance' has a wrong offset!");
static_assert(offsetof(MarinerInventoryBaseMenu_OnButtonHovered, bFromKeyboard) == 0x000008, "Member 'MarinerInventoryBaseMenu_OnButtonHovered::bFromKeyboard' has a wrong offset!");
static_assert(offsetof(MarinerInventoryBaseMenu_OnButtonHovered, bFromMouse) == 0x000009, "Member 'MarinerInventoryBaseMenu_OnButtonHovered::bFromMouse' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.OnButtonSelected
// 0x0008 (0x0008 - 0x0000)
struct MarinerInventoryBaseMenu_OnButtonSelected final
{
public:
	class UMarinerLayeredButton*                  IconInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_OnButtonSelected) == 0x000008, "Wrong alignment on MarinerInventoryBaseMenu_OnButtonSelected");
static_assert(sizeof(MarinerInventoryBaseMenu_OnButtonSelected) == 0x000008, "Wrong size on MarinerInventoryBaseMenu_OnButtonSelected");
static_assert(offsetof(MarinerInventoryBaseMenu_OnButtonSelected, IconInstance) == 0x000000, "Member 'MarinerInventoryBaseMenu_OnButtonSelected::IconInstance' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.OnButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct MarinerInventoryBaseMenu_OnButtonUnhovered final
{
public:
	class UMarinerLayeredButton*                  IconInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_OnButtonUnhovered) == 0x000008, "Wrong alignment on MarinerInventoryBaseMenu_OnButtonUnhovered");
static_assert(sizeof(MarinerInventoryBaseMenu_OnButtonUnhovered) == 0x000008, "Wrong size on MarinerInventoryBaseMenu_OnButtonUnhovered");
static_assert(offsetof(MarinerInventoryBaseMenu_OnButtonUnhovered, IconInstance) == 0x000000, "Member 'MarinerInventoryBaseMenu_OnButtonUnhovered::IconInstance' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.OnButtonViewed
// 0x0008 (0x0008 - 0x0000)
struct MarinerInventoryBaseMenu_OnButtonViewed final
{
public:
	class UMarinerLayeredButton*                  IconInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_OnButtonViewed) == 0x000008, "Wrong alignment on MarinerInventoryBaseMenu_OnButtonViewed");
static_assert(sizeof(MarinerInventoryBaseMenu_OnButtonViewed) == 0x000008, "Wrong size on MarinerInventoryBaseMenu_OnButtonViewed");
static_assert(offsetof(MarinerInventoryBaseMenu_OnButtonViewed, IconInstance) == 0x000000, "Member 'MarinerInventoryBaseMenu_OnButtonViewed::IconInstance' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.OnLoadFinished
// 0x0010 (0x0010 - 0x0000)
struct MarinerInventoryBaseMenu_OnLoadFinished final
{
public:
	TArray<class UItemLoadResponse*>              LoadedDataResponse;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_OnLoadFinished) == 0x000008, "Wrong alignment on MarinerInventoryBaseMenu_OnLoadFinished");
static_assert(sizeof(MarinerInventoryBaseMenu_OnLoadFinished) == 0x000010, "Wrong size on MarinerInventoryBaseMenu_OnLoadFinished");
static_assert(offsetof(MarinerInventoryBaseMenu_OnLoadFinished, LoadedDataResponse) == 0x000000, "Member 'MarinerInventoryBaseMenu_OnLoadFinished::LoadedDataResponse' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.OnOfferStateChanged
// 0x0020 (0x0020 - 0x0000)
struct MarinerInventoryBaseMenu_OnOfferStateChanged final
{
public:
	TArray<struct FMangoPurchaseOffer>            OffersStarting;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FMangoPurchaseOffer>            OffersEnding;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_OnOfferStateChanged) == 0x000008, "Wrong alignment on MarinerInventoryBaseMenu_OnOfferStateChanged");
static_assert(sizeof(MarinerInventoryBaseMenu_OnOfferStateChanged) == 0x000020, "Wrong size on MarinerInventoryBaseMenu_OnOfferStateChanged");
static_assert(offsetof(MarinerInventoryBaseMenu_OnOfferStateChanged, OffersStarting) == 0x000000, "Member 'MarinerInventoryBaseMenu_OnOfferStateChanged::OffersStarting' has a wrong offset!");
static_assert(offsetof(MarinerInventoryBaseMenu_OnOfferStateChanged, OffersEnding) == 0x000010, "Member 'MarinerInventoryBaseMenu_OnOfferStateChanged::OffersEnding' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.OnProfileItemEquipped
// 0x0008 (0x0008 - 0x0000)
struct MarinerInventoryBaseMenu_OnProfileItemEquipped final
{
public:
	class UMarinerCMSItemDataAsset*               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_OnProfileItemEquipped) == 0x000008, "Wrong alignment on MarinerInventoryBaseMenu_OnProfileItemEquipped");
static_assert(sizeof(MarinerInventoryBaseMenu_OnProfileItemEquipped) == 0x000008, "Wrong size on MarinerInventoryBaseMenu_OnProfileItemEquipped");
static_assert(offsetof(MarinerInventoryBaseMenu_OnProfileItemEquipped, Item) == 0x000000, "Member 'MarinerInventoryBaseMenu_OnProfileItemEquipped::Item' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.OnPurchaseFlowComplete
// 0x0001 (0x0001 - 0x0000)
struct MarinerInventoryBaseMenu_OnPurchaseFlowComplete final
{
public:
	bool                                          bOfferPurchased;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_OnPurchaseFlowComplete) == 0x000001, "Wrong alignment on MarinerInventoryBaseMenu_OnPurchaseFlowComplete");
static_assert(sizeof(MarinerInventoryBaseMenu_OnPurchaseFlowComplete) == 0x000001, "Wrong size on MarinerInventoryBaseMenu_OnPurchaseFlowComplete");
static_assert(offsetof(MarinerInventoryBaseMenu_OnPurchaseFlowComplete, bOfferPurchased) == 0x000000, "Member 'MarinerInventoryBaseMenu_OnPurchaseFlowComplete::bOfferPurchased' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.OnSkinLoadFinished
// 0x0010 (0x0010 - 0x0000)
struct MarinerInventoryBaseMenu_OnSkinLoadFinished final
{
public:
	TArray<class UFrontendSkinUILoadResponse*>    LoadedDataResponse;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_OnSkinLoadFinished) == 0x000008, "Wrong alignment on MarinerInventoryBaseMenu_OnSkinLoadFinished");
static_assert(sizeof(MarinerInventoryBaseMenu_OnSkinLoadFinished) == 0x000010, "Wrong size on MarinerInventoryBaseMenu_OnSkinLoadFinished");
static_assert(offsetof(MarinerInventoryBaseMenu_OnSkinLoadFinished, LoadedDataResponse) == 0x000000, "Member 'MarinerInventoryBaseMenu_OnSkinLoadFinished::LoadedDataResponse' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.PopulateOwnedItem
// 0x0008 (0x0008 - 0x0000)
struct MarinerInventoryBaseMenu_PopulateOwnedItem final
{
public:
	class UItemLoadResponse*                      LoadResponse;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_PopulateOwnedItem) == 0x000008, "Wrong alignment on MarinerInventoryBaseMenu_PopulateOwnedItem");
static_assert(sizeof(MarinerInventoryBaseMenu_PopulateOwnedItem) == 0x000008, "Wrong size on MarinerInventoryBaseMenu_PopulateOwnedItem");
static_assert(offsetof(MarinerInventoryBaseMenu_PopulateOwnedItem, LoadResponse) == 0x000000, "Member 'MarinerInventoryBaseMenu_PopulateOwnedItem::LoadResponse' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.PopulateUnlockPreview
// 0x0018 (0x0018 - 0x0000)
struct MarinerInventoryBaseMenu_PopulateUnlockPreview final
{
public:
	class UItemLoadResponse*                      LoadResponse;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerCMSItemDataAsset*               DataAsset;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerPlayableCharacter*              Character;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_PopulateUnlockPreview) == 0x000008, "Wrong alignment on MarinerInventoryBaseMenu_PopulateUnlockPreview");
static_assert(sizeof(MarinerInventoryBaseMenu_PopulateUnlockPreview) == 0x000018, "Wrong size on MarinerInventoryBaseMenu_PopulateUnlockPreview");
static_assert(offsetof(MarinerInventoryBaseMenu_PopulateUnlockPreview, LoadResponse) == 0x000000, "Member 'MarinerInventoryBaseMenu_PopulateUnlockPreview::LoadResponse' has a wrong offset!");
static_assert(offsetof(MarinerInventoryBaseMenu_PopulateUnlockPreview, DataAsset) == 0x000008, "Member 'MarinerInventoryBaseMenu_PopulateUnlockPreview::DataAsset' has a wrong offset!");
static_assert(offsetof(MarinerInventoryBaseMenu_PopulateUnlockPreview, Character) == 0x000010, "Member 'MarinerInventoryBaseMenu_PopulateUnlockPreview::Character' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.SetCurrentCharacter
// 0x0010 (0x0010 - 0x0000)
struct MarinerInventoryBaseMenu_SetCurrentCharacter final
{
public:
	class UMarinerPlayableCharacter*              InCurrentCharacter;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerCharacterSpawner*               InCharacterSpawner;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_SetCurrentCharacter) == 0x000008, "Wrong alignment on MarinerInventoryBaseMenu_SetCurrentCharacter");
static_assert(sizeof(MarinerInventoryBaseMenu_SetCurrentCharacter) == 0x000010, "Wrong size on MarinerInventoryBaseMenu_SetCurrentCharacter");
static_assert(offsetof(MarinerInventoryBaseMenu_SetCurrentCharacter, InCurrentCharacter) == 0x000000, "Member 'MarinerInventoryBaseMenu_SetCurrentCharacter::InCurrentCharacter' has a wrong offset!");
static_assert(offsetof(MarinerInventoryBaseMenu_SetCurrentCharacter, InCharacterSpawner) == 0x000008, "Member 'MarinerInventoryBaseMenu_SetCurrentCharacter::InCharacterSpawner' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.SetMenuItemType
// 0x0001 (0x0001 - 0x0000)
struct MarinerInventoryBaseMenu_SetMenuItemType final
{
public:
	EMangoItemType                                InNewType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_SetMenuItemType) == 0x000001, "Wrong alignment on MarinerInventoryBaseMenu_SetMenuItemType");
static_assert(sizeof(MarinerInventoryBaseMenu_SetMenuItemType) == 0x000001, "Wrong size on MarinerInventoryBaseMenu_SetMenuItemType");
static_assert(offsetof(MarinerInventoryBaseMenu_SetMenuItemType, InNewType) == 0x000000, "Member 'MarinerInventoryBaseMenu_SetMenuItemType::InNewType' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.ViewBlastPass
// 0x0004 (0x0004 - 0x0000)
struct MarinerInventoryBaseMenu_ViewBlastPass final
{
public:
	int32                                         Tier;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_ViewBlastPass) == 0x000004, "Wrong alignment on MarinerInventoryBaseMenu_ViewBlastPass");
static_assert(sizeof(MarinerInventoryBaseMenu_ViewBlastPass) == 0x000004, "Wrong size on MarinerInventoryBaseMenu_ViewBlastPass");
static_assert(offsetof(MarinerInventoryBaseMenu_ViewBlastPass, Tier) == 0x000000, "Member 'MarinerInventoryBaseMenu_ViewBlastPass::Tier' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.VisualizeSelectedButton
// 0x0008 (0x0008 - 0x0000)
struct MarinerInventoryBaseMenu_VisualizeSelectedButton final
{
public:
	class UMarinerItemLoadResponseButton*         ButtonInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_VisualizeSelectedButton) == 0x000008, "Wrong alignment on MarinerInventoryBaseMenu_VisualizeSelectedButton");
static_assert(sizeof(MarinerInventoryBaseMenu_VisualizeSelectedButton) == 0x000008, "Wrong size on MarinerInventoryBaseMenu_VisualizeSelectedButton");
static_assert(offsetof(MarinerInventoryBaseMenu_VisualizeSelectedButton, ButtonInstance) == 0x000000, "Member 'MarinerInventoryBaseMenu_VisualizeSelectedButton::ButtonInstance' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.GetCharacterSpawner
// 0x0008 (0x0008 - 0x0000)
struct MarinerInventoryBaseMenu_GetCharacterSpawner final
{
public:
	class AMarinerCharacterSpawner*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_GetCharacterSpawner) == 0x000008, "Wrong alignment on MarinerInventoryBaseMenu_GetCharacterSpawner");
static_assert(sizeof(MarinerInventoryBaseMenu_GetCharacterSpawner) == 0x000008, "Wrong size on MarinerInventoryBaseMenu_GetCharacterSpawner");
static_assert(offsetof(MarinerInventoryBaseMenu_GetCharacterSpawner, ReturnValue) == 0x000000, "Member 'MarinerInventoryBaseMenu_GetCharacterSpawner::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInventoryBaseMenu.GetCurrentCharacter
// 0x0008 (0x0008 - 0x0000)
struct MarinerInventoryBaseMenu_GetCurrentCharacter final
{
public:
	class UMarinerPlayableCharacter*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInventoryBaseMenu_GetCurrentCharacter) == 0x000008, "Wrong alignment on MarinerInventoryBaseMenu_GetCurrentCharacter");
static_assert(sizeof(MarinerInventoryBaseMenu_GetCurrentCharacter) == 0x000008, "Wrong size on MarinerInventoryBaseMenu_GetCurrentCharacter");
static_assert(offsetof(MarinerInventoryBaseMenu_GetCurrentCharacter, ReturnValue) == 0x000000, "Member 'MarinerInventoryBaseMenu_GetCurrentCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerEmoteCustomizationMenu.OnCategorySelected
// 0x0008 (0x0008 - 0x0000)
struct MarinerEmoteCustomizationMenu_OnCategorySelected final
{
public:
	class UMarinerLayeredButton*                  Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEmoteCustomizationMenu_OnCategorySelected) == 0x000008, "Wrong alignment on MarinerEmoteCustomizationMenu_OnCategorySelected");
static_assert(sizeof(MarinerEmoteCustomizationMenu_OnCategorySelected) == 0x000008, "Wrong size on MarinerEmoteCustomizationMenu_OnCategorySelected");
static_assert(offsetof(MarinerEmoteCustomizationMenu_OnCategorySelected, Button) == 0x000000, "Member 'MarinerEmoteCustomizationMenu_OnCategorySelected::Button' has a wrong offset!");

// Function Mariner.MarinerEmoteMenuSlot.SetEmote
// 0x0008 (0x0008 - 0x0000)
struct MarinerEmoteMenuSlot_SetEmote final
{
public:
	class UItemLoadResponse*                      InLoadResponse;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEmoteMenuSlot_SetEmote) == 0x000008, "Wrong alignment on MarinerEmoteMenuSlot_SetEmote");
static_assert(sizeof(MarinerEmoteMenuSlot_SetEmote) == 0x000008, "Wrong size on MarinerEmoteMenuSlot_SetEmote");
static_assert(offsetof(MarinerEmoteMenuSlot_SetEmote, InLoadResponse) == 0x000000, "Member 'MarinerEmoteMenuSlot_SetEmote::InLoadResponse' has a wrong offset!");

// Function Mariner.MarinerEmoteMenuSlot.SetEquippableStateEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerEmoteMenuSlot_SetEquippableStateEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEmoteMenuSlot_SetEquippableStateEnabled) == 0x000001, "Wrong alignment on MarinerEmoteMenuSlot_SetEquippableStateEnabled");
static_assert(sizeof(MarinerEmoteMenuSlot_SetEquippableStateEnabled) == 0x000001, "Wrong size on MarinerEmoteMenuSlot_SetEquippableStateEnabled");
static_assert(offsetof(MarinerEmoteMenuSlot_SetEquippableStateEnabled, bEnabled) == 0x000000, "Member 'MarinerEmoteMenuSlot_SetEquippableStateEnabled::bEnabled' has a wrong offset!");

// Function Mariner.MarinerEmoteMenuSlot.GetLoadResponse
// 0x0008 (0x0008 - 0x0000)
struct MarinerEmoteMenuSlot_GetLoadResponse final
{
public:
	class UItemLoadResponse*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEmoteMenuSlot_GetLoadResponse) == 0x000008, "Wrong alignment on MarinerEmoteMenuSlot_GetLoadResponse");
static_assert(sizeof(MarinerEmoteMenuSlot_GetLoadResponse) == 0x000008, "Wrong size on MarinerEmoteMenuSlot_GetLoadResponse");
static_assert(offsetof(MarinerEmoteMenuSlot_GetLoadResponse, ReturnValue) == 0x000000, "Member 'MarinerEmoteMenuSlot_GetLoadResponse::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerEmoteMenuSlot.GetSlottedItemId
// 0x0010 (0x0010 - 0x0000)
struct MarinerEmoteMenuSlot_GetSlottedItemId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEmoteMenuSlot_GetSlottedItemId) == 0x000008, "Wrong alignment on MarinerEmoteMenuSlot_GetSlottedItemId");
static_assert(sizeof(MarinerEmoteMenuSlot_GetSlottedItemId) == 0x000010, "Wrong size on MarinerEmoteMenuSlot_GetSlottedItemId");
static_assert(offsetof(MarinerEmoteMenuSlot_GetSlottedItemId, ReturnValue) == 0x000000, "Member 'MarinerEmoteMenuSlot_GetSlottedItemId::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerEmptyItem.SetEmptyItemDesiredSize
// 0x0008 (0x0008 - 0x0000)
struct MarinerEmptyItem_SetEmptyItemDesiredSize final
{
public:
	int32                                         DesiredWidth;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesiredHeight;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEmptyItem_SetEmptyItemDesiredSize) == 0x000004, "Wrong alignment on MarinerEmptyItem_SetEmptyItemDesiredSize");
static_assert(sizeof(MarinerEmptyItem_SetEmptyItemDesiredSize) == 0x000008, "Wrong size on MarinerEmptyItem_SetEmptyItemDesiredSize");
static_assert(offsetof(MarinerEmptyItem_SetEmptyItemDesiredSize, DesiredWidth) == 0x000000, "Member 'MarinerEmptyItem_SetEmptyItemDesiredSize::DesiredWidth' has a wrong offset!");
static_assert(offsetof(MarinerEmptyItem_SetEmptyItemDesiredSize, DesiredHeight) == 0x000004, "Member 'MarinerEmptyItem_SetEmptyItemDesiredSize::DesiredHeight' has a wrong offset!");

// Function Mariner.MarinerEquipItemToAllCharacters.EquipItemToAllCharacters
// 0x0028 (0x0028 - 0x0000)
struct MarinerEquipItemToAllCharacters_EquipItemToAllCharacters final
{
public:
	const class UObject*                          Param_WorldContextObject;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMarinerCMSItemDataAsset*>       Param_ItemsToEquip;                                // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRanked;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1863[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerEquipItemToAllCharacters*       ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerEquipItemToAllCharacters_EquipItemToAllCharacters) == 0x000008, "Wrong alignment on MarinerEquipItemToAllCharacters_EquipItemToAllCharacters");
static_assert(sizeof(MarinerEquipItemToAllCharacters_EquipItemToAllCharacters) == 0x000028, "Wrong size on MarinerEquipItemToAllCharacters_EquipItemToAllCharacters");
static_assert(offsetof(MarinerEquipItemToAllCharacters_EquipItemToAllCharacters, Param_WorldContextObject) == 0x000000, "Member 'MarinerEquipItemToAllCharacters_EquipItemToAllCharacters::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerEquipItemToAllCharacters_EquipItemToAllCharacters, Param_ItemsToEquip) == 0x000008, "Member 'MarinerEquipItemToAllCharacters_EquipItemToAllCharacters::Param_ItemsToEquip' has a wrong offset!");
static_assert(offsetof(MarinerEquipItemToAllCharacters_EquipItemToAllCharacters, bRanked) == 0x000018, "Member 'MarinerEquipItemToAllCharacters_EquipItemToAllCharacters::bRanked' has a wrong offset!");
static_assert(offsetof(MarinerEquipItemToAllCharacters_EquipItemToAllCharacters, ReturnValue) == 0x000020, "Member 'MarinerEquipItemToAllCharacters_EquipItemToAllCharacters::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerShockwave.AuthorityManuallyAddIgnoredDamageActor
// 0x0008 (0x0008 - 0x0000)
struct MarinerShockwave_AuthorityManuallyAddIgnoredDamageActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerShockwave_AuthorityManuallyAddIgnoredDamageActor) == 0x000008, "Wrong alignment on MarinerShockwave_AuthorityManuallyAddIgnoredDamageActor");
static_assert(sizeof(MarinerShockwave_AuthorityManuallyAddIgnoredDamageActor) == 0x000008, "Wrong size on MarinerShockwave_AuthorityManuallyAddIgnoredDamageActor");
static_assert(offsetof(MarinerShockwave_AuthorityManuallyAddIgnoredDamageActor, Actor) == 0x000000, "Member 'MarinerShockwave_AuthorityManuallyAddIgnoredDamageActor::Actor' has a wrong offset!");

// Function Mariner.MarinerFastArenaBounds.IsPointInside2DBounds
// 0x002C (0x002C - 0x0000)
struct MarinerFastArenaBounds_IsPointInside2DBounds final
{
public:
	struct FVector                                PointToTest;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistToClosestSurface;                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPointOnClosestSurface;                          // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutSurfaceNormal;                                  // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_186D[0x3];                                     // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastArenaBounds_IsPointInside2DBounds) == 0x000004, "Wrong alignment on MarinerFastArenaBounds_IsPointInside2DBounds");
static_assert(sizeof(MarinerFastArenaBounds_IsPointInside2DBounds) == 0x00002C, "Wrong size on MarinerFastArenaBounds_IsPointInside2DBounds");
static_assert(offsetof(MarinerFastArenaBounds_IsPointInside2DBounds, PointToTest) == 0x000000, "Member 'MarinerFastArenaBounds_IsPointInside2DBounds::PointToTest' has a wrong offset!");
static_assert(offsetof(MarinerFastArenaBounds_IsPointInside2DBounds, OutDistToClosestSurface) == 0x00000C, "Member 'MarinerFastArenaBounds_IsPointInside2DBounds::OutDistToClosestSurface' has a wrong offset!");
static_assert(offsetof(MarinerFastArenaBounds_IsPointInside2DBounds, OutPointOnClosestSurface) == 0x000010, "Member 'MarinerFastArenaBounds_IsPointInside2DBounds::OutPointOnClosestSurface' has a wrong offset!");
static_assert(offsetof(MarinerFastArenaBounds_IsPointInside2DBounds, OutSurfaceNormal) == 0x00001C, "Member 'MarinerFastArenaBounds_IsPointInside2DBounds::OutSurfaceNormal' has a wrong offset!");
static_assert(offsetof(MarinerFastArenaBounds_IsPointInside2DBounds, ReturnValue) == 0x000028, "Member 'MarinerFastArenaBounds_IsPointInside2DBounds::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastArenaBounds.IsPointInsideArenaBounds
// 0x002C (0x002C - 0x0000)
struct MarinerFastArenaBounds_IsPointInsideArenaBounds final
{
public:
	struct FVector                                PointToTest;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistToClosestSurface;                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPointOnClosestSurface;                          // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutSurfaceNormal;                                  // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_186E[0x3];                                     // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastArenaBounds_IsPointInsideArenaBounds) == 0x000004, "Wrong alignment on MarinerFastArenaBounds_IsPointInsideArenaBounds");
static_assert(sizeof(MarinerFastArenaBounds_IsPointInsideArenaBounds) == 0x00002C, "Wrong size on MarinerFastArenaBounds_IsPointInsideArenaBounds");
static_assert(offsetof(MarinerFastArenaBounds_IsPointInsideArenaBounds, PointToTest) == 0x000000, "Member 'MarinerFastArenaBounds_IsPointInsideArenaBounds::PointToTest' has a wrong offset!");
static_assert(offsetof(MarinerFastArenaBounds_IsPointInsideArenaBounds, OutDistToClosestSurface) == 0x00000C, "Member 'MarinerFastArenaBounds_IsPointInsideArenaBounds::OutDistToClosestSurface' has a wrong offset!");
static_assert(offsetof(MarinerFastArenaBounds_IsPointInsideArenaBounds, OutPointOnClosestSurface) == 0x000010, "Member 'MarinerFastArenaBounds_IsPointInsideArenaBounds::OutPointOnClosestSurface' has a wrong offset!");
static_assert(offsetof(MarinerFastArenaBounds_IsPointInsideArenaBounds, OutSurfaceNormal) == 0x00001C, "Member 'MarinerFastArenaBounds_IsPointInsideArenaBounds::OutSurfaceNormal' has a wrong offset!");
static_assert(offsetof(MarinerFastArenaBounds_IsPointInsideArenaBounds, ReturnValue) == 0x000028, "Member 'MarinerFastArenaBounds_IsPointInsideArenaBounds::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastArenaBounds.MulticastKnockout
// 0x001C (0x001C - 0x0000)
struct MarinerFastArenaBounds_MulticastKnockout final
{
public:
	int8                                          KnockedOutTeamIndex;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_186F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    Position;                                          // 0x0004(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              Normal;                                            // 0x0010(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFastArenaBounds_MulticastKnockout) == 0x000004, "Wrong alignment on MarinerFastArenaBounds_MulticastKnockout");
static_assert(sizeof(MarinerFastArenaBounds_MulticastKnockout) == 0x00001C, "Wrong size on MarinerFastArenaBounds_MulticastKnockout");
static_assert(offsetof(MarinerFastArenaBounds_MulticastKnockout, KnockedOutTeamIndex) == 0x000000, "Member 'MarinerFastArenaBounds_MulticastKnockout::KnockedOutTeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerFastArenaBounds_MulticastKnockout, Position) == 0x000004, "Member 'MarinerFastArenaBounds_MulticastKnockout::Position' has a wrong offset!");
static_assert(offsetof(MarinerFastArenaBounds_MulticastKnockout, Normal) == 0x000010, "Member 'MarinerFastArenaBounds_MulticastKnockout::Normal' has a wrong offset!");

// Function Mariner.MarinerWeapon.OnMontageBlendingOutStarted
// 0x0010 (0x0010 - 0x0000)
struct MarinerWeapon_OnMontageBlendingOutStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1874[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerWeapon_OnMontageBlendingOutStarted) == 0x000008, "Wrong alignment on MarinerWeapon_OnMontageBlendingOutStarted");
static_assert(sizeof(MarinerWeapon_OnMontageBlendingOutStarted) == 0x000010, "Wrong size on MarinerWeapon_OnMontageBlendingOutStarted");
static_assert(offsetof(MarinerWeapon_OnMontageBlendingOutStarted, Montage) == 0x000000, "Member 'MarinerWeapon_OnMontageBlendingOutStarted::Montage' has a wrong offset!");
static_assert(offsetof(MarinerWeapon_OnMontageBlendingOutStarted, bInterrupted) == 0x000008, "Member 'MarinerWeapon_OnMontageBlendingOutStarted::bInterrupted' has a wrong offset!");

// Function Mariner.MarinerWeapon.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct MarinerWeapon_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1875[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerWeapon_OnMontageEnded) == 0x000008, "Wrong alignment on MarinerWeapon_OnMontageEnded");
static_assert(sizeof(MarinerWeapon_OnMontageEnded) == 0x000010, "Wrong size on MarinerWeapon_OnMontageEnded");
static_assert(offsetof(MarinerWeapon_OnMontageEnded, Montage) == 0x000000, "Member 'MarinerWeapon_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(MarinerWeapon_OnMontageEnded, bInterrupted) == 0x000008, "Member 'MarinerWeapon_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function Mariner.MarinerWeapon.OnMontageStarted
// 0x0008 (0x0008 - 0x0000)
struct MarinerWeapon_OnMontageStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWeapon_OnMontageStarted) == 0x000008, "Wrong alignment on MarinerWeapon_OnMontageStarted");
static_assert(sizeof(MarinerWeapon_OnMontageStarted) == 0x000008, "Wrong size on MarinerWeapon_OnMontageStarted");
static_assert(offsetof(MarinerWeapon_OnMontageStarted, Montage) == 0x000000, "Member 'MarinerWeapon_OnMontageStarted::Montage' has a wrong offset!");

// Function Mariner.MarinerWeapon.PlayMarinerWeaponMontage
// 0x0028 (0x0028 - 0x0000)
struct MarinerWeapon_PlayMarinerWeaponMontage final
{
public:
	const class UMarinerWeaponMontage*            WeaponMontage;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSectionName;                                  // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1876[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                OptionalMontageListener;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1877[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerWeapon_PlayMarinerWeaponMontage) == 0x000008, "Wrong alignment on MarinerWeapon_PlayMarinerWeaponMontage");
static_assert(sizeof(MarinerWeapon_PlayMarinerWeaponMontage) == 0x000028, "Wrong size on MarinerWeapon_PlayMarinerWeaponMontage");
static_assert(offsetof(MarinerWeapon_PlayMarinerWeaponMontage, WeaponMontage) == 0x000000, "Member 'MarinerWeapon_PlayMarinerWeaponMontage::WeaponMontage' has a wrong offset!");
static_assert(offsetof(MarinerWeapon_PlayMarinerWeaponMontage, PlayRate) == 0x000008, "Member 'MarinerWeapon_PlayMarinerWeaponMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(MarinerWeapon_PlayMarinerWeaponMontage, StartSectionName) == 0x00000C, "Member 'MarinerWeapon_PlayMarinerWeaponMontage::StartSectionName' has a wrong offset!");
static_assert(offsetof(MarinerWeapon_PlayMarinerWeaponMontage, OptionalMontageListener) == 0x000018, "Member 'MarinerWeapon_PlayMarinerWeaponMontage::OptionalMontageListener' has a wrong offset!");
static_assert(offsetof(MarinerWeapon_PlayMarinerWeaponMontage, ReturnValue) == 0x000020, "Member 'MarinerWeapon_PlayMarinerWeaponMontage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerWeapon.StopMarinerWeaponMontage
// 0x0010 (0x0010 - 0x0000)
struct MarinerWeapon_StopMarinerWeaponMontage final
{
public:
	float                                         BlendOutTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1878[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UMarinerWeaponMontage*            WeaponMontage;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWeapon_StopMarinerWeaponMontage) == 0x000008, "Wrong alignment on MarinerWeapon_StopMarinerWeaponMontage");
static_assert(sizeof(MarinerWeapon_StopMarinerWeaponMontage) == 0x000010, "Wrong size on MarinerWeapon_StopMarinerWeaponMontage");
static_assert(offsetof(MarinerWeapon_StopMarinerWeaponMontage, BlendOutTime) == 0x000000, "Member 'MarinerWeapon_StopMarinerWeaponMontage::BlendOutTime' has a wrong offset!");
static_assert(offsetof(MarinerWeapon_StopMarinerWeaponMontage, WeaponMontage) == 0x000008, "Member 'MarinerWeapon_StopMarinerWeaponMontage::WeaponMontage' has a wrong offset!");

// Function Mariner.MarinerWeapon.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct MarinerWeapon_GetCurrentState final
{
public:
	EMarinerWeaponState                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWeapon_GetCurrentState) == 0x000001, "Wrong alignment on MarinerWeapon_GetCurrentState");
static_assert(sizeof(MarinerWeapon_GetCurrentState) == 0x000001, "Wrong size on MarinerWeapon_GetCurrentState");
static_assert(offsetof(MarinerWeapon_GetCurrentState, ReturnValue) == 0x000000, "Member 'MarinerWeapon_GetCurrentState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerWeapon.GetMuzzleDirection
// 0x0014 (0x0014 - 0x0000)
struct MarinerWeapon_GetMuzzleDirection final
{
public:
	class FName                                   MuzzleAttachPoint;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWeapon_GetMuzzleDirection) == 0x000004, "Wrong alignment on MarinerWeapon_GetMuzzleDirection");
static_assert(sizeof(MarinerWeapon_GetMuzzleDirection) == 0x000014, "Wrong size on MarinerWeapon_GetMuzzleDirection");
static_assert(offsetof(MarinerWeapon_GetMuzzleDirection, MuzzleAttachPoint) == 0x000000, "Member 'MarinerWeapon_GetMuzzleDirection::MuzzleAttachPoint' has a wrong offset!");
static_assert(offsetof(MarinerWeapon_GetMuzzleDirection, ReturnValue) == 0x000008, "Member 'MarinerWeapon_GetMuzzleDirection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerWeapon.GetMuzzleLocation
// 0x0014 (0x0014 - 0x0000)
struct MarinerWeapon_GetMuzzleLocation final
{
public:
	class FName                                   MuzzleAttachPoint;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWeapon_GetMuzzleLocation) == 0x000004, "Wrong alignment on MarinerWeapon_GetMuzzleLocation");
static_assert(sizeof(MarinerWeapon_GetMuzzleLocation) == 0x000014, "Wrong size on MarinerWeapon_GetMuzzleLocation");
static_assert(offsetof(MarinerWeapon_GetMuzzleLocation, MuzzleAttachPoint) == 0x000000, "Member 'MarinerWeapon_GetMuzzleLocation::MuzzleAttachPoint' has a wrong offset!");
static_assert(offsetof(MarinerWeapon_GetMuzzleLocation, ReturnValue) == 0x000008, "Member 'MarinerWeapon_GetMuzzleLocation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerWeapon.GetPawnOwner
// 0x0008 (0x0008 - 0x0000)
struct MarinerWeapon_GetPawnOwner final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWeapon_GetPawnOwner) == 0x000008, "Wrong alignment on MarinerWeapon_GetPawnOwner");
static_assert(sizeof(MarinerWeapon_GetPawnOwner) == 0x000008, "Wrong size on MarinerWeapon_GetPawnOwner");
static_assert(offsetof(MarinerWeapon_GetPawnOwner, ReturnValue) == 0x000000, "Member 'MarinerWeapon_GetPawnOwner::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerWeapon.GetWeaponMesh
// 0x0008 (0x0008 - 0x0000)
struct MarinerWeapon_GetWeaponMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWeapon_GetWeaponMesh) == 0x000008, "Wrong alignment on MarinerWeapon_GetWeaponMesh");
static_assert(sizeof(MarinerWeapon_GetWeaponMesh) == 0x000008, "Wrong size on MarinerWeapon_GetWeaponMesh");
static_assert(offsetof(MarinerWeapon_GetWeaponMesh, ReturnValue) == 0x000000, "Member 'MarinerWeapon_GetWeaponMesh::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerWeapon.IsFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct MarinerWeapon_IsFirstPerson final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWeapon_IsFirstPerson) == 0x000001, "Wrong alignment on MarinerWeapon_IsFirstPerson");
static_assert(sizeof(MarinerWeapon_IsFirstPerson) == 0x000001, "Wrong size on MarinerWeapon_IsFirstPerson");
static_assert(offsetof(MarinerWeapon_IsFirstPerson, ReturnValue) == 0x000000, "Member 'MarinerWeapon_IsFirstPerson::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerWeapon.IsReloading
// 0x0001 (0x0001 - 0x0000)
struct MarinerWeapon_IsReloading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWeapon_IsReloading) == 0x000001, "Wrong alignment on MarinerWeapon_IsReloading");
static_assert(sizeof(MarinerWeapon_IsReloading) == 0x000001, "Wrong size on MarinerWeapon_IsReloading");
static_assert(offsetof(MarinerWeapon_IsReloading, ReturnValue) == 0x000000, "Member 'MarinerWeapon_IsReloading::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSkinDataAsset.GetSkinAssetAsString
// 0x0038 (0x0038 - 0x0000)
struct MarinerSkinDataAsset_GetSkinAssetAsString final
{
public:
	TSoftObjectPtr<class UMarinerSkinDataAsset>   Asset;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinDataAsset_GetSkinAssetAsString) == 0x000008, "Wrong alignment on MarinerSkinDataAsset_GetSkinAssetAsString");
static_assert(sizeof(MarinerSkinDataAsset_GetSkinAssetAsString) == 0x000038, "Wrong size on MarinerSkinDataAsset_GetSkinAssetAsString");
static_assert(offsetof(MarinerSkinDataAsset_GetSkinAssetAsString, Asset) == 0x000000, "Member 'MarinerSkinDataAsset_GetSkinAssetAsString::Asset' has a wrong offset!");
static_assert(offsetof(MarinerSkinDataAsset_GetSkinAssetAsString, ReturnValue) == 0x000028, "Member 'MarinerSkinDataAsset_GetSkinAssetAsString::ReturnValue' has a wrong offset!");

// Function Mariner.FastCollisionManager.GetColliders
// 0x0018 (0x0018 - 0x0000)
struct FastCollisionManager_GetColliders final
{
public:
	EMarinerFastCollisionCollectionFlags          Collection;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_187C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarinerFastCollisionComponent*> ReturnValue;                                       // 0x0008(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FastCollisionManager_GetColliders) == 0x000008, "Wrong alignment on FastCollisionManager_GetColliders");
static_assert(sizeof(FastCollisionManager_GetColliders) == 0x000018, "Wrong size on FastCollisionManager_GetColliders");
static_assert(offsetof(FastCollisionManager_GetColliders, Collection) == 0x000000, "Member 'FastCollisionManager_GetColliders::Collection' has a wrong offset!");
static_assert(offsetof(FastCollisionManager_GetColliders, ReturnValue) == 0x000008, "Member 'FastCollisionManager_GetColliders::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_MatSwap.MatSwapCharacter
// 0x0030 (0x0030 - 0x0000)
struct MarinerTask_MatSwap_MatSwapCharacter final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MatSwappingMaterial;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitingToMatSwapDuration;                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MatSwapDuration;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevertMatOnThrowItem;                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevertMatOnDropItem;                              // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevertMatOnCatchItem;                             // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_187F[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerTask_MatSwap*                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_MatSwap_MatSwapCharacter) == 0x000008, "Wrong alignment on MarinerTask_MatSwap_MatSwapCharacter");
static_assert(sizeof(MarinerTask_MatSwap_MatSwapCharacter) == 0x000030, "Wrong size on MarinerTask_MatSwap_MatSwapCharacter");
static_assert(offsetof(MarinerTask_MatSwap_MatSwapCharacter, OwningAbility) == 0x000000, "Member 'MarinerTask_MatSwap_MatSwapCharacter::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_MatSwap_MatSwapCharacter, TaskInstanceName) == 0x000008, "Member 'MarinerTask_MatSwap_MatSwapCharacter::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_MatSwap_MatSwapCharacter, MatSwappingMaterial) == 0x000010, "Member 'MarinerTask_MatSwap_MatSwapCharacter::MatSwappingMaterial' has a wrong offset!");
static_assert(offsetof(MarinerTask_MatSwap_MatSwapCharacter, WaitingToMatSwapDuration) == 0x000018, "Member 'MarinerTask_MatSwap_MatSwapCharacter::WaitingToMatSwapDuration' has a wrong offset!");
static_assert(offsetof(MarinerTask_MatSwap_MatSwapCharacter, MatSwapDuration) == 0x00001C, "Member 'MarinerTask_MatSwap_MatSwapCharacter::MatSwapDuration' has a wrong offset!");
static_assert(offsetof(MarinerTask_MatSwap_MatSwapCharacter, bRevertMatOnThrowItem) == 0x000020, "Member 'MarinerTask_MatSwap_MatSwapCharacter::bRevertMatOnThrowItem' has a wrong offset!");
static_assert(offsetof(MarinerTask_MatSwap_MatSwapCharacter, bRevertMatOnDropItem) == 0x000021, "Member 'MarinerTask_MatSwap_MatSwapCharacter::bRevertMatOnDropItem' has a wrong offset!");
static_assert(offsetof(MarinerTask_MatSwap_MatSwapCharacter, bRevertMatOnCatchItem) == 0x000022, "Member 'MarinerTask_MatSwap_MatSwapCharacter::bRevertMatOnCatchItem' has a wrong offset!");
static_assert(offsetof(MarinerTask_MatSwap_MatSwapCharacter, ReturnValue) == 0x000028, "Member 'MarinerTask_MatSwap_MatSwapCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_MatSwap.OnItemCaught_Interrupt
// 0x0010 (0x0010 - 0x0000)
struct MarinerTask_MatSwap_OnItemCaught_Interrupt final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerItemSlot                              ItemSlot;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1880[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerTask_MatSwap_OnItemCaught_Interrupt) == 0x000008, "Wrong alignment on MarinerTask_MatSwap_OnItemCaught_Interrupt");
static_assert(sizeof(MarinerTask_MatSwap_OnItemCaught_Interrupt) == 0x000010, "Wrong size on MarinerTask_MatSwap_OnItemCaught_Interrupt");
static_assert(offsetof(MarinerTask_MatSwap_OnItemCaught_Interrupt, Character) == 0x000000, "Member 'MarinerTask_MatSwap_OnItemCaught_Interrupt::Character' has a wrong offset!");
static_assert(offsetof(MarinerTask_MatSwap_OnItemCaught_Interrupt, ItemSlot) == 0x000008, "Member 'MarinerTask_MatSwap_OnItemCaught_Interrupt::ItemSlot' has a wrong offset!");

// Function Mariner.MarinerTask_MatSwap.OnItemCaught_MatSwap
// 0x0010 (0x0010 - 0x0000)
struct MarinerTask_MatSwap_OnItemCaught_MatSwap final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerItemSlot                              ItemSlot;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1881[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerTask_MatSwap_OnItemCaught_MatSwap) == 0x000008, "Wrong alignment on MarinerTask_MatSwap_OnItemCaught_MatSwap");
static_assert(sizeof(MarinerTask_MatSwap_OnItemCaught_MatSwap) == 0x000010, "Wrong size on MarinerTask_MatSwap_OnItemCaught_MatSwap");
static_assert(offsetof(MarinerTask_MatSwap_OnItemCaught_MatSwap, Character) == 0x000000, "Member 'MarinerTask_MatSwap_OnItemCaught_MatSwap::Character' has a wrong offset!");
static_assert(offsetof(MarinerTask_MatSwap_OnItemCaught_MatSwap, ItemSlot) == 0x000008, "Member 'MarinerTask_MatSwap_OnItemCaught_MatSwap::ItemSlot' has a wrong offset!");

// Function Mariner.MarinerTask_MatSwap.OnItemDropped_Interrupt
// 0x0010 (0x0010 - 0x0000)
struct MarinerTask_MatSwap_OnItemDropped_Interrupt final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerItemSlot                              ItemSlot;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1882[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerTask_MatSwap_OnItemDropped_Interrupt) == 0x000008, "Wrong alignment on MarinerTask_MatSwap_OnItemDropped_Interrupt");
static_assert(sizeof(MarinerTask_MatSwap_OnItemDropped_Interrupt) == 0x000010, "Wrong size on MarinerTask_MatSwap_OnItemDropped_Interrupt");
static_assert(offsetof(MarinerTask_MatSwap_OnItemDropped_Interrupt, Character) == 0x000000, "Member 'MarinerTask_MatSwap_OnItemDropped_Interrupt::Character' has a wrong offset!");
static_assert(offsetof(MarinerTask_MatSwap_OnItemDropped_Interrupt, ItemSlot) == 0x000008, "Member 'MarinerTask_MatSwap_OnItemDropped_Interrupt::ItemSlot' has a wrong offset!");

// Function Mariner.MarinerTask_MatSwap.OnItemRelease_RevertMat
// 0x0010 (0x0010 - 0x0000)
struct MarinerTask_MatSwap_OnItemRelease_RevertMat final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerItemSlot                              ItemSlot;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1883[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerTask_MatSwap_OnItemRelease_RevertMat) == 0x000008, "Wrong alignment on MarinerTask_MatSwap_OnItemRelease_RevertMat");
static_assert(sizeof(MarinerTask_MatSwap_OnItemRelease_RevertMat) == 0x000010, "Wrong size on MarinerTask_MatSwap_OnItemRelease_RevertMat");
static_assert(offsetof(MarinerTask_MatSwap_OnItemRelease_RevertMat, Character) == 0x000000, "Member 'MarinerTask_MatSwap_OnItemRelease_RevertMat::Character' has a wrong offset!");
static_assert(offsetof(MarinerTask_MatSwap_OnItemRelease_RevertMat, ItemSlot) == 0x000008, "Member 'MarinerTask_MatSwap_OnItemRelease_RevertMat::ItemSlot' has a wrong offset!");

// Function Mariner.MarinerTask_MatSwap.OnItemThrown_Interrupt
// 0x0010 (0x0010 - 0x0000)
struct MarinerTask_MatSwap_OnItemThrown_Interrupt final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerItemSlot                              ItemSlot;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1884[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerTask_MatSwap_OnItemThrown_Interrupt) == 0x000008, "Wrong alignment on MarinerTask_MatSwap_OnItemThrown_Interrupt");
static_assert(sizeof(MarinerTask_MatSwap_OnItemThrown_Interrupt) == 0x000010, "Wrong size on MarinerTask_MatSwap_OnItemThrown_Interrupt");
static_assert(offsetof(MarinerTask_MatSwap_OnItemThrown_Interrupt, Character) == 0x000000, "Member 'MarinerTask_MatSwap_OnItemThrown_Interrupt::Character' has a wrong offset!");
static_assert(offsetof(MarinerTask_MatSwap_OnItemThrown_Interrupt, ItemSlot) == 0x000008, "Member 'MarinerTask_MatSwap_OnItemThrown_Interrupt::ItemSlot' has a wrong offset!");

// Function Mariner.MarinerTask_MatSwap.GetInterruptState
// 0x0001 (0x0001 - 0x0000)
struct MarinerTask_MatSwap_GetInterruptState final
{
public:
	EMarinerMatSwapInterrupt                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_MatSwap_GetInterruptState) == 0x000001, "Wrong alignment on MarinerTask_MatSwap_GetInterruptState");
static_assert(sizeof(MarinerTask_MatSwap_GetInterruptState) == 0x000001, "Wrong size on MarinerTask_MatSwap_GetInterruptState");
static_assert(offsetof(MarinerTask_MatSwap_GetInterruptState, ReturnValue) == 0x000000, "Member 'MarinerTask_MatSwap_GetInterruptState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_MatSwap.GetMatSwapState
// 0x0001 (0x0001 - 0x0000)
struct MarinerTask_MatSwap_GetMatSwapState final
{
public:
	EMarinerMatSwapState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_MatSwap_GetMatSwapState) == 0x000001, "Wrong alignment on MarinerTask_MatSwap_GetMatSwapState");
static_assert(sizeof(MarinerTask_MatSwap_GetMatSwapState) == 0x000001, "Wrong size on MarinerTask_MatSwap_GetMatSwapState");
static_assert(offsetof(MarinerTask_MatSwap_GetMatSwapState, ReturnValue) == 0x000000, "Member 'MarinerTask_MatSwap_GetMatSwapState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastSphereComponent.DoProjectileSweep
// 0x00A8 (0x00A8 - 0x0000)
struct MarinerFastSphereComponent_DoProjectileSweep final
{
public:
	bool                                          bIgnoreDamageableHitsBehind;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1885[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Start;                                             // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x001C(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1886[0x3];                                     // 0x00A5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastSphereComponent_DoProjectileSweep) == 0x000004, "Wrong alignment on MarinerFastSphereComponent_DoProjectileSweep");
static_assert(sizeof(MarinerFastSphereComponent_DoProjectileSweep) == 0x0000A8, "Wrong size on MarinerFastSphereComponent_DoProjectileSweep");
static_assert(offsetof(MarinerFastSphereComponent_DoProjectileSweep, bIgnoreDamageableHitsBehind) == 0x000000, "Member 'MarinerFastSphereComponent_DoProjectileSweep::bIgnoreDamageableHitsBehind' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_DoProjectileSweep, Start) == 0x000004, "Member 'MarinerFastSphereComponent_DoProjectileSweep::Start' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_DoProjectileSweep, End) == 0x000010, "Member 'MarinerFastSphereComponent_DoProjectileSweep::End' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_DoProjectileSweep, HitResult) == 0x00001C, "Member 'MarinerFastSphereComponent_DoProjectileSweep::HitResult' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_DoProjectileSweep, ReturnValue) == 0x0000A4, "Member 'MarinerFastSphereComponent_DoProjectileSweep::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastSphereComponent.SweepAgainstFastCollider
// 0x0040 (0x0040 - 0x0000)
struct MarinerFastSphereComponent_SweepAgainstFastCollider final
{
public:
	const class UMarinerFastCollisionComponent*   Other;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPoint;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionPoint;                                 // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionNormal;                                // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1887[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastSphereComponent_SweepAgainstFastCollider) == 0x000008, "Wrong alignment on MarinerFastSphereComponent_SweepAgainstFastCollider");
static_assert(sizeof(MarinerFastSphereComponent_SweepAgainstFastCollider) == 0x000040, "Wrong size on MarinerFastSphereComponent_SweepAgainstFastCollider");
static_assert(offsetof(MarinerFastSphereComponent_SweepAgainstFastCollider, Other) == 0x000000, "Member 'MarinerFastSphereComponent_SweepAgainstFastCollider::Other' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepAgainstFastCollider, StartPoint) == 0x000008, "Member 'MarinerFastSphereComponent_SweepAgainstFastCollider::StartPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepAgainstFastCollider, EndPoint) == 0x000014, "Member 'MarinerFastSphereComponent_SweepAgainstFastCollider::EndPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepAgainstFastCollider, OutCollisionPoint) == 0x000020, "Member 'MarinerFastSphereComponent_SweepAgainstFastCollider::OutCollisionPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepAgainstFastCollider, OutCollisionNormal) == 0x00002C, "Member 'MarinerFastSphereComponent_SweepAgainstFastCollider::OutCollisionNormal' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepAgainstFastCollider, ReturnValue) == 0x000038, "Member 'MarinerFastSphereComponent_SweepAgainstFastCollider::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastSphereComponent.SweepCollideWithBox
// 0x0040 (0x0040 - 0x0000)
struct MarinerFastSphereComponent_SweepCollideWithBox final
{
public:
	const class UMarinerFastCollisionComponent*   Other;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPoint;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionPoint;                                 // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionNormal;                                // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1888[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastSphereComponent_SweepCollideWithBox) == 0x000008, "Wrong alignment on MarinerFastSphereComponent_SweepCollideWithBox");
static_assert(sizeof(MarinerFastSphereComponent_SweepCollideWithBox) == 0x000040, "Wrong size on MarinerFastSphereComponent_SweepCollideWithBox");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithBox, Other) == 0x000000, "Member 'MarinerFastSphereComponent_SweepCollideWithBox::Other' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithBox, StartPoint) == 0x000008, "Member 'MarinerFastSphereComponent_SweepCollideWithBox::StartPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithBox, EndPoint) == 0x000014, "Member 'MarinerFastSphereComponent_SweepCollideWithBox::EndPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithBox, OutCollisionPoint) == 0x000020, "Member 'MarinerFastSphereComponent_SweepCollideWithBox::OutCollisionPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithBox, OutCollisionNormal) == 0x00002C, "Member 'MarinerFastSphereComponent_SweepCollideWithBox::OutCollisionNormal' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithBox, ReturnValue) == 0x000038, "Member 'MarinerFastSphereComponent_SweepCollideWithBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastSphereComponent.SweepCollideWithCapsule
// 0x0040 (0x0040 - 0x0000)
struct MarinerFastSphereComponent_SweepCollideWithCapsule final
{
public:
	const class UMarinerFastCollisionComponent*   Other;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPoint;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionPoint;                                 // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionNormal;                                // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1889[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastSphereComponent_SweepCollideWithCapsule) == 0x000008, "Wrong alignment on MarinerFastSphereComponent_SweepCollideWithCapsule");
static_assert(sizeof(MarinerFastSphereComponent_SweepCollideWithCapsule) == 0x000040, "Wrong size on MarinerFastSphereComponent_SweepCollideWithCapsule");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithCapsule, Other) == 0x000000, "Member 'MarinerFastSphereComponent_SweepCollideWithCapsule::Other' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithCapsule, StartPoint) == 0x000008, "Member 'MarinerFastSphereComponent_SweepCollideWithCapsule::StartPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithCapsule, EndPoint) == 0x000014, "Member 'MarinerFastSphereComponent_SweepCollideWithCapsule::EndPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithCapsule, OutCollisionPoint) == 0x000020, "Member 'MarinerFastSphereComponent_SweepCollideWithCapsule::OutCollisionPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithCapsule, OutCollisionNormal) == 0x00002C, "Member 'MarinerFastSphereComponent_SweepCollideWithCapsule::OutCollisionNormal' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithCapsule, ReturnValue) == 0x000038, "Member 'MarinerFastSphereComponent_SweepCollideWithCapsule::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFastSphereComponent.SweepCollideWithSphere
// 0x0040 (0x0040 - 0x0000)
struct MarinerFastSphereComponent_SweepCollideWithSphere final
{
public:
	const class UMarinerFastCollisionComponent*   Other;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPoint;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionPoint;                                 // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionNormal;                                // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_188A[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFastSphereComponent_SweepCollideWithSphere) == 0x000008, "Wrong alignment on MarinerFastSphereComponent_SweepCollideWithSphere");
static_assert(sizeof(MarinerFastSphereComponent_SweepCollideWithSphere) == 0x000040, "Wrong size on MarinerFastSphereComponent_SweepCollideWithSphere");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithSphere, Other) == 0x000000, "Member 'MarinerFastSphereComponent_SweepCollideWithSphere::Other' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithSphere, StartPoint) == 0x000008, "Member 'MarinerFastSphereComponent_SweepCollideWithSphere::StartPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithSphere, EndPoint) == 0x000014, "Member 'MarinerFastSphereComponent_SweepCollideWithSphere::EndPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithSphere, OutCollisionPoint) == 0x000020, "Member 'MarinerFastSphereComponent_SweepCollideWithSphere::OutCollisionPoint' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithSphere, OutCollisionNormal) == 0x00002C, "Member 'MarinerFastSphereComponent_SweepCollideWithSphere::OutCollisionNormal' has a wrong offset!");
static_assert(offsetof(MarinerFastSphereComponent_SweepCollideWithSphere, ReturnValue) == 0x000038, "Member 'MarinerFastSphereComponent_SweepCollideWithSphere::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileMoveComponent.GetLobDistance
// 0x0004 (0x0004 - 0x0000)
struct MarinerProjectileMoveComponent_GetLobDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileMoveComponent_GetLobDistance) == 0x000004, "Wrong alignment on MarinerProjectileMoveComponent_GetLobDistance");
static_assert(sizeof(MarinerProjectileMoveComponent_GetLobDistance) == 0x000004, "Wrong size on MarinerProjectileMoveComponent_GetLobDistance");
static_assert(offsetof(MarinerProjectileMoveComponent_GetLobDistance, ReturnValue) == 0x000000, "Member 'MarinerProjectileMoveComponent_GetLobDistance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileMoveComponent.HandleBounceCount
// 0x0088 (0x0088 - 0x0000)
struct MarinerProjectileMoveComponent_HandleBounceCount final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileMoveComponent_HandleBounceCount) == 0x000004, "Wrong alignment on MarinerProjectileMoveComponent_HandleBounceCount");
static_assert(sizeof(MarinerProjectileMoveComponent_HandleBounceCount) == 0x000088, "Wrong size on MarinerProjectileMoveComponent_HandleBounceCount");
static_assert(offsetof(MarinerProjectileMoveComponent_HandleBounceCount, Hit) == 0x000000, "Member 'MarinerProjectileMoveComponent_HandleBounceCount::Hit' has a wrong offset!");

// Function Mariner.MarinerProjectileMoveComponent.IsTargetValidForHoming
// 0x0010 (0x0010 - 0x0000)
struct MarinerProjectileMoveComponent_IsTargetValidForHoming final
{
public:
	class AActor*                                 PotentialHomingTarget;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerProjectileMoveComponent_IsTargetValidForHoming) == 0x000008, "Wrong alignment on MarinerProjectileMoveComponent_IsTargetValidForHoming");
static_assert(sizeof(MarinerProjectileMoveComponent_IsTargetValidForHoming) == 0x000010, "Wrong size on MarinerProjectileMoveComponent_IsTargetValidForHoming");
static_assert(offsetof(MarinerProjectileMoveComponent_IsTargetValidForHoming, PotentialHomingTarget) == 0x000000, "Member 'MarinerProjectileMoveComponent_IsTargetValidForHoming::PotentialHomingTarget' has a wrong offset!");
static_assert(offsetof(MarinerProjectileMoveComponent_IsTargetValidForHoming, ReturnValue) == 0x000008, "Member 'MarinerProjectileMoveComponent_IsTargetValidForHoming::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileMoveComponent.SetHomingPolicy
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectileMoveComponent_SetHomingPolicy final
{
public:
	EMarinerHomingPolicy                          NewHomingPolicy;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileMoveComponent_SetHomingPolicy) == 0x000001, "Wrong alignment on MarinerProjectileMoveComponent_SetHomingPolicy");
static_assert(sizeof(MarinerProjectileMoveComponent_SetHomingPolicy) == 0x000001, "Wrong size on MarinerProjectileMoveComponent_SetHomingPolicy");
static_assert(offsetof(MarinerProjectileMoveComponent_SetHomingPolicy, NewHomingPolicy) == 0x000000, "Member 'MarinerProjectileMoveComponent_SetHomingPolicy::NewHomingPolicy' has a wrong offset!");

// Function Mariner.MarinerProjectileMoveComponent.SetMaxRotationalSpeedInDegrees
// 0x0004 (0x0004 - 0x0000)
struct MarinerProjectileMoveComponent_SetMaxRotationalSpeedInDegrees final
{
public:
	float                                         NewMaxRotationalSpeedInDegrees;                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileMoveComponent_SetMaxRotationalSpeedInDegrees) == 0x000004, "Wrong alignment on MarinerProjectileMoveComponent_SetMaxRotationalSpeedInDegrees");
static_assert(sizeof(MarinerProjectileMoveComponent_SetMaxRotationalSpeedInDegrees) == 0x000004, "Wrong size on MarinerProjectileMoveComponent_SetMaxRotationalSpeedInDegrees");
static_assert(offsetof(MarinerProjectileMoveComponent_SetMaxRotationalSpeedInDegrees, NewMaxRotationalSpeedInDegrees) == 0x000000, "Member 'MarinerProjectileMoveComponent_SetMaxRotationalSpeedInDegrees::NewMaxRotationalSpeedInDegrees' has a wrong offset!");

// Function Mariner.MarinerProjectileMoveComponent.SetMinRotationalSpeedInDegrees
// 0x0004 (0x0004 - 0x0000)
struct MarinerProjectileMoveComponent_SetMinRotationalSpeedInDegrees final
{
public:
	float                                         NewMinRotationalSpeedInDegrees;                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileMoveComponent_SetMinRotationalSpeedInDegrees) == 0x000004, "Wrong alignment on MarinerProjectileMoveComponent_SetMinRotationalSpeedInDegrees");
static_assert(sizeof(MarinerProjectileMoveComponent_SetMinRotationalSpeedInDegrees) == 0x000004, "Wrong size on MarinerProjectileMoveComponent_SetMinRotationalSpeedInDegrees");
static_assert(offsetof(MarinerProjectileMoveComponent_SetMinRotationalSpeedInDegrees, NewMinRotationalSpeedInDegrees) == 0x000000, "Member 'MarinerProjectileMoveComponent_SetMinRotationalSpeedInDegrees::NewMinRotationalSpeedInDegrees' has a wrong offset!");

// Function Mariner.MarinerProjectileMoveComponent.SetTurnThresholdBeforeUsingUpVector
// 0x0004 (0x0004 - 0x0000)
struct MarinerProjectileMoveComponent_SetTurnThresholdBeforeUsingUpVector final
{
public:
	float                                         NewTurnThresholdBeforeUsingUpVector;               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileMoveComponent_SetTurnThresholdBeforeUsingUpVector) == 0x000004, "Wrong alignment on MarinerProjectileMoveComponent_SetTurnThresholdBeforeUsingUpVector");
static_assert(sizeof(MarinerProjectileMoveComponent_SetTurnThresholdBeforeUsingUpVector) == 0x000004, "Wrong size on MarinerProjectileMoveComponent_SetTurnThresholdBeforeUsingUpVector");
static_assert(offsetof(MarinerProjectileMoveComponent_SetTurnThresholdBeforeUsingUpVector, NewTurnThresholdBeforeUsingUpVector) == 0x000000, "Member 'MarinerProjectileMoveComponent_SetTurnThresholdBeforeUsingUpVector::NewTurnThresholdBeforeUsingUpVector' has a wrong offset!");

// Function Mariner.MarinerProjectileMoveComponent.TrySetHomingTargetComponent
// 0x0018 (0x0018 - 0x0000)
struct MarinerProjectileMoveComponent_TrySetHomingTargetComponent final
{
public:
	class USceneComponent*                        InHomingTargetComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSocketName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerProjectileMoveComponent_TrySetHomingTargetComponent) == 0x000008, "Wrong alignment on MarinerProjectileMoveComponent_TrySetHomingTargetComponent");
static_assert(sizeof(MarinerProjectileMoveComponent_TrySetHomingTargetComponent) == 0x000018, "Wrong size on MarinerProjectileMoveComponent_TrySetHomingTargetComponent");
static_assert(offsetof(MarinerProjectileMoveComponent_TrySetHomingTargetComponent, InHomingTargetComponent) == 0x000000, "Member 'MarinerProjectileMoveComponent_TrySetHomingTargetComponent::InHomingTargetComponent' has a wrong offset!");
static_assert(offsetof(MarinerProjectileMoveComponent_TrySetHomingTargetComponent, InSocketName) == 0x000008, "Member 'MarinerProjectileMoveComponent_TrySetHomingTargetComponent::InSocketName' has a wrong offset!");
static_assert(offsetof(MarinerProjectileMoveComponent_TrySetHomingTargetComponent, ReturnValue) == 0x000010, "Member 'MarinerProjectileMoveComponent_TrySetHomingTargetComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileMoveComponent.DidLastBounceAffectSpeed
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectileMoveComponent_DidLastBounceAffectSpeed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileMoveComponent_DidLastBounceAffectSpeed) == 0x000001, "Wrong alignment on MarinerProjectileMoveComponent_DidLastBounceAffectSpeed");
static_assert(sizeof(MarinerProjectileMoveComponent_DidLastBounceAffectSpeed) == 0x000001, "Wrong size on MarinerProjectileMoveComponent_DidLastBounceAffectSpeed");
static_assert(offsetof(MarinerProjectileMoveComponent_DidLastBounceAffectSpeed, ReturnValue) == 0x000000, "Member 'MarinerProjectileMoveComponent_DidLastBounceAffectSpeed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFluxProjectileMoveComponent.OnOwnerActorHit
// 0x00A8 (0x00A8 - 0x0000)
struct MarinerFluxProjectileMoveComponent_OnOwnerActorHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_189E[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFluxProjectileMoveComponent_OnOwnerActorHit) == 0x000008, "Wrong alignment on MarinerFluxProjectileMoveComponent_OnOwnerActorHit");
static_assert(sizeof(MarinerFluxProjectileMoveComponent_OnOwnerActorHit) == 0x0000A8, "Wrong size on MarinerFluxProjectileMoveComponent_OnOwnerActorHit");
static_assert(offsetof(MarinerFluxProjectileMoveComponent_OnOwnerActorHit, SelfActor) == 0x000000, "Member 'MarinerFluxProjectileMoveComponent_OnOwnerActorHit::SelfActor' has a wrong offset!");
static_assert(offsetof(MarinerFluxProjectileMoveComponent_OnOwnerActorHit, OtherActor) == 0x000008, "Member 'MarinerFluxProjectileMoveComponent_OnOwnerActorHit::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerFluxProjectileMoveComponent_OnOwnerActorHit, NormalImpulse) == 0x000010, "Member 'MarinerFluxProjectileMoveComponent_OnOwnerActorHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(MarinerFluxProjectileMoveComponent_OnOwnerActorHit, Hit) == 0x00001C, "Member 'MarinerFluxProjectileMoveComponent_OnOwnerActorHit::Hit' has a wrong offset!");

// Function Mariner.MarinerTrialsFloatingPlatform.BombTrialPlatformMovement
// 0x0004 (0x0004 - 0x0000)
struct MarinerTrialsFloatingPlatform_BombTrialPlatformMovement final
{
public:
	float                                         TimeSeconds;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTrialsFloatingPlatform_BombTrialPlatformMovement) == 0x000004, "Wrong alignment on MarinerTrialsFloatingPlatform_BombTrialPlatformMovement");
static_assert(sizeof(MarinerTrialsFloatingPlatform_BombTrialPlatformMovement) == 0x000004, "Wrong size on MarinerTrialsFloatingPlatform_BombTrialPlatformMovement");
static_assert(offsetof(MarinerTrialsFloatingPlatform_BombTrialPlatformMovement, TimeSeconds) == 0x000000, "Member 'MarinerTrialsFloatingPlatform_BombTrialPlatformMovement::TimeSeconds' has a wrong offset!");

// Function Mariner.MarinerTrialsFloatingPlatform.OnMeshComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct MarinerTrialsFloatingPlatform_OnMeshComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_18A1[0x4];                                     // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerTrialsFloatingPlatform_OnMeshComponentHit) == 0x000008, "Wrong alignment on MarinerTrialsFloatingPlatform_OnMeshComponentHit");
static_assert(sizeof(MarinerTrialsFloatingPlatform_OnMeshComponentHit) == 0x0000B0, "Wrong size on MarinerTrialsFloatingPlatform_OnMeshComponentHit");
static_assert(offsetof(MarinerTrialsFloatingPlatform_OnMeshComponentHit, HitComponent) == 0x000000, "Member 'MarinerTrialsFloatingPlatform_OnMeshComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(MarinerTrialsFloatingPlatform_OnMeshComponentHit, OtherActor) == 0x000008, "Member 'MarinerTrialsFloatingPlatform_OnMeshComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerTrialsFloatingPlatform_OnMeshComponentHit, OtherComp) == 0x000010, "Member 'MarinerTrialsFloatingPlatform_OnMeshComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(MarinerTrialsFloatingPlatform_OnMeshComponentHit, NormalImpulse) == 0x000018, "Member 'MarinerTrialsFloatingPlatform_OnMeshComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(MarinerTrialsFloatingPlatform_OnMeshComponentHit, Hit) == 0x000024, "Member 'MarinerTrialsFloatingPlatform_OnMeshComponentHit::Hit' has a wrong offset!");

// Function Mariner.MarinerFollowSplineMovement.AuthoritySetIsMoving
// 0x0001 (0x0001 - 0x0000)
struct MarinerFollowSplineMovement_AuthoritySetIsMoving final
{
public:
	bool                                          bInIsMoving;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFollowSplineMovement_AuthoritySetIsMoving) == 0x000001, "Wrong alignment on MarinerFollowSplineMovement_AuthoritySetIsMoving");
static_assert(sizeof(MarinerFollowSplineMovement_AuthoritySetIsMoving) == 0x000001, "Wrong size on MarinerFollowSplineMovement_AuthoritySetIsMoving");
static_assert(offsetof(MarinerFollowSplineMovement_AuthoritySetIsMoving, bInIsMoving) == 0x000000, "Member 'MarinerFollowSplineMovement_AuthoritySetIsMoving::bInIsMoving' has a wrong offset!");

// Function Mariner.MarinerFollowSplineMovement.AuthoritySetMinimumProgressRatioUpdateFrequencyTime
// 0x0004 (0x0004 - 0x0000)
struct MarinerFollowSplineMovement_AuthoritySetMinimumProgressRatioUpdateFrequencyTime final
{
public:
	float                                         NewRatioUpdateFrequency;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFollowSplineMovement_AuthoritySetMinimumProgressRatioUpdateFrequencyTime) == 0x000004, "Wrong alignment on MarinerFollowSplineMovement_AuthoritySetMinimumProgressRatioUpdateFrequencyTime");
static_assert(sizeof(MarinerFollowSplineMovement_AuthoritySetMinimumProgressRatioUpdateFrequencyTime) == 0x000004, "Wrong size on MarinerFollowSplineMovement_AuthoritySetMinimumProgressRatioUpdateFrequencyTime");
static_assert(offsetof(MarinerFollowSplineMovement_AuthoritySetMinimumProgressRatioUpdateFrequencyTime, NewRatioUpdateFrequency) == 0x000000, "Member 'MarinerFollowSplineMovement_AuthoritySetMinimumProgressRatioUpdateFrequencyTime::NewRatioUpdateFrequency' has a wrong offset!");

// Function Mariner.MarinerFollowSplineMovement.AuthoritySetMovementDirection
// 0x0001 (0x0001 - 0x0000)
struct MarinerFollowSplineMovement_AuthoritySetMovementDirection final
{
public:
	EMarinerFollowSplineDirection                 NewMovementDirection;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFollowSplineMovement_AuthoritySetMovementDirection) == 0x000001, "Wrong alignment on MarinerFollowSplineMovement_AuthoritySetMovementDirection");
static_assert(sizeof(MarinerFollowSplineMovement_AuthoritySetMovementDirection) == 0x000001, "Wrong size on MarinerFollowSplineMovement_AuthoritySetMovementDirection");
static_assert(offsetof(MarinerFollowSplineMovement_AuthoritySetMovementDirection, NewMovementDirection) == 0x000000, "Member 'MarinerFollowSplineMovement_AuthoritySetMovementDirection::NewMovementDirection' has a wrong offset!");

// Function Mariner.MarinerFollowSplineMovement.AuthoritySetMovementRotationSource
// 0x0001 (0x0001 - 0x0000)
struct MarinerFollowSplineMovement_AuthoritySetMovementRotationSource final
{
public:
	EMarinerFollowSplineRotationSource            NewRotationSource;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFollowSplineMovement_AuthoritySetMovementRotationSource) == 0x000001, "Wrong alignment on MarinerFollowSplineMovement_AuthoritySetMovementRotationSource");
static_assert(sizeof(MarinerFollowSplineMovement_AuthoritySetMovementRotationSource) == 0x000001, "Wrong size on MarinerFollowSplineMovement_AuthoritySetMovementRotationSource");
static_assert(offsetof(MarinerFollowSplineMovement_AuthoritySetMovementRotationSource, NewRotationSource) == 0x000000, "Member 'MarinerFollowSplineMovement_AuthoritySetMovementRotationSource::NewRotationSource' has a wrong offset!");

// Function Mariner.MarinerFollowSplineMovement.AuthoritySetProgressRatio
// 0x0004 (0x0004 - 0x0000)
struct MarinerFollowSplineMovement_AuthoritySetProgressRatio final
{
public:
	float                                         NewProgressRatio;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFollowSplineMovement_AuthoritySetProgressRatio) == 0x000004, "Wrong alignment on MarinerFollowSplineMovement_AuthoritySetProgressRatio");
static_assert(sizeof(MarinerFollowSplineMovement_AuthoritySetProgressRatio) == 0x000004, "Wrong size on MarinerFollowSplineMovement_AuthoritySetProgressRatio");
static_assert(offsetof(MarinerFollowSplineMovement_AuthoritySetProgressRatio, NewProgressRatio) == 0x000000, "Member 'MarinerFollowSplineMovement_AuthoritySetProgressRatio::NewProgressRatio' has a wrong offset!");

// Function Mariner.MarinerFollowSplineMovement.AuthoritySetProgressRatioUpdateFrequency
// 0x0004 (0x0004 - 0x0000)
struct MarinerFollowSplineMovement_AuthoritySetProgressRatioUpdateFrequency final
{
public:
	int32                                         NewUpdateFrequency;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFollowSplineMovement_AuthoritySetProgressRatioUpdateFrequency) == 0x000004, "Wrong alignment on MarinerFollowSplineMovement_AuthoritySetProgressRatioUpdateFrequency");
static_assert(sizeof(MarinerFollowSplineMovement_AuthoritySetProgressRatioUpdateFrequency) == 0x000004, "Wrong size on MarinerFollowSplineMovement_AuthoritySetProgressRatioUpdateFrequency");
static_assert(offsetof(MarinerFollowSplineMovement_AuthoritySetProgressRatioUpdateFrequency, NewUpdateFrequency) == 0x000000, "Member 'MarinerFollowSplineMovement_AuthoritySetProgressRatioUpdateFrequency::NewUpdateFrequency' has a wrong offset!");

// Function Mariner.MarinerFollowSplineMovement.AuthoritySetSplineToFollow
// 0x0008 (0x0008 - 0x0000)
struct MarinerFollowSplineMovement_AuthoritySetSplineToFollow final
{
public:
	class USplineComponent*                       NewSplineToFollow;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFollowSplineMovement_AuthoritySetSplineToFollow) == 0x000008, "Wrong alignment on MarinerFollowSplineMovement_AuthoritySetSplineToFollow");
static_assert(sizeof(MarinerFollowSplineMovement_AuthoritySetSplineToFollow) == 0x000008, "Wrong size on MarinerFollowSplineMovement_AuthoritySetSplineToFollow");
static_assert(offsetof(MarinerFollowSplineMovement_AuthoritySetSplineToFollow, NewSplineToFollow) == 0x000000, "Member 'MarinerFollowSplineMovement_AuthoritySetSplineToFollow::NewSplineToFollow' has a wrong offset!");

// Function Mariner.MarinerFollowSplineMovement.AuthoritySetSplineTravelDuration
// 0x0004 (0x0004 - 0x0000)
struct MarinerFollowSplineMovement_AuthoritySetSplineTravelDuration final
{
public:
	float                                         NewDuration;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFollowSplineMovement_AuthoritySetSplineTravelDuration) == 0x000004, "Wrong alignment on MarinerFollowSplineMovement_AuthoritySetSplineTravelDuration");
static_assert(sizeof(MarinerFollowSplineMovement_AuthoritySetSplineTravelDuration) == 0x000004, "Wrong size on MarinerFollowSplineMovement_AuthoritySetSplineTravelDuration");
static_assert(offsetof(MarinerFollowSplineMovement_AuthoritySetSplineTravelDuration, NewDuration) == 0x000000, "Member 'MarinerFollowSplineMovement_AuthoritySetSplineTravelDuration::NewDuration' has a wrong offset!");

// DelegateFunction Mariner.MarinerFollowSplineMovement.OnAuthorityReachedEndOfSplineDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct MarinerFollowSplineMovement_OnAuthorityReachedEndOfSplineDelegate__DelegateSignature final
{
public:
	class AActor*                                 MovingActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerFollowSplineDirection                 Param_MovementDirection;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18AB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFollowSplineMovement_OnAuthorityReachedEndOfSplineDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MarinerFollowSplineMovement_OnAuthorityReachedEndOfSplineDelegate__DelegateSignature");
static_assert(sizeof(MarinerFollowSplineMovement_OnAuthorityReachedEndOfSplineDelegate__DelegateSignature) == 0x000010, "Wrong size on MarinerFollowSplineMovement_OnAuthorityReachedEndOfSplineDelegate__DelegateSignature");
static_assert(offsetof(MarinerFollowSplineMovement_OnAuthorityReachedEndOfSplineDelegate__DelegateSignature, MovingActor) == 0x000000, "Member 'MarinerFollowSplineMovement_OnAuthorityReachedEndOfSplineDelegate__DelegateSignature::MovingActor' has a wrong offset!");
static_assert(offsetof(MarinerFollowSplineMovement_OnAuthorityReachedEndOfSplineDelegate__DelegateSignature, Param_MovementDirection) == 0x000008, "Member 'MarinerFollowSplineMovement_OnAuthorityReachedEndOfSplineDelegate__DelegateSignature::Param_MovementDirection' has a wrong offset!");

// DelegateFunction Mariner.MarinerFollowSplineMovement.OnAuthorityStartedMovingAlongSplineDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct MarinerFollowSplineMovement_OnAuthorityStartedMovingAlongSplineDelegate__DelegateSignature final
{
public:
	class AActor*                                 MovingActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerFollowSplineDirection                 Param_MovementDirection;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18AC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFollowSplineMovement_OnAuthorityStartedMovingAlongSplineDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MarinerFollowSplineMovement_OnAuthorityStartedMovingAlongSplineDelegate__DelegateSignature");
static_assert(sizeof(MarinerFollowSplineMovement_OnAuthorityStartedMovingAlongSplineDelegate__DelegateSignature) == 0x000010, "Wrong size on MarinerFollowSplineMovement_OnAuthorityStartedMovingAlongSplineDelegate__DelegateSignature");
static_assert(offsetof(MarinerFollowSplineMovement_OnAuthorityStartedMovingAlongSplineDelegate__DelegateSignature, MovingActor) == 0x000000, "Member 'MarinerFollowSplineMovement_OnAuthorityStartedMovingAlongSplineDelegate__DelegateSignature::MovingActor' has a wrong offset!");
static_assert(offsetof(MarinerFollowSplineMovement_OnAuthorityStartedMovingAlongSplineDelegate__DelegateSignature, Param_MovementDirection) == 0x000008, "Member 'MarinerFollowSplineMovement_OnAuthorityStartedMovingAlongSplineDelegate__DelegateSignature::Param_MovementDirection' has a wrong offset!");

// DelegateFunction Mariner.MarinerFollowSplineMovement.OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature
// 0x0098 (0x0098 - 0x0000)
struct MarinerFollowSplineMovement_OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature final
{
public:
	class AActor*                                 MovingActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressRatioAtTimeOfCollision;                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             BlockingHit;                                       // 0x000C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_18AD[0x4];                                     // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFollowSplineMovement_OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature) == 0x000008, "Wrong alignment on MarinerFollowSplineMovement_OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature");
static_assert(sizeof(MarinerFollowSplineMovement_OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature) == 0x000098, "Wrong size on MarinerFollowSplineMovement_OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature");
static_assert(offsetof(MarinerFollowSplineMovement_OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature, MovingActor) == 0x000000, "Member 'MarinerFollowSplineMovement_OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature::MovingActor' has a wrong offset!");
static_assert(offsetof(MarinerFollowSplineMovement_OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature, ProgressRatioAtTimeOfCollision) == 0x000008, "Member 'MarinerFollowSplineMovement_OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature::ProgressRatioAtTimeOfCollision' has a wrong offset!");
static_assert(offsetof(MarinerFollowSplineMovement_OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature, BlockingHit) == 0x00000C, "Member 'MarinerFollowSplineMovement_OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature::BlockingHit' has a wrong offset!");

// DelegateFunction Mariner.MarinerFollowSplineMovement.OnAuthorityStoppedMovingAlongSplineDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct MarinerFollowSplineMovement_OnAuthorityStoppedMovingAlongSplineDelegate__DelegateSignature final
{
public:
	class AActor*                                 MovingActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressRatioAtTimeOfStop;                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18AE[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerFollowSplineMovement_OnAuthorityStoppedMovingAlongSplineDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MarinerFollowSplineMovement_OnAuthorityStoppedMovingAlongSplineDelegate__DelegateSignature");
static_assert(sizeof(MarinerFollowSplineMovement_OnAuthorityStoppedMovingAlongSplineDelegate__DelegateSignature) == 0x000010, "Wrong size on MarinerFollowSplineMovement_OnAuthorityStoppedMovingAlongSplineDelegate__DelegateSignature");
static_assert(offsetof(MarinerFollowSplineMovement_OnAuthorityStoppedMovingAlongSplineDelegate__DelegateSignature, MovingActor) == 0x000000, "Member 'MarinerFollowSplineMovement_OnAuthorityStoppedMovingAlongSplineDelegate__DelegateSignature::MovingActor' has a wrong offset!");
static_assert(offsetof(MarinerFollowSplineMovement_OnAuthorityStoppedMovingAlongSplineDelegate__DelegateSignature, ProgressRatioAtTimeOfStop) == 0x000008, "Member 'MarinerFollowSplineMovement_OnAuthorityStoppedMovingAlongSplineDelegate__DelegateSignature::ProgressRatioAtTimeOfStop' has a wrong offset!");

// Function Mariner.MarinerFollowSplineMovement.OnRep_ReplicatedAuthoritativeProgressRatio
// 0x0004 (0x0004 - 0x0000)
struct MarinerFollowSplineMovement_OnRep_ReplicatedAuthoritativeProgressRatio final
{
public:
	float                                         PreviousReplicatedAuthoritativeProgressRatio;      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFollowSplineMovement_OnRep_ReplicatedAuthoritativeProgressRatio) == 0x000004, "Wrong alignment on MarinerFollowSplineMovement_OnRep_ReplicatedAuthoritativeProgressRatio");
static_assert(sizeof(MarinerFollowSplineMovement_OnRep_ReplicatedAuthoritativeProgressRatio) == 0x000004, "Wrong size on MarinerFollowSplineMovement_OnRep_ReplicatedAuthoritativeProgressRatio");
static_assert(offsetof(MarinerFollowSplineMovement_OnRep_ReplicatedAuthoritativeProgressRatio, PreviousReplicatedAuthoritativeProgressRatio) == 0x000000, "Member 'MarinerFollowSplineMovement_OnRep_ReplicatedAuthoritativeProgressRatio::PreviousReplicatedAuthoritativeProgressRatio' has a wrong offset!");

// DelegateFunction Mariner.MarinerFollowSplineMovement.OnSetSplineToFollowComponentSignature__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct MarinerFollowSplineMovement_OnSetSplineToFollowComponentSignature__DelegateSignature final
{
public:
	class USplineComponent*                       SplineToFollowComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFollowSplineMovement_OnSetSplineToFollowComponentSignature__DelegateSignature) == 0x000008, "Wrong alignment on MarinerFollowSplineMovement_OnSetSplineToFollowComponentSignature__DelegateSignature");
static_assert(sizeof(MarinerFollowSplineMovement_OnSetSplineToFollowComponentSignature__DelegateSignature) == 0x000008, "Wrong size on MarinerFollowSplineMovement_OnSetSplineToFollowComponentSignature__DelegateSignature");
static_assert(offsetof(MarinerFollowSplineMovement_OnSetSplineToFollowComponentSignature__DelegateSignature, SplineToFollowComponent) == 0x000000, "Member 'MarinerFollowSplineMovement_OnSetSplineToFollowComponentSignature__DelegateSignature::SplineToFollowComponent' has a wrong offset!");

// Function Mariner.MarinerFollowSplineMovement.AuthorityGetMinimumProgressRatioUpdateFrequencyTime
// 0x0004 (0x0004 - 0x0000)
struct MarinerFollowSplineMovement_AuthorityGetMinimumProgressRatioUpdateFrequencyTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFollowSplineMovement_AuthorityGetMinimumProgressRatioUpdateFrequencyTime) == 0x000004, "Wrong alignment on MarinerFollowSplineMovement_AuthorityGetMinimumProgressRatioUpdateFrequencyTime");
static_assert(sizeof(MarinerFollowSplineMovement_AuthorityGetMinimumProgressRatioUpdateFrequencyTime) == 0x000004, "Wrong size on MarinerFollowSplineMovement_AuthorityGetMinimumProgressRatioUpdateFrequencyTime");
static_assert(offsetof(MarinerFollowSplineMovement_AuthorityGetMinimumProgressRatioUpdateFrequencyTime, ReturnValue) == 0x000000, "Member 'MarinerFollowSplineMovement_AuthorityGetMinimumProgressRatioUpdateFrequencyTime::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFollowSplineMovement.AuthorityGetProgressRatioUpdateFrequency
// 0x0004 (0x0004 - 0x0000)
struct MarinerFollowSplineMovement_AuthorityGetProgressRatioUpdateFrequency final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFollowSplineMovement_AuthorityGetProgressRatioUpdateFrequency) == 0x000004, "Wrong alignment on MarinerFollowSplineMovement_AuthorityGetProgressRatioUpdateFrequency");
static_assert(sizeof(MarinerFollowSplineMovement_AuthorityGetProgressRatioUpdateFrequency) == 0x000004, "Wrong size on MarinerFollowSplineMovement_AuthorityGetProgressRatioUpdateFrequency");
static_assert(offsetof(MarinerFollowSplineMovement_AuthorityGetProgressRatioUpdateFrequency, ReturnValue) == 0x000000, "Member 'MarinerFollowSplineMovement_AuthorityGetProgressRatioUpdateFrequency::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerFriendsPagedVerticalBox.OnSocialWidgetOpened
// 0x0001 (0x0001 - 0x0000)
struct MarinerFriendsPagedVerticalBox_OnSocialWidgetOpened final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerFriendsPagedVerticalBox_OnSocialWidgetOpened) == 0x000001, "Wrong alignment on MarinerFriendsPagedVerticalBox_OnSocialWidgetOpened");
static_assert(sizeof(MarinerFriendsPagedVerticalBox_OnSocialWidgetOpened) == 0x000001, "Wrong size on MarinerFriendsPagedVerticalBox_OnSocialWidgetOpened");
static_assert(offsetof(MarinerFriendsPagedVerticalBox_OnSocialWidgetOpened, bOpen) == 0x000000, "Member 'MarinerFriendsPagedVerticalBox_OnSocialWidgetOpened::bOpen' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnProjectileBloomingSpread.SpawnProjectile
// 0x0058 (0x0058 - 0x0000)
struct MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarinerProjectile>         DefaultProjectileType;                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       AimDataHandle;                                     // 0x0018(0x0028)(Parm, NativeAccessSpecifierPublic)
	EMarinerSpawnSocketSource                     SocketSource;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18B2[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketToSpawnAt;                                   // 0x0044(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadDegrees;                                     // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerTask_SpawnProjectileBloomingSpread* ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile) == 0x000008, "Wrong alignment on MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile");
static_assert(sizeof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile) == 0x000058, "Wrong size on MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile, OwningAbility) == 0x000000, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile, TaskInstanceName) == 0x000008, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile, DefaultProjectileType) == 0x000010, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile::DefaultProjectileType' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile, AimDataHandle) == 0x000018, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile::AimDataHandle' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile, SocketSource) == 0x000040, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile::SocketSource' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile, SocketToSpawnAt) == 0x000044, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile::SocketToSpawnAt' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile, SpreadDegrees) == 0x00004C, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile::SpreadDegrees' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile, ReturnValue) == 0x000050, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnProjectileBloomingSpread.SpawnProjectileWithPool
// 0x0058 (0x0058 - 0x0000)
struct MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarinerProjectile>         DefaultProjectileType;                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       AimDataHandle;                                     // 0x0018(0x0028)(Parm, NativeAccessSpecifierPublic)
	EMarinerSpawnSocketSource                     SocketSource;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18B3[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketToSpawnAt;                                   // 0x0044(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadDegrees;                                     // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerTask_SpawnProjectileBloomingSpread* ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool) == 0x000008, "Wrong alignment on MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool");
static_assert(sizeof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool) == 0x000058, "Wrong size on MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool, OwningAbility) == 0x000000, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool, TaskInstanceName) == 0x000008, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool, DefaultProjectileType) == 0x000010, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool::DefaultProjectileType' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool, AimDataHandle) == 0x000018, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool::AimDataHandle' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool, SocketSource) == 0x000040, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool::SocketSource' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool, SocketToSpawnAt) == 0x000044, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool::SocketToSpawnAt' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool, SpreadDegrees) == 0x00004C, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool::SpreadDegrees' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool, ReturnValue) == 0x000050, "Member 'MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.FindPerspective
// 0x00B8 (0x00B8 - 0x0000)
struct MarinerGameGlobals_FindPerspective final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerCameraPerspective              OutPerspective;                                    // 0x0008(0x00A8)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18B7[0x7];                                     // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGameGlobals_FindPerspective) == 0x000008, "Wrong alignment on MarinerGameGlobals_FindPerspective");
static_assert(sizeof(MarinerGameGlobals_FindPerspective) == 0x0000B8, "Wrong size on MarinerGameGlobals_FindPerspective");
static_assert(offsetof(MarinerGameGlobals_FindPerspective, Key) == 0x000000, "Member 'MarinerGameGlobals_FindPerspective::Key' has a wrong offset!");
static_assert(offsetof(MarinerGameGlobals_FindPerspective, OutPerspective) == 0x000008, "Member 'MarinerGameGlobals_FindPerspective::OutPerspective' has a wrong offset!");
static_assert(offsetof(MarinerGameGlobals_FindPerspective, ReturnValue) == 0x0000B0, "Member 'MarinerGameGlobals_FindPerspective::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetDefaultItem
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameGlobals_GetDefaultItem final
{
public:
	EMangoItemType                                ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18B8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerCMSItemDataAsset*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetDefaultItem) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetDefaultItem");
static_assert(sizeof(MarinerGameGlobals_GetDefaultItem) == 0x000010, "Wrong size on MarinerGameGlobals_GetDefaultItem");
static_assert(offsetof(MarinerGameGlobals_GetDefaultItem, ItemType) == 0x000000, "Member 'MarinerGameGlobals_GetDefaultItem::ItemType' has a wrong offset!");
static_assert(offsetof(MarinerGameGlobals_GetDefaultItem, ReturnValue) == 0x000008, "Member 'MarinerGameGlobals_GetDefaultItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetDefaultMegaBlastTrail
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameGlobals_GetDefaultMegaBlastTrail final
{
public:
	class UMarinerMegaBlastDataAsset*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetDefaultMegaBlastTrail) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetDefaultMegaBlastTrail");
static_assert(sizeof(MarinerGameGlobals_GetDefaultMegaBlastTrail) == 0x000008, "Wrong size on MarinerGameGlobals_GetDefaultMegaBlastTrail");
static_assert(offsetof(MarinerGameGlobals_GetDefaultMegaBlastTrail, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetDefaultMegaBlastTrail::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetDefaultReturnTrail
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameGlobals_GetDefaultReturnTrail final
{
public:
	class UMarinerReturnTrailDataAsset*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetDefaultReturnTrail) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetDefaultReturnTrail");
static_assert(sizeof(MarinerGameGlobals_GetDefaultReturnTrail) == 0x000008, "Wrong size on MarinerGameGlobals_GetDefaultReturnTrail");
static_assert(offsetof(MarinerGameGlobals_GetDefaultReturnTrail, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetDefaultReturnTrail::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetEnableRedReticle
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameGlobals_GetEnableRedReticle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetEnableRedReticle) == 0x000001, "Wrong alignment on MarinerGameGlobals_GetEnableRedReticle");
static_assert(sizeof(MarinerGameGlobals_GetEnableRedReticle) == 0x000001, "Wrong size on MarinerGameGlobals_GetEnableRedReticle");
static_assert(offsetof(MarinerGameGlobals_GetEnableRedReticle, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetEnableRedReticle::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetRandomBotMegaBlastTrail
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameGlobals_GetRandomBotMegaBlastTrail final
{
public:
	int32                                         OutSelectedIndex;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18B9[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerMegaBlastDataAsset*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetRandomBotMegaBlastTrail) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetRandomBotMegaBlastTrail");
static_assert(sizeof(MarinerGameGlobals_GetRandomBotMegaBlastTrail) == 0x000010, "Wrong size on MarinerGameGlobals_GetRandomBotMegaBlastTrail");
static_assert(offsetof(MarinerGameGlobals_GetRandomBotMegaBlastTrail, OutSelectedIndex) == 0x000000, "Member 'MarinerGameGlobals_GetRandomBotMegaBlastTrail::OutSelectedIndex' has a wrong offset!");
static_assert(offsetof(MarinerGameGlobals_GetRandomBotMegaBlastTrail, ReturnValue) == 0x000008, "Member 'MarinerGameGlobals_GetRandomBotMegaBlastTrail::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetRandomBotReturnTrail
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameGlobals_GetRandomBotReturnTrail final
{
public:
	int32                                         OutSelectedIndex;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18BA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerReturnTrailDataAsset*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetRandomBotReturnTrail) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetRandomBotReturnTrail");
static_assert(sizeof(MarinerGameGlobals_GetRandomBotReturnTrail) == 0x000010, "Wrong size on MarinerGameGlobals_GetRandomBotReturnTrail");
static_assert(offsetof(MarinerGameGlobals_GetRandomBotReturnTrail, OutSelectedIndex) == 0x000000, "Member 'MarinerGameGlobals_GetRandomBotReturnTrail::OutSelectedIndex' has a wrong offset!");
static_assert(offsetof(MarinerGameGlobals_GetRandomBotReturnTrail, ReturnValue) == 0x000008, "Member 'MarinerGameGlobals_GetRandomBotReturnTrail::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetRandomBotTotemPartArrayLength
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameGlobals_GetRandomBotTotemPartArrayLength final
{
public:
	TArray<int32>                                 OutSelectedIndexList;                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetRandomBotTotemPartArrayLength) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetRandomBotTotemPartArrayLength");
static_assert(sizeof(MarinerGameGlobals_GetRandomBotTotemPartArrayLength) == 0x000010, "Wrong size on MarinerGameGlobals_GetRandomBotTotemPartArrayLength");
static_assert(offsetof(MarinerGameGlobals_GetRandomBotTotemPartArrayLength, OutSelectedIndexList) == 0x000000, "Member 'MarinerGameGlobals_GetRandomBotTotemPartArrayLength::OutSelectedIndexList' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.SetCurrentDetailLevel
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameGlobals_SetCurrentDetailLevel final
{
public:
	EMarinerParticleSystemDetailLevel             InLevel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_SetCurrentDetailLevel) == 0x000001, "Wrong alignment on MarinerGameGlobals_SetCurrentDetailLevel");
static_assert(sizeof(MarinerGameGlobals_SetCurrentDetailLevel) == 0x000001, "Wrong size on MarinerGameGlobals_SetCurrentDetailLevel");
static_assert(offsetof(MarinerGameGlobals_SetCurrentDetailLevel, InLevel) == 0x000000, "Member 'MarinerGameGlobals_SetCurrentDetailLevel::InLevel' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetAllBotData
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameGlobals_GetAllBotData final
{
public:
	TArray<class UMarinerPlayableCharacter*>      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetAllBotData) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetAllBotData");
static_assert(sizeof(MarinerGameGlobals_GetAllBotData) == 0x000010, "Wrong size on MarinerGameGlobals_GetAllBotData");
static_assert(offsetof(MarinerGameGlobals_GetAllBotData, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetAllBotData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetAllPlayableCharactersData
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameGlobals_GetAllPlayableCharactersData final
{
public:
	TArray<class UMarinerPlayableCharacter*>      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetAllPlayableCharactersData) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetAllPlayableCharactersData");
static_assert(sizeof(MarinerGameGlobals_GetAllPlayableCharactersData) == 0x000010, "Wrong size on MarinerGameGlobals_GetAllPlayableCharactersData");
static_assert(offsetof(MarinerGameGlobals_GetAllPlayableCharactersData, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetAllPlayableCharactersData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetCharacterDataByClass
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameGlobals_GetCharacterDataByClass final
{
public:
	TSubclassOf<class AMarinerCharacter>          Param_Class;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerPlayableCharacter*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetCharacterDataByClass) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetCharacterDataByClass");
static_assert(sizeof(MarinerGameGlobals_GetCharacterDataByClass) == 0x000010, "Wrong size on MarinerGameGlobals_GetCharacterDataByClass");
static_assert(offsetof(MarinerGameGlobals_GetCharacterDataByClass, Param_Class) == 0x000000, "Member 'MarinerGameGlobals_GetCharacterDataByClass::Param_Class' has a wrong offset!");
static_assert(offsetof(MarinerGameGlobals_GetCharacterDataByClass, ReturnValue) == 0x000008, "Member 'MarinerGameGlobals_GetCharacterDataByClass::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetCharacterDataByEngineID
// 0x0018 (0x0018 - 0x0000)
struct MarinerGameGlobals_GetCharacterDataByEngineID final
{
public:
	class FString                                 EngineId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerPlayableCharacter*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetCharacterDataByEngineID) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetCharacterDataByEngineID");
static_assert(sizeof(MarinerGameGlobals_GetCharacterDataByEngineID) == 0x000018, "Wrong size on MarinerGameGlobals_GetCharacterDataByEngineID");
static_assert(offsetof(MarinerGameGlobals_GetCharacterDataByEngineID, EngineId) == 0x000000, "Member 'MarinerGameGlobals_GetCharacterDataByEngineID::EngineId' has a wrong offset!");
static_assert(offsetof(MarinerGameGlobals_GetCharacterDataByEngineID, ReturnValue) == 0x000010, "Member 'MarinerGameGlobals_GetCharacterDataByEngineID::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetCharacterDataByItemRestriction
// 0x0060 (0x0060 - 0x0000)
struct MarinerGameGlobals_GetCharacterDataByItemRestriction final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoItem                             Item;                                              // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UMarinerPlayableCharacter*              ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetCharacterDataByItemRestriction) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetCharacterDataByItemRestriction");
static_assert(sizeof(MarinerGameGlobals_GetCharacterDataByItemRestriction) == 0x000060, "Wrong size on MarinerGameGlobals_GetCharacterDataByItemRestriction");
static_assert(offsetof(MarinerGameGlobals_GetCharacterDataByItemRestriction, WorldContextObject) == 0x000000, "Member 'MarinerGameGlobals_GetCharacterDataByItemRestriction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerGameGlobals_GetCharacterDataByItemRestriction, Item) == 0x000008, "Member 'MarinerGameGlobals_GetCharacterDataByItemRestriction::Item' has a wrong offset!");
static_assert(offsetof(MarinerGameGlobals_GetCharacterDataByItemRestriction, ReturnValue) == 0x000058, "Member 'MarinerGameGlobals_GetCharacterDataByItemRestriction::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetCharacterDataBySoftClass
// 0x0030 (0x0030 - 0x0000)
struct MarinerGameGlobals_GetCharacterDataBySoftClass final
{
public:
	TSoftClassPtr<class UClass>                   Param_Class;                                       // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerPlayableCharacter*              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetCharacterDataBySoftClass) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetCharacterDataBySoftClass");
static_assert(sizeof(MarinerGameGlobals_GetCharacterDataBySoftClass) == 0x000030, "Wrong size on MarinerGameGlobals_GetCharacterDataBySoftClass");
static_assert(offsetof(MarinerGameGlobals_GetCharacterDataBySoftClass, Param_Class) == 0x000000, "Member 'MarinerGameGlobals_GetCharacterDataBySoftClass::Param_Class' has a wrong offset!");
static_assert(offsetof(MarinerGameGlobals_GetCharacterDataBySoftClass, ReturnValue) == 0x000028, "Member 'MarinerGameGlobals_GetCharacterDataBySoftClass::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetCharacterDataForPlayer
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameGlobals_GetCharacterDataForPlayer final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerPlayableCharacter*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetCharacterDataForPlayer) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetCharacterDataForPlayer");
static_assert(sizeof(MarinerGameGlobals_GetCharacterDataForPlayer) == 0x000010, "Wrong size on MarinerGameGlobals_GetCharacterDataForPlayer");
static_assert(offsetof(MarinerGameGlobals_GetCharacterDataForPlayer, PlayerState) == 0x000000, "Member 'MarinerGameGlobals_GetCharacterDataForPlayer::PlayerState' has a wrong offset!");
static_assert(offsetof(MarinerGameGlobals_GetCharacterDataForPlayer, ReturnValue) == 0x000008, "Member 'MarinerGameGlobals_GetCharacterDataForPlayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetComponentAbsorbsExplosionTag
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameGlobals_GetComponentAbsorbsExplosionTag final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetComponentAbsorbsExplosionTag) == 0x000004, "Wrong alignment on MarinerGameGlobals_GetComponentAbsorbsExplosionTag");
static_assert(sizeof(MarinerGameGlobals_GetComponentAbsorbsExplosionTag) == 0x000008, "Wrong size on MarinerGameGlobals_GetComponentAbsorbsExplosionTag");
static_assert(offsetof(MarinerGameGlobals_GetComponentAbsorbsExplosionTag, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetComponentAbsorbsExplosionTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetComponentInvulnerableTag
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameGlobals_GetComponentInvulnerableTag final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetComponentInvulnerableTag) == 0x000004, "Wrong alignment on MarinerGameGlobals_GetComponentInvulnerableTag");
static_assert(sizeof(MarinerGameGlobals_GetComponentInvulnerableTag) == 0x000008, "Wrong size on MarinerGameGlobals_GetComponentInvulnerableTag");
static_assert(offsetof(MarinerGameGlobals_GetComponentInvulnerableTag, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetComponentInvulnerableTag::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetCurrentDetailLevel
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameGlobals_GetCurrentDetailLevel final
{
public:
	EMarinerParticleSystemDetailLevel             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetCurrentDetailLevel) == 0x000001, "Wrong alignment on MarinerGameGlobals_GetCurrentDetailLevel");
static_assert(sizeof(MarinerGameGlobals_GetCurrentDetailLevel) == 0x000001, "Wrong size on MarinerGameGlobals_GetCurrentDetailLevel");
static_assert(offsetof(MarinerGameGlobals_GetCurrentDetailLevel, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetCurrentDetailLevel::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetDebugMPC
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameGlobals_GetDebugMPC final
{
public:
	class UMaterialParameterCollection*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetDebugMPC) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetDebugMPC");
static_assert(sizeof(MarinerGameGlobals_GetDebugMPC) == 0x000008, "Wrong size on MarinerGameGlobals_GetDebugMPC");
static_assert(offsetof(MarinerGameGlobals_GetDebugMPC, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetDebugMPC::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetDefaultRocketTotemCollection
// 0x0038 (0x0038 - 0x0000)
struct MarinerGameGlobals_GetDefaultRocketTotemCollection final
{
public:
	struct FMarinerRocketTotemCollection          ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetDefaultRocketTotemCollection) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetDefaultRocketTotemCollection");
static_assert(sizeof(MarinerGameGlobals_GetDefaultRocketTotemCollection) == 0x000038, "Wrong size on MarinerGameGlobals_GetDefaultRocketTotemCollection");
static_assert(offsetof(MarinerGameGlobals_GetDefaultRocketTotemCollection, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetDefaultRocketTotemCollection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetEnvironmentMPC
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameGlobals_GetEnvironmentMPC final
{
public:
	class UMaterialParameterCollection*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetEnvironmentMPC) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetEnvironmentMPC");
static_assert(sizeof(MarinerGameGlobals_GetEnvironmentMPC) == 0x000008, "Wrong size on MarinerGameGlobals_GetEnvironmentMPC");
static_assert(offsetof(MarinerGameGlobals_GetEnvironmentMPC, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetEnvironmentMPC::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetLongDistanceShotLength
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameGlobals_GetLongDistanceShotLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetLongDistanceShotLength) == 0x000004, "Wrong alignment on MarinerGameGlobals_GetLongDistanceShotLength");
static_assert(sizeof(MarinerGameGlobals_GetLongDistanceShotLength) == 0x000004, "Wrong size on MarinerGameGlobals_GetLongDistanceShotLength");
static_assert(offsetof(MarinerGameGlobals_GetLongDistanceShotLength, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetLongDistanceShotLength::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetMatchmakingIntermissionTime
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameGlobals_GetMatchmakingIntermissionTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetMatchmakingIntermissionTime) == 0x000004, "Wrong alignment on MarinerGameGlobals_GetMatchmakingIntermissionTime");
static_assert(sizeof(MarinerGameGlobals_GetMatchmakingIntermissionTime) == 0x000004, "Wrong size on MarinerGameGlobals_GetMatchmakingIntermissionTime");
static_assert(offsetof(MarinerGameGlobals_GetMatchmakingIntermissionTime, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetMatchmakingIntermissionTime::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetPlayerStartMaxCapsuleDimensions
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameGlobals_GetPlayerStartMaxCapsuleDimensions final
{
public:
	struct FMarinerCapsuleExtents                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetPlayerStartMaxCapsuleDimensions) == 0x000004, "Wrong alignment on MarinerGameGlobals_GetPlayerStartMaxCapsuleDimensions");
static_assert(sizeof(MarinerGameGlobals_GetPlayerStartMaxCapsuleDimensions) == 0x000010, "Wrong size on MarinerGameGlobals_GetPlayerStartMaxCapsuleDimensions");
static_assert(offsetof(MarinerGameGlobals_GetPlayerStartMaxCapsuleDimensions, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetPlayerStartMaxCapsuleDimensions::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetPlayerStartMinCapsuleDimensions
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameGlobals_GetPlayerStartMinCapsuleDimensions final
{
public:
	struct FMarinerCapsuleExtents                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetPlayerStartMinCapsuleDimensions) == 0x000004, "Wrong alignment on MarinerGameGlobals_GetPlayerStartMinCapsuleDimensions");
static_assert(sizeof(MarinerGameGlobals_GetPlayerStartMinCapsuleDimensions) == 0x000010, "Wrong size on MarinerGameGlobals_GetPlayerStartMinCapsuleDimensions");
static_assert(offsetof(MarinerGameGlobals_GetPlayerStartMinCapsuleDimensions, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetPlayerStartMinCapsuleDimensions::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetSelectedCharacterDataForPlayer
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameGlobals_GetSelectedCharacterDataForPlayer final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerPlayableCharacter*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetSelectedCharacterDataForPlayer) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetSelectedCharacterDataForPlayer");
static_assert(sizeof(MarinerGameGlobals_GetSelectedCharacterDataForPlayer) == 0x000010, "Wrong size on MarinerGameGlobals_GetSelectedCharacterDataForPlayer");
static_assert(offsetof(MarinerGameGlobals_GetSelectedCharacterDataForPlayer, PlayerState) == 0x000000, "Member 'MarinerGameGlobals_GetSelectedCharacterDataForPlayer::PlayerState' has a wrong offset!");
static_assert(offsetof(MarinerGameGlobals_GetSelectedCharacterDataForPlayer, ReturnValue) == 0x000008, "Member 'MarinerGameGlobals_GetSelectedCharacterDataForPlayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetShortDistanceShotLength
// 0x0004 (0x0004 - 0x0000)
struct MarinerGameGlobals_GetShortDistanceShotLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetShortDistanceShotLength) == 0x000004, "Wrong alignment on MarinerGameGlobals_GetShortDistanceShotLength");
static_assert(sizeof(MarinerGameGlobals_GetShortDistanceShotLength) == 0x000004, "Wrong size on MarinerGameGlobals_GetShortDistanceShotLength");
static_assert(offsetof(MarinerGameGlobals_GetShortDistanceShotLength, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetShortDistanceShotLength::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetShortestCharacterType
// 0x0028 (0x0028 - 0x0000)
struct MarinerGameGlobals_GetShortestCharacterType final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetShortestCharacterType) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetShortestCharacterType");
static_assert(sizeof(MarinerGameGlobals_GetShortestCharacterType) == 0x000028, "Wrong size on MarinerGameGlobals_GetShortestCharacterType");
static_assert(offsetof(MarinerGameGlobals_GetShortestCharacterType, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetShortestCharacterType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetSkinniestCharacterType
// 0x0028 (0x0028 - 0x0000)
struct MarinerGameGlobals_GetSkinniestCharacterType final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetSkinniestCharacterType) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetSkinniestCharacterType");
static_assert(sizeof(MarinerGameGlobals_GetSkinniestCharacterType) == 0x000028, "Wrong size on MarinerGameGlobals_GetSkinniestCharacterType");
static_assert(offsetof(MarinerGameGlobals_GetSkinniestCharacterType, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetSkinniestCharacterType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetSortedPlayableCharactersData
// 0x0020 (0x0020 - 0x0000)
struct MarinerGameGlobals_GetSortedPlayableCharactersData final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerEnabledCharacterFilter                EnabledFilter;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18BB[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarinerPlayableCharacter*>      CharactersOut;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetSortedPlayableCharactersData) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetSortedPlayableCharactersData");
static_assert(sizeof(MarinerGameGlobals_GetSortedPlayableCharactersData) == 0x000020, "Wrong size on MarinerGameGlobals_GetSortedPlayableCharactersData");
static_assert(offsetof(MarinerGameGlobals_GetSortedPlayableCharactersData, WorldContextObject) == 0x000000, "Member 'MarinerGameGlobals_GetSortedPlayableCharactersData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerGameGlobals_GetSortedPlayableCharactersData, EnabledFilter) == 0x000008, "Member 'MarinerGameGlobals_GetSortedPlayableCharactersData::EnabledFilter' has a wrong offset!");
static_assert(offsetof(MarinerGameGlobals_GetSortedPlayableCharactersData, CharactersOut) == 0x000010, "Member 'MarinerGameGlobals_GetSortedPlayableCharactersData::CharactersOut' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetTallestCharacterType
// 0x0028 (0x0028 - 0x0000)
struct MarinerGameGlobals_GetTallestCharacterType final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetTallestCharacterType) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetTallestCharacterType");
static_assert(sizeof(MarinerGameGlobals_GetTallestCharacterType) == 0x000028, "Wrong size on MarinerGameGlobals_GetTallestCharacterType");
static_assert(offsetof(MarinerGameGlobals_GetTallestCharacterType, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetTallestCharacterType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameGlobals.GetWidestCharacterType
// 0x0028 (0x0028 - 0x0000)
struct MarinerGameGlobals_GetWidestCharacterType final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameGlobals_GetWidestCharacterType) == 0x000008, "Wrong alignment on MarinerGameGlobals_GetWidestCharacterType");
static_assert(sizeof(MarinerGameGlobals_GetWidestCharacterType) == 0x000028, "Wrong size on MarinerGameGlobals_GetWidestCharacterType");
static_assert(offsetof(MarinerGameGlobals_GetWidestCharacterType, ReturnValue) == 0x000000, "Member 'MarinerGameGlobals_GetWidestCharacterType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameInstance.GetCharacterManager
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameInstance_GetCharacterManager final
{
public:
	class UMarinerCharacterManager*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_GetCharacterManager) == 0x000008, "Wrong alignment on MarinerGameInstance_GetCharacterManager");
static_assert(sizeof(MarinerGameInstance_GetCharacterManager) == 0x000008, "Wrong size on MarinerGameInstance_GetCharacterManager");
static_assert(offsetof(MarinerGameInstance_GetCharacterManager, ReturnValue) == 0x000000, "Member 'MarinerGameInstance_GetCharacterManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameInstance.GetDamageDebugManager
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameInstance_GetDamageDebugManager final
{
public:
	class UMarinerDamageDebugManager*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_GetDamageDebugManager) == 0x000008, "Wrong alignment on MarinerGameInstance_GetDamageDebugManager");
static_assert(sizeof(MarinerGameInstance_GetDamageDebugManager) == 0x000008, "Wrong size on MarinerGameInstance_GetDamageDebugManager");
static_assert(offsetof(MarinerGameInstance_GetDamageDebugManager, ReturnValue) == 0x000000, "Member 'MarinerGameInstance_GetDamageDebugManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameInstance.GetInputOverlay
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameInstance_GetInputOverlay final
{
public:
	class UMarinerInputOverlay*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_GetInputOverlay) == 0x000008, "Wrong alignment on MarinerGameInstance_GetInputOverlay");
static_assert(sizeof(MarinerGameInstance_GetInputOverlay) == 0x000008, "Wrong size on MarinerGameInstance_GetInputOverlay");
static_assert(offsetof(MarinerGameInstance_GetInputOverlay, ReturnValue) == 0x000000, "Member 'MarinerGameInstance_GetInputOverlay::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameInstance.GetMenuManager
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameInstance_GetMenuManager final
{
public:
	class UMarinerMenuManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_GetMenuManager) == 0x000008, "Wrong alignment on MarinerGameInstance_GetMenuManager");
static_assert(sizeof(MarinerGameInstance_GetMenuManager) == 0x000008, "Wrong size on MarinerGameInstance_GetMenuManager");
static_assert(offsetof(MarinerGameInstance_GetMenuManager, ReturnValue) == 0x000000, "Member 'MarinerGameInstance_GetMenuManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameInstance.GetMessageBoxManager
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameInstance_GetMessageBoxManager final
{
public:
	class UMarinerMessageBoxManager*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_GetMessageBoxManager) == 0x000008, "Wrong alignment on MarinerGameInstance_GetMessageBoxManager");
static_assert(sizeof(MarinerGameInstance_GetMessageBoxManager) == 0x000008, "Wrong size on MarinerGameInstance_GetMessageBoxManager");
static_assert(offsetof(MarinerGameInstance_GetMessageBoxManager, ReturnValue) == 0x000000, "Member 'MarinerGameInstance_GetMessageBoxManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameInstance.GetMusicManager
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameInstance_GetMusicManager final
{
public:
	class UMarinerMusicManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_GetMusicManager) == 0x000008, "Wrong alignment on MarinerGameInstance_GetMusicManager");
static_assert(sizeof(MarinerGameInstance_GetMusicManager) == 0x000008, "Wrong size on MarinerGameInstance_GetMusicManager");
static_assert(offsetof(MarinerGameInstance_GetMusicManager, ReturnValue) == 0x000000, "Member 'MarinerGameInstance_GetMusicManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameInstance.GetUserSettings
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameInstance_GetUserSettings final
{
public:
	class UMarinerGameUserSettings*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_GetUserSettings) == 0x000008, "Wrong alignment on MarinerGameInstance_GetUserSettings");
static_assert(sizeof(MarinerGameInstance_GetUserSettings) == 0x000008, "Wrong size on MarinerGameInstance_GetUserSettings");
static_assert(offsetof(MarinerGameInstance_GetUserSettings, ReturnValue) == 0x000000, "Member 'MarinerGameInstance_GetUserSettings::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameInstance.GetVoiceOverManager
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameInstance_GetVoiceOverManager final
{
public:
	class UMarinerVoiceOverManager*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_GetVoiceOverManager) == 0x000008, "Wrong alignment on MarinerGameInstance_GetVoiceOverManager");
static_assert(sizeof(MarinerGameInstance_GetVoiceOverManager) == 0x000008, "Wrong size on MarinerGameInstance_GetVoiceOverManager");
static_assert(offsetof(MarinerGameInstance_GetVoiceOverManager, ReturnValue) == 0x000000, "Member 'MarinerGameInstance_GetVoiceOverManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameInstance.OnKickedMessageAcknowledged
// 0x0018 (0x0018 - 0x0000)
struct MarinerGameInstance_OnKickedMessageAcknowledged final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_OnKickedMessageAcknowledged) == 0x000008, "Wrong alignment on MarinerGameInstance_OnKickedMessageAcknowledged");
static_assert(sizeof(MarinerGameInstance_OnKickedMessageAcknowledged) == 0x000018, "Wrong size on MarinerGameInstance_OnKickedMessageAcknowledged");
static_assert(offsetof(MarinerGameInstance_OnKickedMessageAcknowledged, KeyPressed) == 0x000000, "Member 'MarinerGameInstance_OnKickedMessageAcknowledged::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerGameInstance.PlayMovie
// 0x0020 (0x0020 - 0x0000)
struct MarinerGameInstance_PlayMovie final
{
public:
	class UMediaSource*                           MovieToPlay;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSkipOnceLoaded;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C0[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             CompletionCallback;                                // 0x000C(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C1[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGameInstance_PlayMovie) == 0x000008, "Wrong alignment on MarinerGameInstance_PlayMovie");
static_assert(sizeof(MarinerGameInstance_PlayMovie) == 0x000020, "Wrong size on MarinerGameInstance_PlayMovie");
static_assert(offsetof(MarinerGameInstance_PlayMovie, MovieToPlay) == 0x000000, "Member 'MarinerGameInstance_PlayMovie::MovieToPlay' has a wrong offset!");
static_assert(offsetof(MarinerGameInstance_PlayMovie, bCanSkipOnceLoaded) == 0x000008, "Member 'MarinerGameInstance_PlayMovie::bCanSkipOnceLoaded' has a wrong offset!");
static_assert(offsetof(MarinerGameInstance_PlayMovie, CompletionCallback) == 0x00000C, "Member 'MarinerGameInstance_PlayMovie::CompletionCallback' has a wrong offset!");

// Function Mariner.MarinerGameInstance.PlayScreenWipe
// 0x0010 (0x0010 - 0x0000)
struct MarinerGameInstance_PlayScreenWipe final
{
public:
	TDelegate<void()>                             OnWipeCoveringScreen;                              // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_PlayScreenWipe) == 0x000004, "Wrong alignment on MarinerGameInstance_PlayScreenWipe");
static_assert(sizeof(MarinerGameInstance_PlayScreenWipe) == 0x000010, "Wrong size on MarinerGameInstance_PlayScreenWipe");
static_assert(offsetof(MarinerGameInstance_PlayScreenWipe, OnWipeCoveringScreen) == 0x000000, "Member 'MarinerGameInstance_PlayScreenWipe::OnWipeCoveringScreen' has a wrong offset!");

// Function Mariner.MarinerGameInstance.ServerTravel
// 0x0040 (0x0040 - 0x0000)
struct MarinerGameInstance_ServerTravel final
{
public:
	struct FMarinerServerTravelConfig             Config;                                            // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_ServerTravel) == 0x000008, "Wrong alignment on MarinerGameInstance_ServerTravel");
static_assert(sizeof(MarinerGameInstance_ServerTravel) == 0x000040, "Wrong size on MarinerGameInstance_ServerTravel");
static_assert(offsetof(MarinerGameInstance_ServerTravel, Config) == 0x000000, "Member 'MarinerGameInstance_ServerTravel::Config' has a wrong offset!");

// Function Mariner.MarinerGameInstance.SetPracticeModeSelectedCharacter
// 0x0028 (0x0028 - 0x0000)
struct MarinerGameInstance_SetPracticeModeSelectedCharacter final
{
public:
	TSoftClassPtr<class UClass>                   InPracticeModeSelectedCharacter;                   // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_SetPracticeModeSelectedCharacter) == 0x000008, "Wrong alignment on MarinerGameInstance_SetPracticeModeSelectedCharacter");
static_assert(sizeof(MarinerGameInstance_SetPracticeModeSelectedCharacter) == 0x000028, "Wrong size on MarinerGameInstance_SetPracticeModeSelectedCharacter");
static_assert(offsetof(MarinerGameInstance_SetPracticeModeSelectedCharacter, InPracticeModeSelectedCharacter) == 0x000000, "Member 'MarinerGameInstance_SetPracticeModeSelectedCharacter::InPracticeModeSelectedCharacter' has a wrong offset!");

// Function Mariner.MarinerGameInstance.SetStartedPracticeModeFromCharacterMenu
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameInstance_SetStartedPracticeModeFromCharacterMenu final
{
public:
	bool                                          bStartedFromCharacterMenu;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_SetStartedPracticeModeFromCharacterMenu) == 0x000001, "Wrong alignment on MarinerGameInstance_SetStartedPracticeModeFromCharacterMenu");
static_assert(sizeof(MarinerGameInstance_SetStartedPracticeModeFromCharacterMenu) == 0x000001, "Wrong size on MarinerGameInstance_SetStartedPracticeModeFromCharacterMenu");
static_assert(offsetof(MarinerGameInstance_SetStartedPracticeModeFromCharacterMenu, bStartedFromCharacterMenu) == 0x000000, "Member 'MarinerGameInstance_SetStartedPracticeModeFromCharacterMenu::bStartedFromCharacterMenu' has a wrong offset!");

// Function Mariner.MarinerGameInstance.ShowMessageBox
// 0x0170 (0x0170 - 0x0000)
struct MarinerGameInstance_ShowMessageBox final
{
public:
	struct FMarinerMessageBoxData                 MessageBoxData;                                    // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_ShowMessageBox) == 0x000008, "Wrong alignment on MarinerGameInstance_ShowMessageBox");
static_assert(sizeof(MarinerGameInstance_ShowMessageBox) == 0x000170, "Wrong size on MarinerGameInstance_ShowMessageBox");
static_assert(offsetof(MarinerGameInstance_ShowMessageBox, MessageBoxData) == 0x000000, "Member 'MarinerGameInstance_ShowMessageBox::MessageBoxData' has a wrong offset!");

// Function Mariner.MarinerGameInstance.GetNarrationManager
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameInstance_GetNarrationManager final
{
public:
	class UMarinerNarrationManager*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_GetNarrationManager) == 0x000008, "Wrong alignment on MarinerGameInstance_GetNarrationManager");
static_assert(sizeof(MarinerGameInstance_GetNarrationManager) == 0x000008, "Wrong size on MarinerGameInstance_GetNarrationManager");
static_assert(offsetof(MarinerGameInstance_GetNarrationManager, ReturnValue) == 0x000000, "Member 'MarinerGameInstance_GetNarrationManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameInstance.GetPracticeModeSelectedCharacter
// 0x0028 (0x0028 - 0x0000)
struct MarinerGameInstance_GetPracticeModeSelectedCharacter final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_GetPracticeModeSelectedCharacter) == 0x000008, "Wrong alignment on MarinerGameInstance_GetPracticeModeSelectedCharacter");
static_assert(sizeof(MarinerGameInstance_GetPracticeModeSelectedCharacter) == 0x000028, "Wrong size on MarinerGameInstance_GetPracticeModeSelectedCharacter");
static_assert(offsetof(MarinerGameInstance_GetPracticeModeSelectedCharacter, ReturnValue) == 0x000000, "Member 'MarinerGameInstance_GetPracticeModeSelectedCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameInstance.GetRealityObjectManager
// 0x0008 (0x0008 - 0x0000)
struct MarinerGameInstance_GetRealityObjectManager final
{
public:
	class UMarinerRealityObjectManager*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_GetRealityObjectManager) == 0x000008, "Wrong alignment on MarinerGameInstance_GetRealityObjectManager");
static_assert(sizeof(MarinerGameInstance_GetRealityObjectManager) == 0x000008, "Wrong size on MarinerGameInstance_GetRealityObjectManager");
static_assert(offsetof(MarinerGameInstance_GetRealityObjectManager, ReturnValue) == 0x000000, "Member 'MarinerGameInstance_GetRealityObjectManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGameInstance.IsInMainMenu
// 0x0001 (0x0001 - 0x0000)
struct MarinerGameInstance_IsInMainMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGameInstance_IsInMainMenu) == 0x000001, "Wrong alignment on MarinerGameInstance_IsInMainMenu");
static_assert(sizeof(MarinerGameInstance_IsInMainMenu) == 0x000001, "Wrong size on MarinerGameInstance_IsInMainMenu");
static_assert(offsetof(MarinerGameInstance_IsInMainMenu, ReturnValue) == 0x000000, "Member 'MarinerGameInstance_IsInMainMenu::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTripMine.BP_OnTripMineTriggered
// 0x0010 (0x0010 - 0x0000)
struct MarinerTripMine_BP_OnTripMineTriggered final
{
public:
	TArray<class AMarinerCharacter*>              DamagedMarinerCharacters;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTripMine_BP_OnTripMineTriggered) == 0x000008, "Wrong alignment on MarinerTripMine_BP_OnTripMineTriggered");
static_assert(sizeof(MarinerTripMine_BP_OnTripMineTriggered) == 0x000010, "Wrong size on MarinerTripMine_BP_OnTripMineTriggered");
static_assert(offsetof(MarinerTripMine_BP_OnTripMineTriggered, DamagedMarinerCharacters) == 0x000000, "Member 'MarinerTripMine_BP_OnTripMineTriggered::DamagedMarinerCharacters' has a wrong offset!");

// Function Mariner.MarinerTripMine.HandleStuckToObject
// 0x0088 (0x0088 - 0x0000)
struct MarinerTripMine_HandleStuckToObject final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTripMine_HandleStuckToObject) == 0x000004, "Wrong alignment on MarinerTripMine_HandleStuckToObject");
static_assert(sizeof(MarinerTripMine_HandleStuckToObject) == 0x000088, "Wrong size on MarinerTripMine_HandleStuckToObject");
static_assert(offsetof(MarinerTripMine_HandleStuckToObject, Hit) == 0x000000, "Member 'MarinerTripMine_HandleStuckToObject::Hit' has a wrong offset!");

// Function Mariner.MarinerTripMine.MulticastOnTripMineTriggered
// 0x0010 (0x0010 - 0x0000)
struct MarinerTripMine_MulticastOnTripMineTriggered final
{
public:
	TArray<class AMarinerCharacter*>              CharactersDamaged;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTripMine_MulticastOnTripMineTriggered) == 0x000008, "Wrong alignment on MarinerTripMine_MulticastOnTripMineTriggered");
static_assert(sizeof(MarinerTripMine_MulticastOnTripMineTriggered) == 0x000010, "Wrong size on MarinerTripMine_MulticastOnTripMineTriggered");
static_assert(offsetof(MarinerTripMine_MulticastOnTripMineTriggered, CharactersDamaged) == 0x000000, "Member 'MarinerTripMine_MulticastOnTripMineTriggered::CharactersDamaged' has a wrong offset!");

// Function Mariner.MarinerTripMine.OnAttachedParentDestroyed
// 0x0008 (0x0008 - 0x0000)
struct MarinerTripMine_OnAttachedParentDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTripMine_OnAttachedParentDestroyed) == 0x000008, "Wrong alignment on MarinerTripMine_OnAttachedParentDestroyed");
static_assert(sizeof(MarinerTripMine_OnAttachedParentDestroyed) == 0x000008, "Wrong size on MarinerTripMine_OnAttachedParentDestroyed");
static_assert(offsetof(MarinerTripMine_OnAttachedParentDestroyed, DestroyedActor) == 0x000000, "Member 'MarinerTripMine_OnAttachedParentDestroyed::DestroyedActor' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.AuthoritySpawnItem
// 0x0060 (0x0060 - 0x0000)
struct MarinerGlobalsFunctionLibrary_AuthoritySpawnItem final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarinerItem>               ItemType;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ItemInstigator;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D1[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AMarinerItem*                           ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D2[0x8];                                     // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_AuthoritySpawnItem) == 0x000010, "Wrong alignment on MarinerGlobalsFunctionLibrary_AuthoritySpawnItem");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_AuthoritySpawnItem) == 0x000060, "Wrong size on MarinerGlobalsFunctionLibrary_AuthoritySpawnItem");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_AuthoritySpawnItem, WorldContextObject) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_AuthoritySpawnItem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_AuthoritySpawnItem, ItemType) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_AuthoritySpawnItem::ItemType' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_AuthoritySpawnItem, ItemInstigator) == 0x000010, "Member 'MarinerGlobalsFunctionLibrary_AuthoritySpawnItem::ItemInstigator' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_AuthoritySpawnItem, Transform) == 0x000020, "Member 'MarinerGlobalsFunctionLibrary_AuthoritySpawnItem::Transform' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_AuthoritySpawnItem, ReturnValue) == 0x000050, "Member 'MarinerGlobalsFunctionLibrary_AuthoritySpawnItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.ComponentHasInvisibilityLock
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_ComponentHasInvisibilityLock final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_ComponentHasInvisibilityLock) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_ComponentHasInvisibilityLock");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_ComponentHasInvisibilityLock) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_ComponentHasInvisibilityLock");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_ComponentHasInvisibilityLock, Component) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_ComponentHasInvisibilityLock::Component' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_ComponentHasInvisibilityLock, ReturnValue) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_ComponentHasInvisibilityLock::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.DebugEquipCharacterItemToProfile
// 0x0330 (0x0330 - 0x0000)
struct MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile final
{
public:
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRanked;                                           // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D4[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoEquipItem                        ItemToEquip;                                       // 0x0030(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMangoProfile                          Profile;                                           // 0x0048(0x02E0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0328(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D5[0x7];                                     // 0x0329(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile) == 0x000330, "Wrong size on MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile, CharacterClass) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile::CharacterClass' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile, ItemType) == 0x000028, "Member 'MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile::ItemType' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile, bRanked) == 0x000029, "Member 'MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile::bRanked' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile, ItemToEquip) == 0x000030, "Member 'MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile::ItemToEquip' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile, Profile) == 0x000048, "Member 'MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile::Profile' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile, ReturnValue) == 0x000328, "Member 'MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetAchievementsGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetAchievementsGlobals final
{
public:
	class UMarinerAchievementsGlobals*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetAchievementsGlobals) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetAchievementsGlobals");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetAchievementsGlobals) == 0x000008, "Wrong size on MarinerGlobalsFunctionLibrary_GetAchievementsGlobals");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetAchievementsGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetAchievementsGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetActiveSettingsGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetActiveSettingsGlobals final
{
public:
	class UMarinerSettingsGlobals*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetActiveSettingsGlobals) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetActiveSettingsGlobals");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetActiveSettingsGlobals) == 0x000008, "Wrong size on MarinerGlobalsFunctionLibrary_GetActiveSettingsGlobals");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetActiveSettingsGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetActiveSettingsGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetActorRoleString
// 0x0018 (0x0018 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetActorRoleString final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetActorRoleString) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetActorRoleString");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetActorRoleString) == 0x000018, "Wrong size on MarinerGlobalsFunctionLibrary_GetActorRoleString");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetActorRoleString, Actor) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetActorRoleString::Actor' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetActorRoleString, ReturnValue) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_GetActorRoleString::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetCameraGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetCameraGlobals final
{
public:
	class UMarinerCameraGlobals*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetCameraGlobals) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetCameraGlobals");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetCameraGlobals) == 0x000008, "Wrong size on MarinerGlobalsFunctionLibrary_GetCameraGlobals");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetCameraGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetCameraGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetCharacterLiteGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetCharacterLiteGlobals final
{
public:
	class UMarinerCharacterLiteGlobals*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetCharacterLiteGlobals) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetCharacterLiteGlobals");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetCharacterLiteGlobals) == 0x000008, "Wrong size on MarinerGlobalsFunctionLibrary_GetCharacterLiteGlobals");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetCharacterLiteGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetCharacterLiteGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetChatGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetChatGlobals final
{
public:
	class UMarinerChatGlobals*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetChatGlobals) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetChatGlobals");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetChatGlobals) == 0x000008, "Wrong size on MarinerGlobalsFunctionLibrary_GetChatGlobals");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetChatGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetChatGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetClassDefaultObject
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetClassDefaultObject final
{
public:
	TSubclassOf<class UObject>                    ObjectClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetClassDefaultObject) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetClassDefaultObject");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetClassDefaultObject) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_GetClassDefaultObject");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetClassDefaultObject, ObjectClass) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetClassDefaultObject::ObjectClass' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetClassDefaultObject, ReturnValue) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_GetClassDefaultObject::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetCurrentCulture
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetCurrentCulture final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetCurrentCulture) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetCurrentCulture");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetCurrentCulture) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_GetCurrentCulture");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetCurrentCulture, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetCurrentCulture::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetDemoGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetDemoGlobals final
{
public:
	class UMarinerDemoGlobals*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetDemoGlobals) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetDemoGlobals");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetDemoGlobals) == 0x000008, "Wrong size on MarinerGlobalsFunctionLibrary_GetDemoGlobals");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetDemoGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetDemoGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetFastCollisionManager
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetFastCollisionManager final
{
public:
	class UFastCollisionManager*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetFastCollisionManager) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetFastCollisionManager");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetFastCollisionManager) == 0x000008, "Wrong size on MarinerGlobalsFunctionLibrary_GetFastCollisionManager");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetFastCollisionManager, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetFastCollisionManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetFrontEndGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetFrontEndGlobals final
{
public:
	class UMarinerFrontEndGlobals*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetFrontEndGlobals) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetFrontEndGlobals");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetFrontEndGlobals) == 0x000008, "Wrong size on MarinerGlobalsFunctionLibrary_GetFrontEndGlobals");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetFrontEndGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetFrontEndGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetGameGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetGameGlobals final
{
public:
	class UMarinerGameGlobals*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetGameGlobals) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetGameGlobals");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetGameGlobals) == 0x000008, "Wrong size on MarinerGlobalsFunctionLibrary_GetGameGlobals");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetGameGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetGameGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetHostilityBetweenTeams
// 0x000C (0x000C - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetHostilityBetweenTeams final
{
public:
	int32                                         TeamIndexA;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamIndexB;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerHostility                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D6[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetHostilityBetweenTeams) == 0x000004, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetHostilityBetweenTeams");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetHostilityBetweenTeams) == 0x00000C, "Wrong size on MarinerGlobalsFunctionLibrary_GetHostilityBetweenTeams");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetHostilityBetweenTeams, TeamIndexA) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetHostilityBetweenTeams::TeamIndexA' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetHostilityBetweenTeams, TeamIndexB) == 0x000004, "Member 'MarinerGlobalsFunctionLibrary_GetHostilityBetweenTeams::TeamIndexB' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetHostilityBetweenTeams, ReturnValue) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_GetHostilityBetweenTeams::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetInputGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetInputGlobals final
{
public:
	class UMarinerInputGlobals*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetInputGlobals) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetInputGlobals");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetInputGlobals) == 0x000008, "Wrong size on MarinerGlobalsFunctionLibrary_GetInputGlobals");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetInputGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetInputGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetItemActivationUITexture
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetItemActivationUITexture final
{
public:
	TSubclassOf<class AMarinerItem>               Item;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetItemActivationUITexture) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetItemActivationUITexture");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetItemActivationUITexture) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_GetItemActivationUITexture");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetItemActivationUITexture, Item) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetItemActivationUITexture::Item' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetItemActivationUITexture, ReturnValue) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_GetItemActivationUITexture::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetMangoRealm
// 0x0018 (0x0018 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetMangoRealm final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetMangoRealm) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetMangoRealm");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetMangoRealm) == 0x000018, "Wrong size on MarinerGlobalsFunctionLibrary_GetMangoRealm");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetMangoRealm, WorldContextObject) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetMangoRealm::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetMangoRealm, ReturnValue) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_GetMangoRealm::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetMapGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetMapGlobals final
{
public:
	class UMarinerMapGlobals*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetMapGlobals) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetMapGlobals");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetMapGlobals) == 0x000008, "Wrong size on MarinerGlobalsFunctionLibrary_GetMapGlobals");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetMapGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetMapGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetMarinerGlobals
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetMarinerGlobals final
{
public:
	bool                                          IsValid;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerGlobals*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetMarinerGlobals) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetMarinerGlobals");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetMarinerGlobals) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_GetMarinerGlobals");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetMarinerGlobals, IsValid) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetMarinerGlobals::IsValid' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetMarinerGlobals, ReturnValue) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_GetMarinerGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetMarinerTeamColorByHostility
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetMarinerTeamColorByHostility final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerHostility                             InHostility;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D8[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 ReturnValue;                                       // 0x000C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetMarinerTeamColorByHostility) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetMarinerTeamColorByHostility");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetMarinerTeamColorByHostility) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_GetMarinerTeamColorByHostility");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetMarinerTeamColorByHostility, WorldContextObject) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetMarinerTeamColorByHostility::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetMarinerTeamColorByHostility, bIsValid) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_GetMarinerTeamColorByHostility::bIsValid' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetMarinerTeamColorByHostility, InHostility) == 0x000009, "Member 'MarinerGlobalsFunctionLibrary_GetMarinerTeamColorByHostility::InHostility' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetMarinerTeamColorByHostility, ReturnValue) == 0x00000C, "Member 'MarinerGlobalsFunctionLibrary_GetMarinerTeamColorByHostility::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetMarinerTeamName
// 0x0028 (0x0028 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetMarinerTeamName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D9[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamIndex;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetMarinerTeamName) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetMarinerTeamName");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetMarinerTeamName) == 0x000028, "Wrong size on MarinerGlobalsFunctionLibrary_GetMarinerTeamName");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetMarinerTeamName, WorldContextObject) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetMarinerTeamName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetMarinerTeamName, bIsValid) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_GetMarinerTeamName::bIsValid' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetMarinerTeamName, TeamIndex) == 0x00000C, "Member 'MarinerGlobalsFunctionLibrary_GetMarinerTeamName::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetMarinerTeamName, ReturnValue) == 0x000010, "Member 'MarinerGlobalsFunctionLibrary_GetMarinerTeamName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetMenuGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetMenuGlobals final
{
public:
	class UMarinerMenuGlobals*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetMenuGlobals) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetMenuGlobals");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetMenuGlobals) == 0x000008, "Wrong size on MarinerGlobalsFunctionLibrary_GetMenuGlobals");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetMenuGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetMenuGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetModeGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetModeGlobals final
{
public:
	class UMarinerModeGlobals*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetModeGlobals) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetModeGlobals");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetModeGlobals) == 0x000008, "Wrong size on MarinerGlobalsFunctionLibrary_GetModeGlobals");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetModeGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetModeGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetPlatformDefaultCulture
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetPlatformDefaultCulture final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetPlatformDefaultCulture) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetPlatformDefaultCulture");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetPlatformDefaultCulture) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_GetPlatformDefaultCulture");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetPlatformDefaultCulture, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetPlatformDefaultCulture::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetPoolingManager
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetPoolingManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerPoolingManager*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetPoolingManager) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetPoolingManager");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetPoolingManager) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_GetPoolingManager");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetPoolingManager, WorldContextObject) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetPoolingManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetPoolingManager, ReturnValue) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_GetPoolingManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetRealityManager
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetRealityManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerRealityObjectManager*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetRealityManager) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetRealityManager");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetRealityManager) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_GetRealityManager");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetRealityManager, WorldContextObject) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetRealityManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetRealityManager, ReturnValue) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_GetRealityManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetRelativeTeamIndexToLocalPlayer
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetRelativeTeamIndexToLocalPlayer final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18DA[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetRelativeTeamIndexToLocalPlayer) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetRelativeTeamIndexToLocalPlayer");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetRelativeTeamIndexToLocalPlayer) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_GetRelativeTeamIndexToLocalPlayer");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetRelativeTeamIndexToLocalPlayer, Actor) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetRelativeTeamIndexToLocalPlayer::Actor' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetRelativeTeamIndexToLocalPlayer, ReturnValue) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_GetRelativeTeamIndexToLocalPlayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetServerTickRate
// 0x0004 (0x0004 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetServerTickRate final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetServerTickRate) == 0x000004, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetServerTickRate");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetServerTickRate) == 0x000004, "Wrong size on MarinerGlobalsFunctionLibrary_GetServerTickRate");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetServerTickRate, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetServerTickRate::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetSoftClassAssetName
// 0x0038 (0x0038 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetSoftClassAssetName final
{
public:
	TSoftClassPtr<class UClass>                   SoftClass;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetSoftClassAssetName) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetSoftClassAssetName");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetSoftClassAssetName) == 0x000038, "Wrong size on MarinerGlobalsFunctionLibrary_GetSoftClassAssetName");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetSoftClassAssetName, SoftClass) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetSoftClassAssetName::SoftClass' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetSoftClassAssetName, ReturnValue) == 0x000028, "Member 'MarinerGlobalsFunctionLibrary_GetSoftClassAssetName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.GetUIGlobals
// 0x0008 (0x0008 - 0x0000)
struct MarinerGlobalsFunctionLibrary_GetUIGlobals final
{
public:
	class UMarinerUIGlobals*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_GetUIGlobals) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_GetUIGlobals");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_GetUIGlobals) == 0x000008, "Wrong size on MarinerGlobalsFunctionLibrary_GetUIGlobals");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_GetUIGlobals, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_GetUIGlobals::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.IsBuildShipping
// 0x0001 (0x0001 - 0x0000)
struct MarinerGlobalsFunctionLibrary_IsBuildShipping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_IsBuildShipping) == 0x000001, "Wrong alignment on MarinerGlobalsFunctionLibrary_IsBuildShipping");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_IsBuildShipping) == 0x000001, "Wrong size on MarinerGlobalsFunctionLibrary_IsBuildShipping");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsBuildShipping, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_IsBuildShipping::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.IsChildOfSoftReference
// 0x0038 (0x0038 - 0x0000)
struct MarinerGlobalsFunctionLibrary_IsChildOfSoftReference final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PossibleParent;                                    // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExecutionPins                                Branches;                                          // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18DB[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_IsChildOfSoftReference) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_IsChildOfSoftReference");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_IsChildOfSoftReference) == 0x000038, "Wrong size on MarinerGlobalsFunctionLibrary_IsChildOfSoftReference");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsChildOfSoftReference, Object) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_IsChildOfSoftReference::Object' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsChildOfSoftReference, PossibleParent) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_IsChildOfSoftReference::PossibleParent' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsChildOfSoftReference, Branches) == 0x000030, "Member 'MarinerGlobalsFunctionLibrary_IsChildOfSoftReference::Branches' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.IsChildOfSoftReferencePure
// 0x0038 (0x0038 - 0x0000)
struct MarinerGlobalsFunctionLibrary_IsChildOfSoftReferencePure final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PossibleParent;                                    // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18DC[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_IsChildOfSoftReferencePure) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_IsChildOfSoftReferencePure");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_IsChildOfSoftReferencePure) == 0x000038, "Wrong size on MarinerGlobalsFunctionLibrary_IsChildOfSoftReferencePure");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsChildOfSoftReferencePure, Object) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_IsChildOfSoftReferencePure::Object' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsChildOfSoftReferencePure, PossibleParent) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_IsChildOfSoftReferencePure::PossibleParent' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsChildOfSoftReferencePure, ReturnValue) == 0x000030, "Member 'MarinerGlobalsFunctionLibrary_IsChildOfSoftReferencePure::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.IsEqualSoftReference
// 0x0038 (0x0038 - 0x0000)
struct MarinerGlobalsFunctionLibrary_IsEqualSoftReference final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   EqualTo;                                           // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExecutionPins                                Branches;                                          // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18DD[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_IsEqualSoftReference) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_IsEqualSoftReference");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_IsEqualSoftReference) == 0x000038, "Wrong size on MarinerGlobalsFunctionLibrary_IsEqualSoftReference");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsEqualSoftReference, Object) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_IsEqualSoftReference::Object' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsEqualSoftReference, EqualTo) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_IsEqualSoftReference::EqualTo' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsEqualSoftReference, Branches) == 0x000030, "Member 'MarinerGlobalsFunctionLibrary_IsEqualSoftReference::Branches' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.IsEqualSoftReferencePure
// 0x0038 (0x0038 - 0x0000)
struct MarinerGlobalsFunctionLibrary_IsEqualSoftReferencePure final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   EqualTo;                                           // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18DE[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_IsEqualSoftReferencePure) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_IsEqualSoftReferencePure");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_IsEqualSoftReferencePure) == 0x000038, "Wrong size on MarinerGlobalsFunctionLibrary_IsEqualSoftReferencePure");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsEqualSoftReferencePure, Object) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_IsEqualSoftReferencePure::Object' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsEqualSoftReferencePure, EqualTo) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_IsEqualSoftReferencePure::EqualTo' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsEqualSoftReferencePure, ReturnValue) == 0x000030, "Member 'MarinerGlobalsFunctionLibrary_IsEqualSoftReferencePure::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.IsOSSOrigin
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_IsOSSOrigin final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18DF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_IsOSSOrigin) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_IsOSSOrigin");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_IsOSSOrigin) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_IsOSSOrigin");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsOSSOrigin, WorldContextObject) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_IsOSSOrigin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsOSSOrigin, ReturnValue) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_IsOSSOrigin::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.IsOSSSteam
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_IsOSSSteam final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18E0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_IsOSSSteam) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_IsOSSSteam");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_IsOSSSteam) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_IsOSSSteam");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsOSSSteam, WorldContextObject) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_IsOSSSteam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsOSSSteam, ReturnValue) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_IsOSSSteam::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.IsPlatformPC
// 0x0001 (0x0001 - 0x0000)
struct MarinerGlobalsFunctionLibrary_IsPlatformPC final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_IsPlatformPC) == 0x000001, "Wrong alignment on MarinerGlobalsFunctionLibrary_IsPlatformPC");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_IsPlatformPC) == 0x000001, "Wrong size on MarinerGlobalsFunctionLibrary_IsPlatformPC");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsPlatformPC, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_IsPlatformPC::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.IsPlatformPS4
// 0x0001 (0x0001 - 0x0000)
struct MarinerGlobalsFunctionLibrary_IsPlatformPS4 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_IsPlatformPS4) == 0x000001, "Wrong alignment on MarinerGlobalsFunctionLibrary_IsPlatformPS4");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_IsPlatformPS4) == 0x000001, "Wrong size on MarinerGlobalsFunctionLibrary_IsPlatformPS4");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsPlatformPS4, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_IsPlatformPS4::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.IsPlatformStadia
// 0x0001 (0x0001 - 0x0000)
struct MarinerGlobalsFunctionLibrary_IsPlatformStadia final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_IsPlatformStadia) == 0x000001, "Wrong alignment on MarinerGlobalsFunctionLibrary_IsPlatformStadia");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_IsPlatformStadia) == 0x000001, "Wrong size on MarinerGlobalsFunctionLibrary_IsPlatformStadia");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsPlatformStadia, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_IsPlatformStadia::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.IsPlatformSwitch
// 0x0001 (0x0001 - 0x0000)
struct MarinerGlobalsFunctionLibrary_IsPlatformSwitch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_IsPlatformSwitch) == 0x000001, "Wrong alignment on MarinerGlobalsFunctionLibrary_IsPlatformSwitch");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_IsPlatformSwitch) == 0x000001, "Wrong size on MarinerGlobalsFunctionLibrary_IsPlatformSwitch");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsPlatformSwitch, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_IsPlatformSwitch::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.IsPlatformX1
// 0x0001 (0x0001 - 0x0000)
struct MarinerGlobalsFunctionLibrary_IsPlatformX1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_IsPlatformX1) == 0x000001, "Wrong alignment on MarinerGlobalsFunctionLibrary_IsPlatformX1");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_IsPlatformX1) == 0x000001, "Wrong size on MarinerGlobalsFunctionLibrary_IsPlatformX1");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsPlatformX1, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_IsPlatformX1::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.IsPlayInEditorMode
// 0x0001 (0x0001 - 0x0000)
struct MarinerGlobalsFunctionLibrary_IsPlayInEditorMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_IsPlayInEditorMode) == 0x000001, "Wrong alignment on MarinerGlobalsFunctionLibrary_IsPlayInEditorMode");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_IsPlayInEditorMode) == 0x000001, "Wrong size on MarinerGlobalsFunctionLibrary_IsPlayInEditorMode");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_IsPlayInEditorMode, ReturnValue) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_IsPlayInEditorMode::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.SetComponentInvisibilityLock
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_SetComponentInvisibilityLock final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockInvisibility;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18E1[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_SetComponentInvisibilityLock) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_SetComponentInvisibilityLock");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_SetComponentInvisibilityLock) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_SetComponentInvisibilityLock");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SetComponentInvisibilityLock, Component) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_SetComponentInvisibilityLock::Component' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SetComponentInvisibilityLock, bLockInvisibility) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_SetComponentInvisibilityLock::bLockInvisibility' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.SetCurrentCulture
// 0x0018 (0x0018 - 0x0000)
struct MarinerGlobalsFunctionLibrary_SetCurrentCulture final
{
public:
	class FString                                 InCultureName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18E2[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_SetCurrentCulture) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_SetCurrentCulture");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_SetCurrentCulture) == 0x000018, "Wrong size on MarinerGlobalsFunctionLibrary_SetCurrentCulture");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SetCurrentCulture, InCultureName) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_SetCurrentCulture::InCultureName' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SetCurrentCulture, ReturnValue) == 0x000010, "Member 'MarinerGlobalsFunctionLibrary_SetCurrentCulture::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.SetVisibilityRelativeToLocalPlayer
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_SetVisibilityRelativeToLocalPlayer final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewVisbility;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18E3[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_SetVisibilityRelativeToLocalPlayer) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_SetVisibilityRelativeToLocalPlayer");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_SetVisibilityRelativeToLocalPlayer) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_SetVisibilityRelativeToLocalPlayer");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SetVisibilityRelativeToLocalPlayer, Component) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_SetVisibilityRelativeToLocalPlayer::Component' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SetVisibilityRelativeToLocalPlayer, bNewVisbility) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_SetVisibilityRelativeToLocalPlayer::bNewVisbility' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SetVisibilityRelativeToLocalPlayer, bPropagateToChildren) == 0x000009, "Member 'MarinerGlobalsFunctionLibrary_SetVisibilityRelativeToLocalPlayer::bPropagateToChildren' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.SpawnAIFromClassWithGivenController
// 0x0048 (0x0048 - 0x0000)
struct MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                      PawnClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAIController*                          Controller;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          BehaviorTree;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x002C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bNoCollisionFail;                                  // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18E4[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController) == 0x000048, "Wrong size on MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController, WorldContextObject) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController, PawnClass) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController::PawnClass' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController, Controller) == 0x000010, "Member 'MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController::Controller' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController, BehaviorTree) == 0x000018, "Member 'MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController::BehaviorTree' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController, Location) == 0x000020, "Member 'MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController::Location' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController, Rotation) == 0x00002C, "Member 'MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController::Rotation' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController, bNoCollisionFail) == 0x000038, "Member 'MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController::bNoCollisionFail' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController, ReturnValue) == 0x000040, "Member 'MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.SpawnMarinerEmitterAttached
// 0x0040 (0x0040 - 0x0000)
struct MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached final
{
public:
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18E5[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerParticleSystemComponent*        ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached) == 0x000040, "Wrong size on MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached, EmitterTemplate) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached, AttachToComponent) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached, AttachPointName) == 0x000010, "Member 'MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached, Location) == 0x000018, "Member 'MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached::Location' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached, Rotation) == 0x000024, "Member 'MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached::Rotation' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached, LocationType) == 0x000030, "Member 'MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached::LocationType' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached, bAutoDestroy) == 0x000031, "Member 'MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached, ReturnValue) == 0x000038, "Member 'MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.TryAndGetHostilityRelativeToLocalPlayer
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_TryAndGetHostilityRelativeToLocalPlayer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTeamIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerHostility                             ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18E6[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_TryAndGetHostilityRelativeToLocalPlayer) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_TryAndGetHostilityRelativeToLocalPlayer");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_TryAndGetHostilityRelativeToLocalPlayer) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_TryAndGetHostilityRelativeToLocalPlayer");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_TryAndGetHostilityRelativeToLocalPlayer, WorldContextObject) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_TryAndGetHostilityRelativeToLocalPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_TryAndGetHostilityRelativeToLocalPlayer, InTeamIndex) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_TryAndGetHostilityRelativeToLocalPlayer::InTeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_TryAndGetHostilityRelativeToLocalPlayer, ReturnValue) == 0x00000C, "Member 'MarinerGlobalsFunctionLibrary_TryAndGetHostilityRelativeToLocalPlayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.TryAndGetLocalPlayerController
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_TryAndGetLocalPlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerBasePlayerController*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_TryAndGetLocalPlayerController) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_TryAndGetLocalPlayerController");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_TryAndGetLocalPlayerController) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_TryAndGetLocalPlayerController");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_TryAndGetLocalPlayerController, WorldContextObject) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_TryAndGetLocalPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_TryAndGetLocalPlayerController, ReturnValue) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_TryAndGetLocalPlayerController::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGlobalsFunctionLibrary.UpdateAudioComponentRelativeHostility
// 0x0010 (0x0010 - 0x0000)
struct MarinerGlobalsFunctionLibrary_UpdateAudioComponentRelativeHostility final
{
public:
	class UAkComponent*                           AkComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class APawn*                            SoundInstigator;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGlobalsFunctionLibrary_UpdateAudioComponentRelativeHostility) == 0x000008, "Wrong alignment on MarinerGlobalsFunctionLibrary_UpdateAudioComponentRelativeHostility");
static_assert(sizeof(MarinerGlobalsFunctionLibrary_UpdateAudioComponentRelativeHostility) == 0x000010, "Wrong size on MarinerGlobalsFunctionLibrary_UpdateAudioComponentRelativeHostility");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_UpdateAudioComponentRelativeHostility, AkComponent) == 0x000000, "Member 'MarinerGlobalsFunctionLibrary_UpdateAudioComponentRelativeHostility::AkComponent' has a wrong offset!");
static_assert(offsetof(MarinerGlobalsFunctionLibrary_UpdateAudioComponentRelativeHostility, SoundInstigator) == 0x000008, "Member 'MarinerGlobalsFunctionLibrary_UpdateAudioComponentRelativeHostility::SoundInstigator' has a wrong offset!");

// Function Mariner.MarinerGridPanel.AddChildToGridWithColumnAndRow
// 0x0018 (0x0018 - 0x0000)
struct MarinerGridPanel_AddChildToGridWithColumnAndRow final
{
public:
	class UUserWidget*                            Content;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColumnSpan;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowSpan;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGridPanel_AddChildToGridWithColumnAndRow) == 0x000008, "Wrong alignment on MarinerGridPanel_AddChildToGridWithColumnAndRow");
static_assert(sizeof(MarinerGridPanel_AddChildToGridWithColumnAndRow) == 0x000018, "Wrong size on MarinerGridPanel_AddChildToGridWithColumnAndRow");
static_assert(offsetof(MarinerGridPanel_AddChildToGridWithColumnAndRow, Content) == 0x000000, "Member 'MarinerGridPanel_AddChildToGridWithColumnAndRow::Content' has a wrong offset!");
static_assert(offsetof(MarinerGridPanel_AddChildToGridWithColumnAndRow, Column) == 0x000008, "Member 'MarinerGridPanel_AddChildToGridWithColumnAndRow::Column' has a wrong offset!");
static_assert(offsetof(MarinerGridPanel_AddChildToGridWithColumnAndRow, Row) == 0x00000C, "Member 'MarinerGridPanel_AddChildToGridWithColumnAndRow::Row' has a wrong offset!");
static_assert(offsetof(MarinerGridPanel_AddChildToGridWithColumnAndRow, ColumnSpan) == 0x000010, "Member 'MarinerGridPanel_AddChildToGridWithColumnAndRow::ColumnSpan' has a wrong offset!");
static_assert(offsetof(MarinerGridPanel_AddChildToGridWithColumnAndRow, RowSpan) == 0x000014, "Member 'MarinerGridPanel_AddChildToGridWithColumnAndRow::RowSpan' has a wrong offset!");

// Function Mariner.MarinerGridPanel.AddChildToGridWithWrapping
// 0x0018 (0x0018 - 0x0000)
struct MarinerGridPanel_AddChildToGridWithWrapping final
{
public:
	class UUserWidget*                            Content;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18EC[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridSlot*                              ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGridPanel_AddChildToGridWithWrapping) == 0x000008, "Wrong alignment on MarinerGridPanel_AddChildToGridWithWrapping");
static_assert(sizeof(MarinerGridPanel_AddChildToGridWithWrapping) == 0x000018, "Wrong size on MarinerGridPanel_AddChildToGridWithWrapping");
static_assert(offsetof(MarinerGridPanel_AddChildToGridWithWrapping, Content) == 0x000000, "Member 'MarinerGridPanel_AddChildToGridWithWrapping::Content' has a wrong offset!");
static_assert(offsetof(MarinerGridPanel_AddChildToGridWithWrapping, Param_Index) == 0x000008, "Member 'MarinerGridPanel_AddChildToGridWithWrapping::Param_Index' has a wrong offset!");
static_assert(offsetof(MarinerGridPanel_AddChildToGridWithWrapping, ReturnValue) == 0x000010, "Member 'MarinerGridPanel_AddChildToGridWithWrapping::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerGridPanel.SetColumnFillMultiple
// 0x0010 (0x0010 - 0x0000)
struct MarinerGridPanel_SetColumnFillMultiple final
{
public:
	TArray<float>                                 FillValues;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGridPanel_SetColumnFillMultiple) == 0x000008, "Wrong alignment on MarinerGridPanel_SetColumnFillMultiple");
static_assert(sizeof(MarinerGridPanel_SetColumnFillMultiple) == 0x000010, "Wrong size on MarinerGridPanel_SetColumnFillMultiple");
static_assert(offsetof(MarinerGridPanel_SetColumnFillMultiple, FillValues) == 0x000000, "Member 'MarinerGridPanel_SetColumnFillMultiple::FillValues' has a wrong offset!");

// Function Mariner.MarinerGridPanel.SetFixedColumnFill
// 0x0004 (0x0004 - 0x0000)
struct MarinerGridPanel_SetFixedColumnFill final
{
public:
	float                                         FillValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGridPanel_SetFixedColumnFill) == 0x000004, "Wrong alignment on MarinerGridPanel_SetFixedColumnFill");
static_assert(sizeof(MarinerGridPanel_SetFixedColumnFill) == 0x000004, "Wrong size on MarinerGridPanel_SetFixedColumnFill");
static_assert(offsetof(MarinerGridPanel_SetFixedColumnFill, FillValue) == 0x000000, "Member 'MarinerGridPanel_SetFixedColumnFill::FillValue' has a wrong offset!");

// Function Mariner.MarinerGridPanel.SetFixedRowFill
// 0x0004 (0x0004 - 0x0000)
struct MarinerGridPanel_SetFixedRowFill final
{
public:
	float                                         FillValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGridPanel_SetFixedRowFill) == 0x000004, "Wrong alignment on MarinerGridPanel_SetFixedRowFill");
static_assert(sizeof(MarinerGridPanel_SetFixedRowFill) == 0x000004, "Wrong size on MarinerGridPanel_SetFixedRowFill");
static_assert(offsetof(MarinerGridPanel_SetFixedRowFill, FillValue) == 0x000000, "Member 'MarinerGridPanel_SetFixedRowFill::FillValue' has a wrong offset!");

// Function Mariner.MarinerGridPanel.SetHighlightedSlot
// 0x000C (0x000C - 0x0000)
struct MarinerGridPanel_SetHighlightedSlot final
{
public:
	int32                                         Column;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18ED[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerGridPanel_SetHighlightedSlot) == 0x000004, "Wrong alignment on MarinerGridPanel_SetHighlightedSlot");
static_assert(sizeof(MarinerGridPanel_SetHighlightedSlot) == 0x00000C, "Wrong size on MarinerGridPanel_SetHighlightedSlot");
static_assert(offsetof(MarinerGridPanel_SetHighlightedSlot, Column) == 0x000000, "Member 'MarinerGridPanel_SetHighlightedSlot::Column' has a wrong offset!");
static_assert(offsetof(MarinerGridPanel_SetHighlightedSlot, Row) == 0x000004, "Member 'MarinerGridPanel_SetHighlightedSlot::Row' has a wrong offset!");
static_assert(offsetof(MarinerGridPanel_SetHighlightedSlot, bForce) == 0x000008, "Member 'MarinerGridPanel_SetHighlightedSlot::bForce' has a wrong offset!");

// Function Mariner.MarinerGridPanel.SetRowFillMultiple
// 0x0010 (0x0010 - 0x0000)
struct MarinerGridPanel_SetRowFillMultiple final
{
public:
	TArray<float>                                 FillValues;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGridPanel_SetRowFillMultiple) == 0x000008, "Wrong alignment on MarinerGridPanel_SetRowFillMultiple");
static_assert(sizeof(MarinerGridPanel_SetRowFillMultiple) == 0x000010, "Wrong size on MarinerGridPanel_SetRowFillMultiple");
static_assert(offsetof(MarinerGridPanel_SetRowFillMultiple, FillValues) == 0x000000, "Member 'MarinerGridPanel_SetRowFillMultiple::FillValues' has a wrong offset!");

// Function Mariner.MarinerGridPanel.GetHighlightedSlot
// 0x0008 (0x0008 - 0x0000)
struct MarinerGridPanel_GetHighlightedSlot final
{
public:
	int32                                         OutColumn;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutRow;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGridPanel_GetHighlightedSlot) == 0x000004, "Wrong alignment on MarinerGridPanel_GetHighlightedSlot");
static_assert(sizeof(MarinerGridPanel_GetHighlightedSlot) == 0x000008, "Wrong size on MarinerGridPanel_GetHighlightedSlot");
static_assert(offsetof(MarinerGridPanel_GetHighlightedSlot, OutColumn) == 0x000000, "Member 'MarinerGridPanel_GetHighlightedSlot::OutColumn' has a wrong offset!");
static_assert(offsetof(MarinerGridPanel_GetHighlightedSlot, OutRow) == 0x000004, "Member 'MarinerGridPanel_GetHighlightedSlot::OutRow' has a wrong offset!");

// Function Mariner.MarinerGridPanel.GetHighlightedWidget
// 0x0008 (0x0008 - 0x0000)
struct MarinerGridPanel_GetHighlightedWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerGridPanel_GetHighlightedWidget) == 0x000008, "Wrong alignment on MarinerGridPanel_GetHighlightedWidget");
static_assert(sizeof(MarinerGridPanel_GetHighlightedWidget) == 0x000008, "Wrong size on MarinerGridPanel_GetHighlightedWidget");
static_assert(offsetof(MarinerGridPanel_GetHighlightedWidget, ReturnValue) == 0x000000, "Member 'MarinerGridPanel_GetHighlightedWidget::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerHorizontalBox.HighlightWidgetViaIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerHorizontalBox_HighlightWidgetViaIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHorizontalBox_HighlightWidgetViaIndex) == 0x000004, "Wrong alignment on MarinerHorizontalBox_HighlightWidgetViaIndex");
static_assert(sizeof(MarinerHorizontalBox_HighlightWidgetViaIndex) == 0x000004, "Wrong size on MarinerHorizontalBox_HighlightWidgetViaIndex");
static_assert(offsetof(MarinerHorizontalBox_HighlightWidgetViaIndex, Param_Index) == 0x000000, "Member 'MarinerHorizontalBox_HighlightWidgetViaIndex::Param_Index' has a wrong offset!");

// Function Mariner.MarinerHorizontalBox.GetHighlightedWidget
// 0x0008 (0x0008 - 0x0000)
struct MarinerHorizontalBox_GetHighlightedWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHorizontalBox_GetHighlightedWidget) == 0x000008, "Wrong alignment on MarinerHorizontalBox_GetHighlightedWidget");
static_assert(sizeof(MarinerHorizontalBox_GetHighlightedWidget) == 0x000008, "Wrong size on MarinerHorizontalBox_GetHighlightedWidget");
static_assert(offsetof(MarinerHorizontalBox_GetHighlightedWidget, ReturnValue) == 0x000000, "Member 'MarinerHorizontalBox_GetHighlightedWidget::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerHUD.ApplyHUDState
// 0x0008 (0x0008 - 0x0000)
struct MarinerHUD_ApplyHUDState final
{
public:
	TSubclassOf<class UMarinerHUDState>           State;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_ApplyHUDState) == 0x000008, "Wrong alignment on MarinerHUD_ApplyHUDState");
static_assert(sizeof(MarinerHUD_ApplyHUDState) == 0x000008, "Wrong size on MarinerHUD_ApplyHUDState");
static_assert(offsetof(MarinerHUD_ApplyHUDState, State) == 0x000000, "Member 'MarinerHUD_ApplyHUDState::State' has a wrong offset!");

// Function Mariner.MarinerHUD.OnAddActiveItemWidgetWithDuration
// 0x00A8 (0x00A8 - 0x0000)
struct MarinerHUD_OnAddActiveItemWidgetWithDuration final
{
public:
	class UObject*                                OwningCue;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerActiveItemWidget>   ItemWidget;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Icon;                                              // 0x0010(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18F7[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x00A0(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_OnAddActiveItemWidgetWithDuration) == 0x000008, "Wrong alignment on MarinerHUD_OnAddActiveItemWidgetWithDuration");
static_assert(sizeof(MarinerHUD_OnAddActiveItemWidgetWithDuration) == 0x0000A8, "Wrong size on MarinerHUD_OnAddActiveItemWidgetWithDuration");
static_assert(offsetof(MarinerHUD_OnAddActiveItemWidgetWithDuration, OwningCue) == 0x000000, "Member 'MarinerHUD_OnAddActiveItemWidgetWithDuration::OwningCue' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnAddActiveItemWidgetWithDuration, ItemWidget) == 0x000008, "Member 'MarinerHUD_OnAddActiveItemWidgetWithDuration::ItemWidget' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnAddActiveItemWidgetWithDuration, Icon) == 0x000010, "Member 'MarinerHUD_OnAddActiveItemWidgetWithDuration::Icon' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnAddActiveItemWidgetWithDuration, Duration) == 0x000098, "Member 'MarinerHUD_OnAddActiveItemWidgetWithDuration::Duration' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnAddActiveItemWidgetWithDuration, ReturnValue) == 0x0000A0, "Member 'MarinerHUD_OnAddActiveItemWidgetWithDuration::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerHUD.OnArenaStateChanged
// 0x0002 (0x0002 - 0x0000)
struct MarinerHUD_OnArenaStateChanged final
{
public:
	EMarinerArenaReturnState                      PreviousState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerArenaReturnState                      NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_OnArenaStateChanged) == 0x000001, "Wrong alignment on MarinerHUD_OnArenaStateChanged");
static_assert(sizeof(MarinerHUD_OnArenaStateChanged) == 0x000002, "Wrong size on MarinerHUD_OnArenaStateChanged");
static_assert(offsetof(MarinerHUD_OnArenaStateChanged, PreviousState) == 0x000000, "Member 'MarinerHUD_OnArenaStateChanged::PreviousState' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnArenaStateChanged, NewState) == 0x000001, "Member 'MarinerHUD_OnArenaStateChanged::NewState' has a wrong offset!");

// Function Mariner.MarinerHUD.OnDamageCaused
// 0x0030 (0x0030 - 0x0000)
struct MarinerHUD_OnDamageCaused final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageWasAOE;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageWasMegablast;                               // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18F8[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DamagedActorTeamIndex;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseVector;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageApplied;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageBlocked;                                     // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18F9[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerHUD_OnDamageCaused) == 0x000008, "Wrong alignment on MarinerHUD_OnDamageCaused");
static_assert(sizeof(MarinerHUD_OnDamageCaused) == 0x000030, "Wrong size on MarinerHUD_OnDamageCaused");
static_assert(offsetof(MarinerHUD_OnDamageCaused, DamagedActor) == 0x000000, "Member 'MarinerHUD_OnDamageCaused::DamagedActor' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnDamageCaused, bDamageWasAOE) == 0x000008, "Member 'MarinerHUD_OnDamageCaused::bDamageWasAOE' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnDamageCaused, bDamageWasMegablast) == 0x000009, "Member 'MarinerHUD_OnDamageCaused::bDamageWasMegablast' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnDamageCaused, DamagedActorTeamIndex) == 0x00000C, "Member 'MarinerHUD_OnDamageCaused::DamagedActorTeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnDamageCaused, DamageType) == 0x000010, "Member 'MarinerHUD_OnDamageCaused::DamageType' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnDamageCaused, ImpulseVector) == 0x000018, "Member 'MarinerHUD_OnDamageCaused::ImpulseVector' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnDamageCaused, DamageApplied) == 0x000024, "Member 'MarinerHUD_OnDamageCaused::DamageApplied' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnDamageCaused, DamageBlocked) == 0x000028, "Member 'MarinerHUD_OnDamageCaused::DamageBlocked' has a wrong offset!");

// Function Mariner.MarinerHUD.OnDamageTaken
// 0x0020 (0x0020 - 0x0000)
struct MarinerHUD_OnDamageTaken final
{
public:
	float                                         DamageTaken;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18FA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class APawn*                                  PawnInstigator;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_OnDamageTaken) == 0x000008, "Wrong alignment on MarinerHUD_OnDamageTaken");
static_assert(sizeof(MarinerHUD_OnDamageTaken) == 0x000020, "Wrong size on MarinerHUD_OnDamageTaken");
static_assert(offsetof(MarinerHUD_OnDamageTaken, DamageTaken) == 0x000000, "Member 'MarinerHUD_OnDamageTaken::DamageTaken' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnDamageTaken, DamageEvent) == 0x000008, "Member 'MarinerHUD_OnDamageTaken::DamageEvent' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnDamageTaken, PawnInstigator) == 0x000018, "Member 'MarinerHUD_OnDamageTaken::PawnInstigator' has a wrong offset!");

// Function Mariner.MarinerHUD.OnKillCaused
// 0x0010 (0x0010 - 0x0000)
struct MarinerHUD_OnKillCaused final
{
public:
	class AActor*                                 KilledActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageWasAOE;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18FB[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KilledActorTeamIndex;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_OnKillCaused) == 0x000008, "Wrong alignment on MarinerHUD_OnKillCaused");
static_assert(sizeof(MarinerHUD_OnKillCaused) == 0x000010, "Wrong size on MarinerHUD_OnKillCaused");
static_assert(offsetof(MarinerHUD_OnKillCaused, KilledActor) == 0x000000, "Member 'MarinerHUD_OnKillCaused::KilledActor' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnKillCaused, bDamageWasAOE) == 0x000008, "Member 'MarinerHUD_OnKillCaused::bDamageWasAOE' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnKillCaused, KilledActorTeamIndex) == 0x00000C, "Member 'MarinerHUD_OnKillCaused::KilledActorTeamIndex' has a wrong offset!");

// Function Mariner.MarinerHUD.OnLocalizedMessageRecieved
// 0x0020 (0x0020 - 0x0000)
struct MarinerHUD_OnLocalizedMessageRecieved final
{
public:
	class UMarinerLocalMessage*                   MessageCDO;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState_1;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState_2;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalObject;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_OnLocalizedMessageRecieved) == 0x000008, "Wrong alignment on MarinerHUD_OnLocalizedMessageRecieved");
static_assert(sizeof(MarinerHUD_OnLocalizedMessageRecieved) == 0x000020, "Wrong size on MarinerHUD_OnLocalizedMessageRecieved");
static_assert(offsetof(MarinerHUD_OnLocalizedMessageRecieved, MessageCDO) == 0x000000, "Member 'MarinerHUD_OnLocalizedMessageRecieved::MessageCDO' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnLocalizedMessageRecieved, RelatedPlayerState_1) == 0x000008, "Member 'MarinerHUD_OnLocalizedMessageRecieved::RelatedPlayerState_1' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnLocalizedMessageRecieved, RelatedPlayerState_2) == 0x000010, "Member 'MarinerHUD_OnLocalizedMessageRecieved::RelatedPlayerState_2' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnLocalizedMessageRecieved, OptionalObject) == 0x000018, "Member 'MarinerHUD_OnLocalizedMessageRecieved::OptionalObject' has a wrong offset!");

// Function Mariner.MarinerHUD.OnMatchStateChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerHUD_OnMatchStateChanged final
{
public:
	class FName                                   State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_OnMatchStateChanged) == 0x000004, "Wrong alignment on MarinerHUD_OnMatchStateChanged");
static_assert(sizeof(MarinerHUD_OnMatchStateChanged) == 0x000008, "Wrong size on MarinerHUD_OnMatchStateChanged");
static_assert(offsetof(MarinerHUD_OnMatchStateChanged, State) == 0x000000, "Member 'MarinerHUD_OnMatchStateChanged::State' has a wrong offset!");

// Function Mariner.MarinerHUD.OnMegablastApplied
// 0x0008 (0x0008 - 0x0000)
struct MarinerHUD_OnMegablastApplied final
{
public:
	class AMarinerPlayerState*                    MegablastInstigatorPlayerState;                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_OnMegablastApplied) == 0x000008, "Wrong alignment on MarinerHUD_OnMegablastApplied");
static_assert(sizeof(MarinerHUD_OnMegablastApplied) == 0x000008, "Wrong size on MarinerHUD_OnMegablastApplied");
static_assert(offsetof(MarinerHUD_OnMegablastApplied, MegablastInstigatorPlayerState) == 0x000000, "Member 'MarinerHUD_OnMegablastApplied::MegablastInstigatorPlayerState' has a wrong offset!");

// Function Mariner.MarinerHUD.OnMegablastRemoved
// 0x0008 (0x0008 - 0x0000)
struct MarinerHUD_OnMegablastRemoved final
{
public:
	class AMarinerPlayerState*                    MegablastInstigatorPlayerState;                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_OnMegablastRemoved) == 0x000008, "Wrong alignment on MarinerHUD_OnMegablastRemoved");
static_assert(sizeof(MarinerHUD_OnMegablastRemoved) == 0x000008, "Wrong size on MarinerHUD_OnMegablastRemoved");
static_assert(offsetof(MarinerHUD_OnMegablastRemoved, MegablastInstigatorPlayerState) == 0x000000, "Member 'MarinerHUD_OnMegablastRemoved::MegablastInstigatorPlayerState' has a wrong offset!");

// Function Mariner.MarinerHUD.OnModeHUDStatesChanged
// 0x0004 (0x0004 - 0x0000)
struct MarinerHUD_OnModeHUDStatesChanged final
{
public:
	int32                                         ActiveModeHUDStates;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_OnModeHUDStatesChanged) == 0x000004, "Wrong alignment on MarinerHUD_OnModeHUDStatesChanged");
static_assert(sizeof(MarinerHUD_OnModeHUDStatesChanged) == 0x000004, "Wrong size on MarinerHUD_OnModeHUDStatesChanged");
static_assert(offsetof(MarinerHUD_OnModeHUDStatesChanged, ActiveModeHUDStates) == 0x000000, "Member 'MarinerHUD_OnModeHUDStatesChanged::ActiveModeHUDStates' has a wrong offset!");

// Function Mariner.MarinerHUD.OnPawnChanged
// 0x0010 (0x0010 - 0x0000)
struct MarinerHUD_OnPawnChanged final
{
public:
	class AMarinerPlayerController*               PossessingController;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  PossessedPawn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_OnPawnChanged) == 0x000008, "Wrong alignment on MarinerHUD_OnPawnChanged");
static_assert(sizeof(MarinerHUD_OnPawnChanged) == 0x000010, "Wrong size on MarinerHUD_OnPawnChanged");
static_assert(offsetof(MarinerHUD_OnPawnChanged, PossessingController) == 0x000000, "Member 'MarinerHUD_OnPawnChanged::PossessingController' has a wrong offset!");
static_assert(offsetof(MarinerHUD_OnPawnChanged, PossessedPawn) == 0x000008, "Member 'MarinerHUD_OnPawnChanged::PossessedPawn' has a wrong offset!");

// Function Mariner.MarinerHUD.OnRootLayerChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerHUD_OnRootLayerChanged final
{
public:
	class UMarinerMenuStackLayer*                 NewRootLayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_OnRootLayerChanged) == 0x000008, "Wrong alignment on MarinerHUD_OnRootLayerChanged");
static_assert(sizeof(MarinerHUD_OnRootLayerChanged) == 0x000008, "Wrong size on MarinerHUD_OnRootLayerChanged");
static_assert(offsetof(MarinerHUD_OnRootLayerChanged, NewRootLayer) == 0x000000, "Member 'MarinerHUD_OnRootLayerChanged::NewRootLayer' has a wrong offset!");

// Function Mariner.MarinerHUD.OnRoundTimerStarted
// 0x0001 (0x0001 - 0x0000)
struct MarinerHUD_OnRoundTimerStarted final
{
public:
	bool                                          bIsRoundTransition;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_OnRoundTimerStarted) == 0x000001, "Wrong alignment on MarinerHUD_OnRoundTimerStarted");
static_assert(sizeof(MarinerHUD_OnRoundTimerStarted) == 0x000001, "Wrong size on MarinerHUD_OnRoundTimerStarted");
static_assert(offsetof(MarinerHUD_OnRoundTimerStarted, bIsRoundTransition) == 0x000000, "Member 'MarinerHUD_OnRoundTimerStarted::bIsRoundTransition' has a wrong offset!");

// Function Mariner.MarinerHUD.RemoveHUDState
// 0x0008 (0x0008 - 0x0000)
struct MarinerHUD_RemoveHUDState final
{
public:
	TSubclassOf<class UMarinerHUDState>           State;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_RemoveHUDState) == 0x000008, "Wrong alignment on MarinerHUD_RemoveHUDState");
static_assert(sizeof(MarinerHUD_RemoveHUDState) == 0x000008, "Wrong size on MarinerHUD_RemoveHUDState");
static_assert(offsetof(MarinerHUD_RemoveHUDState, State) == 0x000000, "Member 'MarinerHUD_RemoveHUDState::State' has a wrong offset!");

// Function Mariner.MarinerHUD.SetGameplayActive
// 0x0001 (0x0001 - 0x0000)
struct MarinerHUD_SetGameplayActive final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_SetGameplayActive) == 0x000001, "Wrong alignment on MarinerHUD_SetGameplayActive");
static_assert(sizeof(MarinerHUD_SetGameplayActive) == 0x000001, "Wrong size on MarinerHUD_SetGameplayActive");
static_assert(offsetof(MarinerHUD_SetGameplayActive, bEnabled) == 0x000000, "Member 'MarinerHUD_SetGameplayActive::bEnabled' has a wrong offset!");

// Function Mariner.MarinerHUD.SetHUDEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerHUD_SetHUDEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_SetHUDEnabled) == 0x000001, "Wrong alignment on MarinerHUD_SetHUDEnabled");
static_assert(sizeof(MarinerHUD_SetHUDEnabled) == 0x000001, "Wrong size on MarinerHUD_SetHUDEnabled");
static_assert(offsetof(MarinerHUD_SetHUDEnabled, bEnabled) == 0x000000, "Member 'MarinerHUD_SetHUDEnabled::bEnabled' has a wrong offset!");

// Function Mariner.MarinerHUD.ShowScoreboard
// 0x0001 (0x0001 - 0x0000)
struct MarinerHUD_ShowScoreboard final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_ShowScoreboard) == 0x000001, "Wrong alignment on MarinerHUD_ShowScoreboard");
static_assert(sizeof(MarinerHUD_ShowScoreboard) == 0x000001, "Wrong size on MarinerHUD_ShowScoreboard");
static_assert(offsetof(MarinerHUD_ShowScoreboard, bEnabled) == 0x000000, "Member 'MarinerHUD_ShowScoreboard::bEnabled' has a wrong offset!");

// Function Mariner.MarinerHUD.CanCharacterSelect
// 0x0001 (0x0001 - 0x0000)
struct MarinerHUD_CanCharacterSelect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_CanCharacterSelect) == 0x000001, "Wrong alignment on MarinerHUD_CanCharacterSelect");
static_assert(sizeof(MarinerHUD_CanCharacterSelect) == 0x000001, "Wrong size on MarinerHUD_CanCharacterSelect");
static_assert(offsetof(MarinerHUD_CanCharacterSelect, ReturnValue) == 0x000000, "Member 'MarinerHUD_CanCharacterSelect::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerHUD.CanPause
// 0x0001 (0x0001 - 0x0000)
struct MarinerHUD_CanPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_CanPause) == 0x000001, "Wrong alignment on MarinerHUD_CanPause");
static_assert(sizeof(MarinerHUD_CanPause) == 0x000001, "Wrong size on MarinerHUD_CanPause");
static_assert(offsetof(MarinerHUD_CanPause, ReturnValue) == 0x000000, "Member 'MarinerHUD_CanPause::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerHUD.CanUseChatWheel
// 0x0001 (0x0001 - 0x0000)
struct MarinerHUD_CanUseChatWheel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_CanUseChatWheel) == 0x000001, "Wrong alignment on MarinerHUD_CanUseChatWheel");
static_assert(sizeof(MarinerHUD_CanUseChatWheel) == 0x000001, "Wrong size on MarinerHUD_CanUseChatWheel");
static_assert(offsetof(MarinerHUD_CanUseChatWheel, ReturnValue) == 0x000000, "Member 'MarinerHUD_CanUseChatWheel::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerHUD.GetCharacterPinGameModeWidgetType
// 0x0008 (0x0008 - 0x0000)
struct MarinerHUD_GetCharacterPinGameModeWidgetType final
{
public:
	TSubclassOf<class UMarinerPinGameModeWidget>  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerHUD_GetCharacterPinGameModeWidgetType) == 0x000008, "Wrong alignment on MarinerHUD_GetCharacterPinGameModeWidgetType");
static_assert(sizeof(MarinerHUD_GetCharacterPinGameModeWidgetType) == 0x000008, "Wrong size on MarinerHUD_GetCharacterPinGameModeWidgetType");
static_assert(offsetof(MarinerHUD_GetCharacterPinGameModeWidgetType, ReturnValue) == 0x000000, "Member 'MarinerHUD_GetCharacterPinGameModeWidgetType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerHUD.IsHUDStateActive
// 0x0010 (0x0010 - 0x0000)
struct MarinerHUD_IsHUDStateActive final
{
public:
	TSubclassOf<class UMarinerHUDState>           State;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18FC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerHUD_IsHUDStateActive) == 0x000008, "Wrong alignment on MarinerHUD_IsHUDStateActive");
static_assert(sizeof(MarinerHUD_IsHUDStateActive) == 0x000010, "Wrong size on MarinerHUD_IsHUDStateActive");
static_assert(offsetof(MarinerHUD_IsHUDStateActive, State) == 0x000000, "Member 'MarinerHUD_IsHUDStateActive::State' has a wrong offset!");
static_assert(offsetof(MarinerHUD_IsHUDStateActive, ReturnValue) == 0x000008, "Member 'MarinerHUD_IsHUDStateActive::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerInGameScoreBoard.Init
// 0x0008 (0x0008 - 0x0000)
struct MarinerInGameScoreBoard_Init final
{
public:
	class AMarinerPlayerController*               MarinerPlayerController;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInGameScoreBoard_Init) == 0x000008, "Wrong alignment on MarinerInGameScoreBoard_Init");
static_assert(sizeof(MarinerInGameScoreBoard_Init) == 0x000008, "Wrong size on MarinerInGameScoreBoard_Init");
static_assert(offsetof(MarinerInGameScoreBoard_Init, MarinerPlayerController) == 0x000000, "Member 'MarinerInGameScoreBoard_Init::MarinerPlayerController' has a wrong offset!");

// Function Mariner.MarinerInGameScoreBoard.OnPlayerAdded
// 0x0008 (0x0008 - 0x0000)
struct MarinerInGameScoreBoard_OnPlayerAdded final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInGameScoreBoard_OnPlayerAdded) == 0x000008, "Wrong alignment on MarinerInGameScoreBoard_OnPlayerAdded");
static_assert(sizeof(MarinerInGameScoreBoard_OnPlayerAdded) == 0x000008, "Wrong size on MarinerInGameScoreBoard_OnPlayerAdded");
static_assert(offsetof(MarinerInGameScoreBoard_OnPlayerAdded, PlayerState) == 0x000000, "Member 'MarinerInGameScoreBoard_OnPlayerAdded::PlayerState' has a wrong offset!");

// Function Mariner.MarinerInGameScoreBoard.OnPlayerRemoved
// 0x0008 (0x0008 - 0x0000)
struct MarinerInGameScoreBoard_OnPlayerRemoved final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInGameScoreBoard_OnPlayerRemoved) == 0x000008, "Wrong alignment on MarinerInGameScoreBoard_OnPlayerRemoved");
static_assert(sizeof(MarinerInGameScoreBoard_OnPlayerRemoved) == 0x000008, "Wrong size on MarinerInGameScoreBoard_OnPlayerRemoved");
static_assert(offsetof(MarinerInGameScoreBoard_OnPlayerRemoved, PlayerState) == 0x000000, "Member 'MarinerInGameScoreBoard_OnPlayerRemoved::PlayerState' has a wrong offset!");

// Function Mariner.MarinerInGameScoreBoard.OnPlayerTeamChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerInGameScoreBoard_OnPlayerTeamChanged final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInGameScoreBoard_OnPlayerTeamChanged) == 0x000008, "Wrong alignment on MarinerInGameScoreBoard_OnPlayerTeamChanged");
static_assert(sizeof(MarinerInGameScoreBoard_OnPlayerTeamChanged) == 0x000008, "Wrong size on MarinerInGameScoreBoard_OnPlayerTeamChanged");
static_assert(offsetof(MarinerInGameScoreBoard_OnPlayerTeamChanged, PlayerState) == 0x000000, "Member 'MarinerInGameScoreBoard_OnPlayerTeamChanged::PlayerState' has a wrong offset!");

// Function Mariner.MarinerInGameScoreBoard.OnScoreChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerInGameScoreBoard_OnScoreChanged final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewScore;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInGameScoreBoard_OnScoreChanged) == 0x000004, "Wrong alignment on MarinerInGameScoreBoard_OnScoreChanged");
static_assert(sizeof(MarinerInGameScoreBoard_OnScoreChanged) == 0x000008, "Wrong size on MarinerInGameScoreBoard_OnScoreChanged");
static_assert(offsetof(MarinerInGameScoreBoard_OnScoreChanged, TeamIndex) == 0x000000, "Member 'MarinerInGameScoreBoard_OnScoreChanged::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerInGameScoreBoard_OnScoreChanged, NewScore) == 0x000004, "Member 'MarinerInGameScoreBoard_OnScoreChanged::NewScore' has a wrong offset!");

// Function Mariner.MarinerInteractableManager.ClearControllerInteractables
// 0x0010 (0x0010 - 0x0000)
struct MarinerInteractableManager_ClearControllerInteractables final
{
public:
	TArray<class UObject*>                        InteractableObjects;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerInteractableManager_ClearControllerInteractables) == 0x000008, "Wrong alignment on MarinerInteractableManager_ClearControllerInteractables");
static_assert(sizeof(MarinerInteractableManager_ClearControllerInteractables) == 0x000010, "Wrong size on MarinerInteractableManager_ClearControllerInteractables");
static_assert(offsetof(MarinerInteractableManager_ClearControllerInteractables, InteractableObjects) == 0x000000, "Member 'MarinerInteractableManager_ClearControllerInteractables::InteractableObjects' has a wrong offset!");

// Function Mariner.MarinerInteractableManager.RegisterControllerInteractables
// 0x0018 (0x0018 - 0x0000)
struct MarinerInteractableManager_RegisterControllerInteractables final
{
public:
	TArray<class UObject*>                        InteractableObjects;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1903[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerInteractableManager_RegisterControllerInteractables) == 0x000008, "Wrong alignment on MarinerInteractableManager_RegisterControllerInteractables");
static_assert(sizeof(MarinerInteractableManager_RegisterControllerInteractables) == 0x000018, "Wrong size on MarinerInteractableManager_RegisterControllerInteractables");
static_assert(offsetof(MarinerInteractableManager_RegisterControllerInteractables, InteractableObjects) == 0x000000, "Member 'MarinerInteractableManager_RegisterControllerInteractables::InteractableObjects' has a wrong offset!");
static_assert(offsetof(MarinerInteractableManager_RegisterControllerInteractables, ReturnValue) == 0x000010, "Member 'MarinerInteractableManager_RegisterControllerInteractables::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerJumpPad.OnActorLaunched
// 0x0008 (0x0008 - 0x0000)
struct MarinerJumpPad_OnActorLaunched final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerJumpPad_OnActorLaunched) == 0x000008, "Wrong alignment on MarinerJumpPad_OnActorLaunched");
static_assert(sizeof(MarinerJumpPad_OnActorLaunched) == 0x000008, "Wrong size on MarinerJumpPad_OnActorLaunched");
static_assert(offsetof(MarinerJumpPad_OnActorLaunched, Actor) == 0x000000, "Member 'MarinerJumpPad_OnActorLaunched::Actor' has a wrong offset!");

// Function Mariner.MarinerJumpPad.SetBotLaunchAngle
// 0x0004 (0x0004 - 0x0000)
struct MarinerJumpPad_SetBotLaunchAngle final
{
public:
	float                                         NewBotLaunchAngle;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerJumpPad_SetBotLaunchAngle) == 0x000004, "Wrong alignment on MarinerJumpPad_SetBotLaunchAngle");
static_assert(sizeof(MarinerJumpPad_SetBotLaunchAngle) == 0x000004, "Wrong size on MarinerJumpPad_SetBotLaunchAngle");
static_assert(offsetof(MarinerJumpPad_SetBotLaunchAngle, NewBotLaunchAngle) == 0x000000, "Member 'MarinerJumpPad_SetBotLaunchAngle::NewBotLaunchAngle' has a wrong offset!");

// Function Mariner.MarinerJumpPad.DoesRequireSpecialLaunchLogic
// 0x0010 (0x0010 - 0x0000)
struct MarinerJumpPad_DoesRequireSpecialLaunchLogic final
{
public:
	class AActor*                                 LaunchedActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_190A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerJumpPad_DoesRequireSpecialLaunchLogic) == 0x000008, "Wrong alignment on MarinerJumpPad_DoesRequireSpecialLaunchLogic");
static_assert(sizeof(MarinerJumpPad_DoesRequireSpecialLaunchLogic) == 0x000010, "Wrong size on MarinerJumpPad_DoesRequireSpecialLaunchLogic");
static_assert(offsetof(MarinerJumpPad_DoesRequireSpecialLaunchLogic, LaunchedActor) == 0x000000, "Member 'MarinerJumpPad_DoesRequireSpecialLaunchLogic::LaunchedActor' has a wrong offset!");
static_assert(offsetof(MarinerJumpPad_DoesRequireSpecialLaunchLogic, ReturnValue) == 0x000008, "Member 'MarinerJumpPad_DoesRequireSpecialLaunchLogic::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.AurthorityOnPregameStateChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlayerState_AurthorityOnPregameStateChanged final
{
public:
	class FName                                   NewPregameState;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_AurthorityOnPregameStateChanged) == 0x000004, "Wrong alignment on MarinerPlayerState_AurthorityOnPregameStateChanged");
static_assert(sizeof(MarinerPlayerState_AurthorityOnPregameStateChanged) == 0x000008, "Wrong size on MarinerPlayerState_AurthorityOnPregameStateChanged");
static_assert(offsetof(MarinerPlayerState_AurthorityOnPregameStateChanged, NewPregameState) == 0x000000, "Member 'MarinerPlayerState_AurthorityOnPregameStateChanged::NewPregameState' has a wrong offset!");

// Function Mariner.MarinerPlayerState.BP_SetStatValue
// 0x000C (0x000C - 0x0000)
struct MarinerPlayerState_BP_SetStatValue final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_BP_SetStatValue) == 0x000004, "Wrong alignment on MarinerPlayerState_BP_SetStatValue");
static_assert(sizeof(MarinerPlayerState_BP_SetStatValue) == 0x00000C, "Wrong size on MarinerPlayerState_BP_SetStatValue");
static_assert(offsetof(MarinerPlayerState_BP_SetStatValue, StatName) == 0x000000, "Member 'MarinerPlayerState_BP_SetStatValue::StatName' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_BP_SetStatValue, Value) == 0x000008, "Member 'MarinerPlayerState_BP_SetStatValue::Value' has a wrong offset!");

// Function Mariner.MarinerPlayerState.BP_SetStatValueAsFloat
// 0x000C (0x000C - 0x0000)
struct MarinerPlayerState_BP_SetStatValueAsFloat final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_BP_SetStatValueAsFloat) == 0x000004, "Wrong alignment on MarinerPlayerState_BP_SetStatValueAsFloat");
static_assert(sizeof(MarinerPlayerState_BP_SetStatValueAsFloat) == 0x00000C, "Wrong size on MarinerPlayerState_BP_SetStatValueAsFloat");
static_assert(offsetof(MarinerPlayerState_BP_SetStatValueAsFloat, StatName) == 0x000000, "Member 'MarinerPlayerState_BP_SetStatValueAsFloat::StatName' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_BP_SetStatValueAsFloat, Value) == 0x000008, "Member 'MarinerPlayerState_BP_SetStatValueAsFloat::Value' has a wrong offset!");

// Function Mariner.MarinerPlayerState.CanPlayerSelectCharacter
// 0x0030 (0x0030 - 0x0000)
struct MarinerPlayerState_CanPlayerSelectCharacter final
{
public:
	TSoftClassPtr<class UClass>                   Character;                                         // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1918[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlayerState_CanPlayerSelectCharacter) == 0x000008, "Wrong alignment on MarinerPlayerState_CanPlayerSelectCharacter");
static_assert(sizeof(MarinerPlayerState_CanPlayerSelectCharacter) == 0x000030, "Wrong size on MarinerPlayerState_CanPlayerSelectCharacter");
static_assert(offsetof(MarinerPlayerState_CanPlayerSelectCharacter, Character) == 0x000000, "Member 'MarinerPlayerState_CanPlayerSelectCharacter::Character' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_CanPlayerSelectCharacter, ReturnValue) == 0x000028, "Member 'MarinerPlayerState_CanPlayerSelectCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.CheckIfPerformedDoubleKnockOut
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerState_CheckIfPerformedDoubleKnockOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_CheckIfPerformedDoubleKnockOut) == 0x000001, "Wrong alignment on MarinerPlayerState_CheckIfPerformedDoubleKnockOut");
static_assert(sizeof(MarinerPlayerState_CheckIfPerformedDoubleKnockOut) == 0x000001, "Wrong size on MarinerPlayerState_CheckIfPerformedDoubleKnockOut");
static_assert(offsetof(MarinerPlayerState_CheckIfPerformedDoubleKnockOut, ReturnValue) == 0x000000, "Member 'MarinerPlayerState_CheckIfPerformedDoubleKnockOut::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.Client_OnCharacterRequestFailed
// 0x0020 (0x0020 - 0x0000)
struct MarinerPlayerState_Client_OnCharacterRequestFailed final
{
public:
	class FString                                 RequestedCharacterString;                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastKnownSelectedCharacterString;                  // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_Client_OnCharacterRequestFailed) == 0x000008, "Wrong alignment on MarinerPlayerState_Client_OnCharacterRequestFailed");
static_assert(sizeof(MarinerPlayerState_Client_OnCharacterRequestFailed) == 0x000020, "Wrong size on MarinerPlayerState_Client_OnCharacterRequestFailed");
static_assert(offsetof(MarinerPlayerState_Client_OnCharacterRequestFailed, RequestedCharacterString) == 0x000000, "Member 'MarinerPlayerState_Client_OnCharacterRequestFailed::RequestedCharacterString' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_Client_OnCharacterRequestFailed, LastKnownSelectedCharacterString) == 0x000010, "Member 'MarinerPlayerState_Client_OnCharacterRequestFailed::LastKnownSelectedCharacterString' has a wrong offset!");

// Function Mariner.MarinerPlayerState.ClientInformAboutKnockout
// 0x0018 (0x0018 - 0x0000)
struct MarinerPlayerState_ClientInformAboutKnockout final
{
public:
	class AMarinerPlayerState*                    KnockoutPlayerState;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDamageType*                      DamageType;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerPlayerState*                    FallPlayerState;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_ClientInformAboutKnockout) == 0x000008, "Wrong alignment on MarinerPlayerState_ClientInformAboutKnockout");
static_assert(sizeof(MarinerPlayerState_ClientInformAboutKnockout) == 0x000018, "Wrong size on MarinerPlayerState_ClientInformAboutKnockout");
static_assert(offsetof(MarinerPlayerState_ClientInformAboutKnockout, KnockoutPlayerState) == 0x000000, "Member 'MarinerPlayerState_ClientInformAboutKnockout::KnockoutPlayerState' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_ClientInformAboutKnockout, DamageType) == 0x000008, "Member 'MarinerPlayerState_ClientInformAboutKnockout::DamageType' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_ClientInformAboutKnockout, FallPlayerState) == 0x000010, "Member 'MarinerPlayerState_ClientInformAboutKnockout::FallPlayerState' has a wrong offset!");

// Function Mariner.MarinerPlayerState.DoChatEmote
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerState_DoChatEmote final
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_DoChatEmote) == 0x000001, "Wrong alignment on MarinerPlayerState_DoChatEmote");
static_assert(sizeof(MarinerPlayerState_DoChatEmote) == 0x000001, "Wrong size on MarinerPlayerState_DoChatEmote");
static_assert(offsetof(MarinerPlayerState_DoChatEmote, InputAction) == 0x000000, "Member 'MarinerPlayerState_DoChatEmote::InputAction' has a wrong offset!");

// Function Mariner.MarinerPlayerState.DoPreGameReadyEmote
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerState_DoPreGameReadyEmote final
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_DoPreGameReadyEmote) == 0x000001, "Wrong alignment on MarinerPlayerState_DoPreGameReadyEmote");
static_assert(sizeof(MarinerPlayerState_DoPreGameReadyEmote) == 0x000001, "Wrong size on MarinerPlayerState_DoPreGameReadyEmote");
static_assert(offsetof(MarinerPlayerState_DoPreGameReadyEmote, InputAction) == 0x000000, "Member 'MarinerPlayerState_DoPreGameReadyEmote::InputAction' has a wrong offset!");

// Function Mariner.MarinerPlayerState.Editor_ServerSetUniqueId
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerState_Editor_ServerSetUniqueId final
{
public:
	class FString                                 InUniqueId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_Editor_ServerSetUniqueId) == 0x000008, "Wrong alignment on MarinerPlayerState_Editor_ServerSetUniqueId");
static_assert(sizeof(MarinerPlayerState_Editor_ServerSetUniqueId) == 0x000010, "Wrong size on MarinerPlayerState_Editor_ServerSetUniqueId");
static_assert(offsetof(MarinerPlayerState_Editor_ServerSetUniqueId, InUniqueId) == 0x000000, "Member 'MarinerPlayerState_Editor_ServerSetUniqueId::InUniqueId' has a wrong offset!");

// Function Mariner.MarinerPlayerState.IncrementFloatStatValue
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerState_IncrementFloatStatValue final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidForAchievement;                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1919[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlayerState_IncrementFloatStatValue) == 0x000004, "Wrong alignment on MarinerPlayerState_IncrementFloatStatValue");
static_assert(sizeof(MarinerPlayerState_IncrementFloatStatValue) == 0x000010, "Wrong size on MarinerPlayerState_IncrementFloatStatValue");
static_assert(offsetof(MarinerPlayerState_IncrementFloatStatValue, StatName) == 0x000000, "Member 'MarinerPlayerState_IncrementFloatStatValue::StatName' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_IncrementFloatStatValue, Value) == 0x000008, "Member 'MarinerPlayerState_IncrementFloatStatValue::Value' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_IncrementFloatStatValue, bValidForAchievement) == 0x00000C, "Member 'MarinerPlayerState_IncrementFloatStatValue::bValidForAchievement' has a wrong offset!");

// Function Mariner.MarinerPlayerState.IncrementStatValue
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerState_IncrementStatValue final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidForAchievement;                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191A[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlayerState_IncrementStatValue) == 0x000004, "Wrong alignment on MarinerPlayerState_IncrementStatValue");
static_assert(sizeof(MarinerPlayerState_IncrementStatValue) == 0x000010, "Wrong size on MarinerPlayerState_IncrementStatValue");
static_assert(offsetof(MarinerPlayerState_IncrementStatValue, StatName) == 0x000000, "Member 'MarinerPlayerState_IncrementStatValue::StatName' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_IncrementStatValue, Value) == 0x000008, "Member 'MarinerPlayerState_IncrementStatValue::Value' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_IncrementStatValue, bValidForAchievement) == 0x00000C, "Member 'MarinerPlayerState_IncrementStatValue::bValidForAchievement' has a wrong offset!");

// Function Mariner.MarinerPlayerState.Multicast_SetPawnClass
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerState_Multicast_SetPawnClass final
{
public:
	TSubclassOf<class AMarinerCharacter>          NewPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromClientRequest;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlayerState_Multicast_SetPawnClass) == 0x000008, "Wrong alignment on MarinerPlayerState_Multicast_SetPawnClass");
static_assert(sizeof(MarinerPlayerState_Multicast_SetPawnClass) == 0x000010, "Wrong size on MarinerPlayerState_Multicast_SetPawnClass");
static_assert(offsetof(MarinerPlayerState_Multicast_SetPawnClass, NewPawn) == 0x000000, "Member 'MarinerPlayerState_Multicast_SetPawnClass::NewPawn' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_Multicast_SetPawnClass, bFromClientRequest) == 0x000008, "Member 'MarinerPlayerState_Multicast_SetPawnClass::bFromClientRequest' has a wrong offset!");

// Function Mariner.MarinerPlayerState.OnBotFakeProfileSkinUpdated
// 0x0004 (0x0004 - 0x0000)
struct MarinerPlayerState_OnBotFakeProfileSkinUpdated final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_OnBotFakeProfileSkinUpdated) == 0x000004, "Wrong alignment on MarinerPlayerState_OnBotFakeProfileSkinUpdated");
static_assert(sizeof(MarinerPlayerState_OnBotFakeProfileSkinUpdated) == 0x000004, "Wrong size on MarinerPlayerState_OnBotFakeProfileSkinUpdated");
static_assert(offsetof(MarinerPlayerState_OnBotFakeProfileSkinUpdated, SelectedIndex) == 0x000000, "Member 'MarinerPlayerState_OnBotFakeProfileSkinUpdated::SelectedIndex' has a wrong offset!");

// Function Mariner.MarinerPlayerState.OnDamageDealt
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerState_OnDamageDealt final
{
public:
	class AMarinerPlayerState*                    DamagedPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageDealt;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191C[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlayerState_OnDamageDealt) == 0x000008, "Wrong alignment on MarinerPlayerState_OnDamageDealt");
static_assert(sizeof(MarinerPlayerState_OnDamageDealt) == 0x000010, "Wrong size on MarinerPlayerState_OnDamageDealt");
static_assert(offsetof(MarinerPlayerState_OnDamageDealt, DamagedPlayer) == 0x000000, "Member 'MarinerPlayerState_OnDamageDealt::DamagedPlayer' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_OnDamageDealt, DamageDealt) == 0x000008, "Member 'MarinerPlayerState_OnDamageDealt::DamageDealt' has a wrong offset!");

// Function Mariner.MarinerPlayerState.OnDamageRecieved
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerState_OnDamageRecieved final
{
public:
	class AMarinerPlayerState*                    DamageDealingPlayer;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageDealt;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191D[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlayerState_OnDamageRecieved) == 0x000008, "Wrong alignment on MarinerPlayerState_OnDamageRecieved");
static_assert(sizeof(MarinerPlayerState_OnDamageRecieved) == 0x000010, "Wrong size on MarinerPlayerState_OnDamageRecieved");
static_assert(offsetof(MarinerPlayerState_OnDamageRecieved, DamageDealingPlayer) == 0x000000, "Member 'MarinerPlayerState_OnDamageRecieved::DamageDealingPlayer' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_OnDamageRecieved, DamageDealt) == 0x000008, "Member 'MarinerPlayerState_OnDamageRecieved::DamageDealt' has a wrong offset!");

// Function Mariner.MarinerPlayerState.OnPregameStateChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlayerState_OnPregameStateChanged final
{
public:
	class FName                                   NewPregameState;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_OnPregameStateChanged) == 0x000004, "Wrong alignment on MarinerPlayerState_OnPregameStateChanged");
static_assert(sizeof(MarinerPlayerState_OnPregameStateChanged) == 0x000008, "Wrong size on MarinerPlayerState_OnPregameStateChanged");
static_assert(offsetof(MarinerPlayerState_OnPregameStateChanged, NewPregameState) == 0x000000, "Member 'MarinerPlayerState_OnPregameStateChanged::NewPregameState' has a wrong offset!");

// Function Mariner.MarinerPlayerState.OnRep_Stats
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerState_OnRep_Stats final
{
public:
	TArray<struct FPlayerStat>                    OldStats;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_OnRep_Stats) == 0x000008, "Wrong alignment on MarinerPlayerState_OnRep_Stats");
static_assert(sizeof(MarinerPlayerState_OnRep_Stats) == 0x000010, "Wrong size on MarinerPlayerState_OnRep_Stats");
static_assert(offsetof(MarinerPlayerState_OnRep_Stats, OldStats) == 0x000000, "Member 'MarinerPlayerState_OnRep_Stats::OldStats' has a wrong offset!");

// Function Mariner.MarinerPlayerState.ScorePoints
// 0x0004 (0x0004 - 0x0000)
struct MarinerPlayerState_ScorePoints final
{
public:
	int32                                         Points;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_ScorePoints) == 0x000004, "Wrong alignment on MarinerPlayerState_ScorePoints");
static_assert(sizeof(MarinerPlayerState_ScorePoints) == 0x000004, "Wrong size on MarinerPlayerState_ScorePoints");
static_assert(offsetof(MarinerPlayerState_ScorePoints, Points) == 0x000000, "Member 'MarinerPlayerState_ScorePoints::Points' has a wrong offset!");

// Function Mariner.MarinerPlayerState.Server_DoChatEmote
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerState_Server_DoChatEmote final
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_Server_DoChatEmote) == 0x000001, "Wrong alignment on MarinerPlayerState_Server_DoChatEmote");
static_assert(sizeof(MarinerPlayerState_Server_DoChatEmote) == 0x000001, "Wrong size on MarinerPlayerState_Server_DoChatEmote");
static_assert(offsetof(MarinerPlayerState_Server_DoChatEmote, InputAction) == 0x000000, "Member 'MarinerPlayerState_Server_DoChatEmote::InputAction' has a wrong offset!");

// Function Mariner.MarinerPlayerState.Server_DoPreGameReadyEmote
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerState_Server_DoPreGameReadyEmote final
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_Server_DoPreGameReadyEmote) == 0x000001, "Wrong alignment on MarinerPlayerState_Server_DoPreGameReadyEmote");
static_assert(sizeof(MarinerPlayerState_Server_DoPreGameReadyEmote) == 0x000001, "Wrong size on MarinerPlayerState_Server_DoPreGameReadyEmote");
static_assert(offsetof(MarinerPlayerState_Server_DoPreGameReadyEmote, InputAction) == 0x000000, "Member 'MarinerPlayerState_Server_DoPreGameReadyEmote::InputAction' has a wrong offset!");

// Function Mariner.MarinerPlayerState.Server_RequestPawnClass
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerState_Server_RequestPawnClass final
{
public:
	class FString                                 SoftObjectString;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_Server_RequestPawnClass) == 0x000008, "Wrong alignment on MarinerPlayerState_Server_RequestPawnClass");
static_assert(sizeof(MarinerPlayerState_Server_RequestPawnClass) == 0x000010, "Wrong size on MarinerPlayerState_Server_RequestPawnClass");
static_assert(offsetof(MarinerPlayerState_Server_RequestPawnClass, SoftObjectString) == 0x000000, "Member 'MarinerPlayerState_Server_RequestPawnClass::SoftObjectString' has a wrong offset!");

// Function Mariner.MarinerPlayerState.Server_SetHasRequestedPawnClass
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerState_Server_SetHasRequestedPawnClass final
{
public:
	bool                                          bHasRequested;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_Server_SetHasRequestedPawnClass) == 0x000001, "Wrong alignment on MarinerPlayerState_Server_SetHasRequestedPawnClass");
static_assert(sizeof(MarinerPlayerState_Server_SetHasRequestedPawnClass) == 0x000001, "Wrong size on MarinerPlayerState_Server_SetHasRequestedPawnClass");
static_assert(offsetof(MarinerPlayerState_Server_SetHasRequestedPawnClass, bHasRequested) == 0x000000, "Member 'MarinerPlayerState_Server_SetHasRequestedPawnClass::bHasRequested' has a wrong offset!");

// Function Mariner.MarinerPlayerState.Server_SoftSelectPawnClass
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerState_Server_SoftSelectPawnClass final
{
public:
	class FString                                 SoftObjectString;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_Server_SoftSelectPawnClass) == 0x000008, "Wrong alignment on MarinerPlayerState_Server_SoftSelectPawnClass");
static_assert(sizeof(MarinerPlayerState_Server_SoftSelectPawnClass) == 0x000010, "Wrong size on MarinerPlayerState_Server_SoftSelectPawnClass");
static_assert(offsetof(MarinerPlayerState_Server_SoftSelectPawnClass, SoftObjectString) == 0x000000, "Member 'MarinerPlayerState_Server_SoftSelectPawnClass::SoftObjectString' has a wrong offset!");

// Function Mariner.MarinerPlayerState.ServerSetPawnClassAndPlayerName
// 0x0020 (0x0020 - 0x0000)
struct MarinerPlayerState_ServerSetPawnClassAndPlayerName final
{
public:
	TSubclassOf<class AMarinerCharacter>          InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromClientRequest;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191E[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InPlayerName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_ServerSetPawnClassAndPlayerName) == 0x000008, "Wrong alignment on MarinerPlayerState_ServerSetPawnClassAndPlayerName");
static_assert(sizeof(MarinerPlayerState_ServerSetPawnClassAndPlayerName) == 0x000020, "Wrong size on MarinerPlayerState_ServerSetPawnClassAndPlayerName");
static_assert(offsetof(MarinerPlayerState_ServerSetPawnClassAndPlayerName, InPawn) == 0x000000, "Member 'MarinerPlayerState_ServerSetPawnClassAndPlayerName::InPawn' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_ServerSetPawnClassAndPlayerName, bFromClientRequest) == 0x000008, "Member 'MarinerPlayerState_ServerSetPawnClassAndPlayerName::bFromClientRequest' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_ServerSetPawnClassAndPlayerName, InPlayerName) == 0x000010, "Member 'MarinerPlayerState_ServerSetPawnClassAndPlayerName::InPlayerName' has a wrong offset!");

// Function Mariner.MarinerPlayerState.ServerSetTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerPlayerState_ServerSetTeamIndex final
{
public:
	int32                                         NewTeamIndex;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_ServerSetTeamIndex) == 0x000004, "Wrong alignment on MarinerPlayerState_ServerSetTeamIndex");
static_assert(sizeof(MarinerPlayerState_ServerSetTeamIndex) == 0x000004, "Wrong size on MarinerPlayerState_ServerSetTeamIndex");
static_assert(offsetof(MarinerPlayerState_ServerSetTeamIndex, NewTeamIndex) == 0x000000, "Member 'MarinerPlayerState_ServerSetTeamIndex::NewTeamIndex' has a wrong offset!");

// Function Mariner.MarinerPlayerState.SetIsIndependent
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerState_SetIsIndependent final
{
public:
	bool                                          bNewIndependent;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_SetIsIndependent) == 0x000001, "Wrong alignment on MarinerPlayerState_SetIsIndependent");
static_assert(sizeof(MarinerPlayerState_SetIsIndependent) == 0x000001, "Wrong size on MarinerPlayerState_SetIsIndependent");
static_assert(offsetof(MarinerPlayerState_SetIsIndependent, bNewIndependent) == 0x000000, "Member 'MarinerPlayerState_SetIsIndependent::bNewIndependent' has a wrong offset!");

// Function Mariner.MarinerPlayerState.SetPawnClass
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerState_SetPawnClass final
{
public:
	TSubclassOf<class AMarinerCharacter>          NewPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromClientRequest;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlayerState_SetPawnClass) == 0x000008, "Wrong alignment on MarinerPlayerState_SetPawnClass");
static_assert(sizeof(MarinerPlayerState_SetPawnClass) == 0x000010, "Wrong size on MarinerPlayerState_SetPawnClass");
static_assert(offsetof(MarinerPlayerState_SetPawnClass, NewPawn) == 0x000000, "Member 'MarinerPlayerState_SetPawnClass::NewPawn' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_SetPawnClass, bFromClientRequest) == 0x000008, "Member 'MarinerPlayerState_SetPawnClass::bFromClientRequest' has a wrong offset!");

// Function Mariner.MarinerPlayerState.SetSelectedPawnClassLocal
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerState_SetSelectedPawnClassLocal final
{
public:
	class FString                                 SoftObjectString;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_SetSelectedPawnClassLocal) == 0x000008, "Wrong alignment on MarinerPlayerState_SetSelectedPawnClassLocal");
static_assert(sizeof(MarinerPlayerState_SetSelectedPawnClassLocal) == 0x000010, "Wrong size on MarinerPlayerState_SetSelectedPawnClassLocal");
static_assert(offsetof(MarinerPlayerState_SetSelectedPawnClassLocal, SoftObjectString) == 0x000000, "Member 'MarinerPlayerState_SetSelectedPawnClassLocal::SoftObjectString' has a wrong offset!");

// Function Mariner.MarinerPlayerState.SetTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerPlayerState_SetTeamIndex final
{
public:
	int32                                         NewTeamIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_SetTeamIndex) == 0x000004, "Wrong alignment on MarinerPlayerState_SetTeamIndex");
static_assert(sizeof(MarinerPlayerState_SetTeamIndex) == 0x000004, "Wrong size on MarinerPlayerState_SetTeamIndex");
static_assert(offsetof(MarinerPlayerState_SetTeamIndex, NewTeamIndex) == 0x000000, "Member 'MarinerPlayerState_SetTeamIndex::NewTeamIndex' has a wrong offset!");

// Function Mariner.MarinerPlayerState.GetControlledCharacter
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlayerState_GetControlledCharacter final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_GetControlledCharacter) == 0x000008, "Wrong alignment on MarinerPlayerState_GetControlledCharacter");
static_assert(sizeof(MarinerPlayerState_GetControlledCharacter) == 0x000008, "Wrong size on MarinerPlayerState_GetControlledCharacter");
static_assert(offsetof(MarinerPlayerState_GetControlledCharacter, ReturnValue) == 0x000000, "Member 'MarinerPlayerState_GetControlledCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.GetCurrentPlatform
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlayerState_GetCurrentPlatform final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_GetCurrentPlatform) == 0x000004, "Wrong alignment on MarinerPlayerState_GetCurrentPlatform");
static_assert(sizeof(MarinerPlayerState_GetCurrentPlatform) == 0x000008, "Wrong size on MarinerPlayerState_GetCurrentPlatform");
static_assert(offsetof(MarinerPlayerState_GetCurrentPlatform, ReturnValue) == 0x000000, "Member 'MarinerPlayerState_GetCurrentPlatform::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.GetFakeBotActiveSkin
// 0x0028 (0x0028 - 0x0000)
struct MarinerPlayerState_GetFakeBotActiveSkin final
{
public:
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_GetFakeBotActiveSkin) == 0x000008, "Wrong alignment on MarinerPlayerState_GetFakeBotActiveSkin");
static_assert(sizeof(MarinerPlayerState_GetFakeBotActiveSkin) == 0x000028, "Wrong size on MarinerPlayerState_GetFakeBotActiveSkin");
static_assert(offsetof(MarinerPlayerState_GetFakeBotActiveSkin, ReturnValue) == 0x000000, "Member 'MarinerPlayerState_GetFakeBotActiveSkin::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.GetHasRequestedPawnClass
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerState_GetHasRequestedPawnClass final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_GetHasRequestedPawnClass) == 0x000001, "Wrong alignment on MarinerPlayerState_GetHasRequestedPawnClass");
static_assert(sizeof(MarinerPlayerState_GetHasRequestedPawnClass) == 0x000001, "Wrong size on MarinerPlayerState_GetHasRequestedPawnClass");
static_assert(offsetof(MarinerPlayerState_GetHasRequestedPawnClass, ReturnValue) == 0x000000, "Member 'MarinerPlayerState_GetHasRequestedPawnClass::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.GetPawnClass
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlayerState_GetPawnClass final
{
public:
	TSubclassOf<class AMarinerCharacter>          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_GetPawnClass) == 0x000008, "Wrong alignment on MarinerPlayerState_GetPawnClass");
static_assert(sizeof(MarinerPlayerState_GetPawnClass) == 0x000008, "Wrong size on MarinerPlayerState_GetPawnClass");
static_assert(offsetof(MarinerPlayerState_GetPawnClass, ReturnValue) == 0x000000, "Member 'MarinerPlayerState_GetPawnClass::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.GetProfileObjectManager
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlayerState_GetProfileObjectManager final
{
public:
	class UMarinerProfileObjectManager*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_GetProfileObjectManager) == 0x000008, "Wrong alignment on MarinerPlayerState_GetProfileObjectManager");
static_assert(sizeof(MarinerPlayerState_GetProfileObjectManager) == 0x000008, "Wrong size on MarinerPlayerState_GetProfileObjectManager");
static_assert(offsetof(MarinerPlayerState_GetProfileObjectManager, ReturnValue) == 0x000000, "Member 'MarinerPlayerState_GetProfileObjectManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.GetScore
// 0x0004 (0x0004 - 0x0000)
struct MarinerPlayerState_GetScore final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_GetScore) == 0x000004, "Wrong alignment on MarinerPlayerState_GetScore");
static_assert(sizeof(MarinerPlayerState_GetScore) == 0x000004, "Wrong size on MarinerPlayerState_GetScore");
static_assert(offsetof(MarinerPlayerState_GetScore, ReturnValue) == 0x000000, "Member 'MarinerPlayerState_GetScore::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.GetSelectedCharacter
// 0x0028 (0x0028 - 0x0000)
struct MarinerPlayerState_GetSelectedCharacter final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_GetSelectedCharacter) == 0x000008, "Wrong alignment on MarinerPlayerState_GetSelectedCharacter");
static_assert(sizeof(MarinerPlayerState_GetSelectedCharacter) == 0x000028, "Wrong size on MarinerPlayerState_GetSelectedCharacter");
static_assert(offsetof(MarinerPlayerState_GetSelectedCharacter, ReturnValue) == 0x000000, "Member 'MarinerPlayerState_GetSelectedCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.GetStatValue
// 0x000C (0x000C - 0x0000)
struct MarinerPlayerState_GetStatValue final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_GetStatValue) == 0x000004, "Wrong alignment on MarinerPlayerState_GetStatValue");
static_assert(sizeof(MarinerPlayerState_GetStatValue) == 0x00000C, "Wrong size on MarinerPlayerState_GetStatValue");
static_assert(offsetof(MarinerPlayerState_GetStatValue, StatName) == 0x000000, "Member 'MarinerPlayerState_GetStatValue::StatName' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_GetStatValue, ReturnValue) == 0x000008, "Member 'MarinerPlayerState_GetStatValue::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.GetStatValueAsFloat
// 0x000C (0x000C - 0x0000)
struct MarinerPlayerState_GetStatValueAsFloat final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_GetStatValueAsFloat) == 0x000004, "Wrong alignment on MarinerPlayerState_GetStatValueAsFloat");
static_assert(sizeof(MarinerPlayerState_GetStatValueAsFloat) == 0x00000C, "Wrong size on MarinerPlayerState_GetStatValueAsFloat");
static_assert(offsetof(MarinerPlayerState_GetStatValueAsFloat, StatName) == 0x000000, "Member 'MarinerPlayerState_GetStatValueAsFloat::StatName' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_GetStatValueAsFloat, ReturnValue) == 0x000008, "Member 'MarinerPlayerState_GetStatValueAsFloat::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.GetStatValueAsText
// 0x0020 (0x0020 - 0x0000)
struct MarinerPlayerState_GetStatValueAsText final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_GetStatValueAsText) == 0x000008, "Wrong alignment on MarinerPlayerState_GetStatValueAsText");
static_assert(sizeof(MarinerPlayerState_GetStatValueAsText) == 0x000020, "Wrong size on MarinerPlayerState_GetStatValueAsText");
static_assert(offsetof(MarinerPlayerState_GetStatValueAsText, StatName) == 0x000000, "Member 'MarinerPlayerState_GetStatValueAsText::StatName' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_GetStatValueAsText, ReturnValue) == 0x000008, "Member 'MarinerPlayerState_GetStatValueAsText::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.GetTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerPlayerState_GetTeamIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_GetTeamIndex) == 0x000004, "Wrong alignment on MarinerPlayerState_GetTeamIndex");
static_assert(sizeof(MarinerPlayerState_GetTeamIndex) == 0x000004, "Wrong size on MarinerPlayerState_GetTeamIndex");
static_assert(offsetof(MarinerPlayerState_GetTeamIndex, ReturnValue) == 0x000000, "Member 'MarinerPlayerState_GetTeamIndex::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.IsBotTreatedLikePlayer
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerState_IsBotTreatedLikePlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_IsBotTreatedLikePlayer) == 0x000001, "Wrong alignment on MarinerPlayerState_IsBotTreatedLikePlayer");
static_assert(sizeof(MarinerPlayerState_IsBotTreatedLikePlayer) == 0x000001, "Wrong size on MarinerPlayerState_IsBotTreatedLikePlayer");
static_assert(offsetof(MarinerPlayerState_IsBotTreatedLikePlayer, ReturnValue) == 0x000000, "Member 'MarinerPlayerState_IsBotTreatedLikePlayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.IsInActive
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerState_IsInActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_IsInActive) == 0x000001, "Wrong alignment on MarinerPlayerState_IsInActive");
static_assert(sizeof(MarinerPlayerState_IsInActive) == 0x000001, "Wrong size on MarinerPlayerState_IsInActive");
static_assert(offsetof(MarinerPlayerState_IsInActive, ReturnValue) == 0x000000, "Member 'MarinerPlayerState_IsInActive::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.IsIndependent
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerState_IsIndependent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_IsIndependent) == 0x000001, "Wrong alignment on MarinerPlayerState_IsIndependent");
static_assert(sizeof(MarinerPlayerState_IsIndependent) == 0x000001, "Wrong size on MarinerPlayerState_IsIndependent");
static_assert(offsetof(MarinerPlayerState_IsIndependent, ReturnValue) == 0x000000, "Member 'MarinerPlayerState_IsIndependent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.IsStatFloatType
// 0x000C (0x000C - 0x0000)
struct MarinerPlayerState_IsStatFloatType final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1920[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlayerState_IsStatFloatType) == 0x000004, "Wrong alignment on MarinerPlayerState_IsStatFloatType");
static_assert(sizeof(MarinerPlayerState_IsStatFloatType) == 0x00000C, "Wrong size on MarinerPlayerState_IsStatFloatType");
static_assert(offsetof(MarinerPlayerState_IsStatFloatType, StatName) == 0x000000, "Member 'MarinerPlayerState_IsStatFloatType::StatName' has a wrong offset!");
static_assert(offsetof(MarinerPlayerState_IsStatFloatType, ReturnValue) == 0x000008, "Member 'MarinerPlayerState_IsStatFloatType::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.ShouldTreatAsPlayer
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerState_ShouldTreatAsPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_ShouldTreatAsPlayer) == 0x000001, "Wrong alignment on MarinerPlayerState_ShouldTreatAsPlayer");
static_assert(sizeof(MarinerPlayerState_ShouldTreatAsPlayer) == 0x000001, "Wrong size on MarinerPlayerState_ShouldTreatAsPlayer");
static_assert(offsetof(MarinerPlayerState_ShouldTreatAsPlayer, ReturnValue) == 0x000000, "Member 'MarinerPlayerState_ShouldTreatAsPlayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerState.TryAndGetControlledCharacter
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlayerState_TryAndGetControlledCharacter final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerState_TryAndGetControlledCharacter) == 0x000008, "Wrong alignment on MarinerPlayerState_TryAndGetControlledCharacter");
static_assert(sizeof(MarinerPlayerState_TryAndGetControlledCharacter) == 0x000008, "Wrong size on MarinerPlayerState_TryAndGetControlledCharacter");
static_assert(offsetof(MarinerPlayerState_TryAndGetControlledCharacter, ReturnValue) == 0x000000, "Member 'MarinerPlayerState_TryAndGetControlledCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileFastOverlapResponseInterface.BeginProjectileFastOverlap
// 0x0090 (0x0090 - 0x0000)
struct MarinerProjectileFastOverlapResponseInterface_BeginProjectileFastOverlap final
{
public:
	class AMarinerProjectile*                     OverlappedProjectile;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OverlapHit;                                        // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFastOverlapResponseInterface_BeginProjectileFastOverlap) == 0x000008, "Wrong alignment on MarinerProjectileFastOverlapResponseInterface_BeginProjectileFastOverlap");
static_assert(sizeof(MarinerProjectileFastOverlapResponseInterface_BeginProjectileFastOverlap) == 0x000090, "Wrong size on MarinerProjectileFastOverlapResponseInterface_BeginProjectileFastOverlap");
static_assert(offsetof(MarinerProjectileFastOverlapResponseInterface_BeginProjectileFastOverlap, OverlappedProjectile) == 0x000000, "Member 'MarinerProjectileFastOverlapResponseInterface_BeginProjectileFastOverlap::OverlappedProjectile' has a wrong offset!");
static_assert(offsetof(MarinerProjectileFastOverlapResponseInterface_BeginProjectileFastOverlap, OverlapHit) == 0x000008, "Member 'MarinerProjectileFastOverlapResponseInterface_BeginProjectileFastOverlap::OverlapHit' has a wrong offset!");

// Function Mariner.MarinerProjectileFastOverlapResponseInterface.EndProjectileFastOverlap
// 0x0090 (0x0090 - 0x0000)
struct MarinerProjectileFastOverlapResponseInterface_EndProjectileFastOverlap final
{
public:
	class AMarinerProjectile*                     OverlappedProjectile;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OverlapHit;                                        // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFastOverlapResponseInterface_EndProjectileFastOverlap) == 0x000008, "Wrong alignment on MarinerProjectileFastOverlapResponseInterface_EndProjectileFastOverlap");
static_assert(sizeof(MarinerProjectileFastOverlapResponseInterface_EndProjectileFastOverlap) == 0x000090, "Wrong size on MarinerProjectileFastOverlapResponseInterface_EndProjectileFastOverlap");
static_assert(offsetof(MarinerProjectileFastOverlapResponseInterface_EndProjectileFastOverlap, OverlappedProjectile) == 0x000000, "Member 'MarinerProjectileFastOverlapResponseInterface_EndProjectileFastOverlap::OverlappedProjectile' has a wrong offset!");
static_assert(offsetof(MarinerProjectileFastOverlapResponseInterface_EndProjectileFastOverlap, OverlapHit) == 0x000008, "Member 'MarinerProjectileFastOverlapResponseInterface_EndProjectileFastOverlap::OverlapHit' has a wrong offset!");

// Function Mariner.MarinerLastMatchPlayerWidget.SetColorBySelection
// 0x0001 (0x0001 - 0x0000)
struct MarinerLastMatchPlayerWidget_SetColorBySelection final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLastMatchPlayerWidget_SetColorBySelection) == 0x000001, "Wrong alignment on MarinerLastMatchPlayerWidget_SetColorBySelection");
static_assert(sizeof(MarinerLastMatchPlayerWidget_SetColorBySelection) == 0x000001, "Wrong size on MarinerLastMatchPlayerWidget_SetColorBySelection");
static_assert(offsetof(MarinerLastMatchPlayerWidget_SetColorBySelection, bIsSelected) == 0x000000, "Member 'MarinerLastMatchPlayerWidget_SetColorBySelection::bIsSelected' has a wrong offset!");

// Function Mariner.MarinerPrompt.SetCustomInputWidget
// 0x0008 (0x0008 - 0x0000)
struct MarinerPrompt_SetCustomInputWidget final
{
public:
	class UObject*                                InputWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPrompt_SetCustomInputWidget) == 0x000008, "Wrong alignment on MarinerPrompt_SetCustomInputWidget");
static_assert(sizeof(MarinerPrompt_SetCustomInputWidget) == 0x000008, "Wrong size on MarinerPrompt_SetCustomInputWidget");
static_assert(offsetof(MarinerPrompt_SetCustomInputWidget, InputWidget) == 0x000000, "Member 'MarinerPrompt_SetCustomInputWidget::InputWidget' has a wrong offset!");

// Function Mariner.MarinerPrompt.SetInputAction
// 0x0001 (0x0001 - 0x0000)
struct MarinerPrompt_SetInputAction final
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPrompt_SetInputAction) == 0x000001, "Wrong alignment on MarinerPrompt_SetInputAction");
static_assert(sizeof(MarinerPrompt_SetInputAction) == 0x000001, "Wrong size on MarinerPrompt_SetInputAction");
static_assert(offsetof(MarinerPrompt_SetInputAction, InputAction) == 0x000000, "Member 'MarinerPrompt_SetInputAction::InputAction' has a wrong offset!");

// Function Mariner.MarinerPrompt.SetInputDisplay
// 0x0001 (0x0001 - 0x0000)
struct MarinerPrompt_SetInputDisplay final
{
public:
	EMarinerPromptInputDisplay                    InputDisplay;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPrompt_SetInputDisplay) == 0x000001, "Wrong alignment on MarinerPrompt_SetInputDisplay");
static_assert(sizeof(MarinerPrompt_SetInputDisplay) == 0x000001, "Wrong size on MarinerPrompt_SetInputDisplay");
static_assert(offsetof(MarinerPrompt_SetInputDisplay, InputDisplay) == 0x000000, "Member 'MarinerPrompt_SetInputDisplay::InputDisplay' has a wrong offset!");

// Function Mariner.MarinerPrompt.SetPrompt
// 0x0118 (0x0118 - 0x0000)
struct MarinerPrompt_SetPrompt final
{
public:
	struct FMarinerPromptData                     Prompt;                                            // 0x0000(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPrompt_SetPrompt) == 0x000008, "Wrong alignment on MarinerPrompt_SetPrompt");
static_assert(sizeof(MarinerPrompt_SetPrompt) == 0x000118, "Wrong size on MarinerPrompt_SetPrompt");
static_assert(offsetof(MarinerPrompt_SetPrompt, Prompt) == 0x000000, "Member 'MarinerPrompt_SetPrompt::Prompt' has a wrong offset!");

// Function Mariner.MarinerPrompt.SetText
// 0x0018 (0x0018 - 0x0000)
struct MarinerPrompt_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPrompt_SetText) == 0x000008, "Wrong alignment on MarinerPrompt_SetText");
static_assert(sizeof(MarinerPrompt_SetText) == 0x000018, "Wrong size on MarinerPrompt_SetText");
static_assert(offsetof(MarinerPrompt_SetText, Text) == 0x000000, "Member 'MarinerPrompt_SetText::Text' has a wrong offset!");

// Function Mariner.MarinerPrompt.GetInputAction
// 0x0001 (0x0001 - 0x0000)
struct MarinerPrompt_GetInputAction final
{
public:
	EMarinerInputActions                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPrompt_GetInputAction) == 0x000001, "Wrong alignment on MarinerPrompt_GetInputAction");
static_assert(sizeof(MarinerPrompt_GetInputAction) == 0x000001, "Wrong size on MarinerPrompt_GetInputAction");
static_assert(offsetof(MarinerPrompt_GetInputAction, ReturnValue) == 0x000000, "Member 'MarinerPrompt_GetInputAction::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPrompt.GetPrompt
// 0x0118 (0x0118 - 0x0000)
struct MarinerPrompt_GetPrompt final
{
public:
	struct FMarinerPromptData                     ReturnValue;                                       // 0x0000(0x0118)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPrompt_GetPrompt) == 0x000008, "Wrong alignment on MarinerPrompt_GetPrompt");
static_assert(sizeof(MarinerPrompt_GetPrompt) == 0x000118, "Wrong size on MarinerPrompt_GetPrompt");
static_assert(offsetof(MarinerPrompt_GetPrompt, ReturnValue) == 0x000000, "Member 'MarinerPrompt_GetPrompt::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPrompt.IsAllowed
// 0x0001 (0x0001 - 0x0000)
struct MarinerPrompt_IsAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPrompt_IsAllowed) == 0x000001, "Wrong alignment on MarinerPrompt_IsAllowed");
static_assert(sizeof(MarinerPrompt_IsAllowed) == 0x000001, "Wrong size on MarinerPrompt_IsAllowed");
static_assert(offsetof(MarinerPrompt_IsAllowed, ReturnValue) == 0x000000, "Member 'MarinerPrompt_IsAllowed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRocketTrophySpawner.OnBeginRespawnTimer
// 0x0004 (0x0004 - 0x0000)
struct MarinerRocketTrophySpawner_OnBeginRespawnTimer final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRocketTrophySpawner_OnBeginRespawnTimer) == 0x000004, "Wrong alignment on MarinerRocketTrophySpawner_OnBeginRespawnTimer");
static_assert(sizeof(MarinerRocketTrophySpawner_OnBeginRespawnTimer) == 0x000004, "Wrong size on MarinerRocketTrophySpawner_OnBeginRespawnTimer");
static_assert(offsetof(MarinerRocketTrophySpawner_OnBeginRespawnTimer, Time) == 0x000000, "Member 'MarinerRocketTrophySpawner_OnBeginRespawnTimer::Time' has a wrong offset!");

// Function Mariner.MarinerLoadCMSItemInventoryData.LoadItemInventoryData
// 0x0020 (0x0020 - 0x0000)
struct MarinerLoadCMSItemInventoryData_LoadItemInventoryData final
{
public:
	const class UObject*                          Param_WorldContextObject;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            ItemInventoryData;                                 // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMarinerLoadCMSItemInventoryData*       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLoadCMSItemInventoryData_LoadItemInventoryData) == 0x000008, "Wrong alignment on MarinerLoadCMSItemInventoryData_LoadItemInventoryData");
static_assert(sizeof(MarinerLoadCMSItemInventoryData_LoadItemInventoryData) == 0x000020, "Wrong size on MarinerLoadCMSItemInventoryData_LoadItemInventoryData");
static_assert(offsetof(MarinerLoadCMSItemInventoryData_LoadItemInventoryData, Param_WorldContextObject) == 0x000000, "Member 'MarinerLoadCMSItemInventoryData_LoadItemInventoryData::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerLoadCMSItemInventoryData_LoadItemInventoryData, ItemInventoryData) == 0x000008, "Member 'MarinerLoadCMSItemInventoryData_LoadItemInventoryData::ItemInventoryData' has a wrong offset!");
static_assert(offsetof(MarinerLoadCMSItemInventoryData_LoadItemInventoryData, ReturnValue) == 0x000018, "Member 'MarinerLoadCMSItemInventoryData_LoadItemInventoryData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLoadEquippedDataForCharacter.LoadEquippedDataForCharacter
// 0x0018 (0x0018 - 0x0000)
struct MarinerLoadEquippedDataForCharacter_LoadEquippedDataForCharacter final
{
public:
	const class UObject*                          Param_WorldContextObject;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMarinerPlayableCharacter*        CharacterData;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerLoadEquippedDataForCharacter*   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLoadEquippedDataForCharacter_LoadEquippedDataForCharacter) == 0x000008, "Wrong alignment on MarinerLoadEquippedDataForCharacter_LoadEquippedDataForCharacter");
static_assert(sizeof(MarinerLoadEquippedDataForCharacter_LoadEquippedDataForCharacter) == 0x000018, "Wrong size on MarinerLoadEquippedDataForCharacter_LoadEquippedDataForCharacter");
static_assert(offsetof(MarinerLoadEquippedDataForCharacter_LoadEquippedDataForCharacter, Param_WorldContextObject) == 0x000000, "Member 'MarinerLoadEquippedDataForCharacter_LoadEquippedDataForCharacter::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerLoadEquippedDataForCharacter_LoadEquippedDataForCharacter, CharacterData) == 0x000008, "Member 'MarinerLoadEquippedDataForCharacter_LoadEquippedDataForCharacter::CharacterData' has a wrong offset!");
static_assert(offsetof(MarinerLoadEquippedDataForCharacter_LoadEquippedDataForCharacter, ReturnValue) == 0x000010, "Member 'MarinerLoadEquippedDataForCharacter_LoadEquippedDataForCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.FrontendSkinUILoadResponse.GetSkinCollection
// 0x0008 (0x0008 - 0x0000)
struct FrontendSkinUILoadResponse_GetSkinCollection final
{
public:
	class UMarinerSkinCollectionDataAsset*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrontendSkinUILoadResponse_GetSkinCollection) == 0x000008, "Wrong alignment on FrontendSkinUILoadResponse_GetSkinCollection");
static_assert(sizeof(FrontendSkinUILoadResponse_GetSkinCollection) == 0x000008, "Wrong size on FrontendSkinUILoadResponse_GetSkinCollection");
static_assert(offsetof(FrontendSkinUILoadResponse_GetSkinCollection, ReturnValue) == 0x000000, "Member 'FrontendSkinUILoadResponse_GetSkinCollection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLoadFrontendSkinDataForCharacter.LoadSkinsForCharacter
// 0x0020 (0x0020 - 0x0000)
struct MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter final
{
public:
	const class UObject*                          Param_WorldContextObject;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMarinerPlayableCharacter*        CharacterData;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOwnedItems;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnownedItems;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProgressionItems;                                 // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlastPassItems;                                   // 0x0013(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStoreOffers;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollectionItems;                                  // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1928[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerLoadFrontendSkinDataForCharacter* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter) == 0x000008, "Wrong alignment on MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter");
static_assert(sizeof(MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter) == 0x000020, "Wrong size on MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter");
static_assert(offsetof(MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter, Param_WorldContextObject) == 0x000000, "Member 'MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter, CharacterData) == 0x000008, "Member 'MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter::CharacterData' has a wrong offset!");
static_assert(offsetof(MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter, bOwnedItems) == 0x000010, "Member 'MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter::bOwnedItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter, bUnownedItems) == 0x000011, "Member 'MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter::bUnownedItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter, bProgressionItems) == 0x000012, "Member 'MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter::bProgressionItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter, bBlastPassItems) == 0x000013, "Member 'MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter::bBlastPassItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter, bStoreOffers) == 0x000014, "Member 'MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter::bStoreOffers' has a wrong offset!");
static_assert(offsetof(MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter, bCollectionItems) == 0x000015, "Member 'MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter::bCollectionItems' has a wrong offset!");
static_assert(offsetof(MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter, ReturnValue) == 0x000018, "Member 'MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLoadTotemDataFromProfile.LoadTotemDataForProfile
// 0x02F0 (0x02F0 - 0x0000)
struct MarinerLoadTotemDataFromProfile_LoadTotemDataForProfile final
{
public:
	const class UObject*                          Param_WorldContextObject;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoProfile                          InProfile;                                         // 0x0008(0x02E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UMarinerLoadTotemDataFromProfile*       ReturnValue;                                       // 0x02E8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLoadTotemDataFromProfile_LoadTotemDataForProfile) == 0x000008, "Wrong alignment on MarinerLoadTotemDataFromProfile_LoadTotemDataForProfile");
static_assert(sizeof(MarinerLoadTotemDataFromProfile_LoadTotemDataForProfile) == 0x0002F0, "Wrong size on MarinerLoadTotemDataFromProfile_LoadTotemDataForProfile");
static_assert(offsetof(MarinerLoadTotemDataFromProfile_LoadTotemDataForProfile, Param_WorldContextObject) == 0x000000, "Member 'MarinerLoadTotemDataFromProfile_LoadTotemDataForProfile::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerLoadTotemDataFromProfile_LoadTotemDataForProfile, InProfile) == 0x000008, "Member 'MarinerLoadTotemDataFromProfile_LoadTotemDataForProfile::InProfile' has a wrong offset!");
static_assert(offsetof(MarinerLoadTotemDataFromProfile_LoadTotemDataForProfile, ReturnValue) == 0x0002E8, "Member 'MarinerLoadTotemDataFromProfile_LoadTotemDataForProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSplineComponent.AuthoritySetSplineDuration
// 0x0004 (0x0004 - 0x0000)
struct MarinerSplineComponent_AuthoritySetSplineDuration final
{
public:
	float                                         InDuration;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSplineComponent_AuthoritySetSplineDuration) == 0x000004, "Wrong alignment on MarinerSplineComponent_AuthoritySetSplineDuration");
static_assert(sizeof(MarinerSplineComponent_AuthoritySetSplineDuration) == 0x000004, "Wrong size on MarinerSplineComponent_AuthoritySetSplineDuration");
static_assert(offsetof(MarinerSplineComponent_AuthoritySetSplineDuration, InDuration) == 0x000000, "Member 'MarinerSplineComponent_AuthoritySetSplineDuration::InDuration' has a wrong offset!");

// Function Mariner.MarinerSplineComponent.AuthoritySetStationaryEndpoints
// 0x0001 (0x0001 - 0x0000)
struct MarinerSplineComponent_AuthoritySetStationaryEndpoints final
{
public:
	bool                                          bInStationaryEndpoints;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSplineComponent_AuthoritySetStationaryEndpoints) == 0x000001, "Wrong alignment on MarinerSplineComponent_AuthoritySetStationaryEndpoints");
static_assert(sizeof(MarinerSplineComponent_AuthoritySetStationaryEndpoints) == 0x000001, "Wrong size on MarinerSplineComponent_AuthoritySetStationaryEndpoints");
static_assert(offsetof(MarinerSplineComponent_AuthoritySetStationaryEndpoints, bInStationaryEndpoints) == 0x000000, "Member 'MarinerSplineComponent_AuthoritySetStationaryEndpoints::bInStationaryEndpoints' has a wrong offset!");

// Function Mariner.MarinerSplineComponent.GetSplineID
// 0x0004 (0x0004 - 0x0000)
struct MarinerSplineComponent_GetSplineID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSplineComponent_GetSplineID) == 0x000004, "Wrong alignment on MarinerSplineComponent_GetSplineID");
static_assert(sizeof(MarinerSplineComponent_GetSplineID) == 0x000004, "Wrong size on MarinerSplineComponent_GetSplineID");
static_assert(offsetof(MarinerSplineComponent_GetSplineID, ReturnValue) == 0x000000, "Member 'MarinerSplineComponent_GetSplineID::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLobbySlotWidget.LeavePartyConfirmed
// 0x0018 (0x0018 - 0x0000)
struct MarinerLobbySlotWidget_LeavePartyConfirmed final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLobbySlotWidget_LeavePartyConfirmed) == 0x000008, "Wrong alignment on MarinerLobbySlotWidget_LeavePartyConfirmed");
static_assert(sizeof(MarinerLobbySlotWidget_LeavePartyConfirmed) == 0x000018, "Wrong size on MarinerLobbySlotWidget_LeavePartyConfirmed");
static_assert(offsetof(MarinerLobbySlotWidget_LeavePartyConfirmed, KeyPressed) == 0x000000, "Member 'MarinerLobbySlotWidget_LeavePartyConfirmed::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerLocalMessage.Blueprint_GetText
// 0x0060 (0x0060 - 0x0000)
struct MarinerLocalMessage_Blueprint_GetText final
{
public:
	class APlayerState*                           RelatedPlayerState_1;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState_2;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalObject;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerMessageText                    ReturnValue;                                       // 0x0018(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLocalMessage_Blueprint_GetText) == 0x000008, "Wrong alignment on MarinerLocalMessage_Blueprint_GetText");
static_assert(sizeof(MarinerLocalMessage_Blueprint_GetText) == 0x000060, "Wrong size on MarinerLocalMessage_Blueprint_GetText");
static_assert(offsetof(MarinerLocalMessage_Blueprint_GetText, RelatedPlayerState_1) == 0x000000, "Member 'MarinerLocalMessage_Blueprint_GetText::RelatedPlayerState_1' has a wrong offset!");
static_assert(offsetof(MarinerLocalMessage_Blueprint_GetText, RelatedPlayerState_2) == 0x000008, "Member 'MarinerLocalMessage_Blueprint_GetText::RelatedPlayerState_2' has a wrong offset!");
static_assert(offsetof(MarinerLocalMessage_Blueprint_GetText, OptionalObject) == 0x000010, "Member 'MarinerLocalMessage_Blueprint_GetText::OptionalObject' has a wrong offset!");
static_assert(offsetof(MarinerLocalMessage_Blueprint_GetText, ReturnValue) == 0x000018, "Member 'MarinerLocalMessage_Blueprint_GetText::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerLocalMessage.OnClientReceive
// 0x0020 (0x0020 - 0x0000)
struct MarinerLocalMessage_OnClientReceive final
{
public:
	class APlayerController*                      LocalPC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState_1;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState_2;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalObject;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLocalMessage_OnClientReceive) == 0x000008, "Wrong alignment on MarinerLocalMessage_OnClientReceive");
static_assert(sizeof(MarinerLocalMessage_OnClientReceive) == 0x000020, "Wrong size on MarinerLocalMessage_OnClientReceive");
static_assert(offsetof(MarinerLocalMessage_OnClientReceive, LocalPC) == 0x000000, "Member 'MarinerLocalMessage_OnClientReceive::LocalPC' has a wrong offset!");
static_assert(offsetof(MarinerLocalMessage_OnClientReceive, RelatedPlayerState_1) == 0x000008, "Member 'MarinerLocalMessage_OnClientReceive::RelatedPlayerState_1' has a wrong offset!");
static_assert(offsetof(MarinerLocalMessage_OnClientReceive, RelatedPlayerState_2) == 0x000010, "Member 'MarinerLocalMessage_OnClientReceive::RelatedPlayerState_2' has a wrong offset!");
static_assert(offsetof(MarinerLocalMessage_OnClientReceive, OptionalObject) == 0x000018, "Member 'MarinerLocalMessage_OnClientReceive::OptionalObject' has a wrong offset!");

// Function Mariner.MarinerLocalMessage.ResolveMessage
// 0x0068 (0x0068 - 0x0000)
struct MarinerLocalMessage_ResolveMessage final
{
public:
	class APlayerController*                      LocalPC;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState_1;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState_2;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalObject;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerMessageText                    ReturnValue;                                       // 0x0020(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerLocalMessage_ResolveMessage) == 0x000008, "Wrong alignment on MarinerLocalMessage_ResolveMessage");
static_assert(sizeof(MarinerLocalMessage_ResolveMessage) == 0x000068, "Wrong size on MarinerLocalMessage_ResolveMessage");
static_assert(offsetof(MarinerLocalMessage_ResolveMessage, LocalPC) == 0x000000, "Member 'MarinerLocalMessage_ResolveMessage::LocalPC' has a wrong offset!");
static_assert(offsetof(MarinerLocalMessage_ResolveMessage, RelatedPlayerState_1) == 0x000008, "Member 'MarinerLocalMessage_ResolveMessage::RelatedPlayerState_1' has a wrong offset!");
static_assert(offsetof(MarinerLocalMessage_ResolveMessage, RelatedPlayerState_2) == 0x000010, "Member 'MarinerLocalMessage_ResolveMessage::RelatedPlayerState_2' has a wrong offset!");
static_assert(offsetof(MarinerLocalMessage_ResolveMessage, OptionalObject) == 0x000018, "Member 'MarinerLocalMessage_ResolveMessage::OptionalObject' has a wrong offset!");
static_assert(offsetof(MarinerLocalMessage_ResolveMessage, ReturnValue) == 0x000020, "Member 'MarinerLocalMessage_ResolveMessage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMainArtifactsMenu.OnPresetButtonSelected
// 0x0008 (0x0008 - 0x0000)
struct MarinerMainArtifactsMenu_OnPresetButtonSelected final
{
public:
	class UMarinerLayeredButton*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMainArtifactsMenu_OnPresetButtonSelected) == 0x000008, "Wrong alignment on MarinerMainArtifactsMenu_OnPresetButtonSelected");
static_assert(sizeof(MarinerMainArtifactsMenu_OnPresetButtonSelected) == 0x000008, "Wrong size on MarinerMainArtifactsMenu_OnPresetButtonSelected");
static_assert(offsetof(MarinerMainArtifactsMenu_OnPresetButtonSelected, Instance) == 0x000000, "Member 'MarinerMainArtifactsMenu_OnPresetButtonSelected::Instance' has a wrong offset!");

// Function Mariner.MarinerMainArtifactsMenu.OnSubMenuButtonHovered
// 0x0010 (0x0010 - 0x0000)
struct MarinerMainArtifactsMenu_OnSubMenuButtonHovered final
{
public:
	class UMarinerLayeredButton*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromKeyboard;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromMouse;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_192F[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMainArtifactsMenu_OnSubMenuButtonHovered) == 0x000008, "Wrong alignment on MarinerMainArtifactsMenu_OnSubMenuButtonHovered");
static_assert(sizeof(MarinerMainArtifactsMenu_OnSubMenuButtonHovered) == 0x000010, "Wrong size on MarinerMainArtifactsMenu_OnSubMenuButtonHovered");
static_assert(offsetof(MarinerMainArtifactsMenu_OnSubMenuButtonHovered, Instance) == 0x000000, "Member 'MarinerMainArtifactsMenu_OnSubMenuButtonHovered::Instance' has a wrong offset!");
static_assert(offsetof(MarinerMainArtifactsMenu_OnSubMenuButtonHovered, bFromKeyboard) == 0x000008, "Member 'MarinerMainArtifactsMenu_OnSubMenuButtonHovered::bFromKeyboard' has a wrong offset!");
static_assert(offsetof(MarinerMainArtifactsMenu_OnSubMenuButtonHovered, bFromMouse) == 0x000009, "Member 'MarinerMainArtifactsMenu_OnSubMenuButtonHovered::bFromMouse' has a wrong offset!");

// Function Mariner.MarinerMainArtifactsMenu.SetCurrentCharacter
// 0x0008 (0x0008 - 0x0000)
struct MarinerMainArtifactsMenu_SetCurrentCharacter final
{
public:
	class UMarinerPlayableCharacter*              InCurrentCharacter;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMainArtifactsMenu_SetCurrentCharacter) == 0x000008, "Wrong alignment on MarinerMainArtifactsMenu_SetCurrentCharacter");
static_assert(sizeof(MarinerMainArtifactsMenu_SetCurrentCharacter) == 0x000008, "Wrong size on MarinerMainArtifactsMenu_SetCurrentCharacter");
static_assert(offsetof(MarinerMainArtifactsMenu_SetCurrentCharacter, InCurrentCharacter) == 0x000000, "Member 'MarinerMainArtifactsMenu_SetCurrentCharacter::InCurrentCharacter' has a wrong offset!");

// Function Mariner.MarinerMainArtifactsMenu.GetCurrentCharacter
// 0x0008 (0x0008 - 0x0000)
struct MarinerMainArtifactsMenu_GetCurrentCharacter final
{
public:
	class UMarinerPlayableCharacter*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMainArtifactsMenu_GetCurrentCharacter) == 0x000008, "Wrong alignment on MarinerMainArtifactsMenu_GetCurrentCharacter");
static_assert(sizeof(MarinerMainArtifactsMenu_GetCurrentCharacter) == 0x000008, "Wrong size on MarinerMainArtifactsMenu_GetCurrentCharacter");
static_assert(offsetof(MarinerMainArtifactsMenu_GetCurrentCharacter, ReturnValue) == 0x000000, "Member 'MarinerMainArtifactsMenu_GetCurrentCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileSpread.GenerateTransforms
// 0x0060 (0x0060 - 0x0000)
struct MarinerProjectileSpread_GenerateTransforms final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1935[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FMultiProjectileSpawnData>      OutSpawnPaths;                                     // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USceneComponent*                        SocketSource;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1936[0x8];                                     // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerProjectileSpread_GenerateTransforms) == 0x000010, "Wrong alignment on MarinerProjectileSpread_GenerateTransforms");
static_assert(sizeof(MarinerProjectileSpread_GenerateTransforms) == 0x000060, "Wrong size on MarinerProjectileSpread_GenerateTransforms");
static_assert(offsetof(MarinerProjectileSpread_GenerateTransforms, WorldContextObject) == 0x000000, "Member 'MarinerProjectileSpread_GenerateTransforms::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerProjectileSpread_GenerateTransforms, SpawnTransform) == 0x000010, "Member 'MarinerProjectileSpread_GenerateTransforms::SpawnTransform' has a wrong offset!");
static_assert(offsetof(MarinerProjectileSpread_GenerateTransforms, OutSpawnPaths) == 0x000040, "Member 'MarinerProjectileSpread_GenerateTransforms::OutSpawnPaths' has a wrong offset!");
static_assert(offsetof(MarinerProjectileSpread_GenerateTransforms, SocketSource) == 0x000050, "Member 'MarinerProjectileSpread_GenerateTransforms::SocketSource' has a wrong offset!");

// Function Mariner.MarinerProjectileSpread.GetPathCount
// 0x0004 (0x0004 - 0x0000)
struct MarinerProjectileSpread_GetPathCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileSpread_GetPathCount) == 0x000004, "Wrong alignment on MarinerProjectileSpread_GetPathCount");
static_assert(sizeof(MarinerProjectileSpread_GetPathCount) == 0x000004, "Wrong size on MarinerProjectileSpread_GetPathCount");
static_assert(offsetof(MarinerProjectileSpread_GetPathCount, ReturnValue) == 0x000000, "Member 'MarinerProjectileSpread_GetPathCount::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRootMotionMoveUpdateDefaults.GetOverrideAbilityRootMotionName
// 0x0008 (0x0008 - 0x0000)
struct MarinerRootMotionMoveUpdateDefaults_GetOverrideAbilityRootMotionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRootMotionMoveUpdateDefaults_GetOverrideAbilityRootMotionName) == 0x000004, "Wrong alignment on MarinerRootMotionMoveUpdateDefaults_GetOverrideAbilityRootMotionName");
static_assert(sizeof(MarinerRootMotionMoveUpdateDefaults_GetOverrideAbilityRootMotionName) == 0x000008, "Wrong size on MarinerRootMotionMoveUpdateDefaults_GetOverrideAbilityRootMotionName");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_GetOverrideAbilityRootMotionName, ReturnValue) == 0x000000, "Member 'MarinerRootMotionMoveUpdateDefaults_GetOverrideAbilityRootMotionName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce.GetMoveToDynamicForceRootMotionName
// 0x0008 (0x0008 - 0x0000)
struct MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetMoveToDynamicForceRootMotionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetMoveToDynamicForceRootMotionName) == 0x000004, "Wrong alignment on MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetMoveToDynamicForceRootMotionName");
static_assert(sizeof(MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetMoveToDynamicForceRootMotionName) == 0x000008, "Wrong size on MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetMoveToDynamicForceRootMotionName");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetMoveToDynamicForceRootMotionName, ReturnValue) == 0x000000, "Member 'MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetMoveToDynamicForceRootMotionName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce.GetSmallValidDuration
// 0x0004 (0x0004 - 0x0000)
struct MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetSmallValidDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetSmallValidDuration) == 0x000004, "Wrong alignment on MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetSmallValidDuration");
static_assert(sizeof(MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetSmallValidDuration) == 0x000004, "Wrong size on MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetSmallValidDuration");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetSmallValidDuration, ReturnValue) == 0x000000, "Member 'MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetSmallValidDuration::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce.ResetLocationForMoveToDynamicForceRootMotionLocal
// 0x0018 (0x0018 - 0x0000)
struct MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ResetLocationForMoveToDynamicForceRootMotionLocal final
{
public:
	class UMarinerCharacterMovement*              OwningMovementComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewTargetLocation;                                 // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_193A[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ResetLocationForMoveToDynamicForceRootMotionLocal) == 0x000008, "Wrong alignment on MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ResetLocationForMoveToDynamicForceRootMotionLocal");
static_assert(sizeof(MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ResetLocationForMoveToDynamicForceRootMotionLocal) == 0x000018, "Wrong size on MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ResetLocationForMoveToDynamicForceRootMotionLocal");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ResetLocationForMoveToDynamicForceRootMotionLocal, OwningMovementComponent) == 0x000000, "Member 'MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ResetLocationForMoveToDynamicForceRootMotionLocal::OwningMovementComponent' has a wrong offset!");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ResetLocationForMoveToDynamicForceRootMotionLocal, NewTargetLocation) == 0x000008, "Member 'MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ResetLocationForMoveToDynamicForceRootMotionLocal::NewTargetLocation' has a wrong offset!");

// Function Mariner.MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce.ValidDurationForMoveToDynamicForce
// 0x0008 (0x0008 - 0x0000)
struct MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ValidDurationForMoveToDynamicForce final
{
public:
	float                                         DurationToTest;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_193B[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ValidDurationForMoveToDynamicForce) == 0x000004, "Wrong alignment on MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ValidDurationForMoveToDynamicForce");
static_assert(sizeof(MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ValidDurationForMoveToDynamicForce) == 0x000008, "Wrong size on MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ValidDurationForMoveToDynamicForce");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ValidDurationForMoveToDynamicForce, DurationToTest) == 0x000000, "Member 'MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ValidDurationForMoveToDynamicForce::DurationToTest' has a wrong offset!");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ValidDurationForMoveToDynamicForce, ReturnValue) == 0x000004, "Member 'MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ValidDurationForMoveToDynamicForce::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMapDataAsset.GetFullMapName
// 0x0010 (0x0010 - 0x0000)
struct MarinerMapDataAsset_GetFullMapName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMapDataAsset_GetFullMapName) == 0x000008, "Wrong alignment on MarinerMapDataAsset_GetFullMapName");
static_assert(sizeof(MarinerMapDataAsset_GetFullMapName) == 0x000010, "Wrong size on MarinerMapDataAsset_GetFullMapName");
static_assert(offsetof(MarinerMapDataAsset_GetFullMapName, ReturnValue) == 0x000000, "Member 'MarinerMapDataAsset_GetFullMapName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMapDataAsset.GetMapName
// 0x0010 (0x0010 - 0x0000)
struct MarinerMapDataAsset_GetMapName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMapDataAsset_GetMapName) == 0x000008, "Wrong alignment on MarinerMapDataAsset_GetMapName");
static_assert(sizeof(MarinerMapDataAsset_GetMapName) == 0x000010, "Wrong size on MarinerMapDataAsset_GetMapName");
static_assert(offsetof(MarinerMapDataAsset_GetMapName, ReturnValue) == 0x000000, "Member 'MarinerMapDataAsset_GetMapName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRarityWidget.InitRarityWidget
// 0x0008 (0x0008 - 0x0000)
struct MarinerRarityWidget_InitRarityWidget final
{
public:
	class UMarinerItemLoaderButtonBase*           Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRarityWidget_InitRarityWidget) == 0x000008, "Wrong alignment on MarinerRarityWidget_InitRarityWidget");
static_assert(sizeof(MarinerRarityWidget_InitRarityWidget) == 0x000008, "Wrong size on MarinerRarityWidget_InitRarityWidget");
static_assert(offsetof(MarinerRarityWidget_InitRarityWidget, Instance) == 0x000000, "Member 'MarinerRarityWidget_InitRarityWidget::Instance' has a wrong offset!");

// Function Mariner.MarinerRarityWidget.SetRarityBrush
// 0x0088 (0x0088 - 0x0000)
struct MarinerRarityWidget_SetRarityBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRarityWidget_SetRarityBrush) == 0x000008, "Wrong alignment on MarinerRarityWidget_SetRarityBrush");
static_assert(sizeof(MarinerRarityWidget_SetRarityBrush) == 0x000088, "Wrong size on MarinerRarityWidget_SetRarityBrush");
static_assert(offsetof(MarinerRarityWidget_SetRarityBrush, InBrush) == 0x000000, "Member 'MarinerRarityWidget_SetRarityBrush::InBrush' has a wrong offset!");

// Function Mariner.MarinerRarityWidget.SetRarityColor
// 0x0008 (0x0008 - 0x0000)
struct MarinerRarityWidget_SetRarityColor final
{
public:
	class UMarinerItemLoaderButtonBase*           Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRarityWidget_SetRarityColor) == 0x000008, "Wrong alignment on MarinerRarityWidget_SetRarityColor");
static_assert(sizeof(MarinerRarityWidget_SetRarityColor) == 0x000008, "Wrong size on MarinerRarityWidget_SetRarityColor");
static_assert(offsetof(MarinerRarityWidget_SetRarityColor, Instance) == 0x000000, "Member 'MarinerRarityWidget_SetRarityColor::Instance' has a wrong offset!");

// Function Mariner.MarinerMapSelectButton.SetMap
// 0x0014 (0x0014 - 0x0000)
struct MarinerMapSelectButton_SetMap final
{
public:
	struct FGuid                                  InMapId;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShowMapText;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_193E[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMapSelectButton_SetMap) == 0x000004, "Wrong alignment on MarinerMapSelectButton_SetMap");
static_assert(sizeof(MarinerMapSelectButton_SetMap) == 0x000014, "Wrong size on MarinerMapSelectButton_SetMap");
static_assert(offsetof(MarinerMapSelectButton_SetMap, InMapId) == 0x000000, "Member 'MarinerMapSelectButton_SetMap::InMapId' has a wrong offset!");
static_assert(offsetof(MarinerMapSelectButton_SetMap, bInShowMapText) == 0x000010, "Member 'MarinerMapSelectButton_SetMap::bInShowMapText' has a wrong offset!");

// Function Mariner.MarinerMapSelectButton.GetMapId
// 0x0010 (0x0010 - 0x0000)
struct MarinerMapSelectButton_GetMapId final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMapSelectButton_GetMapId) == 0x000004, "Wrong alignment on MarinerMapSelectButton_GetMapId");
static_assert(sizeof(MarinerMapSelectButton_GetMapId) == 0x000010, "Wrong size on MarinerMapSelectButton_GetMapId");
static_assert(offsetof(MarinerMapSelectButton_GetMapId, ReturnValue) == 0x000000, "Member 'MarinerMapSelectButton_GetMapId::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMatchmakingMapSelection.Init
// 0x0030 (0x0030 - 0x0000)
struct MarinerMatchmakingMapSelection_Init final
{
public:
	struct FGuid                                  InPlaylistId;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  InMapId;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilterModeArray                       InModeIDs;                                         // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMatchmakingMapSelection_Init) == 0x000008, "Wrong alignment on MarinerMatchmakingMapSelection_Init");
static_assert(sizeof(MarinerMatchmakingMapSelection_Init) == 0x000030, "Wrong size on MarinerMatchmakingMapSelection_Init");
static_assert(offsetof(MarinerMatchmakingMapSelection_Init, InPlaylistId) == 0x000000, "Member 'MarinerMatchmakingMapSelection_Init::InPlaylistId' has a wrong offset!");
static_assert(offsetof(MarinerMatchmakingMapSelection_Init, InMapId) == 0x000010, "Member 'MarinerMatchmakingMapSelection_Init::InMapId' has a wrong offset!");
static_assert(offsetof(MarinerMatchmakingMapSelection_Init, InModeIDs) == 0x000020, "Member 'MarinerMatchmakingMapSelection_Init::InModeIDs' has a wrong offset!");

// Function Mariner.MarinerMatchmakingMapSelection.SetModeEnabled
// 0x0008 (0x0008 - 0x0000)
struct MarinerMatchmakingMapSelection_SetModeEnabled final
{
public:
	int32                                         ModeIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1940[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMatchmakingMapSelection_SetModeEnabled) == 0x000004, "Wrong alignment on MarinerMatchmakingMapSelection_SetModeEnabled");
static_assert(sizeof(MarinerMatchmakingMapSelection_SetModeEnabled) == 0x000008, "Wrong size on MarinerMatchmakingMapSelection_SetModeEnabled");
static_assert(offsetof(MarinerMatchmakingMapSelection_SetModeEnabled, ModeIndex) == 0x000000, "Member 'MarinerMatchmakingMapSelection_SetModeEnabled::ModeIndex' has a wrong offset!");
static_assert(offsetof(MarinerMatchmakingMapSelection_SetModeEnabled, bEnabled) == 0x000004, "Member 'MarinerMatchmakingMapSelection_SetModeEnabled::bEnabled' has a wrong offset!");

// Function Mariner.MarinerMatchmakingMapSelection.GetModeCount
// 0x0004 (0x0004 - 0x0000)
struct MarinerMatchmakingMapSelection_GetModeCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMatchmakingMapSelection_GetModeCount) == 0x000004, "Wrong alignment on MarinerMatchmakingMapSelection_GetModeCount");
static_assert(sizeof(MarinerMatchmakingMapSelection_GetModeCount) == 0x000004, "Wrong size on MarinerMatchmakingMapSelection_GetModeCount");
static_assert(offsetof(MarinerMatchmakingMapSelection_GetModeCount, ReturnValue) == 0x000000, "Member 'MarinerMatchmakingMapSelection_GetModeCount::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMatchmakingMapSelection.GetModeData
// 0x0028 (0x0028 - 0x0000)
struct MarinerMatchmakingMapSelection_GetModeData final
{
public:
	int32                                         ModeIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1941[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ModeNameOut;                                       // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1942[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMatchmakingMapSelection_GetModeData) == 0x000008, "Wrong alignment on MarinerMatchmakingMapSelection_GetModeData");
static_assert(sizeof(MarinerMatchmakingMapSelection_GetModeData) == 0x000028, "Wrong size on MarinerMatchmakingMapSelection_GetModeData");
static_assert(offsetof(MarinerMatchmakingMapSelection_GetModeData, ModeIndex) == 0x000000, "Member 'MarinerMatchmakingMapSelection_GetModeData::ModeIndex' has a wrong offset!");
static_assert(offsetof(MarinerMatchmakingMapSelection_GetModeData, ModeNameOut) == 0x000008, "Member 'MarinerMatchmakingMapSelection_GetModeData::ModeNameOut' has a wrong offset!");
static_assert(offsetof(MarinerMatchmakingMapSelection_GetModeData, ReturnValue) == 0x000020, "Member 'MarinerMatchmakingMapSelection_GetModeData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMatchmakingMapSelection.GetModeEnabled
// 0x0008 (0x0008 - 0x0000)
struct MarinerMatchmakingMapSelection_GetModeEnabled final
{
public:
	int32                                         ModeIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1943[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMatchmakingMapSelection_GetModeEnabled) == 0x000004, "Wrong alignment on MarinerMatchmakingMapSelection_GetModeEnabled");
static_assert(sizeof(MarinerMatchmakingMapSelection_GetModeEnabled) == 0x000008, "Wrong size on MarinerMatchmakingMapSelection_GetModeEnabled");
static_assert(offsetof(MarinerMatchmakingMapSelection_GetModeEnabled, ModeIndex) == 0x000000, "Member 'MarinerMatchmakingMapSelection_GetModeEnabled::ModeIndex' has a wrong offset!");
static_assert(offsetof(MarinerMatchmakingMapSelection_GetModeEnabled, ReturnValue) == 0x000004, "Member 'MarinerMatchmakingMapSelection_GetModeEnabled::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPurchaseMessageBox.GetData
// 0x00C8 (0x00C8 - 0x0000)
struct MarinerPurchaseMessageBox_GetData final
{
public:
	struct FMarinerMessageBoxPurchaseData         ReturnValue;                                       // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPurchaseMessageBox_GetData) == 0x000008, "Wrong alignment on MarinerPurchaseMessageBox_GetData");
static_assert(sizeof(MarinerPurchaseMessageBox_GetData) == 0x0000C8, "Wrong size on MarinerPurchaseMessageBox_GetData");
static_assert(offsetof(MarinerPurchaseMessageBox_GetData, ReturnValue) == 0x000000, "Member 'MarinerPurchaseMessageBox_GetData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.CalculateLaunchVelocity
// 0x0030 (0x0030 - 0x0000)
struct MarinerMathUtils_CalculateLaunchVelocity final
{
public:
	struct FVector                                LaunchLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchAngle;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gravity;                                           // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLaunchVelocity;                                 // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1944[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_CalculateLaunchVelocity) == 0x000004, "Wrong alignment on MarinerMathUtils_CalculateLaunchVelocity");
static_assert(sizeof(MarinerMathUtils_CalculateLaunchVelocity) == 0x000030, "Wrong size on MarinerMathUtils_CalculateLaunchVelocity");
static_assert(offsetof(MarinerMathUtils_CalculateLaunchVelocity, LaunchLocation) == 0x000000, "Member 'MarinerMathUtils_CalculateLaunchVelocity::LaunchLocation' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CalculateLaunchVelocity, TargetLocation) == 0x00000C, "Member 'MarinerMathUtils_CalculateLaunchVelocity::TargetLocation' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CalculateLaunchVelocity, LaunchAngle) == 0x000018, "Member 'MarinerMathUtils_CalculateLaunchVelocity::LaunchAngle' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CalculateLaunchVelocity, Gravity) == 0x00001C, "Member 'MarinerMathUtils_CalculateLaunchVelocity::Gravity' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CalculateLaunchVelocity, OutLaunchVelocity) == 0x000020, "Member 'MarinerMathUtils_CalculateLaunchVelocity::OutLaunchVelocity' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CalculateLaunchVelocity, ReturnValue) == 0x00002C, "Member 'MarinerMathUtils_CalculateLaunchVelocity::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.CapsuleIntersectsBox
// 0x0090 (0x0090 - 0x0000)
struct MarinerMathUtils_CapsuleIntersectsBox final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CapsulePos1;                                       // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CapsulePos2;                                       // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1945[0x8];                                     // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BoxTransform;                                      // 0x0040(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutIntersectionPoint;                              // 0x0070(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionNormal;                                // 0x007C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1946[0x7];                                     // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_CapsuleIntersectsBox) == 0x000010, "Wrong alignment on MarinerMathUtils_CapsuleIntersectsBox");
static_assert(sizeof(MarinerMathUtils_CapsuleIntersectsBox) == 0x000090, "Wrong size on MarinerMathUtils_CapsuleIntersectsBox");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsBox, Box) == 0x000000, "Member 'MarinerMathUtils_CapsuleIntersectsBox::Box' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsBox, CapsulePos1) == 0x00001C, "Member 'MarinerMathUtils_CapsuleIntersectsBox::CapsulePos1' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsBox, CapsulePos2) == 0x000028, "Member 'MarinerMathUtils_CapsuleIntersectsBox::CapsulePos2' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsBox, SphereRadius) == 0x000034, "Member 'MarinerMathUtils_CapsuleIntersectsBox::SphereRadius' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsBox, BoxTransform) == 0x000040, "Member 'MarinerMathUtils_CapsuleIntersectsBox::BoxTransform' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsBox, OutIntersectionPoint) == 0x000070, "Member 'MarinerMathUtils_CapsuleIntersectsBox::OutIntersectionPoint' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsBox, OutCollisionNormal) == 0x00007C, "Member 'MarinerMathUtils_CapsuleIntersectsBox::OutCollisionNormal' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsBox, ReturnValue) == 0x000088, "Member 'MarinerMathUtils_CapsuleIntersectsBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.CapsuleIntersectsCapsule
// 0x0054 (0x0054 - 0x0000)
struct MarinerMathUtils_CapsuleIntersectsCapsule final
{
public:
	struct FVector                                Capsule1PosStart;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Capsule1PosEnd;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius1;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Capsule2PosStart;                                  // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Capsule2PosEnd;                                    // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius2;                                    // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutIntersectionPoint;                              // 0x0038(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionNormal;                                // 0x0044(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1947[0x3];                                     // 0x0051(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_CapsuleIntersectsCapsule) == 0x000004, "Wrong alignment on MarinerMathUtils_CapsuleIntersectsCapsule");
static_assert(sizeof(MarinerMathUtils_CapsuleIntersectsCapsule) == 0x000054, "Wrong size on MarinerMathUtils_CapsuleIntersectsCapsule");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsule, Capsule1PosStart) == 0x000000, "Member 'MarinerMathUtils_CapsuleIntersectsCapsule::Capsule1PosStart' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsule, Capsule1PosEnd) == 0x00000C, "Member 'MarinerMathUtils_CapsuleIntersectsCapsule::Capsule1PosEnd' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsule, CapsuleRadius1) == 0x000018, "Member 'MarinerMathUtils_CapsuleIntersectsCapsule::CapsuleRadius1' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsule, Capsule2PosStart) == 0x00001C, "Member 'MarinerMathUtils_CapsuleIntersectsCapsule::Capsule2PosStart' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsule, Capsule2PosEnd) == 0x000028, "Member 'MarinerMathUtils_CapsuleIntersectsCapsule::Capsule2PosEnd' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsule, CapsuleRadius2) == 0x000034, "Member 'MarinerMathUtils_CapsuleIntersectsCapsule::CapsuleRadius2' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsule, OutIntersectionPoint) == 0x000038, "Member 'MarinerMathUtils_CapsuleIntersectsCapsule::OutIntersectionPoint' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsule, OutCollisionNormal) == 0x000044, "Member 'MarinerMathUtils_CapsuleIntersectsCapsule::OutCollisionNormal' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsule, ReturnValue) == 0x000050, "Member 'MarinerMathUtils_CapsuleIntersectsCapsule::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.CapsuleIntersectsCapsuleCone
// 0x0058 (0x0058 - 0x0000)
struct MarinerMathUtils_CapsuleIntersectsCapsuleCone final
{
public:
	struct FVector                                CapsulePosStart;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CapsulePosEnd;                                     // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CapsuleConePosOrigin;                              // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CapsuleConeDirection;                              // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleConeLength;                                 // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleConeRadiusAtEnd;                            // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutIntersectionPoint;                              // 0x003C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionNormal;                                // 0x0048(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0054(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1948[0x3];                                     // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_CapsuleIntersectsCapsuleCone) == 0x000004, "Wrong alignment on MarinerMathUtils_CapsuleIntersectsCapsuleCone");
static_assert(sizeof(MarinerMathUtils_CapsuleIntersectsCapsuleCone) == 0x000058, "Wrong size on MarinerMathUtils_CapsuleIntersectsCapsuleCone");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsuleCone, CapsulePosStart) == 0x000000, "Member 'MarinerMathUtils_CapsuleIntersectsCapsuleCone::CapsulePosStart' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsuleCone, CapsulePosEnd) == 0x00000C, "Member 'MarinerMathUtils_CapsuleIntersectsCapsuleCone::CapsulePosEnd' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsuleCone, CapsuleRadius) == 0x000018, "Member 'MarinerMathUtils_CapsuleIntersectsCapsuleCone::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsuleCone, CapsuleConePosOrigin) == 0x00001C, "Member 'MarinerMathUtils_CapsuleIntersectsCapsuleCone::CapsuleConePosOrigin' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsuleCone, CapsuleConeDirection) == 0x000028, "Member 'MarinerMathUtils_CapsuleIntersectsCapsuleCone::CapsuleConeDirection' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsuleCone, CapsuleConeLength) == 0x000034, "Member 'MarinerMathUtils_CapsuleIntersectsCapsuleCone::CapsuleConeLength' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsuleCone, CapsuleConeRadiusAtEnd) == 0x000038, "Member 'MarinerMathUtils_CapsuleIntersectsCapsuleCone::CapsuleConeRadiusAtEnd' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsuleCone, OutIntersectionPoint) == 0x00003C, "Member 'MarinerMathUtils_CapsuleIntersectsCapsuleCone::OutIntersectionPoint' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsuleCone, OutCollisionNormal) == 0x000048, "Member 'MarinerMathUtils_CapsuleIntersectsCapsuleCone::OutCollisionNormal' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_CapsuleIntersectsCapsuleCone, ReturnValue) == 0x000054, "Member 'MarinerMathUtils_CapsuleIntersectsCapsuleCone::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.GetCapsulePointsFromExtents
// 0x0020 (0x0020 - 0x0000)
struct MarinerMathUtils_GetCapsulePointsFromExtents final
{
public:
	const class UCapsuleComponent*                Capsule;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCapsuleStartPoint;                              // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCapsuleEndPoint;                                // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMathUtils_GetCapsulePointsFromExtents) == 0x000008, "Wrong alignment on MarinerMathUtils_GetCapsulePointsFromExtents");
static_assert(sizeof(MarinerMathUtils_GetCapsulePointsFromExtents) == 0x000020, "Wrong size on MarinerMathUtils_GetCapsulePointsFromExtents");
static_assert(offsetof(MarinerMathUtils_GetCapsulePointsFromExtents, Capsule) == 0x000000, "Member 'MarinerMathUtils_GetCapsulePointsFromExtents::Capsule' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_GetCapsulePointsFromExtents, OutCapsuleStartPoint) == 0x000008, "Member 'MarinerMathUtils_GetCapsulePointsFromExtents::OutCapsuleStartPoint' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_GetCapsulePointsFromExtents, OutCapsuleEndPoint) == 0x000014, "Member 'MarinerMathUtils_GetCapsulePointsFromExtents::OutCapsuleEndPoint' has a wrong offset!");

// Function Mariner.MarinerMathUtils.GetDepenetrationDistanceFromHitResult
// 0x008C (0x008C - 0x0000)
struct MarinerMathUtils_GetDepenetrationDistanceFromHitResult final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0088(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMathUtils_GetDepenetrationDistanceFromHitResult) == 0x000004, "Wrong alignment on MarinerMathUtils_GetDepenetrationDistanceFromHitResult");
static_assert(sizeof(MarinerMathUtils_GetDepenetrationDistanceFromHitResult) == 0x00008C, "Wrong size on MarinerMathUtils_GetDepenetrationDistanceFromHitResult");
static_assert(offsetof(MarinerMathUtils_GetDepenetrationDistanceFromHitResult, Hit) == 0x000000, "Member 'MarinerMathUtils_GetDepenetrationDistanceFromHitResult::Hit' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_GetDepenetrationDistanceFromHitResult, ReturnValue) == 0x000088, "Member 'MarinerMathUtils_GetDepenetrationDistanceFromHitResult::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.GetPitchFromVector
// 0x0010 (0x0010 - 0x0000)
struct MarinerMathUtils_GetPitchFromVector final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMathUtils_GetPitchFromVector) == 0x000004, "Wrong alignment on MarinerMathUtils_GetPitchFromVector");
static_assert(sizeof(MarinerMathUtils_GetPitchFromVector) == 0x000010, "Wrong size on MarinerMathUtils_GetPitchFromVector");
static_assert(offsetof(MarinerMathUtils_GetPitchFromVector, Vector) == 0x000000, "Member 'MarinerMathUtils_GetPitchFromVector::Vector' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_GetPitchFromVector, ReturnValue) == 0x00000C, "Member 'MarinerMathUtils_GetPitchFromVector::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.HexToLinearColor
// 0x0020 (0x0020 - 0x0000)
struct MarinerMathUtils_HexToLinearColor final
{
public:
	class FString                                 HexColor;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMathUtils_HexToLinearColor) == 0x000008, "Wrong alignment on MarinerMathUtils_HexToLinearColor");
static_assert(sizeof(MarinerMathUtils_HexToLinearColor) == 0x000020, "Wrong size on MarinerMathUtils_HexToLinearColor");
static_assert(offsetof(MarinerMathUtils_HexToLinearColor, HexColor) == 0x000000, "Member 'MarinerMathUtils_HexToLinearColor::HexColor' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_HexToLinearColor, ReturnValue) == 0x000010, "Member 'MarinerMathUtils_HexToLinearColor::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.InterpTo
// 0x0014 (0x0014 - 0x0000)
struct MarinerMathUtils_InterpTo final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target;                                            // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMathUtils_InterpTo) == 0x000004, "Wrong alignment on MarinerMathUtils_InterpTo");
static_assert(sizeof(MarinerMathUtils_InterpTo) == 0x000014, "Wrong size on MarinerMathUtils_InterpTo");
static_assert(offsetof(MarinerMathUtils_InterpTo, Current) == 0x000000, "Member 'MarinerMathUtils_InterpTo::Current' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_InterpTo, Target) == 0x000004, "Member 'MarinerMathUtils_InterpTo::Target' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_InterpTo, DeltaTime) == 0x000008, "Member 'MarinerMathUtils_InterpTo::DeltaTime' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_InterpTo, InterpSpeed) == 0x00000C, "Member 'MarinerMathUtils_InterpTo::InterpSpeed' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_InterpTo, ReturnValue) == 0x000010, "Member 'MarinerMathUtils_InterpTo::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.IsActorBehindPawn
// 0x0018 (0x0018 - 0x0000)
struct MarinerMathUtils_IsActorBehindPawn final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class APawn*                            Pawn;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1949[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_IsActorBehindPawn) == 0x000008, "Wrong alignment on MarinerMathUtils_IsActorBehindPawn");
static_assert(sizeof(MarinerMathUtils_IsActorBehindPawn) == 0x000018, "Wrong size on MarinerMathUtils_IsActorBehindPawn");
static_assert(offsetof(MarinerMathUtils_IsActorBehindPawn, Actor) == 0x000000, "Member 'MarinerMathUtils_IsActorBehindPawn::Actor' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_IsActorBehindPawn, Pawn) == 0x000008, "Member 'MarinerMathUtils_IsActorBehindPawn::Pawn' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_IsActorBehindPawn, ReturnValue) == 0x000010, "Member 'MarinerMathUtils_IsActorBehindPawn::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.IsPointWithinCone
// 0x0030 (0x0030 - 0x0000)
struct MarinerMathUtils_IsPointWithinCone final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConeOrigin;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConeDirection;                                     // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CosConeHalfAngle;                                  // 0x0024(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConeLength;                                        // 0x0028(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194A[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_IsPointWithinCone) == 0x000004, "Wrong alignment on MarinerMathUtils_IsPointWithinCone");
static_assert(sizeof(MarinerMathUtils_IsPointWithinCone) == 0x000030, "Wrong size on MarinerMathUtils_IsPointWithinCone");
static_assert(offsetof(MarinerMathUtils_IsPointWithinCone, Point) == 0x000000, "Member 'MarinerMathUtils_IsPointWithinCone::Point' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_IsPointWithinCone, ConeOrigin) == 0x00000C, "Member 'MarinerMathUtils_IsPointWithinCone::ConeOrigin' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_IsPointWithinCone, ConeDirection) == 0x000018, "Member 'MarinerMathUtils_IsPointWithinCone::ConeDirection' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_IsPointWithinCone, CosConeHalfAngle) == 0x000024, "Member 'MarinerMathUtils_IsPointWithinCone::CosConeHalfAngle' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_IsPointWithinCone, ConeLength) == 0x000028, "Member 'MarinerMathUtils_IsPointWithinCone::ConeLength' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_IsPointWithinCone, ReturnValue) == 0x00002C, "Member 'MarinerMathUtils_IsPointWithinCone::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.LinearColorToHex
// 0x0020 (0x0020 - 0x0000)
struct MarinerMathUtils_LinearColorToHex final
{
public:
	struct FLinearColor                           LinearColor;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMathUtils_LinearColorToHex) == 0x000008, "Wrong alignment on MarinerMathUtils_LinearColorToHex");
static_assert(sizeof(MarinerMathUtils_LinearColorToHex) == 0x000020, "Wrong size on MarinerMathUtils_LinearColorToHex");
static_assert(offsetof(MarinerMathUtils_LinearColorToHex, LinearColor) == 0x000000, "Member 'MarinerMathUtils_LinearColorToHex::LinearColor' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_LinearColorToHex, ReturnValue) == 0x000010, "Member 'MarinerMathUtils_LinearColorToHex::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.LineIntersectsSphere
// 0x0040 (0x0040 - 0x0000)
struct MarinerMathUtils_LineIntersectsSphere final
{
public:
	struct FVector                                LineOrigin;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineDirection;                                     // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SphereCenter;                                      // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutIntersectionPoints;                             // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194B[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_LineIntersectsSphere) == 0x000008, "Wrong alignment on MarinerMathUtils_LineIntersectsSphere");
static_assert(sizeof(MarinerMathUtils_LineIntersectsSphere) == 0x000040, "Wrong size on MarinerMathUtils_LineIntersectsSphere");
static_assert(offsetof(MarinerMathUtils_LineIntersectsSphere, LineOrigin) == 0x000000, "Member 'MarinerMathUtils_LineIntersectsSphere::LineOrigin' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_LineIntersectsSphere, LineDirection) == 0x00000C, "Member 'MarinerMathUtils_LineIntersectsSphere::LineDirection' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_LineIntersectsSphere, SphereCenter) == 0x000018, "Member 'MarinerMathUtils_LineIntersectsSphere::SphereCenter' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_LineIntersectsSphere, SphereRadius) == 0x000024, "Member 'MarinerMathUtils_LineIntersectsSphere::SphereRadius' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_LineIntersectsSphere, OutIntersectionPoints) == 0x000028, "Member 'MarinerMathUtils_LineIntersectsSphere::OutIntersectionPoints' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_LineIntersectsSphere, ReturnValue) == 0x000038, "Member 'MarinerMathUtils_LineIntersectsSphere::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.LineSegmentIntersectsSphere
// 0x0040 (0x0040 - 0x0000)
struct MarinerMathUtils_LineSegmentIntersectsSphere final
{
public:
	struct FVector                                SegmentStart;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegmentEnd;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SphereCenter;                                      // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutIntersectionPoints;                             // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194C[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_LineSegmentIntersectsSphere) == 0x000008, "Wrong alignment on MarinerMathUtils_LineSegmentIntersectsSphere");
static_assert(sizeof(MarinerMathUtils_LineSegmentIntersectsSphere) == 0x000040, "Wrong size on MarinerMathUtils_LineSegmentIntersectsSphere");
static_assert(offsetof(MarinerMathUtils_LineSegmentIntersectsSphere, SegmentStart) == 0x000000, "Member 'MarinerMathUtils_LineSegmentIntersectsSphere::SegmentStart' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_LineSegmentIntersectsSphere, SegmentEnd) == 0x00000C, "Member 'MarinerMathUtils_LineSegmentIntersectsSphere::SegmentEnd' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_LineSegmentIntersectsSphere, SphereCenter) == 0x000018, "Member 'MarinerMathUtils_LineSegmentIntersectsSphere::SphereCenter' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_LineSegmentIntersectsSphere, SphereRadius) == 0x000024, "Member 'MarinerMathUtils_LineSegmentIntersectsSphere::SphereRadius' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_LineSegmentIntersectsSphere, OutIntersectionPoints) == 0x000028, "Member 'MarinerMathUtils_LineSegmentIntersectsSphere::OutIntersectionPoints' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_LineSegmentIntersectsSphere, ReturnValue) == 0x000038, "Member 'MarinerMathUtils_LineSegmentIntersectsSphere::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.PointInsideBox
// 0x0040 (0x0040 - 0x0000)
struct MarinerMathUtils_PointInsideBox final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtents;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BoxRotation;                                       // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxOrigin;                                         // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x002C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DebugLevel;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLikelyInside;                                   // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194D[0x2];                                     // 0x003E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_PointInsideBox) == 0x000008, "Wrong alignment on MarinerMathUtils_PointInsideBox");
static_assert(sizeof(MarinerMathUtils_PointInsideBox) == 0x000040, "Wrong size on MarinerMathUtils_PointInsideBox");
static_assert(offsetof(MarinerMathUtils_PointInsideBox, WorldContextObject) == 0x000000, "Member 'MarinerMathUtils_PointInsideBox::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideBox, BoxExtents) == 0x000008, "Member 'MarinerMathUtils_PointInsideBox::BoxExtents' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideBox, BoxRotation) == 0x000014, "Member 'MarinerMathUtils_PointInsideBox::BoxRotation' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideBox, BoxOrigin) == 0x000020, "Member 'MarinerMathUtils_PointInsideBox::BoxOrigin' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideBox, Point) == 0x00002C, "Member 'MarinerMathUtils_PointInsideBox::Point' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideBox, DebugLevel) == 0x000038, "Member 'MarinerMathUtils_PointInsideBox::DebugLevel' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideBox, bIsLikelyInside) == 0x00003C, "Member 'MarinerMathUtils_PointInsideBox::bIsLikelyInside' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideBox, ReturnValue) == 0x00003D, "Member 'MarinerMathUtils_PointInsideBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.PointInsideCapsule
// 0x0050 (0x0050 - 0x0000)
struct MarinerMathUtils_PointInsideCapsule final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CapsuleTransform;                                  // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FullCapsuleHeight;                                 // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0044(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194F[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_PointInsideCapsule) == 0x000010, "Wrong alignment on MarinerMathUtils_PointInsideCapsule");
static_assert(sizeof(MarinerMathUtils_PointInsideCapsule) == 0x000050, "Wrong size on MarinerMathUtils_PointInsideCapsule");
static_assert(offsetof(MarinerMathUtils_PointInsideCapsule, Point) == 0x000000, "Member 'MarinerMathUtils_PointInsideCapsule::Point' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideCapsule, CapsuleTransform) == 0x000010, "Member 'MarinerMathUtils_PointInsideCapsule::CapsuleTransform' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideCapsule, FullCapsuleHeight) == 0x000040, "Member 'MarinerMathUtils_PointInsideCapsule::FullCapsuleHeight' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideCapsule, CapsuleRadius) == 0x000044, "Member 'MarinerMathUtils_PointInsideCapsule::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideCapsule, ReturnValue) == 0x000048, "Member 'MarinerMathUtils_PointInsideCapsule::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.PointInsideCylinder
// 0x0050 (0x0050 - 0x0000)
struct MarinerMathUtils_PointInsideCylinder final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1950[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CylinderTransform;                                 // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CylinderHeight;                                    // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CylinderRadius;                                    // 0x0044(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1951[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_PointInsideCylinder) == 0x000010, "Wrong alignment on MarinerMathUtils_PointInsideCylinder");
static_assert(sizeof(MarinerMathUtils_PointInsideCylinder) == 0x000050, "Wrong size on MarinerMathUtils_PointInsideCylinder");
static_assert(offsetof(MarinerMathUtils_PointInsideCylinder, Point) == 0x000000, "Member 'MarinerMathUtils_PointInsideCylinder::Point' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideCylinder, CylinderTransform) == 0x000010, "Member 'MarinerMathUtils_PointInsideCylinder::CylinderTransform' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideCylinder, CylinderHeight) == 0x000040, "Member 'MarinerMathUtils_PointInsideCylinder::CylinderHeight' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideCylinder, CylinderRadius) == 0x000044, "Member 'MarinerMathUtils_PointInsideCylinder::CylinderRadius' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideCylinder, ReturnValue) == 0x000048, "Member 'MarinerMathUtils_PointInsideCylinder::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.PointInsideSphere
// 0x0020 (0x0020 - 0x0000)
struct MarinerMathUtils_PointInsideSphere final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SphereLocation;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1952[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_PointInsideSphere) == 0x000004, "Wrong alignment on MarinerMathUtils_PointInsideSphere");
static_assert(sizeof(MarinerMathUtils_PointInsideSphere) == 0x000020, "Wrong size on MarinerMathUtils_PointInsideSphere");
static_assert(offsetof(MarinerMathUtils_PointInsideSphere, Point) == 0x000000, "Member 'MarinerMathUtils_PointInsideSphere::Point' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideSphere, SphereLocation) == 0x00000C, "Member 'MarinerMathUtils_PointInsideSphere::SphereLocation' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideSphere, SphereRadius) == 0x000018, "Member 'MarinerMathUtils_PointInsideSphere::SphereRadius' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_PointInsideSphere, ReturnValue) == 0x00001C, "Member 'MarinerMathUtils_PointInsideSphere::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.ProjectWorldToScreenBidirectional
// 0x0020 (0x0020 - 0x0000)
struct MarinerMathUtils_ProjectWorldToScreenBidirectional final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetBehindCamera;                               // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerViewportRelative;                           // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1953[0x1];                                     // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_ProjectWorldToScreenBidirectional) == 0x000008, "Wrong alignment on MarinerMathUtils_ProjectWorldToScreenBidirectional");
static_assert(sizeof(MarinerMathUtils_ProjectWorldToScreenBidirectional) == 0x000020, "Wrong size on MarinerMathUtils_ProjectWorldToScreenBidirectional");
static_assert(offsetof(MarinerMathUtils_ProjectWorldToScreenBidirectional, PlayerController) == 0x000000, "Member 'MarinerMathUtils_ProjectWorldToScreenBidirectional::PlayerController' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_ProjectWorldToScreenBidirectional, WorldPosition) == 0x000008, "Member 'MarinerMathUtils_ProjectWorldToScreenBidirectional::WorldPosition' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_ProjectWorldToScreenBidirectional, ScreenPosition) == 0x000014, "Member 'MarinerMathUtils_ProjectWorldToScreenBidirectional::ScreenPosition' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_ProjectWorldToScreenBidirectional, bTargetBehindCamera) == 0x00001C, "Member 'MarinerMathUtils_ProjectWorldToScreenBidirectional::bTargetBehindCamera' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_ProjectWorldToScreenBidirectional, bPlayerViewportRelative) == 0x00001D, "Member 'MarinerMathUtils_ProjectWorldToScreenBidirectional::bPlayerViewportRelative' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_ProjectWorldToScreenBidirectional, ReturnValue) == 0x00001E, "Member 'MarinerMathUtils_ProjectWorldToScreenBidirectional::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.RayIntersectsCapsule
// 0x0070 (0x0070 - 0x0000)
struct MarinerMathUtils_RayIntersectsCapsule final
{
public:
	struct FVector                                RayOrigin;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RayDirection;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1954[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CapsuleTransform;                                  // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FullCapsuleHeight;                                 // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0054(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutIntersectionPoints;                             // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1955[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_RayIntersectsCapsule) == 0x000010, "Wrong alignment on MarinerMathUtils_RayIntersectsCapsule");
static_assert(sizeof(MarinerMathUtils_RayIntersectsCapsule) == 0x000070, "Wrong size on MarinerMathUtils_RayIntersectsCapsule");
static_assert(offsetof(MarinerMathUtils_RayIntersectsCapsule, RayOrigin) == 0x000000, "Member 'MarinerMathUtils_RayIntersectsCapsule::RayOrigin' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsCapsule, RayDirection) == 0x00000C, "Member 'MarinerMathUtils_RayIntersectsCapsule::RayDirection' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsCapsule, CapsuleTransform) == 0x000020, "Member 'MarinerMathUtils_RayIntersectsCapsule::CapsuleTransform' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsCapsule, FullCapsuleHeight) == 0x000050, "Member 'MarinerMathUtils_RayIntersectsCapsule::FullCapsuleHeight' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsCapsule, CapsuleRadius) == 0x000054, "Member 'MarinerMathUtils_RayIntersectsCapsule::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsCapsule, OutIntersectionPoints) == 0x000058, "Member 'MarinerMathUtils_RayIntersectsCapsule::OutIntersectionPoints' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsCapsule, ReturnValue) == 0x000068, "Member 'MarinerMathUtils_RayIntersectsCapsule::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.RayIntersectsCylinder
// 0x0080 (0x0080 - 0x0000)
struct MarinerMathUtils_RayIntersectsCylinder final
{
public:
	struct FVector                                RayOrigin;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RayDirection;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1956[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CylinderTransform;                                 // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CylinderHeight;                                    // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CylinderRadius;                                    // 0x0054(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowIntersectionWithCaps;                        // 0x0058(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1957[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        OutIntersectionPoints;                             // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1958[0xF];                                     // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_RayIntersectsCylinder) == 0x000010, "Wrong alignment on MarinerMathUtils_RayIntersectsCylinder");
static_assert(sizeof(MarinerMathUtils_RayIntersectsCylinder) == 0x000080, "Wrong size on MarinerMathUtils_RayIntersectsCylinder");
static_assert(offsetof(MarinerMathUtils_RayIntersectsCylinder, RayOrigin) == 0x000000, "Member 'MarinerMathUtils_RayIntersectsCylinder::RayOrigin' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsCylinder, RayDirection) == 0x00000C, "Member 'MarinerMathUtils_RayIntersectsCylinder::RayDirection' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsCylinder, CylinderTransform) == 0x000020, "Member 'MarinerMathUtils_RayIntersectsCylinder::CylinderTransform' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsCylinder, CylinderHeight) == 0x000050, "Member 'MarinerMathUtils_RayIntersectsCylinder::CylinderHeight' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsCylinder, CylinderRadius) == 0x000054, "Member 'MarinerMathUtils_RayIntersectsCylinder::CylinderRadius' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsCylinder, bAllowIntersectionWithCaps) == 0x000058, "Member 'MarinerMathUtils_RayIntersectsCylinder::bAllowIntersectionWithCaps' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsCylinder, OutIntersectionPoints) == 0x000060, "Member 'MarinerMathUtils_RayIntersectsCylinder::OutIntersectionPoints' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsCylinder, ReturnValue) == 0x000070, "Member 'MarinerMathUtils_RayIntersectsCylinder::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.RayIntersectsSphere
// 0x0040 (0x0040 - 0x0000)
struct MarinerMathUtils_RayIntersectsSphere final
{
public:
	struct FVector                                RayOrigin;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RayDirection;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SphereCenter;                                      // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutIntersectionPoints;                             // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1959[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_RayIntersectsSphere) == 0x000008, "Wrong alignment on MarinerMathUtils_RayIntersectsSphere");
static_assert(sizeof(MarinerMathUtils_RayIntersectsSphere) == 0x000040, "Wrong size on MarinerMathUtils_RayIntersectsSphere");
static_assert(offsetof(MarinerMathUtils_RayIntersectsSphere, RayOrigin) == 0x000000, "Member 'MarinerMathUtils_RayIntersectsSphere::RayOrigin' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsSphere, RayDirection) == 0x00000C, "Member 'MarinerMathUtils_RayIntersectsSphere::RayDirection' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsSphere, SphereCenter) == 0x000018, "Member 'MarinerMathUtils_RayIntersectsSphere::SphereCenter' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsSphere, SphereRadius) == 0x000024, "Member 'MarinerMathUtils_RayIntersectsSphere::SphereRadius' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsSphere, OutIntersectionPoints) == 0x000028, "Member 'MarinerMathUtils_RayIntersectsSphere::OutIntersectionPoints' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RayIntersectsSphere, ReturnValue) == 0x000038, "Member 'MarinerMathUtils_RayIntersectsSphere::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.RoundVector
// 0x0018 (0x0018 - 0x0000)
struct MarinerMathUtils_RoundVector final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMathUtils_RoundVector) == 0x000004, "Wrong alignment on MarinerMathUtils_RoundVector");
static_assert(sizeof(MarinerMathUtils_RoundVector) == 0x000018, "Wrong size on MarinerMathUtils_RoundVector");
static_assert(offsetof(MarinerMathUtils_RoundVector, Vector) == 0x000000, "Member 'MarinerMathUtils_RoundVector::Vector' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_RoundVector, ReturnValue) == 0x00000C, "Member 'MarinerMathUtils_RoundVector::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.SegmentIntersection2D
// 0x002C (0x002C - 0x0000)
struct MarinerMathUtils_SegmentIntersection2D final
{
public:
	struct FVector2D                              SegmentStartA;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SegmentEndA;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SegmentStartB;                                     // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SegmentEndB;                                       // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutIntersectionPoint;                              // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195A[0x3];                                     // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_SegmentIntersection2D) == 0x000004, "Wrong alignment on MarinerMathUtils_SegmentIntersection2D");
static_assert(sizeof(MarinerMathUtils_SegmentIntersection2D) == 0x00002C, "Wrong size on MarinerMathUtils_SegmentIntersection2D");
static_assert(offsetof(MarinerMathUtils_SegmentIntersection2D, SegmentStartA) == 0x000000, "Member 'MarinerMathUtils_SegmentIntersection2D::SegmentStartA' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SegmentIntersection2D, SegmentEndA) == 0x000008, "Member 'MarinerMathUtils_SegmentIntersection2D::SegmentEndA' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SegmentIntersection2D, SegmentStartB) == 0x000010, "Member 'MarinerMathUtils_SegmentIntersection2D::SegmentStartB' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SegmentIntersection2D, SegmentEndB) == 0x000018, "Member 'MarinerMathUtils_SegmentIntersection2D::SegmentEndB' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SegmentIntersection2D, OutIntersectionPoint) == 0x000020, "Member 'MarinerMathUtils_SegmentIntersection2D::OutIntersectionPoint' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SegmentIntersection2D, ReturnValue) == 0x000028, "Member 'MarinerMathUtils_SegmentIntersection2D::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.SegmentIntersectsBox
// 0x0060 (0x0060 - 0x0000)
struct MarinerMathUtils_SegmentIntersectsBox final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtents;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BoxRotation;                                       // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxOrigin;                                         // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegmentStart;                                      // 0x002C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SegmentEnd;                                        // 0x0038(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195B[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        OutIntersectionPoints;                             // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	int32                                         DebugLevel;                                        // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesLikelyIntersect;                              // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195C[0x2];                                     // 0x005E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_SegmentIntersectsBox) == 0x000008, "Wrong alignment on MarinerMathUtils_SegmentIntersectsBox");
static_assert(sizeof(MarinerMathUtils_SegmentIntersectsBox) == 0x000060, "Wrong size on MarinerMathUtils_SegmentIntersectsBox");
static_assert(offsetof(MarinerMathUtils_SegmentIntersectsBox, WorldContextObject) == 0x000000, "Member 'MarinerMathUtils_SegmentIntersectsBox::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SegmentIntersectsBox, BoxExtents) == 0x000008, "Member 'MarinerMathUtils_SegmentIntersectsBox::BoxExtents' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SegmentIntersectsBox, BoxRotation) == 0x000014, "Member 'MarinerMathUtils_SegmentIntersectsBox::BoxRotation' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SegmentIntersectsBox, BoxOrigin) == 0x000020, "Member 'MarinerMathUtils_SegmentIntersectsBox::BoxOrigin' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SegmentIntersectsBox, SegmentStart) == 0x00002C, "Member 'MarinerMathUtils_SegmentIntersectsBox::SegmentStart' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SegmentIntersectsBox, SegmentEnd) == 0x000038, "Member 'MarinerMathUtils_SegmentIntersectsBox::SegmentEnd' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SegmentIntersectsBox, OutIntersectionPoints) == 0x000048, "Member 'MarinerMathUtils_SegmentIntersectsBox::OutIntersectionPoints' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SegmentIntersectsBox, DebugLevel) == 0x000058, "Member 'MarinerMathUtils_SegmentIntersectsBox::DebugLevel' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SegmentIntersectsBox, bDoesLikelyIntersect) == 0x00005C, "Member 'MarinerMathUtils_SegmentIntersectsBox::bDoesLikelyIntersect' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SegmentIntersectsBox, ReturnValue) == 0x00005D, "Member 'MarinerMathUtils_SegmentIntersectsBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.SlabSegmentIntersection
// 0x001C (0x001C - 0x0000)
struct MarinerMathUtils_SlabSegmentIntersection final
{
public:
	float                                         BoxMin;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoxMax;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos1;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos2;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutLastStartTime;                                  // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutLastEndTime;                                    // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195D[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_SlabSegmentIntersection) == 0x000004, "Wrong alignment on MarinerMathUtils_SlabSegmentIntersection");
static_assert(sizeof(MarinerMathUtils_SlabSegmentIntersection) == 0x00001C, "Wrong size on MarinerMathUtils_SlabSegmentIntersection");
static_assert(offsetof(MarinerMathUtils_SlabSegmentIntersection, BoxMin) == 0x000000, "Member 'MarinerMathUtils_SlabSegmentIntersection::BoxMin' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SlabSegmentIntersection, BoxMax) == 0x000004, "Member 'MarinerMathUtils_SlabSegmentIntersection::BoxMax' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SlabSegmentIntersection, Pos1) == 0x000008, "Member 'MarinerMathUtils_SlabSegmentIntersection::Pos1' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SlabSegmentIntersection, Pos2) == 0x00000C, "Member 'MarinerMathUtils_SlabSegmentIntersection::Pos2' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SlabSegmentIntersection, OutLastStartTime) == 0x000010, "Member 'MarinerMathUtils_SlabSegmentIntersection::OutLastStartTime' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SlabSegmentIntersection, OutLastEndTime) == 0x000014, "Member 'MarinerMathUtils_SlabSegmentIntersection::OutLastEndTime' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SlabSegmentIntersection, ReturnValue) == 0x000018, "Member 'MarinerMathUtils_SlabSegmentIntersection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.SphereIntersectsBox
// 0x0080 (0x0080 - 0x0000)
struct MarinerMathUtils_SphereIntersectsBox final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SpherePos;                                         // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadiusSquared;                               // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195E[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BoxTransform;                                      // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutIntersectionPoint;                              // 0x0060(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionNormal;                                // 0x006C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195F[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_SphereIntersectsBox) == 0x000010, "Wrong alignment on MarinerMathUtils_SphereIntersectsBox");
static_assert(sizeof(MarinerMathUtils_SphereIntersectsBox) == 0x000080, "Wrong size on MarinerMathUtils_SphereIntersectsBox");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsBox, Box) == 0x000000, "Member 'MarinerMathUtils_SphereIntersectsBox::Box' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsBox, SpherePos) == 0x00001C, "Member 'MarinerMathUtils_SphereIntersectsBox::SpherePos' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsBox, SphereRadiusSquared) == 0x000028, "Member 'MarinerMathUtils_SphereIntersectsBox::SphereRadiusSquared' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsBox, BoxTransform) == 0x000030, "Member 'MarinerMathUtils_SphereIntersectsBox::BoxTransform' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsBox, OutIntersectionPoint) == 0x000060, "Member 'MarinerMathUtils_SphereIntersectsBox::OutIntersectionPoint' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsBox, OutCollisionNormal) == 0x00006C, "Member 'MarinerMathUtils_SphereIntersectsBox::OutCollisionNormal' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsBox, ReturnValue) == 0x000078, "Member 'MarinerMathUtils_SphereIntersectsBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.SphereIntersectsCapsule
// 0x0048 (0x0048 - 0x0000)
struct MarinerMathUtils_SphereIntersectsCapsule final
{
public:
	struct FVector                                SpherePos;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CapsulePos1;                                       // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CapsulePos2;                                       // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutIntersectionPoint;                              // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionNormal;                                // 0x0038(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1960[0x3];                                     // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_SphereIntersectsCapsule) == 0x000004, "Wrong alignment on MarinerMathUtils_SphereIntersectsCapsule");
static_assert(sizeof(MarinerMathUtils_SphereIntersectsCapsule) == 0x000048, "Wrong size on MarinerMathUtils_SphereIntersectsCapsule");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsCapsule, SpherePos) == 0x000000, "Member 'MarinerMathUtils_SphereIntersectsCapsule::SpherePos' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsCapsule, CapsulePos1) == 0x00000C, "Member 'MarinerMathUtils_SphereIntersectsCapsule::CapsulePos1' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsCapsule, CapsulePos2) == 0x000018, "Member 'MarinerMathUtils_SphereIntersectsCapsule::CapsulePos2' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsCapsule, SphereRadius) == 0x000024, "Member 'MarinerMathUtils_SphereIntersectsCapsule::SphereRadius' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsCapsule, CapsuleRadius) == 0x000028, "Member 'MarinerMathUtils_SphereIntersectsCapsule::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsCapsule, OutIntersectionPoint) == 0x00002C, "Member 'MarinerMathUtils_SphereIntersectsCapsule::OutIntersectionPoint' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsCapsule, OutCollisionNormal) == 0x000038, "Member 'MarinerMathUtils_SphereIntersectsCapsule::OutCollisionNormal' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsCapsule, ReturnValue) == 0x000044, "Member 'MarinerMathUtils_SphereIntersectsCapsule::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMathUtils.SphereIntersectsSphere
// 0x003C (0x003C - 0x0000)
struct MarinerMathUtils_SphereIntersectsSphere final
{
public:
	struct FVector                                Sphere1Pos;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Sphere2Pos;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sphere1Radius;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sphere2Radius;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutIntersectionPoint;                              // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCollisionNormal;                                // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1961[0x3];                                     // 0x0039(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMathUtils_SphereIntersectsSphere) == 0x000004, "Wrong alignment on MarinerMathUtils_SphereIntersectsSphere");
static_assert(sizeof(MarinerMathUtils_SphereIntersectsSphere) == 0x00003C, "Wrong size on MarinerMathUtils_SphereIntersectsSphere");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsSphere, Sphere1Pos) == 0x000000, "Member 'MarinerMathUtils_SphereIntersectsSphere::Sphere1Pos' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsSphere, Sphere2Pos) == 0x00000C, "Member 'MarinerMathUtils_SphereIntersectsSphere::Sphere2Pos' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsSphere, Sphere1Radius) == 0x000018, "Member 'MarinerMathUtils_SphereIntersectsSphere::Sphere1Radius' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsSphere, Sphere2Radius) == 0x00001C, "Member 'MarinerMathUtils_SphereIntersectsSphere::Sphere2Radius' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsSphere, OutIntersectionPoint) == 0x000020, "Member 'MarinerMathUtils_SphereIntersectsSphere::OutIntersectionPoint' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsSphere, OutCollisionNormal) == 0x00002C, "Member 'MarinerMathUtils_SphereIntersectsSphere::OutCollisionNormal' has a wrong offset!");
static_assert(offsetof(MarinerMathUtils_SphereIntersectsSphere, ReturnValue) == 0x000038, "Member 'MarinerMathUtils_SphereIntersectsSphere::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMedalManagement.CreateMedal
// 0x0008 (0x0008 - 0x0000)
struct MarinerMedalManagement_CreateMedal final
{
public:
	class UMarinerLocalMessage*                   MessageCDO;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMedalManagement_CreateMedal) == 0x000008, "Wrong alignment on MarinerMedalManagement_CreateMedal");
static_assert(sizeof(MarinerMedalManagement_CreateMedal) == 0x000008, "Wrong size on MarinerMedalManagement_CreateMedal");
static_assert(offsetof(MarinerMedalManagement_CreateMedal, MessageCDO) == 0x000000, "Member 'MarinerMedalManagement_CreateMedal::MessageCDO' has a wrong offset!");

// Function Mariner.MarinerRewardPreview.PopulateRewardPreview
// 0x0040 (0x0040 - 0x0000)
struct MarinerRewardPreview_PopulateRewardPreview final
{
public:
	struct FMangoReward                           Reward;                                            // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardPreview_PopulateRewardPreview) == 0x000008, "Wrong alignment on MarinerRewardPreview_PopulateRewardPreview");
static_assert(sizeof(MarinerRewardPreview_PopulateRewardPreview) == 0x000040, "Wrong size on MarinerRewardPreview_PopulateRewardPreview");
static_assert(offsetof(MarinerRewardPreview_PopulateRewardPreview, Reward) == 0x000000, "Member 'MarinerRewardPreview_PopulateRewardPreview::Reward' has a wrong offset!");

// Function Mariner.MarinerRewardPreview.PopulateUpcomingRewardPreview
// 0x0048 (0x0048 - 0x0000)
struct MarinerRewardPreview_PopulateUpcomingRewardPreview final
{
public:
	bool                                          bFeatured;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1963[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RewardLevel;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoReward                           Reward;                                            // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardPreview_PopulateUpcomingRewardPreview) == 0x000008, "Wrong alignment on MarinerRewardPreview_PopulateUpcomingRewardPreview");
static_assert(sizeof(MarinerRewardPreview_PopulateUpcomingRewardPreview) == 0x000048, "Wrong size on MarinerRewardPreview_PopulateUpcomingRewardPreview");
static_assert(offsetof(MarinerRewardPreview_PopulateUpcomingRewardPreview, bFeatured) == 0x000000, "Member 'MarinerRewardPreview_PopulateUpcomingRewardPreview::bFeatured' has a wrong offset!");
static_assert(offsetof(MarinerRewardPreview_PopulateUpcomingRewardPreview, RewardLevel) == 0x000004, "Member 'MarinerRewardPreview_PopulateUpcomingRewardPreview::RewardLevel' has a wrong offset!");
static_assert(offsetof(MarinerRewardPreview_PopulateUpcomingRewardPreview, Reward) == 0x000008, "Member 'MarinerRewardPreview_PopulateUpcomingRewardPreview::Reward' has a wrong offset!");

// Function Mariner.MarinerMediaPlayerWidget.MuteMovie
// 0x0001 (0x0001 - 0x0000)
struct MarinerMediaPlayerWidget_MuteMovie final
{
public:
	bool                                          bInMuted;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMediaPlayerWidget_MuteMovie) == 0x000001, "Wrong alignment on MarinerMediaPlayerWidget_MuteMovie");
static_assert(sizeof(MarinerMediaPlayerWidget_MuteMovie) == 0x000001, "Wrong size on MarinerMediaPlayerWidget_MuteMovie");
static_assert(offsetof(MarinerMediaPlayerWidget_MuteMovie, bInMuted) == 0x000000, "Member 'MarinerMediaPlayerWidget_MuteMovie::bInMuted' has a wrong offset!");

// Function Mariner.MarinerMediaPlayerWidget.OnMediaOpened
// 0x0010 (0x0010 - 0x0000)
struct MarinerMediaPlayerWidget_OnMediaOpened final
{
public:
	class FString                                 OpenedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMediaPlayerWidget_OnMediaOpened) == 0x000008, "Wrong alignment on MarinerMediaPlayerWidget_OnMediaOpened");
static_assert(sizeof(MarinerMediaPlayerWidget_OnMediaOpened) == 0x000010, "Wrong size on MarinerMediaPlayerWidget_OnMediaOpened");
static_assert(offsetof(MarinerMediaPlayerWidget_OnMediaOpened, OpenedUrl) == 0x000000, "Member 'MarinerMediaPlayerWidget_OnMediaOpened::OpenedUrl' has a wrong offset!");

// Function Mariner.MarinerMediaPlayerWidget.OnMediaOpenFailed
// 0x0010 (0x0010 - 0x0000)
struct MarinerMediaPlayerWidget_OnMediaOpenFailed final
{
public:
	class FString                                 FailedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMediaPlayerWidget_OnMediaOpenFailed) == 0x000008, "Wrong alignment on MarinerMediaPlayerWidget_OnMediaOpenFailed");
static_assert(sizeof(MarinerMediaPlayerWidget_OnMediaOpenFailed) == 0x000010, "Wrong size on MarinerMediaPlayerWidget_OnMediaOpenFailed");
static_assert(offsetof(MarinerMediaPlayerWidget_OnMediaOpenFailed, FailedUrl) == 0x000000, "Member 'MarinerMediaPlayerWidget_OnMediaOpenFailed::FailedUrl' has a wrong offset!");

// Function Mariner.MarinerMediaPlayerWidget.PauseMovie
// 0x0001 (0x0001 - 0x0000)
struct MarinerMediaPlayerWidget_PauseMovie final
{
public:
	bool                                          bInPaused;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMediaPlayerWidget_PauseMovie) == 0x000001, "Wrong alignment on MarinerMediaPlayerWidget_PauseMovie");
static_assert(sizeof(MarinerMediaPlayerWidget_PauseMovie) == 0x000001, "Wrong size on MarinerMediaPlayerWidget_PauseMovie");
static_assert(offsetof(MarinerMediaPlayerWidget_PauseMovie, bInPaused) == 0x000000, "Member 'MarinerMediaPlayerWidget_PauseMovie::bInPaused' has a wrong offset!");

// Function Mariner.MarinerMediaPlayerWidget.PlayMovie
// 0x0020 (0x0020 - 0x0000)
struct MarinerMediaPlayerWidget_PlayMovie final
{
public:
	class UMediaSource*                           MediaSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1966[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             MovieCompletedCallback;                            // 0x000C(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1967[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMediaPlayerWidget_PlayMovie) == 0x000008, "Wrong alignment on MarinerMediaPlayerWidget_PlayMovie");
static_assert(sizeof(MarinerMediaPlayerWidget_PlayMovie) == 0x000020, "Wrong size on MarinerMediaPlayerWidget_PlayMovie");
static_assert(offsetof(MarinerMediaPlayerWidget_PlayMovie, MediaSource) == 0x000000, "Member 'MarinerMediaPlayerWidget_PlayMovie::MediaSource' has a wrong offset!");
static_assert(offsetof(MarinerMediaPlayerWidget_PlayMovie, bLooping) == 0x000008, "Member 'MarinerMediaPlayerWidget_PlayMovie::bLooping' has a wrong offset!");
static_assert(offsetof(MarinerMediaPlayerWidget_PlayMovie, MovieCompletedCallback) == 0x00000C, "Member 'MarinerMediaPlayerWidget_PlayMovie::MovieCompletedCallback' has a wrong offset!");

// Function Mariner.MarinerMediaPlayerWidget.SetVolume
// 0x0004 (0x0004 - 0x0000)
struct MarinerMediaPlayerWidget_SetVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMediaPlayerWidget_SetVolume) == 0x000004, "Wrong alignment on MarinerMediaPlayerWidget_SetVolume");
static_assert(sizeof(MarinerMediaPlayerWidget_SetVolume) == 0x000004, "Wrong size on MarinerMediaPlayerWidget_SetVolume");
static_assert(offsetof(MarinerMediaPlayerWidget_SetVolume, InVolume) == 0x000000, "Member 'MarinerMediaPlayerWidget_SetVolume::InVolume' has a wrong offset!");

// Function Mariner.MarinerMediaPlayerWidget.IsMoviePaused
// 0x0001 (0x0001 - 0x0000)
struct MarinerMediaPlayerWidget_IsMoviePaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMediaPlayerWidget_IsMoviePaused) == 0x000001, "Wrong alignment on MarinerMediaPlayerWidget_IsMoviePaused");
static_assert(sizeof(MarinerMediaPlayerWidget_IsMoviePaused) == 0x000001, "Wrong size on MarinerMediaPlayerWidget_IsMoviePaused");
static_assert(offsetof(MarinerMediaPlayerWidget_IsMoviePaused, ReturnValue) == 0x000000, "Member 'MarinerMediaPlayerWidget_IsMoviePaused::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMediaPlayerWidget.IsMoviePlaying
// 0x0001 (0x0001 - 0x0000)
struct MarinerMediaPlayerWidget_IsMoviePlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMediaPlayerWidget_IsMoviePlaying) == 0x000001, "Wrong alignment on MarinerMediaPlayerWidget_IsMoviePlaying");
static_assert(sizeof(MarinerMediaPlayerWidget_IsMoviePlaying) == 0x000001, "Wrong size on MarinerMediaPlayerWidget_IsMoviePlaying");
static_assert(offsetof(MarinerMediaPlayerWidget_IsMoviePlaying, ReturnValue) == 0x000000, "Member 'MarinerMediaPlayerWidget_IsMoviePlaying::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuSequence.IsStepAllowed
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuSequence_IsStepAllowed final
{
public:
	TSubclassOf<class UMarinerMenuStackLayer>     Layer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_196E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuSequence_IsStepAllowed) == 0x000008, "Wrong alignment on MarinerMenuSequence_IsStepAllowed");
static_assert(sizeof(MarinerMenuSequence_IsStepAllowed) == 0x000010, "Wrong size on MarinerMenuSequence_IsStepAllowed");
static_assert(offsetof(MarinerMenuSequence_IsStepAllowed, Layer) == 0x000000, "Member 'MarinerMenuSequence_IsStepAllowed::Layer' has a wrong offset!");
static_assert(offsetof(MarinerMenuSequence_IsStepAllowed, ReturnValue) == 0x000008, "Member 'MarinerMenuSequence_IsStepAllowed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuSequence.OnContentLayerStateChange
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuSequence_OnContentLayerStateChange final
{
public:
	class UMarinerAnimatedWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetAnimationState                         NewState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_196F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuSequence_OnContentLayerStateChange) == 0x000008, "Wrong alignment on MarinerMenuSequence_OnContentLayerStateChange");
static_assert(sizeof(MarinerMenuSequence_OnContentLayerStateChange) == 0x000010, "Wrong size on MarinerMenuSequence_OnContentLayerStateChange");
static_assert(offsetof(MarinerMenuSequence_OnContentLayerStateChange, Widget) == 0x000000, "Member 'MarinerMenuSequence_OnContentLayerStateChange::Widget' has a wrong offset!");
static_assert(offsetof(MarinerMenuSequence_OnContentLayerStateChange, NewState) == 0x000008, "Member 'MarinerMenuSequence_OnContentLayerStateChange::NewState' has a wrong offset!");

// Function Mariner.MarinerMenuSequence.OnPopulateContentLayer
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuSequence_OnPopulateContentLayer final
{
public:
	class UMarinerAnimatedWidget*                 Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1970[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuSequence_OnPopulateContentLayer) == 0x000008, "Wrong alignment on MarinerMenuSequence_OnPopulateContentLayer");
static_assert(sizeof(MarinerMenuSequence_OnPopulateContentLayer) == 0x000010, "Wrong size on MarinerMenuSequence_OnPopulateContentLayer");
static_assert(offsetof(MarinerMenuSequence_OnPopulateContentLayer, Widget) == 0x000000, "Member 'MarinerMenuSequence_OnPopulateContentLayer::Widget' has a wrong offset!");
static_assert(offsetof(MarinerMenuSequence_OnPopulateContentLayer, ReturnValue) == 0x000008, "Member 'MarinerMenuSequence_OnPopulateContentLayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuSequence.OnStepReached
// 0x0008 (0x0008 - 0x0000)
struct MarinerMenuSequence_OnStepReached final
{
public:
	TSubclassOf<class UMarinerMenuStackLayer>     Layer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuSequence_OnStepReached) == 0x000008, "Wrong alignment on MarinerMenuSequence_OnStepReached");
static_assert(sizeof(MarinerMenuSequence_OnStepReached) == 0x000008, "Wrong size on MarinerMenuSequence_OnStepReached");
static_assert(offsetof(MarinerMenuSequence_OnStepReached, Layer) == 0x000000, "Member 'MarinerMenuSequence_OnStepReached::Layer' has a wrong offset!");

// Function Mariner.MarinerMenuSequence.GetActiveStep
// 0x0008 (0x0008 - 0x0000)
struct MarinerMenuSequence_GetActiveStep final
{
public:
	TSubclassOf<class UMarinerMenuStackLayer>     ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuSequence_GetActiveStep) == 0x000008, "Wrong alignment on MarinerMenuSequence_GetActiveStep");
static_assert(sizeof(MarinerMenuSequence_GetActiveStep) == 0x000008, "Wrong size on MarinerMenuSequence_GetActiveStep");
static_assert(offsetof(MarinerMenuSequence_GetActiveStep, ReturnValue) == 0x000000, "Member 'MarinerMenuSequence_GetActiveStep::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuSequence.GetAssets
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuSequence_GetAssets final
{
public:
	struct FMarinerMenuSequenceAssets             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuSequence_GetAssets) == 0x000008, "Wrong alignment on MarinerMenuSequence_GetAssets");
static_assert(sizeof(MarinerMenuSequence_GetAssets) == 0x000010, "Wrong size on MarinerMenuSequence_GetAssets");
static_assert(offsetof(MarinerMenuSequence_GetAssets, ReturnValue) == 0x000000, "Member 'MarinerMenuSequence_GetAssets::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPrivateMatchMenu.OnLeavePrivateMatchConfirm
// 0x0018 (0x0018 - 0x0000)
struct MarinerPrivateMatchMenu_OnLeavePrivateMatchConfirm final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPrivateMatchMenu_OnLeavePrivateMatchConfirm) == 0x000008, "Wrong alignment on MarinerPrivateMatchMenu_OnLeavePrivateMatchConfirm");
static_assert(sizeof(MarinerPrivateMatchMenu_OnLeavePrivateMatchConfirm) == 0x000018, "Wrong size on MarinerPrivateMatchMenu_OnLeavePrivateMatchConfirm");
static_assert(offsetof(MarinerPrivateMatchMenu_OnLeavePrivateMatchConfirm, KeyPressed) == 0x000000, "Member 'MarinerPrivateMatchMenu_OnLeavePrivateMatchConfirm::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerPrivateMatchMenu.OnStartSelected
// 0x0008 (0x0008 - 0x0000)
struct MarinerPrivateMatchMenu_OnStartSelected final
{
public:
	class UMarinerLayeredButton*                  Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPrivateMatchMenu_OnStartSelected) == 0x000008, "Wrong alignment on MarinerPrivateMatchMenu_OnStartSelected");
static_assert(sizeof(MarinerPrivateMatchMenu_OnStartSelected) == 0x000008, "Wrong size on MarinerPrivateMatchMenu_OnStartSelected");
static_assert(offsetof(MarinerPrivateMatchMenu_OnStartSelected, Button) == 0x000000, "Member 'MarinerPrivateMatchMenu_OnStartSelected::Button' has a wrong offset!");

// Function Mariner.MarinerMenuStackBaseWidget.GetStackManager
// 0x0008 (0x0008 - 0x0000)
struct MarinerMenuStackBaseWidget_GetStackManager final
{
public:
	class UMarinerMenuStackManager*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackBaseWidget_GetStackManager) == 0x000008, "Wrong alignment on MarinerMenuStackBaseWidget_GetStackManager");
static_assert(sizeof(MarinerMenuStackBaseWidget_GetStackManager) == 0x000008, "Wrong size on MarinerMenuStackBaseWidget_GetStackManager");
static_assert(offsetof(MarinerMenuStackBaseWidget_GetStackManager, ReturnValue) == 0x000000, "Member 'MarinerMenuStackBaseWidget_GetStackManager::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackBaseWidget.GetCustomBackPrompt
// 0x0120 (0x0120 - 0x0000)
struct MarinerMenuStackBaseWidget_GetCustomBackPrompt final
{
public:
	struct FMarinerPromptData                     OutPrompt;                                         // 0x0000(0x0118)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1974[0x7];                                     // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMenuStackBaseWidget_GetCustomBackPrompt) == 0x000008, "Wrong alignment on MarinerMenuStackBaseWidget_GetCustomBackPrompt");
static_assert(sizeof(MarinerMenuStackBaseWidget_GetCustomBackPrompt) == 0x000120, "Wrong size on MarinerMenuStackBaseWidget_GetCustomBackPrompt");
static_assert(offsetof(MarinerMenuStackBaseWidget_GetCustomBackPrompt, OutPrompt) == 0x000000, "Member 'MarinerMenuStackBaseWidget_GetCustomBackPrompt::OutPrompt' has a wrong offset!");
static_assert(offsetof(MarinerMenuStackBaseWidget_GetCustomBackPrompt, ReturnValue) == 0x000118, "Member 'MarinerMenuStackBaseWidget_GetCustomBackPrompt::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuStackBaseWidget.GetWidgetSetup
// 0x0010 (0x0010 - 0x0000)
struct MarinerMenuStackBaseWidget_GetWidgetSetup final
{
public:
	struct FMarinerMenuStackBaseWidgetSetup       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuStackBaseWidget_GetWidgetSetup) == 0x000008, "Wrong alignment on MarinerMenuStackBaseWidget_GetWidgetSetup");
static_assert(sizeof(MarinerMenuStackBaseWidget_GetWidgetSetup) == 0x000010, "Wrong size on MarinerMenuStackBaseWidget_GetWidgetSetup");
static_assert(offsetof(MarinerMenuStackBaseWidget_GetWidgetSetup, ReturnValue) == 0x000000, "Member 'MarinerMenuStackBaseWidget_GetWidgetSetup::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMenuTooltipWidget.EnableHeader
// 0x0001 (0x0001 - 0x0000)
struct MarinerMenuTooltipWidget_EnableHeader final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuTooltipWidget_EnableHeader) == 0x000001, "Wrong alignment on MarinerMenuTooltipWidget_EnableHeader");
static_assert(sizeof(MarinerMenuTooltipWidget_EnableHeader) == 0x000001, "Wrong size on MarinerMenuTooltipWidget_EnableHeader");
static_assert(offsetof(MarinerMenuTooltipWidget_EnableHeader, bEnabled) == 0x000000, "Member 'MarinerMenuTooltipWidget_EnableHeader::bEnabled' has a wrong offset!");

// Function Mariner.MarinerMenuTooltipWidget.Populate
// 0x0018 (0x0018 - 0x0000)
struct MarinerMenuTooltipWidget_Populate final
{
public:
	class FText                                   InDescription;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMenuTooltipWidget_Populate) == 0x000008, "Wrong alignment on MarinerMenuTooltipWidget_Populate");
static_assert(sizeof(MarinerMenuTooltipWidget_Populate) == 0x000018, "Wrong size on MarinerMenuTooltipWidget_Populate");
static_assert(offsetof(MarinerMenuTooltipWidget_Populate, InDescription) == 0x000000, "Member 'MarinerMenuTooltipWidget_Populate::InDescription' has a wrong offset!");

// Function Mariner.MarinerMessageBox.GetData
// 0x0170 (0x0170 - 0x0000)
struct MarinerMessageBox_GetData final
{
public:
	struct FMarinerMessageBoxData                 ReturnValue;                                       // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMessageBox_GetData) == 0x000008, "Wrong alignment on MarinerMessageBox_GetData");
static_assert(sizeof(MarinerMessageBox_GetData) == 0x000170, "Wrong size on MarinerMessageBox_GetData");
static_assert(offsetof(MarinerMessageBox_GetData, ReturnValue) == 0x000000, "Member 'MarinerMessageBox_GetData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSingleAnimationWidget.PlaySingleAnimation
// 0x0014 (0x0014 - 0x0000)
struct MarinerSingleAnimationWidget_PlaySingleAnimation final
{
public:
	bool                                          bPlayOnce;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoreState;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1977[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UMarinerSingleAnimationWidget* Instance)> OnCompletedEvent;                                  // 0x0004(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSingleAnimationWidget_PlaySingleAnimation) == 0x000004, "Wrong alignment on MarinerSingleAnimationWidget_PlaySingleAnimation");
static_assert(sizeof(MarinerSingleAnimationWidget_PlaySingleAnimation) == 0x000014, "Wrong size on MarinerSingleAnimationWidget_PlaySingleAnimation");
static_assert(offsetof(MarinerSingleAnimationWidget_PlaySingleAnimation, bPlayOnce) == 0x000000, "Member 'MarinerSingleAnimationWidget_PlaySingleAnimation::bPlayOnce' has a wrong offset!");
static_assert(offsetof(MarinerSingleAnimationWidget_PlaySingleAnimation, bRestoreState) == 0x000001, "Member 'MarinerSingleAnimationWidget_PlaySingleAnimation::bRestoreState' has a wrong offset!");
static_assert(offsetof(MarinerSingleAnimationWidget_PlaySingleAnimation, OnCompletedEvent) == 0x000004, "Member 'MarinerSingleAnimationWidget_PlaySingleAnimation::OnCompletedEvent' has a wrong offset!");

// Function Mariner.MarinerSingleAnimationWidget.IsSingleAnimationPlaying
// 0x0001 (0x0001 - 0x0000)
struct MarinerSingleAnimationWidget_IsSingleAnimationPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSingleAnimationWidget_IsSingleAnimationPlaying) == 0x000001, "Wrong alignment on MarinerSingleAnimationWidget_IsSingleAnimationPlaying");
static_assert(sizeof(MarinerSingleAnimationWidget_IsSingleAnimationPlaying) == 0x000001, "Wrong size on MarinerSingleAnimationWidget_IsSingleAnimationPlaying");
static_assert(offsetof(MarinerSingleAnimationWidget_IsSingleAnimationPlaying, ReturnValue) == 0x000000, "Member 'MarinerSingleAnimationWidget_IsSingleAnimationPlaying::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeDataAsset.GetHostCanEditBots
// 0x0001 (0x0001 - 0x0000)
struct MarinerModeDataAsset_GetHostCanEditBots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeDataAsset_GetHostCanEditBots) == 0x000001, "Wrong alignment on MarinerModeDataAsset_GetHostCanEditBots");
static_assert(sizeof(MarinerModeDataAsset_GetHostCanEditBots) == 0x000001, "Wrong size on MarinerModeDataAsset_GetHostCanEditBots");
static_assert(offsetof(MarinerModeDataAsset_GetHostCanEditBots, ReturnValue) == 0x000000, "Member 'MarinerModeDataAsset_GetHostCanEditBots::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeDataAsset.GetIcon
// 0x0088 (0x0088 - 0x0000)
struct MarinerModeDataAsset_GetIcon final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeDataAsset_GetIcon) == 0x000008, "Wrong alignment on MarinerModeDataAsset_GetIcon");
static_assert(sizeof(MarinerModeDataAsset_GetIcon) == 0x000088, "Wrong size on MarinerModeDataAsset_GetIcon");
static_assert(offsetof(MarinerModeDataAsset_GetIcon, ReturnValue) == 0x000000, "Member 'MarinerModeDataAsset_GetIcon::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeDataAsset.GetLinkedGameMode
// 0x0001 (0x0001 - 0x0000)
struct MarinerModeDataAsset_GetLinkedGameMode final
{
public:
	EMarinerGameMode                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeDataAsset_GetLinkedGameMode) == 0x000001, "Wrong alignment on MarinerModeDataAsset_GetLinkedGameMode");
static_assert(sizeof(MarinerModeDataAsset_GetLinkedGameMode) == 0x000001, "Wrong size on MarinerModeDataAsset_GetLinkedGameMode");
static_assert(offsetof(MarinerModeDataAsset_GetLinkedGameMode, ReturnValue) == 0x000000, "Member 'MarinerModeDataAsset_GetLinkedGameMode::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeDataAsset.GetModeSupportFlags
// 0x0004 (0x0004 - 0x0000)
struct MarinerModeDataAsset_GetModeSupportFlags final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeDataAsset_GetModeSupportFlags) == 0x000004, "Wrong alignment on MarinerModeDataAsset_GetModeSupportFlags");
static_assert(sizeof(MarinerModeDataAsset_GetModeSupportFlags) == 0x000004, "Wrong size on MarinerModeDataAsset_GetModeSupportFlags");
static_assert(offsetof(MarinerModeDataAsset_GetModeSupportFlags, ReturnValue) == 0x000000, "Member 'MarinerModeDataAsset_GetModeSupportFlags::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeDataAsset.GetPostGameStats
// 0x0050 (0x0050 - 0x0000)
struct MarinerModeDataAsset_GetPostGameStats final
{
public:
	TMap<class FName, class FText>                ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeDataAsset_GetPostGameStats) == 0x000008, "Wrong alignment on MarinerModeDataAsset_GetPostGameStats");
static_assert(sizeof(MarinerModeDataAsset_GetPostGameStats) == 0x000050, "Wrong size on MarinerModeDataAsset_GetPostGameStats");
static_assert(offsetof(MarinerModeDataAsset_GetPostGameStats, ReturnValue) == 0x000000, "Member 'MarinerModeDataAsset_GetPostGameStats::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeDataAsset.GetPreviewImage
// 0x0088 (0x0088 - 0x0000)
struct MarinerModeDataAsset_GetPreviewImage final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeDataAsset_GetPreviewImage) == 0x000008, "Wrong alignment on MarinerModeDataAsset_GetPreviewImage");
static_assert(sizeof(MarinerModeDataAsset_GetPreviewImage) == 0x000088, "Wrong size on MarinerModeDataAsset_GetPreviewImage");
static_assert(offsetof(MarinerModeDataAsset_GetPreviewImage, ReturnValue) == 0x000000, "Member 'MarinerModeDataAsset_GetPreviewImage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeDataAsset.GetPrivateMatchMaxPartySize
// 0x0004 (0x0004 - 0x0000)
struct MarinerModeDataAsset_GetPrivateMatchMaxPartySize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeDataAsset_GetPrivateMatchMaxPartySize) == 0x000004, "Wrong alignment on MarinerModeDataAsset_GetPrivateMatchMaxPartySize");
static_assert(sizeof(MarinerModeDataAsset_GetPrivateMatchMaxPartySize) == 0x000004, "Wrong size on MarinerModeDataAsset_GetPrivateMatchMaxPartySize");
static_assert(offsetof(MarinerModeDataAsset_GetPrivateMatchMaxPartySize, ReturnValue) == 0x000000, "Member 'MarinerModeDataAsset_GetPrivateMatchMaxPartySize::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeDataAsset.GetScoreboardStats
// 0x0050 (0x0050 - 0x0000)
struct MarinerModeDataAsset_GetScoreboardStats final
{
public:
	TMap<class FName, class FText>                ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeDataAsset_GetScoreboardStats) == 0x000008, "Wrong alignment on MarinerModeDataAsset_GetScoreboardStats");
static_assert(sizeof(MarinerModeDataAsset_GetScoreboardStats) == 0x000050, "Wrong size on MarinerModeDataAsset_GetScoreboardStats");
static_assert(offsetof(MarinerModeDataAsset_GetScoreboardStats, ReturnValue) == 0x000000, "Member 'MarinerModeDataAsset_GetScoreboardStats::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeDataAsset.GetSupportsBots
// 0x0001 (0x0001 - 0x0000)
struct MarinerModeDataAsset_GetSupportsBots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeDataAsset_GetSupportsBots) == 0x000001, "Wrong alignment on MarinerModeDataAsset_GetSupportsBots");
static_assert(sizeof(MarinerModeDataAsset_GetSupportsBots) == 0x000001, "Wrong size on MarinerModeDataAsset_GetSupportsBots");
static_assert(offsetof(MarinerModeDataAsset_GetSupportsBots, ReturnValue) == 0x000000, "Member 'MarinerModeDataAsset_GetSupportsBots::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerModeDataAsset.GetSupportsTeams
// 0x0001 (0x0001 - 0x0000)
struct MarinerModeDataAsset_GetSupportsTeams final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerModeDataAsset_GetSupportsTeams) == 0x000001, "Wrong alignment on MarinerModeDataAsset_GetSupportsTeams");
static_assert(sizeof(MarinerModeDataAsset_GetSupportsTeams) == 0x000001, "Wrong size on MarinerModeDataAsset_GetSupportsTeams");
static_assert(offsetof(MarinerModeDataAsset_GetSupportsTeams, ReturnValue) == 0x000000, "Member 'MarinerModeDataAsset_GetSupportsTeams::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSpringArmComponent.ApplyCameraLagPropertiesOverride
// 0x0014 (0x0014 - 0x0000)
struct MarinerSpringArmComponent_ApplyCameraLagPropertiesOverride final
{
public:
	struct FMarinerSpringArmCameraLagProperties   CameraLagProperties;                               // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSpringArmComponent_ApplyCameraLagPropertiesOverride) == 0x000004, "Wrong alignment on MarinerSpringArmComponent_ApplyCameraLagPropertiesOverride");
static_assert(sizeof(MarinerSpringArmComponent_ApplyCameraLagPropertiesOverride) == 0x000014, "Wrong size on MarinerSpringArmComponent_ApplyCameraLagPropertiesOverride");
static_assert(offsetof(MarinerSpringArmComponent_ApplyCameraLagPropertiesOverride, CameraLagProperties) == 0x000000, "Member 'MarinerSpringArmComponent_ApplyCameraLagPropertiesOverride::CameraLagProperties' has a wrong offset!");

// Function Mariner.MarinerSpringArmComponent.ServerUpdateProjectileSpawnLocation_Internal
// 0x000C (0x000C - 0x0000)
struct MarinerSpringArmComponent_ServerUpdateProjectileSpawnLocation_Internal final
{
public:
	struct FVector_NetQuantize                    Location;                                          // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSpringArmComponent_ServerUpdateProjectileSpawnLocation_Internal) == 0x000004, "Wrong alignment on MarinerSpringArmComponent_ServerUpdateProjectileSpawnLocation_Internal");
static_assert(sizeof(MarinerSpringArmComponent_ServerUpdateProjectileSpawnLocation_Internal) == 0x00000C, "Wrong size on MarinerSpringArmComponent_ServerUpdateProjectileSpawnLocation_Internal");
static_assert(offsetof(MarinerSpringArmComponent_ServerUpdateProjectileSpawnLocation_Internal, Location) == 0x000000, "Member 'MarinerSpringArmComponent_ServerUpdateProjectileSpawnLocation_Internal::Location' has a wrong offset!");

// Function Mariner.MarinerSpringArmComponent.SetLockedSocketTargetLocation
// 0x000C (0x000C - 0x0000)
struct MarinerSpringArmComponent_SetLockedSocketTargetLocation final
{
public:
	struct FVector                                LockedWorldLocation;                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSpringArmComponent_SetLockedSocketTargetLocation) == 0x000004, "Wrong alignment on MarinerSpringArmComponent_SetLockedSocketTargetLocation");
static_assert(sizeof(MarinerSpringArmComponent_SetLockedSocketTargetLocation) == 0x00000C, "Wrong size on MarinerSpringArmComponent_SetLockedSocketTargetLocation");
static_assert(offsetof(MarinerSpringArmComponent_SetLockedSocketTargetLocation, LockedWorldLocation) == 0x000000, "Member 'MarinerSpringArmComponent_SetLockedSocketTargetLocation::LockedWorldLocation' has a wrong offset!");

// Function Mariner.MarinerSpringArmComponent.SetTargetArmLengthOverride
// 0x0004 (0x0004 - 0x0000)
struct MarinerSpringArmComponent_SetTargetArmLengthOverride final
{
public:
	float                                         NewTargetArmLength;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSpringArmComponent_SetTargetArmLengthOverride) == 0x000004, "Wrong alignment on MarinerSpringArmComponent_SetTargetArmLengthOverride");
static_assert(sizeof(MarinerSpringArmComponent_SetTargetArmLengthOverride) == 0x000004, "Wrong size on MarinerSpringArmComponent_SetTargetArmLengthOverride");
static_assert(offsetof(MarinerSpringArmComponent_SetTargetArmLengthOverride, NewTargetArmLength) == 0x000000, "Member 'MarinerSpringArmComponent_SetTargetArmLengthOverride::NewTargetArmLength' has a wrong offset!");

// Function Mariner.MarinerSpringArmComponent.GetProjectileSpawnLocation
// 0x000C (0x000C - 0x0000)
struct MarinerSpringArmComponent_GetProjectileSpawnLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSpringArmComponent_GetProjectileSpawnLocation) == 0x000004, "Wrong alignment on MarinerSpringArmComponent_GetProjectileSpawnLocation");
static_assert(sizeof(MarinerSpringArmComponent_GetProjectileSpawnLocation) == 0x00000C, "Wrong size on MarinerSpringArmComponent_GetProjectileSpawnLocation");
static_assert(offsetof(MarinerSpringArmComponent_GetProjectileSpawnLocation, ReturnValue) == 0x000000, "Member 'MarinerSpringArmComponent_GetProjectileSpawnLocation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMontageListenerInterface.OnMontageBlendingOutStarted
// 0x0010 (0x0010 - 0x0000)
struct MarinerMontageListenerInterface_OnMontageBlendingOutStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_197E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMontageListenerInterface_OnMontageBlendingOutStarted) == 0x000008, "Wrong alignment on MarinerMontageListenerInterface_OnMontageBlendingOutStarted");
static_assert(sizeof(MarinerMontageListenerInterface_OnMontageBlendingOutStarted) == 0x000010, "Wrong size on MarinerMontageListenerInterface_OnMontageBlendingOutStarted");
static_assert(offsetof(MarinerMontageListenerInterface_OnMontageBlendingOutStarted, Montage) == 0x000000, "Member 'MarinerMontageListenerInterface_OnMontageBlendingOutStarted::Montage' has a wrong offset!");
static_assert(offsetof(MarinerMontageListenerInterface_OnMontageBlendingOutStarted, bInterrupted) == 0x000008, "Member 'MarinerMontageListenerInterface_OnMontageBlendingOutStarted::bInterrupted' has a wrong offset!");

// Function Mariner.MarinerMontageListenerInterface.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct MarinerMontageListenerInterface_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_197F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMontageListenerInterface_OnMontageEnded) == 0x000008, "Wrong alignment on MarinerMontageListenerInterface_OnMontageEnded");
static_assert(sizeof(MarinerMontageListenerInterface_OnMontageEnded) == 0x000010, "Wrong size on MarinerMontageListenerInterface_OnMontageEnded");
static_assert(offsetof(MarinerMontageListenerInterface_OnMontageEnded, Montage) == 0x000000, "Member 'MarinerMontageListenerInterface_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(MarinerMontageListenerInterface_OnMontageEnded, bInterrupted) == 0x000008, "Member 'MarinerMontageListenerInterface_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function Mariner.MarinerMontageListenerInterface.OnMontageStarted
// 0x0008 (0x0008 - 0x0000)
struct MarinerMontageListenerInterface_OnMontageStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMontageListenerInterface_OnMontageStarted) == 0x000008, "Wrong alignment on MarinerMontageListenerInterface_OnMontageStarted");
static_assert(sizeof(MarinerMontageListenerInterface_OnMontageStarted) == 0x000008, "Wrong size on MarinerMontageListenerInterface_OnMontageStarted");
static_assert(offsetof(MarinerMontageListenerInterface_OnMontageStarted, Montage) == 0x000000, "Member 'MarinerMontageListenerInterface_OnMontageStarted::Montage' has a wrong offset!");

// Function Mariner.MarinerMoveUpdate_TeleportDefaults.IsPendingTeleport
// 0x0010 (0x0010 - 0x0000)
struct MarinerMoveUpdate_TeleportDefaults_IsPendingTeleport final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1981[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMoveUpdate_TeleportDefaults_IsPendingTeleport) == 0x000008, "Wrong alignment on MarinerMoveUpdate_TeleportDefaults_IsPendingTeleport");
static_assert(sizeof(MarinerMoveUpdate_TeleportDefaults_IsPendingTeleport) == 0x000010, "Wrong size on MarinerMoveUpdate_TeleportDefaults_IsPendingTeleport");
static_assert(offsetof(MarinerMoveUpdate_TeleportDefaults_IsPendingTeleport, Character) == 0x000000, "Member 'MarinerMoveUpdate_TeleportDefaults_IsPendingTeleport::Character' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_TeleportDefaults_IsPendingTeleport, ReturnValue) == 0x000008, "Member 'MarinerMoveUpdate_TeleportDefaults_IsPendingTeleport::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMoveUpdate_TeleportDefaults.RequestTeleport
// 0x0028 (0x0028 - 0x0000)
struct MarinerMoveUpdate_TeleportDefaults_RequestTeleport final
{
public:
	class UMarinerCharacterMovement*              OwningMovementComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerMoveUpdate_TeleportDefaults> Defaults;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        TeleportLocations;                                 // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         OverrideMaxSpeedClamp;                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideResetJumps;                               // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRejectTeleportRequestIfHoldingPriorityItem;       // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerTeleportRequestResponse               ReturnValue;                                       // 0x0026(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1982[0x1];                                     // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMoveUpdate_TeleportDefaults_RequestTeleport) == 0x000008, "Wrong alignment on MarinerMoveUpdate_TeleportDefaults_RequestTeleport");
static_assert(sizeof(MarinerMoveUpdate_TeleportDefaults_RequestTeleport) == 0x000028, "Wrong size on MarinerMoveUpdate_TeleportDefaults_RequestTeleport");
static_assert(offsetof(MarinerMoveUpdate_TeleportDefaults_RequestTeleport, OwningMovementComponent) == 0x000000, "Member 'MarinerMoveUpdate_TeleportDefaults_RequestTeleport::OwningMovementComponent' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_TeleportDefaults_RequestTeleport, Defaults) == 0x000008, "Member 'MarinerMoveUpdate_TeleportDefaults_RequestTeleport::Defaults' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_TeleportDefaults_RequestTeleport, TeleportLocations) == 0x000010, "Member 'MarinerMoveUpdate_TeleportDefaults_RequestTeleport::TeleportLocations' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_TeleportDefaults_RequestTeleport, OverrideMaxSpeedClamp) == 0x000020, "Member 'MarinerMoveUpdate_TeleportDefaults_RequestTeleport::OverrideMaxSpeedClamp' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_TeleportDefaults_RequestTeleport, bOverrideResetJumps) == 0x000024, "Member 'MarinerMoveUpdate_TeleportDefaults_RequestTeleport::bOverrideResetJumps' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_TeleportDefaults_RequestTeleport, bRejectTeleportRequestIfHoldingPriorityItem) == 0x000025, "Member 'MarinerMoveUpdate_TeleportDefaults_RequestTeleport::bRejectTeleportRequestIfHoldingPriorityItem' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_TeleportDefaults_RequestTeleport, ReturnValue) == 0x000026, "Member 'MarinerMoveUpdate_TeleportDefaults_RequestTeleport::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerMoveUpdate_SwapActiveMeshDefaults.ApplyActiveMeshSwap
// 0x0028 (0x0028 - 0x0000)
struct MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap final
{
public:
	class UMarinerCharacterMovement*              OwningMovementComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerMoveUpdate_SwapActiveMeshDefaults> Defaults;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         MeshToSwapTo;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerChangeMeshEnum                        OverrideMeshTypeToSwap;                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1985[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideDelayBetweenSwap;                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideForcePerspective;                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1986[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap) == 0x000008, "Wrong alignment on MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap");
static_assert(sizeof(MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap) == 0x000028, "Wrong size on MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap");
static_assert(offsetof(MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap, OwningMovementComponent) == 0x000000, "Member 'MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap::OwningMovementComponent' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap, Defaults) == 0x000008, "Member 'MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap::Defaults' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap, MeshToSwapTo) == 0x000010, "Member 'MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap::MeshToSwapTo' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap, OverrideMeshTypeToSwap) == 0x000018, "Member 'MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap::OverrideMeshTypeToSwap' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap, OverrideDelayBetweenSwap) == 0x00001C, "Member 'MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap::OverrideDelayBetweenSwap' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap, bOverrideForcePerspective) == 0x000020, "Member 'MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap::bOverrideForcePerspective' has a wrong offset!");

// Function Mariner.MarinerMoveUpdate_SwapActiveMeshDefaults.RevertActiveMeshSwap
// 0x0028 (0x0028 - 0x0000)
struct MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap final
{
public:
	class UMarinerCharacterMovement*              OwningMovementComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerMoveUpdate_SwapActiveMeshDefaults> Defaults;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         MeshToSwapTo;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerChangeMeshEnum                        OverrideMeshTypeToSwap;                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1987[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideDelayBetweenSwap;                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideForcePerspective;                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1988[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap) == 0x000008, "Wrong alignment on MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap");
static_assert(sizeof(MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap) == 0x000028, "Wrong size on MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap");
static_assert(offsetof(MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap, OwningMovementComponent) == 0x000000, "Member 'MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap::OwningMovementComponent' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap, Defaults) == 0x000008, "Member 'MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap::Defaults' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap, MeshToSwapTo) == 0x000010, "Member 'MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap::MeshToSwapTo' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap, OverrideMeshTypeToSwap) == 0x000018, "Member 'MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap::OverrideMeshTypeToSwap' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap, OverrideDelayBetweenSwap) == 0x00001C, "Member 'MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap::OverrideDelayBetweenSwap' has a wrong offset!");
static_assert(offsetof(MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap, bOverrideForcePerspective) == 0x000020, "Member 'MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap::bOverrideForcePerspective' has a wrong offset!");

// Function Mariner.MarinerSubtitleManager.OnAudioEvent
// 0x0010 (0x0010 - 0x0000)
struct MarinerSubtitleManager_OnAudioEvent final
{
public:
	EAkCallbackType                               In_eType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_198B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        In_pCallbackInfo;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSubtitleManager_OnAudioEvent) == 0x000008, "Wrong alignment on MarinerSubtitleManager_OnAudioEvent");
static_assert(sizeof(MarinerSubtitleManager_OnAudioEvent) == 0x000010, "Wrong size on MarinerSubtitleManager_OnAudioEvent");
static_assert(offsetof(MarinerSubtitleManager_OnAudioEvent, In_eType) == 0x000000, "Member 'MarinerSubtitleManager_OnAudioEvent::In_eType' has a wrong offset!");
static_assert(offsetof(MarinerSubtitleManager_OnAudioEvent, In_pCallbackInfo) == 0x000008, "Member 'MarinerSubtitleManager_OnAudioEvent::In_pCallbackInfo' has a wrong offset!");

// Function Mariner.MarinerSubtitleManager.OnVoiceChatTextMessageReceived
// 0x0020 (0x0020 - 0x0000)
struct MarinerSubtitleManager_OnVoiceChatTextMessageReceived final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSubtitleManager_OnVoiceChatTextMessageReceived) == 0x000008, "Wrong alignment on MarinerSubtitleManager_OnVoiceChatTextMessageReceived");
static_assert(sizeof(MarinerSubtitleManager_OnVoiceChatTextMessageReceived) == 0x000020, "Wrong size on MarinerSubtitleManager_OnVoiceChatTextMessageReceived");
static_assert(offsetof(MarinerSubtitleManager_OnVoiceChatTextMessageReceived, UserId) == 0x000000, "Member 'MarinerSubtitleManager_OnVoiceChatTextMessageReceived::UserId' has a wrong offset!");
static_assert(offsetof(MarinerSubtitleManager_OnVoiceChatTextMessageReceived, Message) == 0x000010, "Member 'MarinerSubtitleManager_OnVoiceChatTextMessageReceived::Message' has a wrong offset!");

// Function Mariner.MarinerNativePurchaseMessageBox.GetData
// 0x01A0 (0x01A0 - 0x0000)
struct MarinerNativePurchaseMessageBox_GetData final
{
public:
	struct FMarinerMessageBoxNativePurchaseData   ReturnValue;                                       // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerNativePurchaseMessageBox_GetData) == 0x000008, "Wrong alignment on MarinerNativePurchaseMessageBox_GetData");
static_assert(sizeof(MarinerNativePurchaseMessageBox_GetData) == 0x0001A0, "Wrong size on MarinerNativePurchaseMessageBox_GetData");
static_assert(offsetof(MarinerNativePurchaseMessageBox_GetData, ReturnValue) == 0x000000, "Member 'MarinerNativePurchaseMessageBox_GetData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_DeflectProjectile.DeflectProjectile
// 0x00F0 (0x00F0 - 0x0000)
struct MarinerTask_DeflectProjectile_DeflectProjectile final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ProjectileDetectionComponent;                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepResult;                                       // 0x0018(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 OverlappedActor;                                   // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AMarinerProjectile>> ProjectileIgnoreTypeList;                          // 0x00A8(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AMarinerItem>>       ItemIgnoreTypeList;                                // 0x00B8(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bUseAimAssist;                                     // 0x00C8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_198F[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDeflectAngle;                                   // 0x00CC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimAssistConeAngle;                                // 0x00D0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpawnLocationTowardsCenterRatio;               // 0x00D4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnBufferDistance;                               // 0x00D8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleVersusDistanceAimAssistRatio;                 // 0x00DC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimAssistScoreAngleMax;                            // 0x00E0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimAssistScoreDistanceMax;                         // 0x00E4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerTask_DeflectProjectile*         ReturnValue;                                       // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_DeflectProjectile_DeflectProjectile) == 0x000008, "Wrong alignment on MarinerTask_DeflectProjectile_DeflectProjectile");
static_assert(sizeof(MarinerTask_DeflectProjectile_DeflectProjectile) == 0x0000F0, "Wrong size on MarinerTask_DeflectProjectile_DeflectProjectile");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, OwningAbility) == 0x000000, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, TaskInstanceName) == 0x000008, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, ProjectileDetectionComponent) == 0x000010, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::ProjectileDetectionComponent' has a wrong offset!");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, SweepResult) == 0x000018, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::SweepResult' has a wrong offset!");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, OverlappedActor) == 0x0000A0, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::OverlappedActor' has a wrong offset!");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, ProjectileIgnoreTypeList) == 0x0000A8, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::ProjectileIgnoreTypeList' has a wrong offset!");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, ItemIgnoreTypeList) == 0x0000B8, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::ItemIgnoreTypeList' has a wrong offset!");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, bUseAimAssist) == 0x0000C8, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::bUseAimAssist' has a wrong offset!");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, MaxDeflectAngle) == 0x0000CC, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::MaxDeflectAngle' has a wrong offset!");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, AimAssistConeAngle) == 0x0000D0, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::AimAssistConeAngle' has a wrong offset!");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, MoveSpawnLocationTowardsCenterRatio) == 0x0000D4, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::MoveSpawnLocationTowardsCenterRatio' has a wrong offset!");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, SpawnBufferDistance) == 0x0000D8, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::SpawnBufferDistance' has a wrong offset!");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, AngleVersusDistanceAimAssistRatio) == 0x0000DC, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::AngleVersusDistanceAimAssistRatio' has a wrong offset!");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, AimAssistScoreAngleMax) == 0x0000E0, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::AimAssistScoreAngleMax' has a wrong offset!");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, AimAssistScoreDistanceMax) == 0x0000E4, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::AimAssistScoreDistanceMax' has a wrong offset!");
static_assert(offsetof(MarinerTask_DeflectProjectile_DeflectProjectile, ReturnValue) == 0x0000E8, "Member 'MarinerTask_DeflectProjectile_DeflectProjectile::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerNewsGlobals.RequestImage
// 0x001C (0x001C - 0x0000)
struct MarinerNewsGlobals_RequestImage final
{
public:
	class FName                                   ImageId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class FName& ImageId, class UTexture2D* Texture)> OnLoadedCallback;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1991[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerNewsGlobals_RequestImage) == 0x000004, "Wrong alignment on MarinerNewsGlobals_RequestImage");
static_assert(sizeof(MarinerNewsGlobals_RequestImage) == 0x00001C, "Wrong size on MarinerNewsGlobals_RequestImage");
static_assert(offsetof(MarinerNewsGlobals_RequestImage, ImageId) == 0x000000, "Member 'MarinerNewsGlobals_RequestImage::ImageId' has a wrong offset!");
static_assert(offsetof(MarinerNewsGlobals_RequestImage, OnLoadedCallback) == 0x000008, "Member 'MarinerNewsGlobals_RequestImage::OnLoadedCallback' has a wrong offset!");
static_assert(offsetof(MarinerNewsGlobals_RequestImage, ReturnValue) == 0x000018, "Member 'MarinerNewsGlobals_RequestImage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerOfferButton.OnEmoteCharacterPortraitLoaded
// 0x0088 (0x0088 - 0x0000)
struct MarinerOfferButton_OnEmoteCharacterPortraitLoaded final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOfferButton_OnEmoteCharacterPortraitLoaded) == 0x000008, "Wrong alignment on MarinerOfferButton_OnEmoteCharacterPortraitLoaded");
static_assert(sizeof(MarinerOfferButton_OnEmoteCharacterPortraitLoaded) == 0x000088, "Wrong size on MarinerOfferButton_OnEmoteCharacterPortraitLoaded");
static_assert(offsetof(MarinerOfferButton_OnEmoteCharacterPortraitLoaded, Brush) == 0x000000, "Member 'MarinerOfferButton_OnEmoteCharacterPortraitLoaded::Brush' has a wrong offset!");

// Function Mariner.MarinerOfferButton.SetOffer
// 0x00D8 (0x00D8 - 0x0000)
struct MarinerOfferButton_SetOffer final
{
public:
	struct FMangoPurchaseOffer                    InOffer;                                           // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOfferButton_SetOffer) == 0x000008, "Wrong alignment on MarinerOfferButton_SetOffer");
static_assert(sizeof(MarinerOfferButton_SetOffer) == 0x0000D8, "Wrong size on MarinerOfferButton_SetOffer");
static_assert(offsetof(MarinerOfferButton_SetOffer, InOffer) == 0x000000, "Member 'MarinerOfferButton_SetOffer::InOffer' has a wrong offset!");

// Function Mariner.MarinerOfferButton.GetOffer
// 0x00D8 (0x00D8 - 0x0000)
struct MarinerOfferButton_GetOffer final
{
public:
	struct FMangoPurchaseOffer                    ReturnValue;                                       // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOfferButton_GetOffer) == 0x000008, "Wrong alignment on MarinerOfferButton_GetOffer");
static_assert(sizeof(MarinerOfferButton_GetOffer) == 0x0000D8, "Wrong size on MarinerOfferButton_GetOffer");
static_assert(offsetof(MarinerOfferButton_GetOffer, ReturnValue) == 0x000000, "Member 'MarinerOfferButton_GetOffer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerOfferButton.IsOfferOwned
// 0x0001 (0x0001 - 0x0000)
struct MarinerOfferButton_IsOfferOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOfferButton_IsOfferOwned) == 0x000001, "Wrong alignment on MarinerOfferButton_IsOfferOwned");
static_assert(sizeof(MarinerOfferButton_IsOfferOwned) == 0x000001, "Wrong size on MarinerOfferButton_IsOfferOwned");
static_assert(offsetof(MarinerOfferButton_IsOfferOwned, ReturnValue) == 0x000000, "Member 'MarinerOfferButton_IsOfferOwned::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTrustedBotLauncherInterface.PrepareBotForLaunch
// 0x0010 (0x0010 - 0x0000)
struct MarinerTrustedBotLauncherInterface_PrepareBotForLaunch final
{
public:
	class AMarinerCharacter*                      BotToLaunch;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1993[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerTrustedBotLauncherInterface_PrepareBotForLaunch) == 0x000008, "Wrong alignment on MarinerTrustedBotLauncherInterface_PrepareBotForLaunch");
static_assert(sizeof(MarinerTrustedBotLauncherInterface_PrepareBotForLaunch) == 0x000010, "Wrong size on MarinerTrustedBotLauncherInterface_PrepareBotForLaunch");
static_assert(offsetof(MarinerTrustedBotLauncherInterface_PrepareBotForLaunch, BotToLaunch) == 0x000000, "Member 'MarinerTrustedBotLauncherInterface_PrepareBotForLaunch::BotToLaunch' has a wrong offset!");
static_assert(offsetof(MarinerTrustedBotLauncherInterface_PrepareBotForLaunch, ReturnValue) == 0x000008, "Member 'MarinerTrustedBotLauncherInterface_PrepareBotForLaunch::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerOptionListMessageBox.ButtonCallback
// 0x0008 (0x0008 - 0x0000)
struct MarinerOptionListMessageBox_ButtonCallback final
{
public:
	class UMarinerSettingBase*                    Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOptionListMessageBox_ButtonCallback) == 0x000008, "Wrong alignment on MarinerOptionListMessageBox_ButtonCallback");
static_assert(sizeof(MarinerOptionListMessageBox_ButtonCallback) == 0x000008, "Wrong size on MarinerOptionListMessageBox_ButtonCallback");
static_assert(offsetof(MarinerOptionListMessageBox_ButtonCallback, Instance) == 0x000000, "Member 'MarinerOptionListMessageBox_ButtonCallback::Instance' has a wrong offset!");

// Function Mariner.MarinerOptionListMessageBox.GetData
// 0x00E0 (0x00E0 - 0x0000)
struct MarinerOptionListMessageBox_GetData final
{
public:
	struct FMarinerMessageBoxOptionListData       ReturnValue;                                       // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOptionListMessageBox_GetData) == 0x000008, "Wrong alignment on MarinerOptionListMessageBox_GetData");
static_assert(sizeof(MarinerOptionListMessageBox_GetData) == 0x0000E0, "Wrong size on MarinerOptionListMessageBox_GetData");
static_assert(offsetof(MarinerOptionListMessageBox_GetData, ReturnValue) == 0x000000, "Member 'MarinerOptionListMessageBox_GetData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerOrderDetailsMessageBox.GetData
// 0x0110 (0x0110 - 0x0000)
struct MarinerOrderDetailsMessageBox_GetData final
{
public:
	struct FMarinerMessageBoxOrderDetailsData     ReturnValue;                                       // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerOrderDetailsMessageBox_GetData) == 0x000008, "Wrong alignment on MarinerOrderDetailsMessageBox_GetData");
static_assert(sizeof(MarinerOrderDetailsMessageBox_GetData) == 0x000110, "Wrong size on MarinerOrderDetailsMessageBox_GetData");
static_assert(offsetof(MarinerOrderDetailsMessageBox_GetData, ReturnValue) == 0x000000, "Member 'MarinerOrderDetailsMessageBox_GetData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerServerBrowser.GetNumServers
// 0x0004 (0x0004 - 0x0000)
struct MarinerServerBrowser_GetNumServers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerServerBrowser_GetNumServers) == 0x000004, "Wrong alignment on MarinerServerBrowser_GetNumServers");
static_assert(sizeof(MarinerServerBrowser_GetNumServers) == 0x000004, "Wrong size on MarinerServerBrowser_GetNumServers");
static_assert(offsetof(MarinerServerBrowser_GetNumServers, ReturnValue) == 0x000000, "Member 'MarinerServerBrowser_GetNumServers::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPaneSwitcher.AssignOwnerAndAnimations
// 0x0038 (0x0038 - 0x0000)
struct MarinerPaneSwitcher_AssignOwnerAndAnimations final
{
public:
	class UUserWidget*                            AnimationOwner;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       EnterScreenAnim;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       LeaveScreenAnim;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       ForwardAnimationIn;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       ForwardAnimationOut;                               // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       BackwardAnimationIn;                               // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       BackwardAnimationOut;                              // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPaneSwitcher_AssignOwnerAndAnimations) == 0x000008, "Wrong alignment on MarinerPaneSwitcher_AssignOwnerAndAnimations");
static_assert(sizeof(MarinerPaneSwitcher_AssignOwnerAndAnimations) == 0x000038, "Wrong size on MarinerPaneSwitcher_AssignOwnerAndAnimations");
static_assert(offsetof(MarinerPaneSwitcher_AssignOwnerAndAnimations, AnimationOwner) == 0x000000, "Member 'MarinerPaneSwitcher_AssignOwnerAndAnimations::AnimationOwner' has a wrong offset!");
static_assert(offsetof(MarinerPaneSwitcher_AssignOwnerAndAnimations, EnterScreenAnim) == 0x000008, "Member 'MarinerPaneSwitcher_AssignOwnerAndAnimations::EnterScreenAnim' has a wrong offset!");
static_assert(offsetof(MarinerPaneSwitcher_AssignOwnerAndAnimations, LeaveScreenAnim) == 0x000010, "Member 'MarinerPaneSwitcher_AssignOwnerAndAnimations::LeaveScreenAnim' has a wrong offset!");
static_assert(offsetof(MarinerPaneSwitcher_AssignOwnerAndAnimations, ForwardAnimationIn) == 0x000018, "Member 'MarinerPaneSwitcher_AssignOwnerAndAnimations::ForwardAnimationIn' has a wrong offset!");
static_assert(offsetof(MarinerPaneSwitcher_AssignOwnerAndAnimations, ForwardAnimationOut) == 0x000020, "Member 'MarinerPaneSwitcher_AssignOwnerAndAnimations::ForwardAnimationOut' has a wrong offset!");
static_assert(offsetof(MarinerPaneSwitcher_AssignOwnerAndAnimations, BackwardAnimationIn) == 0x000028, "Member 'MarinerPaneSwitcher_AssignOwnerAndAnimations::BackwardAnimationIn' has a wrong offset!");
static_assert(offsetof(MarinerPaneSwitcher_AssignOwnerAndAnimations, BackwardAnimationOut) == 0x000030, "Member 'MarinerPaneSwitcher_AssignOwnerAndAnimations::BackwardAnimationOut' has a wrong offset!");

// Function Mariner.MarinerPaneSwitcher.Event_AnimationCompleted
// 0x0008 (0x0008 - 0x0000)
struct MarinerPaneSwitcher_Event_AnimationCompleted final
{
public:
	class UWidgetAnimation*                       AnimationJustCompleted;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPaneSwitcher_Event_AnimationCompleted) == 0x000008, "Wrong alignment on MarinerPaneSwitcher_Event_AnimationCompleted");
static_assert(sizeof(MarinerPaneSwitcher_Event_AnimationCompleted) == 0x000008, "Wrong size on MarinerPaneSwitcher_Event_AnimationCompleted");
static_assert(offsetof(MarinerPaneSwitcher_Event_AnimationCompleted, AnimationJustCompleted) == 0x000000, "Member 'MarinerPaneSwitcher_Event_AnimationCompleted::AnimationJustCompleted' has a wrong offset!");

// Function Mariner.MarinerPaneSwitcher.GetIsAnimating
// 0x0001 (0x0001 - 0x0000)
struct MarinerPaneSwitcher_GetIsAnimating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPaneSwitcher_GetIsAnimating) == 0x000001, "Wrong alignment on MarinerPaneSwitcher_GetIsAnimating");
static_assert(sizeof(MarinerPaneSwitcher_GetIsAnimating) == 0x000001, "Wrong size on MarinerPaneSwitcher_GetIsAnimating");
static_assert(offsetof(MarinerPaneSwitcher_GetIsAnimating, ReturnValue) == 0x000000, "Member 'MarinerPaneSwitcher_GetIsAnimating::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPaneSwitcher.GetIsOnScreen
// 0x0001 (0x0001 - 0x0000)
struct MarinerPaneSwitcher_GetIsOnScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPaneSwitcher_GetIsOnScreen) == 0x000001, "Wrong alignment on MarinerPaneSwitcher_GetIsOnScreen");
static_assert(sizeof(MarinerPaneSwitcher_GetIsOnScreen) == 0x000001, "Wrong size on MarinerPaneSwitcher_GetIsOnScreen");
static_assert(offsetof(MarinerPaneSwitcher_GetIsOnScreen, ReturnValue) == 0x000000, "Member 'MarinerPaneSwitcher_GetIsOnScreen::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerParticlePoolEntry.OnParticleDone
// 0x0008 (0x0008 - 0x0000)
struct MarinerParticlePoolEntry_OnParticleDone final
{
public:
	class UParticleSystemComponent*               Particles;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerParticlePoolEntry_OnParticleDone) == 0x000008, "Wrong alignment on MarinerParticlePoolEntry_OnParticleDone");
static_assert(sizeof(MarinerParticlePoolEntry_OnParticleDone) == 0x000008, "Wrong size on MarinerParticlePoolEntry_OnParticleDone");
static_assert(offsetof(MarinerParticlePoolEntry_OnParticleDone, Particles) == 0x000000, "Member 'MarinerParticlePoolEntry_OnParticleDone::Particles' has a wrong offset!");

// Function Mariner.MarinerMousePrompt.GetPromptAssets
// 0x0030 (0x0030 - 0x0000)
struct MarinerMousePrompt_GetPromptAssets final
{
public:
	struct FMarinerMousePromptAssets              ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerMousePrompt_GetPromptAssets) == 0x000008, "Wrong alignment on MarinerMousePrompt_GetPromptAssets");
static_assert(sizeof(MarinerMousePrompt_GetPromptAssets) == 0x000030, "Wrong size on MarinerMousePrompt_GetPromptAssets");
static_assert(offsetof(MarinerMousePrompt_GetPromptAssets, ReturnValue) == 0x000000, "Member 'MarinerMousePrompt_GetPromptAssets::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerParticleComponentPool.InitializePool
// 0x0010 (0x0010 - 0x0000)
struct MarinerParticleComponentPool_InitializePool final
{
public:
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreloadCount;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerParticleComponentPool_InitializePool) == 0x000008, "Wrong alignment on MarinerParticleComponentPool_InitializePool");
static_assert(sizeof(MarinerParticleComponentPool_InitializePool) == 0x000010, "Wrong size on MarinerParticleComponentPool_InitializePool");
static_assert(offsetof(MarinerParticleComponentPool_InitializePool, EmitterTemplate) == 0x000000, "Member 'MarinerParticleComponentPool_InitializePool::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(MarinerParticleComponentPool_InitializePool, MaxCount) == 0x000008, "Member 'MarinerParticleComponentPool_InitializePool::MaxCount' has a wrong offset!");
static_assert(offsetof(MarinerParticleComponentPool_InitializePool, PreloadCount) == 0x00000C, "Member 'MarinerParticleComponentPool_InitializePool::PreloadCount' has a wrong offset!");

// Function Mariner.MarinerParticleComponentPool.SpawnEmitter
// 0x001C (0x001C - 0x0000)
struct MarinerParticleComponentPool_SpawnEmitter final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAllowForceReset;                                  // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1999[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerParticleComponentPool_SpawnEmitter) == 0x000004, "Wrong alignment on MarinerParticleComponentPool_SpawnEmitter");
static_assert(sizeof(MarinerParticleComponentPool_SpawnEmitter) == 0x00001C, "Wrong size on MarinerParticleComponentPool_SpawnEmitter");
static_assert(offsetof(MarinerParticleComponentPool_SpawnEmitter, Position) == 0x000000, "Member 'MarinerParticleComponentPool_SpawnEmitter::Position' has a wrong offset!");
static_assert(offsetof(MarinerParticleComponentPool_SpawnEmitter, Rotation) == 0x00000C, "Member 'MarinerParticleComponentPool_SpawnEmitter::Rotation' has a wrong offset!");
static_assert(offsetof(MarinerParticleComponentPool_SpawnEmitter, bAllowForceReset) == 0x000018, "Member 'MarinerParticleComponentPool_SpawnEmitter::bAllowForceReset' has a wrong offset!");

// Function Mariner.MarinerPartyWidget.OnLeavePartyButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct MarinerPartyWidget_OnLeavePartyButtonClicked final
{
public:
	class UMarinerLayeredButton*                  ButtonInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPartyWidget_OnLeavePartyButtonClicked) == 0x000008, "Wrong alignment on MarinerPartyWidget_OnLeavePartyButtonClicked");
static_assert(sizeof(MarinerPartyWidget_OnLeavePartyButtonClicked) == 0x000008, "Wrong size on MarinerPartyWidget_OnLeavePartyButtonClicked");
static_assert(offsetof(MarinerPartyWidget_OnLeavePartyButtonClicked, ButtonInstance) == 0x000000, "Member 'MarinerPartyWidget_OnLeavePartyButtonClicked::ButtonInstance' has a wrong offset!");

// Function Mariner.MarinerPartyWidget.OnLeavePartyConfirmed
// 0x0018 (0x0018 - 0x0000)
struct MarinerPartyWidget_OnLeavePartyConfirmed final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPartyWidget_OnLeavePartyConfirmed) == 0x000008, "Wrong alignment on MarinerPartyWidget_OnLeavePartyConfirmed");
static_assert(sizeof(MarinerPartyWidget_OnLeavePartyConfirmed) == 0x000018, "Wrong size on MarinerPartyWidget_OnLeavePartyConfirmed");
static_assert(offsetof(MarinerPartyWidget_OnLeavePartyConfirmed, KeyPressed) == 0x000000, "Member 'MarinerPartyWidget_OnLeavePartyConfirmed::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerTask_ApplyDamageOnTick.CreateInstance
// 0x0028 (0x0028 - 0x0000)
struct MarinerTask_ApplyDamageOnTick_CreateInstance final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerDamageType>         AOEDamage;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanHitSameActorsAgain;                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199C[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerTask_ApplyDamageOnTick*         ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ApplyDamageOnTick_CreateInstance) == 0x000008, "Wrong alignment on MarinerTask_ApplyDamageOnTick_CreateInstance");
static_assert(sizeof(MarinerTask_ApplyDamageOnTick_CreateInstance) == 0x000028, "Wrong size on MarinerTask_ApplyDamageOnTick_CreateInstance");
static_assert(offsetof(MarinerTask_ApplyDamageOnTick_CreateInstance, OwningAbility) == 0x000000, "Member 'MarinerTask_ApplyDamageOnTick_CreateInstance::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyDamageOnTick_CreateInstance, TaskInstanceName) == 0x000008, "Member 'MarinerTask_ApplyDamageOnTick_CreateInstance::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyDamageOnTick_CreateInstance, AOEDamage) == 0x000010, "Member 'MarinerTask_ApplyDamageOnTick_CreateInstance::AOEDamage' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyDamageOnTick_CreateInstance, bCanHitSameActorsAgain) == 0x000018, "Member 'MarinerTask_ApplyDamageOnTick_CreateInstance::bCanHitSameActorsAgain' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyDamageOnTick_CreateInstance, Duration) == 0x00001C, "Member 'MarinerTask_ApplyDamageOnTick_CreateInstance::Duration' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyDamageOnTick_CreateInstance, ReturnValue) == 0x000020, "Member 'MarinerTask_ApplyDamageOnTick_CreateInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPinComponent.OnLocalPlayerPawnSet
// 0x0008 (0x0008 - 0x0000)
struct MarinerPinComponent_OnLocalPlayerPawnSet final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPinComponent_OnLocalPlayerPawnSet) == 0x000008, "Wrong alignment on MarinerPinComponent_OnLocalPlayerPawnSet");
static_assert(sizeof(MarinerPinComponent_OnLocalPlayerPawnSet) == 0x000008, "Wrong size on MarinerPinComponent_OnLocalPlayerPawnSet");
static_assert(offsetof(MarinerPinComponent_OnLocalPlayerPawnSet, InPawn) == 0x000000, "Member 'MarinerPinComponent_OnLocalPlayerPawnSet::InPawn' has a wrong offset!");

// Function Mariner.MarinerPinComponent.GetPinWidget
// 0x0008 (0x0008 - 0x0000)
struct MarinerPinComponent_GetPinWidget final
{
public:
	class UMarinerBasePinWidget*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPinComponent_GetPinWidget) == 0x000008, "Wrong alignment on MarinerPinComponent_GetPinWidget");
static_assert(sizeof(MarinerPinComponent_GetPinWidget) == 0x000008, "Wrong size on MarinerPinComponent_GetPinWidget");
static_assert(offsetof(MarinerPinComponent_GetPinWidget, ReturnValue) == 0x000000, "Member 'MarinerPinComponent_GetPinWidget::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayableCharacter.GetRandomBotSkinCollection
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayableCharacter_GetRandomBotSkinCollection final
{
public:
	int32                                         OutSelectedIndex;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A2[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerSkinCollectionDataAsset*        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayableCharacter_GetRandomBotSkinCollection) == 0x000008, "Wrong alignment on MarinerPlayableCharacter_GetRandomBotSkinCollection");
static_assert(sizeof(MarinerPlayableCharacter_GetRandomBotSkinCollection) == 0x000010, "Wrong size on MarinerPlayableCharacter_GetRandomBotSkinCollection");
static_assert(offsetof(MarinerPlayableCharacter_GetRandomBotSkinCollection, OutSelectedIndex) == 0x000000, "Member 'MarinerPlayableCharacter_GetRandomBotSkinCollection::OutSelectedIndex' has a wrong offset!");
static_assert(offsetof(MarinerPlayableCharacter_GetRandomBotSkinCollection, ReturnValue) == 0x000008, "Member 'MarinerPlayableCharacter_GetRandomBotSkinCollection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayableCharacter.GetActiveSkin
// 0x0030 (0x0030 - 0x0000)
struct MarinerPlayableCharacter_GetActiveSkin final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayableCharacter_GetActiveSkin) == 0x000008, "Wrong alignment on MarinerPlayableCharacter_GetActiveSkin");
static_assert(sizeof(MarinerPlayableCharacter_GetActiveSkin) == 0x000030, "Wrong size on MarinerPlayableCharacter_GetActiveSkin");
static_assert(offsetof(MarinerPlayableCharacter_GetActiveSkin, WorldContextObject) == 0x000000, "Member 'MarinerPlayableCharacter_GetActiveSkin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerPlayableCharacter_GetActiveSkin, ReturnValue) == 0x000008, "Member 'MarinerPlayableCharacter_GetActiveSkin::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayableCharacter.GetActiveSkinForProfile
// 0x02F0 (0x02F0 - 0x0000)
struct MarinerPlayableCharacter_GetActiveSkinForProfile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoProfile                          Profile;                                           // 0x0008(0x02E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UMarinerSkinCollectionDataAsset*  ReturnValue;                                       // 0x02E8(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayableCharacter_GetActiveSkinForProfile) == 0x000008, "Wrong alignment on MarinerPlayableCharacter_GetActiveSkinForProfile");
static_assert(sizeof(MarinerPlayableCharacter_GetActiveSkinForProfile) == 0x0002F0, "Wrong size on MarinerPlayableCharacter_GetActiveSkinForProfile");
static_assert(offsetof(MarinerPlayableCharacter_GetActiveSkinForProfile, WorldContextObject) == 0x000000, "Member 'MarinerPlayableCharacter_GetActiveSkinForProfile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerPlayableCharacter_GetActiveSkinForProfile, Profile) == 0x000008, "Member 'MarinerPlayableCharacter_GetActiveSkinForProfile::Profile' has a wrong offset!");
static_assert(offsetof(MarinerPlayableCharacter_GetActiveSkinForProfile, ReturnValue) == 0x0002E8, "Member 'MarinerPlayableCharacter_GetActiveSkinForProfile::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayableCharacter.GetBaseUIData
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlayableCharacter_GetBaseUIData final
{
public:
	TSubclassOf<class UMarinerBaseCharacterUIData> ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayableCharacter_GetBaseUIData) == 0x000008, "Wrong alignment on MarinerPlayableCharacter_GetBaseUIData");
static_assert(sizeof(MarinerPlayableCharacter_GetBaseUIData) == 0x000008, "Wrong size on MarinerPlayableCharacter_GetBaseUIData");
static_assert(offsetof(MarinerPlayableCharacter_GetBaseUIData, ReturnValue) == 0x000000, "Member 'MarinerPlayableCharacter_GetBaseUIData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayableCharacter.GetCharacterLockState
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayableCharacter_GetCharacterLockState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerEnabledCharacterFilter                Filter;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerCharacterLockState                    ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A3[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlayableCharacter_GetCharacterLockState) == 0x000008, "Wrong alignment on MarinerPlayableCharacter_GetCharacterLockState");
static_assert(sizeof(MarinerPlayableCharacter_GetCharacterLockState) == 0x000010, "Wrong size on MarinerPlayableCharacter_GetCharacterLockState");
static_assert(offsetof(MarinerPlayableCharacter_GetCharacterLockState, WorldContextObject) == 0x000000, "Member 'MarinerPlayableCharacter_GetCharacterLockState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerPlayableCharacter_GetCharacterLockState, Filter) == 0x000008, "Member 'MarinerPlayableCharacter_GetCharacterLockState::Filter' has a wrong offset!");
static_assert(offsetof(MarinerPlayableCharacter_GetCharacterLockState, ReturnValue) == 0x000009, "Member 'MarinerPlayableCharacter_GetCharacterLockState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayableCharacter.GetIsIndependentCharacter
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayableCharacter_GetIsIndependentCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayableCharacter_GetIsIndependentCharacter) == 0x000001, "Wrong alignment on MarinerPlayableCharacter_GetIsIndependentCharacter");
static_assert(sizeof(MarinerPlayableCharacter_GetIsIndependentCharacter) == 0x000001, "Wrong size on MarinerPlayableCharacter_GetIsIndependentCharacter");
static_assert(offsetof(MarinerPlayableCharacter_GetIsIndependentCharacter, ReturnValue) == 0x000000, "Member 'MarinerPlayableCharacter_GetIsIndependentCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayableCharacter.GetSkinByEngineID
// 0x0018 (0x0018 - 0x0000)
struct MarinerPlayableCharacter_GetSkinByEngineID final
{
public:
	class FString                                 EngineId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMarinerSkinCollectionDataAsset*  ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayableCharacter_GetSkinByEngineID) == 0x000008, "Wrong alignment on MarinerPlayableCharacter_GetSkinByEngineID");
static_assert(sizeof(MarinerPlayableCharacter_GetSkinByEngineID) == 0x000018, "Wrong size on MarinerPlayableCharacter_GetSkinByEngineID");
static_assert(offsetof(MarinerPlayableCharacter_GetSkinByEngineID, EngineId) == 0x000000, "Member 'MarinerPlayableCharacter_GetSkinByEngineID::EngineId' has a wrong offset!");
static_assert(offsetof(MarinerPlayableCharacter_GetSkinByEngineID, ReturnValue) == 0x000010, "Member 'MarinerPlayableCharacter_GetSkinByEngineID::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlayerCameraManager.PreallocateCameraLensEffectForController
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerCameraManager_PreallocateCameraLensEffectForController final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarinerCameraLensEffect>   LensEffectEmitterClass;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerCameraManager_PreallocateCameraLensEffectForController) == 0x000008, "Wrong alignment on MarinerPlayerCameraManager_PreallocateCameraLensEffectForController");
static_assert(sizeof(MarinerPlayerCameraManager_PreallocateCameraLensEffectForController) == 0x000010, "Wrong size on MarinerPlayerCameraManager_PreallocateCameraLensEffectForController");
static_assert(offsetof(MarinerPlayerCameraManager_PreallocateCameraLensEffectForController, PlayerController) == 0x000000, "Member 'MarinerPlayerCameraManager_PreallocateCameraLensEffectForController::PlayerController' has a wrong offset!");
static_assert(offsetof(MarinerPlayerCameraManager_PreallocateCameraLensEffectForController, LensEffectEmitterClass) == 0x000008, "Member 'MarinerPlayerCameraManager_PreallocateCameraLensEffectForController::LensEffectEmitterClass' has a wrong offset!");

// Function Mariner.MarinerPlayerCameraManager.PreallocateCameraLensEffectForLocalPlayer
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerCameraManager_PreallocateCameraLensEffectForLocalPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarinerCameraLensEffect>   LensEffectEmitterClass;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerCameraManager_PreallocateCameraLensEffectForLocalPlayer) == 0x000008, "Wrong alignment on MarinerPlayerCameraManager_PreallocateCameraLensEffectForLocalPlayer");
static_assert(sizeof(MarinerPlayerCameraManager_PreallocateCameraLensEffectForLocalPlayer) == 0x000010, "Wrong size on MarinerPlayerCameraManager_PreallocateCameraLensEffectForLocalPlayer");
static_assert(offsetof(MarinerPlayerCameraManager_PreallocateCameraLensEffectForLocalPlayer, WorldContextObject) == 0x000000, "Member 'MarinerPlayerCameraManager_PreallocateCameraLensEffectForLocalPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerPlayerCameraManager_PreallocateCameraLensEffectForLocalPlayer, LensEffectEmitterClass) == 0x000008, "Member 'MarinerPlayerCameraManager_PreallocateCameraLensEffectForLocalPlayer::LensEffectEmitterClass' has a wrong offset!");

// Function Mariner.MarinerPlayerHeader.SetIsOnGameTabs
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerHeader_SetIsOnGameTabs final
{
public:
	bool                                          bGameTabs;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerHeader_SetIsOnGameTabs) == 0x000001, "Wrong alignment on MarinerPlayerHeader_SetIsOnGameTabs");
static_assert(sizeof(MarinerPlayerHeader_SetIsOnGameTabs) == 0x000001, "Wrong size on MarinerPlayerHeader_SetIsOnGameTabs");
static_assert(offsetof(MarinerPlayerHeader_SetIsOnGameTabs, bGameTabs) == 0x000000, "Member 'MarinerPlayerHeader_SetIsOnGameTabs::bGameTabs' has a wrong offset!");

// Function Mariner.MarinerPlayerHeader.SetPartyWidgetEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerHeader_SetPartyWidgetEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerHeader_SetPartyWidgetEnabled) == 0x000001, "Wrong alignment on MarinerPlayerHeader_SetPartyWidgetEnabled");
static_assert(sizeof(MarinerPlayerHeader_SetPartyWidgetEnabled) == 0x000001, "Wrong size on MarinerPlayerHeader_SetPartyWidgetEnabled");
static_assert(offsetof(MarinerPlayerHeader_SetPartyWidgetEnabled, bEnabled) == 0x000000, "Member 'MarinerPlayerHeader_SetPartyWidgetEnabled::bEnabled' has a wrong offset!");

// Function Mariner.MarinerPlayerHeader.SetProfileWidgetEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerHeader_SetProfileWidgetEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerHeader_SetProfileWidgetEnabled) == 0x000001, "Wrong alignment on MarinerPlayerHeader_SetProfileWidgetEnabled");
static_assert(sizeof(MarinerPlayerHeader_SetProfileWidgetEnabled) == 0x000001, "Wrong size on MarinerPlayerHeader_SetProfileWidgetEnabled");
static_assert(offsetof(MarinerPlayerHeader_SetProfileWidgetEnabled, bEnabled) == 0x000000, "Member 'MarinerPlayerHeader_SetProfileWidgetEnabled::bEnabled' has a wrong offset!");

// Function Mariner.MarinerPlayerStateCharacterSpawner.OnMatchStateChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlayerStateCharacterSpawner_OnMatchStateChanged final
{
public:
	class FName                                   NewMatchState;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerStateCharacterSpawner_OnMatchStateChanged) == 0x000004, "Wrong alignment on MarinerPlayerStateCharacterSpawner_OnMatchStateChanged");
static_assert(sizeof(MarinerPlayerStateCharacterSpawner_OnMatchStateChanged) == 0x000008, "Wrong size on MarinerPlayerStateCharacterSpawner_OnMatchStateChanged");
static_assert(offsetof(MarinerPlayerStateCharacterSpawner_OnMatchStateChanged, NewMatchState) == 0x000000, "Member 'MarinerPlayerStateCharacterSpawner_OnMatchStateChanged::NewMatchState' has a wrong offset!");

// Function Mariner.MarinerPlayerStateCharacterSpawner.OnPlayerStateCharacterRequestFailed
// 0x0020 (0x0020 - 0x0000)
struct MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterRequestFailed final
{
public:
	class FString                                 RequestedCharacterString;                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastSeenSelectedCharacter;                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterRequestFailed) == 0x000008, "Wrong alignment on MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterRequestFailed");
static_assert(sizeof(MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterRequestFailed) == 0x000020, "Wrong size on MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterRequestFailed");
static_assert(offsetof(MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterRequestFailed, RequestedCharacterString) == 0x000000, "Member 'MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterRequestFailed::RequestedCharacterString' has a wrong offset!");
static_assert(offsetof(MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterRequestFailed, LastSeenSelectedCharacter) == 0x000010, "Member 'MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterRequestFailed::LastSeenSelectedCharacter' has a wrong offset!");

// Function Mariner.MarinerPlayerStateCharacterSpawner.OnPlayerStateCharacterSelected
// 0x0030 (0x0030 - 0x0000)
struct MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterSelected final
{
public:
	class AMarinerPlayerState*                    InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SelectedCharacter;                                 // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterSelected) == 0x000008, "Wrong alignment on MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterSelected");
static_assert(sizeof(MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterSelected) == 0x000030, "Wrong size on MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterSelected");
static_assert(offsetof(MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterSelected, InPlayerState) == 0x000000, "Member 'MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterSelected::InPlayerState' has a wrong offset!");
static_assert(offsetof(MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterSelected, SelectedCharacter) == 0x000008, "Member 'MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterSelected::SelectedCharacter' has a wrong offset!");

// Function Mariner.MarinerPlayerStateCharacterSpawner.OnPlayerStateCharacterUpdated
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterUpdated final
{
public:
	bool                                          bClearDelayAyncLoadHandle;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterUpdated) == 0x000001, "Wrong alignment on MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterUpdated");
static_assert(sizeof(MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterUpdated) == 0x000001, "Wrong size on MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterUpdated");
static_assert(offsetof(MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterUpdated, bClearDelayAyncLoadHandle) == 0x000000, "Member 'MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterUpdated::bClearDelayAyncLoadHandle' has a wrong offset!");

// Function Mariner.MarinerPlayerStateCharacterSpawner.OnPlayerStateSelectedCharacterChanged
// 0x0010 (0x0010 - 0x0000)
struct MarinerPlayerStateCharacterSpawner_OnPlayerStateSelectedCharacterChanged final
{
public:
	class FString                                 SelectedCharacter;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerStateCharacterSpawner_OnPlayerStateSelectedCharacterChanged) == 0x000008, "Wrong alignment on MarinerPlayerStateCharacterSpawner_OnPlayerStateSelectedCharacterChanged");
static_assert(sizeof(MarinerPlayerStateCharacterSpawner_OnPlayerStateSelectedCharacterChanged) == 0x000010, "Wrong size on MarinerPlayerStateCharacterSpawner_OnPlayerStateSelectedCharacterChanged");
static_assert(offsetof(MarinerPlayerStateCharacterSpawner_OnPlayerStateSelectedCharacterChanged, SelectedCharacter) == 0x000000, "Member 'MarinerPlayerStateCharacterSpawner_OnPlayerStateSelectedCharacterChanged::SelectedCharacter' has a wrong offset!");

// Function Mariner.MarinerPlayerStateCharacterSpawner.OnPregameStateChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerPlayerStateCharacterSpawner_OnPregameStateChanged final
{
public:
	class FName                                   NewPregameState;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlayerStateCharacterSpawner_OnPregameStateChanged) == 0x000004, "Wrong alignment on MarinerPlayerStateCharacterSpawner_OnPregameStateChanged");
static_assert(sizeof(MarinerPlayerStateCharacterSpawner_OnPregameStateChanged) == 0x000008, "Wrong size on MarinerPlayerStateCharacterSpawner_OnPregameStateChanged");
static_assert(offsetof(MarinerPlayerStateCharacterSpawner_OnPregameStateChanged, NewPregameState) == 0x000000, "Member 'MarinerPlayerStateCharacterSpawner_OnPregameStateChanged::NewPregameState' has a wrong offset!");

// Function Mariner.MarinerPlaylistGlobals.BuildMapModeDataMap
// 0x0148 (0x0148 - 0x0000)
struct MarinerPlaylistGlobals_BuildMapModeDataMap final
{
public:
	struct FMangoPlaylist                         Playlist;                                          // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FFilterModeArray>   OutDataMap;                                        // 0x00F8(0x0050)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlaylistGlobals_BuildMapModeDataMap) == 0x000008, "Wrong alignment on MarinerPlaylistGlobals_BuildMapModeDataMap");
static_assert(sizeof(MarinerPlaylistGlobals_BuildMapModeDataMap) == 0x000148, "Wrong size on MarinerPlaylistGlobals_BuildMapModeDataMap");
static_assert(offsetof(MarinerPlaylistGlobals_BuildMapModeDataMap, Playlist) == 0x000000, "Member 'MarinerPlaylistGlobals_BuildMapModeDataMap::Playlist' has a wrong offset!");
static_assert(offsetof(MarinerPlaylistGlobals_BuildMapModeDataMap, OutDataMap) == 0x0000F8, "Member 'MarinerPlaylistGlobals_BuildMapModeDataMap::OutDataMap' has a wrong offset!");

// Function Mariner.MarinerPlaylistGlobals.ConvertPlaylistToMenuButtonData
// 0x0318 (0x0318 - 0x0000)
struct MarinerPlaylistGlobals_ConvertPlaylistToMenuButtonData final
{
public:
	struct FMangoPlaylist                         Playlist;                                          // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMarinerCrossplayState                        CrossplayState;                                    // 0x00F8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19AB[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerMenuButtonData                 ReturnValue;                                       // 0x0100(0x0218)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlaylistGlobals_ConvertPlaylistToMenuButtonData) == 0x000008, "Wrong alignment on MarinerPlaylistGlobals_ConvertPlaylistToMenuButtonData");
static_assert(sizeof(MarinerPlaylistGlobals_ConvertPlaylistToMenuButtonData) == 0x000318, "Wrong size on MarinerPlaylistGlobals_ConvertPlaylistToMenuButtonData");
static_assert(offsetof(MarinerPlaylistGlobals_ConvertPlaylistToMenuButtonData, Playlist) == 0x000000, "Member 'MarinerPlaylistGlobals_ConvertPlaylistToMenuButtonData::Playlist' has a wrong offset!");
static_assert(offsetof(MarinerPlaylistGlobals_ConvertPlaylistToMenuButtonData, CrossplayState) == 0x0000F8, "Member 'MarinerPlaylistGlobals_ConvertPlaylistToMenuButtonData::CrossplayState' has a wrong offset!");
static_assert(offsetof(MarinerPlaylistGlobals_ConvertPlaylistToMenuButtonData, ReturnValue) == 0x000100, "Member 'MarinerPlaylistGlobals_ConvertPlaylistToMenuButtonData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlaylistGlobals.GetIcon
// 0x0098 (0x0098 - 0x0000)
struct MarinerPlaylistGlobals_GetIcon final
{
public:
	class FName                                   IconID;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            IconBrushOut;                                      // 0x0008(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19AC[0x7];                                     // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlaylistGlobals_GetIcon) == 0x000008, "Wrong alignment on MarinerPlaylistGlobals_GetIcon");
static_assert(sizeof(MarinerPlaylistGlobals_GetIcon) == 0x000098, "Wrong size on MarinerPlaylistGlobals_GetIcon");
static_assert(offsetof(MarinerPlaylistGlobals_GetIcon, IconID) == 0x000000, "Member 'MarinerPlaylistGlobals_GetIcon::IconID' has a wrong offset!");
static_assert(offsetof(MarinerPlaylistGlobals_GetIcon, IconBrushOut) == 0x000008, "Member 'MarinerPlaylistGlobals_GetIcon::IconBrushOut' has a wrong offset!");
static_assert(offsetof(MarinerPlaylistGlobals_GetIcon, ReturnValue) == 0x000090, "Member 'MarinerPlaylistGlobals_GetIcon::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlaylistGlobals.GetMaterial
// 0x0098 (0x0098 - 0x0000)
struct MarinerPlaylistGlobals_GetMaterial final
{
public:
	class FName                                   MaterialID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MaterialOut;                                       // 0x0008(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19AD[0x7];                                     // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPlaylistGlobals_GetMaterial) == 0x000008, "Wrong alignment on MarinerPlaylistGlobals_GetMaterial");
static_assert(sizeof(MarinerPlaylistGlobals_GetMaterial) == 0x000098, "Wrong size on MarinerPlaylistGlobals_GetMaterial");
static_assert(offsetof(MarinerPlaylistGlobals_GetMaterial, MaterialID) == 0x000000, "Member 'MarinerPlaylistGlobals_GetMaterial::MaterialID' has a wrong offset!");
static_assert(offsetof(MarinerPlaylistGlobals_GetMaterial, MaterialOut) == 0x000008, "Member 'MarinerPlaylistGlobals_GetMaterial::MaterialOut' has a wrong offset!");
static_assert(offsetof(MarinerPlaylistGlobals_GetMaterial, ReturnValue) == 0x000090, "Member 'MarinerPlaylistGlobals_GetMaterial::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRankWidget.InitRankWidget
// 0x0018 (0x0018 - 0x0000)
struct MarinerRankWidget_InitRankWidget final
{
public:
	class AMarinerPlayerState*                    MarinerPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PlaylistUniqueId;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRankWidget_InitRankWidget) == 0x000008, "Wrong alignment on MarinerRankWidget_InitRankWidget");
static_assert(sizeof(MarinerRankWidget_InitRankWidget) == 0x000018, "Wrong size on MarinerRankWidget_InitRankWidget");
static_assert(offsetof(MarinerRankWidget_InitRankWidget, MarinerPlayerState) == 0x000000, "Member 'MarinerRankWidget_InitRankWidget::MarinerPlayerState' has a wrong offset!");
static_assert(offsetof(MarinerRankWidget_InitRankWidget, PlaylistUniqueId) == 0x000008, "Member 'MarinerRankWidget_InitRankWidget::PlaylistUniqueId' has a wrong offset!");

// Function Mariner.MarinerRankWidget.OnOwnerMangoUserUpdated
// 0x0008 (0x0008 - 0x0000)
struct MarinerRankWidget_OnOwnerMangoUserUpdated final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRankWidget_OnOwnerMangoUserUpdated) == 0x000008, "Wrong alignment on MarinerRankWidget_OnOwnerMangoUserUpdated");
static_assert(sizeof(MarinerRankWidget_OnOwnerMangoUserUpdated) == 0x000008, "Wrong size on MarinerRankWidget_OnOwnerMangoUserUpdated");
static_assert(offsetof(MarinerRankWidget_OnOwnerMangoUserUpdated, PlayerState) == 0x000000, "Member 'MarinerRankWidget_OnOwnerMangoUserUpdated::PlayerState' has a wrong offset!");

// Function Mariner.MarinerRankWidget.PopulateLocalPlayerRankByPlaylist
// 0x0010 (0x0010 - 0x0000)
struct MarinerRankWidget_PopulateLocalPlayerRankByPlaylist final
{
public:
	struct FGuid                                  PlaylistUniqueId;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRankWidget_PopulateLocalPlayerRankByPlaylist) == 0x000004, "Wrong alignment on MarinerRankWidget_PopulateLocalPlayerRankByPlaylist");
static_assert(sizeof(MarinerRankWidget_PopulateLocalPlayerRankByPlaylist) == 0x000010, "Wrong size on MarinerRankWidget_PopulateLocalPlayerRankByPlaylist");
static_assert(offsetof(MarinerRankWidget_PopulateLocalPlayerRankByPlaylist, PlaylistUniqueId) == 0x000000, "Member 'MarinerRankWidget_PopulateLocalPlayerRankByPlaylist::PlaylistUniqueId' has a wrong offset!");

// Function Mariner.MarinerRankWidget.PopulateRankByValue
// 0x0008 (0x0008 - 0x0000)
struct MarinerRankWidget_PopulateRankByValue final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRankedSession;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B0[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerRankWidget_PopulateRankByValue) == 0x000004, "Wrong alignment on MarinerRankWidget_PopulateRankByValue");
static_assert(sizeof(MarinerRankWidget_PopulateRankByValue) == 0x000008, "Wrong size on MarinerRankWidget_PopulateRankByValue");
static_assert(offsetof(MarinerRankWidget_PopulateRankByValue, Rank) == 0x000000, "Member 'MarinerRankWidget_PopulateRankByValue::Rank' has a wrong offset!");
static_assert(offsetof(MarinerRankWidget_PopulateRankByValue, bRankedSession) == 0x000004, "Member 'MarinerRankWidget_PopulateRankByValue::bRankedSession' has a wrong offset!");

// Function Mariner.MarinerSettingCheckBox.SetChecked
// 0x0002 (0x0002 - 0x0000)
struct MarinerSettingCheckBox_SetChecked final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingCheckBox_SetChecked) == 0x000001, "Wrong alignment on MarinerSettingCheckBox_SetChecked");
static_assert(sizeof(MarinerSettingCheckBox_SetChecked) == 0x000002, "Wrong size on MarinerSettingCheckBox_SetChecked");
static_assert(offsetof(MarinerSettingCheckBox_SetChecked, bValue) == 0x000000, "Member 'MarinerSettingCheckBox_SetChecked::bValue' has a wrong offset!");
static_assert(offsetof(MarinerSettingCheckBox_SetChecked, ReturnValue) == 0x000001, "Member 'MarinerSettingCheckBox_SetChecked::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSettingCheckBox.GetAssets
// 0x0048 (0x0048 - 0x0000)
struct MarinerSettingCheckBox_GetAssets final
{
public:
	struct FMarinerSettingCheckBoxAssets          ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingCheckBox_GetAssets) == 0x000008, "Wrong alignment on MarinerSettingCheckBox_GetAssets");
static_assert(sizeof(MarinerSettingCheckBox_GetAssets) == 0x000048, "Wrong size on MarinerSettingCheckBox_GetAssets");
static_assert(offsetof(MarinerSettingCheckBox_GetAssets, ReturnValue) == 0x000000, "Member 'MarinerSettingCheckBox_GetAssets::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSettingCheckBox.GetConfirmOverride
// 0x0178 (0x0178 - 0x0000)
struct MarinerSettingCheckBox_GetConfirmOverride final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerMessageBoxData                 ReturnValue;                                       // 0x0008(0x0170)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingCheckBox_GetConfirmOverride) == 0x000008, "Wrong alignment on MarinerSettingCheckBox_GetConfirmOverride");
static_assert(sizeof(MarinerSettingCheckBox_GetConfirmOverride) == 0x000178, "Wrong size on MarinerSettingCheckBox_GetConfirmOverride");
static_assert(offsetof(MarinerSettingCheckBox_GetConfirmOverride, bEnabled) == 0x000000, "Member 'MarinerSettingCheckBox_GetConfirmOverride::bEnabled' has a wrong offset!");
static_assert(offsetof(MarinerSettingCheckBox_GetConfirmOverride, ReturnValue) == 0x000008, "Member 'MarinerSettingCheckBox_GetConfirmOverride::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSettingCheckBox.IsStateChangeAllowed
// 0x0002 (0x0002 - 0x0000)
struct MarinerSettingCheckBox_IsStateChangeAllowed final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingCheckBox_IsStateChangeAllowed) == 0x000001, "Wrong alignment on MarinerSettingCheckBox_IsStateChangeAllowed");
static_assert(sizeof(MarinerSettingCheckBox_IsStateChangeAllowed) == 0x000002, "Wrong size on MarinerSettingCheckBox_IsStateChangeAllowed");
static_assert(offsetof(MarinerSettingCheckBox_IsStateChangeAllowed, bNewValue) == 0x000000, "Member 'MarinerSettingCheckBox_IsStateChangeAllowed::bNewValue' has a wrong offset!");
static_assert(offsetof(MarinerSettingCheckBox_IsStateChangeAllowed, ReturnValue) == 0x000001, "Member 'MarinerSettingCheckBox_IsStateChangeAllowed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPlaylistMenu.OnUpdatePartyBusyState
// 0x0001 (0x0001 - 0x0000)
struct MarinerPlaylistMenu_OnUpdatePartyBusyState final
{
public:
	EMangoPartyBusyState                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPlaylistMenu_OnUpdatePartyBusyState) == 0x000001, "Wrong alignment on MarinerPlaylistMenu_OnUpdatePartyBusyState");
static_assert(sizeof(MarinerPlaylistMenu_OnUpdatePartyBusyState) == 0x000001, "Wrong size on MarinerPlaylistMenu_OnUpdatePartyBusyState");
static_assert(offsetof(MarinerPlaylistMenu_OnUpdatePartyBusyState, State) == 0x000000, "Member 'MarinerPlaylistMenu_OnUpdatePartyBusyState::State' has a wrong offset!");

// Function Mariner.MarinerPoolingManager.Tick
// 0x0008 (0x0008 - 0x0000)
struct MarinerPoolingManager_Tick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B9[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPoolingManager_Tick) == 0x000004, "Wrong alignment on MarinerPoolingManager_Tick");
static_assert(sizeof(MarinerPoolingManager_Tick) == 0x000008, "Wrong size on MarinerPoolingManager_Tick");
static_assert(offsetof(MarinerPoolingManager_Tick, DeltaSeconds) == 0x000000, "Member 'MarinerPoolingManager_Tick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(MarinerPoolingManager_Tick, ReturnValue) == 0x000004, "Member 'MarinerPoolingManager_Tick::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPostgameManager.GetInstance
// 0x0010 (0x0010 - 0x0000)
struct MarinerPostgameManager_GetInstance final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerPostgameManager*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostgameManager_GetInstance) == 0x000008, "Wrong alignment on MarinerPostgameManager_GetInstance");
static_assert(sizeof(MarinerPostgameManager_GetInstance) == 0x000010, "Wrong size on MarinerPostgameManager_GetInstance");
static_assert(offsetof(MarinerPostgameManager_GetInstance, WorldContextObject) == 0x000000, "Member 'MarinerPostgameManager_GetInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerPostgameManager_GetInstance, ReturnValue) == 0x000008, "Member 'MarinerPostgameManager_GetInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPostgameManager.OnAnySpawnerCharacterLoaded
// 0x0008 (0x0008 - 0x0000)
struct MarinerPostgameManager_OnAnySpawnerCharacterLoaded final
{
public:
	class AMarinerCharacterSpawner*               Spawner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostgameManager_OnAnySpawnerCharacterLoaded) == 0x000008, "Wrong alignment on MarinerPostgameManager_OnAnySpawnerCharacterLoaded");
static_assert(sizeof(MarinerPostgameManager_OnAnySpawnerCharacterLoaded) == 0x000008, "Wrong size on MarinerPostgameManager_OnAnySpawnerCharacterLoaded");
static_assert(offsetof(MarinerPostgameManager_OnAnySpawnerCharacterLoaded, Spawner) == 0x000000, "Member 'MarinerPostgameManager_OnAnySpawnerCharacterLoaded::Spawner' has a wrong offset!");

// Function Mariner.MarinerPostgameManager.OnLocalPlayerStateReplicated
// 0x0008 (0x0008 - 0x0000)
struct MarinerPostgameManager_OnLocalPlayerStateReplicated final
{
public:
	class AMarinerPlayerController*               ControllerHostingState;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostgameManager_OnLocalPlayerStateReplicated) == 0x000008, "Wrong alignment on MarinerPostgameManager_OnLocalPlayerStateReplicated");
static_assert(sizeof(MarinerPostgameManager_OnLocalPlayerStateReplicated) == 0x000008, "Wrong size on MarinerPostgameManager_OnLocalPlayerStateReplicated");
static_assert(offsetof(MarinerPostgameManager_OnLocalPlayerStateReplicated, ControllerHostingState) == 0x000000, "Member 'MarinerPostgameManager_OnLocalPlayerStateReplicated::ControllerHostingState' has a wrong offset!");

// Function Mariner.MarinerPostgameManager.OnPlayerAdded
// 0x0008 (0x0008 - 0x0000)
struct MarinerPostgameManager_OnPlayerAdded final
{
public:
	class APlayerState*                           AddedPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostgameManager_OnPlayerAdded) == 0x000008, "Wrong alignment on MarinerPostgameManager_OnPlayerAdded");
static_assert(sizeof(MarinerPostgameManager_OnPlayerAdded) == 0x000008, "Wrong size on MarinerPostgameManager_OnPlayerAdded");
static_assert(offsetof(MarinerPostgameManager_OnPlayerAdded, AddedPlayer) == 0x000000, "Member 'MarinerPostgameManager_OnPlayerAdded::AddedPlayer' has a wrong offset!");

// Function Mariner.MarinerPostgameManager.OnPlayerChangedTeam
// 0x0008 (0x0008 - 0x0000)
struct MarinerPostgameManager_OnPlayerChangedTeam final
{
public:
	class AMarinerPlayerState*                    PlayerChangedTeam;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostgameManager_OnPlayerChangedTeam) == 0x000008, "Wrong alignment on MarinerPostgameManager_OnPlayerChangedTeam");
static_assert(sizeof(MarinerPostgameManager_OnPlayerChangedTeam) == 0x000008, "Wrong size on MarinerPostgameManager_OnPlayerChangedTeam");
static_assert(offsetof(MarinerPostgameManager_OnPlayerChangedTeam, PlayerChangedTeam) == 0x000000, "Member 'MarinerPostgameManager_OnPlayerChangedTeam::PlayerChangedTeam' has a wrong offset!");

// Function Mariner.MarinerPostgameManager.OnPlayerRemoved
// 0x0008 (0x0008 - 0x0000)
struct MarinerPostgameManager_OnPlayerRemoved final
{
public:
	class APlayerState*                           RemovedPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostgameManager_OnPlayerRemoved) == 0x000008, "Wrong alignment on MarinerPostgameManager_OnPlayerRemoved");
static_assert(sizeof(MarinerPostgameManager_OnPlayerRemoved) == 0x000008, "Wrong size on MarinerPostgameManager_OnPlayerRemoved");
static_assert(offsetof(MarinerPostgameManager_OnPlayerRemoved, RemovedPlayer) == 0x000000, "Member 'MarinerPostgameManager_OnPlayerRemoved::RemovedPlayer' has a wrong offset!");

// Function Mariner.MarinerPostGameSequence.EnableWorldUI
// 0x0001 (0x0001 - 0x0000)
struct MarinerPostGameSequence_EnableWorldUI final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostGameSequence_EnableWorldUI) == 0x000001, "Wrong alignment on MarinerPostGameSequence_EnableWorldUI");
static_assert(sizeof(MarinerPostGameSequence_EnableWorldUI) == 0x000001, "Wrong size on MarinerPostGameSequence_EnableWorldUI");
static_assert(offsetof(MarinerPostGameSequence_EnableWorldUI, bEnabled) == 0x000000, "Member 'MarinerPostGameSequence_EnableWorldUI::bEnabled' has a wrong offset!");

// Function Mariner.MarinerPostGameSequence.GetParsedQuestsAndBattlePassRewards
// 0x0010 (0x0010 - 0x0000)
struct MarinerPostGameSequence_GetParsedQuestsAndBattlePassRewards final
{
public:
	TArray<struct FMangoReward>                   OutRewards;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostGameSequence_GetParsedQuestsAndBattlePassRewards) == 0x000008, "Wrong alignment on MarinerPostGameSequence_GetParsedQuestsAndBattlePassRewards");
static_assert(sizeof(MarinerPostGameSequence_GetParsedQuestsAndBattlePassRewards) == 0x000010, "Wrong size on MarinerPostGameSequence_GetParsedQuestsAndBattlePassRewards");
static_assert(offsetof(MarinerPostGameSequence_GetParsedQuestsAndBattlePassRewards, OutRewards) == 0x000000, "Member 'MarinerPostGameSequence_GetParsedQuestsAndBattlePassRewards::OutRewards' has a wrong offset!");

// Function Mariner.MarinerPostGameSequence.GetParsedRewards
// 0x0010 (0x0010 - 0x0000)
struct MarinerPostGameSequence_GetParsedRewards final
{
public:
	TArray<struct FMangoReward>                   OutRewards;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostGameSequence_GetParsedRewards) == 0x000008, "Wrong alignment on MarinerPostGameSequence_GetParsedRewards");
static_assert(sizeof(MarinerPostGameSequence_GetParsedRewards) == 0x000010, "Wrong size on MarinerPostGameSequence_GetParsedRewards");
static_assert(offsetof(MarinerPostGameSequence_GetParsedRewards, OutRewards) == 0x000000, "Member 'MarinerPostGameSequence_GetParsedRewards::OutRewards' has a wrong offset!");

// Function Mariner.MarinerPostGameSequence.OnMatchEndDataSet
// 0x0068 (0x0068 - 0x0000)
struct MarinerPostGameSequence_OnMatchEndDataSet final
{
public:
	struct FMatchEnd                              InMatchEndData;                                    // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostGameSequence_OnMatchEndDataSet) == 0x000008, "Wrong alignment on MarinerPostGameSequence_OnMatchEndDataSet");
static_assert(sizeof(MarinerPostGameSequence_OnMatchEndDataSet) == 0x000068, "Wrong size on MarinerPostGameSequence_OnMatchEndDataSet");
static_assert(offsetof(MarinerPostGameSequence_OnMatchEndDataSet, InMatchEndData) == 0x000000, "Member 'MarinerPostGameSequence_OnMatchEndDataSet::InMatchEndData' has a wrong offset!");

// Function Mariner.MarinerPostGameSequence.OnRequestComplete
// 0x0001 (0x0001 - 0x0000)
struct MarinerPostGameSequence_OnRequestComplete final
{
public:
	bool                                          bResultSuccess;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostGameSequence_OnRequestComplete) == 0x000001, "Wrong alignment on MarinerPostGameSequence_OnRequestComplete");
static_assert(sizeof(MarinerPostGameSequence_OnRequestComplete) == 0x000001, "Wrong size on MarinerPostGameSequence_OnRequestComplete");
static_assert(offsetof(MarinerPostGameSequence_OnRequestComplete, bResultSuccess) == 0x000000, "Member 'MarinerPostGameSequence_OnRequestComplete::bResultSuccess' has a wrong offset!");

// Function Mariner.MarinerPostGameSequence.ParseMangoRewards
// 0x0048 (0x0048 - 0x0000)
struct MarinerPostGameSequence_ParseMangoRewards final
{
public:
	struct FMangoRewards                          MangoRewards;                                      // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FMangoReward>                   OutParsedRewards;                                  // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostGameSequence_ParseMangoRewards) == 0x000008, "Wrong alignment on MarinerPostGameSequence_ParseMangoRewards");
static_assert(sizeof(MarinerPostGameSequence_ParseMangoRewards) == 0x000048, "Wrong size on MarinerPostGameSequence_ParseMangoRewards");
static_assert(offsetof(MarinerPostGameSequence_ParseMangoRewards, MangoRewards) == 0x000000, "Member 'MarinerPostGameSequence_ParseMangoRewards::MangoRewards' has a wrong offset!");
static_assert(offsetof(MarinerPostGameSequence_ParseMangoRewards, OutParsedRewards) == 0x000038, "Member 'MarinerPostGameSequence_ParseMangoRewards::OutParsedRewards' has a wrong offset!");

// Function Mariner.MarinerPostGameSequence.RequestMatchResultCamera
// 0x0001 (0x0001 - 0x0000)
struct MarinerPostGameSequence_RequestMatchResultCamera final
{
public:
	EMarinerGameOutcome                           Outcome;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostGameSequence_RequestMatchResultCamera) == 0x000001, "Wrong alignment on MarinerPostGameSequence_RequestMatchResultCamera");
static_assert(sizeof(MarinerPostGameSequence_RequestMatchResultCamera) == 0x000001, "Wrong size on MarinerPostGameSequence_RequestMatchResultCamera");
static_assert(offsetof(MarinerPostGameSequence_RequestMatchResultCamera, Outcome) == 0x000000, "Member 'MarinerPostGameSequence_RequestMatchResultCamera::Outcome' has a wrong offset!");

// Function Mariner.MarinerPostGameSequence.SetAchievementsEnabled
// 0x0001 (0x0001 - 0x0000)
struct MarinerPostGameSequence_SetAchievementsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostGameSequence_SetAchievementsEnabled) == 0x000001, "Wrong alignment on MarinerPostGameSequence_SetAchievementsEnabled");
static_assert(sizeof(MarinerPostGameSequence_SetAchievementsEnabled) == 0x000001, "Wrong size on MarinerPostGameSequence_SetAchievementsEnabled");
static_assert(offsetof(MarinerPostGameSequence_SetAchievementsEnabled, bEnabled) == 0x000000, "Member 'MarinerPostGameSequence_SetAchievementsEnabled::bEnabled' has a wrong offset!");

// Function Mariner.MarinerPostGameSequence.ShowWorldUILocalPlayerOnly
// 0x0001 (0x0001 - 0x0000)
struct MarinerPostGameSequence_ShowWorldUILocalPlayerOnly final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostGameSequence_ShowWorldUILocalPlayerOnly) == 0x000001, "Wrong alignment on MarinerPostGameSequence_ShowWorldUILocalPlayerOnly");
static_assert(sizeof(MarinerPostGameSequence_ShowWorldUILocalPlayerOnly) == 0x000001, "Wrong size on MarinerPostGameSequence_ShowWorldUILocalPlayerOnly");
static_assert(offsetof(MarinerPostGameSequence_ShowWorldUILocalPlayerOnly, bEnabled) == 0x000000, "Member 'MarinerPostGameSequence_ShowWorldUILocalPlayerOnly::bEnabled' has a wrong offset!");

// Function Mariner.MarinerPostGameSequence.GetLocalPlayerPostGameData
// 0x0358 (0x0358 - 0x0000)
struct MarinerPostGameSequence_GetLocalPlayerPostGameData final
{
public:
	struct FMarinerPostGameData                   ReturnValue;                                       // 0x0000(0x0358)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostGameSequence_GetLocalPlayerPostGameData) == 0x000008, "Wrong alignment on MarinerPostGameSequence_GetLocalPlayerPostGameData");
static_assert(sizeof(MarinerPostGameSequence_GetLocalPlayerPostGameData) == 0x000358, "Wrong size on MarinerPostGameSequence_GetLocalPlayerPostGameData");
static_assert(offsetof(MarinerPostGameSequence_GetLocalPlayerPostGameData, ReturnValue) == 0x000000, "Member 'MarinerPostGameSequence_GetLocalPlayerPostGameData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPostGameSequence.GetMatchEndData
// 0x0068 (0x0068 - 0x0000)
struct MarinerPostGameSequence_GetMatchEndData final
{
public:
	struct FMatchEnd                              ReturnValue;                                       // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostGameSequence_GetMatchEndData) == 0x000008, "Wrong alignment on MarinerPostGameSequence_GetMatchEndData");
static_assert(sizeof(MarinerPostGameSequence_GetMatchEndData) == 0x000068, "Wrong size on MarinerPostGameSequence_GetMatchEndData");
static_assert(offsetof(MarinerPostGameSequence_GetMatchEndData, ReturnValue) == 0x000000, "Member 'MarinerPostGameSequence_GetMatchEndData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPostGameSequence.GetMatchResultLocalQuests
// 0x0018 (0x0018 - 0x0000)
struct MarinerPostGameSequence_GetMatchResultLocalQuests final
{
public:
	TArray<struct FMarinerQuestProgress>          OutQuests;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19BD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPostGameSequence_GetMatchResultLocalQuests) == 0x000008, "Wrong alignment on MarinerPostGameSequence_GetMatchResultLocalQuests");
static_assert(sizeof(MarinerPostGameSequence_GetMatchResultLocalQuests) == 0x000018, "Wrong size on MarinerPostGameSequence_GetMatchResultLocalQuests");
static_assert(offsetof(MarinerPostGameSequence_GetMatchResultLocalQuests, OutQuests) == 0x000000, "Member 'MarinerPostGameSequence_GetMatchResultLocalQuests::OutQuests' has a wrong offset!");
static_assert(offsetof(MarinerPostGameSequence_GetMatchResultLocalQuests, ReturnValue) == 0x000010, "Member 'MarinerPostGameSequence_GetMatchResultLocalQuests::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPostGameSequence.GetMatchResultLocalQuestsWithProgress
// 0x0018 (0x0018 - 0x0000)
struct MarinerPostGameSequence_GetMatchResultLocalQuestsWithProgress final
{
public:
	TArray<struct FMarinerQuestProgress>          OutQuests;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19BE[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerPostGameSequence_GetMatchResultLocalQuestsWithProgress) == 0x000008, "Wrong alignment on MarinerPostGameSequence_GetMatchResultLocalQuestsWithProgress");
static_assert(sizeof(MarinerPostGameSequence_GetMatchResultLocalQuestsWithProgress) == 0x000018, "Wrong size on MarinerPostGameSequence_GetMatchResultLocalQuestsWithProgress");
static_assert(offsetof(MarinerPostGameSequence_GetMatchResultLocalQuestsWithProgress, OutQuests) == 0x000000, "Member 'MarinerPostGameSequence_GetMatchResultLocalQuestsWithProgress::OutQuests' has a wrong offset!");
static_assert(offsetof(MarinerPostGameSequence_GetMatchResultLocalQuestsWithProgress, ReturnValue) == 0x000010, "Member 'MarinerPostGameSequence_GetMatchResultLocalQuestsWithProgress::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPostGameSequence.GetMatchResultResponse
// 0x0010 (0x0010 - 0x0000)
struct MarinerPostGameSequence_GetMatchResultResponse final
{
public:
	struct FMangoMatchResultResponse              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostGameSequence_GetMatchResultResponse) == 0x000008, "Wrong alignment on MarinerPostGameSequence_GetMatchResultResponse");
static_assert(sizeof(MarinerPostGameSequence_GetMatchResultResponse) == 0x000010, "Wrong size on MarinerPostGameSequence_GetMatchResultResponse");
static_assert(offsetof(MarinerPostGameSequence_GetMatchResultResponse, ReturnValue) == 0x000000, "Member 'MarinerPostGameSequence_GetMatchResultResponse::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPostGameSequence.IsRequestComplete
// 0x0002 (0x0002 - 0x0000)
struct MarinerPostGameSequence_IsRequestComplete final
{
public:
	bool                                          bResultSuccess;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPostGameSequence_IsRequestComplete) == 0x000001, "Wrong alignment on MarinerPostGameSequence_IsRequestComplete");
static_assert(sizeof(MarinerPostGameSequence_IsRequestComplete) == 0x000002, "Wrong size on MarinerPostGameSequence_IsRequestComplete");
static_assert(offsetof(MarinerPostGameSequence_IsRequestComplete, bResultSuccess) == 0x000000, "Member 'MarinerPostGameSequence_IsRequestComplete::bResultSuccess' has a wrong offset!");
static_assert(offsetof(MarinerPostGameSequence_IsRequestComplete, ReturnValue) == 0x000001, "Member 'MarinerPostGameSequence_IsRequestComplete::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPregameManager.GetInstance
// 0x0010 (0x0010 - 0x0000)
struct MarinerPregameManager_GetInstance final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerPregameManager*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPregameManager_GetInstance) == 0x000008, "Wrong alignment on MarinerPregameManager_GetInstance");
static_assert(sizeof(MarinerPregameManager_GetInstance) == 0x000010, "Wrong size on MarinerPregameManager_GetInstance");
static_assert(offsetof(MarinerPregameManager_GetInstance, WorldContextObject) == 0x000000, "Member 'MarinerPregameManager_GetInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerPregameManager_GetInstance, ReturnValue) == 0x000008, "Member 'MarinerPregameManager_GetInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPregameManager.OnLocalPlayerStateReplicated
// 0x0008 (0x0008 - 0x0000)
struct MarinerPregameManager_OnLocalPlayerStateReplicated final
{
public:
	class AMarinerPlayerController*               ControllerHostingState;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPregameManager_OnLocalPlayerStateReplicated) == 0x000008, "Wrong alignment on MarinerPregameManager_OnLocalPlayerStateReplicated");
static_assert(sizeof(MarinerPregameManager_OnLocalPlayerStateReplicated) == 0x000008, "Wrong size on MarinerPregameManager_OnLocalPlayerStateReplicated");
static_assert(offsetof(MarinerPregameManager_OnLocalPlayerStateReplicated, ControllerHostingState) == 0x000000, "Member 'MarinerPregameManager_OnLocalPlayerStateReplicated::ControllerHostingState' has a wrong offset!");

// Function Mariner.MarinerPregameManager.OnPlayerAdded
// 0x0008 (0x0008 - 0x0000)
struct MarinerPregameManager_OnPlayerAdded final
{
public:
	class APlayerState*                           AddedPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPregameManager_OnPlayerAdded) == 0x000008, "Wrong alignment on MarinerPregameManager_OnPlayerAdded");
static_assert(sizeof(MarinerPregameManager_OnPlayerAdded) == 0x000008, "Wrong size on MarinerPregameManager_OnPlayerAdded");
static_assert(offsetof(MarinerPregameManager_OnPlayerAdded, AddedPlayer) == 0x000000, "Member 'MarinerPregameManager_OnPlayerAdded::AddedPlayer' has a wrong offset!");

// Function Mariner.MarinerPregameManager.OnPlayerChangedTeam
// 0x0008 (0x0008 - 0x0000)
struct MarinerPregameManager_OnPlayerChangedTeam final
{
public:
	class AMarinerPlayerState*                    PlayerChangedTeam;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPregameManager_OnPlayerChangedTeam) == 0x000008, "Wrong alignment on MarinerPregameManager_OnPlayerChangedTeam");
static_assert(sizeof(MarinerPregameManager_OnPlayerChangedTeam) == 0x000008, "Wrong size on MarinerPregameManager_OnPlayerChangedTeam");
static_assert(offsetof(MarinerPregameManager_OnPlayerChangedTeam, PlayerChangedTeam) == 0x000000, "Member 'MarinerPregameManager_OnPlayerChangedTeam::PlayerChangedTeam' has a wrong offset!");

// Function Mariner.MarinerPregameManager.OnPlayerRemoved
// 0x0008 (0x0008 - 0x0000)
struct MarinerPregameManager_OnPlayerRemoved final
{
public:
	class APlayerState*                           RemovedPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPregameManager_OnPlayerRemoved) == 0x000008, "Wrong alignment on MarinerPregameManager_OnPlayerRemoved");
static_assert(sizeof(MarinerPregameManager_OnPlayerRemoved) == 0x000008, "Wrong size on MarinerPregameManager_OnPlayerRemoved");
static_assert(offsetof(MarinerPregameManager_OnPlayerRemoved, RemovedPlayer) == 0x000000, "Member 'MarinerPregameManager_OnPlayerRemoved::RemovedPlayer' has a wrong offset!");

// Function Mariner.MarinerPregameManager.OnPregameStateChanged
// 0x0008 (0x0008 - 0x0000)
struct MarinerPregameManager_OnPregameStateChanged final
{
public:
	class FName                                   NewState;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPregameManager_OnPregameStateChanged) == 0x000004, "Wrong alignment on MarinerPregameManager_OnPregameStateChanged");
static_assert(sizeof(MarinerPregameManager_OnPregameStateChanged) == 0x000008, "Wrong size on MarinerPregameManager_OnPregameStateChanged");
static_assert(offsetof(MarinerPregameManager_OnPregameStateChanged, NewState) == 0x000000, "Member 'MarinerPregameManager_OnPregameStateChanged::NewState' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.Dedi_OnArtifactLoaded
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_Dedi_OnArtifactLoaded final
{
public:
	TSubclassOf<class AMarinerCharacter>          LoadedCharacterClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_Dedi_OnArtifactLoaded) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_Dedi_OnArtifactLoaded");
static_assert(sizeof(MarinerProfileObjectManager_Dedi_OnArtifactLoaded) == 0x000008, "Wrong size on MarinerProfileObjectManager_Dedi_OnArtifactLoaded");
static_assert(offsetof(MarinerProfileObjectManager_Dedi_OnArtifactLoaded, LoadedCharacterClass) == 0x000000, "Member 'MarinerProfileObjectManager_Dedi_OnArtifactLoaded::LoadedCharacterClass' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetChatEmoteByInput
// 0x0010 (0x0010 - 0x0000)
struct MarinerProfileObjectManager_GetChatEmoteByInput final
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19C4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerChatEmote*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetChatEmoteByInput) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetChatEmoteByInput");
static_assert(sizeof(MarinerProfileObjectManager_GetChatEmoteByInput) == 0x000010, "Wrong size on MarinerProfileObjectManager_GetChatEmoteByInput");
static_assert(offsetof(MarinerProfileObjectManager_GetChatEmoteByInput, InputAction) == 0x000000, "Member 'MarinerProfileObjectManager_GetChatEmoteByInput::InputAction' has a wrong offset!");
static_assert(offsetof(MarinerProfileObjectManager_GetChatEmoteByInput, ReturnValue) == 0x000008, "Member 'MarinerProfileObjectManager_GetChatEmoteByInput::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetPregameReadyEmoteByInput
// 0x0010 (0x0010 - 0x0000)
struct MarinerProfileObjectManager_GetPregameReadyEmoteByInput final
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19C5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetPregameReadyEmoteByInput) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetPregameReadyEmoteByInput");
static_assert(sizeof(MarinerProfileObjectManager_GetPregameReadyEmoteByInput) == 0x000010, "Wrong size on MarinerProfileObjectManager_GetPregameReadyEmoteByInput");
static_assert(offsetof(MarinerProfileObjectManager_GetPregameReadyEmoteByInput, InputAction) == 0x000000, "Member 'MarinerProfileObjectManager_GetPregameReadyEmoteByInput::InputAction' has a wrong offset!");
static_assert(offsetof(MarinerProfileObjectManager_GetPregameReadyEmoteByInput, ReturnValue) == 0x000008, "Member 'MarinerProfileObjectManager_GetPregameReadyEmoteByInput::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.Init
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_Init final
{
public:
	class AMarinerPlayerState*                    NewOwningPlayerState;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_Init) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_Init");
static_assert(sizeof(MarinerProfileObjectManager_Init) == 0x000008, "Wrong size on MarinerProfileObjectManager_Init");
static_assert(offsetof(MarinerProfileObjectManager_Init, NewOwningPlayerState) == 0x000000, "Member 'MarinerProfileObjectManager_Init::NewOwningPlayerState' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.MulticastSetDebugArtifact
// 0x0010 (0x0010 - 0x0000)
struct MarinerProfileObjectManager_MulticastSetDebugArtifact final
{
public:
	class FString                                 ArtifactPath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_MulticastSetDebugArtifact) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_MulticastSetDebugArtifact");
static_assert(sizeof(MarinerProfileObjectManager_MulticastSetDebugArtifact) == 0x000010, "Wrong size on MarinerProfileObjectManager_MulticastSetDebugArtifact");
static_assert(offsetof(MarinerProfileObjectManager_MulticastSetDebugArtifact, ArtifactPath) == 0x000000, "Member 'MarinerProfileObjectManager_MulticastSetDebugArtifact::ArtifactPath' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.MulticastSetDebugChatEmote
// 0x0018 (0x0018 - 0x0000)
struct MarinerProfileObjectManager_MulticastSetDebugChatEmote final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19C6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChatEmotePath;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_MulticastSetDebugChatEmote) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_MulticastSetDebugChatEmote");
static_assert(sizeof(MarinerProfileObjectManager_MulticastSetDebugChatEmote) == 0x000018, "Wrong size on MarinerProfileObjectManager_MulticastSetDebugChatEmote");
static_assert(offsetof(MarinerProfileObjectManager_MulticastSetDebugChatEmote, Slot) == 0x000000, "Member 'MarinerProfileObjectManager_MulticastSetDebugChatEmote::Slot' has a wrong offset!");
static_assert(offsetof(MarinerProfileObjectManager_MulticastSetDebugChatEmote, ChatEmotePath) == 0x000008, "Member 'MarinerProfileObjectManager_MulticastSetDebugChatEmote::ChatEmotePath' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.MulticastSetDebugMegaBlast
// 0x0010 (0x0010 - 0x0000)
struct MarinerProfileObjectManager_MulticastSetDebugMegaBlast final
{
public:
	class FString                                 MegaBlastPath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_MulticastSetDebugMegaBlast) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_MulticastSetDebugMegaBlast");
static_assert(sizeof(MarinerProfileObjectManager_MulticastSetDebugMegaBlast) == 0x000010, "Wrong size on MarinerProfileObjectManager_MulticastSetDebugMegaBlast");
static_assert(offsetof(MarinerProfileObjectManager_MulticastSetDebugMegaBlast, MegaBlastPath) == 0x000000, "Member 'MarinerProfileObjectManager_MulticastSetDebugMegaBlast::MegaBlastPath' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.MulticastSetDebugPreGameEmote
// 0x0018 (0x0018 - 0x0000)
struct MarinerProfileObjectManager_MulticastSetDebugPreGameEmote final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19C7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreGameEmotePath;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_MulticastSetDebugPreGameEmote) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_MulticastSetDebugPreGameEmote");
static_assert(sizeof(MarinerProfileObjectManager_MulticastSetDebugPreGameEmote) == 0x000018, "Wrong size on MarinerProfileObjectManager_MulticastSetDebugPreGameEmote");
static_assert(offsetof(MarinerProfileObjectManager_MulticastSetDebugPreGameEmote, Slot) == 0x000000, "Member 'MarinerProfileObjectManager_MulticastSetDebugPreGameEmote::Slot' has a wrong offset!");
static_assert(offsetof(MarinerProfileObjectManager_MulticastSetDebugPreGameEmote, PreGameEmotePath) == 0x000008, "Member 'MarinerProfileObjectManager_MulticastSetDebugPreGameEmote::PreGameEmotePath' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.MulticastSetDebugReturnTrail
// 0x0010 (0x0010 - 0x0000)
struct MarinerProfileObjectManager_MulticastSetDebugReturnTrail final
{
public:
	class FString                                 ReturnTrailPath;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_MulticastSetDebugReturnTrail) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_MulticastSetDebugReturnTrail");
static_assert(sizeof(MarinerProfileObjectManager_MulticastSetDebugReturnTrail) == 0x000010, "Wrong size on MarinerProfileObjectManager_MulticastSetDebugReturnTrail");
static_assert(offsetof(MarinerProfileObjectManager_MulticastSetDebugReturnTrail, ReturnTrailPath) == 0x000000, "Member 'MarinerProfileObjectManager_MulticastSetDebugReturnTrail::ReturnTrailPath' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.MulticastSetDebugSkin
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_MulticastSetDebugSkin final
{
public:
	class UMarinerSkinCollectionDataAsset*        SkinToLoad;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_MulticastSetDebugSkin) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_MulticastSetDebugSkin");
static_assert(sizeof(MarinerProfileObjectManager_MulticastSetDebugSkin) == 0x000008, "Wrong size on MarinerProfileObjectManager_MulticastSetDebugSkin");
static_assert(offsetof(MarinerProfileObjectManager_MulticastSetDebugSkin, SkinToLoad) == 0x000000, "Member 'MarinerProfileObjectManager_MulticastSetDebugSkin::SkinToLoad' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.MulticastSetDebugVictoryPose
// 0x0010 (0x0010 - 0x0000)
struct MarinerProfileObjectManager_MulticastSetDebugVictoryPose final
{
public:
	class FString                                 VictoryPosePath;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_MulticastSetDebugVictoryPose) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_MulticastSetDebugVictoryPose");
static_assert(sizeof(MarinerProfileObjectManager_MulticastSetDebugVictoryPose) == 0x000010, "Wrong size on MarinerProfileObjectManager_MulticastSetDebugVictoryPose");
static_assert(offsetof(MarinerProfileObjectManager_MulticastSetDebugVictoryPose, VictoryPosePath) == 0x000000, "Member 'MarinerProfileObjectManager_MulticastSetDebugVictoryPose::VictoryPosePath' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.OnBotTreatedAsPlayerCharacterObjectsLoaded
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_OnBotTreatedAsPlayerCharacterObjectsLoaded final
{
public:
	TSubclassOf<class AMarinerCharacter>          LoadedCharacterClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_OnBotTreatedAsPlayerCharacterObjectsLoaded) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_OnBotTreatedAsPlayerCharacterObjectsLoaded");
static_assert(sizeof(MarinerProfileObjectManager_OnBotTreatedAsPlayerCharacterObjectsLoaded) == 0x000008, "Wrong size on MarinerProfileObjectManager_OnBotTreatedAsPlayerCharacterObjectsLoaded");
static_assert(offsetof(MarinerProfileObjectManager_OnBotTreatedAsPlayerCharacterObjectsLoaded, LoadedCharacterClass) == 0x000000, "Member 'MarinerProfileObjectManager_OnBotTreatedAsPlayerCharacterObjectsLoaded::LoadedCharacterClass' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.OnCharacterObjectsLoaded
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_OnCharacterObjectsLoaded final
{
public:
	TSubclassOf<class AMarinerCharacter>          LoadedCharacterClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_OnCharacterObjectsLoaded) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_OnCharacterObjectsLoaded");
static_assert(sizeof(MarinerProfileObjectManager_OnCharacterObjectsLoaded) == 0x000008, "Wrong size on MarinerProfileObjectManager_OnCharacterObjectsLoaded");
static_assert(offsetof(MarinerProfileObjectManager_OnCharacterObjectsLoaded, LoadedCharacterClass) == 0x000000, "Member 'MarinerProfileObjectManager_OnCharacterObjectsLoaded::LoadedCharacterClass' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.OnOwnerMangoUserUpdated
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_OnOwnerMangoUserUpdated final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_OnOwnerMangoUserUpdated) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_OnOwnerMangoUserUpdated");
static_assert(sizeof(MarinerProfileObjectManager_OnOwnerMangoUserUpdated) == 0x000008, "Wrong size on MarinerProfileObjectManager_OnOwnerMangoUserUpdated");
static_assert(offsetof(MarinerProfileObjectManager_OnOwnerMangoUserUpdated, PlayerState) == 0x000000, "Member 'MarinerProfileObjectManager_OnOwnerMangoUserUpdated::PlayerState' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.OnPawnPossessed
// 0x0010 (0x0010 - 0x0000)
struct MarinerProfileObjectManager_OnPawnPossessed final
{
public:
	class AMarinerPlayerController*               PossessingController;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  PossessedPawn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_OnPawnPossessed) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_OnPawnPossessed");
static_assert(sizeof(MarinerProfileObjectManager_OnPawnPossessed) == 0x000010, "Wrong size on MarinerProfileObjectManager_OnPawnPossessed");
static_assert(offsetof(MarinerProfileObjectManager_OnPawnPossessed, PossessingController) == 0x000000, "Member 'MarinerProfileObjectManager_OnPawnPossessed::PossessingController' has a wrong offset!");
static_assert(offsetof(MarinerProfileObjectManager_OnPawnPossessed, PossessedPawn) == 0x000008, "Member 'MarinerProfileObjectManager_OnPawnPossessed::PossessedPawn' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.OnPlayerLeftGame
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_OnPlayerLeftGame final
{
public:
	class APlayerState*                           LeavingPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_OnPlayerLeftGame) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_OnPlayerLeftGame");
static_assert(sizeof(MarinerProfileObjectManager_OnPlayerLeftGame) == 0x000008, "Wrong size on MarinerProfileObjectManager_OnPlayerLeftGame");
static_assert(offsetof(MarinerProfileObjectManager_OnPlayerLeftGame, LeavingPlayerState) == 0x000000, "Member 'MarinerProfileObjectManager_OnPlayerLeftGame::LeavingPlayerState' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.OnSelectedCharacterChanged
// 0x0010 (0x0010 - 0x0000)
struct MarinerProfileObjectManager_OnSelectedCharacterChanged final
{
public:
	class FString                                 RequestedCharacterData;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_OnSelectedCharacterChanged) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_OnSelectedCharacterChanged");
static_assert(sizeof(MarinerProfileObjectManager_OnSelectedCharacterChanged) == 0x000010, "Wrong size on MarinerProfileObjectManager_OnSelectedCharacterChanged");
static_assert(offsetof(MarinerProfileObjectManager_OnSelectedCharacterChanged, RequestedCharacterData) == 0x000000, "Member 'MarinerProfileObjectManager_OnSelectedCharacterChanged::RequestedCharacterData' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.OnSkinAnimBPLoaded
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_OnSkinAnimBPLoaded final
{
public:
	TSubclassOf<class AMarinerCharacter>          LoadedCharacterClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_OnSkinAnimBPLoaded) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_OnSkinAnimBPLoaded");
static_assert(sizeof(MarinerProfileObjectManager_OnSkinAnimBPLoaded) == 0x000008, "Wrong size on MarinerProfileObjectManager_OnSkinAnimBPLoaded");
static_assert(offsetof(MarinerProfileObjectManager_OnSkinAnimBPLoaded, LoadedCharacterClass) == 0x000000, "Member 'MarinerProfileObjectManager_OnSkinAnimBPLoaded::LoadedCharacterClass' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.OnSkinCollectionMembersLoaded
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_OnSkinCollectionMembersLoaded final
{
public:
	TSubclassOf<class AMarinerCharacter>          LoadedCharacterClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_OnSkinCollectionMembersLoaded) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_OnSkinCollectionMembersLoaded");
static_assert(sizeof(MarinerProfileObjectManager_OnSkinCollectionMembersLoaded) == 0x000008, "Wrong size on MarinerProfileObjectManager_OnSkinCollectionMembersLoaded");
static_assert(offsetof(MarinerProfileObjectManager_OnSkinCollectionMembersLoaded, LoadedCharacterClass) == 0x000000, "Member 'MarinerProfileObjectManager_OnSkinCollectionMembersLoaded::LoadedCharacterClass' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.RegisterProxyManagersToNotify
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_RegisterProxyManagersToNotify final
{
public:
	class UMarinerProfileObjectManager*           ProxyProfile;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_RegisterProxyManagersToNotify) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_RegisterProxyManagersToNotify");
static_assert(sizeof(MarinerProfileObjectManager_RegisterProxyManagersToNotify) == 0x000008, "Wrong size on MarinerProfileObjectManager_RegisterProxyManagersToNotify");
static_assert(offsetof(MarinerProfileObjectManager_RegisterProxyManagersToNotify, ProxyProfile) == 0x000000, "Member 'MarinerProfileObjectManager_RegisterProxyManagersToNotify::ProxyProfile' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.SetIsUsingProxyPlayerState
// 0x0010 (0x0010 - 0x0000)
struct MarinerProfileObjectManager_SetIsUsingProxyPlayerState final
{
public:
	bool                                          bIsProxy;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19C8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerProfileObjectManager*           SourcePOM;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_SetIsUsingProxyPlayerState) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_SetIsUsingProxyPlayerState");
static_assert(sizeof(MarinerProfileObjectManager_SetIsUsingProxyPlayerState) == 0x000010, "Wrong size on MarinerProfileObjectManager_SetIsUsingProxyPlayerState");
static_assert(offsetof(MarinerProfileObjectManager_SetIsUsingProxyPlayerState, bIsProxy) == 0x000000, "Member 'MarinerProfileObjectManager_SetIsUsingProxyPlayerState::bIsProxy' has a wrong offset!");
static_assert(offsetof(MarinerProfileObjectManager_SetIsUsingProxyPlayerState, SourcePOM) == 0x000008, "Member 'MarinerProfileObjectManager_SetIsUsingProxyPlayerState::SourcePOM' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.SetupBindings
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_SetupBindings final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_SetupBindings) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_SetupBindings");
static_assert(sizeof(MarinerProfileObjectManager_SetupBindings) == 0x000008, "Wrong size on MarinerProfileObjectManager_SetupBindings");
static_assert(offsetof(MarinerProfileObjectManager_SetupBindings, PlayerState) == 0x000000, "Member 'MarinerProfileObjectManager_SetupBindings::PlayerState' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetAbilitySkins
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetAbilitySkins final
{
public:
	class UMarinerAbilitySkinMap*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetAbilitySkins) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetAbilitySkins");
static_assert(sizeof(MarinerProfileObjectManager_GetAbilitySkins) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetAbilitySkins");
static_assert(offsetof(MarinerProfileObjectManager_GetAbilitySkins, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetAbilitySkins::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetAnimBP
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetAnimBP final
{
public:
	TSubclassOf<class UAnimInstance>              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetAnimBP) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetAnimBP");
static_assert(sizeof(MarinerProfileObjectManager_GetAnimBP) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetAnimBP");
static_assert(offsetof(MarinerProfileObjectManager_GetAnimBP, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetAnimBP::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetArtifact
// 0x0010 (0x0010 - 0x0000)
struct MarinerProfileObjectManager_GetArtifact final
{
public:
	EMangoItemType                                ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19C9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerArtifactDataAsset*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetArtifact) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetArtifact");
static_assert(sizeof(MarinerProfileObjectManager_GetArtifact) == 0x000010, "Wrong size on MarinerProfileObjectManager_GetArtifact");
static_assert(offsetof(MarinerProfileObjectManager_GetArtifact, ItemType) == 0x000000, "Member 'MarinerProfileObjectManager_GetArtifact::ItemType' has a wrong offset!");
static_assert(offsetof(MarinerProfileObjectManager_GetArtifact, ReturnValue) == 0x000008, "Member 'MarinerProfileObjectManager_GetArtifact::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetArtifacts
// 0x0050 (0x0050 - 0x0000)
struct MarinerProfileObjectManager_GetArtifacts final
{
public:
	TMap<EMangoItemType, class UMarinerArtifactDataAsset*> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetArtifacts) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetArtifacts");
static_assert(sizeof(MarinerProfileObjectManager_GetArtifacts) == 0x000050, "Wrong size on MarinerProfileObjectManager_GetArtifacts");
static_assert(offsetof(MarinerProfileObjectManager_GetArtifacts, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetArtifacts::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetChatEmotes
// 0x0050 (0x0050 - 0x0000)
struct MarinerProfileObjectManager_GetChatEmotes final
{
public:
	TMap<EMarinerInputActions, class UMarinerChatEmote*> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetChatEmotes) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetChatEmotes");
static_assert(sizeof(MarinerProfileObjectManager_GetChatEmotes) == 0x000050, "Wrong size on MarinerProfileObjectManager_GetChatEmotes");
static_assert(offsetof(MarinerProfileObjectManager_GetChatEmotes, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetChatEmotes::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetCueSkins
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetCueSkins final
{
public:
	class UMarinerCueSkinMap*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetCueSkins) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetCueSkins");
static_assert(sizeof(MarinerProfileObjectManager_GetCueSkins) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetCueSkins");
static_assert(offsetof(MarinerProfileObjectManager_GetCueSkins, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetCueSkins::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetFrontendUIData
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetFrontendUIData final
{
public:
	class UMarinerCharacterFrontendSkinUIData*    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetFrontendUIData) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetFrontendUIData");
static_assert(sizeof(MarinerProfileObjectManager_GetFrontendUIData) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetFrontendUIData");
static_assert(offsetof(MarinerProfileObjectManager_GetFrontendUIData, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetFrontendUIData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetMegaBlast
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetMegaBlast final
{
public:
	class UMarinerMegaBlastDataAsset*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetMegaBlast) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetMegaBlast");
static_assert(sizeof(MarinerProfileObjectManager_GetMegaBlast) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetMegaBlast");
static_assert(offsetof(MarinerProfileObjectManager_GetMegaBlast, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetMegaBlast::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetPostGameVictoryPose
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetPostGameVictoryPose final
{
public:
	class UMarinerPostGameVictoryPose*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetPostGameVictoryPose) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetPostGameVictoryPose");
static_assert(sizeof(MarinerProfileObjectManager_GetPostGameVictoryPose) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetPostGameVictoryPose");
static_assert(offsetof(MarinerProfileObjectManager_GetPostGameVictoryPose, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetPostGameVictoryPose::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetReturnTrail
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetReturnTrail final
{
public:
	class UMarinerReturnTrailDataAsset*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetReturnTrail) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetReturnTrail");
static_assert(sizeof(MarinerProfileObjectManager_GetReturnTrail) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetReturnTrail");
static_assert(offsetof(MarinerProfileObjectManager_GetReturnTrail, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetReturnTrail::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetSkinCollection
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetSkinCollection final
{
public:
	class UMarinerSkinCollectionDataAsset*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetSkinCollection) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetSkinCollection");
static_assert(sizeof(MarinerProfileObjectManager_GetSkinCollection) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetSkinCollection");
static_assert(offsetof(MarinerProfileObjectManager_GetSkinCollection, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetSkinCollection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetSkinDataAsset
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetSkinDataAsset final
{
public:
	class UMarinerSkinDataAsset*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetSkinDataAsset) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetSkinDataAsset");
static_assert(sizeof(MarinerProfileObjectManager_GetSkinDataAsset) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetSkinDataAsset");
static_assert(offsetof(MarinerProfileObjectManager_GetSkinDataAsset, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetSkinDataAsset::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetSkinUIData
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetSkinUIData final
{
public:
	class UMarinerSkinUIData*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetSkinUIData) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetSkinUIData");
static_assert(sizeof(MarinerProfileObjectManager_GetSkinUIData) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetSkinUIData");
static_assert(offsetof(MarinerProfileObjectManager_GetSkinUIData, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetSkinUIData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetTotemBorder
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetTotemBorder final
{
public:
	class UMarinerRocketTotemBorderDataAsset*     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetTotemBorder) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetTotemBorder");
static_assert(sizeof(MarinerProfileObjectManager_GetTotemBorder) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetTotemBorder");
static_assert(offsetof(MarinerProfileObjectManager_GetTotemBorder, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetTotemBorder::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetTotemCompanion
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetTotemCompanion final
{
public:
	class UMarinerRocketTotemCompanionDataAsset*  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetTotemCompanion) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetTotemCompanion");
static_assert(sizeof(MarinerProfileObjectManager_GetTotemCompanion) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetTotemCompanion");
static_assert(offsetof(MarinerProfileObjectManager_GetTotemCompanion, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetTotemCompanion::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetTotemPattern
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetTotemPattern final
{
public:
	class UMarinerRocketTotemPatternDataAsset*    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetTotemPattern) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetTotemPattern");
static_assert(sizeof(MarinerProfileObjectManager_GetTotemPattern) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetTotemPattern");
static_assert(offsetof(MarinerProfileObjectManager_GetTotemPattern, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetTotemPattern::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetTotemShape
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetTotemShape final
{
public:
	class UMarinerRocketTotemShapeDataAsset*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetTotemShape) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetTotemShape");
static_assert(sizeof(MarinerProfileObjectManager_GetTotemShape) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetTotemShape");
static_assert(offsetof(MarinerProfileObjectManager_GetTotemShape, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetTotemShape::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetTotemStand
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetTotemStand final
{
public:
	class UMarinerRocketTotemStandDataAsset*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetTotemStand) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetTotemStand");
static_assert(sizeof(MarinerProfileObjectManager_GetTotemStand) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetTotemStand");
static_assert(offsetof(MarinerProfileObjectManager_GetTotemStand, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetTotemStand::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetTotemSymbol
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetTotemSymbol final
{
public:
	class UMarinerRocketTotemSymbolsDataAsset*    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetTotemSymbol) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetTotemSymbol");
static_assert(sizeof(MarinerProfileObjectManager_GetTotemSymbol) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetTotemSymbol");
static_assert(offsetof(MarinerProfileObjectManager_GetTotemSymbol, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetTotemSymbol::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProfileObjectManager.GetTotemVFX
// 0x0008 (0x0008 - 0x0000)
struct MarinerProfileObjectManager_GetTotemVFX final
{
public:
	class UMarinerRocketTotemVFXDataAsset*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProfileObjectManager_GetTotemVFX) == 0x000008, "Wrong alignment on MarinerProfileObjectManager_GetTotemVFX");
static_assert(sizeof(MarinerProfileObjectManager_GetTotemVFX) == 0x000008, "Wrong size on MarinerProfileObjectManager_GetTotemVFX");
static_assert(offsetof(MarinerProfileObjectManager_GetTotemVFX, ReturnValue) == 0x000000, "Member 'MarinerProfileObjectManager_GetTotemVFX::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProgressionRewardPreview.InitAnimatedCharacterProgressionPreview
// 0x0028 (0x0028 - 0x0000)
struct MarinerProgressionRewardPreview_InitAnimatedCharacterProgressionPreview final
{
public:
	const class UMarinerPlayableCharacter*        Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoMatchCharacterProgression        CharacterProgression;                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DurationPerLevelInSeconds;                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalDelayInSeconds;                               // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProgressionRewardPreview_InitAnimatedCharacterProgressionPreview) == 0x000008, "Wrong alignment on MarinerProgressionRewardPreview_InitAnimatedCharacterProgressionPreview");
static_assert(sizeof(MarinerProgressionRewardPreview_InitAnimatedCharacterProgressionPreview) == 0x000028, "Wrong size on MarinerProgressionRewardPreview_InitAnimatedCharacterProgressionPreview");
static_assert(offsetof(MarinerProgressionRewardPreview_InitAnimatedCharacterProgressionPreview, Character) == 0x000000, "Member 'MarinerProgressionRewardPreview_InitAnimatedCharacterProgressionPreview::Character' has a wrong offset!");
static_assert(offsetof(MarinerProgressionRewardPreview_InitAnimatedCharacterProgressionPreview, CharacterProgression) == 0x000008, "Member 'MarinerProgressionRewardPreview_InitAnimatedCharacterProgressionPreview::CharacterProgression' has a wrong offset!");
static_assert(offsetof(MarinerProgressionRewardPreview_InitAnimatedCharacterProgressionPreview, DurationPerLevelInSeconds) == 0x000020, "Member 'MarinerProgressionRewardPreview_InitAnimatedCharacterProgressionPreview::DurationPerLevelInSeconds' has a wrong offset!");
static_assert(offsetof(MarinerProgressionRewardPreview_InitAnimatedCharacterProgressionPreview, FinalDelayInSeconds) == 0x000024, "Member 'MarinerProgressionRewardPreview_InitAnimatedCharacterProgressionPreview::FinalDelayInSeconds' has a wrong offset!");

// Function Mariner.MarinerProgressionRewardPreview.InitCharacterProgressionPreview
// 0x0028 (0x0028 - 0x0000)
struct MarinerProgressionRewardPreview_InitCharacterProgressionPreview final
{
public:
	const class UMarinerPlayableCharacter*        Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoMatchCharacterProgression        CharacterProgression;                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bShowEndValues;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19CC[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerProgressionRewardPreview_InitCharacterProgressionPreview) == 0x000008, "Wrong alignment on MarinerProgressionRewardPreview_InitCharacterProgressionPreview");
static_assert(sizeof(MarinerProgressionRewardPreview_InitCharacterProgressionPreview) == 0x000028, "Wrong size on MarinerProgressionRewardPreview_InitCharacterProgressionPreview");
static_assert(offsetof(MarinerProgressionRewardPreview_InitCharacterProgressionPreview, Character) == 0x000000, "Member 'MarinerProgressionRewardPreview_InitCharacterProgressionPreview::Character' has a wrong offset!");
static_assert(offsetof(MarinerProgressionRewardPreview_InitCharacterProgressionPreview, CharacterProgression) == 0x000008, "Member 'MarinerProgressionRewardPreview_InitCharacterProgressionPreview::CharacterProgression' has a wrong offset!");
static_assert(offsetof(MarinerProgressionRewardPreview_InitCharacterProgressionPreview, bShowEndValues) == 0x000020, "Member 'MarinerProgressionRewardPreview_InitCharacterProgressionPreview::bShowEndValues' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.AuthorityAdvanceToState
// 0x0002 (0x0002 - 0x0000)
struct MarinerProjectileFlux_AuthorityAdvanceToState final
{
public:
	EMarinerFluxProjectileState                   RequestedState;                                    // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_AuthorityAdvanceToState) == 0x000001, "Wrong alignment on MarinerProjectileFlux_AuthorityAdvanceToState");
static_assert(sizeof(MarinerProjectileFlux_AuthorityAdvanceToState) == 0x000002, "Wrong size on MarinerProjectileFlux_AuthorityAdvanceToState");
static_assert(offsetof(MarinerProjectileFlux_AuthorityAdvanceToState, RequestedState) == 0x000000, "Member 'MarinerProjectileFlux_AuthorityAdvanceToState::RequestedState' has a wrong offset!");
static_assert(offsetof(MarinerProjectileFlux_AuthorityAdvanceToState, ReturnValue) == 0x000001, "Member 'MarinerProjectileFlux_AuthorityAdvanceToState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.AuthorityFallbackToState
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectileFlux_AuthorityFallbackToState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_AuthorityFallbackToState) == 0x000001, "Wrong alignment on MarinerProjectileFlux_AuthorityFallbackToState");
static_assert(sizeof(MarinerProjectileFlux_AuthorityFallbackToState) == 0x000001, "Wrong size on MarinerProjectileFlux_AuthorityFallbackToState");
static_assert(offsetof(MarinerProjectileFlux_AuthorityFallbackToState, ReturnValue) == 0x000000, "Member 'MarinerProjectileFlux_AuthorityFallbackToState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.BP_GetItemAttachPointLocation
// 0x000C (0x000C - 0x0000)
struct MarinerProjectileFlux_BP_GetItemAttachPointLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_BP_GetItemAttachPointLocation) == 0x000004, "Wrong alignment on MarinerProjectileFlux_BP_GetItemAttachPointLocation");
static_assert(sizeof(MarinerProjectileFlux_BP_GetItemAttachPointLocation) == 0x00000C, "Wrong size on MarinerProjectileFlux_BP_GetItemAttachPointLocation");
static_assert(offsetof(MarinerProjectileFlux_BP_GetItemAttachPointLocation, ReturnValue) == 0x000000, "Member 'MarinerProjectileFlux_BP_GetItemAttachPointLocation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.BP_OverrideCanTraverseToState
// 0x0003 (0x0003 - 0x0000)
struct MarinerProjectileFlux_BP_OverrideCanTraverseToState final
{
public:
	EMarinerFluxProjectileState                   StateRequestingEnter;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerFluxProjectileState                   MyCurrentState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_BP_OverrideCanTraverseToState) == 0x000001, "Wrong alignment on MarinerProjectileFlux_BP_OverrideCanTraverseToState");
static_assert(sizeof(MarinerProjectileFlux_BP_OverrideCanTraverseToState) == 0x000003, "Wrong size on MarinerProjectileFlux_BP_OverrideCanTraverseToState");
static_assert(offsetof(MarinerProjectileFlux_BP_OverrideCanTraverseToState, StateRequestingEnter) == 0x000000, "Member 'MarinerProjectileFlux_BP_OverrideCanTraverseToState::StateRequestingEnter' has a wrong offset!");
static_assert(offsetof(MarinerProjectileFlux_BP_OverrideCanTraverseToState, MyCurrentState) == 0x000001, "Member 'MarinerProjectileFlux_BP_OverrideCanTraverseToState::MyCurrentState' has a wrong offset!");
static_assert(offsetof(MarinerProjectileFlux_BP_OverrideCanTraverseToState, ReturnValue) == 0x000002, "Member 'MarinerProjectileFlux_BP_OverrideCanTraverseToState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.GetCurrentStateExec
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectileFlux_GetCurrentStateExec final
{
public:
	EMarinerFluxProjectileState                   OutStateExec;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_GetCurrentStateExec) == 0x000001, "Wrong alignment on MarinerProjectileFlux_GetCurrentStateExec");
static_assert(sizeof(MarinerProjectileFlux_GetCurrentStateExec) == 0x000001, "Wrong size on MarinerProjectileFlux_GetCurrentStateExec");
static_assert(offsetof(MarinerProjectileFlux_GetCurrentStateExec, OutStateExec) == 0x000000, "Member 'MarinerProjectileFlux_GetCurrentStateExec::OutStateExec' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.MulticastSetGuidedHomingTarget
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectileFlux_MulticastSetGuidedHomingTarget final
{
public:
	class AMarinerCharacter*                      AimTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_MulticastSetGuidedHomingTarget) == 0x000008, "Wrong alignment on MarinerProjectileFlux_MulticastSetGuidedHomingTarget");
static_assert(sizeof(MarinerProjectileFlux_MulticastSetGuidedHomingTarget) == 0x000008, "Wrong size on MarinerProjectileFlux_MulticastSetGuidedHomingTarget");
static_assert(offsetof(MarinerProjectileFlux_MulticastSetGuidedHomingTarget, AimTarget) == 0x000000, "Member 'MarinerProjectileFlux_MulticastSetGuidedHomingTarget::AimTarget' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.MulticastTransitionState
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectileFlux_MulticastTransitionState final
{
public:
	EMarinerFluxProjectileState                   RequestedState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviousTransitionTimeStamp;                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_MulticastTransitionState) == 0x000004, "Wrong alignment on MarinerProjectileFlux_MulticastTransitionState");
static_assert(sizeof(MarinerProjectileFlux_MulticastTransitionState) == 0x000008, "Wrong size on MarinerProjectileFlux_MulticastTransitionState");
static_assert(offsetof(MarinerProjectileFlux_MulticastTransitionState, RequestedState) == 0x000000, "Member 'MarinerProjectileFlux_MulticastTransitionState::RequestedState' has a wrong offset!");
static_assert(offsetof(MarinerProjectileFlux_MulticastTransitionState, PreviousTransitionTimeStamp) == 0x000004, "Member 'MarinerProjectileFlux_MulticastTransitionState::PreviousTransitionTimeStamp' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.OnFetchedItemPickedUp
// 0x0010 (0x0010 - 0x0000)
struct MarinerProjectileFlux_OnFetchedItemPickedUp final
{
public:
	class AMarinerItem*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerCharacter*                      NewItemCarrier;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_OnFetchedItemPickedUp) == 0x000008, "Wrong alignment on MarinerProjectileFlux_OnFetchedItemPickedUp");
static_assert(sizeof(MarinerProjectileFlux_OnFetchedItemPickedUp) == 0x000010, "Wrong size on MarinerProjectileFlux_OnFetchedItemPickedUp");
static_assert(offsetof(MarinerProjectileFlux_OnFetchedItemPickedUp, Item) == 0x000000, "Member 'MarinerProjectileFlux_OnFetchedItemPickedUp::Item' has a wrong offset!");
static_assert(offsetof(MarinerProjectileFlux_OnFetchedItemPickedUp, NewItemCarrier) == 0x000008, "Member 'MarinerProjectileFlux_OnFetchedItemPickedUp::NewItemCarrier' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.OnInstigatorAcquiredHomingTarget
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectileFlux_OnInstigatorAcquiredHomingTarget final
{
public:
	class AActor*                                 PotentialGuidedHomingTarget;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_OnInstigatorAcquiredHomingTarget) == 0x000008, "Wrong alignment on MarinerProjectileFlux_OnInstigatorAcquiredHomingTarget");
static_assert(sizeof(MarinerProjectileFlux_OnInstigatorAcquiredHomingTarget) == 0x000008, "Wrong size on MarinerProjectileFlux_OnInstigatorAcquiredHomingTarget");
static_assert(offsetof(MarinerProjectileFlux_OnInstigatorAcquiredHomingTarget, PotentialGuidedHomingTarget) == 0x000000, "Member 'MarinerProjectileFlux_OnInstigatorAcquiredHomingTarget::PotentialGuidedHomingTarget' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.OnInstigatorLostHomingTarget
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectileFlux_OnInstigatorLostHomingTarget final
{
public:
	class AActor*                                 PreviousAimAssistTarget;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_OnInstigatorLostHomingTarget) == 0x000008, "Wrong alignment on MarinerProjectileFlux_OnInstigatorLostHomingTarget");
static_assert(sizeof(MarinerProjectileFlux_OnInstigatorLostHomingTarget) == 0x000008, "Wrong size on MarinerProjectileFlux_OnInstigatorLostHomingTarget");
static_assert(offsetof(MarinerProjectileFlux_OnInstigatorLostHomingTarget, PreviousAimAssistTarget) == 0x000000, "Member 'MarinerProjectileFlux_OnInstigatorLostHomingTarget::PreviousAimAssistTarget' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.OnInstigatorSwappedHomingTarget
// 0x0010 (0x0010 - 0x0000)
struct MarinerProjectileFlux_OnInstigatorSwappedHomingTarget final
{
public:
	class AActor*                                 PreviousAimAssistTarget;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewPotentialGuidedHomingTarget;                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_OnInstigatorSwappedHomingTarget) == 0x000008, "Wrong alignment on MarinerProjectileFlux_OnInstigatorSwappedHomingTarget");
static_assert(sizeof(MarinerProjectileFlux_OnInstigatorSwappedHomingTarget) == 0x000010, "Wrong size on MarinerProjectileFlux_OnInstigatorSwappedHomingTarget");
static_assert(offsetof(MarinerProjectileFlux_OnInstigatorSwappedHomingTarget, PreviousAimAssistTarget) == 0x000000, "Member 'MarinerProjectileFlux_OnInstigatorSwappedHomingTarget::PreviousAimAssistTarget' has a wrong offset!");
static_assert(offsetof(MarinerProjectileFlux_OnInstigatorSwappedHomingTarget, NewPotentialGuidedHomingTarget) == 0x000008, "Member 'MarinerProjectileFlux_OnInstigatorSwappedHomingTarget::NewPotentialGuidedHomingTarget' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.OnProjectileBounce
// 0x0094 (0x0094 - 0x0000)
struct MarinerProjectileFlux_OnProjectileBounce final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x0088(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_OnProjectileBounce) == 0x000004, "Wrong alignment on MarinerProjectileFlux_OnProjectileBounce");
static_assert(sizeof(MarinerProjectileFlux_OnProjectileBounce) == 0x000094, "Wrong size on MarinerProjectileFlux_OnProjectileBounce");
static_assert(offsetof(MarinerProjectileFlux_OnProjectileBounce, ImpactResult) == 0x000000, "Member 'MarinerProjectileFlux_OnProjectileBounce::ImpactResult' has a wrong offset!");
static_assert(offsetof(MarinerProjectileFlux_OnProjectileBounce, ImpactVelocity) == 0x000088, "Member 'MarinerProjectileFlux_OnProjectileBounce::ImpactVelocity' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectileFlux_GetCurrentState final
{
public:
	EMarinerFluxProjectileState                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_GetCurrentState) == 0x000001, "Wrong alignment on MarinerProjectileFlux_GetCurrentState");
static_assert(sizeof(MarinerProjectileFlux_GetCurrentState) == 0x000001, "Wrong size on MarinerProjectileFlux_GetCurrentState");
static_assert(offsetof(MarinerProjectileFlux_GetCurrentState, ReturnValue) == 0x000000, "Member 'MarinerProjectileFlux_GetCurrentState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.GetFetchedItem
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectileFlux_GetFetchedItem final
{
public:
	class AMarinerItem*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_GetFetchedItem) == 0x000008, "Wrong alignment on MarinerProjectileFlux_GetFetchedItem");
static_assert(sizeof(MarinerProjectileFlux_GetFetchedItem) == 0x000008, "Wrong size on MarinerProjectileFlux_GetFetchedItem");
static_assert(offsetof(MarinerProjectileFlux_GetFetchedItem, ReturnValue) == 0x000000, "Member 'MarinerProjectileFlux_GetFetchedItem::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.GetFluxMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerProjectileFlux_GetFluxMovementComponent final
{
public:
	class UMarinerFluxProjectileMoveComponent*    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_GetFluxMovementComponent) == 0x000008, "Wrong alignment on MarinerProjectileFlux_GetFluxMovementComponent");
static_assert(sizeof(MarinerProjectileFlux_GetFluxMovementComponent) == 0x000008, "Wrong size on MarinerProjectileFlux_GetFluxMovementComponent");
static_assert(offsetof(MarinerProjectileFlux_GetFluxMovementComponent, ReturnValue) == 0x000000, "Member 'MarinerProjectileFlux_GetFluxMovementComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.IsAnyOtherFluxProjectileFetching
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectileFlux_IsAnyOtherFluxProjectileFetching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_IsAnyOtherFluxProjectileFetching) == 0x000001, "Wrong alignment on MarinerProjectileFlux_IsAnyOtherFluxProjectileFetching");
static_assert(sizeof(MarinerProjectileFlux_IsAnyOtherFluxProjectileFetching) == 0x000001, "Wrong size on MarinerProjectileFlux_IsAnyOtherFluxProjectileFetching");
static_assert(offsetof(MarinerProjectileFlux_IsAnyOtherFluxProjectileFetching, ReturnValue) == 0x000000, "Member 'MarinerProjectileFlux_IsAnyOtherFluxProjectileFetching::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.IsAutoHoming
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectileFlux_IsAutoHoming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_IsAutoHoming) == 0x000001, "Wrong alignment on MarinerProjectileFlux_IsAutoHoming");
static_assert(sizeof(MarinerProjectileFlux_IsAutoHoming) == 0x000001, "Wrong size on MarinerProjectileFlux_IsAutoHoming");
static_assert(offsetof(MarinerProjectileFlux_IsAutoHoming, ReturnValue) == 0x000000, "Member 'MarinerProjectileFlux_IsAutoHoming::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.IsBouncing
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectileFlux_IsBouncing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_IsBouncing) == 0x000001, "Wrong alignment on MarinerProjectileFlux_IsBouncing");
static_assert(sizeof(MarinerProjectileFlux_IsBouncing) == 0x000001, "Wrong size on MarinerProjectileFlux_IsBouncing");
static_assert(offsetof(MarinerProjectileFlux_IsBouncing, ReturnValue) == 0x000000, "Member 'MarinerProjectileFlux_IsBouncing::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.IsFetching
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectileFlux_IsFetching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_IsFetching) == 0x000001, "Wrong alignment on MarinerProjectileFlux_IsFetching");
static_assert(sizeof(MarinerProjectileFlux_IsFetching) == 0x000001, "Wrong size on MarinerProjectileFlux_IsFetching");
static_assert(offsetof(MarinerProjectileFlux_IsFetching, ReturnValue) == 0x000000, "Member 'MarinerProjectileFlux_IsFetching::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.IsGuidedHoming
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectileFlux_IsGuidedHoming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_IsGuidedHoming) == 0x000001, "Wrong alignment on MarinerProjectileFlux_IsGuidedHoming");
static_assert(sizeof(MarinerProjectileFlux_IsGuidedHoming) == 0x000001, "Wrong size on MarinerProjectileFlux_IsGuidedHoming");
static_assert(offsetof(MarinerProjectileFlux_IsGuidedHoming, ReturnValue) == 0x000000, "Member 'MarinerProjectileFlux_IsGuidedHoming::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerProjectileFlux.IsGuiding
// 0x0001 (0x0001 - 0x0000)
struct MarinerProjectileFlux_IsGuiding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerProjectileFlux_IsGuiding) == 0x000001, "Wrong alignment on MarinerProjectileFlux_IsGuiding");
static_assert(sizeof(MarinerProjectileFlux_IsGuiding) == 0x000001, "Wrong size on MarinerProjectileFlux_IsGuiding");
static_assert(offsetof(MarinerProjectileFlux_IsGuiding, ReturnValue) == 0x000000, "Member 'MarinerProjectileFlux_IsGuiding::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerPromptBanner.AddPrompt
// 0x0118 (0x0118 - 0x0000)
struct MarinerPromptBanner_AddPrompt final
{
public:
	struct FMarinerPromptData                     Data;                                              // 0x0000(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPromptBanner_AddPrompt) == 0x000008, "Wrong alignment on MarinerPromptBanner_AddPrompt");
static_assert(sizeof(MarinerPromptBanner_AddPrompt) == 0x000118, "Wrong size on MarinerPromptBanner_AddPrompt");
static_assert(offsetof(MarinerPromptBanner_AddPrompt, Data) == 0x000000, "Member 'MarinerPromptBanner_AddPrompt::Data' has a wrong offset!");

// Function Mariner.MarinerPromptBanner.ClearPrompt
// 0x0002 (0x0002 - 0x0000)
struct MarinerPromptBanner_ClearPrompt final
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerPromptBanner_ClearPrompt) == 0x000001, "Wrong alignment on MarinerPromptBanner_ClearPrompt");
static_assert(sizeof(MarinerPromptBanner_ClearPrompt) == 0x000002, "Wrong size on MarinerPromptBanner_ClearPrompt");
static_assert(offsetof(MarinerPromptBanner_ClearPrompt, InputAction) == 0x000000, "Member 'MarinerPromptBanner_ClearPrompt::InputAction' has a wrong offset!");
static_assert(offsetof(MarinerPromptBanner_ClearPrompt, ReturnValue) == 0x000001, "Member 'MarinerPromptBanner_ClearPrompt::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerQuestRewardMessageBox.GetData
// 0x0180 (0x0180 - 0x0000)
struct MarinerQuestRewardMessageBox_GetData final
{
public:
	struct FMarinerMessageBoxQuestRewardData      ReturnValue;                                       // 0x0000(0x0180)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerQuestRewardMessageBox_GetData) == 0x000008, "Wrong alignment on MarinerQuestRewardMessageBox_GetData");
static_assert(sizeof(MarinerQuestRewardMessageBox_GetData) == 0x000180, "Wrong size on MarinerQuestRewardMessageBox_GetData");
static_assert(offsetof(MarinerQuestRewardMessageBox_GetData, ReturnValue) == 0x000000, "Member 'MarinerQuestRewardMessageBox_GetData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRealityObjectManager.ChangeLocalReality
// 0x0001 (0x0001 - 0x0000)
struct MarinerRealityObjectManager_ChangeLocalReality final
{
public:
	EMarinerRealityState                          NewReality;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRealityObjectManager_ChangeLocalReality) == 0x000001, "Wrong alignment on MarinerRealityObjectManager_ChangeLocalReality");
static_assert(sizeof(MarinerRealityObjectManager_ChangeLocalReality) == 0x000001, "Wrong size on MarinerRealityObjectManager_ChangeLocalReality");
static_assert(offsetof(MarinerRealityObjectManager_ChangeLocalReality, NewReality) == 0x000000, "Member 'MarinerRealityObjectManager_ChangeLocalReality::NewReality' has a wrong offset!");

// Function Mariner.MarinerRealityObjectManager.GetCurrentReality
// 0x0001 (0x0001 - 0x0000)
struct MarinerRealityObjectManager_GetCurrentReality final
{
public:
	EMarinerRealityState                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRealityObjectManager_GetCurrentReality) == 0x000001, "Wrong alignment on MarinerRealityObjectManager_GetCurrentReality");
static_assert(sizeof(MarinerRealityObjectManager_GetCurrentReality) == 0x000001, "Wrong size on MarinerRealityObjectManager_GetCurrentReality");
static_assert(offsetof(MarinerRealityObjectManager_GetCurrentReality, ReturnValue) == 0x000000, "Member 'MarinerRealityObjectManager_GetCurrentReality::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRealityObjectManager.IsLocalPlayerDefaultReality
// 0x0001 (0x0001 - 0x0000)
struct MarinerRealityObjectManager_IsLocalPlayerDefaultReality final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRealityObjectManager_IsLocalPlayerDefaultReality) == 0x000001, "Wrong alignment on MarinerRealityObjectManager_IsLocalPlayerDefaultReality");
static_assert(sizeof(MarinerRealityObjectManager_IsLocalPlayerDefaultReality) == 0x000001, "Wrong size on MarinerRealityObjectManager_IsLocalPlayerDefaultReality");
static_assert(offsetof(MarinerRealityObjectManager_IsLocalPlayerDefaultReality, ReturnValue) == 0x000000, "Member 'MarinerRealityObjectManager_IsLocalPlayerDefaultReality::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRewardButton.OnEmoteCharacterPortraitLoaded
// 0x0088 (0x0088 - 0x0000)
struct MarinerRewardButton_OnEmoteCharacterPortraitLoaded final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardButton_OnEmoteCharacterPortraitLoaded) == 0x000008, "Wrong alignment on MarinerRewardButton_OnEmoteCharacterPortraitLoaded");
static_assert(sizeof(MarinerRewardButton_OnEmoteCharacterPortraitLoaded) == 0x000088, "Wrong size on MarinerRewardButton_OnEmoteCharacterPortraitLoaded");
static_assert(offsetof(MarinerRewardButton_OnEmoteCharacterPortraitLoaded, Brush) == 0x000000, "Member 'MarinerRewardButton_OnEmoteCharacterPortraitLoaded::Brush' has a wrong offset!");

// Function Mariner.MarinerRewardButton.PopulateBlastPass
// 0x0028 (0x0028 - 0x0000)
struct MarinerRewardButton_PopulateBlastPass final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoOrderBlastpass                   BlastPassOrder;                                    // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardButton_PopulateBlastPass) == 0x000008, "Wrong alignment on MarinerRewardButton_PopulateBlastPass");
static_assert(sizeof(MarinerRewardButton_PopulateBlastPass) == 0x000028, "Wrong size on MarinerRewardButton_PopulateBlastPass");
static_assert(offsetof(MarinerRewardButton_PopulateBlastPass, OfferId) == 0x000000, "Member 'MarinerRewardButton_PopulateBlastPass::OfferId' has a wrong offset!");
static_assert(offsetof(MarinerRewardButton_PopulateBlastPass, BlastPassOrder) == 0x000010, "Member 'MarinerRewardButton_PopulateBlastPass::BlastPassOrder' has a wrong offset!");

// Function Mariner.MarinerRewardButton.PopulateBlastPassReward
// 0x00A8 (0x00A8 - 0x0000)
struct MarinerRewardButton_PopulateBlastPassReward final
{
public:
	struct FMangoBlastPassReward                  Reward;                                            // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardButton_PopulateBlastPassReward) == 0x000008, "Wrong alignment on MarinerRewardButton_PopulateBlastPassReward");
static_assert(sizeof(MarinerRewardButton_PopulateBlastPassReward) == 0x0000A8, "Wrong size on MarinerRewardButton_PopulateBlastPassReward");
static_assert(offsetof(MarinerRewardButton_PopulateBlastPassReward, Reward) == 0x000000, "Member 'MarinerRewardButton_PopulateBlastPassReward::Reward' has a wrong offset!");

// Function Mariner.MarinerRewardButton.PopulateItem
// 0x0058 (0x0058 - 0x0000)
struct MarinerRewardButton_PopulateItem final
{
public:
	struct FMangoItem                             Item;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         DupRocketpartsValue;                               // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DE[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerRewardButton_PopulateItem) == 0x000008, "Wrong alignment on MarinerRewardButton_PopulateItem");
static_assert(sizeof(MarinerRewardButton_PopulateItem) == 0x000058, "Wrong size on MarinerRewardButton_PopulateItem");
static_assert(offsetof(MarinerRewardButton_PopulateItem, Item) == 0x000000, "Member 'MarinerRewardButton_PopulateItem::Item' has a wrong offset!");
static_assert(offsetof(MarinerRewardButton_PopulateItem, DupRocketpartsValue) == 0x000050, "Member 'MarinerRewardButton_PopulateItem::DupRocketpartsValue' has a wrong offset!");

// Function Mariner.MarinerRewardButton.PopulateMangoReward
// 0x0040 (0x0040 - 0x0000)
struct MarinerRewardButton_PopulateMangoReward final
{
public:
	struct FMangoReward                           Reward;                                            // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardButton_PopulateMangoReward) == 0x000008, "Wrong alignment on MarinerRewardButton_PopulateMangoReward");
static_assert(sizeof(MarinerRewardButton_PopulateMangoReward) == 0x000040, "Wrong size on MarinerRewardButton_PopulateMangoReward");
static_assert(offsetof(MarinerRewardButton_PopulateMangoReward, Reward) == 0x000000, "Member 'MarinerRewardButton_PopulateMangoReward::Reward' has a wrong offset!");

// Function Mariner.MarinerRewardButton.PopulateNativeOffer
// 0x00C0 (0x00C0 - 0x0000)
struct MarinerRewardButton_PopulateNativeOffer final
{
public:
	struct FMangoNativeOffer                      Nativeoffer;                                       // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardButton_PopulateNativeOffer) == 0x000008, "Wrong alignment on MarinerRewardButton_PopulateNativeOffer");
static_assert(sizeof(MarinerRewardButton_PopulateNativeOffer) == 0x0000C0, "Wrong size on MarinerRewardButton_PopulateNativeOffer");
static_assert(offsetof(MarinerRewardButton_PopulateNativeOffer, Nativeoffer) == 0x000000, "Member 'MarinerRewardButton_PopulateNativeOffer::Nativeoffer' has a wrong offset!");

// Function Mariner.MarinerRewardButton.PopulateQuestReward
// 0x00C8 (0x00C8 - 0x0000)
struct MarinerRewardButton_PopulateQuestReward final
{
public:
	struct FMangoQuestReward                      Reward;                                            // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardButton_PopulateQuestReward) == 0x000008, "Wrong alignment on MarinerRewardButton_PopulateQuestReward");
static_assert(sizeof(MarinerRewardButton_PopulateQuestReward) == 0x0000C8, "Wrong size on MarinerRewardButton_PopulateQuestReward");
static_assert(offsetof(MarinerRewardButton_PopulateQuestReward, Reward) == 0x000000, "Member 'MarinerRewardButton_PopulateQuestReward::Reward' has a wrong offset!");

// Function Mariner.MarinerRewardButton.PopulateRocketbucks
// 0x0004 (0x0004 - 0x0000)
struct MarinerRewardButton_PopulateRocketbucks final
{
public:
	int32                                         RocketBucks;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardButton_PopulateRocketbucks) == 0x000004, "Wrong alignment on MarinerRewardButton_PopulateRocketbucks");
static_assert(sizeof(MarinerRewardButton_PopulateRocketbucks) == 0x000004, "Wrong size on MarinerRewardButton_PopulateRocketbucks");
static_assert(offsetof(MarinerRewardButton_PopulateRocketbucks, RocketBucks) == 0x000000, "Member 'MarinerRewardButton_PopulateRocketbucks::RocketBucks' has a wrong offset!");

// Function Mariner.MarinerRewardButton.PopulateRocketparts
// 0x0004 (0x0004 - 0x0000)
struct MarinerRewardButton_PopulateRocketparts final
{
public:
	int32                                         RocketParts;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardButton_PopulateRocketparts) == 0x000004, "Wrong alignment on MarinerRewardButton_PopulateRocketparts");
static_assert(sizeof(MarinerRewardButton_PopulateRocketparts) == 0x000004, "Wrong size on MarinerRewardButton_PopulateRocketparts");
static_assert(offsetof(MarinerRewardButton_PopulateRocketparts, RocketParts) == 0x000000, "Member 'MarinerRewardButton_PopulateRocketparts::RocketParts' has a wrong offset!");

// Function Mariner.MarinerRewardButton.PopulateUIItemData
// 0x0070 (0x0070 - 0x0000)
struct MarinerRewardButton_PopulateUIItemData final
{
public:
	struct FMarinerUIItemButtonData               UIItemButtonData;                                  // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardButton_PopulateUIItemData) == 0x000008, "Wrong alignment on MarinerRewardButton_PopulateUIItemData");
static_assert(sizeof(MarinerRewardButton_PopulateUIItemData) == 0x000070, "Wrong size on MarinerRewardButton_PopulateUIItemData");
static_assert(offsetof(MarinerRewardButton_PopulateUIItemData, UIItemButtonData) == 0x000000, "Member 'MarinerRewardButton_PopulateUIItemData::UIItemButtonData' has a wrong offset!");

// Function Mariner.MarinerRewardButton.PopulateXP
// 0x0004 (0x0004 - 0x0000)
struct MarinerRewardButton_PopulateXP final
{
public:
	int32                                         Xp;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardButton_PopulateXP) == 0x000004, "Wrong alignment on MarinerRewardButton_PopulateXP");
static_assert(sizeof(MarinerRewardButton_PopulateXP) == 0x000004, "Wrong size on MarinerRewardButton_PopulateXP");
static_assert(offsetof(MarinerRewardButton_PopulateXP, Xp) == 0x000000, "Member 'MarinerRewardButton_PopulateXP::Xp' has a wrong offset!");

// Function Mariner.MarinerRewardButton.PopulateXPBonus
// 0x0008 (0x0008 - 0x0000)
struct MarinerRewardButton_PopulateXPBonus final
{
public:
	EMangoBlastPassXPBonusType                    BonusType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19DF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BonusPct;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardButton_PopulateXPBonus) == 0x000004, "Wrong alignment on MarinerRewardButton_PopulateXPBonus");
static_assert(sizeof(MarinerRewardButton_PopulateXPBonus) == 0x000008, "Wrong size on MarinerRewardButton_PopulateXPBonus");
static_assert(offsetof(MarinerRewardButton_PopulateXPBonus, BonusType) == 0x000000, "Member 'MarinerRewardButton_PopulateXPBonus::BonusType' has a wrong offset!");
static_assert(offsetof(MarinerRewardButton_PopulateXPBonus, BonusPct) == 0x000004, "Member 'MarinerRewardButton_PopulateXPBonus::BonusPct' has a wrong offset!");

// Function Mariner.MarinerRewardButton.GetRarityImage
// 0x0008 (0x0008 - 0x0000)
struct MarinerRewardButton_GetRarityImage final
{
public:
	class UImage*                                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardButton_GetRarityImage) == 0x000008, "Wrong alignment on MarinerRewardButton_GetRarityImage");
static_assert(sizeof(MarinerRewardButton_GetRarityImage) == 0x000008, "Wrong size on MarinerRewardButton_GetRarityImage");
static_assert(offsetof(MarinerRewardButton_GetRarityImage, ReturnValue) == 0x000000, "Member 'MarinerRewardButton_GetRarityImage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRewardButton.GetUIItemButtonData
// 0x0070 (0x0070 - 0x0000)
struct MarinerRewardButton_GetUIItemButtonData final
{
public:
	struct FMarinerUIItemButtonData               ReturnValue;                                       // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardButton_GetUIItemButtonData) == 0x000008, "Wrong alignment on MarinerRewardButton_GetUIItemButtonData");
static_assert(sizeof(MarinerRewardButton_GetUIItemButtonData) == 0x000070, "Wrong size on MarinerRewardButton_GetUIItemButtonData");
static_assert(offsetof(MarinerRewardButton_GetUIItemButtonData, ReturnValue) == 0x000000, "Member 'MarinerRewardButton_GetUIItemButtonData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRewardsPreview.InitRewardsPreview
// 0x0130 (0x0130 - 0x0000)
struct MarinerRewardsPreview_InitRewardsPreview final
{
public:
	struct FMangoQuestReward                      InRewards;                                         // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMangoQuest                            InQuest;                                           // 0x00C8(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRewardsPreview_InitRewardsPreview) == 0x000008, "Wrong alignment on MarinerRewardsPreview_InitRewardsPreview");
static_assert(sizeof(MarinerRewardsPreview_InitRewardsPreview) == 0x000130, "Wrong size on MarinerRewardsPreview_InitRewardsPreview");
static_assert(offsetof(MarinerRewardsPreview_InitRewardsPreview, InRewards) == 0x000000, "Member 'MarinerRewardsPreview_InitRewardsPreview::InRewards' has a wrong offset!");
static_assert(offsetof(MarinerRewardsPreview_InitRewardsPreview, InQuest) == 0x0000C8, "Member 'MarinerRewardsPreview_InitRewardsPreview::InQuest' has a wrong offset!");

// Function Mariner.MarinerRootMotionMoveUpdateDefaults_ConstantForce.ApplyConstantForceRootMotion
// 0x0048 (0x0048 - 0x0000)
struct MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion final
{
public:
	class UMarinerCharacterMovement*              OwningMovementComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_ConstantForce> Defaults;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldDirection;                                    // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAdditive;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E5[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            StrengthOverTime;                                  // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 VelocityOnFinishMode;                              // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E6[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClampVelocityOnFinish;                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SetVelocityOnFinish;                               // 0x003C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion) == 0x000008, "Wrong alignment on MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion");
static_assert(sizeof(MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion) == 0x000048, "Wrong size on MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion, OwningMovementComponent) == 0x000000, "Member 'MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion::OwningMovementComponent' has a wrong offset!");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion, Defaults) == 0x000008, "Member 'MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion::Defaults' has a wrong offset!");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion, WorldDirection) == 0x000010, "Member 'MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion::WorldDirection' has a wrong offset!");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion, Duration) == 0x00001C, "Member 'MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion::Duration' has a wrong offset!");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion, bIsAdditive) == 0x000020, "Member 'MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion::bIsAdditive' has a wrong offset!");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion, StrengthOverTime) == 0x000028, "Member 'MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion::StrengthOverTime' has a wrong offset!");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion, Strength) == 0x000030, "Member 'MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion::Strength' has a wrong offset!");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion, VelocityOnFinishMode) == 0x000034, "Member 'MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion::VelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion, ClampVelocityOnFinish) == 0x000038, "Member 'MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion::ClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion, SetVelocityOnFinish) == 0x00003C, "Member 'MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion::SetVelocityOnFinish' has a wrong offset!");

// Function Mariner.MarinerRootMotionMoveUpdateDefaults_ConstantForce.GetConstantForceRootMotionName
// 0x0008 (0x0008 - 0x0000)
struct MarinerRootMotionMoveUpdateDefaults_ConstantForce_GetConstantForceRootMotionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRootMotionMoveUpdateDefaults_ConstantForce_GetConstantForceRootMotionName) == 0x000004, "Wrong alignment on MarinerRootMotionMoveUpdateDefaults_ConstantForce_GetConstantForceRootMotionName");
static_assert(sizeof(MarinerRootMotionMoveUpdateDefaults_ConstantForce_GetConstantForceRootMotionName) == 0x000008, "Wrong size on MarinerRootMotionMoveUpdateDefaults_ConstantForce_GetConstantForceRootMotionName");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_ConstantForce_GetConstantForceRootMotionName, ReturnValue) == 0x000000, "Member 'MarinerRootMotionMoveUpdateDefaults_ConstantForce_GetConstantForceRootMotionName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRootMotionMoveUpdateDefaults_LerpToSpeed.GetLerpToSpeedRootMotionName
// 0x0008 (0x0008 - 0x0000)
struct MarinerRootMotionMoveUpdateDefaults_LerpToSpeed_GetLerpToSpeedRootMotionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRootMotionMoveUpdateDefaults_LerpToSpeed_GetLerpToSpeedRootMotionName) == 0x000004, "Wrong alignment on MarinerRootMotionMoveUpdateDefaults_LerpToSpeed_GetLerpToSpeedRootMotionName");
static_assert(sizeof(MarinerRootMotionMoveUpdateDefaults_LerpToSpeed_GetLerpToSpeedRootMotionName) == 0x000008, "Wrong size on MarinerRootMotionMoveUpdateDefaults_LerpToSpeed_GetLerpToSpeedRootMotionName");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_LerpToSpeed_GetLerpToSpeedRootMotionName, ReturnValue) == 0x000000, "Member 'MarinerRootMotionMoveUpdateDefaults_LerpToSpeed_GetLerpToSpeedRootMotionName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerRootMotionMoveUpdateDefaults_SlowToStop.GetSlowToStopRootMotionName
// 0x0008 (0x0008 - 0x0000)
struct MarinerRootMotionMoveUpdateDefaults_SlowToStop_GetSlowToStopRootMotionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerRootMotionMoveUpdateDefaults_SlowToStop_GetSlowToStopRootMotionName) == 0x000004, "Wrong alignment on MarinerRootMotionMoveUpdateDefaults_SlowToStop_GetSlowToStopRootMotionName");
static_assert(sizeof(MarinerRootMotionMoveUpdateDefaults_SlowToStop_GetSlowToStopRootMotionName) == 0x000008, "Wrong size on MarinerRootMotionMoveUpdateDefaults_SlowToStop_GetSlowToStopRootMotionName");
static_assert(offsetof(MarinerRootMotionMoveUpdateDefaults_SlowToStop_GetSlowToStopRootMotionName, ReturnValue) == 0x000000, "Member 'MarinerRootMotionMoveUpdateDefaults_SlowToStop_GetSlowToStopRootMotionName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSafeToLeaveInfoWidget.OnGameSafeToLeave
// 0x0001 (0x0001 - 0x0000)
struct MarinerSafeToLeaveInfoWidget_OnGameSafeToLeave final
{
public:
	bool                                          bEarlyDisconnect;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSafeToLeaveInfoWidget_OnGameSafeToLeave) == 0x000001, "Wrong alignment on MarinerSafeToLeaveInfoWidget_OnGameSafeToLeave");
static_assert(sizeof(MarinerSafeToLeaveInfoWidget_OnGameSafeToLeave) == 0x000001, "Wrong size on MarinerSafeToLeaveInfoWidget_OnGameSafeToLeave");
static_assert(offsetof(MarinerSafeToLeaveInfoWidget_OnGameSafeToLeave, bEarlyDisconnect) == 0x000000, "Member 'MarinerSafeToLeaveInfoWidget_OnGameSafeToLeave::bEarlyDisconnect' has a wrong offset!");

// Function Mariner.MarinerScoreboardStats.OnPlayerStateReplicated
// 0x0008 (0x0008 - 0x0000)
struct MarinerScoreboardStats_OnPlayerStateReplicated final
{
public:
	class AMarinerPlayerController*               ControllerHostingState;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerScoreboardStats_OnPlayerStateReplicated) == 0x000008, "Wrong alignment on MarinerScoreboardStats_OnPlayerStateReplicated");
static_assert(sizeof(MarinerScoreboardStats_OnPlayerStateReplicated) == 0x000008, "Wrong size on MarinerScoreboardStats_OnPlayerStateReplicated");
static_assert(offsetof(MarinerScoreboardStats_OnPlayerStateReplicated, ControllerHostingState) == 0x000000, "Member 'MarinerScoreboardStats_OnPlayerStateReplicated::ControllerHostingState' has a wrong offset!");

// Function Mariner.MarinerScoreboardStats.OnStatChanged
// 0x0018 (0x0018 - 0x0000)
struct MarinerScoreboardStats_OnStatChanged final
{
public:
	class AMarinerPlayerState*                    PlayerWithStatChange;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StatName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19EF[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerScoreboardStats_OnStatChanged) == 0x000008, "Wrong alignment on MarinerScoreboardStats_OnStatChanged");
static_assert(sizeof(MarinerScoreboardStats_OnStatChanged) == 0x000018, "Wrong size on MarinerScoreboardStats_OnStatChanged");
static_assert(offsetof(MarinerScoreboardStats_OnStatChanged, PlayerWithStatChange) == 0x000000, "Member 'MarinerScoreboardStats_OnStatChanged::PlayerWithStatChange' has a wrong offset!");
static_assert(offsetof(MarinerScoreboardStats_OnStatChanged, StatName) == 0x000008, "Member 'MarinerScoreboardStats_OnStatChanged::StatName' has a wrong offset!");
static_assert(offsetof(MarinerScoreboardStats_OnStatChanged, StatValue) == 0x000010, "Member 'MarinerScoreboardStats_OnStatChanged::StatValue' has a wrong offset!");

// Function Mariner.MarinerScrollBox.HighlightWidgetViaIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerScrollBox_HighlightWidgetViaIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerScrollBox_HighlightWidgetViaIndex) == 0x000004, "Wrong alignment on MarinerScrollBox_HighlightWidgetViaIndex");
static_assert(sizeof(MarinerScrollBox_HighlightWidgetViaIndex) == 0x000004, "Wrong size on MarinerScrollBox_HighlightWidgetViaIndex");
static_assert(offsetof(MarinerScrollBox_HighlightWidgetViaIndex, Param_Index) == 0x000000, "Member 'MarinerScrollBox_HighlightWidgetViaIndex::Param_Index' has a wrong offset!");

// Function Mariner.MarinerScrollBox.ScrollByAmount
// 0x0004 (0x0004 - 0x0000)
struct MarinerScrollBox_ScrollByAmount final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerScrollBox_ScrollByAmount) == 0x000004, "Wrong alignment on MarinerScrollBox_ScrollByAmount");
static_assert(sizeof(MarinerScrollBox_ScrollByAmount) == 0x000004, "Wrong size on MarinerScrollBox_ScrollByAmount");
static_assert(offsetof(MarinerScrollBox_ScrollByAmount, Amount) == 0x000000, "Member 'MarinerScrollBox_ScrollByAmount::Amount' has a wrong offset!");

// Function Mariner.MarinerServerWidget.OnServerWidgetCreated
// 0x0048 (0x0048 - 0x0000)
struct MarinerServerWidget_OnServerWidgetCreated final
{
public:
	class FText                                   Param_Name;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Ping;                                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   PlayerCount;                                       // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerServerWidget_OnServerWidgetCreated) == 0x000008, "Wrong alignment on MarinerServerWidget_OnServerWidgetCreated");
static_assert(sizeof(MarinerServerWidget_OnServerWidgetCreated) == 0x000048, "Wrong size on MarinerServerWidget_OnServerWidgetCreated");
static_assert(offsetof(MarinerServerWidget_OnServerWidgetCreated, Param_Name) == 0x000000, "Member 'MarinerServerWidget_OnServerWidgetCreated::Param_Name' has a wrong offset!");
static_assert(offsetof(MarinerServerWidget_OnServerWidgetCreated, Ping) == 0x000018, "Member 'MarinerServerWidget_OnServerWidgetCreated::Ping' has a wrong offset!");
static_assert(offsetof(MarinerServerWidget_OnServerWidgetCreated, PlayerCount) == 0x000030, "Member 'MarinerServerWidget_OnServerWidgetCreated::PlayerCount' has a wrong offset!");

// Function Mariner.MarinerSettingButton.GetAssets
// 0x0038 (0x0038 - 0x0000)
struct MarinerSettingButton_GetAssets final
{
public:
	struct FMarinerSettingButtonAssets            ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingButton_GetAssets) == 0x000008, "Wrong alignment on MarinerSettingButton_GetAssets");
static_assert(sizeof(MarinerSettingButton_GetAssets) == 0x000038, "Wrong size on MarinerSettingButton_GetAssets");
static_assert(offsetof(MarinerSettingButton_GetAssets, ReturnValue) == 0x000000, "Member 'MarinerSettingButton_GetAssets::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSettingKeyBinding.CheckBindingInUse
// 0x0018 (0x0018 - 0x0000)
struct MarinerSettingKeyBinding_CheckBindingInUse final
{
public:
	struct FKey                                   Binding;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingKeyBinding_CheckBindingInUse) == 0x000008, "Wrong alignment on MarinerSettingKeyBinding_CheckBindingInUse");
static_assert(sizeof(MarinerSettingKeyBinding_CheckBindingInUse) == 0x000018, "Wrong size on MarinerSettingKeyBinding_CheckBindingInUse");
static_assert(offsetof(MarinerSettingKeyBinding_CheckBindingInUse, Binding) == 0x000000, "Member 'MarinerSettingKeyBinding_CheckBindingInUse::Binding' has a wrong offset!");

// Function Mariner.MarinerSettingKeyBinding.InUseCancelCallback
// 0x0018 (0x0018 - 0x0000)
struct MarinerSettingKeyBinding_InUseCancelCallback final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingKeyBinding_InUseCancelCallback) == 0x000008, "Wrong alignment on MarinerSettingKeyBinding_InUseCancelCallback");
static_assert(sizeof(MarinerSettingKeyBinding_InUseCancelCallback) == 0x000018, "Wrong size on MarinerSettingKeyBinding_InUseCancelCallback");
static_assert(offsetof(MarinerSettingKeyBinding_InUseCancelCallback, Key) == 0x000000, "Member 'MarinerSettingKeyBinding_InUseCancelCallback::Key' has a wrong offset!");

// Function Mariner.MarinerSettingKeyBinding.InUseConfirmCallback
// 0x0018 (0x0018 - 0x0000)
struct MarinerSettingKeyBinding_InUseConfirmCallback final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingKeyBinding_InUseConfirmCallback) == 0x000008, "Wrong alignment on MarinerSettingKeyBinding_InUseConfirmCallback");
static_assert(sizeof(MarinerSettingKeyBinding_InUseConfirmCallback) == 0x000018, "Wrong size on MarinerSettingKeyBinding_InUseConfirmCallback");
static_assert(offsetof(MarinerSettingKeyBinding_InUseConfirmCallback, Key) == 0x000000, "Member 'MarinerSettingKeyBinding_InUseConfirmCallback::Key' has a wrong offset!");

// Function Mariner.MarinerSettingKeyBinding.MenuActionCallBack
// 0x0018 (0x0018 - 0x0000)
struct MarinerSettingKeyBinding_MenuActionCallBack final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingKeyBinding_MenuActionCallBack) == 0x000008, "Wrong alignment on MarinerSettingKeyBinding_MenuActionCallBack");
static_assert(sizeof(MarinerSettingKeyBinding_MenuActionCallBack) == 0x000018, "Wrong size on MarinerSettingKeyBinding_MenuActionCallBack");
static_assert(offsetof(MarinerSettingKeyBinding_MenuActionCallBack, Key) == 0x000000, "Member 'MarinerSettingKeyBinding_MenuActionCallBack::Key' has a wrong offset!");

// Function Mariner.MarinerSettingKeyBinding.SetBinding
// 0x0018 (0x0018 - 0x0000)
struct MarinerSettingKeyBinding_SetBinding final
{
public:
	struct FKey                                   Binding;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingKeyBinding_SetBinding) == 0x000008, "Wrong alignment on MarinerSettingKeyBinding_SetBinding");
static_assert(sizeof(MarinerSettingKeyBinding_SetBinding) == 0x000018, "Wrong size on MarinerSettingKeyBinding_SetBinding");
static_assert(offsetof(MarinerSettingKeyBinding_SetBinding, Binding) == 0x000000, "Member 'MarinerSettingKeyBinding_SetBinding::Binding' has a wrong offset!");

// Function Mariner.MarinerSettingKeyBinding.ShowInUseMessageBox
// 0x0020 (0x0020 - 0x0000)
struct MarinerSettingKeyBinding_ShowInUseMessageBox final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerInputActions                          PrevBoundAction;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F5[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerSettingKeyBinding_ShowInUseMessageBox) == 0x000008, "Wrong alignment on MarinerSettingKeyBinding_ShowInUseMessageBox");
static_assert(sizeof(MarinerSettingKeyBinding_ShowInUseMessageBox) == 0x000020, "Wrong size on MarinerSettingKeyBinding_ShowInUseMessageBox");
static_assert(offsetof(MarinerSettingKeyBinding_ShowInUseMessageBox, Key) == 0x000000, "Member 'MarinerSettingKeyBinding_ShowInUseMessageBox::Key' has a wrong offset!");
static_assert(offsetof(MarinerSettingKeyBinding_ShowInUseMessageBox, PrevBoundAction) == 0x000018, "Member 'MarinerSettingKeyBinding_ShowInUseMessageBox::PrevBoundAction' has a wrong offset!");

// Function Mariner.MarinerSettingKeyBinding.GetAssets
// 0x0040 (0x0040 - 0x0000)
struct MarinerSettingKeyBinding_GetAssets final
{
public:
	struct FMarinerSettingKeyBindingAssets        ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingKeyBinding_GetAssets) == 0x000008, "Wrong alignment on MarinerSettingKeyBinding_GetAssets");
static_assert(sizeof(MarinerSettingKeyBinding_GetAssets) == 0x000040, "Wrong size on MarinerSettingKeyBinding_GetAssets");
static_assert(offsetof(MarinerSettingKeyBinding_GetAssets, ReturnValue) == 0x000000, "Member 'MarinerSettingKeyBinding_GetAssets::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSettingSlider.SetDisplayRange
// 0x0008 (0x0008 - 0x0000)
struct MarinerSettingSlider_SetDisplayRange final
{
public:
	struct FVector2D                              InRange;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingSlider_SetDisplayRange) == 0x000004, "Wrong alignment on MarinerSettingSlider_SetDisplayRange");
static_assert(sizeof(MarinerSettingSlider_SetDisplayRange) == 0x000008, "Wrong size on MarinerSettingSlider_SetDisplayRange");
static_assert(offsetof(MarinerSettingSlider_SetDisplayRange, InRange) == 0x000000, "Member 'MarinerSettingSlider_SetDisplayRange::InRange' has a wrong offset!");

// Function Mariner.MarinerSettingSlider.SetValue
// 0x0004 (0x0004 - 0x0000)
struct MarinerSettingSlider_SetValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingSlider_SetValue) == 0x000004, "Wrong alignment on MarinerSettingSlider_SetValue");
static_assert(sizeof(MarinerSettingSlider_SetValue) == 0x000004, "Wrong size on MarinerSettingSlider_SetValue");
static_assert(offsetof(MarinerSettingSlider_SetValue, Value) == 0x000000, "Member 'MarinerSettingSlider_SetValue::Value' has a wrong offset!");

// Function Mariner.MarinerSettingSlider.SetValueByDisplayRange
// 0x0004 (0x0004 - 0x0000)
struct MarinerSettingSlider_SetValueByDisplayRange final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingSlider_SetValueByDisplayRange) == 0x000004, "Wrong alignment on MarinerSettingSlider_SetValueByDisplayRange");
static_assert(sizeof(MarinerSettingSlider_SetValueByDisplayRange) == 0x000004, "Wrong size on MarinerSettingSlider_SetValueByDisplayRange");
static_assert(offsetof(MarinerSettingSlider_SetValueByDisplayRange, Value) == 0x000000, "Member 'MarinerSettingSlider_SetValueByDisplayRange::Value' has a wrong offset!");

// Function Mariner.MarinerSettingSlider.SliderValueChangedCB
// 0x0004 (0x0004 - 0x0000)
struct MarinerSettingSlider_SliderValueChangedCB final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingSlider_SliderValueChangedCB) == 0x000004, "Wrong alignment on MarinerSettingSlider_SliderValueChangedCB");
static_assert(sizeof(MarinerSettingSlider_SliderValueChangedCB) == 0x000004, "Wrong size on MarinerSettingSlider_SliderValueChangedCB");
static_assert(offsetof(MarinerSettingSlider_SliderValueChangedCB, NewValue) == 0x000000, "Member 'MarinerSettingSlider_SliderValueChangedCB::NewValue' has a wrong offset!");

// Function Mariner.MarinerSettingSlider.GetAssets
// 0x0048 (0x0048 - 0x0000)
struct MarinerSettingSlider_GetAssets final
{
public:
	struct FMarinerSettingSliderAssets            ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSettingSlider_GetAssets) == 0x000008, "Wrong alignment on MarinerSettingSlider_GetAssets");
static_assert(sizeof(MarinerSettingSlider_GetAssets) == 0x000048, "Wrong size on MarinerSettingSlider_GetAssets");
static_assert(offsetof(MarinerSettingSlider_GetAssets, ReturnValue) == 0x000000, "Member 'MarinerSettingSlider_GetAssets::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSkinBlueprintLibrary.ApplyMaterialOverridesToSkeletalMesh
// 0x0018 (0x0018 - 0x0000)
struct MarinerSkinBlueprintLibrary_ApplyMaterialOverridesToSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMaterialOverride>              MaterialOverrides;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinBlueprintLibrary_ApplyMaterialOverridesToSkeletalMesh) == 0x000008, "Wrong alignment on MarinerSkinBlueprintLibrary_ApplyMaterialOverridesToSkeletalMesh");
static_assert(sizeof(MarinerSkinBlueprintLibrary_ApplyMaterialOverridesToSkeletalMesh) == 0x000018, "Wrong size on MarinerSkinBlueprintLibrary_ApplyMaterialOverridesToSkeletalMesh");
static_assert(offsetof(MarinerSkinBlueprintLibrary_ApplyMaterialOverridesToSkeletalMesh, Component) == 0x000000, "Member 'MarinerSkinBlueprintLibrary_ApplyMaterialOverridesToSkeletalMesh::Component' has a wrong offset!");
static_assert(offsetof(MarinerSkinBlueprintLibrary_ApplyMaterialOverridesToSkeletalMesh, MaterialOverrides) == 0x000008, "Member 'MarinerSkinBlueprintLibrary_ApplyMaterialOverridesToSkeletalMesh::MaterialOverrides' has a wrong offset!");

// Function Mariner.MarinerSkinCollectionDataAsset.LoadLargePortraitAsync
// 0x0010 (0x0010 - 0x0000)
struct MarinerSkinCollectionDataAsset_LoadLargePortraitAsync final
{
public:
	TDelegate<void(struct FSlateBrush& Brush)>    Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinCollectionDataAsset_LoadLargePortraitAsync) == 0x000004, "Wrong alignment on MarinerSkinCollectionDataAsset_LoadLargePortraitAsync");
static_assert(sizeof(MarinerSkinCollectionDataAsset_LoadLargePortraitAsync) == 0x000010, "Wrong size on MarinerSkinCollectionDataAsset_LoadLargePortraitAsync");
static_assert(offsetof(MarinerSkinCollectionDataAsset_LoadLargePortraitAsync, Callback) == 0x000000, "Member 'MarinerSkinCollectionDataAsset_LoadLargePortraitAsync::Callback' has a wrong offset!");

// Function Mariner.MarinerSkinCollectionDataAsset.LoadSmallPortraitAsync
// 0x0010 (0x0010 - 0x0000)
struct MarinerSkinCollectionDataAsset_LoadSmallPortraitAsync final
{
public:
	TDelegate<void(struct FSlateBrush& Brush)>    Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinCollectionDataAsset_LoadSmallPortraitAsync) == 0x000004, "Wrong alignment on MarinerSkinCollectionDataAsset_LoadSmallPortraitAsync");
static_assert(sizeof(MarinerSkinCollectionDataAsset_LoadSmallPortraitAsync) == 0x000010, "Wrong size on MarinerSkinCollectionDataAsset_LoadSmallPortraitAsync");
static_assert(offsetof(MarinerSkinCollectionDataAsset_LoadSmallPortraitAsync, Callback) == 0x000000, "Member 'MarinerSkinCollectionDataAsset_LoadSmallPortraitAsync::Callback' has a wrong offset!");

// Function Mariner.MarinerSkinCollectionDataAsset.GetAbilitySkins
// 0x0028 (0x0028 - 0x0000)
struct MarinerSkinCollectionDataAsset_GetAbilitySkins final
{
public:
	TSoftObjectPtr<class UMarinerAbilitySkinMap>  ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinCollectionDataAsset_GetAbilitySkins) == 0x000008, "Wrong alignment on MarinerSkinCollectionDataAsset_GetAbilitySkins");
static_assert(sizeof(MarinerSkinCollectionDataAsset_GetAbilitySkins) == 0x000028, "Wrong size on MarinerSkinCollectionDataAsset_GetAbilitySkins");
static_assert(offsetof(MarinerSkinCollectionDataAsset_GetAbilitySkins, ReturnValue) == 0x000000, "Member 'MarinerSkinCollectionDataAsset_GetAbilitySkins::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSkinCollectionDataAsset.GetCueSkins
// 0x0028 (0x0028 - 0x0000)
struct MarinerSkinCollectionDataAsset_GetCueSkins final
{
public:
	TSoftObjectPtr<class UMarinerCueSkinMap>      ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinCollectionDataAsset_GetCueSkins) == 0x000008, "Wrong alignment on MarinerSkinCollectionDataAsset_GetCueSkins");
static_assert(sizeof(MarinerSkinCollectionDataAsset_GetCueSkins) == 0x000028, "Wrong size on MarinerSkinCollectionDataAsset_GetCueSkins");
static_assert(offsetof(MarinerSkinCollectionDataAsset_GetCueSkins, ReturnValue) == 0x000000, "Member 'MarinerSkinCollectionDataAsset_GetCueSkins::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSkinCollectionDataAsset.GetFrontendUIData
// 0x0028 (0x0028 - 0x0000)
struct MarinerSkinCollectionDataAsset_GetFrontendUIData final
{
public:
	TSoftObjectPtr<class UMarinerCharacterFrontendSkinUIData> ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinCollectionDataAsset_GetFrontendUIData) == 0x000008, "Wrong alignment on MarinerSkinCollectionDataAsset_GetFrontendUIData");
static_assert(sizeof(MarinerSkinCollectionDataAsset_GetFrontendUIData) == 0x000028, "Wrong size on MarinerSkinCollectionDataAsset_GetFrontendUIData");
static_assert(offsetof(MarinerSkinCollectionDataAsset_GetFrontendUIData, ReturnValue) == 0x000000, "Member 'MarinerSkinCollectionDataAsset_GetFrontendUIData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSkinCollectionDataAsset.GetPortraitBackground
// 0x0008 (0x0008 - 0x0000)
struct MarinerSkinCollectionDataAsset_GetPortraitBackground final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinCollectionDataAsset_GetPortraitBackground) == 0x000008, "Wrong alignment on MarinerSkinCollectionDataAsset_GetPortraitBackground");
static_assert(sizeof(MarinerSkinCollectionDataAsset_GetPortraitBackground) == 0x000008, "Wrong size on MarinerSkinCollectionDataAsset_GetPortraitBackground");
static_assert(offsetof(MarinerSkinCollectionDataAsset_GetPortraitBackground, ReturnValue) == 0x000000, "Member 'MarinerSkinCollectionDataAsset_GetPortraitBackground::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSkinCollectionDataAsset.GetSkinAsset
// 0x0028 (0x0028 - 0x0000)
struct MarinerSkinCollectionDataAsset_GetSkinAsset final
{
public:
	TSoftObjectPtr<class UMarinerSkinDataAsset>   ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinCollectionDataAsset_GetSkinAsset) == 0x000008, "Wrong alignment on MarinerSkinCollectionDataAsset_GetSkinAsset");
static_assert(sizeof(MarinerSkinCollectionDataAsset_GetSkinAsset) == 0x000028, "Wrong size on MarinerSkinCollectionDataAsset_GetSkinAsset");
static_assert(offsetof(MarinerSkinCollectionDataAsset_GetSkinAsset, ReturnValue) == 0x000000, "Member 'MarinerSkinCollectionDataAsset_GetSkinAsset::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSkinCollectionDataAsset.GetSkinUIData
// 0x0028 (0x0028 - 0x0000)
struct MarinerSkinCollectionDataAsset_GetSkinUIData final
{
public:
	TSoftObjectPtr<class UMarinerSkinUIData>      ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinCollectionDataAsset_GetSkinUIData) == 0x000008, "Wrong alignment on MarinerSkinCollectionDataAsset_GetSkinUIData");
static_assert(sizeof(MarinerSkinCollectionDataAsset_GetSkinUIData) == 0x000028, "Wrong size on MarinerSkinCollectionDataAsset_GetSkinUIData");
static_assert(offsetof(MarinerSkinCollectionDataAsset_GetSkinUIData, ReturnValue) == 0x000000, "Member 'MarinerSkinCollectionDataAsset_GetSkinUIData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSkinCollectionDataAsset.GetSkinUIData_ForceLoaded
// 0x0008 (0x0008 - 0x0000)
struct MarinerSkinCollectionDataAsset_GetSkinUIData_ForceLoaded final
{
public:
	class UMarinerSkinUIData*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinCollectionDataAsset_GetSkinUIData_ForceLoaded) == 0x000008, "Wrong alignment on MarinerSkinCollectionDataAsset_GetSkinUIData_ForceLoaded");
static_assert(sizeof(MarinerSkinCollectionDataAsset_GetSkinUIData_ForceLoaded) == 0x000008, "Wrong size on MarinerSkinCollectionDataAsset_GetSkinUIData_ForceLoaded");
static_assert(offsetof(MarinerSkinCollectionDataAsset_GetSkinUIData_ForceLoaded, ReturnValue) == 0x000000, "Member 'MarinerSkinCollectionDataAsset_GetSkinUIData_ForceLoaded::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSkinCollectionDataAsset.GetUIData
// 0x0028 (0x0028 - 0x0000)
struct MarinerSkinCollectionDataAsset_GetUIData final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSkinCollectionDataAsset_GetUIData) == 0x000008, "Wrong alignment on MarinerSkinCollectionDataAsset_GetUIData");
static_assert(sizeof(MarinerSkinCollectionDataAsset_GetUIData) == 0x000028, "Wrong size on MarinerSkinCollectionDataAsset_GetUIData");
static_assert(offsetof(MarinerSkinCollectionDataAsset_GetUIData, ReturnValue) == 0x000000, "Member 'MarinerSkinCollectionDataAsset_GetUIData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSocialRequestsWidget.OnSocialRequestCanceled
// 0x0008 (0x0008 - 0x0000)
struct MarinerSocialRequestsWidget_OnSocialRequestCanceled final
{
public:
	class UMarinerSocialWidget*                   SocialWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSocialRequestsWidget_OnSocialRequestCanceled) == 0x000008, "Wrong alignment on MarinerSocialRequestsWidget_OnSocialRequestCanceled");
static_assert(sizeof(MarinerSocialRequestsWidget_OnSocialRequestCanceled) == 0x000008, "Wrong size on MarinerSocialRequestsWidget_OnSocialRequestCanceled");
static_assert(offsetof(MarinerSocialRequestsWidget_OnSocialRequestCanceled, SocialWidget) == 0x000000, "Member 'MarinerSocialRequestsWidget_OnSocialRequestCanceled::SocialWidget' has a wrong offset!");

// Function Mariner.MarinerSpikeTrap.CauseDamage
// 0x0010 (0x0010 - 0x0000)
struct MarinerSpikeTrap_CauseDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerDamageType>         TargetDamageType;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSpikeTrap_CauseDamage) == 0x000008, "Wrong alignment on MarinerSpikeTrap_CauseDamage");
static_assert(sizeof(MarinerSpikeTrap_CauseDamage) == 0x000010, "Wrong size on MarinerSpikeTrap_CauseDamage");
static_assert(offsetof(MarinerSpikeTrap_CauseDamage, DamagedActor) == 0x000000, "Member 'MarinerSpikeTrap_CauseDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(MarinerSpikeTrap_CauseDamage, TargetDamageType) == 0x000008, "Member 'MarinerSpikeTrap_CauseDamage::TargetDamageType' has a wrong offset!");

// Function Mariner.MarinerSpikeTrap.ChangeState
// 0x0001 (0x0001 - 0x0000)
struct MarinerSpikeTrap_ChangeState final
{
public:
	EMarinerSpikeTrapMovementState                NewESpikeTrapMovementState;                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSpikeTrap_ChangeState) == 0x000001, "Wrong alignment on MarinerSpikeTrap_ChangeState");
static_assert(sizeof(MarinerSpikeTrap_ChangeState) == 0x000001, "Wrong size on MarinerSpikeTrap_ChangeState");
static_assert(offsetof(MarinerSpikeTrap_ChangeState, NewESpikeTrapMovementState) == 0x000000, "Member 'MarinerSpikeTrap_ChangeState::NewESpikeTrapMovementState' has a wrong offset!");

// Function Mariner.MarinerSpikeTrap.OnDamageVolumeBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct MarinerSpikeTrap_OnDamageVolumeBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A05[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSpikeTrap_OnDamageVolumeBeginOverlap) == 0x000008, "Wrong alignment on MarinerSpikeTrap_OnDamageVolumeBeginOverlap");
static_assert(sizeof(MarinerSpikeTrap_OnDamageVolumeBeginOverlap) == 0x0000A8, "Wrong size on MarinerSpikeTrap_OnDamageVolumeBeginOverlap");
static_assert(offsetof(MarinerSpikeTrap_OnDamageVolumeBeginOverlap, OverlappedComponent) == 0x000000, "Member 'MarinerSpikeTrap_OnDamageVolumeBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MarinerSpikeTrap_OnDamageVolumeBeginOverlap, OtherActor) == 0x000008, "Member 'MarinerSpikeTrap_OnDamageVolumeBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerSpikeTrap_OnDamageVolumeBeginOverlap, OtherComp) == 0x000010, "Member 'MarinerSpikeTrap_OnDamageVolumeBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(MarinerSpikeTrap_OnDamageVolumeBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'MarinerSpikeTrap_OnDamageVolumeBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MarinerSpikeTrap_OnDamageVolumeBeginOverlap, bFromSweep) == 0x00001C, "Member 'MarinerSpikeTrap_OnDamageVolumeBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(MarinerSpikeTrap_OnDamageVolumeBeginOverlap, SweepResult) == 0x000020, "Member 'MarinerSpikeTrap_OnDamageVolumeBeginOverlap::SweepResult' has a wrong offset!");

// Function Mariner.MarinerSpikeTrap.OnMovementStateChanged
// 0x0001 (0x0001 - 0x0000)
struct MarinerSpikeTrap_OnMovementStateChanged final
{
public:
	EMarinerSpikeTrapMovementState                NewESpikeTrapMovementState;                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSpikeTrap_OnMovementStateChanged) == 0x000001, "Wrong alignment on MarinerSpikeTrap_OnMovementStateChanged");
static_assert(sizeof(MarinerSpikeTrap_OnMovementStateChanged) == 0x000001, "Wrong size on MarinerSpikeTrap_OnMovementStateChanged");
static_assert(offsetof(MarinerSpikeTrap_OnMovementStateChanged, NewESpikeTrapMovementState) == 0x000000, "Member 'MarinerSpikeTrap_OnMovementStateChanged::NewESpikeTrapMovementState' has a wrong offset!");

// Function Mariner.MarinerSpikeTrap.TimelineFloatReturn
// 0x0004 (0x0004 - 0x0000)
struct MarinerSpikeTrap_TimelineFloatReturn final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSpikeTrap_TimelineFloatReturn) == 0x000004, "Wrong alignment on MarinerSpikeTrap_TimelineFloatReturn");
static_assert(sizeof(MarinerSpikeTrap_TimelineFloatReturn) == 0x000004, "Wrong size on MarinerSpikeTrap_TimelineFloatReturn");
static_assert(offsetof(MarinerSpikeTrap_TimelineFloatReturn, Alpha) == 0x000000, "Member 'MarinerSpikeTrap_TimelineFloatReturn::Alpha' has a wrong offset!");

// Function Mariner.MarinerSplineFollowActor.BP_CalculateOverlappingItemImpulseVelocity
// 0x0048 (0x0048 - 0x0000)
struct MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity final
{
public:
	class AMarinerItem*                           ItemToImpulse;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ItemLocation;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A09[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    OverlappedOwnedComponent;                          // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitComponentForwardDirection;                      // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VectorFromComponentToItem;                         // 0x002C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0038(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A0A[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity) == 0x000008, "Wrong alignment on MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity");
static_assert(sizeof(MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity) == 0x000048, "Wrong size on MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity");
static_assert(offsetof(MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity, ItemToImpulse) == 0x000000, "Member 'MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity::ItemToImpulse' has a wrong offset!");
static_assert(offsetof(MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity, ItemLocation) == 0x000008, "Member 'MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity::ItemLocation' has a wrong offset!");
static_assert(offsetof(MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity, OverlappedOwnedComponent) == 0x000018, "Member 'MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity::OverlappedOwnedComponent' has a wrong offset!");
static_assert(offsetof(MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity, HitComponentForwardDirection) == 0x000020, "Member 'MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity::HitComponentForwardDirection' has a wrong offset!");
static_assert(offsetof(MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity, VectorFromComponentToItem) == 0x00002C, "Member 'MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity::VectorFromComponentToItem' has a wrong offset!");
static_assert(offsetof(MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity, ReturnValue) == 0x000038, "Member 'MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSplineFollowActor.BP_HandleSplineMovementCompletion
// 0x0008 (0x0008 - 0x0000)
struct MarinerSplineFollowActor_BP_HandleSplineMovementCompletion final
{
public:
	bool                                          bHasSplineReachedEnd;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A0B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentAuthoritativeProgressRatio;                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSplineFollowActor_BP_HandleSplineMovementCompletion) == 0x000004, "Wrong alignment on MarinerSplineFollowActor_BP_HandleSplineMovementCompletion");
static_assert(sizeof(MarinerSplineFollowActor_BP_HandleSplineMovementCompletion) == 0x000008, "Wrong size on MarinerSplineFollowActor_BP_HandleSplineMovementCompletion");
static_assert(offsetof(MarinerSplineFollowActor_BP_HandleSplineMovementCompletion, bHasSplineReachedEnd) == 0x000000, "Member 'MarinerSplineFollowActor_BP_HandleSplineMovementCompletion::bHasSplineReachedEnd' has a wrong offset!");
static_assert(offsetof(MarinerSplineFollowActor_BP_HandleSplineMovementCompletion, CurrentAuthoritativeProgressRatio) == 0x000004, "Member 'MarinerSplineFollowActor_BP_HandleSplineMovementCompletion::CurrentAuthoritativeProgressRatio' has a wrong offset!");

// Function Mariner.MarinerSplineFollowingProp.GetFollowSplineMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct MarinerSplineFollowingProp_GetFollowSplineMovementComponent final
{
public:
	class UMarinerFollowSplineMovement*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSplineFollowingProp_GetFollowSplineMovementComponent) == 0x000008, "Wrong alignment on MarinerSplineFollowingProp_GetFollowSplineMovementComponent");
static_assert(sizeof(MarinerSplineFollowingProp_GetFollowSplineMovementComponent) == 0x000008, "Wrong size on MarinerSplineFollowingProp_GetFollowSplineMovementComponent");
static_assert(offsetof(MarinerSplineFollowingProp_GetFollowSplineMovementComponent, ReturnValue) == 0x000000, "Member 'MarinerSplineFollowingProp_GetFollowSplineMovementComponent::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerStartScreenMenu.OnLoginComplete
// 0x0001 (0x0001 - 0x0000)
struct MarinerStartScreenMenu_OnLoginComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerStartScreenMenu_OnLoginComplete) == 0x000001, "Wrong alignment on MarinerStartScreenMenu_OnLoginComplete");
static_assert(sizeof(MarinerStartScreenMenu_OnLoginComplete) == 0x000001, "Wrong size on MarinerStartScreenMenu_OnLoginComplete");
static_assert(offsetof(MarinerStartScreenMenu_OnLoginComplete, ReturnValue) == 0x000000, "Member 'MarinerStartScreenMenu_OnLoginComplete::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerStartScreenMenu.OnQuitGameConfirmed
// 0x0018 (0x0018 - 0x0000)
struct MarinerStartScreenMenu_OnQuitGameConfirmed final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerStartScreenMenu_OnQuitGameConfirmed) == 0x000008, "Wrong alignment on MarinerStartScreenMenu_OnQuitGameConfirmed");
static_assert(sizeof(MarinerStartScreenMenu_OnQuitGameConfirmed) == 0x000018, "Wrong size on MarinerStartScreenMenu_OnQuitGameConfirmed");
static_assert(offsetof(MarinerStartScreenMenu_OnQuitGameConfirmed, KeyPressed) == 0x000000, "Member 'MarinerStartScreenMenu_OnQuitGameConfirmed::KeyPressed' has a wrong offset!");

// Function Mariner.MarinerStartScreenMenu.IsLoggingIn
// 0x0001 (0x0001 - 0x0000)
struct MarinerStartScreenMenu_IsLoggingIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerStartScreenMenu_IsLoggingIn) == 0x000001, "Wrong alignment on MarinerStartScreenMenu_IsLoggingIn");
static_assert(sizeof(MarinerStartScreenMenu_IsLoggingIn) == 0x000001, "Wrong size on MarinerStartScreenMenu_IsLoggingIn");
static_assert(offsetof(MarinerStartScreenMenu_IsLoggingIn, ReturnValue) == 0x000000, "Member 'MarinerStartScreenMenu_IsLoggingIn::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerStatsFrame.PopulatePlayerStats
// 0x0158 (0x0158 - 0x0000)
struct MarinerStatsFrame_PopulatePlayerStats final
{
public:
	struct FMatchEnd                              MatchEndData;                                      // 0x0000(0x0068)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FMatchEndPlayer                        MatchEndPlayerData;                                // 0x0068(0x00E8)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayer;                                    // 0x0150(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsClientTeam;                                     // 0x0151(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A0E[0x2];                                     // 0x0152(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rank;                                              // 0x0154(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerStatsFrame_PopulatePlayerStats) == 0x000008, "Wrong alignment on MarinerStatsFrame_PopulatePlayerStats");
static_assert(sizeof(MarinerStatsFrame_PopulatePlayerStats) == 0x000158, "Wrong size on MarinerStatsFrame_PopulatePlayerStats");
static_assert(offsetof(MarinerStatsFrame_PopulatePlayerStats, MatchEndData) == 0x000000, "Member 'MarinerStatsFrame_PopulatePlayerStats::MatchEndData' has a wrong offset!");
static_assert(offsetof(MarinerStatsFrame_PopulatePlayerStats, MatchEndPlayerData) == 0x000068, "Member 'MarinerStatsFrame_PopulatePlayerStats::MatchEndPlayerData' has a wrong offset!");
static_assert(offsetof(MarinerStatsFrame_PopulatePlayerStats, bIsLocalPlayer) == 0x000150, "Member 'MarinerStatsFrame_PopulatePlayerStats::bIsLocalPlayer' has a wrong offset!");
static_assert(offsetof(MarinerStatsFrame_PopulatePlayerStats, bIsClientTeam) == 0x000151, "Member 'MarinerStatsFrame_PopulatePlayerStats::bIsClientTeam' has a wrong offset!");
static_assert(offsetof(MarinerStatsFrame_PopulatePlayerStats, Rank) == 0x000154, "Member 'MarinerStatsFrame_PopulatePlayerStats::Rank' has a wrong offset!");

// Function Mariner.MarinerStoreGlobals.GetImage
// 0x00A0 (0x00A0 - 0x0000)
struct MarinerStoreGlobals_GetImage final
{
public:
	class FName                                   ImageId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDefaultBrush;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A11[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ImageBrushOut;                                     // 0x0010(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A12[0x7];                                     // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerStoreGlobals_GetImage) == 0x000008, "Wrong alignment on MarinerStoreGlobals_GetImage");
static_assert(sizeof(MarinerStoreGlobals_GetImage) == 0x0000A0, "Wrong size on MarinerStoreGlobals_GetImage");
static_assert(offsetof(MarinerStoreGlobals_GetImage, ImageId) == 0x000000, "Member 'MarinerStoreGlobals_GetImage::ImageId' has a wrong offset!");
static_assert(offsetof(MarinerStoreGlobals_GetImage, bUseDefaultBrush) == 0x000008, "Member 'MarinerStoreGlobals_GetImage::bUseDefaultBrush' has a wrong offset!");
static_assert(offsetof(MarinerStoreGlobals_GetImage, ImageBrushOut) == 0x000010, "Member 'MarinerStoreGlobals_GetImage::ImageBrushOut' has a wrong offset!");
static_assert(offsetof(MarinerStoreGlobals_GetImage, ReturnValue) == 0x000098, "Member 'MarinerStoreGlobals_GetImage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerStoreGlobals.GetOfferTypeName
// 0x00F8 (0x00F8 - 0x0000)
struct MarinerStoreGlobals_GetOfferTypeName final
{
public:
	struct FMangoPurchaseOffer                    InOffer;                                           // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   OutOfferName;                                      // 0x00D8(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A13[0x7];                                     // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerStoreGlobals_GetOfferTypeName) == 0x000008, "Wrong alignment on MarinerStoreGlobals_GetOfferTypeName");
static_assert(sizeof(MarinerStoreGlobals_GetOfferTypeName) == 0x0000F8, "Wrong size on MarinerStoreGlobals_GetOfferTypeName");
static_assert(offsetof(MarinerStoreGlobals_GetOfferTypeName, InOffer) == 0x000000, "Member 'MarinerStoreGlobals_GetOfferTypeName::InOffer' has a wrong offset!");
static_assert(offsetof(MarinerStoreGlobals_GetOfferTypeName, OutOfferName) == 0x0000D8, "Member 'MarinerStoreGlobals_GetOfferTypeName::OutOfferName' has a wrong offset!");
static_assert(offsetof(MarinerStoreGlobals_GetOfferTypeName, ReturnValue) == 0x0000F0, "Member 'MarinerStoreGlobals_GetOfferTypeName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerStoreRootMenu.OnGameVersionChanged
// 0x0001 (0x0001 - 0x0000)
struct MarinerStoreRootMenu_OnGameVersionChanged final
{
public:
	EMarinerGameVersion                           NewVersion;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerStoreRootMenu_OnGameVersionChanged) == 0x000001, "Wrong alignment on MarinerStoreRootMenu_OnGameVersionChanged");
static_assert(sizeof(MarinerStoreRootMenu_OnGameVersionChanged) == 0x000001, "Wrong size on MarinerStoreRootMenu_OnGameVersionChanged");
static_assert(offsetof(MarinerStoreRootMenu_OnGameVersionChanged, NewVersion) == 0x000000, "Member 'MarinerStoreRootMenu_OnGameVersionChanged::NewVersion' has a wrong offset!");

// Function Mariner.MarinerStoreRootMenu.OnOfferSelected
// 0x0008 (0x0008 - 0x0000)
struct MarinerStoreRootMenu_OnOfferSelected final
{
public:
	class UMarinerLayeredButton*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerStoreRootMenu_OnOfferSelected) == 0x000008, "Wrong alignment on MarinerStoreRootMenu_OnOfferSelected");
static_assert(sizeof(MarinerStoreRootMenu_OnOfferSelected) == 0x000008, "Wrong size on MarinerStoreRootMenu_OnOfferSelected");
static_assert(offsetof(MarinerStoreRootMenu_OnOfferSelected, Instance) == 0x000000, "Member 'MarinerStoreRootMenu_OnOfferSelected::Instance' has a wrong offset!");

// Function Mariner.MarinerStoreRootMenu.OnOfferStateChanged
// 0x0020 (0x0020 - 0x0000)
struct MarinerStoreRootMenu_OnOfferStateChanged final
{
public:
	TArray<struct FMangoPurchaseOffer>            StartingOffers;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FMangoPurchaseOffer>            EndingOffers;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerStoreRootMenu_OnOfferStateChanged) == 0x000008, "Wrong alignment on MarinerStoreRootMenu_OnOfferStateChanged");
static_assert(sizeof(MarinerStoreRootMenu_OnOfferStateChanged) == 0x000020, "Wrong size on MarinerStoreRootMenu_OnOfferStateChanged");
static_assert(offsetof(MarinerStoreRootMenu_OnOfferStateChanged, StartingOffers) == 0x000000, "Member 'MarinerStoreRootMenu_OnOfferStateChanged::StartingOffers' has a wrong offset!");
static_assert(offsetof(MarinerStoreRootMenu_OnOfferStateChanged, EndingOffers) == 0x000010, "Member 'MarinerStoreRootMenu_OnOfferStateChanged::EndingOffers' has a wrong offset!");

// Function Mariner.MarinerStoreRootMenu.OnPurchaseFlowComplete
// 0x0001 (0x0001 - 0x0000)
struct MarinerStoreRootMenu_OnPurchaseFlowComplete final
{
public:
	bool                                          bOfferPurchased;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerStoreRootMenu_OnPurchaseFlowComplete) == 0x000001, "Wrong alignment on MarinerStoreRootMenu_OnPurchaseFlowComplete");
static_assert(sizeof(MarinerStoreRootMenu_OnPurchaseFlowComplete) == 0x000001, "Wrong size on MarinerStoreRootMenu_OnPurchaseFlowComplete");
static_assert(offsetof(MarinerStoreRootMenu_OnPurchaseFlowComplete, bOfferPurchased) == 0x000000, "Member 'MarinerStoreRootMenu_OnPurchaseFlowComplete::bOfferPurchased' has a wrong offset!");

// Function Mariner.MarinerSubArtifactsMenu.OnArtifactWidgetHover
// 0x0010 (0x0010 - 0x0000)
struct MarinerSubArtifactsMenu_OnArtifactWidgetHover final
{
public:
	class UMarinerLayeredButton*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromKeyboard;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromMouse;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A16[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerSubArtifactsMenu_OnArtifactWidgetHover) == 0x000008, "Wrong alignment on MarinerSubArtifactsMenu_OnArtifactWidgetHover");
static_assert(sizeof(MarinerSubArtifactsMenu_OnArtifactWidgetHover) == 0x000010, "Wrong size on MarinerSubArtifactsMenu_OnArtifactWidgetHover");
static_assert(offsetof(MarinerSubArtifactsMenu_OnArtifactWidgetHover, Instance) == 0x000000, "Member 'MarinerSubArtifactsMenu_OnArtifactWidgetHover::Instance' has a wrong offset!");
static_assert(offsetof(MarinerSubArtifactsMenu_OnArtifactWidgetHover, bFromKeyboard) == 0x000008, "Member 'MarinerSubArtifactsMenu_OnArtifactWidgetHover::bFromKeyboard' has a wrong offset!");
static_assert(offsetof(MarinerSubArtifactsMenu_OnArtifactWidgetHover, bFromMouse) == 0x000009, "Member 'MarinerSubArtifactsMenu_OnArtifactWidgetHover::bFromMouse' has a wrong offset!");

// Function Mariner.MarinerSynchronousPickup.BP_OnPickedUp
// 0x0008 (0x0008 - 0x0000)
struct MarinerSynchronousPickup_BP_OnPickedUp final
{
public:
	class AMarinerPlayerState*                    PlayerWhoPickedUp;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSynchronousPickup_BP_OnPickedUp) == 0x000008, "Wrong alignment on MarinerSynchronousPickup_BP_OnPickedUp");
static_assert(sizeof(MarinerSynchronousPickup_BP_OnPickedUp) == 0x000008, "Wrong size on MarinerSynchronousPickup_BP_OnPickedUp");
static_assert(offsetof(MarinerSynchronousPickup_BP_OnPickedUp, PlayerWhoPickedUp) == 0x000000, "Member 'MarinerSynchronousPickup_BP_OnPickedUp::PlayerWhoPickedUp' has a wrong offset!");

// Function Mariner.MarinerSynchronousPickup.BP_CanBePickedUp
// 0x0010 (0x0010 - 0x0000)
struct MarinerSynchronousPickup_BP_CanBePickedUp final
{
public:
	class AMarinerCharacter*                      InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerSynchronousPickup_BP_CanBePickedUp) == 0x000008, "Wrong alignment on MarinerSynchronousPickup_BP_CanBePickedUp");
static_assert(sizeof(MarinerSynchronousPickup_BP_CanBePickedUp) == 0x000010, "Wrong size on MarinerSynchronousPickup_BP_CanBePickedUp");
static_assert(offsetof(MarinerSynchronousPickup_BP_CanBePickedUp, InPawn) == 0x000000, "Member 'MarinerSynchronousPickup_BP_CanBePickedUp::InPawn' has a wrong offset!");
static_assert(offsetof(MarinerSynchronousPickup_BP_CanBePickedUp, ReturnValue) == 0x000008, "Member 'MarinerSynchronousPickup_BP_CanBePickedUp::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSynchronousPickup.GetPickedUpBy
// 0x0008 (0x0008 - 0x0000)
struct MarinerSynchronousPickup_GetPickedUpBy final
{
public:
	class AMarinerPlayerState*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSynchronousPickup_GetPickedUpBy) == 0x000008, "Wrong alignment on MarinerSynchronousPickup_GetPickedUpBy");
static_assert(sizeof(MarinerSynchronousPickup_GetPickedUpBy) == 0x000008, "Wrong size on MarinerSynchronousPickup_GetPickedUpBy");
static_assert(offsetof(MarinerSynchronousPickup_GetPickedUpBy, ReturnValue) == 0x000000, "Member 'MarinerSynchronousPickup_GetPickedUpBy::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSynchronousPickupManager.OnLocalPlayerRealityChanged
// 0x0002 (0x0002 - 0x0000)
struct MarinerSynchronousPickupManager_OnLocalPlayerRealityChanged final
{
public:
	EMarinerRealityState                          OldReality;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerRealityState                          NewReality;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSynchronousPickupManager_OnLocalPlayerRealityChanged) == 0x000001, "Wrong alignment on MarinerSynchronousPickupManager_OnLocalPlayerRealityChanged");
static_assert(sizeof(MarinerSynchronousPickupManager_OnLocalPlayerRealityChanged) == 0x000002, "Wrong size on MarinerSynchronousPickupManager_OnLocalPlayerRealityChanged");
static_assert(offsetof(MarinerSynchronousPickupManager_OnLocalPlayerRealityChanged, OldReality) == 0x000000, "Member 'MarinerSynchronousPickupManager_OnLocalPlayerRealityChanged::OldReality' has a wrong offset!");
static_assert(offsetof(MarinerSynchronousPickupManager_OnLocalPlayerRealityChanged, NewReality) == 0x000001, "Member 'MarinerSynchronousPickupManager_OnLocalPlayerRealityChanged::NewReality' has a wrong offset!");

// Function Mariner.MarinerSynchronousPickupManager.OnRep_NonDormantPickupsPayload
// 0x0028 (0x0028 - 0x0000)
struct MarinerSynchronousPickupManager_OnRep_NonDormantPickupsPayload final
{
public:
	struct FMarinerSynchronousPickupsPayload      PreviousState;                                     // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSynchronousPickupManager_OnRep_NonDormantPickupsPayload) == 0x000008, "Wrong alignment on MarinerSynchronousPickupManager_OnRep_NonDormantPickupsPayload");
static_assert(sizeof(MarinerSynchronousPickupManager_OnRep_NonDormantPickupsPayload) == 0x000028, "Wrong size on MarinerSynchronousPickupManager_OnRep_NonDormantPickupsPayload");
static_assert(offsetof(MarinerSynchronousPickupManager_OnRep_NonDormantPickupsPayload, PreviousState) == 0x000000, "Member 'MarinerSynchronousPickupManager_OnRep_NonDormantPickupsPayload::PreviousState' has a wrong offset!");

// Function Mariner.MarinerSynchronousPickupManager.SpawnAllPickups
// 0x0001 (0x0001 - 0x0000)
struct MarinerSynchronousPickupManager_SpawnAllPickups final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSynchronousPickupManager_SpawnAllPickups) == 0x000001, "Wrong alignment on MarinerSynchronousPickupManager_SpawnAllPickups");
static_assert(sizeof(MarinerSynchronousPickupManager_SpawnAllPickups) == 0x000001, "Wrong size on MarinerSynchronousPickupManager_SpawnAllPickups");
static_assert(offsetof(MarinerSynchronousPickupManager_SpawnAllPickups, ReturnValue) == 0x000000, "Member 'MarinerSynchronousPickupManager_SpawnAllPickups::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSynchronousPickupManager.SpawnPickups
// 0x0008 (0x0008 - 0x0000)
struct MarinerSynchronousPickupManager_SpawnPickups final
{
public:
	int32                                         SetIndexToSpawn;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1F[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerSynchronousPickupManager_SpawnPickups) == 0x000004, "Wrong alignment on MarinerSynchronousPickupManager_SpawnPickups");
static_assert(sizeof(MarinerSynchronousPickupManager_SpawnPickups) == 0x000008, "Wrong size on MarinerSynchronousPickupManager_SpawnPickups");
static_assert(offsetof(MarinerSynchronousPickupManager_SpawnPickups, SetIndexToSpawn) == 0x000000, "Member 'MarinerSynchronousPickupManager_SpawnPickups::SetIndexToSpawn' has a wrong offset!");
static_assert(offsetof(MarinerSynchronousPickupManager_SpawnPickups, ReturnValue) == 0x000004, "Member 'MarinerSynchronousPickupManager_SpawnPickups::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerSynchronousPickupManager.GetNonDormantPickupState
// 0x0001 (0x0001 - 0x0000)
struct MarinerSynchronousPickupManager_GetNonDormantPickupState final
{
public:
	EMarinerPickupState                           ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerSynchronousPickupManager_GetNonDormantPickupState) == 0x000001, "Wrong alignment on MarinerSynchronousPickupManager_GetNonDormantPickupState");
static_assert(sizeof(MarinerSynchronousPickupManager_GetNonDormantPickupState) == 0x000001, "Wrong size on MarinerSynchronousPickupManager_GetNonDormantPickupState");
static_assert(offsetof(MarinerSynchronousPickupManager_GetNonDormantPickupState, ReturnValue) == 0x000000, "Member 'MarinerSynchronousPickupManager_GetNonDormantPickupState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_ApplyAreaOfEffectDamage.ApplyAreaOfEffectDamage
// 0x0040 (0x0040 - 0x0000)
struct MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerDamageType>         AOEDamageType;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A21[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UMarinerTask_ApplyAreaOfEffectDamage*   ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage) == 0x000008, "Wrong alignment on MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage");
static_assert(sizeof(MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage) == 0x000040, "Wrong size on MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage");
static_assert(offsetof(MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage, OwningAbility) == 0x000000, "Member 'MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage, TaskInstanceName) == 0x000008, "Member 'MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage, AOEDamageType) == 0x000010, "Member 'MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage::AOEDamageType' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage, Origin) == 0x000018, "Member 'MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage::Origin' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage, IgnoreActors) == 0x000028, "Member 'MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage::IgnoreActors' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage, ReturnValue) == 0x000038, "Member 'MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_ApplyRecovery.ApplyRecovery
// 0x0020 (0x0020 - 0x0000)
struct MarinerTask_ApplyRecovery_ApplyRecovery final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetJumpCount;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A24[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaximumVelocity;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerTask_ApplyRecovery*             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ApplyRecovery_ApplyRecovery) == 0x000008, "Wrong alignment on MarinerTask_ApplyRecovery_ApplyRecovery");
static_assert(sizeof(MarinerTask_ApplyRecovery_ApplyRecovery) == 0x000020, "Wrong size on MarinerTask_ApplyRecovery_ApplyRecovery");
static_assert(offsetof(MarinerTask_ApplyRecovery_ApplyRecovery, OwningAbility) == 0x000000, "Member 'MarinerTask_ApplyRecovery_ApplyRecovery::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRecovery_ApplyRecovery, TaskInstanceName) == 0x000008, "Member 'MarinerTask_ApplyRecovery_ApplyRecovery::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRecovery_ApplyRecovery, bResetJumpCount) == 0x000010, "Member 'MarinerTask_ApplyRecovery_ApplyRecovery::bResetJumpCount' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRecovery_ApplyRecovery, MaximumVelocity) == 0x000014, "Member 'MarinerTask_ApplyRecovery_ApplyRecovery::MaximumVelocity' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRecovery_ApplyRecovery, ReturnValue) == 0x000018, "Member 'MarinerTask_ApplyRecovery_ApplyRecovery::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_ApplyRecovery.ApplyRecoverySynced
// 0x0028 (0x0028 - 0x0000)
struct MarinerTask_ApplyRecovery_ApplyRecoverySynced final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetJumpCount;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A25[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults> LerpToSpeedRootMotionDefaults;                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerTask_ApplyRecovery*             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ApplyRecovery_ApplyRecoverySynced) == 0x000008, "Wrong alignment on MarinerTask_ApplyRecovery_ApplyRecoverySynced");
static_assert(sizeof(MarinerTask_ApplyRecovery_ApplyRecoverySynced) == 0x000028, "Wrong size on MarinerTask_ApplyRecovery_ApplyRecoverySynced");
static_assert(offsetof(MarinerTask_ApplyRecovery_ApplyRecoverySynced, OwningAbility) == 0x000000, "Member 'MarinerTask_ApplyRecovery_ApplyRecoverySynced::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRecovery_ApplyRecoverySynced, TaskInstanceName) == 0x000008, "Member 'MarinerTask_ApplyRecovery_ApplyRecoverySynced::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRecovery_ApplyRecoverySynced, bResetJumpCount) == 0x000010, "Member 'MarinerTask_ApplyRecovery_ApplyRecoverySynced::bResetJumpCount' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRecovery_ApplyRecoverySynced, LerpToSpeedRootMotionDefaults) == 0x000018, "Member 'MarinerTask_ApplyRecovery_ApplyRecoverySynced::LerpToSpeedRootMotionDefaults' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRecovery_ApplyRecoverySynced, ReturnValue) == 0x000020, "Member 'MarinerTask_ApplyRecovery_ApplyRecoverySynced::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_ApplyRecovery.RecoveryAppliedCallback
// 0x0008 (0x0008 - 0x0000)
struct MarinerTask_ApplyRecovery_RecoveryAppliedCallback final
{
public:
	class FName                                   InRootMotionName;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ApplyRecovery_RecoveryAppliedCallback) == 0x000004, "Wrong alignment on MarinerTask_ApplyRecovery_RecoveryAppliedCallback");
static_assert(sizeof(MarinerTask_ApplyRecovery_RecoveryAppliedCallback) == 0x000008, "Wrong size on MarinerTask_ApplyRecovery_RecoveryAppliedCallback");
static_assert(offsetof(MarinerTask_ApplyRecovery_RecoveryAppliedCallback, InRootMotionName) == 0x000000, "Member 'MarinerTask_ApplyRecovery_RecoveryAppliedCallback::InRootMotionName' has a wrong offset!");

// Function Mariner.MarinerTask_ApplyRootMotionMoveToDynamicForce.CreateInstance
// 0x0070 (0x0070 - 0x0000)
struct MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       Param_AimDataHandle;                               // 0x0010(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Param_Duration;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_MoveRange;                                   // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Param_PathProgressionCurve;                        // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVelocityOnFinish;                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bRestrictSpeedToExpected;                    // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A29[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AActor>>             Param_NonDamageableActorTypesToIgnoreHit;          // 0x0050(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A2A[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerTask_ApplyRootMotionMoveToDynamicForce* ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance) == 0x000008, "Wrong alignment on MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance");
static_assert(sizeof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance) == 0x000070, "Wrong size on MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance, OwningAbility) == 0x000000, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance, TaskInstanceName) == 0x000008, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance, Param_AimDataHandle) == 0x000010, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance::Param_AimDataHandle' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance, Param_Duration) == 0x000038, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance::Param_Duration' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance, Param_MoveRange) == 0x00003C, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance::Param_MoveRange' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance, Param_PathProgressionCurve) == 0x000040, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance::Param_PathProgressionCurve' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance, ClampVelocityOnFinish) == 0x000048, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance::ClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance, Param_bRestrictSpeedToExpected) == 0x00004C, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance::Param_bRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance, Param_NonDamageableActorTypesToIgnoreHit) == 0x000050, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance::Param_NonDamageableActorTypesToIgnoreHit' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance, bDrawDebug) == 0x000060, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance::bDrawDebug' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance, ReturnValue) == 0x000068, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_ApplyRootMotionMoveToDynamicForce.CreateInstanceWithDamageSphere
// 0x0088 (0x0088 - 0x0000)
struct MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       Param_AimDataHandle;                               // 0x0010(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Param_Duration;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_MoveRange;                                   // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Param_PathProgressionCurve;                        // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVelocityOnFinish;                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bRestrictSpeedToExpected;                    // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             Param_DamageSphereCollisionChannel;                // 0x004D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A2B[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param_DamageOverlapSphereRadius;                   // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A2C[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AActor>>             Param_ActorTypesNotToDamageOverlap;                // 0x0058(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             Param_NonDamageableActorTypesToIgnoreHit;          // 0x0068(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A2D[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerTask_ApplyRootMotionMoveToDynamicForce* ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere) == 0x000008, "Wrong alignment on MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere");
static_assert(sizeof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere) == 0x000088, "Wrong size on MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere, OwningAbility) == 0x000000, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere, TaskInstanceName) == 0x000008, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere, Param_AimDataHandle) == 0x000010, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere::Param_AimDataHandle' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere, Param_Duration) == 0x000038, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere::Param_Duration' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere, Param_MoveRange) == 0x00003C, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere::Param_MoveRange' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere, Param_PathProgressionCurve) == 0x000040, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere::Param_PathProgressionCurve' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere, ClampVelocityOnFinish) == 0x000048, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere::ClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere, Param_bRestrictSpeedToExpected) == 0x00004C, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere::Param_bRestrictSpeedToExpected' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere, Param_DamageSphereCollisionChannel) == 0x00004D, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere::Param_DamageSphereCollisionChannel' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere, Param_DamageOverlapSphereRadius) == 0x000050, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere::Param_DamageOverlapSphereRadius' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere, Param_ActorTypesNotToDamageOverlap) == 0x000058, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere::Param_ActorTypesNotToDamageOverlap' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere, Param_NonDamageableActorTypesToIgnoreHit) == 0x000068, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere::Param_NonDamageableActorTypesToIgnoreHit' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere, bDrawDebug) == 0x000078, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere::bDrawDebug' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere, ReturnValue) == 0x000080, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_ApplyRootMotionMoveToDynamicForce.OnAvatarActorHit
// 0x00A8 (0x00A8 - 0x0000)
struct MarinerTask_ApplyRootMotionMoveToDynamicForce_OnAvatarActorHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A2E[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnAvatarActorHit) == 0x000008, "Wrong alignment on MarinerTask_ApplyRootMotionMoveToDynamicForce_OnAvatarActorHit");
static_assert(sizeof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnAvatarActorHit) == 0x0000A8, "Wrong size on MarinerTask_ApplyRootMotionMoveToDynamicForce_OnAvatarActorHit");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnAvatarActorHit, SelfActor) == 0x000000, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_OnAvatarActorHit::SelfActor' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnAvatarActorHit, OtherActor) == 0x000008, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_OnAvatarActorHit::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnAvatarActorHit, NormalImpulse) == 0x000010, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_OnAvatarActorHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnAvatarActorHit, Hit) == 0x00001C, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_OnAvatarActorHit::Hit' has a wrong offset!");

// Function Mariner.MarinerTask_ApplyRootMotionMoveToDynamicForce.OnDamageSphereOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A2F[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap) == 0x000008, "Wrong alignment on MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap");
static_assert(sizeof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap) == 0x0000A8, "Wrong size on MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap, OverlappedComponent) == 0x000000, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap, OtherActor) == 0x000008, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap, OtherComp) == 0x000010, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap, OtherBodyIndex) == 0x000018, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap, bFromSweep) == 0x00001C, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap, SweepResult) == 0x000020, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap::SweepResult' has a wrong offset!");

// Function Mariner.MarinerTask_ApplyRootMotionMoveToDynamicForce.OnImpendingMegablast
// 0x0010 (0x0010 - 0x0000)
struct MarinerTask_ApplyRootMotionMoveToDynamicForce_OnImpendingMegablast final
{
public:
	const class UMarinerDamageableComponent*      RelevantDamageableComponent;                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AMarinerCharacter*                CharacterExpectingMegablast;                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnImpendingMegablast) == 0x000008, "Wrong alignment on MarinerTask_ApplyRootMotionMoveToDynamicForce_OnImpendingMegablast");
static_assert(sizeof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnImpendingMegablast) == 0x000010, "Wrong size on MarinerTask_ApplyRootMotionMoveToDynamicForce_OnImpendingMegablast");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnImpendingMegablast, RelevantDamageableComponent) == 0x000000, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_OnImpendingMegablast::RelevantDamageableComponent' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionMoveToDynamicForce_OnImpendingMegablast, CharacterExpectingMegablast) == 0x000008, "Member 'MarinerTask_ApplyRootMotionMoveToDynamicForce_OnImpendingMegablast::CharacterExpectingMegablast' has a wrong offset!");

// Function Mariner.MarinerTask_ApplyRootMotionSlowToStop.CreateInstance
// 0x0028 (0x0028 - 0x0000)
struct MarinerTask_ApplyRootMotionSlowToStop_CreateInstance final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Duration;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A32[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Param_DecelerationCurve;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerTask_ApplyRootMotionSlowToStop* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ApplyRootMotionSlowToStop_CreateInstance) == 0x000008, "Wrong alignment on MarinerTask_ApplyRootMotionSlowToStop_CreateInstance");
static_assert(sizeof(MarinerTask_ApplyRootMotionSlowToStop_CreateInstance) == 0x000028, "Wrong size on MarinerTask_ApplyRootMotionSlowToStop_CreateInstance");
static_assert(offsetof(MarinerTask_ApplyRootMotionSlowToStop_CreateInstance, OwningAbility) == 0x000000, "Member 'MarinerTask_ApplyRootMotionSlowToStop_CreateInstance::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionSlowToStop_CreateInstance, TaskInstanceName) == 0x000008, "Member 'MarinerTask_ApplyRootMotionSlowToStop_CreateInstance::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionSlowToStop_CreateInstance, Param_Duration) == 0x000010, "Member 'MarinerTask_ApplyRootMotionSlowToStop_CreateInstance::Param_Duration' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionSlowToStop_CreateInstance, Param_DecelerationCurve) == 0x000018, "Member 'MarinerTask_ApplyRootMotionSlowToStop_CreateInstance::Param_DecelerationCurve' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionSlowToStop_CreateInstance, ReturnValue) == 0x000020, "Member 'MarinerTask_ApplyRootMotionSlowToStop_CreateInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_ApplyRootMotionSlowToStop.OnImpendingMegablast
// 0x0010 (0x0010 - 0x0000)
struct MarinerTask_ApplyRootMotionSlowToStop_OnImpendingMegablast final
{
public:
	const class UMarinerDamageableComponent*      RelevantDamageableComponent;                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AMarinerCharacter*                CharacterExpectingMegablast;                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ApplyRootMotionSlowToStop_OnImpendingMegablast) == 0x000008, "Wrong alignment on MarinerTask_ApplyRootMotionSlowToStop_OnImpendingMegablast");
static_assert(sizeof(MarinerTask_ApplyRootMotionSlowToStop_OnImpendingMegablast) == 0x000010, "Wrong size on MarinerTask_ApplyRootMotionSlowToStop_OnImpendingMegablast");
static_assert(offsetof(MarinerTask_ApplyRootMotionSlowToStop_OnImpendingMegablast, RelevantDamageableComponent) == 0x000000, "Member 'MarinerTask_ApplyRootMotionSlowToStop_OnImpendingMegablast::RelevantDamageableComponent' has a wrong offset!");
static_assert(offsetof(MarinerTask_ApplyRootMotionSlowToStop_OnImpendingMegablast, CharacterExpectingMegablast) == 0x000008, "Member 'MarinerTask_ApplyRootMotionSlowToStop_OnImpendingMegablast::CharacterExpectingMegablast' has a wrong offset!");

// Function Mariner.MarinerTask_DropItems.DropItemsByPriority
// 0x0020 (0x0020 - 0x0000)
struct MarinerTask_DropItems_DropItemsByPriority final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPriorityStatusToRemove;                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A34[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerTask_DropItems*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_DropItems_DropItemsByPriority) == 0x000008, "Wrong alignment on MarinerTask_DropItems_DropItemsByPriority");
static_assert(sizeof(MarinerTask_DropItems_DropItemsByPriority) == 0x000020, "Wrong size on MarinerTask_DropItems_DropItemsByPriority");
static_assert(offsetof(MarinerTask_DropItems_DropItemsByPriority, OwningAbility) == 0x000000, "Member 'MarinerTask_DropItems_DropItemsByPriority::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_DropItems_DropItemsByPriority, TaskInstanceName) == 0x000008, "Member 'MarinerTask_DropItems_DropItemsByPriority::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_DropItems_DropItemsByPriority, bPriorityStatusToRemove) == 0x000010, "Member 'MarinerTask_DropItems_DropItemsByPriority::bPriorityStatusToRemove' has a wrong offset!");
static_assert(offsetof(MarinerTask_DropItems_DropItemsByPriority, ReturnValue) == 0x000018, "Member 'MarinerTask_DropItems_DropItemsByPriority::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_LaunchCharacter.LaunchCharacter
// 0x0020 (0x0020 - 0x0000)
struct MarinerTask_LaunchCharacter_LaunchCharacter final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchUpStrength;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchForwardStrength;                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerTask_LaunchCharacter*           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_LaunchCharacter_LaunchCharacter) == 0x000008, "Wrong alignment on MarinerTask_LaunchCharacter_LaunchCharacter");
static_assert(sizeof(MarinerTask_LaunchCharacter_LaunchCharacter) == 0x000020, "Wrong size on MarinerTask_LaunchCharacter_LaunchCharacter");
static_assert(offsetof(MarinerTask_LaunchCharacter_LaunchCharacter, OwningAbility) == 0x000000, "Member 'MarinerTask_LaunchCharacter_LaunchCharacter::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_LaunchCharacter_LaunchCharacter, TaskInstanceName) == 0x000008, "Member 'MarinerTask_LaunchCharacter_LaunchCharacter::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_LaunchCharacter_LaunchCharacter, LaunchUpStrength) == 0x000010, "Member 'MarinerTask_LaunchCharacter_LaunchCharacter::LaunchUpStrength' has a wrong offset!");
static_assert(offsetof(MarinerTask_LaunchCharacter_LaunchCharacter, LaunchForwardStrength) == 0x000014, "Member 'MarinerTask_LaunchCharacter_LaunchCharacter::LaunchForwardStrength' has a wrong offset!");
static_assert(offsetof(MarinerTask_LaunchCharacter_LaunchCharacter, ReturnValue) == 0x000018, "Member 'MarinerTask_LaunchCharacter_LaunchCharacter::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_LimitItemUsage.LimitItemUsage
// 0x0020 (0x0020 - 0x0000)
struct MarinerTask_LimitItemUsage_LimitItemUsage final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPreventItemUsage;                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerItemSlotsToLimit                      SlotsToPreventPickUpsIn;                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerItemSlotsToLimit                      SlotsToImmediatelyDropContentsFrom;                // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A37[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerTask_LimitItemUsage*            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_LimitItemUsage_LimitItemUsage) == 0x000008, "Wrong alignment on MarinerTask_LimitItemUsage_LimitItemUsage");
static_assert(sizeof(MarinerTask_LimitItemUsage_LimitItemUsage) == 0x000020, "Wrong size on MarinerTask_LimitItemUsage_LimitItemUsage");
static_assert(offsetof(MarinerTask_LimitItemUsage_LimitItemUsage, OwningAbility) == 0x000000, "Member 'MarinerTask_LimitItemUsage_LimitItemUsage::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_LimitItemUsage_LimitItemUsage, TaskInstanceName) == 0x000008, "Member 'MarinerTask_LimitItemUsage_LimitItemUsage::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_LimitItemUsage_LimitItemUsage, bShouldPreventItemUsage) == 0x000010, "Member 'MarinerTask_LimitItemUsage_LimitItemUsage::bShouldPreventItemUsage' has a wrong offset!");
static_assert(offsetof(MarinerTask_LimitItemUsage_LimitItemUsage, SlotsToPreventPickUpsIn) == 0x000011, "Member 'MarinerTask_LimitItemUsage_LimitItemUsage::SlotsToPreventPickUpsIn' has a wrong offset!");
static_assert(offsetof(MarinerTask_LimitItemUsage_LimitItemUsage, SlotsToImmediatelyDropContentsFrom) == 0x000012, "Member 'MarinerTask_LimitItemUsage_LimitItemUsage::SlotsToImmediatelyDropContentsFrom' has a wrong offset!");
static_assert(offsetof(MarinerTask_LimitItemUsage_LimitItemUsage, ReturnValue) == 0x000018, "Member 'MarinerTask_LimitItemUsage_LimitItemUsage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_LimitItemUsage.OnItemPickedUp
// 0x0010 (0x0010 - 0x0000)
struct MarinerTask_LimitItemUsage_OnItemPickedUp final
{
public:
	class AMarinerCharacter*                      CatchingCharacter;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerItemSlot                              ItemSlot;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A38[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerTask_LimitItemUsage_OnItemPickedUp) == 0x000008, "Wrong alignment on MarinerTask_LimitItemUsage_OnItemPickedUp");
static_assert(sizeof(MarinerTask_LimitItemUsage_OnItemPickedUp) == 0x000010, "Wrong size on MarinerTask_LimitItemUsage_OnItemPickedUp");
static_assert(offsetof(MarinerTask_LimitItemUsage_OnItemPickedUp, CatchingCharacter) == 0x000000, "Member 'MarinerTask_LimitItemUsage_OnItemPickedUp::CatchingCharacter' has a wrong offset!");
static_assert(offsetof(MarinerTask_LimitItemUsage_OnItemPickedUp, ItemSlot) == 0x000008, "Member 'MarinerTask_LimitItemUsage_OnItemPickedUp::ItemSlot' has a wrong offset!");

// Function Mariner.MarinerTask_ListenForDamageTaken.ListenForDamageTaken
// 0x0028 (0x0028 - 0x0000)
struct MarinerTask_ListenForDamageTaken_ListenForDamageTaken final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_DamageThreshold;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOutDuration;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResetAccumulationTimerDuration;                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bListenToIncomingDamageVsDamageTaken;              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A3A[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerTask_ListenForDamageTaken*      ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ListenForDamageTaken_ListenForDamageTaken) == 0x000008, "Wrong alignment on MarinerTask_ListenForDamageTaken_ListenForDamageTaken");
static_assert(sizeof(MarinerTask_ListenForDamageTaken_ListenForDamageTaken) == 0x000028, "Wrong size on MarinerTask_ListenForDamageTaken_ListenForDamageTaken");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_ListenForDamageTaken, OwningAbility) == 0x000000, "Member 'MarinerTask_ListenForDamageTaken_ListenForDamageTaken::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_ListenForDamageTaken, TaskInstanceName) == 0x000008, "Member 'MarinerTask_ListenForDamageTaken_ListenForDamageTaken::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_ListenForDamageTaken, Param_DamageThreshold) == 0x000010, "Member 'MarinerTask_ListenForDamageTaken_ListenForDamageTaken::Param_DamageThreshold' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_ListenForDamageTaken, TimeOutDuration) == 0x000014, "Member 'MarinerTask_ListenForDamageTaken_ListenForDamageTaken::TimeOutDuration' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_ListenForDamageTaken, ResetAccumulationTimerDuration) == 0x000018, "Member 'MarinerTask_ListenForDamageTaken_ListenForDamageTaken::ResetAccumulationTimerDuration' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_ListenForDamageTaken, bListenToIncomingDamageVsDamageTaken) == 0x00001C, "Member 'MarinerTask_ListenForDamageTaken_ListenForDamageTaken::bListenToIncomingDamageVsDamageTaken' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_ListenForDamageTaken, ReturnValue) == 0x000020, "Member 'MarinerTask_ListenForDamageTaken_ListenForDamageTaken::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_ListenForDamageTaken.ListenForDamageTakenRollingPeriod
// 0x0028 (0x0028 - 0x0000)
struct MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_DamageThreshold;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOutDuration;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollingTimePeriod;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A3B[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerTask_ListenForDamageTaken*      ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod) == 0x000008, "Wrong alignment on MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod");
static_assert(sizeof(MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod) == 0x000028, "Wrong size on MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod, OwningAbility) == 0x000000, "Member 'MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod, TaskInstanceName) == 0x000008, "Member 'MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod, Param_DamageThreshold) == 0x000010, "Member 'MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod::Param_DamageThreshold' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod, TimeOutDuration) == 0x000014, "Member 'MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod::TimeOutDuration' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod, RollingTimePeriod) == 0x000018, "Member 'MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod::RollingTimePeriod' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod, ReturnValue) == 0x000020, "Member 'MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_ListenForDamageTaken.GetAccumulatedRollingDamage
// 0x0004 (0x0004 - 0x0000)
struct MarinerTask_ListenForDamageTaken_GetAccumulatedRollingDamage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ListenForDamageTaken_GetAccumulatedRollingDamage) == 0x000004, "Wrong alignment on MarinerTask_ListenForDamageTaken_GetAccumulatedRollingDamage");
static_assert(sizeof(MarinerTask_ListenForDamageTaken_GetAccumulatedRollingDamage) == 0x000004, "Wrong size on MarinerTask_ListenForDamageTaken_GetAccumulatedRollingDamage");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_GetAccumulatedRollingDamage, ReturnValue) == 0x000000, "Member 'MarinerTask_ListenForDamageTaken_GetAccumulatedRollingDamage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_ListenForDamageTaken.OnAvatarTakeDamage
// 0x0028 (0x0028 - 0x0000)
struct MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A3C[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage) == 0x000008, "Wrong alignment on MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage");
static_assert(sizeof(MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage) == 0x000028, "Wrong size on MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage, DamagedActor) == 0x000000, "Member 'MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage, Damage) == 0x000008, "Member 'MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage, DamageType) == 0x000010, "Member 'MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage::DamageType' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage, InstigatedBy) == 0x000018, "Member 'MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage, DamageCauser) == 0x000020, "Member 'MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage::DamageCauser' has a wrong offset!");

// Function Mariner.MarinerTask_ListenForFastOverlaps.ListenForFastSphereOverlapsAtActorLocation
// 0x0050 (0x0050 - 0x0000)
struct MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bManagedOverlapsEnabled;                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulateOnNonOwningClients;                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A40[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_OverlapOriginActor;                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_OverlapRadius;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             Param_OverlapCollisionChannel;                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Param_FastCollisionCollection;                     // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A41[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Param_IgnoreActors;                                // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           Param_IgnoreActorTypes;                            // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMarinerTask_ListenForFastOverlaps*     ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation) == 0x000008, "Wrong alignment on MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation");
static_assert(sizeof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation) == 0x000050, "Wrong size on MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation, OwningAbility) == 0x000000, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation, TaskInstanceName) == 0x000008, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation, Param_bManagedOverlapsEnabled) == 0x000010, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation::Param_bManagedOverlapsEnabled' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation, bSimulateOnNonOwningClients) == 0x000011, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation::bSimulateOnNonOwningClients' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation, Param_OverlapOriginActor) == 0x000018, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation::Param_OverlapOriginActor' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation, Param_OverlapRadius) == 0x000020, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation::Param_OverlapRadius' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation, Param_OverlapCollisionChannel) == 0x000024, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation::Param_OverlapCollisionChannel' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation, Param_FastCollisionCollection) == 0x000025, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation::Param_FastCollisionCollection' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation, Param_IgnoreActors) == 0x000028, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation::Param_IgnoreActors' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation, Param_IgnoreActorTypes) == 0x000038, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation::Param_IgnoreActorTypes' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation, ReturnValue) == 0x000048, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_ListenForFastOverlaps.ListenForFastSphereOverlapsAtLocation
// 0x0050 (0x0050 - 0x0000)
struct MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bManagedOverlapsEnabled;                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulateOnNonOwningClients;                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A42[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Param_OverlapOrigin;                               // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_OverlapRadius;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             Param_OverlapCollisionChannel;                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Param_FastCollisionCollection;                     // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A43[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Param_IgnoreActors;                                // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           Param_IgnoreActorTypes;                            // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMarinerTask_ListenForFastOverlaps*     ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation) == 0x000008, "Wrong alignment on MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation");
static_assert(sizeof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation) == 0x000050, "Wrong size on MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation, OwningAbility) == 0x000000, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation, TaskInstanceName) == 0x000008, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation, Param_bManagedOverlapsEnabled) == 0x000010, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation::Param_bManagedOverlapsEnabled' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation, bSimulateOnNonOwningClients) == 0x000011, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation::bSimulateOnNonOwningClients' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation, Param_OverlapOrigin) == 0x000014, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation::Param_OverlapOrigin' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation, Param_OverlapRadius) == 0x000020, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation::Param_OverlapRadius' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation, Param_OverlapCollisionChannel) == 0x000024, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation::Param_OverlapCollisionChannel' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation, Param_FastCollisionCollection) == 0x000025, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation::Param_FastCollisionCollection' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation, Param_IgnoreActors) == 0x000028, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation::Param_IgnoreActors' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation, Param_IgnoreActorTypes) == 0x000038, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation::Param_IgnoreActorTypes' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation, ReturnValue) == 0x000048, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_ListenForFastOverlaps.ListenForFastSphereOverlapsAtMovingActorLocation
// 0x0050 (0x0050 - 0x0000)
struct MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bManagedOverlapsEnabled;                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulateOnNonOwningClients;                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A44[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovementComponent*                     Param_OverlapOriginMovementComponent;              // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_OverlapRadius;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             Param_OverlapCollisionChannel;                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Param_FastCollisionCollection;                     // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A45[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Param_IgnoreActors;                                // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           Param_IgnoreActorTypes;                            // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMarinerTask_ListenForFastOverlaps*     ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation) == 0x000008, "Wrong alignment on MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation");
static_assert(sizeof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation) == 0x000050, "Wrong size on MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation, OwningAbility) == 0x000000, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation, TaskInstanceName) == 0x000008, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation, Param_bManagedOverlapsEnabled) == 0x000010, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation::Param_bManagedOverlapsEnabled' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation, bSimulateOnNonOwningClients) == 0x000011, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation::bSimulateOnNonOwningClients' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation, Param_OverlapOriginMovementComponent) == 0x000018, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation::Param_OverlapOriginMovementComponent' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation, Param_OverlapRadius) == 0x000020, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation::Param_OverlapRadius' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation, Param_OverlapCollisionChannel) == 0x000024, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation::Param_OverlapCollisionChannel' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation, Param_FastCollisionCollection) == 0x000025, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation::Param_FastCollisionCollection' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation, Param_IgnoreActors) == 0x000028, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation::Param_IgnoreActors' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation, Param_IgnoreActorTypes) == 0x000038, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation::Param_IgnoreActorTypes' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation, ReturnValue) == 0x000048, "Member 'MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_ListenForGameplayEffectRemoved.ListenForGameplayEffectRemoved
// 0x0030 (0x0030 - 0x0000)
struct MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndOnAllGameplayEffectStacksRemoved;              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyGameplayEffectOnStartListening;              // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A47[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      TargetCharacter;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffectToListenFor;                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerTask_ListenForGameplayEffectRemoved* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved) == 0x000008, "Wrong alignment on MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved");
static_assert(sizeof(MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved) == 0x000030, "Wrong size on MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved");
static_assert(offsetof(MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved, OwningAbility) == 0x000000, "Member 'MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved, TaskInstanceName) == 0x000008, "Member 'MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved, bEndOnAllGameplayEffectStacksRemoved) == 0x000010, "Member 'MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved::bEndOnAllGameplayEffectStacksRemoved' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved, bApplyGameplayEffectOnStartListening) == 0x000011, "Member 'MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved::bApplyGameplayEffectOnStartListening' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved, TargetCharacter) == 0x000018, "Member 'MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved::TargetCharacter' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved, GameplayEffectToListenFor) == 0x000020, "Member 'MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved::GameplayEffectToListenFor' has a wrong offset!");
static_assert(offsetof(MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved, ReturnValue) == 0x000028, "Member 'MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_ListenForGameplayEffectRemoved.OnAnyGameplayEffectRemoved
// 0x0370 (0x0370 - 0x0000)
struct MarinerTask_ListenForGameplayEffectRemoved_OnAnyGameplayEffectRemoved final
{
public:
	struct FActiveGameplayEffect                  RemovedEffect;                                     // 0x0000(0x0370)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_ListenForGameplayEffectRemoved_OnAnyGameplayEffectRemoved) == 0x000008, "Wrong alignment on MarinerTask_ListenForGameplayEffectRemoved_OnAnyGameplayEffectRemoved");
static_assert(sizeof(MarinerTask_ListenForGameplayEffectRemoved_OnAnyGameplayEffectRemoved) == 0x000370, "Wrong size on MarinerTask_ListenForGameplayEffectRemoved_OnAnyGameplayEffectRemoved");
static_assert(offsetof(MarinerTask_ListenForGameplayEffectRemoved_OnAnyGameplayEffectRemoved, RemovedEffect) == 0x000000, "Member 'MarinerTask_ListenForGameplayEffectRemoved_OnAnyGameplayEffectRemoved::RemovedEffect' has a wrong offset!");

// Function Mariner.MarinerTask_PlayMontageAndWait.CreateInstance
// 0x0028 (0x0028 - 0x0000)
struct MarinerTask_PlayMontageAndWait_CreateInstance final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerCharacterMontage*               Param_MontageToPlay;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWaitTimeTillCompletion;                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4A[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerTask_PlayMontageAndWait*        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_PlayMontageAndWait_CreateInstance) == 0x000008, "Wrong alignment on MarinerTask_PlayMontageAndWait_CreateInstance");
static_assert(sizeof(MarinerTask_PlayMontageAndWait_CreateInstance) == 0x000028, "Wrong size on MarinerTask_PlayMontageAndWait_CreateInstance");
static_assert(offsetof(MarinerTask_PlayMontageAndWait_CreateInstance, OwningAbility) == 0x000000, "Member 'MarinerTask_PlayMontageAndWait_CreateInstance::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_PlayMontageAndWait_CreateInstance, TaskInstanceName) == 0x000008, "Member 'MarinerTask_PlayMontageAndWait_CreateInstance::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_PlayMontageAndWait_CreateInstance, Param_MontageToPlay) == 0x000010, "Member 'MarinerTask_PlayMontageAndWait_CreateInstance::Param_MontageToPlay' has a wrong offset!");
static_assert(offsetof(MarinerTask_PlayMontageAndWait_CreateInstance, MaxWaitTimeTillCompletion) == 0x000018, "Member 'MarinerTask_PlayMontageAndWait_CreateInstance::MaxWaitTimeTillCompletion' has a wrong offset!");
static_assert(offsetof(MarinerTask_PlayMontageAndWait_CreateInstance, ReturnValue) == 0x000020, "Member 'MarinerTask_PlayMontageAndWait_CreateInstance::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_PlayMontageAndWait.OnAnimNotifyCharacterEvent
// 0x0001 (0x0001 - 0x0000)
struct MarinerTask_PlayMontageAndWait_OnAnimNotifyCharacterEvent final
{
public:
	EAnimNotifyCharacterEventType                 EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_PlayMontageAndWait_OnAnimNotifyCharacterEvent) == 0x000001, "Wrong alignment on MarinerTask_PlayMontageAndWait_OnAnimNotifyCharacterEvent");
static_assert(sizeof(MarinerTask_PlayMontageAndWait_OnAnimNotifyCharacterEvent) == 0x000001, "Wrong size on MarinerTask_PlayMontageAndWait_OnAnimNotifyCharacterEvent");
static_assert(offsetof(MarinerTask_PlayMontageAndWait_OnAnimNotifyCharacterEvent, EventType) == 0x000000, "Member 'MarinerTask_PlayMontageAndWait_OnAnimNotifyCharacterEvent::EventType' has a wrong offset!");

// Function Mariner.MarinerTask_PlayMontageAndWait.OnMontageBlendingOutStarted
// 0x0010 (0x0010 - 0x0000)
struct MarinerTask_PlayMontageAndWait_OnMontageBlendingOutStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerTask_PlayMontageAndWait_OnMontageBlendingOutStarted) == 0x000008, "Wrong alignment on MarinerTask_PlayMontageAndWait_OnMontageBlendingOutStarted");
static_assert(sizeof(MarinerTask_PlayMontageAndWait_OnMontageBlendingOutStarted) == 0x000010, "Wrong size on MarinerTask_PlayMontageAndWait_OnMontageBlendingOutStarted");
static_assert(offsetof(MarinerTask_PlayMontageAndWait_OnMontageBlendingOutStarted, Montage) == 0x000000, "Member 'MarinerTask_PlayMontageAndWait_OnMontageBlendingOutStarted::Montage' has a wrong offset!");
static_assert(offsetof(MarinerTask_PlayMontageAndWait_OnMontageBlendingOutStarted, bInterrupted) == 0x000008, "Member 'MarinerTask_PlayMontageAndWait_OnMontageBlendingOutStarted::bInterrupted' has a wrong offset!");

// Function Mariner.MarinerTask_PlayMontageAndWait.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct MarinerTask_PlayMontageAndWait_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerTask_PlayMontageAndWait_OnMontageEnded) == 0x000008, "Wrong alignment on MarinerTask_PlayMontageAndWait_OnMontageEnded");
static_assert(sizeof(MarinerTask_PlayMontageAndWait_OnMontageEnded) == 0x000010, "Wrong size on MarinerTask_PlayMontageAndWait_OnMontageEnded");
static_assert(offsetof(MarinerTask_PlayMontageAndWait_OnMontageEnded, Montage) == 0x000000, "Member 'MarinerTask_PlayMontageAndWait_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(MarinerTask_PlayMontageAndWait_OnMontageEnded, bInterrupted) == 0x000008, "Member 'MarinerTask_PlayMontageAndWait_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function Mariner.MarinerTask_PlayMontageAndWait.OnMontageStarted
// 0x0008 (0x0008 - 0x0000)
struct MarinerTask_PlayMontageAndWait_OnMontageStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_PlayMontageAndWait_OnMontageStarted) == 0x000008, "Wrong alignment on MarinerTask_PlayMontageAndWait_OnMontageStarted");
static_assert(sizeof(MarinerTask_PlayMontageAndWait_OnMontageStarted) == 0x000008, "Wrong size on MarinerTask_PlayMontageAndWait_OnMontageStarted");
static_assert(offsetof(MarinerTask_PlayMontageAndWait_OnMontageStarted, Montage) == 0x000000, "Member 'MarinerTask_PlayMontageAndWait_OnMontageStarted::Montage' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnActor.SpawnActor
// 0x0040 (0x0040 - 0x0000)
struct MarinerTask_SpawnActor_SpawnActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     Param_ActorType;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DesiredLocation;                                   // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DesiredRotation;                                   // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsPositioningRelativeToCaster;                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4E[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerTask_SpawnActor*                ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnActor_SpawnActor) == 0x000008, "Wrong alignment on MarinerTask_SpawnActor_SpawnActor");
static_assert(sizeof(MarinerTask_SpawnActor_SpawnActor) == 0x000040, "Wrong size on MarinerTask_SpawnActor_SpawnActor");
static_assert(offsetof(MarinerTask_SpawnActor_SpawnActor, OwningAbility) == 0x000000, "Member 'MarinerTask_SpawnActor_SpawnActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnActor_SpawnActor, TaskInstanceName) == 0x000008, "Member 'MarinerTask_SpawnActor_SpawnActor::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnActor_SpawnActor, Param_ActorType) == 0x000010, "Member 'MarinerTask_SpawnActor_SpawnActor::Param_ActorType' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnActor_SpawnActor, DesiredLocation) == 0x000018, "Member 'MarinerTask_SpawnActor_SpawnActor::DesiredLocation' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnActor_SpawnActor, DesiredRotation) == 0x000024, "Member 'MarinerTask_SpawnActor_SpawnActor::DesiredRotation' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnActor_SpawnActor, bIsPositioningRelativeToCaster) == 0x000030, "Member 'MarinerTask_SpawnActor_SpawnActor::bIsPositioningRelativeToCaster' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnActor_SpawnActor, ReturnValue) == 0x000038, "Member 'MarinerTask_SpawnActor_SpawnActor::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnAimingReticle.CreateInstanceUsingCapsuleFromActorAsMask
// 0x0070 (0x0070 - 0x0000)
struct MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     Param_ReticleActorType;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumReticleRenderDistance;                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumReticleDistance;                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleTracerRadiusModifier;                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleTracerHalfHeightModifier;                   // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             CapsuleTracerClassesToIgnoreHits;                  // 0x0028(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bSpinOnTouchAnything;                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A52[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReticleSpinDegreesPerSecond;                       // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDamageSphere;                                  // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A53[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereDamageableTracerRadius;                      // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DamageSphereTracerCollisionChannel;                // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A54[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AActor>>             DamageableSphereActorTypeWhitelist;                // 0x0050(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bAlwaysPlaceReticleAtMaxRange;                     // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A55[0x6];                                     // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerTask_SpawnAimingReticle*        ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask) == 0x000008, "Wrong alignment on MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask");
static_assert(sizeof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask) == 0x000070, "Wrong size on MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, OwningAbility) == 0x000000, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, TaskInstanceName) == 0x000008, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, Param_ReticleActorType) == 0x000010, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::Param_ReticleActorType' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, MinimumReticleRenderDistance) == 0x000018, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::MinimumReticleRenderDistance' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, MaximumReticleDistance) == 0x00001C, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::MaximumReticleDistance' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, CapsuleTracerRadiusModifier) == 0x000020, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::CapsuleTracerRadiusModifier' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, CapsuleTracerHalfHeightModifier) == 0x000024, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::CapsuleTracerHalfHeightModifier' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, CapsuleTracerClassesToIgnoreHits) == 0x000028, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::CapsuleTracerClassesToIgnoreHits' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, bSpinOnTouchAnything) == 0x000038, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::bSpinOnTouchAnything' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, ReticleSpinDegreesPerSecond) == 0x00003C, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::ReticleSpinDegreesPerSecond' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, bUseDamageSphere) == 0x000040, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::bUseDamageSphere' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, SphereDamageableTracerRadius) == 0x000044, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::SphereDamageableTracerRadius' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, DamageSphereTracerCollisionChannel) == 0x000048, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::DamageSphereTracerCollisionChannel' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, DamageableSphereActorTypeWhitelist) == 0x000050, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::DamageableSphereActorTypeWhitelist' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, bAlwaysPlaceReticleAtMaxRange) == 0x000060, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::bAlwaysPlaceReticleAtMaxRange' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, bDrawDebug) == 0x000061, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::bDrawDebug' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask, ReturnValue) == 0x000068, "Member 'MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnAimingReticle.FreezeReticle
// 0x0004 (0x0004 - 0x0000)
struct MarinerTask_SpawnAimingReticle_FreezeReticle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnAimingReticle_FreezeReticle) == 0x000004, "Wrong alignment on MarinerTask_SpawnAimingReticle_FreezeReticle");
static_assert(sizeof(MarinerTask_SpawnAimingReticle_FreezeReticle) == 0x000004, "Wrong size on MarinerTask_SpawnAimingReticle_FreezeReticle");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_FreezeReticle, ReturnValue) == 0x000000, "Member 'MarinerTask_SpawnAimingReticle_FreezeReticle::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnAimingReticle.UpdateReticleRange
// 0x0004 (0x0004 - 0x0000)
struct MarinerTask_SpawnAimingReticle_UpdateReticleRange final
{
public:
	float                                         NewRange;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnAimingReticle_UpdateReticleRange) == 0x000004, "Wrong alignment on MarinerTask_SpawnAimingReticle_UpdateReticleRange");
static_assert(sizeof(MarinerTask_SpawnAimingReticle_UpdateReticleRange) == 0x000004, "Wrong size on MarinerTask_SpawnAimingReticle_UpdateReticleRange");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_UpdateReticleRange, NewRange) == 0x000000, "Member 'MarinerTask_SpawnAimingReticle_UpdateReticleRange::NewRange' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnAimingReticle.GetDamagableTouched
// 0x0008 (0x0008 - 0x0000)
struct MarinerTask_SpawnAimingReticle_GetDamagableTouched final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnAimingReticle_GetDamagableTouched) == 0x000008, "Wrong alignment on MarinerTask_SpawnAimingReticle_GetDamagableTouched");
static_assert(sizeof(MarinerTask_SpawnAimingReticle_GetDamagableTouched) == 0x000008, "Wrong size on MarinerTask_SpawnAimingReticle_GetDamagableTouched");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_GetDamagableTouched, ReturnValue) == 0x000000, "Member 'MarinerTask_SpawnAimingReticle_GetDamagableTouched::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnAimingReticle.GetFurthestNonDamageableImpactPoint
// 0x000C (0x000C - 0x0000)
struct MarinerTask_SpawnAimingReticle_GetFurthestNonDamageableImpactPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnAimingReticle_GetFurthestNonDamageableImpactPoint) == 0x000004, "Wrong alignment on MarinerTask_SpawnAimingReticle_GetFurthestNonDamageableImpactPoint");
static_assert(sizeof(MarinerTask_SpawnAimingReticle_GetFurthestNonDamageableImpactPoint) == 0x00000C, "Wrong size on MarinerTask_SpawnAimingReticle_GetFurthestNonDamageableImpactPoint");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_GetFurthestNonDamageableImpactPoint, ReturnValue) == 0x000000, "Member 'MarinerTask_SpawnAimingReticle_GetFurthestNonDamageableImpactPoint::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnAimingReticle.GetLastCharacterReticleOverlapped
// 0x0008 (0x0008 - 0x0000)
struct MarinerTask_SpawnAimingReticle_GetLastCharacterReticleOverlapped final
{
public:
	class AMarinerCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnAimingReticle_GetLastCharacterReticleOverlapped) == 0x000008, "Wrong alignment on MarinerTask_SpawnAimingReticle_GetLastCharacterReticleOverlapped");
static_assert(sizeof(MarinerTask_SpawnAimingReticle_GetLastCharacterReticleOverlapped) == 0x000008, "Wrong size on MarinerTask_SpawnAimingReticle_GetLastCharacterReticleOverlapped");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_GetLastCharacterReticleOverlapped, ReturnValue) == 0x000000, "Member 'MarinerTask_SpawnAimingReticle_GetLastCharacterReticleOverlapped::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnAimingReticle.GetReticleActor
// 0x0008 (0x0008 - 0x0000)
struct MarinerTask_SpawnAimingReticle_GetReticleActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnAimingReticle_GetReticleActor) == 0x000008, "Wrong alignment on MarinerTask_SpawnAimingReticle_GetReticleActor");
static_assert(sizeof(MarinerTask_SpawnAimingReticle_GetReticleActor) == 0x000008, "Wrong size on MarinerTask_SpawnAimingReticle_GetReticleActor");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_GetReticleActor, ReturnValue) == 0x000000, "Member 'MarinerTask_SpawnAimingReticle_GetReticleActor::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnAimingReticle.IsReticleTouchingAnything
// 0x0001 (0x0001 - 0x0000)
struct MarinerTask_SpawnAimingReticle_IsReticleTouchingAnything final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnAimingReticle_IsReticleTouchingAnything) == 0x000001, "Wrong alignment on MarinerTask_SpawnAimingReticle_IsReticleTouchingAnything");
static_assert(sizeof(MarinerTask_SpawnAimingReticle_IsReticleTouchingAnything) == 0x000001, "Wrong size on MarinerTask_SpawnAimingReticle_IsReticleTouchingAnything");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_IsReticleTouchingAnything, ReturnValue) == 0x000000, "Member 'MarinerTask_SpawnAimingReticle_IsReticleTouchingAnything::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnAimingReticle.IsReticleTouchingDamagable
// 0x0001 (0x0001 - 0x0000)
struct MarinerTask_SpawnAimingReticle_IsReticleTouchingDamagable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnAimingReticle_IsReticleTouchingDamagable) == 0x000001, "Wrong alignment on MarinerTask_SpawnAimingReticle_IsReticleTouchingDamagable");
static_assert(sizeof(MarinerTask_SpawnAimingReticle_IsReticleTouchingDamagable) == 0x000001, "Wrong size on MarinerTask_SpawnAimingReticle_IsReticleTouchingDamagable");
static_assert(offsetof(MarinerTask_SpawnAimingReticle_IsReticleTouchingDamagable, ReturnValue) == 0x000000, "Member 'MarinerTask_SpawnAimingReticle_IsReticleTouchingDamagable::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnMultiProjectile.SpawnMultiProjectile
// 0x0068 (0x0068 - 0x0000)
struct MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarinerProjectile>         DefaultProjectileType;                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UMarinerProjectileSpread>> Param_ProjectileSpreads;                           // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       AimDataHandle;                                     // 0x0028(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMarinerSpawnSocketSource                     SocketSource;                                      // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A59[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketToSpawnAt;                                   // 0x0054(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_SpawnPathBatchingTimeTolerance;              // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerTask_SpawnMultiProjectile*      ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile) == 0x000008, "Wrong alignment on MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile");
static_assert(sizeof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile) == 0x000068, "Wrong size on MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile, OwningAbility) == 0x000000, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile, TaskInstanceName) == 0x000008, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile, DefaultProjectileType) == 0x000010, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile::DefaultProjectileType' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile, Param_ProjectileSpreads) == 0x000018, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile::Param_ProjectileSpreads' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile, AimDataHandle) == 0x000028, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile::AimDataHandle' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile, SocketSource) == 0x000050, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile::SocketSource' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile, SocketToSpawnAt) == 0x000054, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile::SocketToSpawnAt' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile, Param_SpawnPathBatchingTimeTolerance) == 0x00005C, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile::Param_SpawnPathBatchingTimeTolerance' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile, ReturnValue) == 0x000060, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnMultiProjectile.SpawnMultiProjectileWithPool
// 0x0070 (0x0070 - 0x0000)
struct MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarinerProjectile>         DefaultProjectileType;                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UMarinerProjectileSpread>> Param_ProjectileSpreads;                           // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       AimDataHandle;                                     // 0x0028(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMarinerSpawnSocketSource                     SocketSource;                                      // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A5A[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketToSpawnAt;                                   // 0x0054(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_SpawnPathBatchingTimeTolerance;              // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionalMaximumProjectilesToSpawn;                 // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A5B[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerTask_SpawnMultiProjectile*      ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool) == 0x000008, "Wrong alignment on MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool");
static_assert(sizeof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool) == 0x000070, "Wrong size on MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool, OwningAbility) == 0x000000, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool, TaskInstanceName) == 0x000008, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool, DefaultProjectileType) == 0x000010, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool::DefaultProjectileType' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool, Param_ProjectileSpreads) == 0x000018, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool::Param_ProjectileSpreads' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool, AimDataHandle) == 0x000028, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool::AimDataHandle' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool, SocketSource) == 0x000050, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool::SocketSource' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool, SocketToSpawnAt) == 0x000054, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool::SocketToSpawnAt' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool, Param_SpawnPathBatchingTimeTolerance) == 0x00005C, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool::Param_SpawnPathBatchingTimeTolerance' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool, OptionalMaximumProjectilesToSpawn) == 0x000060, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool::OptionalMaximumProjectilesToSpawn' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool, ReturnValue) == 0x000068, "Member 'MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnProjectile.SpawnProjectile
// 0x0060 (0x0060 - 0x0000)
struct MarinerTask_SpawnProjectile_SpawnProjectile final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarinerProjectile>         DefaultProjectileType;                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       AimDataHandle;                                     // 0x0018(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMarinerSpawnSocketSource                     SocketSource;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A5D[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketToSpawnAt;                                   // 0x0044(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocationOffset;                               // 0x004C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerTask_SpawnProjectile*           ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnProjectile_SpawnProjectile) == 0x000008, "Wrong alignment on MarinerTask_SpawnProjectile_SpawnProjectile");
static_assert(sizeof(MarinerTask_SpawnProjectile_SpawnProjectile) == 0x000060, "Wrong size on MarinerTask_SpawnProjectile_SpawnProjectile");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectile, OwningAbility) == 0x000000, "Member 'MarinerTask_SpawnProjectile_SpawnProjectile::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectile, TaskInstanceName) == 0x000008, "Member 'MarinerTask_SpawnProjectile_SpawnProjectile::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectile, DefaultProjectileType) == 0x000010, "Member 'MarinerTask_SpawnProjectile_SpawnProjectile::DefaultProjectileType' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectile, AimDataHandle) == 0x000018, "Member 'MarinerTask_SpawnProjectile_SpawnProjectile::AimDataHandle' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectile, SocketSource) == 0x000040, "Member 'MarinerTask_SpawnProjectile_SpawnProjectile::SocketSource' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectile, SocketToSpawnAt) == 0x000044, "Member 'MarinerTask_SpawnProjectile_SpawnProjectile::SocketToSpawnAt' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectile, SpawnLocationOffset) == 0x00004C, "Member 'MarinerTask_SpawnProjectile_SpawnProjectile::SpawnLocationOffset' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectile, ReturnValue) == 0x000058, "Member 'MarinerTask_SpawnProjectile_SpawnProjectile::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnProjectile.SpawnProjectileWithPool
// 0x0060 (0x0060 - 0x0000)
struct MarinerTask_SpawnProjectile_SpawnProjectileWithPool final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarinerProjectile>         DefaultProjectileType;                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       AimDataHandle;                                     // 0x0018(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMarinerSpawnSocketSource                     SocketSource;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A5E[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketToSpawnAt;                                   // 0x0044(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocationOffset;                               // 0x004C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerTask_SpawnProjectile*           ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnProjectile_SpawnProjectileWithPool) == 0x000008, "Wrong alignment on MarinerTask_SpawnProjectile_SpawnProjectileWithPool");
static_assert(sizeof(MarinerTask_SpawnProjectile_SpawnProjectileWithPool) == 0x000060, "Wrong size on MarinerTask_SpawnProjectile_SpawnProjectileWithPool");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectileWithPool, OwningAbility) == 0x000000, "Member 'MarinerTask_SpawnProjectile_SpawnProjectileWithPool::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectileWithPool, TaskInstanceName) == 0x000008, "Member 'MarinerTask_SpawnProjectile_SpawnProjectileWithPool::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectileWithPool, DefaultProjectileType) == 0x000010, "Member 'MarinerTask_SpawnProjectile_SpawnProjectileWithPool::DefaultProjectileType' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectileWithPool, AimDataHandle) == 0x000018, "Member 'MarinerTask_SpawnProjectile_SpawnProjectileWithPool::AimDataHandle' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectileWithPool, SocketSource) == 0x000040, "Member 'MarinerTask_SpawnProjectile_SpawnProjectileWithPool::SocketSource' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectileWithPool, SocketToSpawnAt) == 0x000044, "Member 'MarinerTask_SpawnProjectile_SpawnProjectileWithPool::SocketToSpawnAt' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectileWithPool, SpawnLocationOffset) == 0x00004C, "Member 'MarinerTask_SpawnProjectile_SpawnProjectileWithPool::SpawnLocationOffset' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectile_SpawnProjectileWithPool, ReturnValue) == 0x000058, "Member 'MarinerTask_SpawnProjectile_SpawnProjectileWithPool::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_SpawnProjectileAtSafeLocation.SpawnGroundedProjectile
// 0x0078 (0x0078 - 0x0000)
struct MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarinerProjectile>         DefaultProjectileType;                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerSpawnSocketSource                     SocketSource;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A62[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SweepFromOrigin;                                   // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SweepDirection;                                    // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpawnDistance;                                  // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SweepCapsuleHalfHeightScale;                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SweepCapsuleRadiusScale;                           // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Param_CapsuleSource;                               // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A63[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Param_IgnoredActors;                               // 0x0050(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                HitLocationSpawnOffset;                            // 0x0060(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A64[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerTask_SpawnProjectileAtSafeLocation* ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile) == 0x000008, "Wrong alignment on MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile");
static_assert(sizeof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile) == 0x000078, "Wrong size on MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile");
static_assert(offsetof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile, OwningAbility) == 0x000000, "Member 'MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile, TaskInstanceName) == 0x000008, "Member 'MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile, DefaultProjectileType) == 0x000010, "Member 'MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile::DefaultProjectileType' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile, SocketSource) == 0x000018, "Member 'MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile::SocketSource' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile, SweepFromOrigin) == 0x00001C, "Member 'MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile::SweepFromOrigin' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile, SweepDirection) == 0x000028, "Member 'MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile::SweepDirection' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile, MaxSpawnDistance) == 0x000034, "Member 'MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile::MaxSpawnDistance' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile, SweepCapsuleHalfHeightScale) == 0x000038, "Member 'MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile::SweepCapsuleHalfHeightScale' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile, SweepCapsuleRadiusScale) == 0x00003C, "Member 'MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile::SweepCapsuleRadiusScale' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile, Param_CapsuleSource) == 0x000040, "Member 'MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile::Param_CapsuleSource' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile, TraceChannel) == 0x000048, "Member 'MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile::TraceChannel' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile, Param_IgnoredActors) == 0x000050, "Member 'MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile::Param_IgnoredActors' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile, HitLocationSpawnOffset) == 0x000060, "Member 'MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile::HitLocationSpawnOffset' has a wrong offset!");
static_assert(offsetof(MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile, ReturnValue) == 0x000070, "Member 'MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_TeleportToActor.SwapActors
// 0x00A8 (0x00A8 - 0x0000)
struct MarinerTask_TeleportToActor_SwapActors final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityActorInfo              ActorToTeleportInfo;                               // 0x0010(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 TeleportationTarget;                               // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaceSecondActorNearestDownLocation;              // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyTargetOnFailedSwap;                        // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A66[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TeleportDestinationOffset;                         // 0x005C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SecondDestinationOffset;                           // 0x0068(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSwapProbeDepth;                                 // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartSwapProbeHeightAboveActorLoc;                 // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVelocityAfterTeleport;                          // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeightScale;                            // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadiusScale;                                // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A67[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        BackupLocations;                                   // 0x0090(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMarinerTask_TeleportToActor*           ReturnValue;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_TeleportToActor_SwapActors) == 0x000008, "Wrong alignment on MarinerTask_TeleportToActor_SwapActors");
static_assert(sizeof(MarinerTask_TeleportToActor_SwapActors) == 0x0000A8, "Wrong size on MarinerTask_TeleportToActor_SwapActors");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, OwningAbility) == 0x000000, "Member 'MarinerTask_TeleportToActor_SwapActors::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, TaskInstanceName) == 0x000008, "Member 'MarinerTask_TeleportToActor_SwapActors::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, ActorToTeleportInfo) == 0x000010, "Member 'MarinerTask_TeleportToActor_SwapActors::ActorToTeleportInfo' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, TeleportationTarget) == 0x000050, "Member 'MarinerTask_TeleportToActor_SwapActors::TeleportationTarget' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, bPlaceSecondActorNearestDownLocation) == 0x000058, "Member 'MarinerTask_TeleportToActor_SwapActors::bPlaceSecondActorNearestDownLocation' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, bDestroyTargetOnFailedSwap) == 0x000059, "Member 'MarinerTask_TeleportToActor_SwapActors::bDestroyTargetOnFailedSwap' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, TeleportDestinationOffset) == 0x00005C, "Member 'MarinerTask_TeleportToActor_SwapActors::TeleportDestinationOffset' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, SecondDestinationOffset) == 0x000068, "Member 'MarinerTask_TeleportToActor_SwapActors::SecondDestinationOffset' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, MaxSwapProbeDepth) == 0x000074, "Member 'MarinerTask_TeleportToActor_SwapActors::MaxSwapProbeDepth' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, StartSwapProbeHeightAboveActorLoc) == 0x000078, "Member 'MarinerTask_TeleportToActor_SwapActors::StartSwapProbeHeightAboveActorLoc' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, MaxVelocityAfterTeleport) == 0x00007C, "Member 'MarinerTask_TeleportToActor_SwapActors::MaxVelocityAfterTeleport' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, CapsuleHalfHeightScale) == 0x000080, "Member 'MarinerTask_TeleportToActor_SwapActors::CapsuleHalfHeightScale' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, CapsuleRadiusScale) == 0x000084, "Member 'MarinerTask_TeleportToActor_SwapActors::CapsuleRadiusScale' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, TraceChannel) == 0x000088, "Member 'MarinerTask_TeleportToActor_SwapActors::TraceChannel' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, BackupLocations) == 0x000090, "Member 'MarinerTask_TeleportToActor_SwapActors::BackupLocations' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_SwapActors, ReturnValue) == 0x0000A0, "Member 'MarinerTask_TeleportToActor_SwapActors::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_TeleportToActor.TeleportToActor
// 0x0088 (0x0088 - 0x0000)
struct MarinerTask_TeleportToActor_TeleportToActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityActorInfo              ActorToTeleportInfo;                               // 0x0010(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 TeleportationTarget;                               // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerTeleportBehavior                      TeleportBehavior;                                  // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A68[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TeleportDestinationOffset;                         // 0x005C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVelocityAfterTeleport;                          // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A69[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        BackupLocations;                                   // 0x0070(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMarinerTask_TeleportToActor*           ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_TeleportToActor_TeleportToActor) == 0x000008, "Wrong alignment on MarinerTask_TeleportToActor_TeleportToActor");
static_assert(sizeof(MarinerTask_TeleportToActor_TeleportToActor) == 0x000088, "Wrong size on MarinerTask_TeleportToActor_TeleportToActor");
static_assert(offsetof(MarinerTask_TeleportToActor_TeleportToActor, OwningAbility) == 0x000000, "Member 'MarinerTask_TeleportToActor_TeleportToActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_TeleportToActor, TaskInstanceName) == 0x000008, "Member 'MarinerTask_TeleportToActor_TeleportToActor::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_TeleportToActor, ActorToTeleportInfo) == 0x000010, "Member 'MarinerTask_TeleportToActor_TeleportToActor::ActorToTeleportInfo' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_TeleportToActor, TeleportationTarget) == 0x000050, "Member 'MarinerTask_TeleportToActor_TeleportToActor::TeleportationTarget' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_TeleportToActor, TeleportBehavior) == 0x000058, "Member 'MarinerTask_TeleportToActor_TeleportToActor::TeleportBehavior' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_TeleportToActor, TeleportDestinationOffset) == 0x00005C, "Member 'MarinerTask_TeleportToActor_TeleportToActor::TeleportDestinationOffset' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_TeleportToActor, MaxVelocityAfterTeleport) == 0x000068, "Member 'MarinerTask_TeleportToActor_TeleportToActor::MaxVelocityAfterTeleport' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_TeleportToActor, BackupLocations) == 0x000070, "Member 'MarinerTask_TeleportToActor_TeleportToActor::BackupLocations' has a wrong offset!");
static_assert(offsetof(MarinerTask_TeleportToActor_TeleportToActor, ReturnValue) == 0x000080, "Member 'MarinerTask_TeleportToActor_TeleportToActor::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_WaitForAimData.WaitForAimData
// 0x0018 (0x0018 - 0x0000)
struct MarinerTask_WaitForAimData_WaitForAimData final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerTask_WaitForAimData*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_WaitForAimData_WaitForAimData) == 0x000008, "Wrong alignment on MarinerTask_WaitForAimData_WaitForAimData");
static_assert(sizeof(MarinerTask_WaitForAimData_WaitForAimData) == 0x000018, "Wrong size on MarinerTask_WaitForAimData_WaitForAimData");
static_assert(offsetof(MarinerTask_WaitForAimData_WaitForAimData, OwningAbility) == 0x000000, "Member 'MarinerTask_WaitForAimData_WaitForAimData::OwningAbility' has a wrong offset!");
static_assert(offsetof(MarinerTask_WaitForAimData_WaitForAimData, TaskInstanceName) == 0x000008, "Member 'MarinerTask_WaitForAimData_WaitForAimData::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(MarinerTask_WaitForAimData_WaitForAimData, ReturnValue) == 0x000010, "Member 'MarinerTask_WaitForAimData_WaitForAimData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTask_WaitForAimData.OnAimDataReceived
// 0x0030 (0x0030 - 0x0000)
struct MarinerTask_WaitForAimData_OnAimDataReceived final
{
public:
	struct FGameplayAbilityTargetDataHandle       AimDataHandle;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActivationTag;                                     // 0x0028(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTask_WaitForAimData_OnAimDataReceived) == 0x000008, "Wrong alignment on MarinerTask_WaitForAimData_OnAimDataReceived");
static_assert(sizeof(MarinerTask_WaitForAimData_OnAimDataReceived) == 0x000030, "Wrong size on MarinerTask_WaitForAimData_OnAimDataReceived");
static_assert(offsetof(MarinerTask_WaitForAimData_OnAimDataReceived, AimDataHandle) == 0x000000, "Member 'MarinerTask_WaitForAimData_OnAimDataReceived::AimDataHandle' has a wrong offset!");
static_assert(offsetof(MarinerTask_WaitForAimData_OnAimDataReceived, ActivationTag) == 0x000028, "Member 'MarinerTask_WaitForAimData_OnAimDataReceived::ActivationTag' has a wrong offset!");

// Function Mariner.MarinerTeamAffiliatedObjectInterface.SetTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerTeamAffiliatedObjectInterface_SetTeamIndex final
{
public:
	int32                                         InTeamIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTeamAffiliatedObjectInterface_SetTeamIndex) == 0x000004, "Wrong alignment on MarinerTeamAffiliatedObjectInterface_SetTeamIndex");
static_assert(sizeof(MarinerTeamAffiliatedObjectInterface_SetTeamIndex) == 0x000004, "Wrong size on MarinerTeamAffiliatedObjectInterface_SetTeamIndex");
static_assert(offsetof(MarinerTeamAffiliatedObjectInterface_SetTeamIndex, InTeamIndex) == 0x000000, "Member 'MarinerTeamAffiliatedObjectInterface_SetTeamIndex::InTeamIndex' has a wrong offset!");

// Function Mariner.MarinerTeamAffiliatedObjectInterface.GetTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerTeamAffiliatedObjectInterface_GetTeamIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTeamAffiliatedObjectInterface_GetTeamIndex) == 0x000004, "Wrong alignment on MarinerTeamAffiliatedObjectInterface_GetTeamIndex");
static_assert(sizeof(MarinerTeamAffiliatedObjectInterface_GetTeamIndex) == 0x000004, "Wrong size on MarinerTeamAffiliatedObjectInterface_GetTeamIndex");
static_assert(offsetof(MarinerTeamAffiliatedObjectInterface_GetTeamIndex, ReturnValue) == 0x000000, "Member 'MarinerTeamAffiliatedObjectInterface_GetTeamIndex::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTimerWidget.StartCountdownTimer
// 0x0004 (0x0004 - 0x0000)
struct MarinerTimerWidget_StartCountdownTimer final
{
public:
	float                                         TimeRemainingSeconds;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTimerWidget_StartCountdownTimer) == 0x000004, "Wrong alignment on MarinerTimerWidget_StartCountdownTimer");
static_assert(sizeof(MarinerTimerWidget_StartCountdownTimer) == 0x000004, "Wrong size on MarinerTimerWidget_StartCountdownTimer");
static_assert(offsetof(MarinerTimerWidget_StartCountdownTimer, TimeRemainingSeconds) == 0x000000, "Member 'MarinerTimerWidget_StartCountdownTimer::TimeRemainingSeconds' has a wrong offset!");

// Function Mariner.MarinerTotemFlagTextures.ConfigureMaterialUsingTextures
// 0x0008 (0x0008 - 0x0000)
struct MarinerTotemFlagTextures_ConfigureMaterialUsingTextures final
{
public:
	class UMaterialInstanceDynamic*               MaterialToConfigure;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTotemFlagTextures_ConfigureMaterialUsingTextures) == 0x000008, "Wrong alignment on MarinerTotemFlagTextures_ConfigureMaterialUsingTextures");
static_assert(sizeof(MarinerTotemFlagTextures_ConfigureMaterialUsingTextures) == 0x000008, "Wrong size on MarinerTotemFlagTextures_ConfigureMaterialUsingTextures");
static_assert(offsetof(MarinerTotemFlagTextures_ConfigureMaterialUsingTextures, MaterialToConfigure) == 0x000000, "Member 'MarinerTotemFlagTextures_ConfigureMaterialUsingTextures::MaterialToConfigure' has a wrong offset!");

// Function Mariner.MarinerTotemFlagTextures.GetBakedMaterial
// 0x0008 (0x0008 - 0x0000)
struct MarinerTotemFlagTextures_GetBakedMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTotemFlagTextures_GetBakedMaterial) == 0x000008, "Wrong alignment on MarinerTotemFlagTextures_GetBakedMaterial");
static_assert(sizeof(MarinerTotemFlagTextures_GetBakedMaterial) == 0x000008, "Wrong size on MarinerTotemFlagTextures_GetBakedMaterial");
static_assert(offsetof(MarinerTotemFlagTextures_GetBakedMaterial, ReturnValue) == 0x000000, "Member 'MarinerTotemFlagTextures_GetBakedMaterial::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTotemFlagTextures.GetBakedUIMaterial
// 0x0008 (0x0008 - 0x0000)
struct MarinerTotemFlagTextures_GetBakedUIMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTotemFlagTextures_GetBakedUIMaterial) == 0x000008, "Wrong alignment on MarinerTotemFlagTextures_GetBakedUIMaterial");
static_assert(sizeof(MarinerTotemFlagTextures_GetBakedUIMaterial) == 0x000008, "Wrong size on MarinerTotemFlagTextures_GetBakedUIMaterial");
static_assert(offsetof(MarinerTotemFlagTextures_GetBakedUIMaterial, ReturnValue) == 0x000000, "Member 'MarinerTotemFlagTextures_GetBakedUIMaterial::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTotemRenderUtilities.GenerateTotemFlagPreviewFromCollection
// 0x0048 (0x0048 - 0x0000)
struct MarinerTotemRenderUtilities_GenerateTotemFlagPreviewFromCollection final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerRocketTotemCollection          TotemCollection;                                   // 0x0008(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTotemRenderUtilities_GenerateTotemFlagPreviewFromCollection) == 0x000008, "Wrong alignment on MarinerTotemRenderUtilities_GenerateTotemFlagPreviewFromCollection");
static_assert(sizeof(MarinerTotemRenderUtilities_GenerateTotemFlagPreviewFromCollection) == 0x000048, "Wrong size on MarinerTotemRenderUtilities_GenerateTotemFlagPreviewFromCollection");
static_assert(offsetof(MarinerTotemRenderUtilities_GenerateTotemFlagPreviewFromCollection, WorldContextObject) == 0x000000, "Member 'MarinerTotemRenderUtilities_GenerateTotemFlagPreviewFromCollection::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerTotemRenderUtilities_GenerateTotemFlagPreviewFromCollection, TotemCollection) == 0x000008, "Member 'MarinerTotemRenderUtilities_GenerateTotemFlagPreviewFromCollection::TotemCollection' has a wrong offset!");
static_assert(offsetof(MarinerTotemRenderUtilities_GenerateTotemFlagPreviewFromCollection, ReturnValue) == 0x000040, "Member 'MarinerTotemRenderUtilities_GenerateTotemFlagPreviewFromCollection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTotemRenderUtilities.RenderTotemFlagFromCollection
// 0x0050 (0x0050 - 0x0000)
struct MarinerTotemRenderUtilities_RenderTotemFlagFromCollection final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerRocketTotemCollection          TotemCollection;                                   // 0x0008(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UMarinerTotemFlagTextures*              ExistingTextures;                                  // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerTotemFlagTextures*              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTotemRenderUtilities_RenderTotemFlagFromCollection) == 0x000008, "Wrong alignment on MarinerTotemRenderUtilities_RenderTotemFlagFromCollection");
static_assert(sizeof(MarinerTotemRenderUtilities_RenderTotemFlagFromCollection) == 0x000050, "Wrong size on MarinerTotemRenderUtilities_RenderTotemFlagFromCollection");
static_assert(offsetof(MarinerTotemRenderUtilities_RenderTotemFlagFromCollection, WorldContextObject) == 0x000000, "Member 'MarinerTotemRenderUtilities_RenderTotemFlagFromCollection::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerTotemRenderUtilities_RenderTotemFlagFromCollection, TotemCollection) == 0x000008, "Member 'MarinerTotemRenderUtilities_RenderTotemFlagFromCollection::TotemCollection' has a wrong offset!");
static_assert(offsetof(MarinerTotemRenderUtilities_RenderTotemFlagFromCollection, ExistingTextures) == 0x000040, "Member 'MarinerTotemRenderUtilities_RenderTotemFlagFromCollection::ExistingTextures' has a wrong offset!");
static_assert(offsetof(MarinerTotemRenderUtilities_RenderTotemFlagFromCollection, ReturnValue) == 0x000048, "Member 'MarinerTotemRenderUtilities_RenderTotemFlagFromCollection::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTotemRenderUtilities.SetBorderRenderParameters
// 0x0010 (0x0010 - 0x0000)
struct MarinerTotemRenderUtilities_SetBorderRenderParameters final
{
public:
	const class UMarinerRocketTotemBorderDataAsset* DataAsset;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Renderer;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTotemRenderUtilities_SetBorderRenderParameters) == 0x000008, "Wrong alignment on MarinerTotemRenderUtilities_SetBorderRenderParameters");
static_assert(sizeof(MarinerTotemRenderUtilities_SetBorderRenderParameters) == 0x000010, "Wrong size on MarinerTotemRenderUtilities_SetBorderRenderParameters");
static_assert(offsetof(MarinerTotemRenderUtilities_SetBorderRenderParameters, DataAsset) == 0x000000, "Member 'MarinerTotemRenderUtilities_SetBorderRenderParameters::DataAsset' has a wrong offset!");
static_assert(offsetof(MarinerTotemRenderUtilities_SetBorderRenderParameters, Renderer) == 0x000008, "Member 'MarinerTotemRenderUtilities_SetBorderRenderParameters::Renderer' has a wrong offset!");

// Function Mariner.MarinerTotemRenderUtilities.SetBorderRenderParametersFromCollection
// 0x0040 (0x0040 - 0x0000)
struct MarinerTotemRenderUtilities_SetBorderRenderParametersFromCollection final
{
public:
	struct FMarinerRocketTotemCollection          TotemCollection;                                   // 0x0000(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Renderer;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTotemRenderUtilities_SetBorderRenderParametersFromCollection) == 0x000008, "Wrong alignment on MarinerTotemRenderUtilities_SetBorderRenderParametersFromCollection");
static_assert(sizeof(MarinerTotemRenderUtilities_SetBorderRenderParametersFromCollection) == 0x000040, "Wrong size on MarinerTotemRenderUtilities_SetBorderRenderParametersFromCollection");
static_assert(offsetof(MarinerTotemRenderUtilities_SetBorderRenderParametersFromCollection, TotemCollection) == 0x000000, "Member 'MarinerTotemRenderUtilities_SetBorderRenderParametersFromCollection::TotemCollection' has a wrong offset!");
static_assert(offsetof(MarinerTotemRenderUtilities_SetBorderRenderParametersFromCollection, Renderer) == 0x000038, "Member 'MarinerTotemRenderUtilities_SetBorderRenderParametersFromCollection::Renderer' has a wrong offset!");

// Function Mariner.MarinerTotemRenderUtilities.SetIconRenderParameters
// 0x0010 (0x0010 - 0x0000)
struct MarinerTotemRenderUtilities_SetIconRenderParameters final
{
public:
	const class UMarinerRocketTotemSymbolsDataAsset* DataAsset;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Renderer;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTotemRenderUtilities_SetIconRenderParameters) == 0x000008, "Wrong alignment on MarinerTotemRenderUtilities_SetIconRenderParameters");
static_assert(sizeof(MarinerTotemRenderUtilities_SetIconRenderParameters) == 0x000010, "Wrong size on MarinerTotemRenderUtilities_SetIconRenderParameters");
static_assert(offsetof(MarinerTotemRenderUtilities_SetIconRenderParameters, DataAsset) == 0x000000, "Member 'MarinerTotemRenderUtilities_SetIconRenderParameters::DataAsset' has a wrong offset!");
static_assert(offsetof(MarinerTotemRenderUtilities_SetIconRenderParameters, Renderer) == 0x000008, "Member 'MarinerTotemRenderUtilities_SetIconRenderParameters::Renderer' has a wrong offset!");

// Function Mariner.MarinerTotemRenderUtilities.SetIconRenderParametersFromCollection
// 0x0040 (0x0040 - 0x0000)
struct MarinerTotemRenderUtilities_SetIconRenderParametersFromCollection final
{
public:
	struct FMarinerRocketTotemCollection          TotemCollection;                                   // 0x0000(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Renderer;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTotemRenderUtilities_SetIconRenderParametersFromCollection) == 0x000008, "Wrong alignment on MarinerTotemRenderUtilities_SetIconRenderParametersFromCollection");
static_assert(sizeof(MarinerTotemRenderUtilities_SetIconRenderParametersFromCollection) == 0x000040, "Wrong size on MarinerTotemRenderUtilities_SetIconRenderParametersFromCollection");
static_assert(offsetof(MarinerTotemRenderUtilities_SetIconRenderParametersFromCollection, TotemCollection) == 0x000000, "Member 'MarinerTotemRenderUtilities_SetIconRenderParametersFromCollection::TotemCollection' has a wrong offset!");
static_assert(offsetof(MarinerTotemRenderUtilities_SetIconRenderParametersFromCollection, Renderer) == 0x000038, "Member 'MarinerTotemRenderUtilities_SetIconRenderParametersFromCollection::Renderer' has a wrong offset!");

// Function Mariner.MarinerTotemRenderUtilities.SetPatternRenderParameters
// 0x0010 (0x0010 - 0x0000)
struct MarinerTotemRenderUtilities_SetPatternRenderParameters final
{
public:
	const class UMarinerRocketTotemPatternDataAsset* DataAsset;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Renderer;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTotemRenderUtilities_SetPatternRenderParameters) == 0x000008, "Wrong alignment on MarinerTotemRenderUtilities_SetPatternRenderParameters");
static_assert(sizeof(MarinerTotemRenderUtilities_SetPatternRenderParameters) == 0x000010, "Wrong size on MarinerTotemRenderUtilities_SetPatternRenderParameters");
static_assert(offsetof(MarinerTotemRenderUtilities_SetPatternRenderParameters, DataAsset) == 0x000000, "Member 'MarinerTotemRenderUtilities_SetPatternRenderParameters::DataAsset' has a wrong offset!");
static_assert(offsetof(MarinerTotemRenderUtilities_SetPatternRenderParameters, Renderer) == 0x000008, "Member 'MarinerTotemRenderUtilities_SetPatternRenderParameters::Renderer' has a wrong offset!");

// Function Mariner.MarinerTotemRenderUtilities.SetPatternRenderParametersFromCollection
// 0x0040 (0x0040 - 0x0000)
struct MarinerTotemRenderUtilities_SetPatternRenderParametersFromCollection final
{
public:
	struct FMarinerRocketTotemCollection          TotemCollection;                                   // 0x0000(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Renderer;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTotemRenderUtilities_SetPatternRenderParametersFromCollection) == 0x000008, "Wrong alignment on MarinerTotemRenderUtilities_SetPatternRenderParametersFromCollection");
static_assert(sizeof(MarinerTotemRenderUtilities_SetPatternRenderParametersFromCollection) == 0x000040, "Wrong size on MarinerTotemRenderUtilities_SetPatternRenderParametersFromCollection");
static_assert(offsetof(MarinerTotemRenderUtilities_SetPatternRenderParametersFromCollection, TotemCollection) == 0x000000, "Member 'MarinerTotemRenderUtilities_SetPatternRenderParametersFromCollection::TotemCollection' has a wrong offset!");
static_assert(offsetof(MarinerTotemRenderUtilities_SetPatternRenderParametersFromCollection, Renderer) == 0x000038, "Member 'MarinerTotemRenderUtilities_SetPatternRenderParametersFromCollection::Renderer' has a wrong offset!");

// Function Mariner.MarinerTrailComponent.SetTrailColor
// 0x0004 (0x0004 - 0x0000)
struct MarinerTrailComponent_SetTrailColor final
{
public:
	struct FColor                                 NewTrailColor;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTrailComponent_SetTrailColor) == 0x000004, "Wrong alignment on MarinerTrailComponent_SetTrailColor");
static_assert(sizeof(MarinerTrailComponent_SetTrailColor) == 0x000004, "Wrong size on MarinerTrailComponent_SetTrailColor");
static_assert(offsetof(MarinerTrailComponent_SetTrailColor, NewTrailColor) == 0x000000, "Member 'MarinerTrailComponent_SetTrailColor::NewTrailColor' has a wrong offset!");

// Function Mariner.MarinerTrailComponent.SetTrailDisplay
// 0x0001 (0x0001 - 0x0000)
struct MarinerTrailComponent_SetTrailDisplay final
{
public:
	bool                                          bNewTrailDisplay;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTrailComponent_SetTrailDisplay) == 0x000001, "Wrong alignment on MarinerTrailComponent_SetTrailDisplay");
static_assert(sizeof(MarinerTrailComponent_SetTrailDisplay) == 0x000001, "Wrong size on MarinerTrailComponent_SetTrailDisplay");
static_assert(offsetof(MarinerTrailComponent_SetTrailDisplay, bNewTrailDisplay) == 0x000000, "Member 'MarinerTrailComponent_SetTrailDisplay::bNewTrailDisplay' has a wrong offset!");

// Function Mariner.MarinerTrainColliderSkeletalActor.OnTrainHitDetected
// 0x00A8 (0x00A8 - 0x0000)
struct MarinerTrainColliderSkeletalActor_OnTrainHitDetected final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A71[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerTrainColliderSkeletalActor_OnTrainHitDetected) == 0x000008, "Wrong alignment on MarinerTrainColliderSkeletalActor_OnTrainHitDetected");
static_assert(sizeof(MarinerTrainColliderSkeletalActor_OnTrainHitDetected) == 0x0000A8, "Wrong size on MarinerTrainColliderSkeletalActor_OnTrainHitDetected");
static_assert(offsetof(MarinerTrainColliderSkeletalActor_OnTrainHitDetected, SelfActor) == 0x000000, "Member 'MarinerTrainColliderSkeletalActor_OnTrainHitDetected::SelfActor' has a wrong offset!");
static_assert(offsetof(MarinerTrainColliderSkeletalActor_OnTrainHitDetected, OtherActor) == 0x000008, "Member 'MarinerTrainColliderSkeletalActor_OnTrainHitDetected::OtherActor' has a wrong offset!");
static_assert(offsetof(MarinerTrainColliderSkeletalActor_OnTrainHitDetected, NormalImpulse) == 0x000010, "Member 'MarinerTrainColliderSkeletalActor_OnTrainHitDetected::NormalImpulse' has a wrong offset!");
static_assert(offsetof(MarinerTrainColliderSkeletalActor_OnTrainHitDetected, Hit) == 0x00001C, "Member 'MarinerTrainColliderSkeletalActor_OnTrainHitDetected::Hit' has a wrong offset!");

// Function Mariner.MarinerTrialsGameState.SetTimerPaused
// 0x0001 (0x0001 - 0x0000)
struct MarinerTrialsGameState_SetTimerPaused final
{
public:
	bool                                          bPauseTimer;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTrialsGameState_SetTimerPaused) == 0x000001, "Wrong alignment on MarinerTrialsGameState_SetTimerPaused");
static_assert(sizeof(MarinerTrialsGameState_SetTimerPaused) == 0x000001, "Wrong size on MarinerTrialsGameState_SetTimerPaused");
static_assert(offsetof(MarinerTrialsGameState_SetTimerPaused, bPauseTimer) == 0x000000, "Member 'MarinerTrialsGameState_SetTimerPaused::bPauseTimer' has a wrong offset!");

// Function Mariner.MarinerTrialsMenu.OnModeSelected
// 0x0008 (0x0008 - 0x0000)
struct MarinerTrialsMenu_OnModeSelected final
{
public:
	class UMarinerLayeredButton*                  Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTrialsMenu_OnModeSelected) == 0x000008, "Wrong alignment on MarinerTrialsMenu_OnModeSelected");
static_assert(sizeof(MarinerTrialsMenu_OnModeSelected) == 0x000008, "Wrong size on MarinerTrialsMenu_OnModeSelected");
static_assert(offsetof(MarinerTrialsMenu_OnModeSelected, Instance) == 0x000000, "Member 'MarinerTrialsMenu_OnModeSelected::Instance' has a wrong offset!");

// Function Mariner.MarinerTTSDialogConsole.OnVKeyboardTextCommited
// 0x0020 (0x0020 - 0x0000)
struct MarinerTTSDialogConsole_OnVKeyboardTextCommited final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A76[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerTTSDialogConsole_OnVKeyboardTextCommited) == 0x000008, "Wrong alignment on MarinerTTSDialogConsole_OnVKeyboardTextCommited");
static_assert(sizeof(MarinerTTSDialogConsole_OnVKeyboardTextCommited) == 0x000020, "Wrong size on MarinerTTSDialogConsole_OnVKeyboardTextCommited");
static_assert(offsetof(MarinerTTSDialogConsole_OnVKeyboardTextCommited, Text) == 0x000000, "Member 'MarinerTTSDialogConsole_OnVKeyboardTextCommited::Text' has a wrong offset!");
static_assert(offsetof(MarinerTTSDialogConsole_OnVKeyboardTextCommited, CommitMethod) == 0x000018, "Member 'MarinerTTSDialogConsole_OnVKeyboardTextCommited::CommitMethod' has a wrong offset!");

// Function Mariner.MarinerTTSDialogPC.OnWidgetTextCommited
// 0x0020 (0x0020 - 0x0000)
struct MarinerTTSDialogPC_OnWidgetTextCommited final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A77[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerTTSDialogPC_OnWidgetTextCommited) == 0x000008, "Wrong alignment on MarinerTTSDialogPC_OnWidgetTextCommited");
static_assert(sizeof(MarinerTTSDialogPC_OnWidgetTextCommited) == 0x000020, "Wrong size on MarinerTTSDialogPC_OnWidgetTextCommited");
static_assert(offsetof(MarinerTTSDialogPC_OnWidgetTextCommited, Text) == 0x000000, "Member 'MarinerTTSDialogPC_OnWidgetTextCommited::Text' has a wrong offset!");
static_assert(offsetof(MarinerTTSDialogPC_OnWidgetTextCommited, CommitMethod) == 0x000018, "Member 'MarinerTTSDialogPC_OnWidgetTextCommited::CommitMethod' has a wrong offset!");

// Function Mariner.MarinerTTSDialogPC.SendText
// 0x0018 (0x0018 - 0x0000)
struct MarinerTTSDialogPC_SendText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTTSDialogPC_SendText) == 0x000008, "Wrong alignment on MarinerTTSDialogPC_SendText");
static_assert(sizeof(MarinerTTSDialogPC_SendText) == 0x000018, "Wrong size on MarinerTTSDialogPC_SendText");
static_assert(offsetof(MarinerTTSDialogPC_SendText, Text) == 0x000000, "Member 'MarinerTTSDialogPC_SendText::Text' has a wrong offset!");

// Function Mariner.MarinerTugOfWarCaptureVolume.GetCapturePercentage
// 0x0008 (0x0008 - 0x0000)
struct MarinerTugOfWarCaptureVolume_GetCapturePercentage final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTugOfWarCaptureVolume_GetCapturePercentage) == 0x000004, "Wrong alignment on MarinerTugOfWarCaptureVolume_GetCapturePercentage");
static_assert(sizeof(MarinerTugOfWarCaptureVolume_GetCapturePercentage) == 0x000008, "Wrong size on MarinerTugOfWarCaptureVolume_GetCapturePercentage");
static_assert(offsetof(MarinerTugOfWarCaptureVolume_GetCapturePercentage, TeamIndex) == 0x000000, "Member 'MarinerTugOfWarCaptureVolume_GetCapturePercentage::TeamIndex' has a wrong offset!");
static_assert(offsetof(MarinerTugOfWarCaptureVolume_GetCapturePercentage, ReturnValue) == 0x000004, "Member 'MarinerTugOfWarCaptureVolume_GetCapturePercentage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTugOfWarCaptureVolume.GetMostValuableOverlappingPlayer
// 0x0008 (0x0008 - 0x0000)
struct MarinerTugOfWarCaptureVolume_GetMostValuableOverlappingPlayer final
{
public:
	class APlayerState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTugOfWarCaptureVolume_GetMostValuableOverlappingPlayer) == 0x000008, "Wrong alignment on MarinerTugOfWarCaptureVolume_GetMostValuableOverlappingPlayer");
static_assert(sizeof(MarinerTugOfWarCaptureVolume_GetMostValuableOverlappingPlayer) == 0x000008, "Wrong size on MarinerTugOfWarCaptureVolume_GetMostValuableOverlappingPlayer");
static_assert(offsetof(MarinerTugOfWarCaptureVolume_GetMostValuableOverlappingPlayer, ReturnValue) == 0x000000, "Member 'MarinerTugOfWarCaptureVolume_GetMostValuableOverlappingPlayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerTugOfWarCaptureVolume.IsCaptured
// 0x0001 (0x0001 - 0x0000)
struct MarinerTugOfWarCaptureVolume_IsCaptured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerTugOfWarCaptureVolume_IsCaptured) == 0x000001, "Wrong alignment on MarinerTugOfWarCaptureVolume_IsCaptured");
static_assert(sizeof(MarinerTugOfWarCaptureVolume_IsCaptured) == 0x000001, "Wrong size on MarinerTugOfWarCaptureVolume_IsCaptured");
static_assert(offsetof(MarinerTugOfWarCaptureVolume_IsCaptured, ReturnValue) == 0x000000, "Member 'MarinerTugOfWarCaptureVolume_IsCaptured::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIBlueprintLibrary.ChangePlatformUser
// 0x0008 (0x0008 - 0x0000)
struct MarinerUIBlueprintLibrary_ChangePlatformUser final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIBlueprintLibrary_ChangePlatformUser) == 0x000008, "Wrong alignment on MarinerUIBlueprintLibrary_ChangePlatformUser");
static_assert(sizeof(MarinerUIBlueprintLibrary_ChangePlatformUser) == 0x000008, "Wrong size on MarinerUIBlueprintLibrary_ChangePlatformUser");
static_assert(offsetof(MarinerUIBlueprintLibrary_ChangePlatformUser, WorldContextObject) == 0x000000, "Member 'MarinerUIBlueprintLibrary_ChangePlatformUser::WorldContextObject' has a wrong offset!");

// Function Mariner.MarinerUIBlueprintLibrary.Conv_GuidToStringLower
// 0x0020 (0x0020 - 0x0000)
struct MarinerUIBlueprintLibrary_Conv_GuidToStringLower final
{
public:
	struct FGuid                                  InGuid;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIBlueprintLibrary_Conv_GuidToStringLower) == 0x000008, "Wrong alignment on MarinerUIBlueprintLibrary_Conv_GuidToStringLower");
static_assert(sizeof(MarinerUIBlueprintLibrary_Conv_GuidToStringLower) == 0x000020, "Wrong size on MarinerUIBlueprintLibrary_Conv_GuidToStringLower");
static_assert(offsetof(MarinerUIBlueprintLibrary_Conv_GuidToStringLower, InGuid) == 0x000000, "Member 'MarinerUIBlueprintLibrary_Conv_GuidToStringLower::InGuid' has a wrong offset!");
static_assert(offsetof(MarinerUIBlueprintLibrary_Conv_GuidToStringLower, ReturnValue) == 0x000010, "Member 'MarinerUIBlueprintLibrary_Conv_GuidToStringLower::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIBlueprintLibrary.GetBindingTypeDataFromInputAction
// 0x0014 (0x0014 - 0x0000)
struct MarinerUIBlueprintLibrary_GetBindingTypeDataFromInputAction final
{
public:
	EMarinerInputActions                          InAction;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A7A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerBindingTypeData                ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIBlueprintLibrary_GetBindingTypeDataFromInputAction) == 0x000004, "Wrong alignment on MarinerUIBlueprintLibrary_GetBindingTypeDataFromInputAction");
static_assert(sizeof(MarinerUIBlueprintLibrary_GetBindingTypeDataFromInputAction) == 0x000014, "Wrong size on MarinerUIBlueprintLibrary_GetBindingTypeDataFromInputAction");
static_assert(offsetof(MarinerUIBlueprintLibrary_GetBindingTypeDataFromInputAction, InAction) == 0x000000, "Member 'MarinerUIBlueprintLibrary_GetBindingTypeDataFromInputAction::InAction' has a wrong offset!");
static_assert(offsetof(MarinerUIBlueprintLibrary_GetBindingTypeDataFromInputAction, ReturnValue) == 0x000004, "Member 'MarinerUIBlueprintLibrary_GetBindingTypeDataFromInputAction::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIBlueprintLibrary.GetGamepadKeyFromInputActionBinding
// 0x0020 (0x0020 - 0x0000)
struct MarinerUIBlueprintLibrary_GetGamepadKeyFromInputActionBinding final
{
public:
	EMarinerInputActions                          InAction;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A7B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIBlueprintLibrary_GetGamepadKeyFromInputActionBinding) == 0x000008, "Wrong alignment on MarinerUIBlueprintLibrary_GetGamepadKeyFromInputActionBinding");
static_assert(sizeof(MarinerUIBlueprintLibrary_GetGamepadKeyFromInputActionBinding) == 0x000020, "Wrong size on MarinerUIBlueprintLibrary_GetGamepadKeyFromInputActionBinding");
static_assert(offsetof(MarinerUIBlueprintLibrary_GetGamepadKeyFromInputActionBinding, InAction) == 0x000000, "Member 'MarinerUIBlueprintLibrary_GetGamepadKeyFromInputActionBinding::InAction' has a wrong offset!");
static_assert(offsetof(MarinerUIBlueprintLibrary_GetGamepadKeyFromInputActionBinding, ReturnValue) == 0x000008, "Member 'MarinerUIBlueprintLibrary_GetGamepadKeyFromInputActionBinding::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIBlueprintLibrary.GetInputActionFromBindingTypeData
// 0x0014 (0x0014 - 0x0000)
struct MarinerUIBlueprintLibrary_GetInputActionFromBindingTypeData final
{
public:
	struct FMarinerBindingTypeData                InBindingTypeData;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EMarinerInputActions                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A7C[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIBlueprintLibrary_GetInputActionFromBindingTypeData) == 0x000004, "Wrong alignment on MarinerUIBlueprintLibrary_GetInputActionFromBindingTypeData");
static_assert(sizeof(MarinerUIBlueprintLibrary_GetInputActionFromBindingTypeData) == 0x000014, "Wrong size on MarinerUIBlueprintLibrary_GetInputActionFromBindingTypeData");
static_assert(offsetof(MarinerUIBlueprintLibrary_GetInputActionFromBindingTypeData, InBindingTypeData) == 0x000000, "Member 'MarinerUIBlueprintLibrary_GetInputActionFromBindingTypeData::InBindingTypeData' has a wrong offset!");
static_assert(offsetof(MarinerUIBlueprintLibrary_GetInputActionFromBindingTypeData, ReturnValue) == 0x000010, "Member 'MarinerUIBlueprintLibrary_GetInputActionFromBindingTypeData::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIBlueprintLibrary.GetInputActionFromInputName
// 0x000C (0x000C - 0x0000)
struct MarinerUIBlueprintLibrary_GetInputActionFromInputName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerInputActions                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A7D[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIBlueprintLibrary_GetInputActionFromInputName) == 0x000004, "Wrong alignment on MarinerUIBlueprintLibrary_GetInputActionFromInputName");
static_assert(sizeof(MarinerUIBlueprintLibrary_GetInputActionFromInputName) == 0x00000C, "Wrong size on MarinerUIBlueprintLibrary_GetInputActionFromInputName");
static_assert(offsetof(MarinerUIBlueprintLibrary_GetInputActionFromInputName, InName) == 0x000000, "Member 'MarinerUIBlueprintLibrary_GetInputActionFromInputName::InName' has a wrong offset!");
static_assert(offsetof(MarinerUIBlueprintLibrary_GetInputActionFromInputName, ReturnValue) == 0x000008, "Member 'MarinerUIBlueprintLibrary_GetInputActionFromInputName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIBlueprintLibrary.GetInputNameFromInputAction
// 0x000C (0x000C - 0x0000)
struct MarinerUIBlueprintLibrary_GetInputNameFromInputAction final
{
public:
	EMarinerInputActions                          InAction;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A7E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIBlueprintLibrary_GetInputNameFromInputAction) == 0x000004, "Wrong alignment on MarinerUIBlueprintLibrary_GetInputNameFromInputAction");
static_assert(sizeof(MarinerUIBlueprintLibrary_GetInputNameFromInputAction) == 0x00000C, "Wrong size on MarinerUIBlueprintLibrary_GetInputNameFromInputAction");
static_assert(offsetof(MarinerUIBlueprintLibrary_GetInputNameFromInputAction, InAction) == 0x000000, "Member 'MarinerUIBlueprintLibrary_GetInputNameFromInputAction::InAction' has a wrong offset!");
static_assert(offsetof(MarinerUIBlueprintLibrary_GetInputNameFromInputAction, ReturnValue) == 0x000004, "Member 'MarinerUIBlueprintLibrary_GetInputNameFromInputAction::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIBlueprintLibrary.MangoIdToString
// 0x0020 (0x0020 - 0x0000)
struct MarinerUIBlueprintLibrary_MangoIdToString final
{
public:
	struct FMangoId                               MangoId;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIBlueprintLibrary_MangoIdToString) == 0x000008, "Wrong alignment on MarinerUIBlueprintLibrary_MangoIdToString");
static_assert(sizeof(MarinerUIBlueprintLibrary_MangoIdToString) == 0x000020, "Wrong size on MarinerUIBlueprintLibrary_MangoIdToString");
static_assert(offsetof(MarinerUIBlueprintLibrary_MangoIdToString, MangoId) == 0x000000, "Member 'MarinerUIBlueprintLibrary_MangoIdToString::MangoId' has a wrong offset!");
static_assert(offsetof(MarinerUIBlueprintLibrary_MangoIdToString, ReturnValue) == 0x000010, "Member 'MarinerUIBlueprintLibrary_MangoIdToString::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIBlueprintLibrary.RemapController
// 0x0020 (0x0020 - 0x0000)
struct MarinerUIBlueprintLibrary_RemapController final
{
public:
	struct FMarinerControllerConfiguration        Configuration;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIBlueprintLibrary_RemapController) == 0x000008, "Wrong alignment on MarinerUIBlueprintLibrary_RemapController");
static_assert(sizeof(MarinerUIBlueprintLibrary_RemapController) == 0x000020, "Wrong size on MarinerUIBlueprintLibrary_RemapController");
static_assert(offsetof(MarinerUIBlueprintLibrary_RemapController, Configuration) == 0x000000, "Member 'MarinerUIBlueprintLibrary_RemapController::Configuration' has a wrong offset!");

// Function Mariner.MarinerUIBlueprintLibrary.RemapControllerCompletly
// 0x0008 (0x0008 - 0x0000)
struct MarinerUIBlueprintLibrary_RemapControllerCompletly final
{
public:
	class UDataTable*                             Configuration;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIBlueprintLibrary_RemapControllerCompletly) == 0x000008, "Wrong alignment on MarinerUIBlueprintLibrary_RemapControllerCompletly");
static_assert(sizeof(MarinerUIBlueprintLibrary_RemapControllerCompletly) == 0x000008, "Wrong size on MarinerUIBlueprintLibrary_RemapControllerCompletly");
static_assert(offsetof(MarinerUIBlueprintLibrary_RemapControllerCompletly, Configuration) == 0x000000, "Member 'MarinerUIBlueprintLibrary_RemapControllerCompletly::Configuration' has a wrong offset!");

// Function Mariner.MarinerUIBlueprintLibrary.SwapControllerAction
// 0x0002 (0x0002 - 0x0000)
struct MarinerUIBlueprintLibrary_SwapControllerAction final
{
public:
	EMarinerInputActions                          FirstAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerInputActions                          SecondAction;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIBlueprintLibrary_SwapControllerAction) == 0x000001, "Wrong alignment on MarinerUIBlueprintLibrary_SwapControllerAction");
static_assert(sizeof(MarinerUIBlueprintLibrary_SwapControllerAction) == 0x000002, "Wrong size on MarinerUIBlueprintLibrary_SwapControllerAction");
static_assert(offsetof(MarinerUIBlueprintLibrary_SwapControllerAction, FirstAction) == 0x000000, "Member 'MarinerUIBlueprintLibrary_SwapControllerAction::FirstAction' has a wrong offset!");
static_assert(offsetof(MarinerUIBlueprintLibrary_SwapControllerAction, SecondAction) == 0x000001, "Member 'MarinerUIBlueprintLibrary_SwapControllerAction::SecondAction' has a wrong offset!");

// Function Mariner.MarinerUIArtifactsForTypeData.LoadFromCMSFinished
// 0x0038 (0x0038 - 0x0000)
struct MarinerUIArtifactsForTypeData_LoadFromCMSFinished final
{
public:
	TArray<class UItemLoadResponse*>              LoadedDataResponse;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerGameInstance>    MarinerGameInstance;                               // 0x0010(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIArtifactsForTypeData_LoadFromCMSFinished) == 0x000008, "Wrong alignment on MarinerUIArtifactsForTypeData_LoadFromCMSFinished");
static_assert(sizeof(MarinerUIArtifactsForTypeData_LoadFromCMSFinished) == 0x000038, "Wrong size on MarinerUIArtifactsForTypeData_LoadFromCMSFinished");
static_assert(offsetof(MarinerUIArtifactsForTypeData_LoadFromCMSFinished, LoadedDataResponse) == 0x000000, "Member 'MarinerUIArtifactsForTypeData_LoadFromCMSFinished::LoadedDataResponse' has a wrong offset!");
static_assert(offsetof(MarinerUIArtifactsForTypeData_LoadFromCMSFinished, MarinerGameInstance) == 0x000010, "Member 'MarinerUIArtifactsForTypeData_LoadFromCMSFinished::MarinerGameInstance' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.CopyToClipboard
// 0x0010 (0x0010 - 0x0000)
struct MarinerUIHelpers_CopyToClipboard final
{
public:
	class FString                                 StringToCopy;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIHelpers_CopyToClipboard) == 0x000008, "Wrong alignment on MarinerUIHelpers_CopyToClipboard");
static_assert(sizeof(MarinerUIHelpers_CopyToClipboard) == 0x000010, "Wrong size on MarinerUIHelpers_CopyToClipboard");
static_assert(offsetof(MarinerUIHelpers_CopyToClipboard, StringToCopy) == 0x000000, "Member 'MarinerUIHelpers_CopyToClipboard::StringToCopy' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.CreateWidgetWithOwner
// 0x0018 (0x0018 - 0x0000)
struct MarinerUIHelpers_CreateWidgetWithOwner final
{
public:
	TSubclassOf<class UUserWidget>                UserWidgetClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                OwningWidget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIHelpers_CreateWidgetWithOwner) == 0x000008, "Wrong alignment on MarinerUIHelpers_CreateWidgetWithOwner");
static_assert(sizeof(MarinerUIHelpers_CreateWidgetWithOwner) == 0x000018, "Wrong size on MarinerUIHelpers_CreateWidgetWithOwner");
static_assert(offsetof(MarinerUIHelpers_CreateWidgetWithOwner, UserWidgetClass) == 0x000000, "Member 'MarinerUIHelpers_CreateWidgetWithOwner::UserWidgetClass' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_CreateWidgetWithOwner, OwningWidget) == 0x000008, "Member 'MarinerUIHelpers_CreateWidgetWithOwner::OwningWidget' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_CreateWidgetWithOwner, ReturnValue) == 0x000010, "Member 'MarinerUIHelpers_CreateWidgetWithOwner::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.EnterInGameStore
// 0x0010 (0x0010 - 0x0000)
struct MarinerUIHelpers_EnterInGameStore final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEntered;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A80[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIHelpers_EnterInGameStore) == 0x000008, "Wrong alignment on MarinerUIHelpers_EnterInGameStore");
static_assert(sizeof(MarinerUIHelpers_EnterInGameStore) == 0x000010, "Wrong size on MarinerUIHelpers_EnterInGameStore");
static_assert(offsetof(MarinerUIHelpers_EnterInGameStore, WorldContextObject) == 0x000000, "Member 'MarinerUIHelpers_EnterInGameStore::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_EnterInGameStore, bEntered) == 0x000008, "Member 'MarinerUIHelpers_EnterInGameStore::bEntered' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_EnterInGameStore, ReturnValue) == 0x000009, "Member 'MarinerUIHelpers_EnterInGameStore::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.Equal_ItemLoadResponse
// 0x0018 (0x0018 - 0x0000)
struct MarinerUIHelpers_Equal_ItemLoadResponse final
{
public:
	const class UItemLoadResponse*                A;                                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UItemLoadResponse*                B;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A81[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIHelpers_Equal_ItemLoadResponse) == 0x000008, "Wrong alignment on MarinerUIHelpers_Equal_ItemLoadResponse");
static_assert(sizeof(MarinerUIHelpers_Equal_ItemLoadResponse) == 0x000018, "Wrong size on MarinerUIHelpers_Equal_ItemLoadResponse");
static_assert(offsetof(MarinerUIHelpers_Equal_ItemLoadResponse, A) == 0x000000, "Member 'MarinerUIHelpers_Equal_ItemLoadResponse::A' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_Equal_ItemLoadResponse, B) == 0x000008, "Member 'MarinerUIHelpers_Equal_ItemLoadResponse::B' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_Equal_ItemLoadResponse, ReturnValue) == 0x000010, "Member 'MarinerUIHelpers_Equal_ItemLoadResponse::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.Equal_MangoProgressionCharacterItemUnlock
// 0x0038 (0x0038 - 0x0000)
struct MarinerUIHelpers_Equal_MangoProgressionCharacterItemUnlock final
{
public:
	struct FMangoProgressionCharacterItemUnlock   A;                                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMangoProgressionCharacterItemUnlock   B;                                                 // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A82[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIHelpers_Equal_MangoProgressionCharacterItemUnlock) == 0x000008, "Wrong alignment on MarinerUIHelpers_Equal_MangoProgressionCharacterItemUnlock");
static_assert(sizeof(MarinerUIHelpers_Equal_MangoProgressionCharacterItemUnlock) == 0x000038, "Wrong size on MarinerUIHelpers_Equal_MangoProgressionCharacterItemUnlock");
static_assert(offsetof(MarinerUIHelpers_Equal_MangoProgressionCharacterItemUnlock, A) == 0x000000, "Member 'MarinerUIHelpers_Equal_MangoProgressionCharacterItemUnlock::A' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_Equal_MangoProgressionCharacterItemUnlock, B) == 0x000018, "Member 'MarinerUIHelpers_Equal_MangoProgressionCharacterItemUnlock::B' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_Equal_MangoProgressionCharacterItemUnlock, ReturnValue) == 0x000030, "Member 'MarinerUIHelpers_Equal_MangoProgressionCharacterItemUnlock::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.FormatEventTimeRemaining
// 0x0020 (0x0020 - 0x0000)
struct MarinerUIHelpers_FormatEventTimeRemaining final
{
public:
	float                                         TimeInSeconds;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A83[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIHelpers_FormatEventTimeRemaining) == 0x000008, "Wrong alignment on MarinerUIHelpers_FormatEventTimeRemaining");
static_assert(sizeof(MarinerUIHelpers_FormatEventTimeRemaining) == 0x000020, "Wrong size on MarinerUIHelpers_FormatEventTimeRemaining");
static_assert(offsetof(MarinerUIHelpers_FormatEventTimeRemaining, TimeInSeconds) == 0x000000, "Member 'MarinerUIHelpers_FormatEventTimeRemaining::TimeInSeconds' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_FormatEventTimeRemaining, ReturnValue) == 0x000008, "Member 'MarinerUIHelpers_FormatEventTimeRemaining::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.FormatTimeRemaining
// 0x0020 (0x0020 - 0x0000)
struct MarinerUIHelpers_FormatTimeRemaining final
{
public:
	float                                         TimeInSeconds;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A84[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIHelpers_FormatTimeRemaining) == 0x000008, "Wrong alignment on MarinerUIHelpers_FormatTimeRemaining");
static_assert(sizeof(MarinerUIHelpers_FormatTimeRemaining) == 0x000020, "Wrong size on MarinerUIHelpers_FormatTimeRemaining");
static_assert(offsetof(MarinerUIHelpers_FormatTimeRemaining, TimeInSeconds) == 0x000000, "Member 'MarinerUIHelpers_FormatTimeRemaining::TimeInSeconds' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_FormatTimeRemaining, ReturnValue) == 0x000008, "Member 'MarinerUIHelpers_FormatTimeRemaining::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.GetClosestResolution
// 0x0020 (0x0020 - 0x0000)
struct MarinerUIHelpers_GetClosestResolution final
{
public:
	TArray<struct FIntPoint>                      ResolutionList;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FIntPoint                              Resolution;                                        // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A85[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIHelpers_GetClosestResolution) == 0x000008, "Wrong alignment on MarinerUIHelpers_GetClosestResolution");
static_assert(sizeof(MarinerUIHelpers_GetClosestResolution) == 0x000020, "Wrong size on MarinerUIHelpers_GetClosestResolution");
static_assert(offsetof(MarinerUIHelpers_GetClosestResolution, ResolutionList) == 0x000000, "Member 'MarinerUIHelpers_GetClosestResolution::ResolutionList' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_GetClosestResolution, Resolution) == 0x000010, "Member 'MarinerUIHelpers_GetClosestResolution::Resolution' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_GetClosestResolution, ReturnValue) == 0x000018, "Member 'MarinerUIHelpers_GetClosestResolution::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.GetMatchmakingInteractionState
// 0x0010 (0x0010 - 0x0000)
struct MarinerUIHelpers_GetMatchmakingInteractionState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingInteractionState                  ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A86[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIHelpers_GetMatchmakingInteractionState) == 0x000008, "Wrong alignment on MarinerUIHelpers_GetMatchmakingInteractionState");
static_assert(sizeof(MarinerUIHelpers_GetMatchmakingInteractionState) == 0x000010, "Wrong size on MarinerUIHelpers_GetMatchmakingInteractionState");
static_assert(offsetof(MarinerUIHelpers_GetMatchmakingInteractionState, WorldContextObject) == 0x000000, "Member 'MarinerUIHelpers_GetMatchmakingInteractionState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_GetMatchmakingInteractionState, ReturnValue) == 0x000008, "Member 'MarinerUIHelpers_GetMatchmakingInteractionState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.GetPlaylistInteractionState
// 0x0108 (0x0108 - 0x0000)
struct MarinerUIHelpers_GetPlaylistInteractionState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoPlaylist                         InPlaylist;                                        // 0x0008(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMatchmakingInteractionState                  OutMatchmakingState;                               // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlaylistInteractionState                     ReturnValue;                                       // 0x0101(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A87[0x6];                                     // 0x0102(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIHelpers_GetPlaylistInteractionState) == 0x000008, "Wrong alignment on MarinerUIHelpers_GetPlaylistInteractionState");
static_assert(sizeof(MarinerUIHelpers_GetPlaylistInteractionState) == 0x000108, "Wrong size on MarinerUIHelpers_GetPlaylistInteractionState");
static_assert(offsetof(MarinerUIHelpers_GetPlaylistInteractionState, WorldContextObject) == 0x000000, "Member 'MarinerUIHelpers_GetPlaylistInteractionState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_GetPlaylistInteractionState, InPlaylist) == 0x000008, "Member 'MarinerUIHelpers_GetPlaylistInteractionState::InPlaylist' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_GetPlaylistInteractionState, OutMatchmakingState) == 0x000100, "Member 'MarinerUIHelpers_GetPlaylistInteractionState::OutMatchmakingState' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_GetPlaylistInteractionState, ReturnValue) == 0x000101, "Member 'MarinerUIHelpers_GetPlaylistInteractionState::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.GetTruncatedUserName
// 0x0020 (0x0020 - 0x0000)
struct MarinerUIHelpers_GetTruncatedUserName final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIHelpers_GetTruncatedUserName) == 0x000008, "Wrong alignment on MarinerUIHelpers_GetTruncatedUserName");
static_assert(sizeof(MarinerUIHelpers_GetTruncatedUserName) == 0x000020, "Wrong size on MarinerUIHelpers_GetTruncatedUserName");
static_assert(offsetof(MarinerUIHelpers_GetTruncatedUserName, UserName) == 0x000000, "Member 'MarinerUIHelpers_GetTruncatedUserName::UserName' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_GetTruncatedUserName, ReturnValue) == 0x000010, "Member 'MarinerUIHelpers_GetTruncatedUserName::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.GetWidgetAnimationLength
// 0x0010 (0x0010 - 0x0000)
struct MarinerUIHelpers_GetWidgetAnimationLength final
{
public:
	class UWidgetAnimation*                       WidgetAnimation;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A88[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIHelpers_GetWidgetAnimationLength) == 0x000008, "Wrong alignment on MarinerUIHelpers_GetWidgetAnimationLength");
static_assert(sizeof(MarinerUIHelpers_GetWidgetAnimationLength) == 0x000010, "Wrong size on MarinerUIHelpers_GetWidgetAnimationLength");
static_assert(offsetof(MarinerUIHelpers_GetWidgetAnimationLength, WidgetAnimation) == 0x000000, "Member 'MarinerUIHelpers_GetWidgetAnimationLength::WidgetAnimation' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_GetWidgetAnimationLength, ReturnValue) == 0x000008, "Member 'MarinerUIHelpers_GetWidgetAnimationLength::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.GetWidgetOwningLayer
// 0x0010 (0x0010 - 0x0000)
struct MarinerUIHelpers_GetWidgetOwningLayer final
{
public:
	const class UWidget*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerMenuStackLayer*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUIHelpers_GetWidgetOwningLayer) == 0x000008, "Wrong alignment on MarinerUIHelpers_GetWidgetOwningLayer");
static_assert(sizeof(MarinerUIHelpers_GetWidgetOwningLayer) == 0x000010, "Wrong size on MarinerUIHelpers_GetWidgetOwningLayer");
static_assert(offsetof(MarinerUIHelpers_GetWidgetOwningLayer, Widget) == 0x000000, "Member 'MarinerUIHelpers_GetWidgetOwningLayer::Widget' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_GetWidgetOwningLayer, ReturnValue) == 0x000008, "Member 'MarinerUIHelpers_GetWidgetOwningLayer::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.IsEUBuild
// 0x0010 (0x0010 - 0x0000)
struct MarinerUIHelpers_IsEUBuild final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A89[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIHelpers_IsEUBuild) == 0x000008, "Wrong alignment on MarinerUIHelpers_IsEUBuild");
static_assert(sizeof(MarinerUIHelpers_IsEUBuild) == 0x000010, "Wrong size on MarinerUIHelpers_IsEUBuild");
static_assert(offsetof(MarinerUIHelpers_IsEUBuild, WorldContextObject) == 0x000000, "Member 'MarinerUIHelpers_IsEUBuild::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_IsEUBuild, ReturnValue) == 0x000008, "Member 'MarinerUIHelpers_IsEUBuild::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.IsPracticeModeAllowed
// 0x0010 (0x0010 - 0x0000)
struct MarinerUIHelpers_IsPracticeModeAllowed final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIHelpers_IsPracticeModeAllowed) == 0x000008, "Wrong alignment on MarinerUIHelpers_IsPracticeModeAllowed");
static_assert(sizeof(MarinerUIHelpers_IsPracticeModeAllowed) == 0x000010, "Wrong size on MarinerUIHelpers_IsPracticeModeAllowed");
static_assert(offsetof(MarinerUIHelpers_IsPracticeModeAllowed, WorldContextObject) == 0x000000, "Member 'MarinerUIHelpers_IsPracticeModeAllowed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_IsPracticeModeAllowed, ReturnValue) == 0x000008, "Member 'MarinerUIHelpers_IsPracticeModeAllowed::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.NotEqual_ItemLoadResponse
// 0x0018 (0x0018 - 0x0000)
struct MarinerUIHelpers_NotEqual_ItemLoadResponse final
{
public:
	const class UItemLoadResponse*                A;                                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UItemLoadResponse*                B;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIHelpers_NotEqual_ItemLoadResponse) == 0x000008, "Wrong alignment on MarinerUIHelpers_NotEqual_ItemLoadResponse");
static_assert(sizeof(MarinerUIHelpers_NotEqual_ItemLoadResponse) == 0x000018, "Wrong size on MarinerUIHelpers_NotEqual_ItemLoadResponse");
static_assert(offsetof(MarinerUIHelpers_NotEqual_ItemLoadResponse, A) == 0x000000, "Member 'MarinerUIHelpers_NotEqual_ItemLoadResponse::A' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_NotEqual_ItemLoadResponse, B) == 0x000008, "Member 'MarinerUIHelpers_NotEqual_ItemLoadResponse::B' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_NotEqual_ItemLoadResponse, ReturnValue) == 0x000010, "Member 'MarinerUIHelpers_NotEqual_ItemLoadResponse::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.NotEqual_MangoProgressionCharacterItemUnlock
// 0x0038 (0x0038 - 0x0000)
struct MarinerUIHelpers_NotEqual_MangoProgressionCharacterItemUnlock final
{
public:
	struct FMangoProgressionCharacterItemUnlock   A;                                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMangoProgressionCharacterItemUnlock   B;                                                 // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8C[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIHelpers_NotEqual_MangoProgressionCharacterItemUnlock) == 0x000008, "Wrong alignment on MarinerUIHelpers_NotEqual_MangoProgressionCharacterItemUnlock");
static_assert(sizeof(MarinerUIHelpers_NotEqual_MangoProgressionCharacterItemUnlock) == 0x000038, "Wrong size on MarinerUIHelpers_NotEqual_MangoProgressionCharacterItemUnlock");
static_assert(offsetof(MarinerUIHelpers_NotEqual_MangoProgressionCharacterItemUnlock, A) == 0x000000, "Member 'MarinerUIHelpers_NotEqual_MangoProgressionCharacterItemUnlock::A' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_NotEqual_MangoProgressionCharacterItemUnlock, B) == 0x000018, "Member 'MarinerUIHelpers_NotEqual_MangoProgressionCharacterItemUnlock::B' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_NotEqual_MangoProgressionCharacterItemUnlock, ReturnValue) == 0x000030, "Member 'MarinerUIHelpers_NotEqual_MangoProgressionCharacterItemUnlock::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUIHelpers.SendTextToSpeechMessage
// 0x0020 (0x0020 - 0x0000)
struct MarinerUIHelpers_SendTextToSpeechMessage final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextToSend;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8D[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUIHelpers_SendTextToSpeechMessage) == 0x000008, "Wrong alignment on MarinerUIHelpers_SendTextToSpeechMessage");
static_assert(sizeof(MarinerUIHelpers_SendTextToSpeechMessage) == 0x000020, "Wrong size on MarinerUIHelpers_SendTextToSpeechMessage");
static_assert(offsetof(MarinerUIHelpers_SendTextToSpeechMessage, WorldContextObject) == 0x000000, "Member 'MarinerUIHelpers_SendTextToSpeechMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_SendTextToSpeechMessage, TextToSend) == 0x000008, "Member 'MarinerUIHelpers_SendTextToSpeechMessage::TextToSend' has a wrong offset!");
static_assert(offsetof(MarinerUIHelpers_SendTextToSpeechMessage, ReturnValue) == 0x000018, "Member 'MarinerUIHelpers_SendTextToSpeechMessage::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerUniformGridPanel.SetHighlightedSlot
// 0x000C (0x000C - 0x0000)
struct MarinerUniformGridPanel_SetHighlightedSlot final
{
public:
	int32                                         Column;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A91[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerUniformGridPanel_SetHighlightedSlot) == 0x000004, "Wrong alignment on MarinerUniformGridPanel_SetHighlightedSlot");
static_assert(sizeof(MarinerUniformGridPanel_SetHighlightedSlot) == 0x00000C, "Wrong size on MarinerUniformGridPanel_SetHighlightedSlot");
static_assert(offsetof(MarinerUniformGridPanel_SetHighlightedSlot, Column) == 0x000000, "Member 'MarinerUniformGridPanel_SetHighlightedSlot::Column' has a wrong offset!");
static_assert(offsetof(MarinerUniformGridPanel_SetHighlightedSlot, Row) == 0x000004, "Member 'MarinerUniformGridPanel_SetHighlightedSlot::Row' has a wrong offset!");
static_assert(offsetof(MarinerUniformGridPanel_SetHighlightedSlot, bForce) == 0x000008, "Member 'MarinerUniformGridPanel_SetHighlightedSlot::bForce' has a wrong offset!");

// Function Mariner.MarinerUniformGridPanel.GetHighlightedWidget
// 0x0008 (0x0008 - 0x0000)
struct MarinerUniformGridPanel_GetHighlightedWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerUniformGridPanel_GetHighlightedWidget) == 0x000008, "Wrong alignment on MarinerUniformGridPanel_GetHighlightedWidget");
static_assert(sizeof(MarinerUniformGridPanel_GetHighlightedWidget) == 0x000008, "Wrong size on MarinerUniformGridPanel_GetHighlightedWidget");
static_assert(offsetof(MarinerUniformGridPanel_GetHighlightedWidget, ReturnValue) == 0x000000, "Member 'MarinerUniformGridPanel_GetHighlightedWidget::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerVerticalBox.HighlightWidgetViaIndex
// 0x0004 (0x0004 - 0x0000)
struct MarinerVerticalBox_HighlightWidgetViaIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerVerticalBox_HighlightWidgetViaIndex) == 0x000004, "Wrong alignment on MarinerVerticalBox_HighlightWidgetViaIndex");
static_assert(sizeof(MarinerVerticalBox_HighlightWidgetViaIndex) == 0x000004, "Wrong size on MarinerVerticalBox_HighlightWidgetViaIndex");
static_assert(offsetof(MarinerVerticalBox_HighlightWidgetViaIndex, Param_Index) == 0x000000, "Member 'MarinerVerticalBox_HighlightWidgetViaIndex::Param_Index' has a wrong offset!");

// Function Mariner.MarinerVerticalBox.GetHighlightedWidget
// 0x0008 (0x0008 - 0x0000)
struct MarinerVerticalBox_GetHighlightedWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerVerticalBox_GetHighlightedWidget) == 0x000008, "Wrong alignment on MarinerVerticalBox_GetHighlightedWidget");
static_assert(sizeof(MarinerVerticalBox_GetHighlightedWidget) == 0x000008, "Wrong size on MarinerVerticalBox_GetHighlightedWidget");
static_assert(offsetof(MarinerVerticalBox_GetHighlightedWidget, ReturnValue) == 0x000000, "Member 'MarinerVerticalBox_GetHighlightedWidget::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerVoiceChatPlayerWidget.OnPlayerTalking
// 0x0028 (0x0028 - 0x0000)
struct MarinerVoiceChatPlayerWidget_OnPlayerTalking final
{
public:
	class FString                                 ChannelName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTalking;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A95[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarinerVoiceChatPlayerWidget_OnPlayerTalking) == 0x000008, "Wrong alignment on MarinerVoiceChatPlayerWidget_OnPlayerTalking");
static_assert(sizeof(MarinerVoiceChatPlayerWidget_OnPlayerTalking) == 0x000028, "Wrong size on MarinerVoiceChatPlayerWidget_OnPlayerTalking");
static_assert(offsetof(MarinerVoiceChatPlayerWidget_OnPlayerTalking, ChannelName) == 0x000000, "Member 'MarinerVoiceChatPlayerWidget_OnPlayerTalking::ChannelName' has a wrong offset!");
static_assert(offsetof(MarinerVoiceChatPlayerWidget_OnPlayerTalking, PlayerName) == 0x000010, "Member 'MarinerVoiceChatPlayerWidget_OnPlayerTalking::PlayerName' has a wrong offset!");
static_assert(offsetof(MarinerVoiceChatPlayerWidget_OnPlayerTalking, bIsTalking) == 0x000020, "Member 'MarinerVoiceChatPlayerWidget_OnPlayerTalking::bIsTalking' has a wrong offset!");

// Function Mariner.MarinerVoiceOverManager.OnAudioEvent
// 0x0010 (0x0010 - 0x0000)
struct MarinerVoiceOverManager_OnAudioEvent final
{
public:
	EAkCallbackType                               In_eType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A99[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        In_pCallbackInfo;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerVoiceOverManager_OnAudioEvent) == 0x000008, "Wrong alignment on MarinerVoiceOverManager_OnAudioEvent");
static_assert(sizeof(MarinerVoiceOverManager_OnAudioEvent) == 0x000010, "Wrong size on MarinerVoiceOverManager_OnAudioEvent");
static_assert(offsetof(MarinerVoiceOverManager_OnAudioEvent, In_eType) == 0x000000, "Member 'MarinerVoiceOverManager_OnAudioEvent::In_eType' has a wrong offset!");
static_assert(offsetof(MarinerVoiceOverManager_OnAudioEvent, In_pCallbackInfo) == 0x000008, "Member 'MarinerVoiceOverManager_OnAudioEvent::In_pCallbackInfo' has a wrong offset!");

// Function Mariner.MarinerVoiceOverManager.PlayVoiceOver
// 0x0008 (0x0008 - 0x0000)
struct MarinerVoiceOverManager_PlayVoiceOver final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerVoiceOverManager_PlayVoiceOver) == 0x000008, "Wrong alignment on MarinerVoiceOverManager_PlayVoiceOver");
static_assert(sizeof(MarinerVoiceOverManager_PlayVoiceOver) == 0x000008, "Wrong size on MarinerVoiceOverManager_PlayVoiceOver");
static_assert(offsetof(MarinerVoiceOverManager_PlayVoiceOver, AkEvent) == 0x000000, "Member 'MarinerVoiceOverManager_PlayVoiceOver::AkEvent' has a wrong offset!");

// Function Mariner.MarinerVoiceOverManager.PlayVoiceOverIfQueueIsEmpty
// 0x0008 (0x0008 - 0x0000)
struct MarinerVoiceOverManager_PlayVoiceOverIfQueueIsEmpty final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerVoiceOverManager_PlayVoiceOverIfQueueIsEmpty) == 0x000008, "Wrong alignment on MarinerVoiceOverManager_PlayVoiceOverIfQueueIsEmpty");
static_assert(sizeof(MarinerVoiceOverManager_PlayVoiceOverIfQueueIsEmpty) == 0x000008, "Wrong size on MarinerVoiceOverManager_PlayVoiceOverIfQueueIsEmpty");
static_assert(offsetof(MarinerVoiceOverManager_PlayVoiceOverIfQueueIsEmpty, AkEvent) == 0x000000, "Member 'MarinerVoiceOverManager_PlayVoiceOverIfQueueIsEmpty::AkEvent' has a wrong offset!");

// Function Mariner.MarinerVoiceOverManager.QueueVoiceOver
// 0x0008 (0x0008 - 0x0000)
struct MarinerVoiceOverManager_QueueVoiceOver final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerVoiceOverManager_QueueVoiceOver) == 0x000008, "Wrong alignment on MarinerVoiceOverManager_QueueVoiceOver");
static_assert(sizeof(MarinerVoiceOverManager_QueueVoiceOver) == 0x000008, "Wrong size on MarinerVoiceOverManager_QueueVoiceOver");
static_assert(offsetof(MarinerVoiceOverManager_QueueVoiceOver, AkEvent) == 0x000000, "Member 'MarinerVoiceOverManager_QueueVoiceOver::AkEvent' has a wrong offset!");

// Function Mariner.MarinerWeaponAnimInstance.InitializeWeaponAnimBP
// 0x0008 (0x0008 - 0x0000)
struct MarinerWeaponAnimInstance_InitializeWeaponAnimBP final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWeaponAnimInstance_InitializeWeaponAnimBP) == 0x000008, "Wrong alignment on MarinerWeaponAnimInstance_InitializeWeaponAnimBP");
static_assert(sizeof(MarinerWeaponAnimInstance_InitializeWeaponAnimBP) == 0x000008, "Wrong size on MarinerWeaponAnimInstance_InitializeWeaponAnimBP");
static_assert(offsetof(MarinerWeaponAnimInstance_InitializeWeaponAnimBP, Character) == 0x000000, "Member 'MarinerWeaponAnimInstance_InitializeWeaponAnimBP::Character' has a wrong offset!");

// Function Mariner.MarinerWidgetPool.CreatePool
// 0x0018 (0x0018 - 0x0000)
struct MarinerWidgetPool_CreatePool final
{
public:
	struct FWidgetPoolData                        PoolData;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWidgetPool_CreatePool) == 0x000008, "Wrong alignment on MarinerWidgetPool_CreatePool");
static_assert(sizeof(MarinerWidgetPool_CreatePool) == 0x000018, "Wrong size on MarinerWidgetPool_CreatePool");
static_assert(offsetof(MarinerWidgetPool_CreatePool, PoolData) == 0x000000, "Member 'MarinerWidgetPool_CreatePool::PoolData' has a wrong offset!");

// Function Mariner.MarinerWidgetPool.DestroyPool
// 0x0008 (0x0008 - 0x0000)
struct MarinerWidgetPool_DestroyPool final
{
public:
	TSubclassOf<class UUserWidget>                WidgetType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWidgetPool_DestroyPool) == 0x000008, "Wrong alignment on MarinerWidgetPool_DestroyPool");
static_assert(sizeof(MarinerWidgetPool_DestroyPool) == 0x000008, "Wrong size on MarinerWidgetPool_DestroyPool");
static_assert(offsetof(MarinerWidgetPool_DestroyPool, WidgetType) == 0x000000, "Member 'MarinerWidgetPool_DestroyPool::WidgetType' has a wrong offset!");

// Function Mariner.MarinerWidgetPool.GetWidgetFromPool
// 0x0018 (0x0018 - 0x0000)
struct MarinerWidgetPool_GetWidgetFromPool final
{
public:
	TSubclassOf<class UUserWidget>                WidgetType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                NewOwner;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWidgetPool_GetWidgetFromPool) == 0x000008, "Wrong alignment on MarinerWidgetPool_GetWidgetFromPool");
static_assert(sizeof(MarinerWidgetPool_GetWidgetFromPool) == 0x000018, "Wrong size on MarinerWidgetPool_GetWidgetFromPool");
static_assert(offsetof(MarinerWidgetPool_GetWidgetFromPool, WidgetType) == 0x000000, "Member 'MarinerWidgetPool_GetWidgetFromPool::WidgetType' has a wrong offset!");
static_assert(offsetof(MarinerWidgetPool_GetWidgetFromPool, NewOwner) == 0x000008, "Member 'MarinerWidgetPool_GetWidgetFromPool::NewOwner' has a wrong offset!");
static_assert(offsetof(MarinerWidgetPool_GetWidgetFromPool, ReturnValue) == 0x000010, "Member 'MarinerWidgetPool_GetWidgetFromPool::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerWrapBox.AddChildWrapBox
// 0x0010 (0x0010 - 0x0000)
struct MarinerWrapBox_AddChildWrapBox final
{
public:
	class UWidget*                                Content;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerWrapBoxSlot*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWrapBox_AddChildWrapBox) == 0x000008, "Wrong alignment on MarinerWrapBox_AddChildWrapBox");
static_assert(sizeof(MarinerWrapBox_AddChildWrapBox) == 0x000010, "Wrong size on MarinerWrapBox_AddChildWrapBox");
static_assert(offsetof(MarinerWrapBox_AddChildWrapBox, Content) == 0x000000, "Member 'MarinerWrapBox_AddChildWrapBox::Content' has a wrong offset!");
static_assert(offsetof(MarinerWrapBox_AddChildWrapBox, ReturnValue) == 0x000008, "Member 'MarinerWrapBox_AddChildWrapBox::ReturnValue' has a wrong offset!");

// Function Mariner.MarinerWrapBox.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct MarinerWrapBox_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWrapBox_SetHorizontalAlignment) == 0x000001, "Wrong alignment on MarinerWrapBox_SetHorizontalAlignment");
static_assert(sizeof(MarinerWrapBox_SetHorizontalAlignment) == 0x000001, "Wrong size on MarinerWrapBox_SetHorizontalAlignment");
static_assert(offsetof(MarinerWrapBox_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'MarinerWrapBox_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function Mariner.MarinerWrapBox.SetInnerSlotPadding
// 0x0008 (0x0008 - 0x0000)
struct MarinerWrapBox_SetInnerSlotPadding final
{
public:
	struct FVector2D                              InPadding;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarinerWrapBox_SetInnerSlotPadding) == 0x000004, "Wrong alignment on MarinerWrapBox_SetInnerSlotPadding");
static_assert(sizeof(MarinerWrapBox_SetInnerSlotPadding) == 0x000008, "Wrong size on MarinerWrapBox_SetInnerSlotPadding");
static_assert(offsetof(MarinerWrapBox_SetInnerSlotPadding, InPadding) == 0x000000, "Member 'MarinerWrapBox_SetInnerSlotPadding::InPadding' has a wrong offset!");

}

