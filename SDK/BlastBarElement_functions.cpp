#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlastBarElement

#include "Basic.hpp"

#include "BlastBarElement_classes.hpp"
#include "BlastBarElement_parameters.hpp"


namespace SDK
{

// Function BlastBarElement.BlastBarElement_C.ExecuteUbergraph_BlastBarElement
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBlastBarElement_C::ExecuteUbergraph_BlastBarElement(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "ExecuteUbergraph_BlastBarElement");

	Params::BlastBarElement_C_ExecuteUbergraph_BlastBarElement Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BlastBarElement.BlastBarElement_C.OnRoundTransitionChange_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBlastBarElement_C::OnRoundTransitionChange_Event_0(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "OnRoundTransitionChange_Event_0");

	Params::BlastBarElement_C_OnRoundTransitionChange_Event_0 Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BlastBarElement.BlastBarElement_C.DodgeStarted
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DodgeDuration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBlastBarElement_C::DodgeStarted(float DodgeDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "DodgeStarted");

	Params::BlastBarElement_C_DodgeStarted Parms{};

	Parms.DodgeDuration = DodgeDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BlastBarElement.BlastBarElement_C.SetupCharacterRef
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBlastBarElement_C::SetupCharacterRef(class AMarinerCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "SetupCharacterRef");

	Params::BlastBarElement_C_SetupCharacterRef Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BlastBarElement.BlastBarElement_C.HealAnimFinish
// (BlueprintCallable, BlueprintEvent)

void UBlastBarElement_C::HealAnimFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "HealAnimFinish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BlastBarElement.BlastBarElement_C.AlreadyHealing
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentHealth                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBlastBarElement_C::AlreadyHealing(float CurrentHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "AlreadyHealing");

	Params::BlastBarElement_C_AlreadyHealing Parms{};

	Parms.CurrentHealth = CurrentHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BlastBarElement.BlastBarElement_C.HealLoopAnim
// (BlueprintCallable, BlueprintEvent)

void UBlastBarElement_C::HealLoopAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "HealLoopAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BlastBarElement.BlastBarElement_C.StartHealAnim
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentHealth                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBlastBarElement_C::StartHealAnim(float CurrentHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "StartHealAnim");

	Params::BlastBarElement_C_StartHealAnim Parms{};

	Parms.CurrentHealth = CurrentHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BlastBarElement.BlastBarElement_C.UpdateHealProgress
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentHealth                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FakeCurrent                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBlastBarElement_C::UpdateHealProgress(float CurrentHealth, bool FakeCurrent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "UpdateHealProgress");

	Params::BlastBarElement_C_UpdateHealProgress Parms{};

	Parms.CurrentHealth = CurrentHealth;
	Parms.FakeCurrent = FakeCurrent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BlastBarElement.BlastBarElement_C.EnterMegablastState
// (BlueprintCallable, BlueprintEvent)

void UBlastBarElement_C::EnterMegablastState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "EnterMegablastState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BlastBarElement.BlastBarElement_C.ResetMeter
// (BlueprintCallable, BlueprintEvent)

void UBlastBarElement_C::ResetMeter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "ResetMeter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BlastBarElement.BlastBarElement_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBlastBarElement_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BlastBarElement.BlastBarElement_C.ReceiveDamageEndAnimation
// (BlueprintCallable, BlueprintEvent)

void UBlastBarElement_C::ReceiveDamageEndAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "ReceiveDamageEndAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BlastBarElement.BlastBarElement_C.ReceiveDamageUpdate
// (BlueprintCallable, BlueprintEvent)

void UBlastBarElement_C::ReceiveDamageUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "ReceiveDamageUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BlastBarElement.BlastBarElement_C.AnimateMegablast
// (BlueprintCallable, BlueprintEvent)

void UBlastBarElement_C::AnimateMegablast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "AnimateMegablast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BlastBarElement.BlastBarElement_C.EndMegablast
// (BlueprintCallable, BlueprintEvent)

void UBlastBarElement_C::EndMegablast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "EndMegablast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BlastBarElement.BlastBarElement_C.UpdateDamageValue
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   StartingDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndingDamage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMarinerDamageableComponent*      DamageableComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBlastBarElement_C::UpdateDamageValue(float StartingDamage, float EndingDamage, class UMarinerDamageableComponent* DamageableComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "UpdateDamageValue");

	Params::BlastBarElement_C_UpdateDamageValue Parms{};

	Parms.StartingDamage = StartingDamage;
	Parms.EndingDamage = EndingDamage;
	Parms.DamageableComponent = DamageableComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BlastBarElement.BlastBarElement_C.LagTickStart
// (BlueprintCallable, BlueprintEvent)

void UBlastBarElement_C::LagTickStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "LagTickStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BlastBarElement.BlastBarElement_C.FakeTick
// (BlueprintCallable, BlueprintEvent)

void UBlastBarElement_C::FakeTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "FakeTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BlastBarElement.BlastBarElement_C.SetupMats
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         Output_Get                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBlastBarElement_C::SetupMats(class UMaterialInstanceDynamic** Output_Get)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "SetupMats");

	Params::BlastBarElement_C_SetupMats Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Output_Get != nullptr)
		*Output_Get = Parms.Output_Get;
}


// Function BlastBarElement.BlastBarElement_C.Clear Heal Timers
// (Public, BlueprintCallable, BlueprintEvent)

void UBlastBarElement_C::Clear_Heal_Timers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "Clear Heal Timers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BlastBarElement.BlastBarElement_C.Get Dodge Ability
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDodgeAbility_C*                  AsDodge_Ability                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBlastBarElement_C::Get_Dodge_Ability(class UDodgeAbility_C** AsDodge_Ability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlastBarElement_C", "Get Dodge Ability");

	Params::BlastBarElement_C_Get_Dodge_Ability Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsDodge_Ability != nullptr)
		*AsDodge_Ability = Parms.AsDodge_Ability;
}

}

