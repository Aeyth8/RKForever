#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MarinerKnockoutPlayerState

#include "Basic.hpp"

#include "BP_MarinerPlayerState_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MarinerKnockoutPlayerState.MarinerKnockoutPlayerState_C
// 0x0030 (0x0638 - 0x0608)
class AMarinerKnockoutPlayerState_C final : public ABP_MarinerPlayerState_C
{
public:
	int32                                         StocksLeft;                                        // 0x0608(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         NumberOfTimesKilledWithoutStock;                   // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastInlineDelegateProperty_             OnStocksChanged;                                   // 0x0610(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastInlineDelegateProperty_             OnLastPlayerWithStock;                             // 0x0620(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         KOsTowardNewBadge;                                 // 0x0630(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void OnStocksChanged__DelegateSignature(class AMarinerKnockoutPlayerState_C* PlayerState);
	void OnLastPlayerWithStock__DelegateSignature();
	void OnRep_StocksLeft();
	void SetStocks(int32 NewStockCount);
	void IncrementStocks();
	void DecrementStocks();
	void OnRep_KOsTowardNewBadge();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MarinerKnockoutPlayerState_C">();
	}
	static class AMarinerKnockoutPlayerState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarinerKnockoutPlayerState_C>();
	}
};
static_assert(alignof(AMarinerKnockoutPlayerState_C) == 0x000008, "Wrong alignment on AMarinerKnockoutPlayerState_C");
static_assert(sizeof(AMarinerKnockoutPlayerState_C) == 0x000638, "Wrong size on AMarinerKnockoutPlayerState_C");
static_assert(offsetof(AMarinerKnockoutPlayerState_C, StocksLeft) == 0x000608, "Member 'AMarinerKnockoutPlayerState_C::StocksLeft' has a wrong offset!");
static_assert(offsetof(AMarinerKnockoutPlayerState_C, NumberOfTimesKilledWithoutStock) == 0x00060C, "Member 'AMarinerKnockoutPlayerState_C::NumberOfTimesKilledWithoutStock' has a wrong offset!");
static_assert(offsetof(AMarinerKnockoutPlayerState_C, OnStocksChanged) == 0x000610, "Member 'AMarinerKnockoutPlayerState_C::OnStocksChanged' has a wrong offset!");
static_assert(offsetof(AMarinerKnockoutPlayerState_C, OnLastPlayerWithStock) == 0x000620, "Member 'AMarinerKnockoutPlayerState_C::OnLastPlayerWithStock' has a wrong offset!");
static_assert(offsetof(AMarinerKnockoutPlayerState_C, KOsTowardNewBadge) == 0x000630, "Member 'AMarinerKnockoutPlayerState_C::KOsTowardNewBadge' has a wrong offset!");

}

