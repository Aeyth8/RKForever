#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterFunctionLibrary

#include "Basic.hpp"

#include "CharacterFunctionLibrary_classes.hpp"
#include "CharacterFunctionLibrary_parameters.hpp"


namespace SDK
{

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.SetAimPitchYaw
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                MarinerCharacter                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AimPitch                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AimYaw                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::SetAimPitchYaw(class AMarinerCharacter* MarinerCharacter, float& AimPitch, float& AimYaw, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "SetAimPitchYaw");

	Params::CharacterFunctionLibrary_C_SetAimPitchYaw Parms{};

	Parms.MarinerCharacter = MarinerCharacter;
	Parms.AimPitch = AimPitch;
	Parms.AimYaw = AimYaw;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	AimPitch = Parms.AimPitch;
	AimYaw = Parms.AimYaw;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.SetFalling
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            MarinerCharacter                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFalling                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::SetFalling(class APawn* MarinerCharacter, bool& IsFalling, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "SetFalling");

	Params::CharacterFunctionLibrary_C_SetFalling Parms{};

	Parms.MarinerCharacter = MarinerCharacter;
	Parms.IsFalling = IsFalling;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	IsFalling = Parms.IsFalling;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.Calculate2DRelativeSpeed
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RelativeXSpeed                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RelativeYSpeed                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  SceneComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::Calculate2DRelativeSpeed(class APawn* Pawn, float& RelativeXSpeed, float& RelativeYSpeed, class USceneComponent* SceneComponent, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "Calculate2DRelativeSpeed");

	Params::CharacterFunctionLibrary_C_Calculate2DRelativeSpeed Parms{};

	Parms.Pawn = Pawn;
	Parms.RelativeXSpeed = RelativeXSpeed;
	Parms.RelativeYSpeed = RelativeYSpeed;
	Parms.SceneComponent = SceneComponent;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	RelativeXSpeed = Parms.RelativeXSpeed;
	RelativeYSpeed = Parms.RelativeYSpeed;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetCardinalDirection
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         FacingDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECardinalDirection                      Cardinal                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NorthRotation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SouthRotation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EastRotation                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   WestRotation                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::GetCardinalDirection(const struct FRotator& FacingDirection, const struct FVector& Velocity, class UObject* __WorldContext, ECardinalDirection* Cardinal, float* Direction, float* NorthRotation, float* SouthRotation, float* EastRotation, float* WestRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "GetCardinalDirection");

	Params::CharacterFunctionLibrary_C_GetCardinalDirection Parms{};

	Parms.FacingDirection = std::move(FacingDirection);
	Parms.Velocity = std::move(Velocity);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Cardinal != nullptr)
		*Cardinal = Parms.Cardinal;

	if (Direction != nullptr)
		*Direction = Parms.Direction;

	if (NorthRotation != nullptr)
		*NorthRotation = Parms.NorthRotation;

	if (SouthRotation != nullptr)
		*SouthRotation = Parms.SouthRotation;

	if (EastRotation != nullptr)
		*EastRotation = Parms.EastRotation;

	if (WestRotation != nullptr)
		*WestRotation = Parms.WestRotation;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetWeaponSocketLocation
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                MarinerCharacter                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           SkeletalMesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Socket                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::GetWeaponSocketLocation(class AMarinerCharacter*& MarinerCharacter, class USkeletalMeshComponent*& SkeletalMesh, struct FVector& Location, class FName Socket, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "GetWeaponSocketLocation");

	Params::CharacterFunctionLibrary_C_GetWeaponSocketLocation Parms{};

	Parms.MarinerCharacter = MarinerCharacter;
	Parms.SkeletalMesh = SkeletalMesh;
	Parms.Location = std::move(Location);
	Parms.Socket = Socket;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	MarinerCharacter = Parms.MarinerCharacter;
	SkeletalMesh = Parms.SkeletalMesh;
	Location = std::move(Parms.Location);
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.CalculateRootOffset
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MaxRootOffset                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          RootOffsetRef                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Right_Foot_Alpha_Ref                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Left_Foot_Alpha_Ref                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Root_Interp_Speed                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Delta                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Left_Foot_Offset                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Right_Foot_Offset                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::CalculateRootOffset(float MaxRootOffset, struct FVector& RootOffsetRef, float& Right_Foot_Alpha_Ref, float& Left_Foot_Alpha_Ref, float Root_Interp_Speed, float Delta, float Left_Foot_Offset, float Right_Foot_Offset, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "CalculateRootOffset");

	Params::CharacterFunctionLibrary_C_CalculateRootOffset Parms{};

	Parms.MaxRootOffset = MaxRootOffset;
	Parms.RootOffsetRef = std::move(RootOffsetRef);
	Parms.Right_Foot_Alpha_Ref = Right_Foot_Alpha_Ref;
	Parms.Left_Foot_Alpha_Ref = Left_Foot_Alpha_Ref;
	Parms.Root_Interp_Speed = Root_Interp_Speed;
	Parms.Delta = Delta;
	Parms.Left_Foot_Offset = Left_Foot_Offset;
	Parms.Right_Foot_Offset = Right_Foot_Offset;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	RootOffsetRef = std::move(Parms.RootOffsetRef);
	Right_Foot_Alpha_Ref = Parms.Right_Foot_Alpha_Ref;
	Left_Foot_Alpha_Ref = Parms.Left_Foot_Alpha_Ref;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.MarinerBaseAnimation
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                MarinerCharacter                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMoving                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// bool                                    IsReturningToArena                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// bool                                    IsStunned                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// bool                                    IsFalling                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// float                                   RelativeXSpeed                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RelativeYSpeed                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  SkeletalMesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AimPitch                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AimYaw                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         SkeletalRotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// float                                   DeltaTimeX                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECardinalDirection                      CardinalDirection                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnableTurnInPlace                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   North                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   South                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   East                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   West                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   YawOffset                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::MarinerBaseAnimation(class AMarinerCharacter*& MarinerCharacter, bool& IsMoving, bool& IsReturningToArena, bool& IsStunned, bool& IsFalling, float& RelativeXSpeed, float& RelativeYSpeed, class USceneComponent* SkeletalMesh, float& AimPitch, float& AimYaw, struct FVector& Velocity, struct FRotator& SkeletalRotation, float& DeltaTimeX, ECardinalDirection& CardinalDirection, float& Direction, bool EnableTurnInPlace, float& North, float& South, float& East, float& West, float& Speed, float& YawOffset, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "MarinerBaseAnimation");

	Params::CharacterFunctionLibrary_C_MarinerBaseAnimation Parms{};

	Parms.MarinerCharacter = MarinerCharacter;
	Parms.IsMoving = IsMoving;
	Parms.IsReturningToArena = IsReturningToArena;
	Parms.IsStunned = IsStunned;
	Parms.IsFalling = IsFalling;
	Parms.RelativeXSpeed = RelativeXSpeed;
	Parms.RelativeYSpeed = RelativeYSpeed;
	Parms.SkeletalMesh = SkeletalMesh;
	Parms.AimPitch = AimPitch;
	Parms.AimYaw = AimYaw;
	Parms.Velocity = std::move(Velocity);
	Parms.SkeletalRotation = std::move(SkeletalRotation);
	Parms.DeltaTimeX = DeltaTimeX;
	Parms.CardinalDirection = CardinalDirection;
	Parms.Direction = Direction;
	Parms.EnableTurnInPlace = EnableTurnInPlace;
	Parms.North = North;
	Parms.South = South;
	Parms.East = East;
	Parms.West = West;
	Parms.Speed = Speed;
	Parms.YawOffset = YawOffset;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	MarinerCharacter = Parms.MarinerCharacter;
	IsMoving = Parms.IsMoving;
	IsReturningToArena = Parms.IsReturningToArena;
	IsStunned = Parms.IsStunned;
	IsFalling = Parms.IsFalling;
	RelativeXSpeed = Parms.RelativeXSpeed;
	RelativeYSpeed = Parms.RelativeYSpeed;
	AimPitch = Parms.AimPitch;
	AimYaw = Parms.AimYaw;
	Velocity = std::move(Parms.Velocity);
	SkeletalRotation = std::move(Parms.SkeletalRotation);
	DeltaTimeX = Parms.DeltaTimeX;
	CardinalDirection = Parms.CardinalDirection;
	Direction = Parms.Direction;
	North = Parms.North;
	South = Parms.South;
	East = Parms.East;
	West = Parms.West;
	Speed = Parms.Speed;
	YawOffset = Parms.YawOffset;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.AnimCheckGameModeForMainMenu
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMainMenu                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCharacterFunctionLibrary_C::AnimCheckGameModeForMainMenu(class UObject* __WorldContext, bool* IsMainMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "AnimCheckGameModeForMainMenu");

	Params::CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsMainMenu != nullptr)
		*IsMainMenu = Parms.IsMainMenu;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetAngleFromVectors
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::GetAngleFromVectors(struct FVector& A, struct FVector& B, class UObject* __WorldContext, float* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "GetAngleFromVectors");

	Params::CharacterFunctionLibrary_C_GetAngleFromVectors Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	A = std::move(Parms.A);
	B = std::move(Parms.B);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.CalculateAirLean
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RelativeX                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RelativeY                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Lean                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// float                                   AimPitch                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFalling                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::CalculateAirLean(float RelativeX, float RelativeY, struct FRotator& Lean, float& AimPitch, bool& IsFalling, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "CalculateAirLean");

	Params::CharacterFunctionLibrary_C_CalculateAirLean Parms{};

	Parms.RelativeX = RelativeX;
	Parms.RelativeY = RelativeY;
	Parms.Lean = std::move(Lean);
	Parms.AimPitch = AimPitch;
	Parms.IsFalling = IsFalling;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Lean = std::move(Parms.Lean);
	AimPitch = Parms.AimPitch;
	IsFalling = Parms.IsFalling;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.MarinerFirstPersonBaseAnimation
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                MarinerCharacter                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMoving                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// bool                                    IsFalling                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// bool                                    IsStunned                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// float                                   RelativeXSpeed                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RelativeYSpeed                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::MarinerFirstPersonBaseAnimation(class AMarinerCharacter*& MarinerCharacter, bool& IsMoving, bool& IsFalling, bool& IsStunned, float& RelativeXSpeed, float& RelativeYSpeed, struct FVector& Velocity, float& Speed, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "MarinerFirstPersonBaseAnimation");

	Params::CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation Parms{};

	Parms.MarinerCharacter = MarinerCharacter;
	Parms.IsMoving = IsMoving;
	Parms.IsFalling = IsFalling;
	Parms.IsStunned = IsStunned;
	Parms.RelativeXSpeed = RelativeXSpeed;
	Parms.RelativeYSpeed = RelativeYSpeed;
	Parms.Velocity = std::move(Velocity);
	Parms.Speed = Speed;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	MarinerCharacter = Parms.MarinerCharacter;
	IsMoving = Parms.IsMoving;
	IsFalling = Parms.IsFalling;
	IsStunned = Parms.IsStunned;
	RelativeXSpeed = Parms.RelativeXSpeed;
	RelativeYSpeed = Parms.RelativeYSpeed;
	Velocity = std::move(Parms.Velocity);
	Speed = Parms.Speed;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.MarinerAnim_MovementState
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                MarinerCharacter                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMoving                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// bool                                    IsFalling                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::MarinerAnim_MovementState(class AMarinerCharacter*& MarinerCharacter, struct FVector& Velocity, float& Speed, bool& IsMoving, bool& IsFalling, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "MarinerAnim_MovementState");

	Params::CharacterFunctionLibrary_C_MarinerAnim_MovementState Parms{};

	Parms.MarinerCharacter = MarinerCharacter;
	Parms.Velocity = std::move(Velocity);
	Parms.Speed = Speed;
	Parms.IsMoving = IsMoving;
	Parms.IsFalling = IsFalling;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	MarinerCharacter = Parms.MarinerCharacter;
	Velocity = std::move(Parms.Velocity);
	Speed = Parms.Speed;
	IsMoving = Parms.IsMoving;
	IsFalling = Parms.IsFalling;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.Deprecated_MaskAnimDynamicsBySpeed
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      ResponseCurve                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMarinerCharacter*                MarinerCharacter                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::Deprecated_MaskAnimDynamicsBySpeed(class UCurveFloat*& ResponseCurve, class AMarinerCharacter*& MarinerCharacter, float& Alpha, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "Deprecated_MaskAnimDynamicsBySpeed");

	Params::CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed Parms{};

	Parms.ResponseCurve = ResponseCurve;
	Parms.MarinerCharacter = MarinerCharacter;
	Parms.Alpha = Alpha;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ResponseCurve = Parms.ResponseCurve;
	MarinerCharacter = Parms.MarinerCharacter;
	Alpha = Parms.Alpha;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.CalculateArenaReturnRotation
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           OwningComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// float                                   ReturningAlpha                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaTimeX                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxRotation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AlphaSpeed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotationSpeed                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::CalculateArenaReturnRotation(class USkeletalMeshComponent*& OwningComponent, struct FVector& Velocity, struct FRotator& Rotation, float& ReturningAlpha, float DeltaTimeX, float MaxRotation, float AlphaSpeed, float RotationSpeed, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "CalculateArenaReturnRotation");

	Params::CharacterFunctionLibrary_C_CalculateArenaReturnRotation Parms{};

	Parms.OwningComponent = OwningComponent;
	Parms.Velocity = std::move(Velocity);
	Parms.Rotation = std::move(Rotation);
	Parms.ReturningAlpha = ReturningAlpha;
	Parms.DeltaTimeX = DeltaTimeX;
	Parms.MaxRotation = MaxRotation;
	Parms.AlphaSpeed = AlphaSpeed;
	Parms.RotationSpeed = RotationSpeed;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	OwningComponent = Parms.OwningComponent;
	Velocity = std::move(Parms.Velocity);
	Rotation = std::move(Parms.Rotation);
	ReturningAlpha = Parms.ReturningAlpha;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.FirstPersonTurningAnim
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         PreviousRotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FRotator                         SwizzledRotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::FirstPersonTurningAnim(class APawn*& Pawn, struct FRotator& PreviousRotation, struct FRotator& SwizzledRotation, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "FirstPersonTurningAnim");

	Params::CharacterFunctionLibrary_C_FirstPersonTurningAnim Parms{};

	Parms.Pawn = Pawn;
	Parms.PreviousRotation = std::move(PreviousRotation);
	Parms.SwizzledRotation = std::move(SwizzledRotation);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Pawn = Parms.Pawn;
	PreviousRotation = std::move(Parms.PreviousRotation);
	SwizzledRotation = std::move(Parms.SwizzledRotation);
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.SwizzledRotationInterpolation
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Rotator                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FRotator                         SwizzledRotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DeltaTimeX                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   X                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Y                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Z                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ClampX                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ClampY                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ClampZ                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::SwizzledRotationInterpolation(struct FRotator& Rotator, const struct FRotator& SwizzledRotation, float DeltaTimeX, float Speed, float X, float Y, float Z, const struct FVector2D& ClampX, const struct FVector2D& ClampY, const struct FVector2D& ClampZ, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "SwizzledRotationInterpolation");

	Params::CharacterFunctionLibrary_C_SwizzledRotationInterpolation Parms{};

	Parms.Rotator = std::move(Rotator);
	Parms.SwizzledRotation = std::move(SwizzledRotation);
	Parms.DeltaTimeX = DeltaTimeX;
	Parms.Speed = Speed;
	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.ClampX = std::move(ClampX);
	Parms.ClampY = std::move(ClampY);
	Parms.ClampZ = std::move(ClampZ);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Rotator = std::move(Parms.Rotator);
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.MarinerAnimationOnDamage
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   IncomingDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DamageStack                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DamageScale                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      DamageCurve                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DamageAlpha                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::MarinerAnimationOnDamage(float IncomingDamage, float& DamageStack, float& DamageScale, class UCurveFloat*& DamageCurve, float& DamageAlpha, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "MarinerAnimationOnDamage");

	Params::CharacterFunctionLibrary_C_MarinerAnimationOnDamage Parms{};

	Parms.IncomingDamage = IncomingDamage;
	Parms.DamageStack = DamageStack;
	Parms.DamageScale = DamageScale;
	Parms.DamageCurve = DamageCurve;
	Parms.DamageAlpha = DamageAlpha;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	DamageStack = Parms.DamageStack;
	DamageScale = Parms.DamageScale;
	DamageCurve = Parms.DamageCurve;
	DamageAlpha = Parms.DamageAlpha;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.MarinerAnimationDamageUpdate
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DamageStack                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaTimeX                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::MarinerAnimationDamageUpdate(float& DamageStack, float DeltaTimeX, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "MarinerAnimationDamageUpdate");

	Params::CharacterFunctionLibrary_C_MarinerAnimationDamageUpdate Parms{};

	Parms.DamageStack = DamageStack;
	Parms.DeltaTimeX = DeltaTimeX;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	DamageStack = Parms.DamageStack;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.MaskLocomotionByVelocity
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   VelocityLength                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   North                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   South                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   East                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   West                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::MaskLocomotionByVelocity(float VelocityLength, float& North, float& South, float& East, float& West, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "MaskLocomotionByVelocity");

	Params::CharacterFunctionLibrary_C_MaskLocomotionByVelocity Parms{};

	Parms.VelocityLength = VelocityLength;
	Parms.North = North;
	Parms.South = South;
	Parms.East = East;
	Parms.West = West;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	North = Parms.North;
	South = Parms.South;
	East = Parms.East;
	West = Parms.West;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.AdjustLocomotionSpeedByVelocity
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   LocomotionSpeed                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   VelocityLength                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReferenceSpeed                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CharacterScale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::AdjustLocomotionSpeedByVelocity(float& LocomotionSpeed, float VelocityLength, float ReferenceSpeed, float Min, float Max, float CharacterScale, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "AdjustLocomotionSpeedByVelocity");

	Params::CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity Parms{};

	Parms.LocomotionSpeed = LocomotionSpeed;
	Parms.VelocityLength = VelocityLength;
	Parms.ReferenceSpeed = ReferenceSpeed;
	Parms.Min = Min;
	Parms.Max = Max;
	Parms.CharacterScale = CharacterScale;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	LocomotionSpeed = Parms.LocomotionSpeed;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.Temporary_FixCardinalAndAim
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AimYaw                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFalling                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::Temporary_FixCardinalAndAim(uint8& Direction, float& AimYaw, bool IsFalling, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "Temporary_FixCardinalAndAim");

	Params::CharacterFunctionLibrary_C_Temporary_FixCardinalAndAim Parms{};

	Parms.Direction = Direction;
	Parms.AimYaw = AimYaw;
	Parms.IsFalling = IsFalling;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Direction = Parms.Direction;
	AimYaw = Parms.AimYaw;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.AnimVelocityAndAcceleration
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterMovementComponent*      MovementComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       WorldTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Acceleration                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          AccelerationNormal                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          AccelerationNormalRelative                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          VelocityNormal                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   VelocityLength                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::AnimVelocityAndAcceleration(class UCharacterMovementComponent*& MovementComponent, const struct FTransform& WorldTransform, const struct FVector& Velocity, struct FVector& Acceleration, struct FVector& AccelerationNormal, struct FVector& AccelerationNormalRelative, struct FVector& VelocityNormal, float& VelocityLength, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "AnimVelocityAndAcceleration");

	Params::CharacterFunctionLibrary_C_AnimVelocityAndAcceleration Parms{};

	Parms.MovementComponent = MovementComponent;
	Parms.WorldTransform = std::move(WorldTransform);
	Parms.Velocity = std::move(Velocity);
	Parms.Acceleration = std::move(Acceleration);
	Parms.AccelerationNormal = std::move(AccelerationNormal);
	Parms.AccelerationNormalRelative = std::move(AccelerationNormalRelative);
	Parms.VelocityNormal = std::move(VelocityNormal);
	Parms.VelocityLength = VelocityLength;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	MovementComponent = Parms.MovementComponent;
	Acceleration = std::move(Parms.Acceleration);
	AccelerationNormal = std::move(Parms.AccelerationNormal);
	AccelerationNormalRelative = std::move(Parms.AccelerationNormalRelative);
	VelocityNormal = std::move(Parms.VelocityNormal);
	VelocityLength = Parms.VelocityLength;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.CalcLaunchRotation
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         LaunchRotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::CalcLaunchRotation(struct FRotator& LaunchRotation, float DeltaTime, class AActor* Target, const struct FVector& Direction, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "CalcLaunchRotation");

	Params::CharacterFunctionLibrary_C_CalcLaunchRotation Parms{};

	Parms.LaunchRotation = std::move(LaunchRotation);
	Parms.DeltaTime = DeltaTime;
	Parms.Target = Target;
	Parms.Direction = std::move(Direction);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	LaunchRotation = std::move(Parms.LaunchRotation);
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.CalcFirstPresonFallingRotation
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         FallingRotator                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMarinerCharacter*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::CalcFirstPresonFallingRotation(struct FRotator& FallingRotator, const struct FVector& Velocity, class AMarinerCharacter*& Character, float DeltaTime, float Speed, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "CalcFirstPresonFallingRotation");

	Params::CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation Parms{};

	Parms.FallingRotator = std::move(FallingRotator);
	Parms.Velocity = std::move(Velocity);
	Parms.Character = Character;
	Parms.DeltaTime = DeltaTime;
	Parms.Speed = Speed;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	FallingRotator = std::move(Parms.FallingRotator);
	Character = Parms.Character;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetDefaultSkinForCharacter
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftClassPtr<class UClass>             Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMarinerSkinCollectionDataAsset*  SkinCollection                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::GetDefaultSkinForCharacter(TSoftClassPtr<class UClass> Character, class UObject* __WorldContext, class UMarinerSkinCollectionDataAsset** SkinCollection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "GetDefaultSkinForCharacter");

	Params::CharacterFunctionLibrary_C_GetDefaultSkinForCharacter Parms{};

	Parms.Character = Character;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (SkinCollection != nullptr)
		*SkinCollection = Parms.SkinCollection;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetCharacterNameForPlayerState
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AMarinerPlayerState*              MarinerPlayerState                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             CharacterName                                          (Parm, OutParm)

void UCharacterFunctionLibrary_C::GetCharacterNameForPlayerState(class AMarinerPlayerState* MarinerPlayerState, class UObject* __WorldContext, class FText* CharacterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "GetCharacterNameForPlayerState");

	Params::CharacterFunctionLibrary_C_GetCharacterNameForPlayerState Parms{};

	Parms.MarinerPlayerState = MarinerPlayerState;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (CharacterName != nullptr)
		*CharacterName = std::move(Parms.CharacterName);
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetSelectedCharacterNameForPlayerState
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AMarinerPlayerState*              MarinerPlayerState                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             CharacterName                                          (Parm, OutParm)

void UCharacterFunctionLibrary_C::GetSelectedCharacterNameForPlayerState(class AMarinerPlayerState* MarinerPlayerState, class UObject* __WorldContext, class FText* CharacterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "GetSelectedCharacterNameForPlayerState");

	Params::CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState Parms{};

	Parms.MarinerPlayerState = MarinerPlayerState;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (CharacterName != nullptr)
		*CharacterName = std::move(Parms.CharacterName);
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.CalcTurnInPlace
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMoving                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::CalcTurnInPlace(bool& IsMoving, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "CalcTurnInPlace");

	Params::CharacterFunctionLibrary_C_CalcTurnInPlace Parms{};

	Parms.IsMoving = IsMoving;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	IsMoving = Parms.IsMoving;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetAnimStanceTuning
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DefaultStance                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   StaggerStance                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TumbleStance                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SmashedStance                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LaunchedStance                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::GetAnimStanceTuning(float& DefaultStance, float& StaggerStance, float& TumbleStance, float& SmashedStance, float& LaunchedStance, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "GetAnimStanceTuning");

	Params::CharacterFunctionLibrary_C_GetAnimStanceTuning Parms{};

	Parms.DefaultStance = DefaultStance;
	Parms.StaggerStance = StaggerStance;
	Parms.TumbleStance = TumbleStance;
	Parms.SmashedStance = SmashedStance;
	Parms.LaunchedStance = LaunchedStance;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	DefaultStance = Parms.DefaultStance;
	StaggerStance = Parms.StaggerStance;
	TumbleStance = Parms.TumbleStance;
	SmashedStance = Parms.SmashedStance;
	LaunchedStance = Parms.LaunchedStance;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetFastestExpectedProjectileSpeed
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::GetFastestExpectedProjectileSpeed(class UObject* __WorldContext, float* Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "GetFastestExpectedProjectileSpeed");

	Params::CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetWidestExpectedProjectileSphereRadius
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::GetWidestExpectedProjectileSphereRadius(class UObject* __WorldContext, float* Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "GetWidestExpectedProjectileSphereRadius");

	Params::CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Radius != nullptr)
		*Radius = Parms.Radius;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetFurthestExpectedProjectileDistance
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::GetFurthestExpectedProjectileDistance(float Time, class UObject* __WorldContext, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "GetFurthestExpectedProjectileDistance");

	Params::CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance Parms{};

	Parms.Time = Time;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetFurthestExpectedProjectileDistance_ServerFrame
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::GetFurthestExpectedProjectileDistance_ServerFrame(class UObject* __WorldContext, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "GetFurthestExpectedProjectileDistance_ServerFrame");

	Params::CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance_ServerFrame Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetProjectileFurthest1ServerFrameDistPlusMaxRadius
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::GetProjectileFurthest1ServerFrameDistPlusMaxRadius(class UObject* __WorldContext, float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "GetProjectileFurthest1ServerFrameDistPlusMaxRadius");

	Params::CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetSimplePredictedPawnLocationInTime
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class APawn*                            PawnToPredict                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TimeToPredictAhead                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PredictedLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::GetSimplePredictedPawnLocationInTime(class APawn* PawnToPredict, float TimeToPredictAhead, class UObject* __WorldContext, struct FVector* PredictedLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "GetSimplePredictedPawnLocationInTime");

	Params::CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime Parms{};

	Parms.PawnToPredict = PawnToPredict;
	Parms.TimeToPredictAhead = TimeToPredictAhead;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PredictedLocation != nullptr)
		*PredictedLocation = std::move(Parms.PredictedLocation);
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetSimplePredictedProjectileLocationInTime
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AMarinerProjectile*               ProjectileToPredict                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TimeToPredictAhead                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PredictedLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCharacterFunctionLibrary_C::GetSimplePredictedProjectileLocationInTime(class AMarinerProjectile* ProjectileToPredict, float TimeToPredictAhead, class UObject* __WorldContext, struct FVector* PredictedLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "GetSimplePredictedProjectileLocationInTime");

	Params::CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime Parms{};

	Parms.ProjectileToPredict = ProjectileToPredict;
	Parms.TimeToPredictAhead = TimeToPredictAhead;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PredictedLocation != nullptr)
		*PredictedLocation = std::move(Parms.PredictedLocation);
}


// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.IsHitStunned
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HitStunned                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCharacterFunctionLibrary_C::IsHitStunned(class AMarinerCharacter* Character, class UObject* __WorldContext, bool* HitStunned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterFunctionLibrary_C", "IsHitStunned");

	Params::CharacterFunctionLibrary_C_IsHitStunned Parms{};

	Parms.Character = Character;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (HitStunned != nullptr)
		*HitStunned = Parms.HitStunned;
}

}

