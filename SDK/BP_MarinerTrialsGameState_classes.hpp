#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MarinerTrialsGameState

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mariner_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MarinerTrialsGameState.BP_MarinerTrialsGameState_C
// 0x0040 (0x0910 - 0x08D0)
class ABP_MarinerTrialsGameState_C final : public AMarinerTrialsGameState
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x08D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	UMulticastInlineDelegateProperty_             OnPreroundCountdownChange;                         // 0x08E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         PreroundTimerRemainingTime;                        // 0x08F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2592[0x4];                                     // 0x08F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           PreroundStartTimerHandle;                          // 0x08F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         PreroundTimerMaxTimeToSendUpdates;                 // 0x0900(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2593[0x4];                                     // 0x0904(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           GameTimer;                                         // 0x0908(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void OnPreroundCountdownChange__DelegateSignature(int32 TimeLeft, bool ShouldEnable);
	void ExecuteUbergraph_BP_MarinerTrialsGameState(int32 EntryPoint);
	void PauseTrialsGameTimer(bool IsPaused);
	void OnTrialsGameTimeTimerStart();
	void StartTrialsGameTimer();
	void ReceiveBeginPlay();
	void FinishPreroundCountdownTimer();
	void PreroundTimerUpdate();
	void OnMaxPreroundTimerSet();
	void OnPreroundCountdownSet(float PreRoundCountdownEndTimeStamp);
	void EnablePreroundCountdown(float TimerLength, bool ShouldEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MarinerTrialsGameState_C">();
	}
	static class ABP_MarinerTrialsGameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MarinerTrialsGameState_C>();
	}
};
static_assert(alignof(ABP_MarinerTrialsGameState_C) == 0x000008, "Wrong alignment on ABP_MarinerTrialsGameState_C");
static_assert(sizeof(ABP_MarinerTrialsGameState_C) == 0x000910, "Wrong size on ABP_MarinerTrialsGameState_C");
static_assert(offsetof(ABP_MarinerTrialsGameState_C, UberGraphFrame) == 0x0008D0, "Member 'ABP_MarinerTrialsGameState_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MarinerTrialsGameState_C, DefaultSceneRoot) == 0x0008D8, "Member 'ABP_MarinerTrialsGameState_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MarinerTrialsGameState_C, OnPreroundCountdownChange) == 0x0008E0, "Member 'ABP_MarinerTrialsGameState_C::OnPreroundCountdownChange' has a wrong offset!");
static_assert(offsetof(ABP_MarinerTrialsGameState_C, PreroundTimerRemainingTime) == 0x0008F0, "Member 'ABP_MarinerTrialsGameState_C::PreroundTimerRemainingTime' has a wrong offset!");
static_assert(offsetof(ABP_MarinerTrialsGameState_C, PreroundStartTimerHandle) == 0x0008F8, "Member 'ABP_MarinerTrialsGameState_C::PreroundStartTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_MarinerTrialsGameState_C, PreroundTimerMaxTimeToSendUpdates) == 0x000900, "Member 'ABP_MarinerTrialsGameState_C::PreroundTimerMaxTimeToSendUpdates' has a wrong offset!");
static_assert(offsetof(ABP_MarinerTrialsGameState_C, GameTimer) == 0x000908, "Member 'ABP_MarinerTrialsGameState_C::GameTimer' has a wrong offset!");

}

