#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mariner

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "MangoClient_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Enum Mariner.EMarinerArenaReturnState
// NumValues: 0x0005
enum class EMarinerArenaReturnState : uint8
{
	NotReturningToArena                      = 0,
	Knockout                                 = 1,
	Returning_Spline                         = 2,
	Returning_Fallback                       = 3,
	EMarinerArenaReturnState_MAX             = 4,
};

// Enum Mariner.EMarinerRealityState
// NumValues: 0x0004
enum class EMarinerRealityState : uint8
{
	Default                                  = 0,
	FluxVerse                                = 1,
	BotVerse                                 = 2,
	EMarinerRealityState_MAX                 = 3,
};

// Enum Mariner.EMarinerActivationTargetState
// NumValues: 0x0004
enum class EMarinerActivationTargetState : uint8
{
	Ready                                    = 0,
	Firing                                   = 1,
	Cooldown                                 = 2,
	EMarinerActivationTargetState_MAX        = 3,
};

// Enum Mariner.EMarinerFollowSplineDirection
// NumValues: 0x0003
enum class EMarinerFollowSplineDirection : uint8
{
	Forward                                  = 0,
	Backward                                 = 1,
	EMarinerFollowSplineDirection_MAX        = 2,
};

// Enum Mariner.EMarinerFollowSplineRotationSource
// NumValues: 0x0005
enum class EMarinerFollowSplineRotationSource : uint8
{
	Constant                                 = 0,
	OrientToVelocity                         = 1,
	OrientToSpline                           = 2,
	OrientToSplineBackwards                  = 3,
	EMarinerFollowSplineRotationSource_MAX   = 4,
};

// Enum Mariner.EMarinerMotionNotificationType
// NumValues: 0x0005
enum class EMarinerMotionNotificationType : uint8
{
	NoCollision                              = 0,
	NonDamageableCollision                   = 1,
	DamageableCollision                      = 2,
	Interrupt                                = 3,
	EMarinerMotionNotificationType_MAX       = 4,
};

// Enum Mariner.EMarinerItemSlot
// NumValues: 0x0004
enum class EMarinerItemSlot : uint8
{
	Default                                  = 0,
	Priority                                 = 1,
	Count                                    = 2,
	EMarinerItemSlot_MAX                     = 3,
};

// Enum Mariner.EWidgetAnimationState
// NumValues: 0x0007
enum class EWidgetAnimationState : uint8
{
	On                                       = 0,
	Off                                      = 1,
	AnimatingInDelay                         = 2,
	AnimatingIn                              = 3,
	AnimatingOut                             = 4,
	AnimatingOutDelay                        = 5,
	EWidgetAnimationState_MAX                = 6,
};

// Enum Mariner.EMarinerGameVersion
// NumValues: 0x0004
enum class EMarinerGameVersion : uint8
{
	Free                                     = 0,
	Standard                                 = 1,
	Mythic                                   = 2,
	EMarinerGameVersion_MAX                  = 3,
};

// Enum Mariner.EMangoPartyBusyState
// NumValues: 0x0006
enum class EMangoPartyBusyState : uint8
{
	None                                     = 0,
	Connecting                               = 1,
	Creating                                 = 2,
	Joining                                  = 3,
	Leaving                                  = 4,
	EMangoPartyBusyState_MAX                 = 5,
};

// Enum Mariner.EMangoNativePurchaseCompleteReason
// NumValues: 0x0006
enum class EMangoNativePurchaseCompleteReason : uint8
{
	Failed                                   = 0,
	Offline                                  = 1,
	OverlayDisabled                          = 2,
	CanceledByUser                           = 3,
	CompletedSuccessfully                    = 4,
	EMangoNativePurchaseCompleteReason_MAX   = 5,
};

// Enum Mariner.EArtifactEventTypes
// NumValues: 0x001D
enum class EArtifactEventTypes : uint8
{
	OnMatchStart                             = 0,
	OnRoundStart                             = 1,
	OnDamageDealt                            = 2,
	OnDamageReceived                         = 3,
	OnDirectDamageReceived                   = 4,
	OnAreaDamageReceived                     = 5,
	OnDirectDamageDealt                      = 6,
	OnAreaDamageDealt                        = 7,
	OnKnockoutDealt                          = 8,
	OnMegaBlastDealt                         = 9,
	OnReturnToArena                          = 10,
	OnRocketJump                             = 11,
	On2HitCombo                              = 12,
	On3HitCombo                              = 13,
	On4HitCombo                              = 14,
	On5HitCombo                              = 15,
	On6HitCombo                              = 16,
	On7HitCombo                              = 17,
	On8HitCombo                              = 18,
	On9HitCombo                              = 19,
	On10HitCombo                             = 20,
	OnEnteredMegablastDanger                 = 21,
	OnHealedToFull                           = 22,
	OnLongDistanceHit                        = 23,
	OnShortDistanceHit                       = 24,
	OnSpecialAbilityActivated                = 25,
	OnSpecialAbilityEnded                    = 26,
	OnItemUse                                = 27,
	EArtifactEventTypes_MAX                  = 28,
};

// Enum Mariner.EMarinerCardinalDirection
// NumValues: 0x0005
enum class EMarinerCardinalDirection : uint8
{
	EC_North                                 = 0,
	EC_South                                 = 1,
	EC_East                                  = 2,
	EC_West                                  = 3,
	EC_MAX                                   = 4,
};

// Enum Mariner.EMarinerFluxProjectileState
// NumValues: 0x0007
enum class EMarinerFluxProjectileState : uint8
{
	Default                                  = 0,
	Bouncing                                 = 1,
	Guiding                                  = 2,
	AutoHoming                               = 3,
	GuidedHoming                             = 4,
	Fetching                                 = 5,
	Max                                      = 6,
};

// Enum Mariner.EMarinerSpringArmMode
// NumValues: 0x0005
enum class EMarinerSpringArmMode : uint8
{
	Default                                  = 0,
	FreeCamera                               = 1,
	OrientBehindOwner                        = 2,
	LockSocketToTargetLocation               = 3,
	EMarinerSpringArmMode_MAX                = 4,
};

// Enum Mariner.EMarinerCameraPerspectiveType
// NumValues: 0x0003
enum class EMarinerCameraPerspectiveType : uint8
{
	FirstPerson                              = 0,
	ThirdPerson                              = 1,
	EMarinerCameraPerspectiveType_MAX        = 2,
};

// Enum Mariner.EMarinerCurrencyType
// NumValues: 0x0006
enum class EMarinerCurrencyType : uint8
{
	None                                     = 0,
	RocketFuel                               = 1,
	RocketParts                              = 2,
	BPXPBonusPersonal                        = 3,
	BPXPBonusParty                           = 4,
	EMarinerCurrencyType_MAX                 = 5,
};

// Enum Mariner.EPlayerInputType
// NumValues: 0x0006
enum class EPlayerInputType : uint8
{
	KeyboardMouse                            = 0,
	XboxGamepad                              = 1,
	PlaystationGamepad                       = 2,
	SwitchGamepad                            = 3,
	GenericGamepad                           = 4,
	EPlayerInputType_MAX                     = 5,
};

// Enum Mariner.ETeamToApplyTo
// NumValues: 0x0004
enum class ETeamToApplyTo : uint32
{
	OwningCharacterTeam                      = 0,
	OwningCharacterOppositeTeam              = 1,
	AllCharacters                            = 2,
	ETeamToApplyTo_MAX                       = 3,
};

// Enum Mariner.EMarinerAbilityMoveStartPolicy
// NumValues: 0x0004
enum class EMarinerAbilityMoveStartPolicy : uint8
{
	StartImmediately                         = 0,
	StartAfterSetTime                        = 1,
	StartManuallyOnEvent                     = 2,
	EMarinerAbilityMoveStartPolicy_MAX       = 3,
};

// Enum Mariner.EMarinerEnergyMode
// NumValues: 0x0005
enum class EMarinerEnergyMode : uint8
{
	Initial                                  = 0,
	Drain                                    = 1,
	WaitingToRecover                         = 2,
	Recovery                                 = 3,
	EMarinerEnergyMode_MAX                   = 4,
};

// Enum Mariner.EMarinerProjectileAbilityEndPolicy
// NumValues: 0x0004
enum class EMarinerProjectileAbilityEndPolicy : uint8
{
	AbilityLifetimeIsProjectileLifetime      = 0,
	EndAbilityOnFinishProjectileSpawning     = 1,
	EndAbilityManually                       = 2,
	EMarinerProjectileAbilityEndPolicy_MAX   = 3,
};

// Enum Mariner.EMarinerProjectileAbilitySpawnPolicy
// NumValues: 0x0005
enum class EMarinerProjectileAbilitySpawnPolicy : uint8
{
	SpawnImmediately                         = 0,
	SpawnDelayed                             = 1,
	SpawnManually                            = 2,
	SpawnOnRelease                           = 3,
	EMarinerProjectileAbilitySpawnPolicy_MAX = 4,
};

// Enum Mariner.EMarinerSpreadState
// NumValues: 0x0004
enum class EMarinerSpreadState : uint8
{
	Idle                                     = 0,
	Expanding                                = 1,
	Recovering                               = 2,
	MAX                                      = 3,
};

// Enum Mariner.EMarinerCallbackTriggerPolicy
// NumValues: 0x0004
enum class EMarinerCallbackTriggerPolicy : uint8
{
	InputPressed                             = 0,
	InputReleased                            = 1,
	AnyInput                                 = 2,
	EMarinerCallbackTriggerPolicy_MAX        = 3,
};

// Enum Mariner.EMarinerAbilityToggleMethod
// NumValues: 0x0004
enum class EMarinerAbilityToggleMethod : uint8
{
	PressButtonAgainToEnd                    = 0,
	ReleaseButtonToEnd                       = 1,
	PressAgainIfTap_ReleaseIfHold            = 2,
	EMarinerAbilityToggleMethod_MAX          = 3,
};

// Enum Mariner.eHUDBarIconState
// NumValues: 0x0005
enum class EHUDBarIconState : uint8
{
	Idle                                     = 0,
	Active                                   = 1,
	Cooldown                                 = 2,
	Stunned                                  = 3,
	EHUDBarIconState_MAX                     = 4,
};

// Enum Mariner.EMarinerHudAbilityIconType
// NumValues: 0x0003
enum class EMarinerHudAbilityIconType : uint8
{
	NewAbility                               = 0,
	NewWeapon                                = 1,
	EMarinerHudAbilityIconType_MAX           = 2,
};

// Enum Mariner.EMarinerAchievement
// NumValues: 0x0028
enum class EMarinerAchievement : uint8
{
	HighestLevel                             = 0,
	CharactersWithHighLevel                  = 1,
	ArtifactMasteryLevel                     = 2,
	KO                                       = 3,
	KOAssist                                 = 4,
	Recovery                                 = 5,
	Megablast                                = 6,
	Goals                                    = 7,
	ZoneTime                                 = 8,
	CoinsCollected                           = 9,
	Wins                                     = 10,
	AmphoraWins                              = 11,
	BlastbeardWins                           = 12,
	BooneWins                                = 13,
	IzelWins                                 = 14,
	JaytoWins                                = 15,
	KayiWins                                 = 16,
	MysteenWins                              = 17,
	PlinkWins                                = 18,
	RevWins                                  = 19,
	TopnotchWins                             = 20,
	AmphoraKO                                = 21,
	BlastbeardKO                             = 22,
	BooneKO                                  = 23,
	IzelKO                                   = 24,
	JaytoKO                                  = 25,
	KayiKO                                   = 26,
	MysteenKO                                = 27,
	PlinkKO                                  = 28,
	RevKO                                    = 29,
	TopnotchKO                               = 30,
	CustomizedTotem                          = 31,
	EquippedOutfit                           = 32,
	EquippedTrail                            = 33,
	DailyChallenge                           = 34,
	WeeklyChallenge                          = 35,
	OnboardingCompleted                      = 36,
	Count                                    = 37,
	Invalid                                  = 255,
	EMarinerAchievement_MAX                  = 256,
};

// Enum Mariner.EMarinerBotState
// NumValues: 0x0008
enum class EMarinerBotState : uint8
{
	Uninitialized                            = 0,
	FindingEnemy                             = 1,
	FightingEnemy                            = 2,
	Recovering                               = 3,
	Prototype_1                              = 4,
	Prototype_2                              = 5,
	Prototype_3                              = 6,
	EMarinerBotState_MAX                     = 7,
};

// Enum Mariner.EMarinerRocketballThrowResolution
// NumValues: 0x0006
enum class EMarinerRocketballThrowResolution : uint8
{
	RedirectedByImpulse                      = 0,
	Pass                                     = 1,
	Interception                             = 2,
	Unaffected                               = 3,
	Unknown                                  = 4,
	EMarinerRocketballThrowResolution_MAX    = 5,
};

// Enum Mariner.EMarinerAnimInstanceState
// NumValues: 0x0007
enum class EMarinerAnimInstanceState : uint8
{
	MainMenuCharacterSelect                  = 0,
	Pregame                                  = 1,
	Postgame                                 = 2,
	ChatEmotePreview                         = 3,
	VictoryPreview                           = 4,
	ReadyExpressionPreview                   = 5,
	EMarinerAnimInstanceState_MAX            = 6,
};

// Enum Mariner.EAnimNotifyCharacterEventType
// NumValues: 0x0003
enum class EAnimNotifyCharacterEventType : uint8
{
	PrimaryKey                               = 0,
	SecondaryKey                             = 1,
	EAnimNotifyCharacterEventType_MAX        = 2,
};

// Enum Mariner.EArenaBoundaryBlockedArea
// NumValues: 0x0003
enum class EArenaBoundaryBlockedArea : uint8
{
	OutsideBounds                            = 0,
	InsideBounds                             = 1,
	EArenaBoundaryBlockedArea_MAX            = 2,
};

// Enum Mariner.EArenaBoundaryType
// NumValues: 0x0003
enum class EArenaBoundaryType : uint8
{
	Safe                                     = 0,
	Knockout                                 = 1,
	EArenaBoundaryType_MAX                   = 2,
};

// Enum Mariner.EMarinerArenaReturnTargetFlags
// NumValues: 0x0003
enum class EMarinerArenaReturnTargetFlags : uint8
{
	Reject                                   = 0,
	Prioritize                               = 1,
	EMarinerArenaReturnTargetFlags_MAX       = 2,
};

// Enum Mariner.EMarinerArenaReturnZoneFlags
// NumValues: 0x0005
enum class EMarinerArenaReturnZoneFlags : uint8
{
	Team0_Reject                             = 0,
	Team1_Reject                             = 1,
	Team0_Prioritize                         = 2,
	Team1_Prioritize                         = 3,
	EMarinerArenaReturnZoneFlags_MAX         = 4,
};

// Enum Mariner.EArtifactImageWidgetType
// NumValues: 0x0005
enum class EArtifactImageWidgetType : uint8
{
	Image                                    = 0,
	ImageWithArtifactLevel                   = 1,
	ImageRanked                              = 2,
	ImageEmpty                               = 3,
	EArtifactImageWidgetType_MAX             = 4,
};

// Enum Mariner.EMarinerArtifactGameplayEffectType
// NumValues: 0x0006
enum class EMarinerArtifactGameplayEffectType : uint8
{
	Invalid                                  = 0,
	Utility                                  = 1,
	Offensive                                = 2,
	Defensive                                = 3,
	Mobility                                 = 4,
	EMarinerArtifactGameplayEffectType_MAX   = 5,
};

// Enum Mariner.EMarinerOnboardingStates
// NumValues: 0x000B
enum class EMarinerOnboardingStates : uint8
{
	Init                                     = 0,
	IntroLevel                               = 1,
	SplashPopup                              = 2,
	OnboardingPlaylist                       = 3,
	SocialUnlockedPopup                      = 4,
	PlaySocialUnlockAnimation                = 5,
	SocialPlaylists                          = 6,
	RankedUnlockedPopup                      = 7,
	PlayRankedUnlockAnimation                = 8,
	Count                                    = 9,
	EMarinerOnboardingStates_MAX             = 10,
};

// Enum Mariner.EAvatarType
// NumValues: 0x0007
enum class EAvatarType : uint8
{
	MangoAvatar                              = 0,
	ProfileAvatar                            = 1,
	PartyAvatar                              = 2,
	PlatformAvatar                           = 3,
	RequestAvatar                            = 4,
	PrivateMatchAvatar                       = 5,
	EAvatarType_MAX                          = 6,
};

// Enum Mariner.EPinState
// NumValues: 0x0006
enum class EPinState : uint8
{
	Spawning                                 = 0,
	Live                                     = 1,
	Stale                                    = 2,
	Dormant                                  = 3,
	Dead                                     = 4,
	EPinState_MAX                            = 5,
};

// Enum Mariner.EVisibilityPolicy
// NumValues: 0x0005
enum class EVisibilityPolicy : uint8
{
	DoNotRender                              = 0,
	RenderIfInLineOfSight                    = 1,
	RenderIfNotInLineOfSight                 = 2,
	AlwaysRender                             = 3,
	EVisibilityPolicy_MAX                    = 4,
};

// Enum Mariner.EBotDifficultyLevel
// NumValues: 0x0006
enum class EBotDifficultyLevel : uint8
{
	Easy                                     = 0,
	Normal                                   = 1,
	Hard                                     = 2,
	Extreme                                  = 3,
	Undefined                                = 4,
	EBotDifficultyLevel_MAX                  = 5,
};

// Enum Mariner.EMarinerChangeMaterialFlags
// NumValues: 0x0005
enum class EMarinerChangeMaterialFlags : uint8
{
	Character1P                              = 0,
	Character3P                              = 1,
	HeldItem                                 = 2,
	PriorityItem                             = 3,
	Max                                      = 4,
};

// Enum Mariner.EMarinerChangeMeshEnum
// NumValues: 0x0003
enum class EMarinerChangeMeshEnum : uint8
{
	Character1P                              = 0,
	Character3P                              = 1,
	Max                                      = 2,
};

// Enum Mariner.EMarinerCharacterDifficulty
// NumValues: 0x0004
enum class EMarinerCharacterDifficulty : uint8
{
	Easy                                     = 0,
	Moderate                                 = 1,
	Hard                                     = 2,
	EMarinerCharacterDifficulty_MAX          = 3,
};

// Enum Mariner.EMarinerCharacterAnimListenerContext
// NumValues: 0x0004
enum class EMarinerCharacterAnimListenerContext : uint8
{
	FirstAndThirdPerson                      = 0,
	FirstPerson                              = 1,
	ThirdPerson                              = 2,
	EMarinerCharacterAnimListenerContext_MAX = 3,
};

// Enum Mariner.EMarinerPlayerLaunchedTrailState
// NumValues: 0x0003
enum class EMarinerPlayerLaunchedTrailState : uint8
{
	Active                                   = 0,
	MegaBlast                                = 1,
	EMarinerPlayerLaunchedTrailState_MAX     = 2,
};

// Enum Mariner.EMarinerKnockoutTypeFlags
// NumValues: 0x0003
enum class EMarinerKnockoutTypeFlags : uint8
{
	Megablast                                = 0,
	NonMegablast                             = 1,
	EMarinerKnockoutTypeFlags_MAX            = 2,
};

// Enum Mariner.EMarinerCharacterFoot
// NumValues: 0x0003
enum class EMarinerCharacterFoot : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	EMarinerCharacterFoot_MAX                = 2,
};

// Enum Mariner.EMarinerCharacterLaunchContext
// NumValues: 0x0007
enum class EMarinerCharacterLaunchContext : uint8
{
	IsOverride                               = 0,
	IsMegablast                              = 1,
	IsHostile                                = 2,
	IsSelfInflicted                          = 3,
	IsRedirect                               = 4,
	HitStunnedAtLaunchTime                   = 5,
	MAX                                      = 6,
};

// Enum Mariner.EMarinerCharacterLockState
// NumValues: 0x0005
enum class EMarinerCharacterLockState : uint8
{
	ForceEnabled                             = 0,
	RequiredInInventory                      = 1,
	ForceDisabled                            = 2,
	FreeRotation                             = 3,
	EMarinerCharacterLockState_MAX           = 4,
};

// Enum Mariner.EMarinerPendingToggleState
// NumValues: 0x0004
enum class EMarinerPendingToggleState : uint8
{
	PendingActive                            = 0,
	PendingInactive                          = 1,
	Neutral                                  = 2,
	EMarinerPendingToggleState_MAX           = 3,
};

// Enum Mariner.EMarinerMegablastDirection
// NumValues: 0x0006
enum class EMarinerMegablastDirection : uint8
{
	Central                                  = 0,
	NudgeUp                                  = 1,
	NudgeLeft                                = 2,
	NudgeRight                               = 3,
	NudgeDown                                = 4,
	MAX                                      = 5,
};

// Enum Mariner.EMarinerCharacterFallbackReturnState
// NumValues: 0x0005
enum class EMarinerCharacterFallbackReturnState : uint8
{
	None                                     = 0,
	WaitingForLaunchpadToClear               = 1,
	WaitingToTeleportToLaunchpad             = 2,
	CountingDownToBlastoff                   = 3,
	EMarinerCharacterFallbackReturnState_MAX = 4,
};

// Enum Mariner.EMarinerTraversalDirection
// NumValues: 0x0006
enum class EMarinerTraversalDirection : uint8
{
	LeftOption                               = 0,
	UpOption                                 = 1,
	RightOption                              = 2,
	BottomOption                             = 3,
	Count                                    = 4,
	EMarinerTraversalDirection_MAX           = 5,
};

// Enum Mariner.EMarinerTrophyType
// NumValues: 0x0004
enum class EMarinerTrophyType : uint8
{
	PlayerTrophy                             = 0,
	RocketTrophy                             = 1,
	OtherCollectible                         = 2,
	EMarinerTrophyType_MAX                   = 3,
};

// Enum Mariner.EPlayerTrophyBounceDirectionMode
// NumValues: 0x000A
enum class EPlayerTrophyBounceDirectionMode : uint8
{
	DamageDirection                          = 0,
	OppositeDamageDirection                  = 1,
	PlayerMovementDirection                  = 2,
	OppositePlayerMovementDirection          = 3,
	DamageImpactNormalDirection              = 4,
	OppositeImpactNormalDirection            = 5,
	RandomDirection                          = 6,
	Random                                   = 7,
	Count                                    = 8,
	EPlayerTrophyBounceDirectionMode_MAX     = 9,
};

// Enum Mariner.EMarinerContentGridType
// NumValues: 0x0005
enum class EMarinerContentGridType : uint8
{
	Items                                    = 0,
	OwnedCharacters                          = 1,
	OnRotationCharacters                     = 2,
	UnownedCharacters                        = 3,
	EMarinerContentGridType_MAX              = 4,
};

// Enum Mariner.EMarinerBlastableLevel
// NumValues: 0x0005
enum class EMarinerBlastableLevel : uint8
{
	Untouched                                = 0,
	Normal                                   = 1,
	Danger                                   = 2,
	Megablast                                = 3,
	EMarinerBlastableLevel_MAX               = 4,
};

// Enum Mariner.EMarinerEnabledCharacterFilter
// NumValues: 0x0005
enum class EMarinerEnabledCharacterFilter : uint8
{
	All                                      = 0,
	CharacterClassesOnly                     = 1,
	E3_18Only                                = 2,
	BetaOnly                                 = 3,
	EMarinerEnabledCharacterFilter_MAX       = 4,
};

// Enum Mariner.EMarinerExplosionVisibilityRule
// NumValues: 0x0004
enum class EMarinerExplosionVisibilityRule : uint8
{
	AlawysVisible                            = 0,
	VisibleOnlyOnDirectHit                   = 1,
	VisibleOnlyOnIndirectHit                 = 2,
	EMarinerExplosionVisibilityRule_MAX      = 3,
};

// Enum Mariner.EFastCollisionPrimitiveType
// NumValues: 0x0005
enum class EFastCollisionPrimitiveType : uint8
{
	Sphere                                   = 0,
	Capsule                                  = 1,
	Box                                      = 2,
	Invalid                                  = 3,
	EFastCollisionPrimitiveType_MAX          = 4,
};

// Enum Mariner.EMarinerFastCollisionCollectionFlags
// NumValues: 0x000B
enum class EMarinerFastCollisionCollectionFlags : uint8
{
	None                                     = 0,
	PlayerDynamics                           = 1,
	Projectiles                              = 2,
	Characters                               = 4,
	Items                                    = 8,
	LevelDynamics                            = 16,
	NonItemPickups                           = 32,
	CustomCategory0                          = 64,
	CustomCategory1                          = 128,
	All                                      = 255,
	EMarinerFastCollisionCollectionFlags_MAX = 256,
};

// Enum Mariner.EMarinerFollowSplineClientCorrectionPacing
// NumValues: 0x0004
enum class EMarinerFollowSplineClientCorrectionPacing : uint8
{
	KeepingPace                              = 0,
	FallingBehind                            = 1,
	TooFarAhead                              = 2,
	EMarinerFollowSplineClientCorrectionPacing_MAX = 3,
};

// Enum Mariner.EMarinerParticleSystemDetailLevel
// NumValues: 0x0005
enum class EMarinerParticleSystemDetailLevel : uint8
{
	None                                     = 0,
	NoStageEffects                           = 1,
	Low                                      = 2,
	Normal                                   = 3,
	EMarinerParticleSystemDetailLevel_MAX    = 4,
};

// Enum Mariner.EMarinerMatchTerminationPolicy
// NumValues: 0x0004
enum class EMarinerMatchTerminationPolicy : uint8
{
	AfterAnyLeaver                           = 0,
	OnlyOneTeamRemains                       = 1,
	NoMoreHumans                             = 2,
	EMarinerMatchTerminationPolicy_MAX       = 3,
};

// Enum Mariner.EMarinerGameMode
// NumValues: 0x000E
enum class EMarinerGameMode : uint8
{
	Unknown                                  = 0,
	Knockout                                 = 1,
	TDM                                      = 2,
	MegaRocket                               = 3,
	Rocketball                               = 4,
	RocketbotAttack                          = 5,
	TrialsBombToss                           = 6,
	TrialsDodge                              = 7,
	TrialsGameMode                           = 8,
	TrialsPlatforming                        = 9,
	TrialsRocketJump                         = 10,
	TrophyHunt                               = 11,
	TrialsTargetPractice                     = 12,
	EMarinerGameMode_MAX                     = 13,
};

// Enum Mariner.EMarinerAimData_Flags
// NumValues: 0x0009
enum class EMarinerAimData_Flags : uint8
{
	FLAG_AimOrigin                           = 0,
	FLAG_AimDirection                        = 1,
	FLAG_InputVector                         = 2,
	FLAG_CustomFloat                         = 3,
	FLAG_CustomInt                           = 4,
	FLAG_CustomVectorNormal                  = 5,
	FLAG_CustomVectorQuantized               = 6,
	FLAG_Reserved0                           = 7,
	FLAG_MAX                                 = 8,
};

// Enum Mariner.EMarinerGameplayCueEffectOrientation
// NumValues: 0x0004
enum class EMarinerGameplayCueEffectOrientation : uint8
{
	Default                                  = 0,
	OrientZToNormal                          = 1,
	OrientToTarget                           = 2,
	EMarinerGameplayCueEffectOrientation_MAX = 3,
};

// Enum Mariner.EMarinerTelemetryType
// NumValues: 0x0005
enum class EMarinerTelemetryType : uint8
{
	Rocketball                               = 0,
	ZoneCapture                              = 1,
	Knockout                                 = 2,
	None                                     = 3,
	EMarinerTelemetryType_MAX                = 4,
};

// Enum Mariner.EMarinerRocketballGoalType
// NumValues: 0x0004
enum class EMarinerRocketballGoalType : uint8
{
	Throw                                    = 0,
	WalkIn                                   = 1,
	Unknown                                  = 2,
	EMarinerRocketballGoalType_MAX           = 3,
};

// Enum Mariner.EMarinerRocketballResetType
// NumValues: 0x0004
enum class EMarinerRocketballResetType : uint8
{
	Timeout                                  = 0,
	OutOfBounds                              = 1,
	Unknown                                  = 2,
	EMarinerRocketballResetType_MAX          = 3,
};

// Enum Mariner.EMarinerKnockoutAnalyticEntries
// NumValues: 0x0003
enum class EMarinerKnockoutAnalyticEntries : uint8
{
	OnAnyTeamOnePlayerWithBadgesRemaining    = 0,
	OnAnyTeamOneBadgeRemaining               = 1,
	EMarinerKnockoutAnalyticEntries_MAX      = 2,
};

// Enum Mariner.EExecutionPins
// NumValues: 0x0003
enum class EExecutionPins : uint8
{
	Valid                                    = 0,
	Invalid                                  = 1,
	EExecutionPins_MAX                       = 2,
};

// Enum Mariner.EMarinerGrapplingHookAttachMode
// NumValues: 0x0005
enum class EMarinerGrapplingHookAttachMode : uint8
{
	Unattached                               = 0,
	AttachedToCharacter                      = 1,
	AttachedToComponent                      = 2,
	Count                                    = 3,
	EMarinerGrapplingHookAttachMode_MAX      = 4,
};

// Enum Mariner.EMarinerHostility
// NumValues: 0x0005
enum class EMarinerHostility : uint8
{
	Friendly                                 = 0,
	Neutral                                  = 1,
	Hostile                                  = 2,
	Unknown                                  = 3,
	Max                                      = 4,
};

// Enum Mariner.EMarinerInputActions
// NumValues: 0x0036
enum class EMarinerInputActions : uint8
{
	None                                     = 0,
	MoveForward                              = 1,
	MoveBackward                             = 2,
	MoveLeft                                 = 3,
	MoveRight                                = 4,
	Fire                                     = 5,
	FireByAxis                               = 6,
	AltFire                                  = 7,
	AltFireByAxis                            = 8,
	SpecialAbility                           = 9,
	Jump                                     = 10,
	Reload                                   = 11,
	UseItem                                  = 12,
	ThrowBall                                = 13,
	Dodge                                    = 14,
	Options                                  = 15,
	ChatWheelLeft                            = 16,
	ChatWheelUp                              = 17,
	ChatWheelRight                           = 18,
	ChatWheelDown                            = 19,
	PushToTalk                               = 20,
	EdgeAssist                               = 21,
	Scoreboard                               = 22,
	Ascend                                   = 23,
	Descend                                  = 24,
	TextToSpeech                             = 25,
	MenuUp                                   = 26,
	MenuDown                                 = 27,
	MenuLeft                                 = 28,
	MenuRight                                = 29,
	MenuAltUp                                = 30,
	MenuAltDown                              = 31,
	MenuAltLeft                              = 32,
	MenuAltRight                             = 33,
	MenuL1                                   = 34,
	MenuL2                                   = 35,
	MenuL3                                   = 36,
	MenuR1                                   = 37,
	MenuR2                                   = 38,
	MenuR3                                   = 39,
	MenuConfirm                              = 40,
	MenuCancel                               = 41,
	MenuSecondary                            = 42,
	MenuTertiary                             = 43,
	MenuStart                                = 44,
	MenuBack                                 = 45,
	DPadNeutral                              = 46,
	MenuLSHorizontal                         = 47,
	MenuLSVertical                           = 48,
	MenuRSHorizontal                         = 49,
	MenuRSVertical                           = 50,
	SkipMovie                                = 51,
	Count                                    = 52,
	EMarinerInputActions_MAX                 = 53,
};

// Enum Mariner.EMarinerKeyboardKeySize
// NumValues: 0x0004
enum class EMarinerKeyboardKeySize : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Large                                    = 2,
	EMarinerKeyboardKeySize_MAX              = 3,
};

// Enum Mariner.EInputMode
// NumValues: 0x0005
enum class EInputMode : uint8
{
	None                                     = 0,
	GameAndUI                                = 1,
	GameOnly                                 = 2,
	UIOnly                                   = 3,
	EInputMode_MAX                           = 4,
};

// Enum Mariner.EMarinerItemThrowingRule
// NumValues: 0x0005
enum class EMarinerItemThrowingRule : uint8
{
	CannotBeThrownOrDropped                  = 0,
	DroppingAllowed                          = 1,
	ThrowingAllowed                          = 2,
	ThrowingAndPassingAllowed                = 3,
	EMarinerItemThrowingRule_MAX             = 4,
};

// Enum Mariner.EMarinerItemOutliningPolicy
// NumValues: 0x0004
enum class EMarinerItemOutliningPolicy : uint8
{
	Always                                   = 0,
	OnlyWhenNotCarried                       = 1,
	Never                                    = 2,
	EMarinerItemOutliningPolicy_MAX          = 3,
};

// Enum Mariner.EMarinerItemCarryVisibility
// NumValues: 0x0005
enum class EMarinerItemCarryVisibility : uint8
{
	Always                                   = 0,
	FirstPersonOnly                          = 1,
	ThirdPersonOnly                          = 2,
	Hidden                                   = 3,
	EMarinerItemCarryVisibility_MAX          = 4,
};

// Enum Mariner.EMarinerItemThrowState
// NumValues: 0x0004
enum class EMarinerItemThrowState : uint8
{
	NotInitiated                             = 0,
	Thrown                                   = 1,
	Released                                 = 2,
	EMarinerItemThrowState_MAX               = 3,
};

// Enum Mariner.EMarinerItemInteractionDashType
// NumValues: 0x0003
enum class EMarinerItemInteractionDashType : uint8
{
	DashToPickUp                             = 0,
	DashToSteal                              = 1,
	EMarinerItemInteractionDashType_MAX      = 2,
};

// Enum Mariner.EMarinerUIItemSize
// NumValues: 0x0004
enum class EMarinerUIItemSize : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Large                                    = 2,
	MAX                                      = 3,
};

// Enum Mariner.EMarinerLawnDartState
// NumValues: 0x000C
enum class EMarinerLawnDartState : uint8
{
	Entry                                    = 0,
	Landed                                   = 1,
	LandedAndWaitingToFire                   = 2,
	OpenHatch                                = 3,
	OpenHatchAndWaitingToFire                = 4,
	FireMissiles                             = 5,
	CloseHatch                               = 6,
	PrepareForTakeOff                        = 7,
	TakeOff                                  = 8,
	Exit                                     = 9,
	None                                     = 10,
	EMarinerLawnDartState_MAX                = 11,
};

// Enum Mariner.EButtonContentState
// NumValues: 0x0007
enum class EButtonContentState : uint8
{
	Normal                                   = 0,
	Locked                                   = 1,
	Equipped                                 = 2,
	Custom1                                  = 3,
	Custom2                                  = 4,
	Custom3                                  = 5,
	EButtonContentState_MAX                  = 6,
};

// Enum Mariner.EButtonInputState
// NumValues: 0x0004
enum class EButtonInputState : uint8
{
	Idle                                     = 0,
	Hovered                                  = 1,
	Pressed                                  = 2,
	EButtonInputState_MAX                    = 3,
};

// Enum Mariner.EMarinerMessageStyle
// NumValues: 0x0007
enum class EMarinerMessageStyle : uint8
{
	TwoPlayerEvent                           = 0,
	TwoPlayerEventWithIcon                   = 1,
	OnePlayerEvent                           = 2,
	OnePlayerEventWithIconAndText            = 3,
	IconAndText                              = 4,
	TextOnly                                 = 5,
	EMarinerMessageStyle_MAX                 = 6,
};

// Enum Mariner.EMarinerBroadcastByPlayerRule
// NumValues: 0x0004
enum class EMarinerBroadcastByPlayerRule : uint8
{
	CannotBeBroadcastByPlayer                = 0,
	PlayerCanBroadcastToAllies               = 1,
	PlayerCanBroadcastToAll                  = 2,
	EMarinerBroadcastByPlayerRule_MAX        = 3,
};

// Enum Mariner.EMarinerMatSwapInterrupt
// NumValues: 0x0004
enum class EMarinerMatSwapInterrupt : uint8
{
	ItemThrown                               = 0,
	ItemDropped                              = 1,
	ItemCaught                               = 2,
	Max                                      = 3,
};

// Enum Mariner.EMarinerMatSwapState
// NumValues: 0x0005
enum class EMarinerMatSwapState : uint8
{
	NotStarted                               = 0,
	PreSwap                                  = 1,
	Swapped                                  = 2,
	Finished                                 = 3,
	EMarinerMatSwapState_MAX                 = 4,
};

// Enum Mariner.EMarinerMegaBlastDirectorType
// NumValues: 0x0003
enum class EMarinerMegaBlastDirectorType : uint8
{
	Point                                    = 0,
	Direction                                = 1,
	MAX                                      = 2,
};

// Enum Mariner.EMarinerMegaBlastDirectorVolumeShape
// NumValues: 0x0004
enum class EMarinerMegaBlastDirectorVolumeShape : uint8
{
	Box                                      = 0,
	Capsule                                  = 1,
	Sphere                                   = 2,
	MAX                                      = 3,
};

// Enum Mariner.EMarinerMenuStackEmptyBehavior
// NumValues: 0x0005
enum class EMarinerMenuStackEmptyBehavior : uint8
{
	AllowEmptyStacks                         = 0,
	DeactivateStackManager                   = 1,
	DisableEmptyStacks                       = 2,
	SwitchToHomeStack                        = 3,
	EMarinerMenuStackEmptyBehavior_MAX       = 4,
};

// Enum Mariner.EMarinerMessageBoxLifetime
// NumValues: 0x0005
enum class EMarinerMessageBoxLifetime : uint8
{
	CurrentWorld                             = 0,
	MainMenu                                 = 1,
	MainMenuAndStartMenu                     = 2,
	Persistent                               = 3,
	EMarinerMessageBoxLifetime_MAX           = 4,
};

// Enum Mariner.EMarinerMessageBoxPriority
// NumValues: 0x0005
enum class EMarinerMessageBoxPriority : uint8
{
	LowestPriority                           = 0,
	LowPriority                              = 1,
	MediumPriority                           = 2,
	HighPriority                             = 3,
	EMarinerMessageBoxPriority_MAX           = 4,
};

// Enum Mariner.EMarinerModeSupportFlags
// NumValues: 0x0004
enum class EMarinerModeSupportFlags : uint8
{
	SupportsBots                             = 0,
	SupportsTeams                            = 1,
	HostCanEditBots                          = 2,
	Max                                      = 3,
};

// Enum Mariner.EMarinerTeleportRequestResponse
// NumValues: 0x0005
enum class EMarinerTeleportRequestResponse : uint8
{
	Accepted                                 = 0,
	Rejected_Null                            = 1,
	Rejected_TargetHasPriorityItem           = 2,
	Rejected_NoLocationGiven                 = 3,
	EMarinerTeleportRequestResponse_MAX      = 4,
};

// Enum Mariner.EMarinerTargetCharacterOffsetType
// NumValues: 0x0005
enum class EMarinerTargetCharacterOffsetType : uint8
{
	None                                     = 0,
	Center                                   = 1,
	Top                                      = 2,
	Bottom                                   = 4,
	MAX                                      = 8,
};

// Enum Mariner.EMarinerPickupState
// NumValues: 0x0004
enum class EMarinerPickupState : uint8
{
	Active                                   = 0,
	ActiveAndFading                          = 1,
	NotActive                                = 2,
	EMarinerPickupState_MAX                  = 3,
};

// Enum Mariner.EMarinerSpecialDamageQualifier
// NumValues: 0x0003
enum class EMarinerSpecialDamageQualifier : uint8
{
	IsAOEDamage                              = 0,
	IsMegablast                              = 1,
	EMarinerSpecialDamageQualifier_MAX       = 2,
};

// Enum Mariner.EMarinerOnboardingPlaylistState
// NumValues: 0x0006
enum class EMarinerOnboardingPlaylistState : uint8
{
	AllLocked                                = 0,
	PrepareSocialUnlock                      = 1,
	RankedLocked                             = 2,
	PrepareRankedUnlock                      = 3,
	AllUnlocked                              = 4,
	EMarinerOnboardingPlaylistState_MAX      = 5,
};

// Enum Mariner.EMarinerPlaylistType
// NumValues: 0x0004
enum class EMarinerPlaylistType : uint8
{
	Social                                   = 0,
	Ranked                                   = 1,
	Count                                    = 2,
	EMarinerPlaylistType_MAX                 = 3,
};

// Enum Mariner.EMarinerProgressionRewardPreviewType
// NumValues: 0x0002
enum class EMarinerProgressionRewardPreviewType : uint8
{
	Character                                = 0,
	EMarinerProgressionRewardPreviewType_MAX = 1,
};

// Enum Mariner.EMarinerMuzzleFlashPredictionBehavior
// NumValues: 0x0003
enum class EMarinerMuzzleFlashPredictionBehavior : uint8
{
	AttemptToConsumeFallbackToProduce        = 0,
	None                                     = 1,
	EMarinerMuzzleFlashPredictionBehavior_MAX = 2,
};

// Enum Mariner.EMarinerProjectileImpulseBatchingType
// NumValues: 0x0003
enum class EMarinerProjectileImpulseBatchingType : uint8
{
	AlliedImpulse                            = 0,
	HostileImpulse                           = 1,
	EMarinerProjectileImpulseBatchingType_MAX = 2,
};

// Enum Mariner.EMarinerHomingPolicy
// NumValues: 0x0004
enum class EMarinerHomingPolicy : uint8
{
	PointBasedHoming                         = 0,
	LineBasedHoming                          = 1,
	DirectionBasedHoming                     = 2,
	EMarinerHomingPolicy_MAX                 = 3,
};

// Enum Mariner.EMarinerSpreadType
// NumValues: 0x0009
enum class EMarinerSpreadType : uint8
{
	None                                     = 0,
	Circle                                   = 1,
	Arc                                      = 2,
	Fan                                      = 3,
	Spiral                                   = 4,
	Spokes                                   = 5,
	Sockets                                  = 6,
	RandomCone                               = 7,
	EMarinerSpreadType_MAX                   = 8,
};

// Enum Mariner.EMarinerMultiShotFiringOrder
// NumValues: 0x0004
enum class EMarinerMultiShotFiringOrder : uint8
{
	Normal                                   = 0,
	Reverse                                  = 1,
	Random                                   = 2,
	EMarinerMultiShotFiringOrder_MAX         = 3,
};

// Enum Mariner.EMarinerPromptInputDisplay
// NumValues: 0x0004
enum class EMarinerPromptInputDisplay : uint8
{
	ActiveInputDevice                        = 0,
	AlwaysShowGamepad                        = 1,
	AlwaysShowKBM                            = 2,
	EMarinerPromptInputDisplay_MAX           = 3,
};

// Enum Mariner.EMarinerLerpToSpeedRootMotionPolicy
// NumValues: 0x0004
enum class EMarinerLerpToSpeedRootMotionPolicy : uint8
{
	LerpTowardsTarget                        = 0,
	LerpTowardsTargetMax                     = 1,
	LerpTowardsTargetMin                     = 2,
	EMarinerLerpToSpeedRootMotionPolicy_MAX  = 3,
};

// Enum Mariner.EStopAllMomentumDeactivationMode
// NumValues: 0x0003
enum class EStopAllMomentumDeactivationMode : uint8
{
	AutoDeactivateAfterOneApplication        = 0,
	DeactivateUsingDurationTimeOutRules      = 1,
	EStopAllMomentumDeactivationMode_MAX     = 2,
};

// Enum Mariner.EMarinerSpawnPointMode
// NumValues: 0x0003
enum class EMarinerSpawnPointMode : uint8
{
	ChangePerShot                            = 0,
	ChangePerTargetLocation                  = 1,
	EMarinerSpawnPointMode_MAX               = 2,
};

// Enum Mariner.EMarinerAimAssistState
// NumValues: 0x0003
enum class EMarinerAimAssistState : uint8
{
	Normal                                   = 0,
	Legacy                                   = 1,
	EMarinerAimAssistState_MAX               = 2,
};

// Enum Mariner.EMarinerCrossplayState
// NumValues: 0x0005
enum class EMarinerCrossplayState : uint8
{
	Off                                      = 0,
	On                                       = 1,
	ConsoleOnly                              = 2,
	PCOnly                                   = 3,
	EMarinerCrossplayState_MAX               = 4,
};

// Enum Mariner.EMarinerSocialRequestsWidgetType
// NumValues: 0x0005
enum class EMarinerSocialRequestsWidgetType : uint8
{
	FriendRequestsIn                         = 0,
	FriendRequestsOut                        = 1,
	PartyRequestsIn                          = 2,
	PartyRequestsOut                         = 3,
	EMarinerSocialRequestsWidgetType_MAX     = 4,
};

// Enum Mariner.ESocialWidgetType
// NumValues: 0x0008
enum class ESocialWidgetType : uint8
{
	MangoUser                                = 0,
	OnlineUser                               = 1,
	SearchRequest                            = 2,
	MangoUserRequestIn                       = 3,
	OnlineUserFriendRequestIn                = 4,
	MangoUserRequestOut                      = 5,
	OnlineUserFriendRequestOut               = 6,
	ESocialWidgetType_MAX                    = 7,
};

// Enum Mariner.EMarinerSpawnSocketSource
// NumValues: 0x0003
enum class EMarinerSpawnSocketSource : uint8
{
	UsingWeaponSocket                        = 0,
	UsingCharacterSocket                     = 1,
	EMarinerSpawnSocketSource_MAX            = 2,
};

// Enum Mariner.EMarinerSpikeTrapMovementState
// NumValues: 0x0005
enum class EMarinerSpikeTrapMovementState : uint8
{
	IDLE_IN_TOP                              = 0,
	IDLE_IN_DOWN                             = 1,
	MOVING_TO_TOP                            = 2,
	MOVING_TO_DOWN                           = 3,
	EMarinerSpikeTrapMovementState_MAX       = 4,
};

// Enum Mariner.EMarinerDamagedWhileFollowingSplineResponse
// NumValues: 0x0005
enum class EMarinerDamagedWhileFollowingSplineResponse : uint8
{
	Ignore                                   = 0,
	StopMoving                               = 1,
	ReverseDirection                         = 2,
	TurnPhysical                             = 3,
	EMarinerDamagedWhileFollowingSplineResponse_MAX = 4,
};

// Enum Mariner.EMarinerStatWidgetType
// NumValues: 0x0007
enum class EMarinerStatWidgetType : uint8
{
	BackendMetric                            = 0,
	PVEWins                                  = 1,
	PVPWins                                  = 2,
	RankedWins                               = 3,
	CombinedCharacterLevel                   = 4,
	HighestRank                              = 5,
	EMarinerStatWidgetType_MAX               = 6,
};

// Enum Mariner.EMarinerItemSlotsToLimit
// NumValues: 0x0005
enum class EMarinerItemSlotsToLimit : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Priority                                 = 2,
	DefaultAndPriority                       = 3,
	EMarinerItemSlotsToLimit_MAX             = 4,
};

// Enum Mariner.EMarinerFastOverlapTaskType
// NumValues: 0x0004
enum class EMarinerFastOverlapTaskType : uint8
{
	Location                                 = 0,
	ActorLocation                            = 1,
	MovingActorLocation                      = 2,
	MAX                                      = 3,
};

// Enum Mariner.EMarinerTeleportBehavior
// NumValues: 0x0004
enum class EMarinerTeleportBehavior : uint8
{
	Simple                                   = 0,
	DestroyTargetAfter                       = 1,
	Swap                                     = 2,
	EMarinerTeleportBehavior_MAX             = 3,
};

// Enum Mariner.EMarinerSweepTeleportResult
// NumValues: 0x0006
enum class EMarinerSweepTeleportResult : uint8
{
	FailTraceHitBeneathInvertedArenaBounds   = 0,
	FailTraceEndedOutsideArenaBounds         = 1,
	FailTraceFoundNoGround                   = 2,
	SuccessTraceNoInvertedBoundsDetected     = 3,
	SuccessTraceHitAboveInvertedBounds       = 4,
	MAX                                      = 5,
};

// Enum Mariner.EPlaylistInteractionState
// NumValues: 0x0004
enum class EPlaylistInteractionState : uint8
{
	Allowed                                  = 0,
	Disabled_PartySize                       = 1,
	Disabled_MatchmakingState                = 2,
	EPlaylistInteractionState_MAX            = 3,
};

// Enum Mariner.EMatchmakingInteractionState
// NumValues: 0x0008
enum class EMatchmakingInteractionState : uint8
{
	Allowed                                  = 0,
	Disabled_Generic                         = 1,
	Disabled_NotPartyLeader                  = 2,
	Disabled_AbandonmentPenaltyActive        = 3,
	Disabled_AlreadySearching                = 4,
	Disabled_IntermissionActive              = 5,
	Disabled_PrivateMatchActive              = 6,
	EMatchmakingInteractionState_MAX         = 7,
};

// Enum Mariner.EManagedVisibilityState
// NumValues: 0x0008
enum class EManagedVisibilityState : uint8
{
	Common                                   = 0,
	Internal                                 = 1,
	Animation                                = 2,
	ExternalUI                               = 3,
	ExternalGameplay                         = 4,
	Demo                                     = 5,
	Count                                    = 6,
	EManagedVisibilityState_MAX              = 7,
};

// Enum Mariner.EMarinerWeaponState
// NumValues: 0x0004
enum class EMarinerWeaponState : uint8
{
	Idle                                     = 0,
	Reloading                                = 1,
	Equipping                                = 2,
	EMarinerWeaponState_MAX                  = 3,
};

// Enum Mariner.ENavAreaFlag
// NumValues: 0x0006
enum class ENavAreaFlag : uint8
{
	Default                                  = 0,
	Jump                                     = 1,
	DoubleJump                               = 2,
	RocketJump                               = 3,
	TrustedLaunch                            = 4,
	ENavAreaFlag_MAX                         = 5,
};

// ScriptStruct Mariner.MarinerLawnDartRocketSpawningInfo
// 0x0010 (0x0010 - 0x0000)
struct FMarinerLawnDartRocketSpawningInfo final
{
public:
	int32                                         SocketIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     RocketTemplate;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerLawnDartRocketSpawningInfo) == 0x000008, "Wrong alignment on FMarinerLawnDartRocketSpawningInfo");
static_assert(sizeof(FMarinerLawnDartRocketSpawningInfo) == 0x000010, "Wrong size on FMarinerLawnDartRocketSpawningInfo");
static_assert(offsetof(FMarinerLawnDartRocketSpawningInfo, SocketIndex) == 0x000000, "Member 'FMarinerLawnDartRocketSpawningInfo::SocketIndex' has a wrong offset!");
static_assert(offsetof(FMarinerLawnDartRocketSpawningInfo, RocketTemplate) == 0x000008, "Member 'FMarinerLawnDartRocketSpawningInfo::RocketTemplate' has a wrong offset!");

// ScriptStruct Mariner.MarinerRootMotionMoveToDynamicForceNotifyInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FMarinerRootMotionMoveToDynamicForceNotifyInfo final
{
public:
	EMarinerMotionNotificationType                NotifyType;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorToDamage;                                     // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0010(0x0088)(BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bFinalNotification;                                // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerRootMotionMoveToDynamicForceNotifyInfo) == 0x000008, "Wrong alignment on FMarinerRootMotionMoveToDynamicForceNotifyInfo");
static_assert(sizeof(FMarinerRootMotionMoveToDynamicForceNotifyInfo) == 0x0000A0, "Wrong size on FMarinerRootMotionMoveToDynamicForceNotifyInfo");
static_assert(offsetof(FMarinerRootMotionMoveToDynamicForceNotifyInfo, NotifyType) == 0x000000, "Member 'FMarinerRootMotionMoveToDynamicForceNotifyInfo::NotifyType' has a wrong offset!");
static_assert(offsetof(FMarinerRootMotionMoveToDynamicForceNotifyInfo, ActorToDamage) == 0x000008, "Member 'FMarinerRootMotionMoveToDynamicForceNotifyInfo::ActorToDamage' has a wrong offset!");
static_assert(offsetof(FMarinerRootMotionMoveToDynamicForceNotifyInfo, HitResult) == 0x000010, "Member 'FMarinerRootMotionMoveToDynamicForceNotifyInfo::HitResult' has a wrong offset!");
static_assert(offsetof(FMarinerRootMotionMoveToDynamicForceNotifyInfo, bFinalNotification) == 0x000098, "Member 'FMarinerRootMotionMoveToDynamicForceNotifyInfo::bFinalNotification' has a wrong offset!");

// ScriptStruct Mariner.ActionChanceOfCompletion
// 0x0008 (0x0008 - 0x0000)
struct FActionChanceOfCompletion final
{
public:
	float                                         ChanceOfCompletion;                                // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomDeviation;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionChanceOfCompletion) == 0x000004, "Wrong alignment on FActionChanceOfCompletion");
static_assert(sizeof(FActionChanceOfCompletion) == 0x000008, "Wrong size on FActionChanceOfCompletion");
static_assert(offsetof(FActionChanceOfCompletion, ChanceOfCompletion) == 0x000000, "Member 'FActionChanceOfCompletion::ChanceOfCompletion' has a wrong offset!");
static_assert(offsetof(FActionChanceOfCompletion, RandomDeviation) == 0x000004, "Member 'FActionChanceOfCompletion::RandomDeviation' has a wrong offset!");

// ScriptStruct Mariner.MarinerRootMotionSource
// 0x0000 (0x00A0 - 0x00A0)
struct FMarinerRootMotionSource : public FRootMotionSource
{
public:
	bool                                          bCanOverrideMegablast;                             // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerRootMotionSource) == 0x000010, "Wrong alignment on FMarinerRootMotionSource");
static_assert(sizeof(FMarinerRootMotionSource) == 0x0000A0, "Wrong size on FMarinerRootMotionSource");
static_assert(offsetof(FMarinerRootMotionSource, bCanOverrideMegablast) == 0x000098, "Member 'FMarinerRootMotionSource::bCanOverrideMegablast' has a wrong offset!");

// ScriptStruct Mariner.MarinerRootMotionSource_MoveAlongSpline
// 0x0010 (0x00B0 - 0x00A0)
#pragma pack(push, 0x1)
struct alignas(0x10) FMarinerRootMotionSource_MoveAlongSpline : public FMarinerRootMotionSource
{
public:
	int32                                         AssignedSplineID;                                  // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
#pragma pack(pop)
static_assert(alignof(FMarinerRootMotionSource_MoveAlongSpline) == 0x000010, "Wrong alignment on FMarinerRootMotionSource_MoveAlongSpline");
static_assert(sizeof(FMarinerRootMotionSource_MoveAlongSpline) == 0x0000B0, "Wrong size on FMarinerRootMotionSource_MoveAlongSpline");
static_assert(offsetof(FMarinerRootMotionSource_MoveAlongSpline, AssignedSplineID) == 0x0000A0, "Member 'FMarinerRootMotionSource_MoveAlongSpline::AssignedSplineID' has a wrong offset!");

// ScriptStruct Mariner.MarinerRootMotionSource_MoveAlongSpline_ArenaReturn
// 0x0030 (0x00E0 - 0x00B0)
struct FMarinerRootMotionSource_MoveAlongSpline_ArenaReturn final : public FMarinerRootMotionSource_MoveAlongSpline
{
public:
	class UCurveFloat*                            CharacterMovementStartCurve;                       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CharacterMovementEndCurve;                         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x28];                                      // 0x00B8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerRootMotionSource_MoveAlongSpline_ArenaReturn) == 0x000010, "Wrong alignment on FMarinerRootMotionSource_MoveAlongSpline_ArenaReturn");
static_assert(sizeof(FMarinerRootMotionSource_MoveAlongSpline_ArenaReturn) == 0x0000E0, "Wrong size on FMarinerRootMotionSource_MoveAlongSpline_ArenaReturn");
static_assert(offsetof(FMarinerRootMotionSource_MoveAlongSpline_ArenaReturn, CharacterMovementStartCurve) == 0x0000A8, "Member 'FMarinerRootMotionSource_MoveAlongSpline_ArenaReturn::CharacterMovementStartCurve' has a wrong offset!");
static_assert(offsetof(FMarinerRootMotionSource_MoveAlongSpline_ArenaReturn, CharacterMovementEndCurve) == 0x0000B0, "Member 'FMarinerRootMotionSource_MoveAlongSpline_ArenaReturn::CharacterMovementEndCurve' has a wrong offset!");

// ScriptStruct Mariner.LoadedTotemDataResponse
// 0x0150 (0x0150 - 0x0000)
struct FLoadedTotemDataResponse final
{
public:
	class UMarinerRocketTotemBorderDataAsset*     LoadedBorder;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerRocketTotemPatternDataAsset*    LoadedPattern;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerRocketTotemShapeDataAsset*      LoadedShape;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerRocketTotemStandDataAsset*      LoadedStand;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerRocketTotemSymbolsDataAsset*    LoadedSymbol;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerRocketTotemVFXDataAsset*        LoadedVFX;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerRocketTotemCompanionDataAsset*  LoadedCompanion;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerRocketTotemBorderDataAsset> Border;                                            // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerRocketTotemPatternDataAsset> Pattern;                                           // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerRocketTotemShapeDataAsset> Shape;                                             // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerRocketTotemStandDataAsset> Stand;                                             // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerRocketTotemSymbolsDataAsset> Symbol;                                            // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerRocketTotemVFXDataAsset> VFX;                                               // 0x0100(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerRocketTotemCompanionDataAsset> Companion;                                         // 0x0128(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadedTotemDataResponse) == 0x000008, "Wrong alignment on FLoadedTotemDataResponse");
static_assert(sizeof(FLoadedTotemDataResponse) == 0x000150, "Wrong size on FLoadedTotemDataResponse");
static_assert(offsetof(FLoadedTotemDataResponse, LoadedBorder) == 0x000000, "Member 'FLoadedTotemDataResponse::LoadedBorder' has a wrong offset!");
static_assert(offsetof(FLoadedTotemDataResponse, LoadedPattern) == 0x000008, "Member 'FLoadedTotemDataResponse::LoadedPattern' has a wrong offset!");
static_assert(offsetof(FLoadedTotemDataResponse, LoadedShape) == 0x000010, "Member 'FLoadedTotemDataResponse::LoadedShape' has a wrong offset!");
static_assert(offsetof(FLoadedTotemDataResponse, LoadedStand) == 0x000018, "Member 'FLoadedTotemDataResponse::LoadedStand' has a wrong offset!");
static_assert(offsetof(FLoadedTotemDataResponse, LoadedSymbol) == 0x000020, "Member 'FLoadedTotemDataResponse::LoadedSymbol' has a wrong offset!");
static_assert(offsetof(FLoadedTotemDataResponse, LoadedVFX) == 0x000028, "Member 'FLoadedTotemDataResponse::LoadedVFX' has a wrong offset!");
static_assert(offsetof(FLoadedTotemDataResponse, LoadedCompanion) == 0x000030, "Member 'FLoadedTotemDataResponse::LoadedCompanion' has a wrong offset!");
static_assert(offsetof(FLoadedTotemDataResponse, Border) == 0x000038, "Member 'FLoadedTotemDataResponse::Border' has a wrong offset!");
static_assert(offsetof(FLoadedTotemDataResponse, Pattern) == 0x000060, "Member 'FLoadedTotemDataResponse::Pattern' has a wrong offset!");
static_assert(offsetof(FLoadedTotemDataResponse, Shape) == 0x000088, "Member 'FLoadedTotemDataResponse::Shape' has a wrong offset!");
static_assert(offsetof(FLoadedTotemDataResponse, Stand) == 0x0000B0, "Member 'FLoadedTotemDataResponse::Stand' has a wrong offset!");
static_assert(offsetof(FLoadedTotemDataResponse, Symbol) == 0x0000D8, "Member 'FLoadedTotemDataResponse::Symbol' has a wrong offset!");
static_assert(offsetof(FLoadedTotemDataResponse, VFX) == 0x000100, "Member 'FLoadedTotemDataResponse::VFX' has a wrong offset!");
static_assert(offsetof(FLoadedTotemDataResponse, Companion) == 0x000128, "Member 'FLoadedTotemDataResponse::Companion' has a wrong offset!");

// ScriptStruct Mariner.MarinerCreditMember
// 0x0028 (0x0028 - 0x0000)
struct FMarinerCreditMember final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerCreditMember) == 0x000008, "Wrong alignment on FMarinerCreditMember");
static_assert(sizeof(FMarinerCreditMember) == 0x000028, "Wrong size on FMarinerCreditMember");
static_assert(offsetof(FMarinerCreditMember, Name) == 0x000000, "Member 'FMarinerCreditMember::Name' has a wrong offset!");
static_assert(offsetof(FMarinerCreditMember, Title) == 0x000010, "Member 'FMarinerCreditMember::Title' has a wrong offset!");

// ScriptStruct Mariner.MarinerSpringArmOrientBehindOwnerProperties
// 0x0010 (0x0010 - 0x0000)
struct FMarinerSpringArmOrientBehindOwnerProperties final
{
public:
	float                                         MinimumPitch;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumPitch;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreYaw;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePitch;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VelocityToFacingWeight;                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerSpringArmOrientBehindOwnerProperties) == 0x000004, "Wrong alignment on FMarinerSpringArmOrientBehindOwnerProperties");
static_assert(sizeof(FMarinerSpringArmOrientBehindOwnerProperties) == 0x000010, "Wrong size on FMarinerSpringArmOrientBehindOwnerProperties");
static_assert(offsetof(FMarinerSpringArmOrientBehindOwnerProperties, MinimumPitch) == 0x000000, "Member 'FMarinerSpringArmOrientBehindOwnerProperties::MinimumPitch' has a wrong offset!");
static_assert(offsetof(FMarinerSpringArmOrientBehindOwnerProperties, MaximumPitch) == 0x000004, "Member 'FMarinerSpringArmOrientBehindOwnerProperties::MaximumPitch' has a wrong offset!");
static_assert(offsetof(FMarinerSpringArmOrientBehindOwnerProperties, bIgnoreYaw) == 0x000008, "Member 'FMarinerSpringArmOrientBehindOwnerProperties::bIgnoreYaw' has a wrong offset!");
static_assert(offsetof(FMarinerSpringArmOrientBehindOwnerProperties, bIgnorePitch) == 0x000009, "Member 'FMarinerSpringArmOrientBehindOwnerProperties::bIgnorePitch' has a wrong offset!");
static_assert(offsetof(FMarinerSpringArmOrientBehindOwnerProperties, VelocityToFacingWeight) == 0x00000C, "Member 'FMarinerSpringArmOrientBehindOwnerProperties::VelocityToFacingWeight' has a wrong offset!");

// ScriptStruct Mariner.MarinerSpawnItemTemplates
// 0x0020 (0x0020 - 0x0000)
struct FMarinerSpawnItemTemplates final
{
public:
	class FString                                 Identifier;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           ItemTemplates;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerSpawnItemTemplates) == 0x000008, "Wrong alignment on FMarinerSpawnItemTemplates");
static_assert(sizeof(FMarinerSpawnItemTemplates) == 0x000020, "Wrong size on FMarinerSpawnItemTemplates");
static_assert(offsetof(FMarinerSpawnItemTemplates, Identifier) == 0x000000, "Member 'FMarinerSpawnItemTemplates::Identifier' has a wrong offset!");
static_assert(offsetof(FMarinerSpawnItemTemplates, ItemTemplates) == 0x000010, "Member 'FMarinerSpawnItemTemplates::ItemTemplates' has a wrong offset!");

// ScriptStruct Mariner.MaterialOverride
// 0x0010 (0x0010 - 0x0000)
struct FMaterialOverride final
{
public:
	class UMaterialInstance*                      Material;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialOverride) == 0x000008, "Wrong alignment on FMaterialOverride");
static_assert(sizeof(FMaterialOverride) == 0x000010, "Wrong size on FMaterialOverride");
static_assert(offsetof(FMaterialOverride, Material) == 0x000000, "Member 'FMaterialOverride::Material' has a wrong offset!");
static_assert(offsetof(FMaterialOverride, SlotName) == 0x000008, "Member 'FMaterialOverride::SlotName' has a wrong offset!");

// ScriptStruct Mariner.MarinerServerTravelConfig
// 0x0040 (0x0040 - 0x0000)
struct FMarinerServerTravelConfig final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameModeName;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBots;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotDifficulty;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoining;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadTransition;                                   // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMediaSource*                           MovieToPlay;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSkipMovieOnceLoaded;                           // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerServerTravelConfig) == 0x000008, "Wrong alignment on FMarinerServerTravelConfig");
static_assert(sizeof(FMarinerServerTravelConfig) == 0x000040, "Wrong size on FMarinerServerTravelConfig");
static_assert(offsetof(FMarinerServerTravelConfig, MapName) == 0x000000, "Member 'FMarinerServerTravelConfig::MapName' has a wrong offset!");
static_assert(offsetof(FMarinerServerTravelConfig, GameModeName) == 0x000010, "Member 'FMarinerServerTravelConfig::GameModeName' has a wrong offset!");
static_assert(offsetof(FMarinerServerTravelConfig, NumBots) == 0x000020, "Member 'FMarinerServerTravelConfig::NumBots' has a wrong offset!");
static_assert(offsetof(FMarinerServerTravelConfig, BotDifficulty) == 0x000024, "Member 'FMarinerServerTravelConfig::BotDifficulty' has a wrong offset!");
static_assert(offsetof(FMarinerServerTravelConfig, bAllowJoining) == 0x000028, "Member 'FMarinerServerTravelConfig::bAllowJoining' has a wrong offset!");
static_assert(offsetof(FMarinerServerTravelConfig, bLoadTransition) == 0x000029, "Member 'FMarinerServerTravelConfig::bLoadTransition' has a wrong offset!");
static_assert(offsetof(FMarinerServerTravelConfig, MovieToPlay) == 0x000030, "Member 'FMarinerServerTravelConfig::MovieToPlay' has a wrong offset!");
static_assert(offsetof(FMarinerServerTravelConfig, bCanSkipMovieOnceLoaded) == 0x000038, "Member 'FMarinerServerTravelConfig::bCanSkipMovieOnceLoaded' has a wrong offset!");

// ScriptStruct Mariner.MarinerActivateDevicePayload
// 0x0010 (0x0010 - 0x0000)
struct FMarinerActivateDevicePayload final
{
public:
	class AMarinerCharacter*                      CharacterInstigator;                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnsureReplicationByte;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerActivateDevicePayload) == 0x000008, "Wrong alignment on FMarinerActivateDevicePayload");
static_assert(sizeof(FMarinerActivateDevicePayload) == 0x000010, "Wrong size on FMarinerActivateDevicePayload");
static_assert(offsetof(FMarinerActivateDevicePayload, CharacterInstigator) == 0x000000, "Member 'FMarinerActivateDevicePayload::CharacterInstigator' has a wrong offset!");
static_assert(offsetof(FMarinerActivateDevicePayload, EnsureReplicationByte) == 0x000008, "Member 'FMarinerActivateDevicePayload::EnsureReplicationByte' has a wrong offset!");

// ScriptStruct Mariner.SteamStorePriceOverview
// 0x0048 (0x0048 - 0x0000)
struct FSteamStorePriceOverview final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Initial;                                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Final;                                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Discount_percent;                                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Initial_formatted;                                 // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Final_formatted;                                   // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamStorePriceOverview) == 0x000008, "Wrong alignment on FSteamStorePriceOverview");
static_assert(sizeof(FSteamStorePriceOverview) == 0x000048, "Wrong size on FSteamStorePriceOverview");
static_assert(offsetof(FSteamStorePriceOverview, Currency) == 0x000000, "Member 'FSteamStorePriceOverview::Currency' has a wrong offset!");
static_assert(offsetof(FSteamStorePriceOverview, Initial) == 0x000010, "Member 'FSteamStorePriceOverview::Initial' has a wrong offset!");
static_assert(offsetof(FSteamStorePriceOverview, Final) == 0x000018, "Member 'FSteamStorePriceOverview::Final' has a wrong offset!");
static_assert(offsetof(FSteamStorePriceOverview, Discount_percent) == 0x000020, "Member 'FSteamStorePriceOverview::Discount_percent' has a wrong offset!");
static_assert(offsetof(FSteamStorePriceOverview, Initial_formatted) == 0x000028, "Member 'FSteamStorePriceOverview::Initial_formatted' has a wrong offset!");
static_assert(offsetof(FSteamStorePriceOverview, Final_formatted) == 0x000038, "Member 'FSteamStorePriceOverview::Final_formatted' has a wrong offset!");

// ScriptStruct Mariner.SteamStoreAppDetailsData
// 0x0048 (0x0048 - 0x0000)
struct FSteamStoreAppDetailsData final
{
public:
	struct FSteamStorePriceOverview               Price_overview;                                    // 0x0000(0x0048)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamStoreAppDetailsData) == 0x000008, "Wrong alignment on FSteamStoreAppDetailsData");
static_assert(sizeof(FSteamStoreAppDetailsData) == 0x000048, "Wrong size on FSteamStoreAppDetailsData");
static_assert(offsetof(FSteamStoreAppDetailsData, Price_overview) == 0x000000, "Member 'FSteamStoreAppDetailsData::Price_overview' has a wrong offset!");

// ScriptStruct Mariner.MarinerCardinalOffsets
// 0x0010 (0x0010 - 0x0000)
struct FMarinerCardinalOffsets final
{
public:
	float                                         NorthOffset;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EastOffset;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SouthOffset;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WestOffset;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerCardinalOffsets) == 0x000004, "Wrong alignment on FMarinerCardinalOffsets");
static_assert(sizeof(FMarinerCardinalOffsets) == 0x000010, "Wrong size on FMarinerCardinalOffsets");
static_assert(offsetof(FMarinerCardinalOffsets, NorthOffset) == 0x000000, "Member 'FMarinerCardinalOffsets::NorthOffset' has a wrong offset!");
static_assert(offsetof(FMarinerCardinalOffsets, EastOffset) == 0x000004, "Member 'FMarinerCardinalOffsets::EastOffset' has a wrong offset!");
static_assert(offsetof(FMarinerCardinalOffsets, SouthOffset) == 0x000008, "Member 'FMarinerCardinalOffsets::SouthOffset' has a wrong offset!");
static_assert(offsetof(FMarinerCardinalOffsets, WestOffset) == 0x00000C, "Member 'FMarinerCardinalOffsets::WestOffset' has a wrong offset!");

// ScriptStruct Mariner.MarinerCreditGroup
// 0x0028 (0x0028 - 0x0000)
struct FMarinerCreditGroup final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMarinerCreditMember>           Members;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerCreditGroup) == 0x000008, "Wrong alignment on FMarinerCreditGroup");
static_assert(sizeof(FMarinerCreditGroup) == 0x000028, "Wrong size on FMarinerCreditGroup");
static_assert(offsetof(FMarinerCreditGroup, Header) == 0x000000, "Member 'FMarinerCreditGroup::Header' has a wrong offset!");
static_assert(offsetof(FMarinerCreditGroup, Members) == 0x000018, "Member 'FMarinerCreditGroup::Members' has a wrong offset!");

// ScriptStruct Mariner.PlayerStat
// 0x0010 (0x0010 - 0x0000)
struct FPlayerStat final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFloat;                                          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerStat) == 0x000004, "Wrong alignment on FPlayerStat");
static_assert(sizeof(FPlayerStat) == 0x000010, "Wrong size on FPlayerStat");
static_assert(offsetof(FPlayerStat, Value) == 0x000000, "Member 'FPlayerStat::Value' has a wrong offset!");
static_assert(offsetof(FPlayerStat, Name) == 0x000004, "Member 'FPlayerStat::Name' has a wrong offset!");
static_assert(offsetof(FPlayerStat, bIsFloat) == 0x00000C, "Member 'FPlayerStat::bIsFloat' has a wrong offset!");

// ScriptStruct Mariner.MarinerPressAnyKeyMessageBoxData
// 0x0028 (0x0028 - 0x0000)
struct FMarinerPressAnyKeyMessageBoxData final
{
public:
	bool                                          bAllowGamepad;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMouse;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           Exceptions;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           MenuActionExceptions;                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerPressAnyKeyMessageBoxData) == 0x000008, "Wrong alignment on FMarinerPressAnyKeyMessageBoxData");
static_assert(sizeof(FMarinerPressAnyKeyMessageBoxData) == 0x000028, "Wrong size on FMarinerPressAnyKeyMessageBoxData");
static_assert(offsetof(FMarinerPressAnyKeyMessageBoxData, bAllowGamepad) == 0x000000, "Member 'FMarinerPressAnyKeyMessageBoxData::bAllowGamepad' has a wrong offset!");
static_assert(offsetof(FMarinerPressAnyKeyMessageBoxData, bAllowMouse) == 0x000001, "Member 'FMarinerPressAnyKeyMessageBoxData::bAllowMouse' has a wrong offset!");
static_assert(offsetof(FMarinerPressAnyKeyMessageBoxData, Exceptions) == 0x000008, "Member 'FMarinerPressAnyKeyMessageBoxData::Exceptions' has a wrong offset!");
static_assert(offsetof(FMarinerPressAnyKeyMessageBoxData, MenuActionExceptions) == 0x000018, "Member 'FMarinerPressAnyKeyMessageBoxData::MenuActionExceptions' has a wrong offset!");

// ScriptStruct Mariner.MarinerSpringArmCameraLagProperties
// 0x0014 (0x0014 - 0x0000)
struct FMarinerSpringArmCameraLagProperties final
{
public:
	bool                                          bEnableCameraLag;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLagSpeed;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLagMaxDistance;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraRotationLag;                          // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraRotationLagSpeed;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerSpringArmCameraLagProperties) == 0x000004, "Wrong alignment on FMarinerSpringArmCameraLagProperties");
static_assert(sizeof(FMarinerSpringArmCameraLagProperties) == 0x000014, "Wrong size on FMarinerSpringArmCameraLagProperties");
static_assert(offsetof(FMarinerSpringArmCameraLagProperties, bEnableCameraLag) == 0x000000, "Member 'FMarinerSpringArmCameraLagProperties::bEnableCameraLag' has a wrong offset!");
static_assert(offsetof(FMarinerSpringArmCameraLagProperties, CameraLagSpeed) == 0x000004, "Member 'FMarinerSpringArmCameraLagProperties::CameraLagSpeed' has a wrong offset!");
static_assert(offsetof(FMarinerSpringArmCameraLagProperties, CameraLagMaxDistance) == 0x000008, "Member 'FMarinerSpringArmCameraLagProperties::CameraLagMaxDistance' has a wrong offset!");
static_assert(offsetof(FMarinerSpringArmCameraLagProperties, bEnableCameraRotationLag) == 0x00000C, "Member 'FMarinerSpringArmCameraLagProperties::bEnableCameraRotationLag' has a wrong offset!");
static_assert(offsetof(FMarinerSpringArmCameraLagProperties, CameraRotationLagSpeed) == 0x000010, "Member 'FMarinerSpringArmCameraLagProperties::CameraRotationLagSpeed' has a wrong offset!");

// ScriptStruct Mariner.MarinerCameraPerspective
// 0x00A8 (0x00A8 - 0x0000)
struct FMarinerCameraPerspective final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerCameraPerspectiveType                 Perspective;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FieldOfView;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x4];                                       // 0x0010(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0014(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	EMarinerSpringArmMode                         ThirdPersonArmMode;                                // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThirdPersonCameraArmLength;                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ThirdPersonCameraOrientationOffset;                // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ThirdPersonCameraSocketOffsetTranslation;          // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ThirdPersonCameraTargetOffsetTranslation;          // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           ThirdPersonCameraTargetOffsetCurve;                // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           ThirdPersonCameraSocketOffsetCurve;                // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ThirdPersonCameraArmLengthCurve;                   // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FieldOfViewByPitchCurve;                           // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePawnControlRotation;                           // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ThirdPersonCameraRelativeTranslation;              // 0x0074(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerSpringArmOrientBehindOwnerProperties OrientBehindOwnerProperties;                       // 0x0080(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarinerSpringArmCameraLagProperties   LagProperties;                                     // 0x0090(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerCameraPerspective) == 0x000008, "Wrong alignment on FMarinerCameraPerspective");
static_assert(sizeof(FMarinerCameraPerspective) == 0x0000A8, "Wrong size on FMarinerCameraPerspective");
static_assert(offsetof(FMarinerCameraPerspective, Name) == 0x000000, "Member 'FMarinerCameraPerspective::Name' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, Perspective) == 0x000008, "Member 'FMarinerCameraPerspective::Perspective' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, FieldOfView) == 0x00000C, "Member 'FMarinerCameraPerspective::FieldOfView' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, TransitionParams) == 0x000014, "Member 'FMarinerCameraPerspective::TransitionParams' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, ThirdPersonArmMode) == 0x000024, "Member 'FMarinerCameraPerspective::ThirdPersonArmMode' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, ThirdPersonCameraArmLength) == 0x000028, "Member 'FMarinerCameraPerspective::ThirdPersonCameraArmLength' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, ThirdPersonCameraOrientationOffset) == 0x00002C, "Member 'FMarinerCameraPerspective::ThirdPersonCameraOrientationOffset' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, ThirdPersonCameraSocketOffsetTranslation) == 0x000038, "Member 'FMarinerCameraPerspective::ThirdPersonCameraSocketOffsetTranslation' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, ThirdPersonCameraTargetOffsetTranslation) == 0x000044, "Member 'FMarinerCameraPerspective::ThirdPersonCameraTargetOffsetTranslation' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, ThirdPersonCameraTargetOffsetCurve) == 0x000050, "Member 'FMarinerCameraPerspective::ThirdPersonCameraTargetOffsetCurve' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, ThirdPersonCameraSocketOffsetCurve) == 0x000058, "Member 'FMarinerCameraPerspective::ThirdPersonCameraSocketOffsetCurve' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, ThirdPersonCameraArmLengthCurve) == 0x000060, "Member 'FMarinerCameraPerspective::ThirdPersonCameraArmLengthCurve' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, FieldOfViewByPitchCurve) == 0x000068, "Member 'FMarinerCameraPerspective::FieldOfViewByPitchCurve' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, bUsePawnControlRotation) == 0x000070, "Member 'FMarinerCameraPerspective::bUsePawnControlRotation' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, ThirdPersonCameraRelativeTranslation) == 0x000074, "Member 'FMarinerCameraPerspective::ThirdPersonCameraRelativeTranslation' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, OrientBehindOwnerProperties) == 0x000080, "Member 'FMarinerCameraPerspective::OrientBehindOwnerProperties' has a wrong offset!");
static_assert(offsetof(FMarinerCameraPerspective, LagProperties) == 0x000090, "Member 'FMarinerCameraPerspective::LagProperties' has a wrong offset!");

// ScriptStruct Mariner.InterpolationParameters
// 0x002C (0x002C - 0x0000)
struct FInterpolationParameters final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetTransform                       RenderTransform;                                   // 0x0010(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInterpolationParameters) == 0x000004, "Wrong alignment on FInterpolationParameters");
static_assert(sizeof(FInterpolationParameters) == 0x00002C, "Wrong size on FInterpolationParameters");
static_assert(offsetof(FInterpolationParameters, Color) == 0x000000, "Member 'FInterpolationParameters::Color' has a wrong offset!");
static_assert(offsetof(FInterpolationParameters, RenderTransform) == 0x000010, "Member 'FInterpolationParameters::RenderTransform' has a wrong offset!");

// ScriptStruct Mariner.MarinerUIArtifactLevelData
// 0x0050 (0x0050 - 0x0000)
struct FMarinerUIArtifactLevelData final
{
public:
	TMap<EMarinerArtifactGameplayEffectType, struct FSlateBrush> BackgroundBrushes;                                 // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMarinerUIArtifactLevelData) == 0x000008, "Wrong alignment on FMarinerUIArtifactLevelData");
static_assert(sizeof(FMarinerUIArtifactLevelData) == 0x000050, "Wrong size on FMarinerUIArtifactLevelData");
static_assert(offsetof(FMarinerUIArtifactLevelData, BackgroundBrushes) == 0x000000, "Member 'FMarinerUIArtifactLevelData::BackgroundBrushes' has a wrong offset!");

// ScriptStruct Mariner.MarinerUIItemButtonData
// 0x0070 (0x0070 - 0x0000)
struct FMarinerUIItemButtonData final
{
public:
	struct FMangoItem                             Item;                                              // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EMarinerCurrencyType                          CurrencyType;                                      // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrencyAmount;                                    // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParentLevel;                                       // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFreeTier;                                         // 0x005C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x13];                                      // 0x005D(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerUIItemButtonData) == 0x000008, "Wrong alignment on FMarinerUIItemButtonData");
static_assert(sizeof(FMarinerUIItemButtonData) == 0x000070, "Wrong size on FMarinerUIItemButtonData");
static_assert(offsetof(FMarinerUIItemButtonData, Item) == 0x000000, "Member 'FMarinerUIItemButtonData::Item' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemButtonData, CurrencyType) == 0x000050, "Member 'FMarinerUIItemButtonData::CurrencyType' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemButtonData, CurrencyAmount) == 0x000054, "Member 'FMarinerUIItemButtonData::CurrencyAmount' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemButtonData, ParentLevel) == 0x000058, "Member 'FMarinerUIItemButtonData::ParentLevel' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemButtonData, bFreeTier) == 0x00005C, "Member 'FMarinerUIItemButtonData::bFreeTier' has a wrong offset!");

// ScriptStruct Mariner.MarinerCharacterImpact
// 0x0024 (0x0024 - 0x0000)
struct FMarinerCharacterImpact final
{
public:
	struct FVector                                VelocityOnImpact;                                  // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactNormal;                                      // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactPoint;                                       // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerCharacterImpact) == 0x000004, "Wrong alignment on FMarinerCharacterImpact");
static_assert(sizeof(FMarinerCharacterImpact) == 0x000024, "Wrong size on FMarinerCharacterImpact");
static_assert(offsetof(FMarinerCharacterImpact, VelocityOnImpact) == 0x000000, "Member 'FMarinerCharacterImpact::VelocityOnImpact' has a wrong offset!");
static_assert(offsetof(FMarinerCharacterImpact, ImpactNormal) == 0x00000C, "Member 'FMarinerCharacterImpact::ImpactNormal' has a wrong offset!");
static_assert(offsetof(FMarinerCharacterImpact, ImpactPoint) == 0x000018, "Member 'FMarinerCharacterImpact::ImpactPoint' has a wrong offset!");

// ScriptStruct Mariner.TagDelegateBinding
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTagDelegateBinding final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UAbilitySystemComponent> ComponentBoundTo;                                  // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTagDelegateBinding) == 0x000008, "Wrong alignment on FTagDelegateBinding");
static_assert(sizeof(FTagDelegateBinding) == 0x000018, "Wrong size on FTagDelegateBinding");
static_assert(offsetof(FTagDelegateBinding, ComponentBoundTo) == 0x000010, "Member 'FTagDelegateBinding::ComponentBoundTo' has a wrong offset!");

// ScriptStruct Mariner.MarinerRootMotionSource_SlowToStop
// 0x0010 (0x00B0 - 0x00A0)
struct FMarinerRootMotionSource_SlowToStop final : public FMarinerRootMotionSource
{
public:
	class UCurveFloat*                            DecelerationCurve;                                 // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingCharacterSpeed;                            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerRootMotionSource_SlowToStop) == 0x000010, "Wrong alignment on FMarinerRootMotionSource_SlowToStop");
static_assert(sizeof(FMarinerRootMotionSource_SlowToStop) == 0x0000B0, "Wrong size on FMarinerRootMotionSource_SlowToStop");
static_assert(offsetof(FMarinerRootMotionSource_SlowToStop, DecelerationCurve) == 0x0000A0, "Member 'FMarinerRootMotionSource_SlowToStop::DecelerationCurve' has a wrong offset!");
static_assert(offsetof(FMarinerRootMotionSource_SlowToStop, StartingCharacterSpeed) == 0x0000A8, "Member 'FMarinerRootMotionSource_SlowToStop::StartingCharacterSpeed' has a wrong offset!");

// ScriptStruct Mariner.TagBindingCollection
// 0x0010 (0x0010 - 0x0000)
struct FTagBindingCollection final
{
public:
	TArray<struct FTagDelegateBinding>            Collection;                                        // 0x0000(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTagBindingCollection) == 0x000008, "Wrong alignment on FTagBindingCollection");
static_assert(sizeof(FTagBindingCollection) == 0x000010, "Wrong size on FTagBindingCollection");
static_assert(offsetof(FTagBindingCollection, Collection) == 0x000000, "Member 'FTagBindingCollection::Collection' has a wrong offset!");

// ScriptStruct Mariner.ArtifactImprovementUIData
// 0x0038 (0x0038 - 0x0000)
struct FArtifactImprovementUIData final
{
public:
	float                                         ImprovementNumber;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ImprovementSymbol;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RichTextStyleDefault;                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RichTextStyleHighlight;                            // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArtifactImprovementUIData) == 0x000008, "Wrong alignment on FArtifactImprovementUIData");
static_assert(sizeof(FArtifactImprovementUIData) == 0x000038, "Wrong size on FArtifactImprovementUIData");
static_assert(offsetof(FArtifactImprovementUIData, ImprovementNumber) == 0x000000, "Member 'FArtifactImprovementUIData::ImprovementNumber' has a wrong offset!");
static_assert(offsetof(FArtifactImprovementUIData, ImprovementSymbol) == 0x000008, "Member 'FArtifactImprovementUIData::ImprovementSymbol' has a wrong offset!");
static_assert(offsetof(FArtifactImprovementUIData, RichTextStyleDefault) == 0x000018, "Member 'FArtifactImprovementUIData::RichTextStyleDefault' has a wrong offset!");
static_assert(offsetof(FArtifactImprovementUIData, RichTextStyleHighlight) == 0x000028, "Member 'FArtifactImprovementUIData::RichTextStyleHighlight' has a wrong offset!");

// ScriptStruct Mariner.MangoId
// 0x0010 (0x0010 - 0x0000)
struct FMangoId final
{
public:
	class FString                                 MangoIdStr;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMangoId) == 0x000008, "Wrong alignment on FMangoId");
static_assert(sizeof(FMangoId) == 0x000010, "Wrong size on FMangoId");
static_assert(offsetof(FMangoId, MangoIdStr) == 0x000000, "Member 'FMangoId::MangoIdStr' has a wrong offset!");

// ScriptStruct Mariner.MarinerAirJumpProperties
// 0x0028 (0x0028 - 0x0000)
struct FMarinerAirJumpProperties final
{
public:
	float                                         JumpZVelocity;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpSameDirectionLateralSpeed;                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpDifferentDirectionLateralSpeed;                // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DirectionChangeMomentumPreservationCurve;          // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            JumpGravityScalarCurve;                            // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          JumpAudioEvent;                                    // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerAirJumpProperties) == 0x000008, "Wrong alignment on FMarinerAirJumpProperties");
static_assert(sizeof(FMarinerAirJumpProperties) == 0x000028, "Wrong size on FMarinerAirJumpProperties");
static_assert(offsetof(FMarinerAirJumpProperties, JumpZVelocity) == 0x000000, "Member 'FMarinerAirJumpProperties::JumpZVelocity' has a wrong offset!");
static_assert(offsetof(FMarinerAirJumpProperties, JumpSameDirectionLateralSpeed) == 0x000004, "Member 'FMarinerAirJumpProperties::JumpSameDirectionLateralSpeed' has a wrong offset!");
static_assert(offsetof(FMarinerAirJumpProperties, JumpDifferentDirectionLateralSpeed) == 0x000008, "Member 'FMarinerAirJumpProperties::JumpDifferentDirectionLateralSpeed' has a wrong offset!");
static_assert(offsetof(FMarinerAirJumpProperties, DirectionChangeMomentumPreservationCurve) == 0x000010, "Member 'FMarinerAirJumpProperties::DirectionChangeMomentumPreservationCurve' has a wrong offset!");
static_assert(offsetof(FMarinerAirJumpProperties, JumpGravityScalarCurve) == 0x000018, "Member 'FMarinerAirJumpProperties::JumpGravityScalarCurve' has a wrong offset!");
static_assert(offsetof(FMarinerAirJumpProperties, JumpAudioEvent) == 0x000020, "Member 'FMarinerAirJumpProperties::JumpAudioEvent' has a wrong offset!");

// ScriptStruct Mariner.SteamStoreAppDetailsResult
// 0x0050 (0x0050 - 0x0000)
struct FSteamStoreAppDetailsResult final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamStoreAppDetailsData              Data;                                              // 0x0008(0x0048)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamStoreAppDetailsResult) == 0x000008, "Wrong alignment on FSteamStoreAppDetailsResult");
static_assert(sizeof(FSteamStoreAppDetailsResult) == 0x000050, "Wrong size on FSteamStoreAppDetailsResult");
static_assert(offsetof(FSteamStoreAppDetailsResult, Success) == 0x000000, "Member 'FSteamStoreAppDetailsResult::Success' has a wrong offset!");
static_assert(offsetof(FSteamStoreAppDetailsResult, Data) == 0x000008, "Member 'FSteamStoreAppDetailsResult::Data' has a wrong offset!");

// ScriptStruct Mariner.MangoNativePurchasePendingCallbacks
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FMangoNativePurchasePendingCallbacks final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoNativePurchasePendingCallbacks) == 0x000008, "Wrong alignment on FMangoNativePurchasePendingCallbacks");
static_assert(sizeof(FMangoNativePurchasePendingCallbacks) == 0x000020, "Wrong size on FMangoNativePurchasePendingCallbacks");

// ScriptStruct Mariner.MarinerGameplayTaskPooledComponentBinding
// 0x0020 (0x0020 - 0x0000)
struct FMarinerGameplayTaskPooledComponentBinding final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TaskComponentID;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerGameplayTaskPooledComponentBinding) == 0x000008, "Wrong alignment on FMarinerGameplayTaskPooledComponentBinding");
static_assert(sizeof(FMarinerGameplayTaskPooledComponentBinding) == 0x000020, "Wrong size on FMarinerGameplayTaskPooledComponentBinding");
static_assert(offsetof(FMarinerGameplayTaskPooledComponentBinding, Component) == 0x000000, "Member 'FMarinerGameplayTaskPooledComponentBinding::Component' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayTaskPooledComponentBinding, TaskComponentID) == 0x000008, "Member 'FMarinerGameplayTaskPooledComponentBinding::TaskComponentID' has a wrong offset!");

// ScriptStruct Mariner.MarinerGameplayTaskPooledComponentArrayContainer
// 0x0010 (0x0010 - 0x0000)
struct FMarinerGameplayTaskPooledComponentArrayContainer final
{
public:
	TArray<struct FMarinerGameplayTaskPooledComponentBinding> PooledComponentBindings;                           // 0x0000(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerGameplayTaskPooledComponentArrayContainer) == 0x000008, "Wrong alignment on FMarinerGameplayTaskPooledComponentArrayContainer");
static_assert(sizeof(FMarinerGameplayTaskPooledComponentArrayContainer) == 0x000010, "Wrong size on FMarinerGameplayTaskPooledComponentArrayContainer");
static_assert(offsetof(FMarinerGameplayTaskPooledComponentArrayContainer, PooledComponentBindings) == 0x000000, "Member 'FMarinerGameplayTaskPooledComponentArrayContainer::PooledComponentBindings' has a wrong offset!");

// ScriptStruct Mariner.MarinerArenaReturnTimingParams
// 0x0010 (0x0010 - 0x0000)
struct FMarinerArenaReturnTimingParams final
{
public:
	float                                         MinimumReturnTime;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumReturnTimeDistance;                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumReturnTime;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumReturnTimeDistance;                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerArenaReturnTimingParams) == 0x000004, "Wrong alignment on FMarinerArenaReturnTimingParams");
static_assert(sizeof(FMarinerArenaReturnTimingParams) == 0x000010, "Wrong size on FMarinerArenaReturnTimingParams");
static_assert(offsetof(FMarinerArenaReturnTimingParams, MinimumReturnTime) == 0x000000, "Member 'FMarinerArenaReturnTimingParams::MinimumReturnTime' has a wrong offset!");
static_assert(offsetof(FMarinerArenaReturnTimingParams, MinimumReturnTimeDistance) == 0x000004, "Member 'FMarinerArenaReturnTimingParams::MinimumReturnTimeDistance' has a wrong offset!");
static_assert(offsetof(FMarinerArenaReturnTimingParams, MaximumReturnTime) == 0x000008, "Member 'FMarinerArenaReturnTimingParams::MaximumReturnTime' has a wrong offset!");
static_assert(offsetof(FMarinerArenaReturnTimingParams, MaximumReturnTimeDistance) == 0x00000C, "Member 'FMarinerArenaReturnTimingParams::MaximumReturnTimeDistance' has a wrong offset!");

// ScriptStruct Mariner.MarinerChargeProjectileAuthState
// 0x000C (0x000C - 0x0000)
struct FMarinerChargeProjectileAuthState final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeRatio;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeSpeedMultiplier;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerChargeProjectileAuthState) == 0x000004, "Wrong alignment on FMarinerChargeProjectileAuthState");
static_assert(sizeof(FMarinerChargeProjectileAuthState) == 0x00000C, "Wrong size on FMarinerChargeProjectileAuthState");
static_assert(offsetof(FMarinerChargeProjectileAuthState, Timestamp) == 0x000000, "Member 'FMarinerChargeProjectileAuthState::Timestamp' has a wrong offset!");
static_assert(offsetof(FMarinerChargeProjectileAuthState, ChargeRatio) == 0x000004, "Member 'FMarinerChargeProjectileAuthState::ChargeRatio' has a wrong offset!");
static_assert(offsetof(FMarinerChargeProjectileAuthState, ChargeSpeedMultiplier) == 0x000008, "Member 'FMarinerChargeProjectileAuthState::ChargeSpeedMultiplier' has a wrong offset!");

// ScriptStruct Mariner.ProjectileType
// 0x0020 (0x0020 - 0x0000)
struct FProjectileType final
{
public:
	TSubclassOf<class AMarinerProjectile>         ProjectileType;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PoolSize;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMarinerProjectile*>             ProjectilePool;                                    // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProjectileType) == 0x000008, "Wrong alignment on FProjectileType");
static_assert(sizeof(FProjectileType) == 0x000020, "Wrong size on FProjectileType");
static_assert(offsetof(FProjectileType, ProjectileType) == 0x000000, "Member 'FProjectileType::ProjectileType' has a wrong offset!");
static_assert(offsetof(FProjectileType, PoolSize) == 0x000008, "Member 'FProjectileType::PoolSize' has a wrong offset!");
static_assert(offsetof(FProjectileType, ProjectilePool) == 0x000010, "Member 'FProjectileType::ProjectilePool' has a wrong offset!");

// ScriptStruct Mariner.HUDBarIconState
// 0x0050 (0x0050 - 0x0000)
struct FHUDBarIconState final
{
public:
	bool                                          bHasBackgroundImage;                               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               BackgroundImage;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BackgroundColor;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasGlowBehindImage;                               // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               GlowBehindImage;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GlowBehindColor;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasIconImage;                                     // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               IconImage;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               AlternateIconImage;                                // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 IconColor;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasGlowInFrontImage;                              // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               GlowInFrontImage;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GlowInFrontColor;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHUDBarIconState) == 0x000008, "Wrong alignment on FHUDBarIconState");
static_assert(sizeof(FHUDBarIconState) == 0x000050, "Wrong size on FHUDBarIconState");
static_assert(offsetof(FHUDBarIconState, bHasBackgroundImage) == 0x000000, "Member 'FHUDBarIconState::bHasBackgroundImage' has a wrong offset!");
static_assert(offsetof(FHUDBarIconState, BackgroundImage) == 0x000008, "Member 'FHUDBarIconState::BackgroundImage' has a wrong offset!");
static_assert(offsetof(FHUDBarIconState, BackgroundColor) == 0x000010, "Member 'FHUDBarIconState::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FHUDBarIconState, bHasGlowBehindImage) == 0x000014, "Member 'FHUDBarIconState::bHasGlowBehindImage' has a wrong offset!");
static_assert(offsetof(FHUDBarIconState, GlowBehindImage) == 0x000018, "Member 'FHUDBarIconState::GlowBehindImage' has a wrong offset!");
static_assert(offsetof(FHUDBarIconState, GlowBehindColor) == 0x000020, "Member 'FHUDBarIconState::GlowBehindColor' has a wrong offset!");
static_assert(offsetof(FHUDBarIconState, bHasIconImage) == 0x000024, "Member 'FHUDBarIconState::bHasIconImage' has a wrong offset!");
static_assert(offsetof(FHUDBarIconState, IconImage) == 0x000028, "Member 'FHUDBarIconState::IconImage' has a wrong offset!");
static_assert(offsetof(FHUDBarIconState, AlternateIconImage) == 0x000030, "Member 'FHUDBarIconState::AlternateIconImage' has a wrong offset!");
static_assert(offsetof(FHUDBarIconState, IconColor) == 0x000038, "Member 'FHUDBarIconState::IconColor' has a wrong offset!");
static_assert(offsetof(FHUDBarIconState, bHasGlowInFrontImage) == 0x00003C, "Member 'FHUDBarIconState::bHasGlowInFrontImage' has a wrong offset!");
static_assert(offsetof(FHUDBarIconState, GlowInFrontImage) == 0x000040, "Member 'FHUDBarIconState::GlowInFrontImage' has a wrong offset!");
static_assert(offsetof(FHUDBarIconState, GlowInFrontColor) == 0x000048, "Member 'FHUDBarIconState::GlowInFrontColor' has a wrong offset!");

// ScriptStruct Mariner.MarinerAbilityIconAnimations
// 0x0020 (0x0020 - 0x0000)
struct FMarinerAbilityIconAnimations final
{
public:
	class UWidgetAnimation*                       CooldownCompleteAnim;                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       InUseAnim;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       BallCarrierBlockedAnim;                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       AbilityFailedAnim;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerAbilityIconAnimations) == 0x000008, "Wrong alignment on FMarinerAbilityIconAnimations");
static_assert(sizeof(FMarinerAbilityIconAnimations) == 0x000020, "Wrong size on FMarinerAbilityIconAnimations");
static_assert(offsetof(FMarinerAbilityIconAnimations, CooldownCompleteAnim) == 0x000000, "Member 'FMarinerAbilityIconAnimations::CooldownCompleteAnim' has a wrong offset!");
static_assert(offsetof(FMarinerAbilityIconAnimations, InUseAnim) == 0x000008, "Member 'FMarinerAbilityIconAnimations::InUseAnim' has a wrong offset!");
static_assert(offsetof(FMarinerAbilityIconAnimations, BallCarrierBlockedAnim) == 0x000010, "Member 'FMarinerAbilityIconAnimations::BallCarrierBlockedAnim' has a wrong offset!");
static_assert(offsetof(FMarinerAbilityIconAnimations, AbilityFailedAnim) == 0x000018, "Member 'FMarinerAbilityIconAnimations::AbilityFailedAnim' has a wrong offset!");

// ScriptStruct Mariner.OverlappingCharacterInfo
// 0x0010 (0x0010 - 0x0000)
struct FOverlappingCharacterInfo final
{
public:
	class AMarinerCharacter*                      OverlappingCharacter;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuthoritativeOverlapStartTimeStamp;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOverlappingCharacterInfo) == 0x000008, "Wrong alignment on FOverlappingCharacterInfo");
static_assert(sizeof(FOverlappingCharacterInfo) == 0x000010, "Wrong size on FOverlappingCharacterInfo");
static_assert(offsetof(FOverlappingCharacterInfo, OverlappingCharacter) == 0x000000, "Member 'FOverlappingCharacterInfo::OverlappingCharacter' has a wrong offset!");
static_assert(offsetof(FOverlappingCharacterInfo, AuthoritativeOverlapStartTimeStamp) == 0x000008, "Member 'FOverlappingCharacterInfo::AuthoritativeOverlapStartTimeStamp' has a wrong offset!");

// ScriptStruct Mariner.MarinerMoveUpdateDynamics
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMarinerMoveUpdateDynamics
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerMoveUpdateDynamics) == 0x000008, "Wrong alignment on FMarinerMoveUpdateDynamics");
static_assert(sizeof(FMarinerMoveUpdateDynamics) == 0x000028, "Wrong size on FMarinerMoveUpdateDynamics");

// ScriptStruct Mariner.MarinerRootMotionMoveUpdateDynamics
// 0x0000 (0x0028 - 0x0028)
struct FMarinerRootMotionMoveUpdateDynamics : public FMarinerMoveUpdateDynamics
{
};
static_assert(alignof(FMarinerRootMotionMoveUpdateDynamics) == 0x000008, "Wrong alignment on FMarinerRootMotionMoveUpdateDynamics");
static_assert(sizeof(FMarinerRootMotionMoveUpdateDynamics) == 0x000028, "Wrong size on FMarinerRootMotionMoveUpdateDynamics");

// ScriptStruct Mariner.MarinerRootMotionMoveUpdateDynamics_LerpToSpeed
// 0x0020 (0x0048 - 0x0028)
struct FMarinerRootMotionMoveUpdateDynamics_LerpToSpeed final : public FMarinerRootMotionMoveUpdateDynamics
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerRootMotionMoveUpdateDynamics_LerpToSpeed) == 0x000008, "Wrong alignment on FMarinerRootMotionMoveUpdateDynamics_LerpToSpeed");
static_assert(sizeof(FMarinerRootMotionMoveUpdateDynamics_LerpToSpeed) == 0x000048, "Wrong size on FMarinerRootMotionMoveUpdateDynamics_LerpToSpeed");

// ScriptStruct Mariner.MarinerCharacterFallbackReturnData
// 0x0008 (0x0008 - 0x0000)
struct FMarinerCharacterFallbackReturnData final
{
public:
	EMarinerCharacterFallbackReturnState          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeRemainingInCurrentState;                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerCharacterFallbackReturnData) == 0x000004, "Wrong alignment on FMarinerCharacterFallbackReturnData");
static_assert(sizeof(FMarinerCharacterFallbackReturnData) == 0x000008, "Wrong size on FMarinerCharacterFallbackReturnData");
static_assert(offsetof(FMarinerCharacterFallbackReturnData, State) == 0x000000, "Member 'FMarinerCharacterFallbackReturnData::State' has a wrong offset!");
static_assert(offsetof(FMarinerCharacterFallbackReturnData, TimeRemainingInCurrentState) == 0x000004, "Member 'FMarinerCharacterFallbackReturnData::TimeRemainingInCurrentState' has a wrong offset!");

// ScriptStruct Mariner.ArenaReturnState
// 0x0070 (0x0070 - 0x0000)
struct FArenaReturnState final
{
public:
	EMarinerArenaReturnState                      UpcomingState;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantizeNormal              KnockOutDirection;                                 // 0x0004(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKnockOutWasMegablast;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      KnockOutInstigator;                                // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturningToArenaRootMotionSourceID;                // 0x0020(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x14];                                      // 0x0024(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               ReturningToArenaEffectComponent;                   // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerCharacterFallbackReturnData    FallbackReturnData;                                // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EMarinerArenaReturnState                      CurrentState;                                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x1F];                                      // 0x0051(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArenaReturnState) == 0x000008, "Wrong alignment on FArenaReturnState");
static_assert(sizeof(FArenaReturnState) == 0x000070, "Wrong size on FArenaReturnState");
static_assert(offsetof(FArenaReturnState, UpcomingState) == 0x000000, "Member 'FArenaReturnState::UpcomingState' has a wrong offset!");
static_assert(offsetof(FArenaReturnState, KnockOutDirection) == 0x000004, "Member 'FArenaReturnState::KnockOutDirection' has a wrong offset!");
static_assert(offsetof(FArenaReturnState, bKnockOutWasMegablast) == 0x000010, "Member 'FArenaReturnState::bKnockOutWasMegablast' has a wrong offset!");
static_assert(offsetof(FArenaReturnState, KnockOutInstigator) == 0x000018, "Member 'FArenaReturnState::KnockOutInstigator' has a wrong offset!");
static_assert(offsetof(FArenaReturnState, ReturningToArenaRootMotionSourceID) == 0x000020, "Member 'FArenaReturnState::ReturningToArenaRootMotionSourceID' has a wrong offset!");
static_assert(offsetof(FArenaReturnState, ReturningToArenaEffectComponent) == 0x000038, "Member 'FArenaReturnState::ReturningToArenaEffectComponent' has a wrong offset!");
static_assert(offsetof(FArenaReturnState, FallbackReturnData) == 0x000040, "Member 'FArenaReturnState::FallbackReturnData' has a wrong offset!");
static_assert(offsetof(FArenaReturnState, CurrentState) == 0x000050, "Member 'FArenaReturnState::CurrentState' has a wrong offset!");

// ScriptStruct Mariner.MarinerCapsuleExtents
// 0x0010 (0x0010 - 0x0000)
struct FMarinerCapsuleExtents final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Diameter;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerCapsuleExtents) == 0x000004, "Wrong alignment on FMarinerCapsuleExtents");
static_assert(sizeof(FMarinerCapsuleExtents) == 0x000010, "Wrong size on FMarinerCapsuleExtents");
static_assert(offsetof(FMarinerCapsuleExtents, Radius) == 0x000000, "Member 'FMarinerCapsuleExtents::Radius' has a wrong offset!");
static_assert(offsetof(FMarinerCapsuleExtents, HalfHeight) == 0x000004, "Member 'FMarinerCapsuleExtents::HalfHeight' has a wrong offset!");
static_assert(offsetof(FMarinerCapsuleExtents, Diameter) == 0x000008, "Member 'FMarinerCapsuleExtents::Diameter' has a wrong offset!");
static_assert(offsetof(FMarinerCapsuleExtents, Height) == 0x00000C, "Member 'FMarinerCapsuleExtents::Height' has a wrong offset!");

// ScriptStruct Mariner.RetroactiveProfileAchievementData
// 0x0018 (0x0018 - 0x0000)
struct FRetroactiveProfileAchievementData final
{
public:
	EMarinerAchievement                           Achievement;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoStatGroupType                           StatGroup;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoStatType                                StatType;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatMetric;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRetroactiveProfileAchievementData) == 0x000008, "Wrong alignment on FRetroactiveProfileAchievementData");
static_assert(sizeof(FRetroactiveProfileAchievementData) == 0x000018, "Wrong size on FRetroactiveProfileAchievementData");
static_assert(offsetof(FRetroactiveProfileAchievementData, Achievement) == 0x000000, "Member 'FRetroactiveProfileAchievementData::Achievement' has a wrong offset!");
static_assert(offsetof(FRetroactiveProfileAchievementData, StatGroup) == 0x000001, "Member 'FRetroactiveProfileAchievementData::StatGroup' has a wrong offset!");
static_assert(offsetof(FRetroactiveProfileAchievementData, StatType) == 0x000002, "Member 'FRetroactiveProfileAchievementData::StatType' has a wrong offset!");
static_assert(offsetof(FRetroactiveProfileAchievementData, StatMetric) == 0x000008, "Member 'FRetroactiveProfileAchievementData::StatMetric' has a wrong offset!");

// ScriptStruct Mariner.MarinerMatSwapJob
// 0x0028 (0x0028 - 0x0000)
struct FMarinerMatSwapJob final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         Mesh;                                              // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0018(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMarinerMatSwapJob) == 0x000008, "Wrong alignment on FMarinerMatSwapJob");
static_assert(sizeof(FMarinerMatSwapJob) == 0x000028, "Wrong size on FMarinerMatSwapJob");
static_assert(offsetof(FMarinerMatSwapJob, Mesh) == 0x000008, "Member 'FMarinerMatSwapJob::Mesh' has a wrong offset!");
static_assert(offsetof(FMarinerMatSwapJob, Materials) == 0x000018, "Member 'FMarinerMatSwapJob::Materials' has a wrong offset!");

// ScriptStruct Mariner.MarinerDamageRecordEntry
// 0x0008 (0x0008 - 0x0000)
struct FMarinerDamageRecordEntry final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerDamageRecordEntry) == 0x000004, "Wrong alignment on FMarinerDamageRecordEntry");
static_assert(sizeof(FMarinerDamageRecordEntry) == 0x000008, "Wrong size on FMarinerDamageRecordEntry");
static_assert(offsetof(FMarinerDamageRecordEntry, Timestamp) == 0x000000, "Member 'FMarinerDamageRecordEntry::Timestamp' has a wrong offset!");
static_assert(offsetof(FMarinerDamageRecordEntry, DamageAmount) == 0x000004, "Member 'FMarinerDamageRecordEntry::DamageAmount' has a wrong offset!");

// ScriptStruct Mariner.MarinerAchievementData
// 0x0010 (0x0010 - 0x0000)
struct FMarinerAchievementData final
{
public:
	class FName                                   PS4Id;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OriginID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         UnlockThreshold;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMarinerAchievementData) == 0x000004, "Wrong alignment on FMarinerAchievementData");
static_assert(sizeof(FMarinerAchievementData) == 0x000010, "Wrong size on FMarinerAchievementData");
static_assert(offsetof(FMarinerAchievementData, PS4Id) == 0x000000, "Member 'FMarinerAchievementData::PS4Id' has a wrong offset!");
static_assert(offsetof(FMarinerAchievementData, OriginID) == 0x000008, "Member 'FMarinerAchievementData::OriginID' has a wrong offset!");
static_assert(offsetof(FMarinerAchievementData, UnlockThreshold) == 0x00000C, "Member 'FMarinerAchievementData::UnlockThreshold' has a wrong offset!");

// ScriptStruct Mariner.MarinerAchievementSetData
// 0x0028 (0x0028 - 0x0000)
struct FMarinerAchievementSetData final
{
public:
	EMarinerAchievement                           AchievementSetStatID;                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AchievementSetStat;                                // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarinerAchievementData>        Achievements;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bMaxRule;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerAchievementSetData) == 0x000008, "Wrong alignment on FMarinerAchievementSetData");
static_assert(sizeof(FMarinerAchievementSetData) == 0x000028, "Wrong size on FMarinerAchievementSetData");
static_assert(offsetof(FMarinerAchievementSetData, AchievementSetStatID) == 0x000000, "Member 'FMarinerAchievementSetData::AchievementSetStatID' has a wrong offset!");
static_assert(offsetof(FMarinerAchievementSetData, AchievementSetStat) == 0x000004, "Member 'FMarinerAchievementSetData::AchievementSetStat' has a wrong offset!");
static_assert(offsetof(FMarinerAchievementSetData, Achievements) == 0x000010, "Member 'FMarinerAchievementSetData::Achievements' has a wrong offset!");
static_assert(offsetof(FMarinerAchievementSetData, bMaxRule) == 0x000020, "Member 'FMarinerAchievementSetData::bMaxRule' has a wrong offset!");

// ScriptStruct Mariner.MarinerMessageBoxBaseData
// 0x00B0 (0x00B0 - 0x0000)
struct FMarinerMessageBoxBaseData
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerMessageBoxBase>     WidgetOverride;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerMessageBoxPrompts>  Prompts;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarinerPressAnyKeyMessageBoxData      PressAnyKeyData;                                   // 0x0020(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMarinerMessageBoxPriority                    Priority;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerMessageBoxLifetime                    Lifetime;                                          // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FKey& KeyPressed)>      ConfirmCallback;                                   // 0x004C(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x14];                                      // 0x005C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FKey& KeyPressed)>      SecondaryCallback;                                 // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FKey& KeyPressed)>      CancelCallback;                                    // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x10];                                      // 0x00A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerMessageBoxBaseData) == 0x000008, "Wrong alignment on FMarinerMessageBoxBaseData");
static_assert(sizeof(FMarinerMessageBoxBaseData) == 0x0000B0, "Wrong size on FMarinerMessageBoxBaseData");
static_assert(offsetof(FMarinerMessageBoxBaseData, WidgetOverride) == 0x000010, "Member 'FMarinerMessageBoxBaseData::WidgetOverride' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxBaseData, Prompts) == 0x000018, "Member 'FMarinerMessageBoxBaseData::Prompts' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxBaseData, PressAnyKeyData) == 0x000020, "Member 'FMarinerMessageBoxBaseData::PressAnyKeyData' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxBaseData, Priority) == 0x000048, "Member 'FMarinerMessageBoxBaseData::Priority' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxBaseData, Lifetime) == 0x000049, "Member 'FMarinerMessageBoxBaseData::Lifetime' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxBaseData, ConfirmCallback) == 0x00004C, "Member 'FMarinerMessageBoxBaseData::ConfirmCallback' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxBaseData, SecondaryCallback) == 0x000070, "Member 'FMarinerMessageBoxBaseData::SecondaryCallback' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxBaseData, CancelCallback) == 0x000090, "Member 'FMarinerMessageBoxBaseData::CancelCallback' has a wrong offset!");

// ScriptStruct Mariner.MarinerMessageBoxOfferListInfo
// 0x0018 (0x0018 - 0x0000)
struct FMarinerMessageBoxOfferListInfo final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerLayeredButton*                  ButtonInstance;                                    // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMessageBoxOfferListInfo) == 0x000008, "Wrong alignment on FMarinerMessageBoxOfferListInfo");
static_assert(sizeof(FMarinerMessageBoxOfferListInfo) == 0x000018, "Wrong size on FMarinerMessageBoxOfferListInfo");
static_assert(offsetof(FMarinerMessageBoxOfferListInfo, OfferId) == 0x000000, "Member 'FMarinerMessageBoxOfferListInfo::OfferId' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxOfferListInfo, ButtonInstance) == 0x000010, "Member 'FMarinerMessageBoxOfferListInfo::ButtonInstance' has a wrong offset!");

// ScriptStruct Mariner.MarinerMessageBoxOfferListData
// 0x0060 (0x0110 - 0x00B0)
struct FMarinerMessageBoxOfferListData final : public FMarinerMessageBoxBaseData
{
public:
	class FText                                   Header;                                            // 0x00B0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x00C8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMarinerMessageBoxOfferListInfo> Offers;                                            // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FMarinerMessageBoxOfferListInfo> NativeOffers;                                      // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& OfferId, bool bStandardOffer)> OfferSelectedCallback;                             // 0x0100(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMessageBoxOfferListData) == 0x000008, "Wrong alignment on FMarinerMessageBoxOfferListData");
static_assert(sizeof(FMarinerMessageBoxOfferListData) == 0x000110, "Wrong size on FMarinerMessageBoxOfferListData");
static_assert(offsetof(FMarinerMessageBoxOfferListData, Header) == 0x0000B0, "Member 'FMarinerMessageBoxOfferListData::Header' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxOfferListData, Description) == 0x0000C8, "Member 'FMarinerMessageBoxOfferListData::Description' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxOfferListData, Offers) == 0x0000E0, "Member 'FMarinerMessageBoxOfferListData::Offers' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxOfferListData, NativeOffers) == 0x0000F0, "Member 'FMarinerMessageBoxOfferListData::NativeOffers' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxOfferListData, OfferSelectedCallback) == 0x000100, "Member 'FMarinerMessageBoxOfferListData::OfferSelectedCallback' has a wrong offset!");

// ScriptStruct Mariner.PooledActorSpawnInfo
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FPooledActorSpawnInfo final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Instigator;                                        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPooledActorSpawnInfo) == 0x000010, "Wrong alignment on FPooledActorSpawnInfo");
static_assert(sizeof(FPooledActorSpawnInfo) == 0x000060, "Wrong size on FPooledActorSpawnInfo");
static_assert(offsetof(FPooledActorSpawnInfo, Owner) == 0x000048, "Member 'FPooledActorSpawnInfo::Owner' has a wrong offset!");
static_assert(offsetof(FPooledActorSpawnInfo, Instigator) == 0x000050, "Member 'FPooledActorSpawnInfo::Instigator' has a wrong offset!");

// ScriptStruct Mariner.MarinerAnimNode_CopyAnimCurves
// 0x0088 (0x0098 - 0x0010)
struct FMarinerAnimNode_CopyAnimCurves final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              CurveSource;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CurveNames;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  SkeletonGuid;                                      // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  VirtualBoneGuid;                                   // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_64[0x34];                                      // 0x0064(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerAnimNode_CopyAnimCurves) == 0x000008, "Wrong alignment on FMarinerAnimNode_CopyAnimCurves");
static_assert(sizeof(FMarinerAnimNode_CopyAnimCurves) == 0x000098, "Wrong size on FMarinerAnimNode_CopyAnimCurves");
static_assert(offsetof(FMarinerAnimNode_CopyAnimCurves, BasePose) == 0x000010, "Member 'FMarinerAnimNode_CopyAnimCurves::BasePose' has a wrong offset!");
static_assert(offsetof(FMarinerAnimNode_CopyAnimCurves, CurveSource) == 0x000020, "Member 'FMarinerAnimNode_CopyAnimCurves::CurveSource' has a wrong offset!");
static_assert(offsetof(FMarinerAnimNode_CopyAnimCurves, CurveNames) == 0x000030, "Member 'FMarinerAnimNode_CopyAnimCurves::CurveNames' has a wrong offset!");
static_assert(offsetof(FMarinerAnimNode_CopyAnimCurves, LODThreshold) == 0x000040, "Member 'FMarinerAnimNode_CopyAnimCurves::LODThreshold' has a wrong offset!");
static_assert(offsetof(FMarinerAnimNode_CopyAnimCurves, SkeletonGuid) == 0x000044, "Member 'FMarinerAnimNode_CopyAnimCurves::SkeletonGuid' has a wrong offset!");
static_assert(offsetof(FMarinerAnimNode_CopyAnimCurves, VirtualBoneGuid) == 0x000054, "Member 'FMarinerAnimNode_CopyAnimCurves::VirtualBoneGuid' has a wrong offset!");

// ScriptStruct Mariner.MarinerActorTypePool
// 0x0028 (0x0028 - 0x0000)
struct FMarinerActorTypePool final
{
public:
	TSubclassOf<class AActor>                     ActorType;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         AllocatedActors;                                   // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         FreeActors;                                        // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerActorTypePool) == 0x000008, "Wrong alignment on FMarinerActorTypePool");
static_assert(sizeof(FMarinerActorTypePool) == 0x000028, "Wrong size on FMarinerActorTypePool");
static_assert(offsetof(FMarinerActorTypePool, ActorType) == 0x000000, "Member 'FMarinerActorTypePool::ActorType' has a wrong offset!");
static_assert(offsetof(FMarinerActorTypePool, AllocatedActors) == 0x000008, "Member 'FMarinerActorTypePool::AllocatedActors' has a wrong offset!");
static_assert(offsetof(FMarinerActorTypePool, FreeActors) == 0x000018, "Member 'FMarinerActorTypePool::FreeActors' has a wrong offset!");

// ScriptStruct Mariner.MarinerAimingCone
// 0x0010 (0x0010 - 0x0000)
struct FMarinerAimingCone final
{
public:
	float                                         HalfAngle;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DistanceFalloffCurve;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerAimingCone) == 0x000008, "Wrong alignment on FMarinerAimingCone");
static_assert(sizeof(FMarinerAimingCone) == 0x000010, "Wrong size on FMarinerAimingCone");
static_assert(offsetof(FMarinerAimingCone, HalfAngle) == 0x000000, "Member 'FMarinerAimingCone::HalfAngle' has a wrong offset!");
static_assert(offsetof(FMarinerAimingCone, MaxDistance) == 0x000004, "Member 'FMarinerAimingCone::MaxDistance' has a wrong offset!");
static_assert(offsetof(FMarinerAimingCone, DistanceFalloffCurve) == 0x000008, "Member 'FMarinerAimingCone::DistanceFalloffCurve' has a wrong offset!");

// ScriptStruct Mariner.MarinerAnimatedProgressWidgetAnimations
// 0x0018 (0x0018 - 0x0000)
struct FMarinerAnimatedProgressWidgetAnimations final
{
public:
	class UWidgetAnimation*                       LevelUpAnimation;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       LevelDownAnimation;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       ProgressLoopAnimation;                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerAnimatedProgressWidgetAnimations) == 0x000008, "Wrong alignment on FMarinerAnimatedProgressWidgetAnimations");
static_assert(sizeof(FMarinerAnimatedProgressWidgetAnimations) == 0x000018, "Wrong size on FMarinerAnimatedProgressWidgetAnimations");
static_assert(offsetof(FMarinerAnimatedProgressWidgetAnimations, LevelUpAnimation) == 0x000000, "Member 'FMarinerAnimatedProgressWidgetAnimations::LevelUpAnimation' has a wrong offset!");
static_assert(offsetof(FMarinerAnimatedProgressWidgetAnimations, LevelDownAnimation) == 0x000008, "Member 'FMarinerAnimatedProgressWidgetAnimations::LevelDownAnimation' has a wrong offset!");
static_assert(offsetof(FMarinerAnimatedProgressWidgetAnimations, ProgressLoopAnimation) == 0x000010, "Member 'FMarinerAnimatedProgressWidgetAnimations::ProgressLoopAnimation' has a wrong offset!");

// ScriptStruct Mariner.MarinerUIItemSizeDefinition
// 0x0008 (0x0008 - 0x0000)
struct FMarinerUIItemSizeDefinition final
{
public:
	float                                         ColumnScalar;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RowScalar;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerUIItemSizeDefinition) == 0x000004, "Wrong alignment on FMarinerUIItemSizeDefinition");
static_assert(sizeof(FMarinerUIItemSizeDefinition) == 0x000008, "Wrong size on FMarinerUIItemSizeDefinition");
static_assert(offsetof(FMarinerUIItemSizeDefinition, ColumnScalar) == 0x000000, "Member 'FMarinerUIItemSizeDefinition::ColumnScalar' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizeDefinition, RowScalar) == 0x000004, "Member 'FMarinerUIItemSizeDefinition::RowScalar' has a wrong offset!");

// ScriptStruct Mariner.ArtifactEventEffects
// 0x0020 (0x0020 - 0x0000)
struct FArtifactEventEffects final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    EventEffects;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UMarinerAbility>>    GrantedAbilities;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArtifactEventEffects) == 0x000008, "Wrong alignment on FArtifactEventEffects");
static_assert(sizeof(FArtifactEventEffects) == 0x000020, "Wrong size on FArtifactEventEffects");
static_assert(offsetof(FArtifactEventEffects, EventEffects) == 0x000000, "Member 'FArtifactEventEffects::EventEffects' has a wrong offset!");
static_assert(offsetof(FArtifactEventEffects, GrantedAbilities) == 0x000010, "Member 'FArtifactEventEffects::GrantedAbilities' has a wrong offset!");

// ScriptStruct Mariner.ArtifactEventPayload
// 0x0001 (0x0001 - 0x0000)
struct FArtifactEventPayload final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArtifactEventPayload) == 0x000001, "Wrong alignment on FArtifactEventPayload");
static_assert(sizeof(FArtifactEventPayload) == 0x000001, "Wrong size on FArtifactEventPayload");

// ScriptStruct Mariner.MarinerUIItemSizeDefinitions
// 0x0018 (0x0018 - 0x0000)
struct FMarinerUIItemSizeDefinitions final
{
public:
	struct FMarinerUIItemSizeDefinition           Small;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarinerUIItemSizeDefinition           Medium;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarinerUIItemSizeDefinition           Large;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerUIItemSizeDefinitions) == 0x000004, "Wrong alignment on FMarinerUIItemSizeDefinitions");
static_assert(sizeof(FMarinerUIItemSizeDefinitions) == 0x000018, "Wrong size on FMarinerUIItemSizeDefinitions");
static_assert(offsetof(FMarinerUIItemSizeDefinitions, Small) == 0x000000, "Member 'FMarinerUIItemSizeDefinitions::Small' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizeDefinitions, Medium) == 0x000008, "Member 'FMarinerUIItemSizeDefinitions::Medium' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizeDefinitions, Large) == 0x000010, "Member 'FMarinerUIItemSizeDefinitions::Large' has a wrong offset!");

// ScriptStruct Mariner.MarinerArtifactUIData
// 0x00F8 (0x0100 - 0x0008)
struct FMarinerArtifactUIData final : public FTableRowBase
{
public:
	int32                                         SortID;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ArtifactName;                                      // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   DetailedDescription;                               // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   LoreDescription;                                   // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FArtifactImprovementUIData>     ImprovementUIData;                                 // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ButtonIcon;                                        // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerLootCardDataAsset> LootCard;                                          // 0x00B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarinerRarityDataAsset> Rarity;                                            // 0x00D8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerArtifactUIData) == 0x000008, "Wrong alignment on FMarinerArtifactUIData");
static_assert(sizeof(FMarinerArtifactUIData) == 0x000100, "Wrong size on FMarinerArtifactUIData");
static_assert(offsetof(FMarinerArtifactUIData, SortID) == 0x000008, "Member 'FMarinerArtifactUIData::SortID' has a wrong offset!");
static_assert(offsetof(FMarinerArtifactUIData, ArtifactName) == 0x000010, "Member 'FMarinerArtifactUIData::ArtifactName' has a wrong offset!");
static_assert(offsetof(FMarinerArtifactUIData, Description) == 0x000028, "Member 'FMarinerArtifactUIData::Description' has a wrong offset!");
static_assert(offsetof(FMarinerArtifactUIData, DetailedDescription) == 0x000040, "Member 'FMarinerArtifactUIData::DetailedDescription' has a wrong offset!");
static_assert(offsetof(FMarinerArtifactUIData, LoreDescription) == 0x000058, "Member 'FMarinerArtifactUIData::LoreDescription' has a wrong offset!");
static_assert(offsetof(FMarinerArtifactUIData, ImprovementUIData) == 0x000070, "Member 'FMarinerArtifactUIData::ImprovementUIData' has a wrong offset!");
static_assert(offsetof(FMarinerArtifactUIData, Level) == 0x000080, "Member 'FMarinerArtifactUIData::Level' has a wrong offset!");
static_assert(offsetof(FMarinerArtifactUIData, ButtonIcon) == 0x000088, "Member 'FMarinerArtifactUIData::ButtonIcon' has a wrong offset!");
static_assert(offsetof(FMarinerArtifactUIData, LootCard) == 0x0000B0, "Member 'FMarinerArtifactUIData::LootCard' has a wrong offset!");
static_assert(offsetof(FMarinerArtifactUIData, Rarity) == 0x0000D8, "Member 'FMarinerArtifactUIData::Rarity' has a wrong offset!");

// ScriptStruct Mariner.MarinerComponentMoveData
// 0x0040 (0x0040 - 0x0000)
struct FMarinerComponentMoveData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TranslationScale;                                  // 0x0014(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           TranslationCurve;                                  // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           RotationCurve;                                     // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTimeOffset;                                   // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerComponentMoveData) == 0x000008, "Wrong alignment on FMarinerComponentMoveData");
static_assert(sizeof(FMarinerComponentMoveData) == 0x000040, "Wrong size on FMarinerComponentMoveData");
static_assert(offsetof(FMarinerComponentMoveData, Name) == 0x000000, "Member 'FMarinerComponentMoveData::Name' has a wrong offset!");
static_assert(offsetof(FMarinerComponentMoveData, Duration) == 0x000010, "Member 'FMarinerComponentMoveData::Duration' has a wrong offset!");
static_assert(offsetof(FMarinerComponentMoveData, TranslationScale) == 0x000014, "Member 'FMarinerComponentMoveData::TranslationScale' has a wrong offset!");
static_assert(offsetof(FMarinerComponentMoveData, TranslationCurve) == 0x000020, "Member 'FMarinerComponentMoveData::TranslationCurve' has a wrong offset!");
static_assert(offsetof(FMarinerComponentMoveData, RotationCurve) == 0x000028, "Member 'FMarinerComponentMoveData::RotationCurve' has a wrong offset!");
static_assert(offsetof(FMarinerComponentMoveData, bLoop) == 0x000030, "Member 'FMarinerComponentMoveData::bLoop' has a wrong offset!");
static_assert(offsetof(FMarinerComponentMoveData, StartTimeOffset) == 0x000034, "Member 'FMarinerComponentMoveData::StartTimeOffset' has a wrong offset!");

// ScriptStruct Mariner.MarinerComponentMoveDataSet
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FMarinerComponentMoveDataSet final
{
public:
	TArray<struct FMarinerComponentMoveData>      MoveData;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_10[0x30];                                      // 0x0010(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerComponentMoveDataSet) == 0x000010, "Wrong alignment on FMarinerComponentMoveDataSet");
static_assert(sizeof(FMarinerComponentMoveDataSet) == 0x000040, "Wrong size on FMarinerComponentMoveDataSet");
static_assert(offsetof(FMarinerComponentMoveDataSet, MoveData) == 0x000000, "Member 'FMarinerComponentMoveDataSet::MoveData' has a wrong offset!");

// ScriptStruct Mariner.MarinerNewsLookup
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMarinerNewsLookup final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerNewsLookup) == 0x000008, "Wrong alignment on FMarinerNewsLookup");
static_assert(sizeof(FMarinerNewsLookup) == 0x000010, "Wrong size on FMarinerNewsLookup");

// ScriptStruct Mariner.MarinerMessageBoxBlastPassOfferData
// 0x0010 (0x00C0 - 0x00B0)
struct FMarinerMessageBoxBlastPassOfferData final : public FMarinerMessageBoxBaseData
{
public:
	class FString                                 OfferId;                                           // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMessageBoxBlastPassOfferData) == 0x000008, "Wrong alignment on FMarinerMessageBoxBlastPassOfferData");
static_assert(sizeof(FMarinerMessageBoxBlastPassOfferData) == 0x0000C0, "Wrong size on FMarinerMessageBoxBlastPassOfferData");
static_assert(offsetof(FMarinerMessageBoxBlastPassOfferData, OfferId) == 0x0000B0, "Member 'FMarinerMessageBoxBlastPassOfferData::OfferId' has a wrong offset!");

// ScriptStruct Mariner.MarinerMessageBoxBlastPassTierPurchaseData
// 0x0070 (0x0120 - 0x00B0)
struct FMarinerMessageBoxBlastPassTierPurchaseData final : public FMarinerMessageBoxBaseData
{
public:
	struct FMangoBlastPassDefinition              blastpass;                                         // 0x00B0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MinTier;                                           // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTier;                                           // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMessageBoxBlastPassTierPurchaseData) == 0x000008, "Wrong alignment on FMarinerMessageBoxBlastPassTierPurchaseData");
static_assert(sizeof(FMarinerMessageBoxBlastPassTierPurchaseData) == 0x000120, "Wrong size on FMarinerMessageBoxBlastPassTierPurchaseData");
static_assert(offsetof(FMarinerMessageBoxBlastPassTierPurchaseData, blastpass) == 0x0000B0, "Member 'FMarinerMessageBoxBlastPassTierPurchaseData::blastpass' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxBlastPassTierPurchaseData, MinTier) == 0x000118, "Member 'FMarinerMessageBoxBlastPassTierPurchaseData::MinTier' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxBlastPassTierPurchaseData, MaxTier) == 0x00011C, "Member 'FMarinerMessageBoxBlastPassTierPurchaseData::MaxTier' has a wrong offset!");

// ScriptStruct Mariner.MarinerBotTypeInfo
// 0x0058 (0x0058 - 0x0000)
struct FMarinerBotTypeInfo final
{
public:
	TMap<EBotDifficultyLevel, class UMarinerBotDifficultyData*> DifficultyOverrides;                               // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         RandomSpawnWeight;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerBotTypeInfo) == 0x000008, "Wrong alignment on FMarinerBotTypeInfo");
static_assert(sizeof(FMarinerBotTypeInfo) == 0x000058, "Wrong size on FMarinerBotTypeInfo");
static_assert(offsetof(FMarinerBotTypeInfo, DifficultyOverrides) == 0x000000, "Member 'FMarinerBotTypeInfo::DifficultyOverrides' has a wrong offset!");
static_assert(offsetof(FMarinerBotTypeInfo, RandomSpawnWeight) == 0x000050, "Member 'FMarinerBotTypeInfo::RandomSpawnWeight' has a wrong offset!");

// ScriptStruct Mariner.MarinerGamepadPromptAssets
// 0x0028 (0x0028 - 0x0000)
struct FMarinerGamepadPromptAssets final
{
public:
	class UImage*                                 GamepadPrimaryIcon;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             PlusText;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 GamepadSecondaryIcon;                              // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Image;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TextBlock;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerGamepadPromptAssets) == 0x000008, "Wrong alignment on FMarinerGamepadPromptAssets");
static_assert(sizeof(FMarinerGamepadPromptAssets) == 0x000028, "Wrong size on FMarinerGamepadPromptAssets");
static_assert(offsetof(FMarinerGamepadPromptAssets, GamepadPrimaryIcon) == 0x000000, "Member 'FMarinerGamepadPromptAssets::GamepadPrimaryIcon' has a wrong offset!");
static_assert(offsetof(FMarinerGamepadPromptAssets, PlusText) == 0x000008, "Member 'FMarinerGamepadPromptAssets::PlusText' has a wrong offset!");
static_assert(offsetof(FMarinerGamepadPromptAssets, GamepadSecondaryIcon) == 0x000010, "Member 'FMarinerGamepadPromptAssets::GamepadSecondaryIcon' has a wrong offset!");
static_assert(offsetof(FMarinerGamepadPromptAssets, Image) == 0x000018, "Member 'FMarinerGamepadPromptAssets::Image' has a wrong offset!");
static_assert(offsetof(FMarinerGamepadPromptAssets, TextBlock) == 0x000020, "Member 'FMarinerGamepadPromptAssets::TextBlock' has a wrong offset!");

// ScriptStruct Mariner.AimTrackingDeviation
// 0x0010 (0x0010 - 0x0000)
struct FAimTrackingDeviation final
{
public:
	class UCurveFloat*                            AngleDeviationAtDistanceCurve;                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpectedProjectileSpeed;                           // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeadBlendFactor;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimTrackingDeviation) == 0x000008, "Wrong alignment on FAimTrackingDeviation");
static_assert(sizeof(FAimTrackingDeviation) == 0x000010, "Wrong size on FAimTrackingDeviation");
static_assert(offsetof(FAimTrackingDeviation, AngleDeviationAtDistanceCurve) == 0x000000, "Member 'FAimTrackingDeviation::AngleDeviationAtDistanceCurve' has a wrong offset!");
static_assert(offsetof(FAimTrackingDeviation, ExpectedProjectileSpeed) == 0x000008, "Member 'FAimTrackingDeviation::ExpectedProjectileSpeed' has a wrong offset!");
static_assert(offsetof(FAimTrackingDeviation, LeadBlendFactor) == 0x00000C, "Member 'FAimTrackingDeviation::LeadBlendFactor' has a wrong offset!");

// ScriptStruct Mariner.CameraShakeParameter
// 0x0010 (0x0010 - 0x0000)
struct FCameraShakeParameter final
{
public:
	float                                         MaximumDamage;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShake>               ShakeType;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraShakeParameter) == 0x000008, "Wrong alignment on FCameraShakeParameter");
static_assert(sizeof(FCameraShakeParameter) == 0x000010, "Wrong size on FCameraShakeParameter");
static_assert(offsetof(FCameraShakeParameter, MaximumDamage) == 0x000000, "Member 'FCameraShakeParameter::MaximumDamage' has a wrong offset!");
static_assert(offsetof(FCameraShakeParameter, ShakeType) == 0x000008, "Member 'FCameraShakeParameter::ShakeType' has a wrong offset!");

// ScriptStruct Mariner.MarinerMatSwapData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMarinerMatSwapData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerMatSwapData) == 0x000008, "Wrong alignment on FMarinerMatSwapData");
static_assert(sizeof(FMarinerMatSwapData) == 0x000018, "Wrong size on FMarinerMatSwapData");

// ScriptStruct Mariner.AnalogFireState
// 0x0010 (0x0010 - 0x0000)
struct FAnalogFireState final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Threshold;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnalogFireState) == 0x000004, "Wrong alignment on FAnalogFireState");
static_assert(sizeof(FAnalogFireState) == 0x000010, "Wrong size on FAnalogFireState");
static_assert(offsetof(FAnalogFireState, Threshold) == 0x000008, "Member 'FAnalogFireState::Threshold' has a wrong offset!");

// ScriptStruct Mariner.MarinerRocketTrophySpawnerData
// 0x0018 (0x0018 - 0x0000)
struct FMarinerRocketTrophySpawnerData final
{
public:
	float                                         TimeStampStarted;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SpawnNewTrophyTimer;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AMarinerRocketTrophySpawner> RocketTrophySpawner;                               // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerRocketTrophySpawnerData) == 0x000008, "Wrong alignment on FMarinerRocketTrophySpawnerData");
static_assert(sizeof(FMarinerRocketTrophySpawnerData) == 0x000018, "Wrong size on FMarinerRocketTrophySpawnerData");
static_assert(offsetof(FMarinerRocketTrophySpawnerData, TimeStampStarted) == 0x000000, "Member 'FMarinerRocketTrophySpawnerData::TimeStampStarted' has a wrong offset!");
static_assert(offsetof(FMarinerRocketTrophySpawnerData, SpawnNewTrophyTimer) == 0x000008, "Member 'FMarinerRocketTrophySpawnerData::SpawnNewTrophyTimer' has a wrong offset!");
static_assert(offsetof(FMarinerRocketTrophySpawnerData, RocketTrophySpawner) == 0x000010, "Member 'FMarinerRocketTrophySpawnerData::RocketTrophySpawner' has a wrong offset!");

// ScriptStruct Mariner.MarinerSettingBaseAssets
// 0x0038 (0x0038 - 0x0000)
struct FMarinerSettingBaseAssets
{
public:
	class UMarinerButton*                         ClickableArea;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             LabelTextBlock;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Background;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Highlight;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            UnviewedWidget;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       HoveredAnimation;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       UnhoveredAnimation;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerSettingBaseAssets) == 0x000008, "Wrong alignment on FMarinerSettingBaseAssets");
static_assert(sizeof(FMarinerSettingBaseAssets) == 0x000038, "Wrong size on FMarinerSettingBaseAssets");
static_assert(offsetof(FMarinerSettingBaseAssets, ClickableArea) == 0x000000, "Member 'FMarinerSettingBaseAssets::ClickableArea' has a wrong offset!");
static_assert(offsetof(FMarinerSettingBaseAssets, LabelTextBlock) == 0x000008, "Member 'FMarinerSettingBaseAssets::LabelTextBlock' has a wrong offset!");
static_assert(offsetof(FMarinerSettingBaseAssets, Background) == 0x000010, "Member 'FMarinerSettingBaseAssets::Background' has a wrong offset!");
static_assert(offsetof(FMarinerSettingBaseAssets, Highlight) == 0x000018, "Member 'FMarinerSettingBaseAssets::Highlight' has a wrong offset!");
static_assert(offsetof(FMarinerSettingBaseAssets, UnviewedWidget) == 0x000020, "Member 'FMarinerSettingBaseAssets::UnviewedWidget' has a wrong offset!");
static_assert(offsetof(FMarinerSettingBaseAssets, HoveredAnimation) == 0x000028, "Member 'FMarinerSettingBaseAssets::HoveredAnimation' has a wrong offset!");
static_assert(offsetof(FMarinerSettingBaseAssets, UnhoveredAnimation) == 0x000030, "Member 'FMarinerSettingBaseAssets::UnhoveredAnimation' has a wrong offset!");

// ScriptStruct Mariner.MarinerSettingSliderAssets
// 0x0010 (0x0048 - 0x0038)
struct FMarinerSettingSliderAssets final : public FMarinerSettingBaseAssets
{
public:
	class UMarinerSlider*                         Slider;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             ValueText;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerSettingSliderAssets) == 0x000008, "Wrong alignment on FMarinerSettingSliderAssets");
static_assert(sizeof(FMarinerSettingSliderAssets) == 0x000048, "Wrong size on FMarinerSettingSliderAssets");
static_assert(offsetof(FMarinerSettingSliderAssets, Slider) == 0x000038, "Member 'FMarinerSettingSliderAssets::Slider' has a wrong offset!");
static_assert(offsetof(FMarinerSettingSliderAssets, ValueText) == 0x000040, "Member 'FMarinerSettingSliderAssets::ValueText' has a wrong offset!");

// ScriptStruct Mariner.MarinerMegablastSplatState
// 0x0030 (0x0030 - 0x0000)
struct FMarinerMegablastSplatState final
{
public:
	struct FVector                                PositionAtKnockout;                                // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VelocityAtKnockout;                                // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentMeshOffset;                                 // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplatStartTimestamp;                               // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccruedSplatTime;                                  // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSplatActive;                                    // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerMegablastSplatState) == 0x000004, "Wrong alignment on FMarinerMegablastSplatState");
static_assert(sizeof(FMarinerMegablastSplatState) == 0x000030, "Wrong size on FMarinerMegablastSplatState");
static_assert(offsetof(FMarinerMegablastSplatState, PositionAtKnockout) == 0x000000, "Member 'FMarinerMegablastSplatState::PositionAtKnockout' has a wrong offset!");
static_assert(offsetof(FMarinerMegablastSplatState, VelocityAtKnockout) == 0x00000C, "Member 'FMarinerMegablastSplatState::VelocityAtKnockout' has a wrong offset!");
static_assert(offsetof(FMarinerMegablastSplatState, CurrentMeshOffset) == 0x000018, "Member 'FMarinerMegablastSplatState::CurrentMeshOffset' has a wrong offset!");
static_assert(offsetof(FMarinerMegablastSplatState, SplatStartTimestamp) == 0x000024, "Member 'FMarinerMegablastSplatState::SplatStartTimestamp' has a wrong offset!");
static_assert(offsetof(FMarinerMegablastSplatState, AccruedSplatTime) == 0x000028, "Member 'FMarinerMegablastSplatState::AccruedSplatTime' has a wrong offset!");
static_assert(offsetof(FMarinerMegablastSplatState, bIsSplatActive) == 0x00002C, "Member 'FMarinerMegablastSplatState::bIsSplatActive' has a wrong offset!");

// ScriptStruct Mariner.MarinerCharacterFootIKData
// 0x003C (0x003C - 0x0000)
struct FMarinerCharacterFootIKData final
{
public:
	struct FVector                                IKRightFootEffectorLocation;                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                IKLeftFootEffectorLocation;                        // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                IKRightFootNormal;                                 // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                IKLeftFootNormal;                                  // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKRightFootAlpha;                                  // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKLeftFootAlpha;                                   // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKOffset;                                          // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerCharacterFootIKData) == 0x000004, "Wrong alignment on FMarinerCharacterFootIKData");
static_assert(sizeof(FMarinerCharacterFootIKData) == 0x00003C, "Wrong size on FMarinerCharacterFootIKData");
static_assert(offsetof(FMarinerCharacterFootIKData, IKRightFootEffectorLocation) == 0x000000, "Member 'FMarinerCharacterFootIKData::IKRightFootEffectorLocation' has a wrong offset!");
static_assert(offsetof(FMarinerCharacterFootIKData, IKLeftFootEffectorLocation) == 0x00000C, "Member 'FMarinerCharacterFootIKData::IKLeftFootEffectorLocation' has a wrong offset!");
static_assert(offsetof(FMarinerCharacterFootIKData, IKRightFootNormal) == 0x000018, "Member 'FMarinerCharacterFootIKData::IKRightFootNormal' has a wrong offset!");
static_assert(offsetof(FMarinerCharacterFootIKData, IKLeftFootNormal) == 0x000024, "Member 'FMarinerCharacterFootIKData::IKLeftFootNormal' has a wrong offset!");
static_assert(offsetof(FMarinerCharacterFootIKData, IKRightFootAlpha) == 0x000030, "Member 'FMarinerCharacterFootIKData::IKRightFootAlpha' has a wrong offset!");
static_assert(offsetof(FMarinerCharacterFootIKData, IKLeftFootAlpha) == 0x000034, "Member 'FMarinerCharacterFootIKData::IKLeftFootAlpha' has a wrong offset!");
static_assert(offsetof(FMarinerCharacterFootIKData, IKOffset) == 0x000038, "Member 'FMarinerCharacterFootIKData::IKOffset' has a wrong offset!");

// ScriptStruct Mariner.MarinerCone
// 0x000C (0x000C - 0x0000)
struct FMarinerCone final
{
public:
	float                                         HalfAngle;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Length;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerCone) == 0x000004, "Wrong alignment on FMarinerCone");
static_assert(sizeof(FMarinerCone) == 0x00000C, "Wrong size on FMarinerCone");
static_assert(offsetof(FMarinerCone, HalfAngle) == 0x000000, "Member 'FMarinerCone::HalfAngle' has a wrong offset!");
static_assert(offsetof(FMarinerCone, Length) == 0x000008, "Member 'FMarinerCone::Length' has a wrong offset!");

// ScriptStruct Mariner.MarinerCharacterFootstepEffectSet
// 0x0020 (0x0020 - 0x0000)
struct FMarinerCharacterFootstepEffectSet final
{
public:
	class UAkAudioEvent*                          LeftFootstepAudioEvent;                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          RightFootstepAudioEvent;                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        LeftFootstepVFX;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        RightFootstepVFX;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerCharacterFootstepEffectSet) == 0x000008, "Wrong alignment on FMarinerCharacterFootstepEffectSet");
static_assert(sizeof(FMarinerCharacterFootstepEffectSet) == 0x000020, "Wrong size on FMarinerCharacterFootstepEffectSet");
static_assert(offsetof(FMarinerCharacterFootstepEffectSet, LeftFootstepAudioEvent) == 0x000000, "Member 'FMarinerCharacterFootstepEffectSet::LeftFootstepAudioEvent' has a wrong offset!");
static_assert(offsetof(FMarinerCharacterFootstepEffectSet, RightFootstepAudioEvent) == 0x000008, "Member 'FMarinerCharacterFootstepEffectSet::RightFootstepAudioEvent' has a wrong offset!");
static_assert(offsetof(FMarinerCharacterFootstepEffectSet, LeftFootstepVFX) == 0x000010, "Member 'FMarinerCharacterFootstepEffectSet::LeftFootstepVFX' has a wrong offset!");
static_assert(offsetof(FMarinerCharacterFootstepEffectSet, RightFootstepVFX) == 0x000018, "Member 'FMarinerCharacterFootstepEffectSet::RightFootstepVFX' has a wrong offset!");

// ScriptStruct Mariner.ArenaReturnData
// 0x01B8 (0x01B8 - 0x0000)
struct FArenaReturnData final
{
public:
	class UAkAudioEvent*                          KnockedOutAudioEvent;                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            KnockedOutHoldCurve;                               // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockedoutHoldTime;                                // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxKnockedOutHoldDistance;                         // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallbackTeleportDelayTime;                         // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharacterMoveStartCurve;                           // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CharacterMoveEndCurve;                             // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterEndArenaReturnRotationBlendTime;          // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerCharacterMontage*               KnockedOutAnimation;                               // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ReturningToArenaEffect;                            // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturningToArenaEffectUniformScale;                // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ReturnedToArenaEffect;                             // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PathfindingCollisionShapeInflation;                // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstPersonReturnCameraTransitionBlendTime;        // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstPersonReturnCameraTransitionStartTime;        // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerCameraPerspective              KnockoutCameraPerspective;                         // 0x0068(0x00A8)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarinerCameraPerspective              ArenaReturnCameraPerspective;                      // 0x0110(0x00A8)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArenaReturnData) == 0x000008, "Wrong alignment on FArenaReturnData");
static_assert(sizeof(FArenaReturnData) == 0x0001B8, "Wrong size on FArenaReturnData");
static_assert(offsetof(FArenaReturnData, KnockedOutAudioEvent) == 0x000000, "Member 'FArenaReturnData::KnockedOutAudioEvent' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, KnockedOutHoldCurve) == 0x000008, "Member 'FArenaReturnData::KnockedOutHoldCurve' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, KnockedoutHoldTime) == 0x000010, "Member 'FArenaReturnData::KnockedoutHoldTime' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, MaxKnockedOutHoldDistance) == 0x000014, "Member 'FArenaReturnData::MaxKnockedOutHoldDistance' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, FallbackTeleportDelayTime) == 0x000018, "Member 'FArenaReturnData::FallbackTeleportDelayTime' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, CharacterMoveStartCurve) == 0x000020, "Member 'FArenaReturnData::CharacterMoveStartCurve' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, CharacterMoveEndCurve) == 0x000028, "Member 'FArenaReturnData::CharacterMoveEndCurve' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, CharacterEndArenaReturnRotationBlendTime) == 0x000030, "Member 'FArenaReturnData::CharacterEndArenaReturnRotationBlendTime' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, KnockedOutAnimation) == 0x000038, "Member 'FArenaReturnData::KnockedOutAnimation' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, ReturningToArenaEffect) == 0x000040, "Member 'FArenaReturnData::ReturningToArenaEffect' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, ReturningToArenaEffectUniformScale) == 0x000048, "Member 'FArenaReturnData::ReturningToArenaEffectUniformScale' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, ReturnedToArenaEffect) == 0x000050, "Member 'FArenaReturnData::ReturnedToArenaEffect' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, PathfindingCollisionShapeInflation) == 0x000058, "Member 'FArenaReturnData::PathfindingCollisionShapeInflation' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, FirstPersonReturnCameraTransitionBlendTime) == 0x00005C, "Member 'FArenaReturnData::FirstPersonReturnCameraTransitionBlendTime' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, FirstPersonReturnCameraTransitionStartTime) == 0x000060, "Member 'FArenaReturnData::FirstPersonReturnCameraTransitionStartTime' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, KnockoutCameraPerspective) == 0x000068, "Member 'FArenaReturnData::KnockoutCameraPerspective' has a wrong offset!");
static_assert(offsetof(FArenaReturnData, ArenaReturnCameraPerspective) == 0x000110, "Member 'FArenaReturnData::ArenaReturnCameraPerspective' has a wrong offset!");

// ScriptStruct Mariner.MarinerLinearColorStates
// 0x0030 (0x0030 - 0x0000)
struct FMarinerLinearColorStates final
{
public:
	struct FLinearColor                           Idle;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Highlighted;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Selected;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerLinearColorStates) == 0x000004, "Wrong alignment on FMarinerLinearColorStates");
static_assert(sizeof(FMarinerLinearColorStates) == 0x000030, "Wrong size on FMarinerLinearColorStates");
static_assert(offsetof(FMarinerLinearColorStates, Idle) == 0x000000, "Member 'FMarinerLinearColorStates::Idle' has a wrong offset!");
static_assert(offsetof(FMarinerLinearColorStates, Highlighted) == 0x000010, "Member 'FMarinerLinearColorStates::Highlighted' has a wrong offset!");
static_assert(offsetof(FMarinerLinearColorStates, Selected) == 0x000020, "Member 'FMarinerLinearColorStates::Selected' has a wrong offset!");

// ScriptStruct Mariner.MarinerPromptIconData
// 0x00D8 (0x00D8 - 0x0000)
struct FMarinerPromptIconData final
{
public:
	struct FSlateBrush                            Icon;                                              // 0x0000(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarinerLinearColorStates              Colors;                                            // 0x0088(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnabledForGamepad;                                // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledForKBM;                                    // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NarrationText;                                     // 0x00C0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerPromptIconData) == 0x000008, "Wrong alignment on FMarinerPromptIconData");
static_assert(sizeof(FMarinerPromptIconData) == 0x0000D8, "Wrong size on FMarinerPromptIconData");
static_assert(offsetof(FMarinerPromptIconData, Icon) == 0x000000, "Member 'FMarinerPromptIconData::Icon' has a wrong offset!");
static_assert(offsetof(FMarinerPromptIconData, Colors) == 0x000088, "Member 'FMarinerPromptIconData::Colors' has a wrong offset!");
static_assert(offsetof(FMarinerPromptIconData, bEnabledForGamepad) == 0x0000B8, "Member 'FMarinerPromptIconData::bEnabledForGamepad' has a wrong offset!");
static_assert(offsetof(FMarinerPromptIconData, bEnabledForKBM) == 0x0000B9, "Member 'FMarinerPromptIconData::bEnabledForKBM' has a wrong offset!");
static_assert(offsetof(FMarinerPromptIconData, NarrationText) == 0x0000C0, "Member 'FMarinerPromptIconData::NarrationText' has a wrong offset!");

// ScriptStruct Mariner.MarinerPromptData
// 0x0118 (0x0118 - 0x0000)
struct FMarinerPromptData final
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayText;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bShowForGamepad;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowForKBM;                                       // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKBMIsClickable;                                   // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKBMShowKey;                                       // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerPromptInputDisplay                    InputDisplay;                                      // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerPromptIconData                 IconData;                                          // 0x0028(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UObject*                                CustomInputWidget;                                 // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x10];                                     // 0x0108(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerPromptData) == 0x000008, "Wrong alignment on FMarinerPromptData");
static_assert(sizeof(FMarinerPromptData) == 0x000118, "Wrong size on FMarinerPromptData");
static_assert(offsetof(FMarinerPromptData, InputAction) == 0x000000, "Member 'FMarinerPromptData::InputAction' has a wrong offset!");
static_assert(offsetof(FMarinerPromptData, DisplayText) == 0x000008, "Member 'FMarinerPromptData::DisplayText' has a wrong offset!");
static_assert(offsetof(FMarinerPromptData, bShowForGamepad) == 0x000020, "Member 'FMarinerPromptData::bShowForGamepad' has a wrong offset!");
static_assert(offsetof(FMarinerPromptData, bShowForKBM) == 0x000021, "Member 'FMarinerPromptData::bShowForKBM' has a wrong offset!");
static_assert(offsetof(FMarinerPromptData, bKBMIsClickable) == 0x000022, "Member 'FMarinerPromptData::bKBMIsClickable' has a wrong offset!");
static_assert(offsetof(FMarinerPromptData, bKBMShowKey) == 0x000023, "Member 'FMarinerPromptData::bKBMShowKey' has a wrong offset!");
static_assert(offsetof(FMarinerPromptData, InputDisplay) == 0x000024, "Member 'FMarinerPromptData::InputDisplay' has a wrong offset!");
static_assert(offsetof(FMarinerPromptData, IconData) == 0x000028, "Member 'FMarinerPromptData::IconData' has a wrong offset!");
static_assert(offsetof(FMarinerPromptData, CustomInputWidget) == 0x000100, "Member 'FMarinerPromptData::CustomInputWidget' has a wrong offset!");

// ScriptStruct Mariner.MarinerCustomDropdownSFX
// 0x0028 (0x0028 - 0x0000)
struct FMarinerCustomDropdownSFX final
{
public:
	class UAkAudioEvent*                          OpenedSFX;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          OptionHighlightedSFX;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          OptionUnhighlightedSFX;                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          OptionSelectedSFX;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          CanceledSFX;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerCustomDropdownSFX) == 0x000008, "Wrong alignment on FMarinerCustomDropdownSFX");
static_assert(sizeof(FMarinerCustomDropdownSFX) == 0x000028, "Wrong size on FMarinerCustomDropdownSFX");
static_assert(offsetof(FMarinerCustomDropdownSFX, OpenedSFX) == 0x000000, "Member 'FMarinerCustomDropdownSFX::OpenedSFX' has a wrong offset!");
static_assert(offsetof(FMarinerCustomDropdownSFX, OptionHighlightedSFX) == 0x000008, "Member 'FMarinerCustomDropdownSFX::OptionHighlightedSFX' has a wrong offset!");
static_assert(offsetof(FMarinerCustomDropdownSFX, OptionUnhighlightedSFX) == 0x000010, "Member 'FMarinerCustomDropdownSFX::OptionUnhighlightedSFX' has a wrong offset!");
static_assert(offsetof(FMarinerCustomDropdownSFX, OptionSelectedSFX) == 0x000018, "Member 'FMarinerCustomDropdownSFX::OptionSelectedSFX' has a wrong offset!");
static_assert(offsetof(FMarinerCustomDropdownSFX, CanceledSFX) == 0x000020, "Member 'FMarinerCustomDropdownSFX::CanceledSFX' has a wrong offset!");

// ScriptStruct Mariner.MarinerMessageBoxData
// 0x00C0 (0x0170 - 0x00B0)
struct FMarinerMessageBoxData final : public FMarinerMessageBoxBaseData
{
public:
	class FText                                   Header;                                            // 0x00B0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Body;                                              // 0x00C8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Icon;                                              // 0x00E0(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLoadSpinner;                                  // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerMessageBoxData) == 0x000008, "Wrong alignment on FMarinerMessageBoxData");
static_assert(sizeof(FMarinerMessageBoxData) == 0x000170, "Wrong size on FMarinerMessageBoxData");
static_assert(offsetof(FMarinerMessageBoxData, Header) == 0x0000B0, "Member 'FMarinerMessageBoxData::Header' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxData, Body) == 0x0000C8, "Member 'FMarinerMessageBoxData::Body' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxData, Icon) == 0x0000E0, "Member 'FMarinerMessageBoxData::Icon' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxData, Timer) == 0x000168, "Member 'FMarinerMessageBoxData::Timer' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxData, bShowLoadSpinner) == 0x00016C, "Member 'FMarinerMessageBoxData::bShowLoadSpinner' has a wrong offset!");

// ScriptStruct Mariner.MarinerCustomDropdownEditConfirmation
// 0x01C8 (0x01C8 - 0x0000)
struct FMarinerCustomDropdownEditConfirmation final
{
public:
	bool                                          bHasEditConfirmation;                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerMessageBoxData                 DefaultEditMessageBox;                             // 0x0008(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<int32, struct FMarinerMessageBoxData>    CustomEditMessageBox;                              // 0x0178(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerCustomDropdownEditConfirmation) == 0x000008, "Wrong alignment on FMarinerCustomDropdownEditConfirmation");
static_assert(sizeof(FMarinerCustomDropdownEditConfirmation) == 0x0001C8, "Wrong size on FMarinerCustomDropdownEditConfirmation");
static_assert(offsetof(FMarinerCustomDropdownEditConfirmation, bHasEditConfirmation) == 0x000000, "Member 'FMarinerCustomDropdownEditConfirmation::bHasEditConfirmation' has a wrong offset!");
static_assert(offsetof(FMarinerCustomDropdownEditConfirmation, DefaultEditMessageBox) == 0x000008, "Member 'FMarinerCustomDropdownEditConfirmation::DefaultEditMessageBox' has a wrong offset!");
static_assert(offsetof(FMarinerCustomDropdownEditConfirmation, CustomEditMessageBox) == 0x000178, "Member 'FMarinerCustomDropdownEditConfirmation::CustomEditMessageBox' has a wrong offset!");

// ScriptStruct Mariner.MarinerDamageThresholdEvent
// 0x0008 (0x0008 - 0x0000)
struct FMarinerDamageThresholdEvent final
{
public:
	float                                         DamageThreshold;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKillsObject;                                      // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerDamageThresholdEvent) == 0x000004, "Wrong alignment on FMarinerDamageThresholdEvent");
static_assert(sizeof(FMarinerDamageThresholdEvent) == 0x000008, "Wrong size on FMarinerDamageThresholdEvent");
static_assert(offsetof(FMarinerDamageThresholdEvent, DamageThreshold) == 0x000000, "Member 'FMarinerDamageThresholdEvent::DamageThreshold' has a wrong offset!");
static_assert(offsetof(FMarinerDamageThresholdEvent, bKillsObject) == 0x000004, "Member 'FMarinerDamageThresholdEvent::bKillsObject' has a wrong offset!");

// ScriptStruct Mariner.MarinerAOEObstructionTraceDebugRecord
// 0x0028 (0x0028 - 0x0000)
struct FMarinerAOEObstructionTraceDebugRecord final
{
public:
	bool                                          bIsAdjustmentTrace;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHadBlockingHit;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBlockingHitOnTargetComponent;                   // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TraceStart;                                        // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactPoint;                                       // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerAOEObstructionTraceDebugRecord) == 0x000004, "Wrong alignment on FMarinerAOEObstructionTraceDebugRecord");
static_assert(sizeof(FMarinerAOEObstructionTraceDebugRecord) == 0x000028, "Wrong size on FMarinerAOEObstructionTraceDebugRecord");
static_assert(offsetof(FMarinerAOEObstructionTraceDebugRecord, bIsAdjustmentTrace) == 0x000000, "Member 'FMarinerAOEObstructionTraceDebugRecord::bIsAdjustmentTrace' has a wrong offset!");
static_assert(offsetof(FMarinerAOEObstructionTraceDebugRecord, bHadBlockingHit) == 0x000001, "Member 'FMarinerAOEObstructionTraceDebugRecord::bHadBlockingHit' has a wrong offset!");
static_assert(offsetof(FMarinerAOEObstructionTraceDebugRecord, bIsBlockingHitOnTargetComponent) == 0x000002, "Member 'FMarinerAOEObstructionTraceDebugRecord::bIsBlockingHitOnTargetComponent' has a wrong offset!");
static_assert(offsetof(FMarinerAOEObstructionTraceDebugRecord, TraceStart) == 0x000004, "Member 'FMarinerAOEObstructionTraceDebugRecord::TraceStart' has a wrong offset!");
static_assert(offsetof(FMarinerAOEObstructionTraceDebugRecord, TraceEnd) == 0x000010, "Member 'FMarinerAOEObstructionTraceDebugRecord::TraceEnd' has a wrong offset!");
static_assert(offsetof(FMarinerAOEObstructionTraceDebugRecord, ImpactPoint) == 0x00001C, "Member 'FMarinerAOEObstructionTraceDebugRecord::ImpactPoint' has a wrong offset!");

// ScriptStruct Mariner.MarinerAOEObstructionTestDebugRecord
// 0x0020 (0x0020 - 0x0000)
struct FMarinerAOEObstructionTestDebugRecord final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentName;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarinerAOEObstructionTraceDebugRecord> ObstructionTraces;                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerAOEObstructionTestDebugRecord) == 0x000008, "Wrong alignment on FMarinerAOEObstructionTestDebugRecord");
static_assert(sizeof(FMarinerAOEObstructionTestDebugRecord) == 0x000020, "Wrong size on FMarinerAOEObstructionTestDebugRecord");
static_assert(offsetof(FMarinerAOEObstructionTestDebugRecord, ActorName) == 0x000000, "Member 'FMarinerAOEObstructionTestDebugRecord::ActorName' has a wrong offset!");
static_assert(offsetof(FMarinerAOEObstructionTestDebugRecord, ComponentName) == 0x000008, "Member 'FMarinerAOEObstructionTestDebugRecord::ComponentName' has a wrong offset!");
static_assert(offsetof(FMarinerAOEObstructionTestDebugRecord, ObstructionTraces) == 0x000010, "Member 'FMarinerAOEObstructionTestDebugRecord::ObstructionTraces' has a wrong offset!");

// ScriptStruct Mariner.MarinerActorDamagedDebugRecord
// 0x0040 (0x0040 - 0x0000)
struct FMarinerActorDamagedDebugRecord final
{
public:
	class FName                                   DamagedActorName;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClosestPointOnActorToDamage;                       // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageDirection;                                   // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualDamageTaken;                                 // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualImpulseApplied;                              // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDirection;                                  // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseOrigin;                                     // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerActorDamagedDebugRecord) == 0x000004, "Wrong alignment on FMarinerActorDamagedDebugRecord");
static_assert(sizeof(FMarinerActorDamagedDebugRecord) == 0x000040, "Wrong size on FMarinerActorDamagedDebugRecord");
static_assert(offsetof(FMarinerActorDamagedDebugRecord, DamagedActorName) == 0x000000, "Member 'FMarinerActorDamagedDebugRecord::DamagedActorName' has a wrong offset!");
static_assert(offsetof(FMarinerActorDamagedDebugRecord, ClosestPointOnActorToDamage) == 0x000008, "Member 'FMarinerActorDamagedDebugRecord::ClosestPointOnActorToDamage' has a wrong offset!");
static_assert(offsetof(FMarinerActorDamagedDebugRecord, DamageDirection) == 0x000014, "Member 'FMarinerActorDamagedDebugRecord::DamageDirection' has a wrong offset!");
static_assert(offsetof(FMarinerActorDamagedDebugRecord, ActualDamageTaken) == 0x000020, "Member 'FMarinerActorDamagedDebugRecord::ActualDamageTaken' has a wrong offset!");
static_assert(offsetof(FMarinerActorDamagedDebugRecord, ActualImpulseApplied) == 0x000024, "Member 'FMarinerActorDamagedDebugRecord::ActualImpulseApplied' has a wrong offset!");
static_assert(offsetof(FMarinerActorDamagedDebugRecord, ImpulseDirection) == 0x000028, "Member 'FMarinerActorDamagedDebugRecord::ImpulseDirection' has a wrong offset!");
static_assert(offsetof(FMarinerActorDamagedDebugRecord, ImpulseOrigin) == 0x000034, "Member 'FMarinerActorDamagedDebugRecord::ImpulseOrigin' has a wrong offset!");

// ScriptStruct Mariner.MarinerSettingEditableTextBoxAssets
// 0x0008 (0x0040 - 0x0038)
struct FMarinerSettingEditableTextBoxAssets final : public FMarinerSettingBaseAssets
{
public:
	class UMarinerEditableTextWidget*             EditableTextWidget;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerSettingEditableTextBoxAssets) == 0x000008, "Wrong alignment on FMarinerSettingEditableTextBoxAssets");
static_assert(sizeof(FMarinerSettingEditableTextBoxAssets) == 0x000040, "Wrong size on FMarinerSettingEditableTextBoxAssets");
static_assert(offsetof(FMarinerSettingEditableTextBoxAssets, EditableTextWidget) == 0x000038, "Member 'FMarinerSettingEditableTextBoxAssets::EditableTextWidget' has a wrong offset!");

// ScriptStruct Mariner.MarinerDamageEvent
// 0x00C8 (0x00D8 - 0x0010)
struct FMarinerDamageEvent final : public FDamageEvent
{
public:
	bool                                          bIsAOEDamage;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DamageOrigin;                                      // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              DamageDirection;                                   // 0x0020(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     ComponentHits;                                     // 0x0030(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bDirectHitOnCharacter;                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             ClosestComponentHit;                               // 0x0044(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ClosestHitDistanceFromEpicenter;                   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerDamageDebugRecord*              DebugRecord;                                       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerDamageEvent) == 0x000008, "Wrong alignment on FMarinerDamageEvent");
static_assert(sizeof(FMarinerDamageEvent) == 0x0000D8, "Wrong size on FMarinerDamageEvent");
static_assert(offsetof(FMarinerDamageEvent, bIsAOEDamage) == 0x000010, "Member 'FMarinerDamageEvent::bIsAOEDamage' has a wrong offset!");
static_assert(offsetof(FMarinerDamageEvent, DamageOrigin) == 0x000014, "Member 'FMarinerDamageEvent::DamageOrigin' has a wrong offset!");
static_assert(offsetof(FMarinerDamageEvent, DamageDirection) == 0x000020, "Member 'FMarinerDamageEvent::DamageDirection' has a wrong offset!");
static_assert(offsetof(FMarinerDamageEvent, ComponentHits) == 0x000030, "Member 'FMarinerDamageEvent::ComponentHits' has a wrong offset!");
static_assert(offsetof(FMarinerDamageEvent, bDirectHitOnCharacter) == 0x000040, "Member 'FMarinerDamageEvent::bDirectHitOnCharacter' has a wrong offset!");
static_assert(offsetof(FMarinerDamageEvent, ClosestComponentHit) == 0x000044, "Member 'FMarinerDamageEvent::ClosestComponentHit' has a wrong offset!");
static_assert(offsetof(FMarinerDamageEvent, ClosestHitDistanceFromEpicenter) == 0x0000CC, "Member 'FMarinerDamageEvent::ClosestHitDistanceFromEpicenter' has a wrong offset!");
static_assert(offsetof(FMarinerDamageEvent, DebugRecord) == 0x0000D0, "Member 'FMarinerDamageEvent::DebugRecord' has a wrong offset!");

// ScriptStruct Mariner.MessageInfoStruct
// 0x0020 (0x0020 - 0x0000)
struct FMessageInfoStruct final
{
public:
	TWeakObjectPtr<class UMarinerLocalMessage>    MessageCDO;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APlayerState>            RelatedPlayerState_1;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APlayerState>            RelatedPlayerState_2;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 OptionalObject;                                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessageInfoStruct) == 0x000004, "Wrong alignment on FMessageInfoStruct");
static_assert(sizeof(FMessageInfoStruct) == 0x000020, "Wrong size on FMessageInfoStruct");
static_assert(offsetof(FMessageInfoStruct, MessageCDO) == 0x000000, "Member 'FMessageInfoStruct::MessageCDO' has a wrong offset!");
static_assert(offsetof(FMessageInfoStruct, RelatedPlayerState_1) == 0x000008, "Member 'FMessageInfoStruct::RelatedPlayerState_1' has a wrong offset!");
static_assert(offsetof(FMessageInfoStruct, RelatedPlayerState_2) == 0x000010, "Member 'FMessageInfoStruct::RelatedPlayerState_2' has a wrong offset!");
static_assert(offsetof(FMessageInfoStruct, OptionalObject) == 0x000018, "Member 'FMessageInfoStruct::OptionalObject' has a wrong offset!");

// ScriptStruct Mariner.MarinerControllerConfigurationLocalization
// 0x0020 (0x0028 - 0x0008)
struct FMarinerControllerConfigurationLocalization final : public FTableRowBase
{
public:
	class FText                                   ConfigurationName;                                 // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UDataTable*                             Configuration;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerControllerConfigurationLocalization) == 0x000008, "Wrong alignment on FMarinerControllerConfigurationLocalization");
static_assert(sizeof(FMarinerControllerConfigurationLocalization) == 0x000028, "Wrong size on FMarinerControllerConfigurationLocalization");
static_assert(offsetof(FMarinerControllerConfigurationLocalization, ConfigurationName) == 0x000008, "Member 'FMarinerControllerConfigurationLocalization::ConfigurationName' has a wrong offset!");
static_assert(offsetof(FMarinerControllerConfigurationLocalization, Configuration) == 0x000020, "Member 'FMarinerControllerConfigurationLocalization::Configuration' has a wrong offset!");

// ScriptStruct Mariner.MarinerDamageNumberState
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FMarinerDamageNumberState final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerDamageNumberState) == 0x000004, "Wrong alignment on FMarinerDamageNumberState");
static_assert(sizeof(FMarinerDamageNumberState) == 0x00001C, "Wrong size on FMarinerDamageNumberState");

// ScriptStruct Mariner.MarinerDynamicServerMove
// 0x00B0 (0x00B0 - 0x0000)
struct alignas(0x08) FMarinerDynamicServerMove final
{
public:
	uint8                                         Pad_0[0xB0];                                       // 0x0000(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerDynamicServerMove) == 0x000008, "Wrong alignment on FMarinerDynamicServerMove");
static_assert(sizeof(FMarinerDynamicServerMove) == 0x0000B0, "Wrong size on FMarinerDynamicServerMove");

// ScriptStruct Mariner.MarinerIconSet
// 0x0110 (0x0110 - 0x0000)
struct FMarinerIconSet final
{
public:
	struct FSlateBrush                            PrimaryIcon;                                       // 0x0000(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SecondaryIcon;                                     // 0x0088(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerIconSet) == 0x000008, "Wrong alignment on FMarinerIconSet");
static_assert(sizeof(FMarinerIconSet) == 0x000110, "Wrong size on FMarinerIconSet");
static_assert(offsetof(FMarinerIconSet, PrimaryIcon) == 0x000000, "Member 'FMarinerIconSet::PrimaryIcon' has a wrong offset!");
static_assert(offsetof(FMarinerIconSet, SecondaryIcon) == 0x000088, "Member 'FMarinerIconSet::SecondaryIcon' has a wrong offset!");

// ScriptStruct Mariner.ExplosionEffectsData
// 0x0048 (0x0048 - 0x0000)
struct FExplosionEffectsData final
{
public:
	float                                         Lifetime;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerExplosionVisibilityRule               VisibilityRule;                                    // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ParticleSystem;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              Material;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MaterialColor;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialFresnel;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialOpacity;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaterialIntersection;                              // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaterialIntersectionDistance;                      // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               MaterialTexture;                                   // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialTextureTile;                               // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaterialClipOut;                                   // 0x0044(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaterialInvertClipMask;                            // 0x0045(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExplosionEffectsData) == 0x000008, "Wrong alignment on FExplosionEffectsData");
static_assert(sizeof(FExplosionEffectsData) == 0x000048, "Wrong size on FExplosionEffectsData");
static_assert(offsetof(FExplosionEffectsData, Lifetime) == 0x000000, "Member 'FExplosionEffectsData::Lifetime' has a wrong offset!");
static_assert(offsetof(FExplosionEffectsData, VisibilityRule) == 0x000004, "Member 'FExplosionEffectsData::VisibilityRule' has a wrong offset!");
static_assert(offsetof(FExplosionEffectsData, ParticleSystem) == 0x000008, "Member 'FExplosionEffectsData::ParticleSystem' has a wrong offset!");
static_assert(offsetof(FExplosionEffectsData, Material) == 0x000010, "Member 'FExplosionEffectsData::Material' has a wrong offset!");
static_assert(offsetof(FExplosionEffectsData, MaterialColor) == 0x000018, "Member 'FExplosionEffectsData::MaterialColor' has a wrong offset!");
static_assert(offsetof(FExplosionEffectsData, MaterialFresnel) == 0x000028, "Member 'FExplosionEffectsData::MaterialFresnel' has a wrong offset!");
static_assert(offsetof(FExplosionEffectsData, MaterialOpacity) == 0x00002C, "Member 'FExplosionEffectsData::MaterialOpacity' has a wrong offset!");
static_assert(offsetof(FExplosionEffectsData, MaterialIntersection) == 0x000030, "Member 'FExplosionEffectsData::MaterialIntersection' has a wrong offset!");
static_assert(offsetof(FExplosionEffectsData, MaterialIntersectionDistance) == 0x000034, "Member 'FExplosionEffectsData::MaterialIntersectionDistance' has a wrong offset!");
static_assert(offsetof(FExplosionEffectsData, MaterialTexture) == 0x000038, "Member 'FExplosionEffectsData::MaterialTexture' has a wrong offset!");
static_assert(offsetof(FExplosionEffectsData, MaterialTextureTile) == 0x000040, "Member 'FExplosionEffectsData::MaterialTextureTile' has a wrong offset!");
static_assert(offsetof(FExplosionEffectsData, MaterialClipOut) == 0x000044, "Member 'FExplosionEffectsData::MaterialClipOut' has a wrong offset!");
static_assert(offsetof(FExplosionEffectsData, MaterialInvertClipMask) == 0x000045, "Member 'FExplosionEffectsData::MaterialInvertClipMask' has a wrong offset!");

// ScriptStruct Mariner.SurfaceEffectsData
// 0x0018 (0x0018 - 0x0000)
struct FSurfaceEffectsData final
{
public:
	class UParticleSystem*                        ParticleSystem;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*               ParticleComponent;                                 // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSurfaceEffectsData) == 0x000008, "Wrong alignment on FSurfaceEffectsData");
static_assert(sizeof(FSurfaceEffectsData) == 0x000018, "Wrong size on FSurfaceEffectsData");
static_assert(offsetof(FSurfaceEffectsData, ParticleSystem) == 0x000000, "Member 'FSurfaceEffectsData::ParticleSystem' has a wrong offset!");
static_assert(offsetof(FSurfaceEffectsData, AkEvent) == 0x000008, "Member 'FSurfaceEffectsData::AkEvent' has a wrong offset!");
static_assert(offsetof(FSurfaceEffectsData, ParticleComponent) == 0x000010, "Member 'FSurfaceEffectsData::ParticleComponent' has a wrong offset!");

// ScriptStruct Mariner.GameGriefData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FGameGriefData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameGriefData) == 0x000008, "Wrong alignment on FGameGriefData");
static_assert(sizeof(FGameGriefData) == 0x000008, "Wrong size on FGameGriefData");

// ScriptStruct Mariner.MarinerMenuSequenceAssets
// 0x0010 (0x0010 - 0x0000)
struct FMarinerMenuSequenceAssets final
{
public:
	class UMarinerAnimatedWidget*                 Content;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerPromptBanner*                   Prompts;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMenuSequenceAssets) == 0x000008, "Wrong alignment on FMarinerMenuSequenceAssets");
static_assert(sizeof(FMarinerMenuSequenceAssets) == 0x000010, "Wrong size on FMarinerMenuSequenceAssets");
static_assert(offsetof(FMarinerMenuSequenceAssets, Content) == 0x000000, "Member 'FMarinerMenuSequenceAssets::Content' has a wrong offset!");
static_assert(offsetof(FMarinerMenuSequenceAssets, Prompts) == 0x000008, "Member 'FMarinerMenuSequenceAssets::Prompts' has a wrong offset!");

// ScriptStruct Mariner.BotSpawnGlobalParameters
// 0x0028 (0x0028 - 0x0000)
struct FBotSpawnGlobalParameters final
{
public:
	TSubclassOf<class AMarinerCharacter>          DefaultPawnClass;                                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBotSpawnGlobalParameters) == 0x000008, "Wrong alignment on FBotSpawnGlobalParameters");
static_assert(sizeof(FBotSpawnGlobalParameters) == 0x000028, "Wrong size on FBotSpawnGlobalParameters");
static_assert(offsetof(FBotSpawnGlobalParameters, DefaultPawnClass) == 0x000000, "Member 'FBotSpawnGlobalParameters::DefaultPawnClass' has a wrong offset!");

// ScriptStruct Mariner.MarinerMoveUpdate_TeleportDynamics
// 0x0018 (0x0040 - 0x0028)
struct FMarinerMoveUpdate_TeleportDynamics final : public FMarinerMoveUpdateDynamics
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerMoveUpdate_TeleportDynamics) == 0x000008, "Wrong alignment on FMarinerMoveUpdate_TeleportDynamics");
static_assert(sizeof(FMarinerMoveUpdate_TeleportDynamics) == 0x000040, "Wrong size on FMarinerMoveUpdate_TeleportDynamics");

// ScriptStruct Mariner.BotSpawnParameters
// 0x0018 (0x0018 - 0x0000)
struct FBotSpawnParameters final
{
public:
	TSubclassOf<class AMarinerAIController>       ControllerClass;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarinerCharacter>          PawnClass;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBotSpawnParameters) == 0x000008, "Wrong alignment on FBotSpawnParameters");
static_assert(sizeof(FBotSpawnParameters) == 0x000018, "Wrong size on FBotSpawnParameters");
static_assert(offsetof(FBotSpawnParameters, ControllerClass) == 0x000000, "Member 'FBotSpawnParameters::ControllerClass' has a wrong offset!");
static_assert(offsetof(FBotSpawnParameters, PawnClass) == 0x000008, "Member 'FBotSpawnParameters::PawnClass' has a wrong offset!");

// ScriptStruct Mariner.MarinerMenuButtonData
// 0x0218 (0x0218 - 0x0000)
struct FMarinerMenuButtonData final
{
public:
	struct FSlateBrush                            IconBrush;                                         // 0x0000(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0088(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MaterialBrush;                                     // 0x0110(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0198(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   AuxText;                                           // 0x01B0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           AuxTextBodyColor;                                  // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AuxTextOutlineColor;                               // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HeaderDescription;                                 // 0x01E8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   HeaderDescriptionDisabled;                         // 0x0200(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMenuButtonData) == 0x000008, "Wrong alignment on FMarinerMenuButtonData");
static_assert(sizeof(FMarinerMenuButtonData) == 0x000218, "Wrong size on FMarinerMenuButtonData");
static_assert(offsetof(FMarinerMenuButtonData, IconBrush) == 0x000000, "Member 'FMarinerMenuButtonData::IconBrush' has a wrong offset!");
static_assert(offsetof(FMarinerMenuButtonData, BackgroundBrush) == 0x000088, "Member 'FMarinerMenuButtonData::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FMarinerMenuButtonData, MaterialBrush) == 0x000110, "Member 'FMarinerMenuButtonData::MaterialBrush' has a wrong offset!");
static_assert(offsetof(FMarinerMenuButtonData, Text) == 0x000198, "Member 'FMarinerMenuButtonData::Text' has a wrong offset!");
static_assert(offsetof(FMarinerMenuButtonData, AuxText) == 0x0001B0, "Member 'FMarinerMenuButtonData::AuxText' has a wrong offset!");
static_assert(offsetof(FMarinerMenuButtonData, AuxTextBodyColor) == 0x0001C8, "Member 'FMarinerMenuButtonData::AuxTextBodyColor' has a wrong offset!");
static_assert(offsetof(FMarinerMenuButtonData, AuxTextOutlineColor) == 0x0001D8, "Member 'FMarinerMenuButtonData::AuxTextOutlineColor' has a wrong offset!");
static_assert(offsetof(FMarinerMenuButtonData, HeaderDescription) == 0x0001E8, "Member 'FMarinerMenuButtonData::HeaderDescription' has a wrong offset!");
static_assert(offsetof(FMarinerMenuButtonData, HeaderDescriptionDisabled) == 0x000200, "Member 'FMarinerMenuButtonData::HeaderDescriptionDisabled' has a wrong offset!");

// ScriptStruct Mariner.MarinerGameplayAbilityBinding
// 0x0010 (0x0010 - 0x0000)
struct FMarinerGameplayAbilityBinding final
{
public:
	EMarinerInputActions                          Action;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerAbility>            GameplayAbilityClass;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerGameplayAbilityBinding) == 0x000008, "Wrong alignment on FMarinerGameplayAbilityBinding");
static_assert(sizeof(FMarinerGameplayAbilityBinding) == 0x000010, "Wrong size on FMarinerGameplayAbilityBinding");
static_assert(offsetof(FMarinerGameplayAbilityBinding, Action) == 0x000000, "Member 'FMarinerGameplayAbilityBinding::Action' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayAbilityBinding, GameplayAbilityClass) == 0x000008, "Member 'FMarinerGameplayAbilityBinding::GameplayAbilityClass' has a wrong offset!");

// ScriptStruct Mariner.MarinerGameplayAbilityTargetData_Aim
// 0x0048 (0x0050 - 0x0008)
struct FMarinerGameplayAbilityTargetData_Aim final : public FGameplayAbilityTargetData
{
public:
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    AimOrigin;                                         // 0x000C(0x000C)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector_NetQuantizeNormal              AimDirection;                                      // 0x0018(0x000C)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector_NetQuantize100                 InputVector;                                       // 0x0024(0x000C)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CustomTargetingFloat;                              // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CustomTargetingInt;                                // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector_NetQuantizeNormal              CustomTargetingVectorNormal;                       // 0x0038(0x000C)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector_NetQuantize                    CustomTargetingVectorQuantized;                    // 0x0044(0x000C)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMarinerGameplayAbilityTargetData_Aim) == 0x000008, "Wrong alignment on FMarinerGameplayAbilityTargetData_Aim");
static_assert(sizeof(FMarinerGameplayAbilityTargetData_Aim) == 0x000050, "Wrong size on FMarinerGameplayAbilityTargetData_Aim");
static_assert(offsetof(FMarinerGameplayAbilityTargetData_Aim, AimOrigin) == 0x00000C, "Member 'FMarinerGameplayAbilityTargetData_Aim::AimOrigin' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayAbilityTargetData_Aim, AimDirection) == 0x000018, "Member 'FMarinerGameplayAbilityTargetData_Aim::AimDirection' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayAbilityTargetData_Aim, InputVector) == 0x000024, "Member 'FMarinerGameplayAbilityTargetData_Aim::InputVector' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayAbilityTargetData_Aim, CustomTargetingFloat) == 0x000030, "Member 'FMarinerGameplayAbilityTargetData_Aim::CustomTargetingFloat' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayAbilityTargetData_Aim, CustomTargetingInt) == 0x000034, "Member 'FMarinerGameplayAbilityTargetData_Aim::CustomTargetingInt' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayAbilityTargetData_Aim, CustomTargetingVectorNormal) == 0x000038, "Member 'FMarinerGameplayAbilityTargetData_Aim::CustomTargetingVectorNormal' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayAbilityTargetData_Aim, CustomTargetingVectorQuantized) == 0x000044, "Member 'FMarinerGameplayAbilityTargetData_Aim::CustomTargetingVectorQuantized' has a wrong offset!");

// ScriptStruct Mariner.MarinerGameplayAttributeData
// 0x0000 (0x0010 - 0x0010)
struct FMarinerGameplayAttributeData : public FGameplayAttributeData
{
};
static_assert(alignof(FMarinerGameplayAttributeData) == 0x000008, "Wrong alignment on FMarinerGameplayAttributeData");
static_assert(sizeof(FMarinerGameplayAttributeData) == 0x000010, "Wrong size on FMarinerGameplayAttributeData");

// ScriptStruct Mariner.MarinerPredictiveGameplayAttributeData
// 0x0018 (0x0028 - 0x0010)
struct FMarinerPredictiveGameplayAttributeData final : public FMarinerGameplayAttributeData
{
public:
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerPredictiveGameplayAttributeData) == 0x000008, "Wrong alignment on FMarinerPredictiveGameplayAttributeData");
static_assert(sizeof(FMarinerPredictiveGameplayAttributeData) == 0x000028, "Wrong size on FMarinerPredictiveGameplayAttributeData");

// ScriptStruct Mariner.MultiProjectileSpawnData
// 0x0040 (0x0040 - 0x0000)
struct FMultiProjectileSpawnData final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DelaySpawnPathTime;                                // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiProjectileSpawnData) == 0x000010, "Wrong alignment on FMultiProjectileSpawnData");
static_assert(sizeof(FMultiProjectileSpawnData) == 0x000040, "Wrong size on FMultiProjectileSpawnData");
static_assert(offsetof(FMultiProjectileSpawnData, Transform) == 0x000000, "Member 'FMultiProjectileSpawnData::Transform' has a wrong offset!");
static_assert(offsetof(FMultiProjectileSpawnData, DelaySpawnPathTime) == 0x000030, "Member 'FMultiProjectileSpawnData::DelaySpawnPathTime' has a wrong offset!");

// ScriptStruct Mariner.SpreadPathPair
// 0x0018 (0x0018 - 0x0000)
struct FSpreadPathPair final
{
public:
	class UMarinerProjectileSpread*               Spread;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMultiProjectileSpawnData>      SpawnData;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpreadPathPair) == 0x000008, "Wrong alignment on FSpreadPathPair");
static_assert(sizeof(FSpreadPathPair) == 0x000018, "Wrong size on FSpreadPathPair");
static_assert(offsetof(FSpreadPathPair, Spread) == 0x000000, "Member 'FSpreadPathPair::Spread' has a wrong offset!");
static_assert(offsetof(FSpreadPathPair, SpawnData) == 0x000008, "Member 'FSpreadPathPair::SpawnData' has a wrong offset!");

// ScriptStruct Mariner.MarinerGameplayCueCharacterEffectDataBase
// 0x0030 (0x0030 - 0x0000)
struct FMarinerGameplayCueCharacterEffectDataBase
{
public:
	class UParticleSystem*                        ThirdPersonParticleEffect;                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThirdPersonEffectAttachSocket;                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        FirstPersonParticleEffect;                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FirstPersonEffectAttachSocket;                     // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ThirdPersonAudioEvent;                             // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          FirstPersonAudioEvent;                             // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerGameplayCueCharacterEffectDataBase) == 0x000008, "Wrong alignment on FMarinerGameplayCueCharacterEffectDataBase");
static_assert(sizeof(FMarinerGameplayCueCharacterEffectDataBase) == 0x000030, "Wrong size on FMarinerGameplayCueCharacterEffectDataBase");
static_assert(offsetof(FMarinerGameplayCueCharacterEffectDataBase, ThirdPersonParticleEffect) == 0x000000, "Member 'FMarinerGameplayCueCharacterEffectDataBase::ThirdPersonParticleEffect' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayCueCharacterEffectDataBase, ThirdPersonEffectAttachSocket) == 0x000008, "Member 'FMarinerGameplayCueCharacterEffectDataBase::ThirdPersonEffectAttachSocket' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayCueCharacterEffectDataBase, FirstPersonParticleEffect) == 0x000010, "Member 'FMarinerGameplayCueCharacterEffectDataBase::FirstPersonParticleEffect' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayCueCharacterEffectDataBase, FirstPersonEffectAttachSocket) == 0x000018, "Member 'FMarinerGameplayCueCharacterEffectDataBase::FirstPersonEffectAttachSocket' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayCueCharacterEffectDataBase, ThirdPersonAudioEvent) == 0x000020, "Member 'FMarinerGameplayCueCharacterEffectDataBase::ThirdPersonAudioEvent' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayCueCharacterEffectDataBase, FirstPersonAudioEvent) == 0x000028, "Member 'FMarinerGameplayCueCharacterEffectDataBase::FirstPersonAudioEvent' has a wrong offset!");

// ScriptStruct Mariner.MarinerGameplayCueCharacterEffectData
// 0x0020 (0x0050 - 0x0030)
struct FMarinerGameplayCueCharacterEffectData final : public FMarinerGameplayCueCharacterEffectDataBase
{
public:
	TSubclassOf<class AEmitterCameraLensEffectBase> FirstPersonCameraEffect;                           // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     NewMaterial;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeMaterialFlags;                               // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   InitialForceFeedback;                              // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerGameplayCueCharacterEffectData) == 0x000008, "Wrong alignment on FMarinerGameplayCueCharacterEffectData");
static_assert(sizeof(FMarinerGameplayCueCharacterEffectData) == 0x000050, "Wrong size on FMarinerGameplayCueCharacterEffectData");
static_assert(offsetof(FMarinerGameplayCueCharacterEffectData, FirstPersonCameraEffect) == 0x000030, "Member 'FMarinerGameplayCueCharacterEffectData::FirstPersonCameraEffect' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayCueCharacterEffectData, NewMaterial) == 0x000038, "Member 'FMarinerGameplayCueCharacterEffectData::NewMaterial' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayCueCharacterEffectData, ChangeMaterialFlags) == 0x000040, "Member 'FMarinerGameplayCueCharacterEffectData::ChangeMaterialFlags' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayCueCharacterEffectData, InitialForceFeedback) == 0x000048, "Member 'FMarinerGameplayCueCharacterEffectData::InitialForceFeedback' has a wrong offset!");

// ScriptStruct Mariner.MarinerGameplayCueEffectData
// 0x0028 (0x0028 - 0x0000)
struct FMarinerGameplayCueEffectData final
{
public:
	bool                                          bSpawnEffectsAttached;                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachSocketName;                                  // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerGameplayCueEffectOrientation          EffectOrientation;                                 // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ParticleEffect;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   ForceFeedback;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerGameplayCueEffectData) == 0x000008, "Wrong alignment on FMarinerGameplayCueEffectData");
static_assert(sizeof(FMarinerGameplayCueEffectData) == 0x000028, "Wrong size on FMarinerGameplayCueEffectData");
static_assert(offsetof(FMarinerGameplayCueEffectData, bSpawnEffectsAttached) == 0x000000, "Member 'FMarinerGameplayCueEffectData::bSpawnEffectsAttached' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayCueEffectData, AttachSocketName) == 0x000004, "Member 'FMarinerGameplayCueEffectData::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayCueEffectData, EffectOrientation) == 0x00000C, "Member 'FMarinerGameplayCueEffectData::EffectOrientation' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayCueEffectData, ParticleEffect) == 0x000010, "Member 'FMarinerGameplayCueEffectData::ParticleEffect' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayCueEffectData, AudioEvent) == 0x000018, "Member 'FMarinerGameplayCueEffectData::AudioEvent' has a wrong offset!");
static_assert(offsetof(FMarinerGameplayCueEffectData, ForceFeedback) == 0x000020, "Member 'FMarinerGameplayCueEffectData::ForceFeedback' has a wrong offset!");

// ScriptStruct Mariner.PlaylistInfo
// 0x0018 (0x0018 - 0x0000)
struct FPlaylistInfo final
{
public:
	bool                                          bIsRanked;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPvEOnly;                                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventId;                                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaylistInfo) == 0x000008, "Wrong alignment on FPlaylistInfo");
static_assert(sizeof(FPlaylistInfo) == 0x000018, "Wrong size on FPlaylistInfo");
static_assert(offsetof(FPlaylistInfo, bIsRanked) == 0x000000, "Member 'FPlaylistInfo::bIsRanked' has a wrong offset!");
static_assert(offsetof(FPlaylistInfo, bIsPvEOnly) == 0x000001, "Member 'FPlaylistInfo::bIsPvEOnly' has a wrong offset!");
static_assert(offsetof(FPlaylistInfo, EventId) == 0x000008, "Member 'FPlaylistInfo::EventId' has a wrong offset!");

// ScriptStruct Mariner.ImportantThrowTarget
// 0x0010 (0x0010 - 0x0000)
struct FImportantThrowTarget final
{
public:
	class AActor*                                 ThrowTargetActor;                                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetForTeamIndex;                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImportantThrowTarget) == 0x000008, "Wrong alignment on FImportantThrowTarget");
static_assert(sizeof(FImportantThrowTarget) == 0x000010, "Wrong size on FImportantThrowTarget");
static_assert(offsetof(FImportantThrowTarget, ThrowTargetActor) == 0x000000, "Member 'FImportantThrowTarget::ThrowTargetActor' has a wrong offset!");
static_assert(offsetof(FImportantThrowTarget, TargetForTeamIndex) == 0x000008, "Member 'FImportantThrowTarget::TargetForTeamIndex' has a wrong offset!");

// ScriptStruct Mariner.MarinerGameLiftSessionInfo
// 0x0030 (0x0030 - 0x0000)
struct FMarinerGameLiftSessionInfo final
{
public:
	class FString                                 GameSessionId;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DnsName;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MatchID;                                           // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerGameLiftSessionInfo) == 0x000008, "Wrong alignment on FMarinerGameLiftSessionInfo");
static_assert(sizeof(FMarinerGameLiftSessionInfo) == 0x000030, "Wrong size on FMarinerGameLiftSessionInfo");
static_assert(offsetof(FMarinerGameLiftSessionInfo, GameSessionId) == 0x000000, "Member 'FMarinerGameLiftSessionInfo::GameSessionId' has a wrong offset!");
static_assert(offsetof(FMarinerGameLiftSessionInfo, DnsName) == 0x000010, "Member 'FMarinerGameLiftSessionInfo::DnsName' has a wrong offset!");
static_assert(offsetof(FMarinerGameLiftSessionInfo, MatchID) == 0x000020, "Member 'FMarinerGameLiftSessionInfo::MatchID' has a wrong offset!");

// ScriptStruct Mariner.GameServerDebugInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FGameServerDebugInfo final
{
public:
	class FString                                 BuildDate;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 P4Changelist;                                      // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 P4Branch;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuilderName;                                       // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildWorkerName;                                   // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildNumber;                                       // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildConfig;                                       // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnlineSubsystemName;                               // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OperatingSystemName;                               // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MangoRealm;                                        // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDedicated;                                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameServerDebugInfo) == 0x000008, "Wrong alignment on FGameServerDebugInfo");
static_assert(sizeof(FGameServerDebugInfo) == 0x0000A8, "Wrong size on FGameServerDebugInfo");
static_assert(offsetof(FGameServerDebugInfo, BuildDate) == 0x000000, "Member 'FGameServerDebugInfo::BuildDate' has a wrong offset!");
static_assert(offsetof(FGameServerDebugInfo, P4Changelist) == 0x000010, "Member 'FGameServerDebugInfo::P4Changelist' has a wrong offset!");
static_assert(offsetof(FGameServerDebugInfo, P4Branch) == 0x000020, "Member 'FGameServerDebugInfo::P4Branch' has a wrong offset!");
static_assert(offsetof(FGameServerDebugInfo, BuilderName) == 0x000030, "Member 'FGameServerDebugInfo::BuilderName' has a wrong offset!");
static_assert(offsetof(FGameServerDebugInfo, BuildWorkerName) == 0x000040, "Member 'FGameServerDebugInfo::BuildWorkerName' has a wrong offset!");
static_assert(offsetof(FGameServerDebugInfo, BuildNumber) == 0x000050, "Member 'FGameServerDebugInfo::BuildNumber' has a wrong offset!");
static_assert(offsetof(FGameServerDebugInfo, BuildConfig) == 0x000060, "Member 'FGameServerDebugInfo::BuildConfig' has a wrong offset!");
static_assert(offsetof(FGameServerDebugInfo, OnlineSubsystemName) == 0x000070, "Member 'FGameServerDebugInfo::OnlineSubsystemName' has a wrong offset!");
static_assert(offsetof(FGameServerDebugInfo, OperatingSystemName) == 0x000080, "Member 'FGameServerDebugInfo::OperatingSystemName' has a wrong offset!");
static_assert(offsetof(FGameServerDebugInfo, MangoRealm) == 0x000090, "Member 'FGameServerDebugInfo::MangoRealm' has a wrong offset!");
static_assert(offsetof(FGameServerDebugInfo, bIsDedicated) == 0x0000A0, "Member 'FGameServerDebugInfo::bIsDedicated' has a wrong offset!");

// ScriptStruct Mariner.MarinerConsoleSettings
// 0x0098 (0x0098 - 0x0000)
struct alignas(0x08) FMarinerConsoleSettings final
{
public:
	uint8                                         Pad_0[0x98];                                       // 0x0000(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerConsoleSettings) == 0x000008, "Wrong alignment on FMarinerConsoleSettings");
static_assert(sizeof(FMarinerConsoleSettings) == 0x000098, "Wrong size on FMarinerConsoleSettings");

// ScriptStruct Mariner.MarinerGrapplingHookCableAttachData
// 0x0020 (0x0020 - 0x0000)
struct FMarinerGrapplingHookCableAttachData final
{
public:
	EMarinerGrapplingHookAttachMode               AttachMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      AttachCharacter;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachComponent;                                   // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerGrapplingHookCableAttachData) == 0x000008, "Wrong alignment on FMarinerGrapplingHookCableAttachData");
static_assert(sizeof(FMarinerGrapplingHookCableAttachData) == 0x000020, "Wrong size on FMarinerGrapplingHookCableAttachData");
static_assert(offsetof(FMarinerGrapplingHookCableAttachData, AttachMode) == 0x000000, "Member 'FMarinerGrapplingHookCableAttachData::AttachMode' has a wrong offset!");
static_assert(offsetof(FMarinerGrapplingHookCableAttachData, AttachCharacter) == 0x000008, "Member 'FMarinerGrapplingHookCableAttachData::AttachCharacter' has a wrong offset!");
static_assert(offsetof(FMarinerGrapplingHookCableAttachData, AttachComponent) == 0x000010, "Member 'FMarinerGrapplingHookCableAttachData::AttachComponent' has a wrong offset!");
static_assert(offsetof(FMarinerGrapplingHookCableAttachData, AttachSocketName) == 0x000018, "Member 'FMarinerGrapplingHookCableAttachData::AttachSocketName' has a wrong offset!");

// ScriptStruct Mariner.MarinerGridPanelSlot
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FMarinerGridPanelSlot final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerGridPanelSlot) == 0x000004, "Wrong alignment on FMarinerGridPanelSlot");
static_assert(sizeof(FMarinerGridPanelSlot) == 0x000010, "Wrong size on FMarinerGridPanelSlot");

// ScriptStruct Mariner.MarinerInputActionList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMarinerInputActionList final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerInputActionList) == 0x000008, "Wrong alignment on FMarinerInputActionList");
static_assert(sizeof(FMarinerInputActionList) == 0x000010, "Wrong size on FMarinerInputActionList");

// ScriptStruct Mariner.MarinerSensitivtySpecification
// 0x0020 (0x0028 - 0x0008)
struct FMarinerSensitivtySpecification final : public FTableRowBase
{
public:
	struct FVector2D                              BaseTurnSpeed;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopEndTurnSpeedScalar;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToTopEndTurnSpeed;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PeggedInputCurve;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MagnitudeFilterCurve;                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerSensitivtySpecification) == 0x000008, "Wrong alignment on FMarinerSensitivtySpecification");
static_assert(sizeof(FMarinerSensitivtySpecification) == 0x000028, "Wrong size on FMarinerSensitivtySpecification");
static_assert(offsetof(FMarinerSensitivtySpecification, BaseTurnSpeed) == 0x000008, "Member 'FMarinerSensitivtySpecification::BaseTurnSpeed' has a wrong offset!");
static_assert(offsetof(FMarinerSensitivtySpecification, TopEndTurnSpeedScalar) == 0x000010, "Member 'FMarinerSensitivtySpecification::TopEndTurnSpeedScalar' has a wrong offset!");
static_assert(offsetof(FMarinerSensitivtySpecification, TimeToTopEndTurnSpeed) == 0x000014, "Member 'FMarinerSensitivtySpecification::TimeToTopEndTurnSpeed' has a wrong offset!");
static_assert(offsetof(FMarinerSensitivtySpecification, PeggedInputCurve) == 0x000018, "Member 'FMarinerSensitivtySpecification::PeggedInputCurve' has a wrong offset!");
static_assert(offsetof(FMarinerSensitivtySpecification, MagnitudeFilterCurve) == 0x000020, "Member 'FMarinerSensitivtySpecification::MagnitudeFilterCurve' has a wrong offset!");

// ScriptStruct Mariner.MarinerKBMKeyOverrides
// 0x00C0 (0x00C8 - 0x0008)
struct FMarinerKBMKeyOverrides final : public FTableRowBase
{
public:
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayNameOverride;                               // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMarinerKeyboardKeySize                       KeySize;                                           // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            IconOverride;                                      // 0x0040(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerKBMKeyOverrides) == 0x000008, "Wrong alignment on FMarinerKBMKeyOverrides");
static_assert(sizeof(FMarinerKBMKeyOverrides) == 0x0000C8, "Wrong size on FMarinerKBMKeyOverrides");
static_assert(offsetof(FMarinerKBMKeyOverrides, Key) == 0x000008, "Member 'FMarinerKBMKeyOverrides::Key' has a wrong offset!");
static_assert(offsetof(FMarinerKBMKeyOverrides, DisplayNameOverride) == 0x000020, "Member 'FMarinerKBMKeyOverrides::DisplayNameOverride' has a wrong offset!");
static_assert(offsetof(FMarinerKBMKeyOverrides, KeySize) == 0x000038, "Member 'FMarinerKBMKeyOverrides::KeySize' has a wrong offset!");
static_assert(offsetof(FMarinerKBMKeyOverrides, IconOverride) == 0x000040, "Member 'FMarinerKBMKeyOverrides::IconOverride' has a wrong offset!");

// ScriptStruct Mariner.MarinerKeySet
// 0x0030 (0x0030 - 0x0000)
struct FMarinerKeySet final
{
public:
	struct FKey                                   PrimaryKey;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   SecondaryKey;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerKeySet) == 0x000008, "Wrong alignment on FMarinerKeySet");
static_assert(sizeof(FMarinerKeySet) == 0x000030, "Wrong size on FMarinerKeySet");
static_assert(offsetof(FMarinerKeySet, PrimaryKey) == 0x000000, "Member 'FMarinerKeySet::PrimaryKey' has a wrong offset!");
static_assert(offsetof(FMarinerKeySet, SecondaryKey) == 0x000018, "Member 'FMarinerKeySet::SecondaryKey' has a wrong offset!");

// ScriptStruct Mariner.MarinerInputActionKeySets
// 0x0010 (0x0010 - 0x0000)
struct FMarinerInputActionKeySets final
{
public:
	TArray<struct FMarinerKeySet>                 KeySets;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerInputActionKeySets) == 0x000008, "Wrong alignment on FMarinerInputActionKeySets");
static_assert(sizeof(FMarinerInputActionKeySets) == 0x000010, "Wrong size on FMarinerInputActionKeySets");
static_assert(offsetof(FMarinerInputActionKeySets, KeySets) == 0x000000, "Member 'FMarinerInputActionKeySets::KeySets' has a wrong offset!");

// ScriptStruct Mariner.MarinerPBRProperties
// 0x0028 (0x0028 - 0x0000)
struct FMarinerPBRProperties final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Emissive;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Metalness;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roughness;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerPBRProperties) == 0x000004, "Wrong alignment on FMarinerPBRProperties");
static_assert(sizeof(FMarinerPBRProperties) == 0x000028, "Wrong size on FMarinerPBRProperties");
static_assert(offsetof(FMarinerPBRProperties, Color) == 0x000000, "Member 'FMarinerPBRProperties::Color' has a wrong offset!");
static_assert(offsetof(FMarinerPBRProperties, Emissive) == 0x000010, "Member 'FMarinerPBRProperties::Emissive' has a wrong offset!");
static_assert(offsetof(FMarinerPBRProperties, Metalness) == 0x000020, "Member 'FMarinerPBRProperties::Metalness' has a wrong offset!");
static_assert(offsetof(FMarinerPBRProperties, Roughness) == 0x000024, "Member 'FMarinerPBRProperties::Roughness' has a wrong offset!");

// ScriptStruct Mariner.MarinerKeyToIconMapping
// 0x00A0 (0x00A8 - 0x0008)
struct FMarinerKeyToIconMapping final : public FTableRowBase
{
public:
	struct FKey                                   ConsoleKey;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Icon;                                              // 0x0020(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerKeyToIconMapping) == 0x000008, "Wrong alignment on FMarinerKeyToIconMapping");
static_assert(sizeof(FMarinerKeyToIconMapping) == 0x0000A8, "Wrong size on FMarinerKeyToIconMapping");
static_assert(offsetof(FMarinerKeyToIconMapping, ConsoleKey) == 0x000008, "Member 'FMarinerKeyToIconMapping::ConsoleKey' has a wrong offset!");
static_assert(offsetof(FMarinerKeyToIconMapping, Icon) == 0x000020, "Member 'FMarinerKeyToIconMapping::Icon' has a wrong offset!");

// ScriptStruct Mariner.MarinerInputActionMapping
// 0x0028 (0x0030 - 0x0008)
struct FMarinerInputActionMapping final : public FTableRowBase
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           Keys;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMarinerKeySet>                 KeySets;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerInputActionMapping) == 0x000008, "Wrong alignment on FMarinerInputActionMapping");
static_assert(sizeof(FMarinerInputActionMapping) == 0x000030, "Wrong size on FMarinerInputActionMapping");
static_assert(offsetof(FMarinerInputActionMapping, InputAction) == 0x000008, "Member 'FMarinerInputActionMapping::InputAction' has a wrong offset!");
static_assert(offsetof(FMarinerInputActionMapping, Keys) == 0x000010, "Member 'FMarinerInputActionMapping::Keys' has a wrong offset!");
static_assert(offsetof(FMarinerInputActionMapping, KeySets) == 0x000020, "Member 'FMarinerInputActionMapping::KeySets' has a wrong offset!");

// ScriptStruct Mariner.MarinerAxisConfiguration
// 0x0028 (0x0030 - 0x0008)
struct FMarinerAxisConfiguration final : public FTableRowBase
{
public:
	class FName                                   EngineId;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0010(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPositive;                                       // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerAxisConfiguration) == 0x000008, "Wrong alignment on FMarinerAxisConfiguration");
static_assert(sizeof(FMarinerAxisConfiguration) == 0x000030, "Wrong size on FMarinerAxisConfiguration");
static_assert(offsetof(FMarinerAxisConfiguration, EngineId) == 0x000008, "Member 'FMarinerAxisConfiguration::EngineId' has a wrong offset!");
static_assert(offsetof(FMarinerAxisConfiguration, Key) == 0x000010, "Member 'FMarinerAxisConfiguration::Key' has a wrong offset!");
static_assert(offsetof(FMarinerAxisConfiguration, bIsPositive) == 0x000028, "Member 'FMarinerAxisConfiguration::bIsPositive' has a wrong offset!");

// ScriptStruct Mariner.MarinerActionConfiguration
// 0x0028 (0x0030 - 0x0008)
struct FMarinerActionConfiguration final : public FTableRowBase
{
public:
	class FName                                   EngineId;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0010(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShift;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCtrl;                                             // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlt;                                              // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerActionConfiguration) == 0x000008, "Wrong alignment on FMarinerActionConfiguration");
static_assert(sizeof(FMarinerActionConfiguration) == 0x000030, "Wrong size on FMarinerActionConfiguration");
static_assert(offsetof(FMarinerActionConfiguration, EngineId) == 0x000008, "Member 'FMarinerActionConfiguration::EngineId' has a wrong offset!");
static_assert(offsetof(FMarinerActionConfiguration, Key) == 0x000010, "Member 'FMarinerActionConfiguration::Key' has a wrong offset!");
static_assert(offsetof(FMarinerActionConfiguration, bShift) == 0x000028, "Member 'FMarinerActionConfiguration::bShift' has a wrong offset!");
static_assert(offsetof(FMarinerActionConfiguration, bCtrl) == 0x000029, "Member 'FMarinerActionConfiguration::bCtrl' has a wrong offset!");
static_assert(offsetof(FMarinerActionConfiguration, bAlt) == 0x00002A, "Member 'FMarinerActionConfiguration::bAlt' has a wrong offset!");

// ScriptStruct Mariner.MarinerControllerConfiguration
// 0x0018 (0x0020 - 0x0008)
struct FMarinerControllerConfiguration final : public FTableRowBase
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAxisInput;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           ConsoleKeys;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerControllerConfiguration) == 0x000008, "Wrong alignment on FMarinerControllerConfiguration");
static_assert(sizeof(FMarinerControllerConfiguration) == 0x000020, "Wrong size on FMarinerControllerConfiguration");
static_assert(offsetof(FMarinerControllerConfiguration, InputAction) == 0x000008, "Member 'FMarinerControllerConfiguration::InputAction' has a wrong offset!");
static_assert(offsetof(FMarinerControllerConfiguration, bIsAxisInput) == 0x000009, "Member 'FMarinerControllerConfiguration::bIsAxisInput' has a wrong offset!");
static_assert(offsetof(FMarinerControllerConfiguration, ConsoleKeys) == 0x000010, "Member 'FMarinerControllerConfiguration::ConsoleKeys' has a wrong offset!");

// ScriptStruct Mariner.MarinerInputBindings
// 0x0090 (0x0098 - 0x0008)
struct FMarinerInputBindings final : public FTableRowBase
{
public:
	EMarinerInputActions                          InputAction;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            PCIcon;                                            // 0x0010(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerInputBindings) == 0x000008, "Wrong alignment on FMarinerInputBindings");
static_assert(sizeof(FMarinerInputBindings) == 0x000098, "Wrong size on FMarinerInputBindings");
static_assert(offsetof(FMarinerInputBindings, InputAction) == 0x000008, "Member 'FMarinerInputBindings::InputAction' has a wrong offset!");
static_assert(offsetof(FMarinerInputBindings, PCIcon) == 0x000010, "Member 'FMarinerInputBindings::PCIcon' has a wrong offset!");

// ScriptStruct Mariner.MarinerInteractableData
// 0x0008 (0x0008 - 0x0000)
struct FMarinerInteractableData final
{
public:
	float                                         MouseInputScalar;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnalogInputScalar;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerInteractableData) == 0x000004, "Wrong alignment on FMarinerInteractableData");
static_assert(sizeof(FMarinerInteractableData) == 0x000008, "Wrong size on FMarinerInteractableData");
static_assert(offsetof(FMarinerInteractableData, MouseInputScalar) == 0x000000, "Member 'FMarinerInteractableData::MouseInputScalar' has a wrong offset!");
static_assert(offsetof(FMarinerInteractableData, AnalogInputScalar) == 0x000004, "Member 'FMarinerInteractableData::AnalogInputScalar' has a wrong offset!");

// ScriptStruct Mariner.MarinerItemInteractionIcon
// 0x0098 (0x0098 - 0x0000)
struct FMarinerItemInteractionIcon final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerItemInteractionIcon) == 0x000008, "Wrong alignment on FMarinerItemInteractionIcon");
static_assert(sizeof(FMarinerItemInteractionIcon) == 0x000098, "Wrong size on FMarinerItemInteractionIcon");
static_assert(offsetof(FMarinerItemInteractionIcon, Brush) == 0x000000, "Member 'FMarinerItemInteractionIcon::Brush' has a wrong offset!");
static_assert(offsetof(FMarinerItemInteractionIcon, ColorAndOpacity) == 0x000088, "Member 'FMarinerItemInteractionIcon::ColorAndOpacity' has a wrong offset!");

// ScriptStruct Mariner.MarinerItemInteractionDashParameters
// 0x0018 (0x0018 - 0x0000)
struct FMarinerItemInteractionDashParameters final
{
public:
	float                                         DashTargetConeHalfAngle;                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DashSpeed;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerCharacterMontage*               DashAnimation;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerItemInteractionDashParameters) == 0x000008, "Wrong alignment on FMarinerItemInteractionDashParameters");
static_assert(sizeof(FMarinerItemInteractionDashParameters) == 0x000018, "Wrong size on FMarinerItemInteractionDashParameters");
static_assert(offsetof(FMarinerItemInteractionDashParameters, DashTargetConeHalfAngle) == 0x000000, "Member 'FMarinerItemInteractionDashParameters::DashTargetConeHalfAngle' has a wrong offset!");
static_assert(offsetof(FMarinerItemInteractionDashParameters, DashSpeed) == 0x000008, "Member 'FMarinerItemInteractionDashParameters::DashSpeed' has a wrong offset!");
static_assert(offsetof(FMarinerItemInteractionDashParameters, DashAnimation) == 0x000010, "Member 'FMarinerItemInteractionDashParameters::DashAnimation' has a wrong offset!");

// ScriptStruct Mariner.MarinerUIItemSizes
// 0x0011 (0x0011 - 0x0000)
struct FMarinerUIItemSizes final
{
public:
	EMarinerUIItemSize                            SkinSize;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            ArtifactSize;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            TotemBorderSize;                                   // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            TotemPatternSize;                                  // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            TotemShapeSize;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            TotemStandSize;                                    // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            TotemSymbolSize;                                   // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            TotemVFXSize;                                      // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            TotemCompanionSize;                                // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            EmoteSize;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            CharacterSize;                                     // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            MegaBlastTrailSize;                                // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            ReturnTrailSize;                                   // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            RocketFuelSize;                                    // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            RocketPartsSize;                                   // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            BPXPBonusPersonalSize;                             // 0x000F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerUIItemSize                            BPXPBonusPartySize;                                // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerUIItemSizes) == 0x000001, "Wrong alignment on FMarinerUIItemSizes");
static_assert(sizeof(FMarinerUIItemSizes) == 0x000011, "Wrong size on FMarinerUIItemSizes");
static_assert(offsetof(FMarinerUIItemSizes, SkinSize) == 0x000000, "Member 'FMarinerUIItemSizes::SkinSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, ArtifactSize) == 0x000001, "Member 'FMarinerUIItemSizes::ArtifactSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, TotemBorderSize) == 0x000002, "Member 'FMarinerUIItemSizes::TotemBorderSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, TotemPatternSize) == 0x000003, "Member 'FMarinerUIItemSizes::TotemPatternSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, TotemShapeSize) == 0x000004, "Member 'FMarinerUIItemSizes::TotemShapeSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, TotemStandSize) == 0x000005, "Member 'FMarinerUIItemSizes::TotemStandSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, TotemSymbolSize) == 0x000006, "Member 'FMarinerUIItemSizes::TotemSymbolSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, TotemVFXSize) == 0x000007, "Member 'FMarinerUIItemSizes::TotemVFXSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, TotemCompanionSize) == 0x000008, "Member 'FMarinerUIItemSizes::TotemCompanionSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, EmoteSize) == 0x000009, "Member 'FMarinerUIItemSizes::EmoteSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, CharacterSize) == 0x00000A, "Member 'FMarinerUIItemSizes::CharacterSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, MegaBlastTrailSize) == 0x00000B, "Member 'FMarinerUIItemSizes::MegaBlastTrailSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, ReturnTrailSize) == 0x00000C, "Member 'FMarinerUIItemSizes::ReturnTrailSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, RocketFuelSize) == 0x00000D, "Member 'FMarinerUIItemSizes::RocketFuelSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, RocketPartsSize) == 0x00000E, "Member 'FMarinerUIItemSizes::RocketPartsSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, BPXPBonusPersonalSize) == 0x00000F, "Member 'FMarinerUIItemSizes::BPXPBonusPersonalSize' has a wrong offset!");
static_assert(offsetof(FMarinerUIItemSizes, BPXPBonusPartySize) == 0x000010, "Member 'FMarinerUIItemSizes::BPXPBonusPartySize' has a wrong offset!");

// ScriptStruct Mariner.MarinerItemLevelGroupData
// 0x0170 (0x0170 - 0x0000)
struct FMarinerItemLevelGroupData final
{
public:
	TSubclassOf<class UMarinerItemLevelWidget>    LevelWidgetType;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerDeadSpaceWidget>    DeadSpaceWidgetType;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerItemLevelColumnWidget> ItemColumnWidgetType;                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerLayeredButton>      ItemButtonType;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            FreeLockBrush;                                     // 0x0020(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            PaidLockBrush;                                     // 0x00A8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMarinerUIItemSizes                    ItemSizes;                                         // 0x0130(0x0011)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerUIItemSizeDefinitions          SizeDefinitions;                                   // 0x0144(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MaxColumns;                                        // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRows;                                           // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemPadding;                                       // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOffset;                                      // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeEmptyLevels;                               // 0x016C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPaidGroups;                                   // 0x016D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16E[0x2];                                      // 0x016E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerItemLevelGroupData) == 0x000008, "Wrong alignment on FMarinerItemLevelGroupData");
static_assert(sizeof(FMarinerItemLevelGroupData) == 0x000170, "Wrong size on FMarinerItemLevelGroupData");
static_assert(offsetof(FMarinerItemLevelGroupData, LevelWidgetType) == 0x000000, "Member 'FMarinerItemLevelGroupData::LevelWidgetType' has a wrong offset!");
static_assert(offsetof(FMarinerItemLevelGroupData, DeadSpaceWidgetType) == 0x000008, "Member 'FMarinerItemLevelGroupData::DeadSpaceWidgetType' has a wrong offset!");
static_assert(offsetof(FMarinerItemLevelGroupData, ItemColumnWidgetType) == 0x000010, "Member 'FMarinerItemLevelGroupData::ItemColumnWidgetType' has a wrong offset!");
static_assert(offsetof(FMarinerItemLevelGroupData, ItemButtonType) == 0x000018, "Member 'FMarinerItemLevelGroupData::ItemButtonType' has a wrong offset!");
static_assert(offsetof(FMarinerItemLevelGroupData, FreeLockBrush) == 0x000020, "Member 'FMarinerItemLevelGroupData::FreeLockBrush' has a wrong offset!");
static_assert(offsetof(FMarinerItemLevelGroupData, PaidLockBrush) == 0x0000A8, "Member 'FMarinerItemLevelGroupData::PaidLockBrush' has a wrong offset!");
static_assert(offsetof(FMarinerItemLevelGroupData, ItemSizes) == 0x000130, "Member 'FMarinerItemLevelGroupData::ItemSizes' has a wrong offset!");
static_assert(offsetof(FMarinerItemLevelGroupData, SizeDefinitions) == 0x000144, "Member 'FMarinerItemLevelGroupData::SizeDefinitions' has a wrong offset!");
static_assert(offsetof(FMarinerItemLevelGroupData, MaxColumns) == 0x00015C, "Member 'FMarinerItemLevelGroupData::MaxColumns' has a wrong offset!");
static_assert(offsetof(FMarinerItemLevelGroupData, MaxRows) == 0x000160, "Member 'FMarinerItemLevelGroupData::MaxRows' has a wrong offset!");
static_assert(offsetof(FMarinerItemLevelGroupData, ItemPadding) == 0x000164, "Member 'FMarinerItemLevelGroupData::ItemPadding' has a wrong offset!");
static_assert(offsetof(FMarinerItemLevelGroupData, HeightOffset) == 0x000168, "Member 'FMarinerItemLevelGroupData::HeightOffset' has a wrong offset!");
static_assert(offsetof(FMarinerItemLevelGroupData, bExcludeEmptyLevels) == 0x00016C, "Member 'FMarinerItemLevelGroupData::bExcludeEmptyLevels' has a wrong offset!");
static_assert(offsetof(FMarinerItemLevelGroupData, bShowPaidGroups) == 0x00016D, "Member 'FMarinerItemLevelGroupData::bShowPaidGroups' has a wrong offset!");

// ScriptStruct Mariner.MarinerItemLoadResponseAssets
// 0x0008 (0x0008 - 0x0000)
struct FMarinerItemLoadResponseAssets final
{
public:
	class UImage*                                 RarityIcon;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerItemLoadResponseAssets) == 0x000008, "Wrong alignment on FMarinerItemLoadResponseAssets");
static_assert(sizeof(FMarinerItemLoadResponseAssets) == 0x000008, "Wrong size on FMarinerItemLoadResponseAssets");
static_assert(offsetof(FMarinerItemLoadResponseAssets, RarityIcon) == 0x000000, "Member 'FMarinerItemLoadResponseAssets::RarityIcon' has a wrong offset!");

// ScriptStruct Mariner.MarinerProjectileImpulseBatchMemberData
// 0x0010 (0x0010 - 0x0000)
struct FMarinerProjectileImpulseBatchMemberData final
{
public:
	float                                         ImpulseMagnitude;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDirection;                                  // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerProjectileImpulseBatchMemberData) == 0x000004, "Wrong alignment on FMarinerProjectileImpulseBatchMemberData");
static_assert(sizeof(FMarinerProjectileImpulseBatchMemberData) == 0x000010, "Wrong size on FMarinerProjectileImpulseBatchMemberData");
static_assert(offsetof(FMarinerProjectileImpulseBatchMemberData, ImpulseMagnitude) == 0x000000, "Member 'FMarinerProjectileImpulseBatchMemberData::ImpulseMagnitude' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileImpulseBatchMemberData, ImpulseDirection) == 0x000004, "Member 'FMarinerProjectileImpulseBatchMemberData::ImpulseDirection' has a wrong offset!");

// ScriptStruct Mariner.MarinerProjectileImpulseBatchMember
// 0x0030 (0x0030 - 0x0000)
struct FMarinerProjectileImpulseBatchMember final
{
public:
	struct FMarinerProjectileImpulseBatchMemberData OriginalImpulseData;                               // 0x0000(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMarinerProjectileImpulseBatchMemberData BatchedImpulseData;                                // 0x0010(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         ImpulseTimestamp;                                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseOrigin;                                     // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerProjectileImpulseBatchMember) == 0x000004, "Wrong alignment on FMarinerProjectileImpulseBatchMember");
static_assert(sizeof(FMarinerProjectileImpulseBatchMember) == 0x000030, "Wrong size on FMarinerProjectileImpulseBatchMember");
static_assert(offsetof(FMarinerProjectileImpulseBatchMember, OriginalImpulseData) == 0x000000, "Member 'FMarinerProjectileImpulseBatchMember::OriginalImpulseData' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileImpulseBatchMember, BatchedImpulseData) == 0x000010, "Member 'FMarinerProjectileImpulseBatchMember::BatchedImpulseData' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileImpulseBatchMember, ImpulseTimestamp) == 0x000020, "Member 'FMarinerProjectileImpulseBatchMember::ImpulseTimestamp' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileImpulseBatchMember, ImpulseOrigin) == 0x000024, "Member 'FMarinerProjectileImpulseBatchMember::ImpulseOrigin' has a wrong offset!");

// ScriptStruct Mariner.MarinerKnockoutMiniScoreboardAnimations
// 0x0020 (0x0020 - 0x0000)
struct FMarinerKnockoutMiniScoreboardAnimations final
{
public:
	class UWidgetAnimation*                       PlayerTeamLastStock;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       EnemyTeamLastStock;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       PlayerTeamLostStock;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       EnemyTeamLostStock;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerKnockoutMiniScoreboardAnimations) == 0x000008, "Wrong alignment on FMarinerKnockoutMiniScoreboardAnimations");
static_assert(sizeof(FMarinerKnockoutMiniScoreboardAnimations) == 0x000020, "Wrong size on FMarinerKnockoutMiniScoreboardAnimations");
static_assert(offsetof(FMarinerKnockoutMiniScoreboardAnimations, PlayerTeamLastStock) == 0x000000, "Member 'FMarinerKnockoutMiniScoreboardAnimations::PlayerTeamLastStock' has a wrong offset!");
static_assert(offsetof(FMarinerKnockoutMiniScoreboardAnimations, EnemyTeamLastStock) == 0x000008, "Member 'FMarinerKnockoutMiniScoreboardAnimations::EnemyTeamLastStock' has a wrong offset!");
static_assert(offsetof(FMarinerKnockoutMiniScoreboardAnimations, PlayerTeamLostStock) == 0x000010, "Member 'FMarinerKnockoutMiniScoreboardAnimations::PlayerTeamLostStock' has a wrong offset!");
static_assert(offsetof(FMarinerKnockoutMiniScoreboardAnimations, EnemyTeamLostStock) == 0x000018, "Member 'FMarinerKnockoutMiniScoreboardAnimations::EnemyTeamLostStock' has a wrong offset!");

// ScriptStruct Mariner.MarinerLayeredButtonImageProperties
// 0x01D0 (0x01D0 - 0x0000)
struct FMarinerLayeredButtonImageProperties final
{
public:
	struct FSlateBrush                            IdleImage;                                         // 0x0000(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredImage;                                      // 0x0088(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            PressedImage;                                      // 0x0110(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bApplyColors;                                      // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           IdleColor;                                         // 0x019C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HoveredColor;                                      // 0x01AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PressedColor;                                      // 0x01BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerLayeredButtonImageProperties) == 0x000008, "Wrong alignment on FMarinerLayeredButtonImageProperties");
static_assert(sizeof(FMarinerLayeredButtonImageProperties) == 0x0001D0, "Wrong size on FMarinerLayeredButtonImageProperties");
static_assert(offsetof(FMarinerLayeredButtonImageProperties, IdleImage) == 0x000000, "Member 'FMarinerLayeredButtonImageProperties::IdleImage' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonImageProperties, HoveredImage) == 0x000088, "Member 'FMarinerLayeredButtonImageProperties::HoveredImage' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonImageProperties, PressedImage) == 0x000110, "Member 'FMarinerLayeredButtonImageProperties::PressedImage' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonImageProperties, bApplyColors) == 0x000198, "Member 'FMarinerLayeredButtonImageProperties::bApplyColors' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonImageProperties, IdleColor) == 0x00019C, "Member 'FMarinerLayeredButtonImageProperties::IdleColor' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonImageProperties, HoveredColor) == 0x0001AC, "Member 'FMarinerLayeredButtonImageProperties::HoveredColor' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonImageProperties, PressedColor) == 0x0001BC, "Member 'FMarinerLayeredButtonImageProperties::PressedColor' has a wrong offset!");

// ScriptStruct Mariner.MarinerLayeredButtonImageStates
// 0x0748 (0x0748 - 0x0000)
struct FMarinerLayeredButtonImageStates final
{
public:
	bool                                          bImageAllowed;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarinerLayeredButtonImageProperties   NormalEnabled;                                     // 0x0008(0x01D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMarinerLayeredButtonImageProperties   NormalDisabled;                                    // 0x01D8(0x01D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMarinerLayeredButtonImageProperties   SelectedEnabled;                                   // 0x03A8(0x01D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMarinerLayeredButtonImageProperties   SelectedDisabled;                                  // 0x0578(0x01D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerLayeredButtonImageStates) == 0x000008, "Wrong alignment on FMarinerLayeredButtonImageStates");
static_assert(sizeof(FMarinerLayeredButtonImageStates) == 0x000748, "Wrong size on FMarinerLayeredButtonImageStates");
static_assert(offsetof(FMarinerLayeredButtonImageStates, bImageAllowed) == 0x000000, "Member 'FMarinerLayeredButtonImageStates::bImageAllowed' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonImageStates, NormalEnabled) == 0x000008, "Member 'FMarinerLayeredButtonImageStates::NormalEnabled' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonImageStates, NormalDisabled) == 0x0001D8, "Member 'FMarinerLayeredButtonImageStates::NormalDisabled' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonImageStates, SelectedEnabled) == 0x0003A8, "Member 'FMarinerLayeredButtonImageStates::SelectedEnabled' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonImageStates, SelectedDisabled) == 0x000578, "Member 'FMarinerLayeredButtonImageStates::SelectedDisabled' has a wrong offset!");

// ScriptStruct Mariner.MarinerLayeredButtonTextProperties
// 0x0080 (0x0080 - 0x0000)
struct FMarinerLayeredButtonTextProperties final
{
public:
	bool                                          bApplyColors;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            IdleColor;                                         // 0x0008(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            HoveredColor;                                      // 0x0030(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            PressedColor;                                      // 0x0058(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerLayeredButtonTextProperties) == 0x000008, "Wrong alignment on FMarinerLayeredButtonTextProperties");
static_assert(sizeof(FMarinerLayeredButtonTextProperties) == 0x000080, "Wrong size on FMarinerLayeredButtonTextProperties");
static_assert(offsetof(FMarinerLayeredButtonTextProperties, bApplyColors) == 0x000000, "Member 'FMarinerLayeredButtonTextProperties::bApplyColors' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonTextProperties, IdleColor) == 0x000008, "Member 'FMarinerLayeredButtonTextProperties::IdleColor' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonTextProperties, HoveredColor) == 0x000030, "Member 'FMarinerLayeredButtonTextProperties::HoveredColor' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonTextProperties, PressedColor) == 0x000058, "Member 'FMarinerLayeredButtonTextProperties::PressedColor' has a wrong offset!");

// ScriptStruct Mariner.MarinerLayeredButtonTextStates
// 0x0200 (0x0200 - 0x0000)
struct FMarinerLayeredButtonTextStates final
{
public:
	struct FMarinerLayeredButtonTextProperties    NormalEnabled;                                     // 0x0000(0x0080)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMarinerLayeredButtonTextProperties    NormalDisabled;                                    // 0x0080(0x0080)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMarinerLayeredButtonTextProperties    SelectedEnabled;                                   // 0x0100(0x0080)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMarinerLayeredButtonTextProperties    SelectedDisabled;                                  // 0x0180(0x0080)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerLayeredButtonTextStates) == 0x000008, "Wrong alignment on FMarinerLayeredButtonTextStates");
static_assert(sizeof(FMarinerLayeredButtonTextStates) == 0x000200, "Wrong size on FMarinerLayeredButtonTextStates");
static_assert(offsetof(FMarinerLayeredButtonTextStates, NormalEnabled) == 0x000000, "Member 'FMarinerLayeredButtonTextStates::NormalEnabled' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonTextStates, NormalDisabled) == 0x000080, "Member 'FMarinerLayeredButtonTextStates::NormalDisabled' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonTextStates, SelectedEnabled) == 0x000100, "Member 'FMarinerLayeredButtonTextStates::SelectedEnabled' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonTextStates, SelectedDisabled) == 0x000180, "Member 'FMarinerLayeredButtonTextStates::SelectedDisabled' has a wrong offset!");

// ScriptStruct Mariner.MarinerMessageBoxPurchaseData
// 0x0018 (0x00C8 - 0x00B0)
struct FMarinerMessageBoxPurchaseData final : public FMarinerMessageBoxBaseData
{
public:
	class FString                                 OfferId;                                           // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPremium;                                          // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerMessageBoxPurchaseData) == 0x000008, "Wrong alignment on FMarinerMessageBoxPurchaseData");
static_assert(sizeof(FMarinerMessageBoxPurchaseData) == 0x0000C8, "Wrong size on FMarinerMessageBoxPurchaseData");
static_assert(offsetof(FMarinerMessageBoxPurchaseData, OfferId) == 0x0000B0, "Member 'FMarinerMessageBoxPurchaseData::OfferId' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxPurchaseData, bPremium) == 0x0000C0, "Member 'FMarinerMessageBoxPurchaseData::bPremium' has a wrong offset!");

// ScriptStruct Mariner.MarinerLayeredButtonAssets
// 0x0068 (0x0068 - 0x0000)
struct FMarinerLayeredButtonAssets final
{
public:
	class UButton*                                Button;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USizeBox*                               SizeBox;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Background;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Material;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Icon;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 ContentStateIcon;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Border;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Text;                                              // 0x0038(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             AuxText;                                           // 0x0040(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            UnviewedWidget;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerPromptBanner*                   PromptBanner;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       HoveredAnimation;                                  // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       UnhoveredAnimation;                                // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerLayeredButtonAssets) == 0x000008, "Wrong alignment on FMarinerLayeredButtonAssets");
static_assert(sizeof(FMarinerLayeredButtonAssets) == 0x000068, "Wrong size on FMarinerLayeredButtonAssets");
static_assert(offsetof(FMarinerLayeredButtonAssets, Button) == 0x000000, "Member 'FMarinerLayeredButtonAssets::Button' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonAssets, SizeBox) == 0x000008, "Member 'FMarinerLayeredButtonAssets::SizeBox' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonAssets, Background) == 0x000010, "Member 'FMarinerLayeredButtonAssets::Background' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonAssets, Material) == 0x000018, "Member 'FMarinerLayeredButtonAssets::Material' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonAssets, Icon) == 0x000020, "Member 'FMarinerLayeredButtonAssets::Icon' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonAssets, ContentStateIcon) == 0x000028, "Member 'FMarinerLayeredButtonAssets::ContentStateIcon' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonAssets, Border) == 0x000030, "Member 'FMarinerLayeredButtonAssets::Border' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonAssets, Text) == 0x000038, "Member 'FMarinerLayeredButtonAssets::Text' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonAssets, AuxText) == 0x000040, "Member 'FMarinerLayeredButtonAssets::AuxText' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonAssets, UnviewedWidget) == 0x000048, "Member 'FMarinerLayeredButtonAssets::UnviewedWidget' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonAssets, PromptBanner) == 0x000050, "Member 'FMarinerLayeredButtonAssets::PromptBanner' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonAssets, HoveredAnimation) == 0x000058, "Member 'FMarinerLayeredButtonAssets::HoveredAnimation' has a wrong offset!");
static_assert(offsetof(FMarinerLayeredButtonAssets, UnhoveredAnimation) == 0x000060, "Member 'FMarinerLayeredButtonAssets::UnhoveredAnimation' has a wrong offset!");

// ScriptStruct Mariner.MarinerMessageImage
// 0x0020 (0x0020 - 0x0000)
struct FMarinerMessageImage final
{
public:
	class UTexture*                               Image1;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Image2;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Image3;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Image4;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMessageImage) == 0x000008, "Wrong alignment on FMarinerMessageImage");
static_assert(sizeof(FMarinerMessageImage) == 0x000020, "Wrong size on FMarinerMessageImage");
static_assert(offsetof(FMarinerMessageImage, Image1) == 0x000000, "Member 'FMarinerMessageImage::Image1' has a wrong offset!");
static_assert(offsetof(FMarinerMessageImage, Image2) == 0x000008, "Member 'FMarinerMessageImage::Image2' has a wrong offset!");
static_assert(offsetof(FMarinerMessageImage, Image3) == 0x000010, "Member 'FMarinerMessageImage::Image3' has a wrong offset!");
static_assert(offsetof(FMarinerMessageImage, Image4) == 0x000018, "Member 'FMarinerMessageImage::Image4' has a wrong offset!");

// ScriptStruct Mariner.MarinerMessageText
// 0x0048 (0x0048 - 0x0000)
struct FMarinerMessageText final
{
public:
	class FText                                   Text1;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Text2;                                             // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Text3;                                             // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMessageText) == 0x000008, "Wrong alignment on FMarinerMessageText");
static_assert(sizeof(FMarinerMessageText) == 0x000048, "Wrong size on FMarinerMessageText");
static_assert(offsetof(FMarinerMessageText, Text1) == 0x000000, "Member 'FMarinerMessageText::Text1' has a wrong offset!");
static_assert(offsetof(FMarinerMessageText, Text2) == 0x000018, "Member 'FMarinerMessageText::Text2' has a wrong offset!");
static_assert(offsetof(FMarinerMessageText, Text3) == 0x000030, "Member 'FMarinerMessageText::Text3' has a wrong offset!");

// ScriptStruct Mariner.PlaylistSetup
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FPlaylistSetup final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaylistSetup) == 0x000008, "Wrong alignment on FPlaylistSetup");
static_assert(sizeof(FPlaylistSetup) == 0x000020, "Wrong size on FPlaylistSetup");

// ScriptStruct Mariner.FilterModeData
// 0x0010 (0x0010 - 0x0000)
struct FFilterModeData final
{
public:
	struct FGuid                                  ModeID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFilterModeData) == 0x000004, "Wrong alignment on FFilterModeData");
static_assert(sizeof(FFilterModeData) == 0x000010, "Wrong size on FFilterModeData");
static_assert(offsetof(FFilterModeData, ModeID) == 0x000000, "Member 'FFilterModeData::ModeID' has a wrong offset!");

// ScriptStruct Mariner.FilterModeArray
// 0x0010 (0x0010 - 0x0000)
struct FFilterModeArray final
{
public:
	TArray<struct FFilterModeData>                Modes;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFilterModeArray) == 0x000008, "Wrong alignment on FFilterModeArray");
static_assert(sizeof(FFilterModeArray) == 0x000010, "Wrong size on FFilterModeArray");
static_assert(offsetof(FFilterModeArray, Modes) == 0x000000, "Member 'FFilterModeArray::Modes' has a wrong offset!");

// ScriptStruct Mariner.MarinerMeshSwapReplicationData_Revert
// 0x0002 (0x0002 - 0x0000)
struct FMarinerMeshSwapReplicationData_Revert final
{
public:
	uint16                                        UniqueId;                                          // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMeshSwapReplicationData_Revert) == 0x000002, "Wrong alignment on FMarinerMeshSwapReplicationData_Revert");
static_assert(sizeof(FMarinerMeshSwapReplicationData_Revert) == 0x000002, "Wrong size on FMarinerMeshSwapReplicationData_Revert");
static_assert(offsetof(FMarinerMeshSwapReplicationData_Revert, UniqueId) == 0x000000, "Member 'FMarinerMeshSwapReplicationData_Revert::UniqueId' has a wrong offset!");

// ScriptStruct Mariner.MarinerMeshSwapReplicationData_Apply
// 0x0010 (0x0010 - 0x0000)
struct FMarinerMeshSwapReplicationData_Apply final
{
public:
	class UMeshComponent*                         MeshToSwapTo;                                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshVisibilityOverlapDuration;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        UniqueId;                                          // 0x000C(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerMeshSwapReplicationData_Apply) == 0x000008, "Wrong alignment on FMarinerMeshSwapReplicationData_Apply");
static_assert(sizeof(FMarinerMeshSwapReplicationData_Apply) == 0x000010, "Wrong size on FMarinerMeshSwapReplicationData_Apply");
static_assert(offsetof(FMarinerMeshSwapReplicationData_Apply, MeshToSwapTo) == 0x000000, "Member 'FMarinerMeshSwapReplicationData_Apply::MeshToSwapTo' has a wrong offset!");
static_assert(offsetof(FMarinerMeshSwapReplicationData_Apply, MeshVisibilityOverlapDuration) == 0x000008, "Member 'FMarinerMeshSwapReplicationData_Apply::MeshVisibilityOverlapDuration' has a wrong offset!");
static_assert(offsetof(FMarinerMeshSwapReplicationData_Apply, UniqueId) == 0x00000C, "Member 'FMarinerMeshSwapReplicationData_Apply::UniqueId' has a wrong offset!");

// ScriptStruct Mariner.AimAssistOutputParameters
// 0x0020 (0x0020 - 0x0000)
struct FAimAssistOutputParameters final
{
public:
	float                                         RedReticleConeStrength;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrictionConeStrength;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletBendConeStrength;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetIntersectionWithHomingCone;                  // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimAssistOutputParameters) == 0x000008, "Wrong alignment on FAimAssistOutputParameters");
static_assert(sizeof(FAimAssistOutputParameters) == 0x000020, "Wrong size on FAimAssistOutputParameters");
static_assert(offsetof(FAimAssistOutputParameters, RedReticleConeStrength) == 0x000000, "Member 'FAimAssistOutputParameters::RedReticleConeStrength' has a wrong offset!");
static_assert(offsetof(FAimAssistOutputParameters, FrictionConeStrength) == 0x000004, "Member 'FAimAssistOutputParameters::FrictionConeStrength' has a wrong offset!");
static_assert(offsetof(FAimAssistOutputParameters, BulletBendConeStrength) == 0x000008, "Member 'FAimAssistOutputParameters::BulletBendConeStrength' has a wrong offset!");
static_assert(offsetof(FAimAssistOutputParameters, TargetIntersectionWithHomingCone) == 0x00000C, "Member 'FAimAssistOutputParameters::TargetIntersectionWithHomingCone' has a wrong offset!");
static_assert(offsetof(FAimAssistOutputParameters, Actor) == 0x000018, "Member 'FAimAssistOutputParameters::Actor' has a wrong offset!");

// ScriptStruct Mariner.AimAssistInputParameters
// 0x001C (0x001C - 0x0000)
struct FAimAssistInputParameters final
{
public:
	int32                                         AimTeamIndex;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AimLocation;                                       // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AimLookVector;                                     // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimAssistInputParameters) == 0x000004, "Wrong alignment on FAimAssistInputParameters");
static_assert(sizeof(FAimAssistInputParameters) == 0x00001C, "Wrong size on FAimAssistInputParameters");
static_assert(offsetof(FAimAssistInputParameters, AimTeamIndex) == 0x000000, "Member 'FAimAssistInputParameters::AimTeamIndex' has a wrong offset!");
static_assert(offsetof(FAimAssistInputParameters, AimLocation) == 0x000004, "Member 'FAimAssistInputParameters::AimLocation' has a wrong offset!");
static_assert(offsetof(FAimAssistInputParameters, AimLookVector) == 0x000010, "Member 'FAimAssistInputParameters::AimLookVector' has a wrong offset!");

// ScriptStruct Mariner.MarinerCulture
// 0x0028 (0x0028 - 0x0000)
struct FMarinerCulture final
{
public:
	class FString                                 LanguageCode;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerCulture) == 0x000008, "Wrong alignment on FMarinerCulture");
static_assert(sizeof(FMarinerCulture) == 0x000028, "Wrong size on FMarinerCulture");
static_assert(offsetof(FMarinerCulture, LanguageCode) == 0x000000, "Member 'FMarinerCulture::LanguageCode' has a wrong offset!");
static_assert(offsetof(FMarinerCulture, DisplayName) == 0x000010, "Member 'FMarinerCulture::DisplayName' has a wrong offset!");

// ScriptStruct Mariner.MarinerMenuStackButtonState
// 0x0098 (0x0098 - 0x0000)
struct FMarinerMenuStackButtonState final
{
public:
	TSubclassOf<class UMarinerTextWidgetStyle>    TextStyle;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            TabBrush;                                          // 0x0008(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bEnableText;                                       // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWidgetSlot;                                 // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerMenuStackButtonState) == 0x000008, "Wrong alignment on FMarinerMenuStackButtonState");
static_assert(sizeof(FMarinerMenuStackButtonState) == 0x000098, "Wrong size on FMarinerMenuStackButtonState");
static_assert(offsetof(FMarinerMenuStackButtonState, TextStyle) == 0x000000, "Member 'FMarinerMenuStackButtonState::TextStyle' has a wrong offset!");
static_assert(offsetof(FMarinerMenuStackButtonState, TabBrush) == 0x000008, "Member 'FMarinerMenuStackButtonState::TabBrush' has a wrong offset!");
static_assert(offsetof(FMarinerMenuStackButtonState, bEnableText) == 0x000090, "Member 'FMarinerMenuStackButtonState::bEnableText' has a wrong offset!");
static_assert(offsetof(FMarinerMenuStackButtonState, bEnableWidgetSlot) == 0x000091, "Member 'FMarinerMenuStackButtonState::bEnableWidgetSlot' has a wrong offset!");

// ScriptStruct Mariner.MarinerMenuStackButtonAssets
// 0x0038 (0x0038 - 0x0000)
struct FMarinerMenuStackButtonAssets final
{
public:
	class UMarinerButton*                         ButtonText;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                ButtonHitArea;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 TabImage;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNamedSlot*                             WidgetSlot;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNamedSlot*                             HighlightSlot;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       HoveredAnimation;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       UnhoveredAnimation;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMenuStackButtonAssets) == 0x000008, "Wrong alignment on FMarinerMenuStackButtonAssets");
static_assert(sizeof(FMarinerMenuStackButtonAssets) == 0x000038, "Wrong size on FMarinerMenuStackButtonAssets");
static_assert(offsetof(FMarinerMenuStackButtonAssets, ButtonText) == 0x000000, "Member 'FMarinerMenuStackButtonAssets::ButtonText' has a wrong offset!");
static_assert(offsetof(FMarinerMenuStackButtonAssets, ButtonHitArea) == 0x000008, "Member 'FMarinerMenuStackButtonAssets::ButtonHitArea' has a wrong offset!");
static_assert(offsetof(FMarinerMenuStackButtonAssets, TabImage) == 0x000010, "Member 'FMarinerMenuStackButtonAssets::TabImage' has a wrong offset!");
static_assert(offsetof(FMarinerMenuStackButtonAssets, WidgetSlot) == 0x000018, "Member 'FMarinerMenuStackButtonAssets::WidgetSlot' has a wrong offset!");
static_assert(offsetof(FMarinerMenuStackButtonAssets, HighlightSlot) == 0x000020, "Member 'FMarinerMenuStackButtonAssets::HighlightSlot' has a wrong offset!");
static_assert(offsetof(FMarinerMenuStackButtonAssets, HoveredAnimation) == 0x000028, "Member 'FMarinerMenuStackButtonAssets::HoveredAnimation' has a wrong offset!");
static_assert(offsetof(FMarinerMenuStackButtonAssets, UnhoveredAnimation) == 0x000030, "Member 'FMarinerMenuStackButtonAssets::UnhoveredAnimation' has a wrong offset!");

// ScriptStruct Mariner.MarinerMenuStackManagerSetup
// 0x0028 (0x0028 - 0x0000)
struct FMarinerMenuStackManagerSetup final
{
public:
	class UMarinerMenuStackBaseWidget*            BaseWidget;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerGridPanel*                      BaseNavRibbon;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerPrompt*                         PromptLeft;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerPrompt*                         PromptRight;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerMenuTooltipWidget*              ToolTipWidget;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMenuStackManagerSetup) == 0x000008, "Wrong alignment on FMarinerMenuStackManagerSetup");
static_assert(sizeof(FMarinerMenuStackManagerSetup) == 0x000028, "Wrong size on FMarinerMenuStackManagerSetup");
static_assert(offsetof(FMarinerMenuStackManagerSetup, BaseWidget) == 0x000000, "Member 'FMarinerMenuStackManagerSetup::BaseWidget' has a wrong offset!");
static_assert(offsetof(FMarinerMenuStackManagerSetup, BaseNavRibbon) == 0x000008, "Member 'FMarinerMenuStackManagerSetup::BaseNavRibbon' has a wrong offset!");
static_assert(offsetof(FMarinerMenuStackManagerSetup, PromptLeft) == 0x000010, "Member 'FMarinerMenuStackManagerSetup::PromptLeft' has a wrong offset!");
static_assert(offsetof(FMarinerMenuStackManagerSetup, PromptRight) == 0x000018, "Member 'FMarinerMenuStackManagerSetup::PromptRight' has a wrong offset!");
static_assert(offsetof(FMarinerMenuStackManagerSetup, ToolTipWidget) == 0x000020, "Member 'FMarinerMenuStackManagerSetup::ToolTipWidget' has a wrong offset!");

// ScriptStruct Mariner.MarinerMenuStackBaseWidgetSetup
// 0x0010 (0x0010 - 0x0000)
struct FMarinerMenuStackBaseWidgetSetup final
{
public:
	class UMarinerAnimatedWidget*                 Content;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerPromptBanner*                   Prompts;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMenuStackBaseWidgetSetup) == 0x000008, "Wrong alignment on FMarinerMenuStackBaseWidgetSetup");
static_assert(sizeof(FMarinerMenuStackBaseWidgetSetup) == 0x000010, "Wrong size on FMarinerMenuStackBaseWidgetSetup");
static_assert(offsetof(FMarinerMenuStackBaseWidgetSetup, Content) == 0x000000, "Member 'FMarinerMenuStackBaseWidgetSetup::Content' has a wrong offset!");
static_assert(offsetof(FMarinerMenuStackBaseWidgetSetup, Prompts) == 0x000008, "Member 'FMarinerMenuStackBaseWidgetSetup::Prompts' has a wrong offset!");

// ScriptStruct Mariner.MarinerMessageBoxPrompt
// 0x0020 (0x0020 - 0x0000)
struct FMarinerMessageBoxPrompt final
{
public:
	class FText                                   DisplayText;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bShowForGamepad;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowForKBM;                                       // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerMessageBoxPrompt) == 0x000008, "Wrong alignment on FMarinerMessageBoxPrompt");
static_assert(sizeof(FMarinerMessageBoxPrompt) == 0x000020, "Wrong size on FMarinerMessageBoxPrompt");
static_assert(offsetof(FMarinerMessageBoxPrompt, DisplayText) == 0x000000, "Member 'FMarinerMessageBoxPrompt::DisplayText' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxPrompt, bShowForGamepad) == 0x000018, "Member 'FMarinerMessageBoxPrompt::bShowForGamepad' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxPrompt, bShowForKBM) == 0x000019, "Member 'FMarinerMessageBoxPrompt::bShowForKBM' has a wrong offset!");

// ScriptStruct Mariner.MessageWidgetData
// 0x0010 (0x0010 - 0x0000)
struct FMessageWidgetData final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMessageWidgetData) == 0x000008, "Wrong alignment on FMessageWidgetData");
static_assert(sizeof(FMessageWidgetData) == 0x000010, "Wrong size on FMessageWidgetData");
static_assert(offsetof(FMessageWidgetData, Widget) == 0x000000, "Member 'FMessageWidgetData::Widget' has a wrong offset!");

// ScriptStruct Mariner.MessageWidgetPool
// 0x0010 (0x0010 - 0x0000)
struct FMessageWidgetPool final
{
public:
	TArray<struct FMessageWidgetData>             Pool;                                              // 0x0000(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessageWidgetPool) == 0x000008, "Wrong alignment on FMessageWidgetPool");
static_assert(sizeof(FMessageWidgetPool) == 0x000010, "Wrong size on FMessageWidgetPool");
static_assert(offsetof(FMessageWidgetPool, Pool) == 0x000000, "Member 'FMessageWidgetPool::Pool' has a wrong offset!");

// ScriptStruct Mariner.MessageWidgetPoolData
// 0x0010 (0x0010 - 0x0000)
struct FMessageWidgetPoolData final
{
public:
	TSubclassOf<class UUserWidget>                MessageWidgetType;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WidgetPoolSize;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMessageWidgetPoolData) == 0x000008, "Wrong alignment on FMessageWidgetPoolData");
static_assert(sizeof(FMessageWidgetPoolData) == 0x000010, "Wrong size on FMessageWidgetPoolData");
static_assert(offsetof(FMessageWidgetPoolData, MessageWidgetType) == 0x000000, "Member 'FMessageWidgetPoolData::MessageWidgetType' has a wrong offset!");
static_assert(offsetof(FMessageWidgetPoolData, WidgetPoolSize) == 0x000008, "Member 'FMessageWidgetPoolData::WidgetPoolSize' has a wrong offset!");

// ScriptStruct Mariner.ModeSummaryPanel
// 0x00A0 (0x00A0 - 0x0000)
struct FModeSummaryPanel final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0018(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModeSummaryPanel) == 0x000008, "Wrong alignment on FModeSummaryPanel");
static_assert(sizeof(FModeSummaryPanel) == 0x0000A0, "Wrong size on FModeSummaryPanel");
static_assert(offsetof(FModeSummaryPanel, Text) == 0x000000, "Member 'FModeSummaryPanel::Text' has a wrong offset!");
static_assert(offsetof(FModeSummaryPanel, Brush) == 0x000018, "Member 'FModeSummaryPanel::Brush' has a wrong offset!");

// ScriptStruct Mariner.MarinerGameplayEffectMoveUpdateData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMarinerGameplayEffectMoveUpdateData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerGameplayEffectMoveUpdateData) == 0x000008, "Wrong alignment on FMarinerGameplayEffectMoveUpdateData");
static_assert(sizeof(FMarinerGameplayEffectMoveUpdateData) == 0x000018, "Wrong size on FMarinerGameplayEffectMoveUpdateData");

// ScriptStruct Mariner.MarinerMoveUpdateDatum
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMarinerMoveUpdateDatum final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerMoveUpdateDatum) == 0x000008, "Wrong alignment on FMarinerMoveUpdateDatum");
static_assert(sizeof(FMarinerMoveUpdateDatum) == 0x000018, "Wrong size on FMarinerMoveUpdateDatum");

// ScriptStruct Mariner.MarinerMoveUpdate
// 0x0090 (0x0090 - 0x0000)
struct FMarinerMoveUpdate final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         ID;                                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerConsumptionTimestamp;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FramesOfCollectedMoveUpdates;                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientReceivedTimestamp;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         GameplayEffectPredictionKey;                       // 0x0010(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarinerGameplayEffectMoveUpdateData> GameplayEffects_CollectionBucket;                  // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bClientSentToServer;                               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWantsApplicationOnServer;                         // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveUpdateApplied;                                // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarinerMoveUpdateDatum>        CustomMoveUpdateData;                              // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           RootMotionRemoveNames;                             // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMarinerGameplayEffectMoveUpdateData> GameplayEffects;                                   // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  ImpulseVelocity;                                   // 0x0070(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerPlayerState*                    MegablastInstigatingPlayerState;                   // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ImpulseFlags;                                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HostileImpulseMagnitudeSquared;                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMoveUpdate) == 0x000008, "Wrong alignment on FMarinerMoveUpdate");
static_assert(sizeof(FMarinerMoveUpdate) == 0x000090, "Wrong size on FMarinerMoveUpdate");
static_assert(offsetof(FMarinerMoveUpdate, ID) == 0x000001, "Member 'FMarinerMoveUpdate::ID' has a wrong offset!");
static_assert(offsetof(FMarinerMoveUpdate, ServerConsumptionTimestamp) == 0x000004, "Member 'FMarinerMoveUpdate::ServerConsumptionTimestamp' has a wrong offset!");
static_assert(offsetof(FMarinerMoveUpdate, FramesOfCollectedMoveUpdates) == 0x000008, "Member 'FMarinerMoveUpdate::FramesOfCollectedMoveUpdates' has a wrong offset!");
static_assert(offsetof(FMarinerMoveUpdate, ClientReceivedTimestamp) == 0x00000C, "Member 'FMarinerMoveUpdate::ClientReceivedTimestamp' has a wrong offset!");
static_assert(offsetof(FMarinerMoveUpdate, GameplayEffectPredictionKey) == 0x000010, "Member 'FMarinerMoveUpdate::GameplayEffectPredictionKey' has a wrong offset!");
static_assert(offsetof(FMarinerMoveUpdate, GameplayEffects_CollectionBucket) == 0x000028, "Member 'FMarinerMoveUpdate::GameplayEffects_CollectionBucket' has a wrong offset!");
static_assert(offsetof(FMarinerMoveUpdate, bClientSentToServer) == 0x000038, "Member 'FMarinerMoveUpdate::bClientSentToServer' has a wrong offset!");
static_assert(offsetof(FMarinerMoveUpdate, bWantsApplicationOnServer) == 0x000039, "Member 'FMarinerMoveUpdate::bWantsApplicationOnServer' has a wrong offset!");
static_assert(offsetof(FMarinerMoveUpdate, bMoveUpdateApplied) == 0x00003A, "Member 'FMarinerMoveUpdate::bMoveUpdateApplied' has a wrong offset!");
static_assert(offsetof(FMarinerMoveUpdate, CustomMoveUpdateData) == 0x000040, "Member 'FMarinerMoveUpdate::CustomMoveUpdateData' has a wrong offset!");
static_assert(offsetof(FMarinerMoveUpdate, RootMotionRemoveNames) == 0x000050, "Member 'FMarinerMoveUpdate::RootMotionRemoveNames' has a wrong offset!");
static_assert(offsetof(FMarinerMoveUpdate, GameplayEffects) == 0x000060, "Member 'FMarinerMoveUpdate::GameplayEffects' has a wrong offset!");
static_assert(offsetof(FMarinerMoveUpdate, ImpulseVelocity) == 0x000070, "Member 'FMarinerMoveUpdate::ImpulseVelocity' has a wrong offset!");
static_assert(offsetof(FMarinerMoveUpdate, MegablastInstigatingPlayerState) == 0x000080, "Member 'FMarinerMoveUpdate::MegablastInstigatingPlayerState' has a wrong offset!");
static_assert(offsetof(FMarinerMoveUpdate, ImpulseFlags) == 0x000088, "Member 'FMarinerMoveUpdate::ImpulseFlags' has a wrong offset!");
static_assert(offsetof(FMarinerMoveUpdate, HostileImpulseMagnitudeSquared) == 0x00008C, "Member 'FMarinerMoveUpdate::HostileImpulseMagnitudeSquared' has a wrong offset!");

// ScriptStruct Mariner.MarinerThrowItemPayload
// 0x0010 (0x0010 - 0x0000)
struct FMarinerThrowItemPayload final
{
public:
	EMarinerItemSlot                              SlotToReleaseFrom;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AMarinerItem>            ItemOwner;                                         // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsThrownItemDropped;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnsureReplicationByte;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerThrowItemPayload) == 0x000004, "Wrong alignment on FMarinerThrowItemPayload");
static_assert(sizeof(FMarinerThrowItemPayload) == 0x000010, "Wrong size on FMarinerThrowItemPayload");
static_assert(offsetof(FMarinerThrowItemPayload, SlotToReleaseFrom) == 0x000000, "Member 'FMarinerThrowItemPayload::SlotToReleaseFrom' has a wrong offset!");
static_assert(offsetof(FMarinerThrowItemPayload, ItemOwner) == 0x000004, "Member 'FMarinerThrowItemPayload::ItemOwner' has a wrong offset!");
static_assert(offsetof(FMarinerThrowItemPayload, bIsThrownItemDropped) == 0x00000C, "Member 'FMarinerThrowItemPayload::bIsThrownItemDropped' has a wrong offset!");
static_assert(offsetof(FMarinerThrowItemPayload, EnsureReplicationByte) == 0x00000D, "Member 'FMarinerThrowItemPayload::EnsureReplicationByte' has a wrong offset!");

// ScriptStruct Mariner.MarinerUICharacterAbilityData
// 0x0050 (0x0050 - 0x0000)
struct FMarinerUICharacterAbilityData final
{
public:
	TMap<EMarinerInputActions, TSubclassOf<class UHUDAbilityUIData>> CharacterAbilitiesUIData;                          // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerUICharacterAbilityData) == 0x000008, "Wrong alignment on FMarinerUICharacterAbilityData");
static_assert(sizeof(FMarinerUICharacterAbilityData) == 0x000050, "Wrong size on FMarinerUICharacterAbilityData");
static_assert(offsetof(FMarinerUICharacterAbilityData, CharacterAbilitiesUIData) == 0x000000, "Member 'FMarinerUICharacterAbilityData::CharacterAbilitiesUIData' has a wrong offset!");

// ScriptStruct Mariner.MarinerGameplayEffectPendingRemoval
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMarinerGameplayEffectPendingRemoval final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerGameplayEffectPendingRemoval) == 0x000008, "Wrong alignment on FMarinerGameplayEffectPendingRemoval");
static_assert(sizeof(FMarinerGameplayEffectPendingRemoval) == 0x000018, "Wrong size on FMarinerGameplayEffectPendingRemoval");

// ScriptStruct Mariner.MarinerMoveUpdate_ApplyRecoveryDynamics
// 0x0008 (0x0030 - 0x0028)
struct FMarinerMoveUpdate_ApplyRecoveryDynamics final : public FMarinerMoveUpdateDynamics
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerMoveUpdate_ApplyRecoveryDynamics) == 0x000008, "Wrong alignment on FMarinerMoveUpdate_ApplyRecoveryDynamics");
static_assert(sizeof(FMarinerMoveUpdate_ApplyRecoveryDynamics) == 0x000030, "Wrong size on FMarinerMoveUpdate_ApplyRecoveryDynamics");

// ScriptStruct Mariner.MarinerMoveUpdate_SwapActiveMeshDynamics
// 0x0018 (0x0040 - 0x0028)
struct FMarinerMoveUpdate_SwapActiveMeshDynamics final : public FMarinerMoveUpdateDynamics
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerMoveUpdate_SwapActiveMeshDynamics) == 0x000008, "Wrong alignment on FMarinerMoveUpdate_SwapActiveMeshDynamics");
static_assert(sizeof(FMarinerMoveUpdate_SwapActiveMeshDynamics) == 0x000040, "Wrong size on FMarinerMoveUpdate_SwapActiveMeshDynamics");

// ScriptStruct Mariner.TrackData
// 0x0008 (0x0008 - 0x0000)
struct FTrackData final
{
public:
	class UAkAudioEvent*                          EventToPlay;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackData) == 0x000008, "Wrong alignment on FTrackData");
static_assert(sizeof(FTrackData) == 0x000008, "Wrong size on FTrackData");
static_assert(offsetof(FTrackData, EventToPlay) == 0x000000, "Member 'FTrackData::EventToPlay' has a wrong offset!");

// ScriptStruct Mariner.MarinerMessageBoxNativePurchaseData
// 0x00F0 (0x01A0 - 0x00B0)
struct FMarinerMessageBoxNativePurchaseData final : public FMarinerMessageBoxBaseData
{
public:
	struct FMangoNativeOffer                      Offer;                                             // 0x00B0(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Header;                                            // 0x0170(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0188(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMessageBoxNativePurchaseData) == 0x000008, "Wrong alignment on FMarinerMessageBoxNativePurchaseData");
static_assert(sizeof(FMarinerMessageBoxNativePurchaseData) == 0x0001A0, "Wrong size on FMarinerMessageBoxNativePurchaseData");
static_assert(offsetof(FMarinerMessageBoxNativePurchaseData, Offer) == 0x0000B0, "Member 'FMarinerMessageBoxNativePurchaseData::Offer' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxNativePurchaseData, Header) == 0x000170, "Member 'FMarinerMessageBoxNativePurchaseData::Header' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxNativePurchaseData, Description) == 0x000188, "Member 'FMarinerMessageBoxNativePurchaseData::Description' has a wrong offset!");

// ScriptStruct Mariner.MarinerNewsCallbackData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMarinerNewsCallbackData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerNewsCallbackData) == 0x000008, "Wrong alignment on FMarinerNewsCallbackData");
static_assert(sizeof(FMarinerNewsCallbackData) == 0x000010, "Wrong size on FMarinerNewsCallbackData");

// ScriptStruct Mariner.MarinerMessageBoxOptionListInfo
// 0x0038 (0x0038 - 0x0000)
struct FMarinerMessageBoxOptionListInfo final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerSettingButton>      ButtonTypeOverride;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Callback;                                          // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	class UMarinerSettingButton*                  ButtonInstance;                                    // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMessageBoxOptionListInfo) == 0x000008, "Wrong alignment on FMarinerMessageBoxOptionListInfo");
static_assert(sizeof(FMarinerMessageBoxOptionListInfo) == 0x000038, "Wrong size on FMarinerMessageBoxOptionListInfo");
static_assert(offsetof(FMarinerMessageBoxOptionListInfo, DisplayName) == 0x000000, "Member 'FMarinerMessageBoxOptionListInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxOptionListInfo, ButtonTypeOverride) == 0x000018, "Member 'FMarinerMessageBoxOptionListInfo::ButtonTypeOverride' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxOptionListInfo, Callback) == 0x000020, "Member 'FMarinerMessageBoxOptionListInfo::Callback' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxOptionListInfo, ButtonInstance) == 0x000030, "Member 'FMarinerMessageBoxOptionListInfo::ButtonInstance' has a wrong offset!");

// ScriptStruct Mariner.MarinerMessageBoxOptionListData
// 0x0030 (0x00E0 - 0x00B0)
struct FMarinerMessageBoxOptionListData final : public FMarinerMessageBoxBaseData
{
public:
	class FText                                   Header;                                            // 0x00B0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMarinerMessageBoxOptionListInfo> Options;                                           // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bAlignVertical;                                    // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerMessageBoxOptionListData) == 0x000008, "Wrong alignment on FMarinerMessageBoxOptionListData");
static_assert(sizeof(FMarinerMessageBoxOptionListData) == 0x0000E0, "Wrong size on FMarinerMessageBoxOptionListData");
static_assert(offsetof(FMarinerMessageBoxOptionListData, Header) == 0x0000B0, "Member 'FMarinerMessageBoxOptionListData::Header' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxOptionListData, Options) == 0x0000C8, "Member 'FMarinerMessageBoxOptionListData::Options' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxOptionListData, bAlignVertical) == 0x0000D8, "Member 'FMarinerMessageBoxOptionListData::bAlignVertical' has a wrong offset!");

// ScriptStruct Mariner.RewardCurrencyTier
// 0x0090 (0x0090 - 0x0000)
struct FRewardCurrencyTier final
{
public:
	int32                                         MinAmount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Icon;                                              // 0x0008(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardCurrencyTier) == 0x000008, "Wrong alignment on FRewardCurrencyTier");
static_assert(sizeof(FRewardCurrencyTier) == 0x000090, "Wrong size on FRewardCurrencyTier");
static_assert(offsetof(FRewardCurrencyTier, MinAmount) == 0x000000, "Member 'FRewardCurrencyTier::MinAmount' has a wrong offset!");
static_assert(offsetof(FRewardCurrencyTier, Icon) == 0x000008, "Member 'FRewardCurrencyTier::Icon' has a wrong offset!");

// ScriptStruct Mariner.MarinerMessageBoxOrderDetailsData
// 0x0060 (0x0110 - 0x00B0)
struct FMarinerMessageBoxOrderDetailsData final : public FMarinerMessageBoxBaseData
{
public:
	class FString                                 OfferId;                                           // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoOrderDetails                     OrderDetails;                                      // 0x00C0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMessageBoxOrderDetailsData) == 0x000008, "Wrong alignment on FMarinerMessageBoxOrderDetailsData");
static_assert(sizeof(FMarinerMessageBoxOrderDetailsData) == 0x000110, "Wrong size on FMarinerMessageBoxOrderDetailsData");
static_assert(offsetof(FMarinerMessageBoxOrderDetailsData, OfferId) == 0x0000B0, "Member 'FMarinerMessageBoxOrderDetailsData::OfferId' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxOrderDetailsData, OrderDetails) == 0x0000C0, "Member 'FMarinerMessageBoxOrderDetailsData::OrderDetails' has a wrong offset!");

// ScriptStruct Mariner.MarinerPlatformText
// 0x0078 (0x0078 - 0x0000)
struct FMarinerPlatformText final
{
public:
	class FText                                   TextDefault;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bHasPCOverride;                                    // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextPC;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bHasXB1Override;                                   // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextXB1;                                           // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bHasPS4Override;                                   // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextPS4;                                           // 0x0060(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerPlatformText) == 0x000008, "Wrong alignment on FMarinerPlatformText");
static_assert(sizeof(FMarinerPlatformText) == 0x000078, "Wrong size on FMarinerPlatformText");
static_assert(offsetof(FMarinerPlatformText, TextDefault) == 0x000000, "Member 'FMarinerPlatformText::TextDefault' has a wrong offset!");
static_assert(offsetof(FMarinerPlatformText, bHasPCOverride) == 0x000018, "Member 'FMarinerPlatformText::bHasPCOverride' has a wrong offset!");
static_assert(offsetof(FMarinerPlatformText, TextPC) == 0x000020, "Member 'FMarinerPlatformText::TextPC' has a wrong offset!");
static_assert(offsetof(FMarinerPlatformText, bHasXB1Override) == 0x000038, "Member 'FMarinerPlatformText::bHasXB1Override' has a wrong offset!");
static_assert(offsetof(FMarinerPlatformText, TextXB1) == 0x000040, "Member 'FMarinerPlatformText::TextXB1' has a wrong offset!");
static_assert(offsetof(FMarinerPlatformText, bHasPS4Override) == 0x000058, "Member 'FMarinerPlatformText::bHasPS4Override' has a wrong offset!");
static_assert(offsetof(FMarinerPlatformText, TextPS4) == 0x000060, "Member 'FMarinerPlatformText::TextPS4' has a wrong offset!");

// ScriptStruct Mariner.CommonDamageNotificationData
// 0x0028 (0x0028 - 0x0000)
struct FCommonDamageNotificationData final
{
public:
	uint8                                         SpecialQualifiers;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    DamageImpulse;                                     // 0x0010(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageApplied;                                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageBlocked;                                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommonDamageNotificationData) == 0x000008, "Wrong alignment on FCommonDamageNotificationData");
static_assert(sizeof(FCommonDamageNotificationData) == 0x000028, "Wrong size on FCommonDamageNotificationData");
static_assert(offsetof(FCommonDamageNotificationData, SpecialQualifiers) == 0x000000, "Member 'FCommonDamageNotificationData::SpecialQualifiers' has a wrong offset!");
static_assert(offsetof(FCommonDamageNotificationData, DamageTypeClass) == 0x000008, "Member 'FCommonDamageNotificationData::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FCommonDamageNotificationData, DamageImpulse) == 0x000010, "Member 'FCommonDamageNotificationData::DamageImpulse' has a wrong offset!");
static_assert(offsetof(FCommonDamageNotificationData, DamageApplied) == 0x00001C, "Member 'FCommonDamageNotificationData::DamageApplied' has a wrong offset!");
static_assert(offsetof(FCommonDamageNotificationData, DamageBlocked) == 0x000020, "Member 'FCommonDamageNotificationData::DamageBlocked' has a wrong offset!");

// ScriptStruct Mariner.DamageNotificationPayload
// 0x0030 (0x0030 - 0x0000)
struct FDamageNotificationPayload final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCommonDamageNotificationData          DamageData;                                        // 0x0008(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageNotificationPayload) == 0x000008, "Wrong alignment on FDamageNotificationPayload");
static_assert(sizeof(FDamageNotificationPayload) == 0x000030, "Wrong size on FDamageNotificationPayload");
static_assert(offsetof(FDamageNotificationPayload, DamagedActor) == 0x000000, "Member 'FDamageNotificationPayload::DamagedActor' has a wrong offset!");
static_assert(offsetof(FDamageNotificationPayload, DamageData) == 0x000008, "Member 'FDamageNotificationPayload::DamageData' has a wrong offset!");

// ScriptStruct Mariner.MarinerBotClassSkinPairing
// 0x0010 (0x0010 - 0x0000)
struct FMarinerBotClassSkinPairing final
{
public:
	TSubclassOf<class APawn>                      PawnClass;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedSkinIndex;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerBotClassSkinPairing) == 0x000008, "Wrong alignment on FMarinerBotClassSkinPairing");
static_assert(sizeof(FMarinerBotClassSkinPairing) == 0x000010, "Wrong size on FMarinerBotClassSkinPairing");
static_assert(offsetof(FMarinerBotClassSkinPairing, PawnClass) == 0x000000, "Member 'FMarinerBotClassSkinPairing::PawnClass' has a wrong offset!");
static_assert(offsetof(FMarinerBotClassSkinPairing, SelectedSkinIndex) == 0x000008, "Member 'FMarinerBotClassSkinPairing::SelectedSkinIndex' has a wrong offset!");

// ScriptStruct Mariner.MarinerBotFakeProfileIndices
// 0x0038 (0x0038 - 0x0000)
struct FMarinerBotFakeProfileIndices final
{
public:
	int32                                         SelectedSkinIndex;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedMegablastTrail;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedReturnTrail;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SelectedTotemPartsList;                            // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMarinerBotClassSkinPairing>    AvaliableBotSkinDataList;                          // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         ReplicationByte;                                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerBotFakeProfileIndices) == 0x000008, "Wrong alignment on FMarinerBotFakeProfileIndices");
static_assert(sizeof(FMarinerBotFakeProfileIndices) == 0x000038, "Wrong size on FMarinerBotFakeProfileIndices");
static_assert(offsetof(FMarinerBotFakeProfileIndices, SelectedSkinIndex) == 0x000000, "Member 'FMarinerBotFakeProfileIndices::SelectedSkinIndex' has a wrong offset!");
static_assert(offsetof(FMarinerBotFakeProfileIndices, SelectedMegablastTrail) == 0x000004, "Member 'FMarinerBotFakeProfileIndices::SelectedMegablastTrail' has a wrong offset!");
static_assert(offsetof(FMarinerBotFakeProfileIndices, SelectedReturnTrail) == 0x000008, "Member 'FMarinerBotFakeProfileIndices::SelectedReturnTrail' has a wrong offset!");
static_assert(offsetof(FMarinerBotFakeProfileIndices, SelectedTotemPartsList) == 0x000010, "Member 'FMarinerBotFakeProfileIndices::SelectedTotemPartsList' has a wrong offset!");
static_assert(offsetof(FMarinerBotFakeProfileIndices, AvaliableBotSkinDataList) == 0x000020, "Member 'FMarinerBotFakeProfileIndices::AvaliableBotSkinDataList' has a wrong offset!");
static_assert(offsetof(FMarinerBotFakeProfileIndices, ReplicationByte) == 0x000030, "Member 'FMarinerBotFakeProfileIndices::ReplicationByte' has a wrong offset!");

// ScriptStruct Mariner.ChatEmoteReplicationData
// 0x0002 (0x0002 - 0x0000)
struct FChatEmoteReplicationData final
{
public:
	EMarinerInputActions                          ChatAction;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Counter;                                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChatEmoteReplicationData) == 0x000001, "Wrong alignment on FChatEmoteReplicationData");
static_assert(sizeof(FChatEmoteReplicationData) == 0x000002, "Wrong size on FChatEmoteReplicationData");
static_assert(offsetof(FChatEmoteReplicationData, ChatAction) == 0x000000, "Member 'FChatEmoteReplicationData::ChatAction' has a wrong offset!");
static_assert(offsetof(FChatEmoteReplicationData, Counter) == 0x000001, "Member 'FChatEmoteReplicationData::Counter' has a wrong offset!");

// ScriptStruct Mariner.PreGameReadyReplicationData
// 0x0010 (0x0010 - 0x0000)
struct FPreGameReadyReplicationData final
{
public:
	class UAnimMontage*                           ReadyEmote;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Counter;                                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPreGameReadyReplicationData) == 0x000008, "Wrong alignment on FPreGameReadyReplicationData");
static_assert(sizeof(FPreGameReadyReplicationData) == 0x000010, "Wrong size on FPreGameReadyReplicationData");
static_assert(offsetof(FPreGameReadyReplicationData, ReadyEmote) == 0x000000, "Member 'FPreGameReadyReplicationData::ReadyEmote' has a wrong offset!");
static_assert(offsetof(FPreGameReadyReplicationData, Counter) == 0x000008, "Member 'FPreGameReadyReplicationData::Counter' has a wrong offset!");

// ScriptStruct Mariner.MarinerPostGameData
// 0x0358 (0x0358 - 0x0000)
struct FMarinerPostGameData final
{
public:
	struct FMatchEndPlayer                        MatchEndData;                                      // 0x0000(0x00E8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMangoPlayerReport                     PlayerReport;                                      // 0x00E8(0x0268)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UMarinerPlayableCharacter*              CharacterPlayed;                                   // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerPostGameData) == 0x000008, "Wrong alignment on FMarinerPostGameData");
static_assert(sizeof(FMarinerPostGameData) == 0x000358, "Wrong size on FMarinerPostGameData");
static_assert(offsetof(FMarinerPostGameData, MatchEndData) == 0x000000, "Member 'FMarinerPostGameData::MatchEndData' has a wrong offset!");
static_assert(offsetof(FMarinerPostGameData, PlayerReport) == 0x0000E8, "Member 'FMarinerPostGameData::PlayerReport' has a wrong offset!");
static_assert(offsetof(FMarinerPostGameData, CharacterPlayed) == 0x000350, "Member 'FMarinerPostGameData::CharacterPlayed' has a wrong offset!");

// ScriptStruct Mariner.MarinerQuestProgress
// 0x0230 (0x0230 - 0x0000)
struct FMarinerQuestProgress final
{
public:
	struct FMangoQuestDescription                 Before;                                            // 0x0000(0x0118)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMangoQuestDescription                 After;                                             // 0x0118(0x0118)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerQuestProgress) == 0x000008, "Wrong alignment on FMarinerQuestProgress");
static_assert(sizeof(FMarinerQuestProgress) == 0x000230, "Wrong size on FMarinerQuestProgress");
static_assert(offsetof(FMarinerQuestProgress, Before) == 0x000000, "Member 'FMarinerQuestProgress::Before' has a wrong offset!");
static_assert(offsetof(FMarinerQuestProgress, After) == 0x000118, "Member 'FMarinerQuestProgress::After' has a wrong offset!");

// ScriptStruct Mariner.MatchEndLocalPlayer
// 0x0018 (0x0018 - 0x0000)
struct FMatchEndLocalPlayer final
{
public:
	class FString                                 MangoId;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamIndex;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerGameOutcome                           GameOutcome;                                       // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchEndLocalPlayer) == 0x000008, "Wrong alignment on FMatchEndLocalPlayer");
static_assert(sizeof(FMatchEndLocalPlayer) == 0x000018, "Wrong size on FMatchEndLocalPlayer");
static_assert(offsetof(FMatchEndLocalPlayer, MangoId) == 0x000000, "Member 'FMatchEndLocalPlayer::MangoId' has a wrong offset!");
static_assert(offsetof(FMatchEndLocalPlayer, TeamIndex) == 0x000010, "Member 'FMatchEndLocalPlayer::TeamIndex' has a wrong offset!");
static_assert(offsetof(FMatchEndLocalPlayer, GameOutcome) == 0x000014, "Member 'FMatchEndLocalPlayer::GameOutcome' has a wrong offset!");

// ScriptStruct Mariner.MarinerSettingButtonAssets
// 0x0000 (0x0038 - 0x0038)
struct FMarinerSettingButtonAssets final : public FMarinerSettingBaseAssets
{
};
static_assert(alignof(FMarinerSettingButtonAssets) == 0x000008, "Wrong alignment on FMarinerSettingButtonAssets");
static_assert(sizeof(FMarinerSettingButtonAssets) == 0x000038, "Wrong size on FMarinerSettingButtonAssets");

// ScriptStruct Mariner.PregameState
// 0x000C (0x000C - 0x0000)
struct FPregameState final
{
public:
	class FName                                   StateName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Lifetime;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPregameState) == 0x000004, "Wrong alignment on FPregameState");
static_assert(sizeof(FPregameState) == 0x00000C, "Wrong size on FPregameState");
static_assert(offsetof(FPregameState, StateName) == 0x000000, "Member 'FPregameState::StateName' has a wrong offset!");
static_assert(offsetof(FPregameState, Lifetime) == 0x000008, "Member 'FPregameState::Lifetime' has a wrong offset!");

// ScriptStruct Mariner.MarinerProjectileExplosionReplicationData
// 0x002C (0x002C - 0x0000)
struct FMarinerProjectileExplosionReplicationData final
{
public:
	bool                                          bHasExploded;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirectHit;                                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              SurfaceType;                                       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    ExplosionEffectLocation;                           // 0x0004(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ExplosionEffectOrientation;                        // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPrimitiveComponent>     HitComponent;                                      // 0x001C(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  HitActor;                                          // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerProjectileExplosionReplicationData) == 0x000004, "Wrong alignment on FMarinerProjectileExplosionReplicationData");
static_assert(sizeof(FMarinerProjectileExplosionReplicationData) == 0x00002C, "Wrong size on FMarinerProjectileExplosionReplicationData");
static_assert(offsetof(FMarinerProjectileExplosionReplicationData, bHasExploded) == 0x000000, "Member 'FMarinerProjectileExplosionReplicationData::bHasExploded' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileExplosionReplicationData, bDirectHit) == 0x000001, "Member 'FMarinerProjectileExplosionReplicationData::bDirectHit' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileExplosionReplicationData, SurfaceType) == 0x000002, "Member 'FMarinerProjectileExplosionReplicationData::SurfaceType' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileExplosionReplicationData, ExplosionEffectLocation) == 0x000004, "Member 'FMarinerProjectileExplosionReplicationData::ExplosionEffectLocation' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileExplosionReplicationData, ExplosionEffectOrientation) == 0x000010, "Member 'FMarinerProjectileExplosionReplicationData::ExplosionEffectOrientation' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileExplosionReplicationData, HitComponent) == 0x00001C, "Member 'FMarinerProjectileExplosionReplicationData::HitComponent' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileExplosionReplicationData, HitActor) == 0x000024, "Member 'FMarinerProjectileExplosionReplicationData::HitActor' has a wrong offset!");

// ScriptStruct Mariner.MarinerProjectileData
// 0x0018 (0x0018 - 0x0000)
struct FMarinerProjectileData final
{
public:
	float                                         ProjectileLife;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarinerDamageType>         ImpactDamage;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarinerDamageType>         DetonationDamage;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerProjectileData) == 0x000008, "Wrong alignment on FMarinerProjectileData");
static_assert(sizeof(FMarinerProjectileData) == 0x000018, "Wrong size on FMarinerProjectileData");
static_assert(offsetof(FMarinerProjectileData, ProjectileLife) == 0x000000, "Member 'FMarinerProjectileData::ProjectileLife' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileData, ImpactDamage) == 0x000008, "Member 'FMarinerProjectileData::ImpactDamage' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileData, DetonationDamage) == 0x000010, "Member 'FMarinerProjectileData::DetonationDamage' has a wrong offset!");

// ScriptStruct Mariner.MarinerProjectileTrajectoryData
// 0x0010 (0x0010 - 0x0000)
struct FMarinerProjectileTrajectoryData final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerProjectileTrajectoryData) == 0x000004, "Wrong alignment on FMarinerProjectileTrajectoryData");
static_assert(sizeof(FMarinerProjectileTrajectoryData) == 0x000010, "Wrong size on FMarinerProjectileTrajectoryData");
static_assert(offsetof(FMarinerProjectileTrajectoryData, Location) == 0x000000, "Member 'FMarinerProjectileTrajectoryData::Location' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileTrajectoryData, Time) == 0x00000C, "Member 'FMarinerProjectileTrajectoryData::Time' has a wrong offset!");

// ScriptStruct Mariner.MarinerProjectileFastOverlapListenerHandle
// 0x0004 (0x0004 - 0x0000)
struct FMarinerProjectileFastOverlapListenerHandle final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMarinerProjectileFastOverlapListenerHandle) == 0x000004, "Wrong alignment on FMarinerProjectileFastOverlapListenerHandle");
static_assert(sizeof(FMarinerProjectileFastOverlapListenerHandle) == 0x000004, "Wrong size on FMarinerProjectileFastOverlapListenerHandle");
static_assert(offsetof(FMarinerProjectileFastOverlapListenerHandle, Handle) == 0x000000, "Member 'FMarinerProjectileFastOverlapListenerHandle::Handle' has a wrong offset!");

// ScriptStruct Mariner.MarinerProjectileFastOverlapListenerData
// 0x0040 (0x0040 - 0x0000)
struct FMarinerProjectileFastOverlapListenerData final
{
public:
	struct FMarinerProjectileFastOverlapListenerHandle Handle;                                            // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Listener;                                          // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x10];                                       // 0x000C(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CollectionToCollideAgainst;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerProjectileFastOverlapListenerData) == 0x000004, "Wrong alignment on FMarinerProjectileFastOverlapListenerData");
static_assert(sizeof(FMarinerProjectileFastOverlapListenerData) == 0x000040, "Wrong size on FMarinerProjectileFastOverlapListenerData");
static_assert(offsetof(FMarinerProjectileFastOverlapListenerData, Handle) == 0x000000, "Member 'FMarinerProjectileFastOverlapListenerData::Handle' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileFastOverlapListenerData, Listener) == 0x000004, "Member 'FMarinerProjectileFastOverlapListenerData::Listener' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileFastOverlapListenerData, Location) == 0x00001C, "Member 'FMarinerProjectileFastOverlapListenerData::Location' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileFastOverlapListenerData, Rotation) == 0x000028, "Member 'FMarinerProjectileFastOverlapListenerData::Rotation' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileFastOverlapListenerData, CollectionToCollideAgainst) == 0x000038, "Member 'FMarinerProjectileFastOverlapListenerData::CollectionToCollideAgainst' has a wrong offset!");

// ScriptStruct Mariner.MarinerFluxProjectileStateData
// 0x000C (0x000C - 0x0000)
struct FMarinerFluxProjectileStateData final
{
public:
	EMarinerFluxProjectileState                   StateType;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanFallbackTo;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerFluxProjectileStateData) == 0x000004, "Wrong alignment on FMarinerFluxProjectileStateData");
static_assert(sizeof(FMarinerFluxProjectileStateData) == 0x00000C, "Wrong size on FMarinerFluxProjectileStateData");
static_assert(offsetof(FMarinerFluxProjectileStateData, StateType) == 0x000000, "Member 'FMarinerFluxProjectileStateData::StateType' has a wrong offset!");
static_assert(offsetof(FMarinerFluxProjectileStateData, Priority) == 0x000004, "Member 'FMarinerFluxProjectileStateData::Priority' has a wrong offset!");
static_assert(offsetof(FMarinerFluxProjectileStateData, bCanFallbackTo) == 0x000008, "Member 'FMarinerFluxProjectileStateData::bCanFallbackTo' has a wrong offset!");

// ScriptStruct Mariner.MarinerProjectileImpulseBatch
// 0x0048 (0x0048 - 0x0000)
struct FMarinerProjectileImpulseBatch final
{
public:
	float                                         BatchingTimeWindow;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BatchID;                                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BatchImpulseCurve;                                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarinerProjectileImpulseBatchMember> BatchMembers;                                      // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                CumulativeImpulseVector;                           // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CumulativeImpulseMagnitude;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExpired;                                          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelfInflicted;                                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerProjectileImpulseBatch) == 0x000008, "Wrong alignment on FMarinerProjectileImpulseBatch");
static_assert(sizeof(FMarinerProjectileImpulseBatch) == 0x000048, "Wrong size on FMarinerProjectileImpulseBatch");
static_assert(offsetof(FMarinerProjectileImpulseBatch, BatchingTimeWindow) == 0x000000, "Member 'FMarinerProjectileImpulseBatch::BatchingTimeWindow' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileImpulseBatch, BatchID) == 0x000008, "Member 'FMarinerProjectileImpulseBatch::BatchID' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileImpulseBatch, BatchImpulseCurve) == 0x000018, "Member 'FMarinerProjectileImpulseBatch::BatchImpulseCurve' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileImpulseBatch, BatchMembers) == 0x000020, "Member 'FMarinerProjectileImpulseBatch::BatchMembers' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileImpulseBatch, CumulativeImpulseVector) == 0x000030, "Member 'FMarinerProjectileImpulseBatch::CumulativeImpulseVector' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileImpulseBatch, CumulativeImpulseMagnitude) == 0x00003C, "Member 'FMarinerProjectileImpulseBatch::CumulativeImpulseMagnitude' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileImpulseBatch, bExpired) == 0x000040, "Member 'FMarinerProjectileImpulseBatch::bExpired' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileImpulseBatch, bSelfInflicted) == 0x000041, "Member 'FMarinerProjectileImpulseBatch::bSelfInflicted' has a wrong offset!");

// ScriptStruct Mariner.MarinerProjectileModifier
// 0x0018 (0x0024 - 0x000C)
struct FMarinerProjectileModifier final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x8];                                        // 0x000C(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifetimeMultiplier;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedMultiplier;                                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityMultiplier;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x4];                                       // 0x0020(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerProjectileModifier) == 0x000004, "Wrong alignment on FMarinerProjectileModifier");
static_assert(sizeof(FMarinerProjectileModifier) == 0x000024, "Wrong size on FMarinerProjectileModifier");
static_assert(offsetof(FMarinerProjectileModifier, LifetimeMultiplier) == 0x000014, "Member 'FMarinerProjectileModifier::LifetimeMultiplier' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileModifier, SpeedMultiplier) == 0x000018, "Member 'FMarinerProjectileModifier::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileModifier, GravityMultiplier) == 0x00001C, "Member 'FMarinerProjectileModifier::GravityMultiplier' has a wrong offset!");

// ScriptStruct Mariner.MarinerProjectileModifierArray
// 0x0018 (0x0120 - 0x0108)
struct FMarinerProjectileModifierArray final : public FFastArraySerializer
{
public:
	TArray<struct FMarinerProjectileModifier>     Items;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerProjectileModifierArray) == 0x000008, "Wrong alignment on FMarinerProjectileModifierArray");
static_assert(sizeof(FMarinerProjectileModifierArray) == 0x000120, "Wrong size on FMarinerProjectileModifierArray");
static_assert(offsetof(FMarinerProjectileModifierArray, Items) == 0x000108, "Member 'FMarinerProjectileModifierArray::Items' has a wrong offset!");

// ScriptStruct Mariner.MarinerProjectileTarget
// 0x0010 (0x0010 - 0x0000)
struct FMarinerProjectileTarget final
{
public:
	class AMarinerLevelEventTargetLocation*       TargetLocation;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArcAngle;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerProjectileTarget) == 0x000008, "Wrong alignment on FMarinerProjectileTarget");
static_assert(sizeof(FMarinerProjectileTarget) == 0x000010, "Wrong size on FMarinerProjectileTarget");
static_assert(offsetof(FMarinerProjectileTarget, TargetLocation) == 0x000000, "Member 'FMarinerProjectileTarget::TargetLocation' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileTarget, Distance) == 0x000008, "Member 'FMarinerProjectileTarget::Distance' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileTarget, ArcAngle) == 0x00000C, "Member 'FMarinerProjectileTarget::ArcAngle' has a wrong offset!");

// ScriptStruct Mariner.MarinerStickToObjectReplicationData
// 0x0090 (0x0090 - 0x0000)
struct FMarinerStickToObjectReplicationData final
{
public:
	uint8                                         EnableId;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             ObjectHitData;                                     // 0x0004(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerStickToObjectReplicationData) == 0x000004, "Wrong alignment on FMarinerStickToObjectReplicationData");
static_assert(sizeof(FMarinerStickToObjectReplicationData) == 0x000090, "Wrong size on FMarinerStickToObjectReplicationData");
static_assert(offsetof(FMarinerStickToObjectReplicationData, EnableId) == 0x000000, "Member 'FMarinerStickToObjectReplicationData::EnableId' has a wrong offset!");
static_assert(offsetof(FMarinerStickToObjectReplicationData, ObjectHitData) == 0x000004, "Member 'FMarinerStickToObjectReplicationData::ObjectHitData' has a wrong offset!");

// ScriptStruct Mariner.MarinerProjectileSkinData
// 0x0070 (0x0070 - 0x0000)
struct FMarinerProjectileSkinData final
{
public:
	class UStaticMesh*                            ProjectileMesh;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ProjectileTrailVFX;                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ProjectileExplosionVFX;                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ProjectileExplosionSFX;                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UParticleSystem*>     ProjectileVFXMap;                                  // 0x0020(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerProjectileSkinData) == 0x000008, "Wrong alignment on FMarinerProjectileSkinData");
static_assert(sizeof(FMarinerProjectileSkinData) == 0x000070, "Wrong size on FMarinerProjectileSkinData");
static_assert(offsetof(FMarinerProjectileSkinData, ProjectileMesh) == 0x000000, "Member 'FMarinerProjectileSkinData::ProjectileMesh' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileSkinData, ProjectileTrailVFX) == 0x000008, "Member 'FMarinerProjectileSkinData::ProjectileTrailVFX' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileSkinData, ProjectileExplosionVFX) == 0x000010, "Member 'FMarinerProjectileSkinData::ProjectileExplosionVFX' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileSkinData, ProjectileExplosionSFX) == 0x000018, "Member 'FMarinerProjectileSkinData::ProjectileExplosionSFX' has a wrong offset!");
static_assert(offsetof(FMarinerProjectileSkinData, ProjectileVFXMap) == 0x000020, "Member 'FMarinerProjectileSkinData::ProjectileVFXMap' has a wrong offset!");

// ScriptStruct Mariner.ProjectionParameters
// 0x0018 (0x0018 - 0x0000)
struct FProjectionParameters final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FOV;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ViewOffset;                                        // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewInvariantScale;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProjectionParameters) == 0x000004, "Wrong alignment on FProjectionParameters");
static_assert(sizeof(FProjectionParameters) == 0x000018, "Wrong size on FProjectionParameters");
static_assert(offsetof(FProjectionParameters, bEnabled) == 0x000000, "Member 'FProjectionParameters::bEnabled' has a wrong offset!");
static_assert(offsetof(FProjectionParameters, FOV) == 0x000004, "Member 'FProjectionParameters::FOV' has a wrong offset!");
static_assert(offsetof(FProjectionParameters, ViewOffset) == 0x000008, "Member 'FProjectionParameters::ViewOffset' has a wrong offset!");
static_assert(offsetof(FProjectionParameters, ViewInvariantScale) == 0x000014, "Member 'FProjectionParameters::ViewInvariantScale' has a wrong offset!");

// ScriptStruct Mariner.MarinerKeyboardPromptAssets
// 0x0048 (0x0048 - 0x0000)
struct FMarinerKeyboardPromptAssets final
{
public:
	class UImage*                                 PrimaryIcon;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USizeBox*                               PrimaryKeySizeBox;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             PrimaryKeyText;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             PlusText;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 SecondaryIcon;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USizeBox*                               SecondaryKeySizeBox;                               // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             SecondaryKeyText;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             PromptText;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 PromptImage;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerKeyboardPromptAssets) == 0x000008, "Wrong alignment on FMarinerKeyboardPromptAssets");
static_assert(sizeof(FMarinerKeyboardPromptAssets) == 0x000048, "Wrong size on FMarinerKeyboardPromptAssets");
static_assert(offsetof(FMarinerKeyboardPromptAssets, PrimaryIcon) == 0x000000, "Member 'FMarinerKeyboardPromptAssets::PrimaryIcon' has a wrong offset!");
static_assert(offsetof(FMarinerKeyboardPromptAssets, PrimaryKeySizeBox) == 0x000008, "Member 'FMarinerKeyboardPromptAssets::PrimaryKeySizeBox' has a wrong offset!");
static_assert(offsetof(FMarinerKeyboardPromptAssets, PrimaryKeyText) == 0x000010, "Member 'FMarinerKeyboardPromptAssets::PrimaryKeyText' has a wrong offset!");
static_assert(offsetof(FMarinerKeyboardPromptAssets, PlusText) == 0x000018, "Member 'FMarinerKeyboardPromptAssets::PlusText' has a wrong offset!");
static_assert(offsetof(FMarinerKeyboardPromptAssets, SecondaryIcon) == 0x000020, "Member 'FMarinerKeyboardPromptAssets::SecondaryIcon' has a wrong offset!");
static_assert(offsetof(FMarinerKeyboardPromptAssets, SecondaryKeySizeBox) == 0x000028, "Member 'FMarinerKeyboardPromptAssets::SecondaryKeySizeBox' has a wrong offset!");
static_assert(offsetof(FMarinerKeyboardPromptAssets, SecondaryKeyText) == 0x000030, "Member 'FMarinerKeyboardPromptAssets::SecondaryKeyText' has a wrong offset!");
static_assert(offsetof(FMarinerKeyboardPromptAssets, PromptText) == 0x000038, "Member 'FMarinerKeyboardPromptAssets::PromptText' has a wrong offset!");
static_assert(offsetof(FMarinerKeyboardPromptAssets, PromptImage) == 0x000040, "Member 'FMarinerKeyboardPromptAssets::PromptImage' has a wrong offset!");

// ScriptStruct Mariner.MarinerMousePromptAssets
// 0x0030 (0x0030 - 0x0000)
struct FMarinerMousePromptAssets final
{
public:
	class UButton*                                ButtonOverlay;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerButton*                         ButtonText;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Background;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Image;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       HoveredAnimation;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       UnhoveredAnimation;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerMousePromptAssets) == 0x000008, "Wrong alignment on FMarinerMousePromptAssets");
static_assert(sizeof(FMarinerMousePromptAssets) == 0x000030, "Wrong size on FMarinerMousePromptAssets");
static_assert(offsetof(FMarinerMousePromptAssets, ButtonOverlay) == 0x000000, "Member 'FMarinerMousePromptAssets::ButtonOverlay' has a wrong offset!");
static_assert(offsetof(FMarinerMousePromptAssets, ButtonText) == 0x000008, "Member 'FMarinerMousePromptAssets::ButtonText' has a wrong offset!");
static_assert(offsetof(FMarinerMousePromptAssets, Background) == 0x000010, "Member 'FMarinerMousePromptAssets::Background' has a wrong offset!");
static_assert(offsetof(FMarinerMousePromptAssets, Image) == 0x000018, "Member 'FMarinerMousePromptAssets::Image' has a wrong offset!");
static_assert(offsetof(FMarinerMousePromptAssets, HoveredAnimation) == 0x000020, "Member 'FMarinerMousePromptAssets::HoveredAnimation' has a wrong offset!");
static_assert(offsetof(FMarinerMousePromptAssets, UnhoveredAnimation) == 0x000028, "Member 'FMarinerMousePromptAssets::UnhoveredAnimation' has a wrong offset!");

// ScriptStruct Mariner.MarinerMessageBoxQuestRewardData
// 0x00D0 (0x0180 - 0x00B0)
struct FMarinerMessageBoxQuestRewardData final : public FMarinerMessageBoxBaseData
{
public:
	struct FMangoQuestReward                      QuestReward;                                       // 0x00B0(0x00C8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bPreviouslyOwned;                                  // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerMessageBoxQuestRewardData) == 0x000008, "Wrong alignment on FMarinerMessageBoxQuestRewardData");
static_assert(sizeof(FMarinerMessageBoxQuestRewardData) == 0x000180, "Wrong size on FMarinerMessageBoxQuestRewardData");
static_assert(offsetof(FMarinerMessageBoxQuestRewardData, QuestReward) == 0x0000B0, "Member 'FMarinerMessageBoxQuestRewardData::QuestReward' has a wrong offset!");
static_assert(offsetof(FMarinerMessageBoxQuestRewardData, bPreviouslyOwned) == 0x000178, "Member 'FMarinerMessageBoxQuestRewardData::bPreviouslyOwned' has a wrong offset!");

// ScriptStruct Mariner.MarinerRocketTotemCollection
// 0x0038 (0x0038 - 0x0000)
struct FMarinerRocketTotemCollection final
{
public:
	class UMarinerRocketTotemBorderDataAsset*     Border;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerRocketTotemPatternDataAsset*    Pattern;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerRocketTotemShapeDataAsset*      Shape;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerRocketTotemStandDataAsset*      Stand;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerRocketTotemSymbolsDataAsset*    Symbol;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerRocketTotemVFXDataAsset*        VFX;                                               // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarinerRocketTotemCompanionDataAsset*  Companion;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerRocketTotemCollection) == 0x000008, "Wrong alignment on FMarinerRocketTotemCollection");
static_assert(sizeof(FMarinerRocketTotemCollection) == 0x000038, "Wrong size on FMarinerRocketTotemCollection");
static_assert(offsetof(FMarinerRocketTotemCollection, Border) == 0x000000, "Member 'FMarinerRocketTotemCollection::Border' has a wrong offset!");
static_assert(offsetof(FMarinerRocketTotemCollection, Pattern) == 0x000008, "Member 'FMarinerRocketTotemCollection::Pattern' has a wrong offset!");
static_assert(offsetof(FMarinerRocketTotemCollection, Shape) == 0x000010, "Member 'FMarinerRocketTotemCollection::Shape' has a wrong offset!");
static_assert(offsetof(FMarinerRocketTotemCollection, Stand) == 0x000018, "Member 'FMarinerRocketTotemCollection::Stand' has a wrong offset!");
static_assert(offsetof(FMarinerRocketTotemCollection, Symbol) == 0x000020, "Member 'FMarinerRocketTotemCollection::Symbol' has a wrong offset!");
static_assert(offsetof(FMarinerRocketTotemCollection, VFX) == 0x000028, "Member 'FMarinerRocketTotemCollection::VFX' has a wrong offset!");
static_assert(offsetof(FMarinerRocketTotemCollection, Companion) == 0x000030, "Member 'FMarinerRocketTotemCollection::Companion' has a wrong offset!");

// ScriptStruct Mariner.MarinerRootMotionMoveUpdateDynamics_ConstantForce
// 0x0038 (0x0060 - 0x0028)
struct FMarinerRootMotionMoveUpdateDynamics_ConstantForce final : public FMarinerRootMotionMoveUpdateDynamics
{
public:
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerRootMotionMoveUpdateDynamics_ConstantForce) == 0x000008, "Wrong alignment on FMarinerRootMotionMoveUpdateDynamics_ConstantForce");
static_assert(sizeof(FMarinerRootMotionMoveUpdateDynamics_ConstantForce) == 0x000060, "Wrong size on FMarinerRootMotionMoveUpdateDynamics_ConstantForce");

// ScriptStruct Mariner.MarinerRootMotionMoveUpdateDynamics_MoveToDynamicForce
// 0x0050 (0x0078 - 0x0028)
struct FMarinerRootMotionMoveUpdateDynamics_MoveToDynamicForce final : public FMarinerRootMotionMoveUpdateDynamics
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerRootMotionMoveUpdateDynamics_MoveToDynamicForce) == 0x000008, "Wrong alignment on FMarinerRootMotionMoveUpdateDynamics_MoveToDynamicForce");
static_assert(sizeof(FMarinerRootMotionMoveUpdateDynamics_MoveToDynamicForce) == 0x000078, "Wrong size on FMarinerRootMotionMoveUpdateDynamics_MoveToDynamicForce");

// ScriptStruct Mariner.MarinerRootMotionMoveUpdateDynamics_SlowToStop
// 0x0018 (0x0040 - 0x0028)
struct FMarinerRootMotionMoveUpdateDynamics_SlowToStop final : public FMarinerRootMotionMoveUpdateDynamics
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerRootMotionMoveUpdateDynamics_SlowToStop) == 0x000008, "Wrong alignment on FMarinerRootMotionMoveUpdateDynamics_SlowToStop");
static_assert(sizeof(FMarinerRootMotionMoveUpdateDynamics_SlowToStop) == 0x000040, "Wrong size on FMarinerRootMotionMoveUpdateDynamics_SlowToStop");

// ScriptStruct Mariner.NonQuantizedRotator
// 0x0000 (0x000C - 0x000C)
struct FNonQuantizedRotator final : public FRotator
{
};
static_assert(alignof(FNonQuantizedRotator) == 0x000004, "Wrong alignment on FNonQuantizedRotator");
static_assert(sizeof(FNonQuantizedRotator) == 0x00000C, "Wrong size on FNonQuantizedRotator");

// ScriptStruct Mariner.MarinerRootMotionSource_LerpBetweenPoints
// 0x0040 (0x00E0 - 0x00A0)
struct FMarinerRootMotionSource_LerpBetweenPoints final : public FMarinerRootMotionSource
{
public:
	struct FVector                                PositionAtZero;                                    // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNonQuantizedRotator                   RotationAtZero;                                    // 0x00AC(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PositionAtOne;                                     // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNonQuantizedRotator                   RotationAtOne;                                     // 0x00C4(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LerpCurve;                                         // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerRootMotionSource_LerpBetweenPoints) == 0x000010, "Wrong alignment on FMarinerRootMotionSource_LerpBetweenPoints");
static_assert(sizeof(FMarinerRootMotionSource_LerpBetweenPoints) == 0x0000E0, "Wrong size on FMarinerRootMotionSource_LerpBetweenPoints");
static_assert(offsetof(FMarinerRootMotionSource_LerpBetweenPoints, PositionAtZero) == 0x0000A0, "Member 'FMarinerRootMotionSource_LerpBetweenPoints::PositionAtZero' has a wrong offset!");
static_assert(offsetof(FMarinerRootMotionSource_LerpBetweenPoints, RotationAtZero) == 0x0000AC, "Member 'FMarinerRootMotionSource_LerpBetweenPoints::RotationAtZero' has a wrong offset!");
static_assert(offsetof(FMarinerRootMotionSource_LerpBetweenPoints, PositionAtOne) == 0x0000B8, "Member 'FMarinerRootMotionSource_LerpBetweenPoints::PositionAtOne' has a wrong offset!");
static_assert(offsetof(FMarinerRootMotionSource_LerpBetweenPoints, RotationAtOne) == 0x0000C4, "Member 'FMarinerRootMotionSource_LerpBetweenPoints::RotationAtOne' has a wrong offset!");
static_assert(offsetof(FMarinerRootMotionSource_LerpBetweenPoints, LerpCurve) == 0x0000D0, "Member 'FMarinerRootMotionSource_LerpBetweenPoints::LerpCurve' has a wrong offset!");

// ScriptStruct Mariner.MarinerRootMotionSource_LerpToSpeed
// 0x0030 (0x00D0 - 0x00A0)
struct FMarinerRootMotionSource_LerpToSpeed final : public FMarinerRootMotionSource
{
public:
	class UCurveFloat*                            VelocityChangeOverTimeCurve;                       // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingVelocityMagnitude;                         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetVelocityMagnitude;                           // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtendedDurationOnStop;                            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerLerpToSpeedRootMotionPolicy           LerpTowardsTargetPolicy;                           // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0xB];                                       // 0x00B5(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviousWeightedRatioRootMotionCompleted;          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C4[0xC];                                       // 0x00C4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerRootMotionSource_LerpToSpeed) == 0x000010, "Wrong alignment on FMarinerRootMotionSource_LerpToSpeed");
static_assert(sizeof(FMarinerRootMotionSource_LerpToSpeed) == 0x0000D0, "Wrong size on FMarinerRootMotionSource_LerpToSpeed");
static_assert(offsetof(FMarinerRootMotionSource_LerpToSpeed, VelocityChangeOverTimeCurve) == 0x0000A0, "Member 'FMarinerRootMotionSource_LerpToSpeed::VelocityChangeOverTimeCurve' has a wrong offset!");
static_assert(offsetof(FMarinerRootMotionSource_LerpToSpeed, StartingVelocityMagnitude) == 0x0000A8, "Member 'FMarinerRootMotionSource_LerpToSpeed::StartingVelocityMagnitude' has a wrong offset!");
static_assert(offsetof(FMarinerRootMotionSource_LerpToSpeed, TargetVelocityMagnitude) == 0x0000AC, "Member 'FMarinerRootMotionSource_LerpToSpeed::TargetVelocityMagnitude' has a wrong offset!");
static_assert(offsetof(FMarinerRootMotionSource_LerpToSpeed, ExtendedDurationOnStop) == 0x0000B0, "Member 'FMarinerRootMotionSource_LerpToSpeed::ExtendedDurationOnStop' has a wrong offset!");
static_assert(offsetof(FMarinerRootMotionSource_LerpToSpeed, LerpTowardsTargetPolicy) == 0x0000B4, "Member 'FMarinerRootMotionSource_LerpToSpeed::LerpTowardsTargetPolicy' has a wrong offset!");
static_assert(offsetof(FMarinerRootMotionSource_LerpToSpeed, PreviousWeightedRatioRootMotionCompleted) == 0x0000C0, "Member 'FMarinerRootMotionSource_LerpToSpeed::PreviousWeightedRatioRootMotionCompleted' has a wrong offset!");

// ScriptStruct Mariner.MarinerRootMotionSource_MoveAlongSpline_ProgressCurve
// 0x0000 (0x00B0 - 0x00B0)
struct FMarinerRootMotionSource_MoveAlongSpline_ProgressCurve : public FMarinerRootMotionSource_MoveAlongSpline
{
public:
	class UCurveFloat*                            SplineProgressCurve;                               // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerRootMotionSource_MoveAlongSpline_ProgressCurve) == 0x000010, "Wrong alignment on FMarinerRootMotionSource_MoveAlongSpline_ProgressCurve");
static_assert(sizeof(FMarinerRootMotionSource_MoveAlongSpline_ProgressCurve) == 0x0000B0, "Wrong size on FMarinerRootMotionSource_MoveAlongSpline_ProgressCurve");
static_assert(offsetof(FMarinerRootMotionSource_MoveAlongSpline_ProgressCurve, SplineProgressCurve) == 0x0000A8, "Member 'FMarinerRootMotionSource_MoveAlongSpline_ProgressCurve::SplineProgressCurve' has a wrong offset!");

// ScriptStruct Mariner.MarinerRootMotionSource_MoveAlongSplineWithRotation
// 0x0020 (0x00D0 - 0x00B0)
struct FMarinerRootMotionSource_MoveAlongSplineWithRotation final : public FMarinerRootMotionSource_MoveAlongSpline_ProgressCurve
{
public:
	class UCurveFloat*                            RotationProgressCurve;                             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x18];                                      // 0x00B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerRootMotionSource_MoveAlongSplineWithRotation) == 0x000010, "Wrong alignment on FMarinerRootMotionSource_MoveAlongSplineWithRotation");
static_assert(sizeof(FMarinerRootMotionSource_MoveAlongSplineWithRotation) == 0x0000D0, "Wrong size on FMarinerRootMotionSource_MoveAlongSplineWithRotation");
static_assert(offsetof(FMarinerRootMotionSource_MoveAlongSplineWithRotation, RotationProgressCurve) == 0x0000B0, "Member 'FMarinerRootMotionSource_MoveAlongSplineWithRotation::RotationProgressCurve' has a wrong offset!");

// ScriptStruct Mariner.MarinerRootMotionSource_StopAllMomentum
// 0x0010 (0x00B0 - 0x00A0)
struct FMarinerRootMotionSource_StopAllMomentum final : public FMarinerRootMotionSource
{
public:
	EStopAllMomentumDeactivationMode              DeactivationMode;                                  // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0xF];                                       // 0x00A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerRootMotionSource_StopAllMomentum) == 0x000010, "Wrong alignment on FMarinerRootMotionSource_StopAllMomentum");
static_assert(sizeof(FMarinerRootMotionSource_StopAllMomentum) == 0x0000B0, "Wrong size on FMarinerRootMotionSource_StopAllMomentum");
static_assert(offsetof(FMarinerRootMotionSource_StopAllMomentum, DeactivationMode) == 0x0000A0, "Member 'FMarinerRootMotionSource_StopAllMomentum::DeactivationMode' has a wrong offset!");

// ScriptStruct Mariner.MarinerSettingCheckBoxAssets
// 0x0010 (0x0048 - 0x0038)
struct FMarinerSettingCheckBoxAssets final : public FMarinerSettingBaseAssets
{
public:
	class UMarinerCheckBox*                       CheckBox;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             CheckStateText;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerSettingCheckBoxAssets) == 0x000008, "Wrong alignment on FMarinerSettingCheckBoxAssets");
static_assert(sizeof(FMarinerSettingCheckBoxAssets) == 0x000048, "Wrong size on FMarinerSettingCheckBoxAssets");
static_assert(offsetof(FMarinerSettingCheckBoxAssets, CheckBox) == 0x000038, "Member 'FMarinerSettingCheckBoxAssets::CheckBox' has a wrong offset!");
static_assert(offsetof(FMarinerSettingCheckBoxAssets, CheckStateText) == 0x000040, "Member 'FMarinerSettingCheckBoxAssets::CheckStateText' has a wrong offset!");

// ScriptStruct Mariner.MarinerSettingComboBoxAssets
// 0x0008 (0x0040 - 0x0038)
struct FMarinerSettingComboBoxAssets final : public FMarinerSettingBaseAssets
{
public:
	class UMarinerCustomComboBox*                 ComboBox;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerSettingComboBoxAssets) == 0x000008, "Wrong alignment on FMarinerSettingComboBoxAssets");
static_assert(sizeof(FMarinerSettingComboBoxAssets) == 0x000040, "Wrong size on FMarinerSettingComboBoxAssets");
static_assert(offsetof(FMarinerSettingComboBoxAssets, ComboBox) == 0x000038, "Member 'FMarinerSettingComboBoxAssets::ComboBox' has a wrong offset!");

// ScriptStruct Mariner.MarinerSettingKeyBindingAssets
// 0x0008 (0x0040 - 0x0038)
struct FMarinerSettingKeyBindingAssets final : public FMarinerSettingBaseAssets
{
public:
	class UMarinerPrompt*                         BindingPrompt;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerSettingKeyBindingAssets) == 0x000008, "Wrong alignment on FMarinerSettingKeyBindingAssets");
static_assert(sizeof(FMarinerSettingKeyBindingAssets) == 0x000040, "Wrong size on FMarinerSettingKeyBindingAssets");
static_assert(offsetof(FMarinerSettingKeyBindingAssets, BindingPrompt) == 0x000038, "Member 'FMarinerSettingKeyBindingAssets::BindingPrompt' has a wrong offset!");

// ScriptStruct Mariner.MarinerReplicatedSplinePoint
// 0x001C (0x001C - 0x0000)
struct FMarinerReplicatedSplinePoint final
{
public:
	struct FVector_NetQuantize                    LocalPosition;                                     // 0x0000(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    LocalCustomTangent;                                // 0x000C(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplinePointType                              Type;                                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerReplicatedSplinePoint) == 0x000004, "Wrong alignment on FMarinerReplicatedSplinePoint");
static_assert(sizeof(FMarinerReplicatedSplinePoint) == 0x00001C, "Wrong size on FMarinerReplicatedSplinePoint");
static_assert(offsetof(FMarinerReplicatedSplinePoint, LocalPosition) == 0x000000, "Member 'FMarinerReplicatedSplinePoint::LocalPosition' has a wrong offset!");
static_assert(offsetof(FMarinerReplicatedSplinePoint, LocalCustomTangent) == 0x00000C, "Member 'FMarinerReplicatedSplinePoint::LocalCustomTangent' has a wrong offset!");
static_assert(offsetof(FMarinerReplicatedSplinePoint, Type) == 0x000018, "Member 'FMarinerReplicatedSplinePoint::Type' has a wrong offset!");

// ScriptStruct Mariner.MarinerSplineReplicationData
// 0x0070 (0x0070 - 0x0000)
struct FMarinerSplineReplicationData final
{
public:
	int32                                         SplineID;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SplineLocalToWorld;                                // 0x0010(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SplineDuration;                                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSplineClosedLoop;                               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoesSplineHaveStationaryEndpoints;                // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantizeNormal              SplineDefaultUpVector;                             // 0x0048(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarinerReplicatedSplinePoint>  SplinePoints;                                      // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerSplineReplicationData) == 0x000010, "Wrong alignment on FMarinerSplineReplicationData");
static_assert(sizeof(FMarinerSplineReplicationData) == 0x000070, "Wrong size on FMarinerSplineReplicationData");
static_assert(offsetof(FMarinerSplineReplicationData, SplineID) == 0x000000, "Member 'FMarinerSplineReplicationData::SplineID' has a wrong offset!");
static_assert(offsetof(FMarinerSplineReplicationData, SplineLocalToWorld) == 0x000010, "Member 'FMarinerSplineReplicationData::SplineLocalToWorld' has a wrong offset!");
static_assert(offsetof(FMarinerSplineReplicationData, SplineDuration) == 0x000040, "Member 'FMarinerSplineReplicationData::SplineDuration' has a wrong offset!");
static_assert(offsetof(FMarinerSplineReplicationData, bIsSplineClosedLoop) == 0x000044, "Member 'FMarinerSplineReplicationData::bIsSplineClosedLoop' has a wrong offset!");
static_assert(offsetof(FMarinerSplineReplicationData, bDoesSplineHaveStationaryEndpoints) == 0x000045, "Member 'FMarinerSplineReplicationData::bDoesSplineHaveStationaryEndpoints' has a wrong offset!");
static_assert(offsetof(FMarinerSplineReplicationData, SplineDefaultUpVector) == 0x000048, "Member 'FMarinerSplineReplicationData::SplineDefaultUpVector' has a wrong offset!");
static_assert(offsetof(FMarinerSplineReplicationData, SplinePoints) == 0x000058, "Member 'FMarinerSplineReplicationData::SplinePoints' has a wrong offset!");

// ScriptStruct Mariner.MarinerSpringArmFreeCameraProperties
// 0x0008 (0x0008 - 0x0000)
struct FMarinerSpringArmFreeCameraProperties final
{
public:
	float                                         MinimumArmPitch;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumArmPitch;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerSpringArmFreeCameraProperties) == 0x000004, "Wrong alignment on FMarinerSpringArmFreeCameraProperties");
static_assert(sizeof(FMarinerSpringArmFreeCameraProperties) == 0x000008, "Wrong size on FMarinerSpringArmFreeCameraProperties");
static_assert(offsetof(FMarinerSpringArmFreeCameraProperties, MinimumArmPitch) == 0x000000, "Member 'FMarinerSpringArmFreeCameraProperties::MinimumArmPitch' has a wrong offset!");
static_assert(offsetof(FMarinerSpringArmFreeCameraProperties, MaximumArmPitch) == 0x000004, "Member 'FMarinerSpringArmFreeCameraProperties::MaximumArmPitch' has a wrong offset!");

// ScriptStruct Mariner.MarinerStoreIconData
// 0x0110 (0x0110 - 0x0000)
struct FMarinerStoreIconData final
{
public:
	struct FSlateBrush                            DefaultBrush;                                      // 0x0000(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CompactBrush;                                      // 0x0088(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerStoreIconData) == 0x000008, "Wrong alignment on FMarinerStoreIconData");
static_assert(sizeof(FMarinerStoreIconData) == 0x000110, "Wrong size on FMarinerStoreIconData");
static_assert(offsetof(FMarinerStoreIconData, DefaultBrush) == 0x000000, "Member 'FMarinerStoreIconData::DefaultBrush' has a wrong offset!");
static_assert(offsetof(FMarinerStoreIconData, CompactBrush) == 0x000088, "Member 'FMarinerStoreIconData::CompactBrush' has a wrong offset!");

// ScriptStruct Mariner.MarinerPickupData
// 0x0010 (0x0010 - 0x0000)
struct FMarinerPickupData final
{
public:
	class AMarinerSynchronousPickup*              PickupCollected;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerPlayerState*                    CharacterWhoCollected;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerPickupData) == 0x000008, "Wrong alignment on FMarinerPickupData");
static_assert(sizeof(FMarinerPickupData) == 0x000010, "Wrong size on FMarinerPickupData");
static_assert(offsetof(FMarinerPickupData, PickupCollected) == 0x000000, "Member 'FMarinerPickupData::PickupCollected' has a wrong offset!");
static_assert(offsetof(FMarinerPickupData, CharacterWhoCollected) == 0x000008, "Member 'FMarinerPickupData::CharacterWhoCollected' has a wrong offset!");

// ScriptStruct Mariner.MarinerSynchronousPickupsPayload
// 0x0028 (0x0028 - 0x0000)
struct FMarinerSynchronousPickupsPayload final
{
public:
	TArray<struct FMarinerPickupData>             CollectedPickups;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 NonDormantPickupSets;                              // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	EMarinerPickupState                           CurrentState;                                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasSpawnedAllPickups;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         EnsureReplicationByte;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerSynchronousPickupsPayload) == 0x000008, "Wrong alignment on FMarinerSynchronousPickupsPayload");
static_assert(sizeof(FMarinerSynchronousPickupsPayload) == 0x000028, "Wrong size on FMarinerSynchronousPickupsPayload");
static_assert(offsetof(FMarinerSynchronousPickupsPayload, CollectedPickups) == 0x000000, "Member 'FMarinerSynchronousPickupsPayload::CollectedPickups' has a wrong offset!");
static_assert(offsetof(FMarinerSynchronousPickupsPayload, NonDormantPickupSets) == 0x000010, "Member 'FMarinerSynchronousPickupsPayload::NonDormantPickupSets' has a wrong offset!");
static_assert(offsetof(FMarinerSynchronousPickupsPayload, CurrentState) == 0x000020, "Member 'FMarinerSynchronousPickupsPayload::CurrentState' has a wrong offset!");
static_assert(offsetof(FMarinerSynchronousPickupsPayload, bHasSpawnedAllPickups) == 0x000021, "Member 'FMarinerSynchronousPickupsPayload::bHasSpawnedAllPickups' has a wrong offset!");
static_assert(offsetof(FMarinerSynchronousPickupsPayload, EnsureReplicationByte) == 0x000022, "Member 'FMarinerSynchronousPickupsPayload::EnsureReplicationByte' has a wrong offset!");

// ScriptStruct Mariner.MarinerTakeHitInfo
// 0x0128 (0x0128 - 0x0000)
struct FMarinerTakeHitInfo final
{
public:
	float                                         ActualDamage;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 DamageTypeClass;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AMarinerCharacter>       PawnInstigator;                                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  DamageCauser;                                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageEventClassID;                                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bKilled : 1;                                       // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         EnsureReplicationByte;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           GeneralDamageEvent;                                // 0x0030(0x0010)(NativeAccessSpecifierPrivate)
	struct FPointDamageEvent                      PointDamageEvent;                                  // 0x0040(0x00A8)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FRadialDamageEvent                     RadialDamageEvent;                                 // 0x00E8(0x0040)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMarinerTakeHitInfo) == 0x000008, "Wrong alignment on FMarinerTakeHitInfo");
static_assert(sizeof(FMarinerTakeHitInfo) == 0x000128, "Wrong size on FMarinerTakeHitInfo");
static_assert(offsetof(FMarinerTakeHitInfo, ActualDamage) == 0x000000, "Member 'FMarinerTakeHitInfo::ActualDamage' has a wrong offset!");
static_assert(offsetof(FMarinerTakeHitInfo, DamageTypeClass) == 0x000008, "Member 'FMarinerTakeHitInfo::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FMarinerTakeHitInfo, PawnInstigator) == 0x000010, "Member 'FMarinerTakeHitInfo::PawnInstigator' has a wrong offset!");
static_assert(offsetof(FMarinerTakeHitInfo, DamageCauser) == 0x000018, "Member 'FMarinerTakeHitInfo::DamageCauser' has a wrong offset!");
static_assert(offsetof(FMarinerTakeHitInfo, DamageEventClassID) == 0x000020, "Member 'FMarinerTakeHitInfo::DamageEventClassID' has a wrong offset!");
static_assert(offsetof(FMarinerTakeHitInfo, EnsureReplicationByte) == 0x000028, "Member 'FMarinerTakeHitInfo::EnsureReplicationByte' has a wrong offset!");
static_assert(offsetof(FMarinerTakeHitInfo, GeneralDamageEvent) == 0x000030, "Member 'FMarinerTakeHitInfo::GeneralDamageEvent' has a wrong offset!");
static_assert(offsetof(FMarinerTakeHitInfo, PointDamageEvent) == 0x000040, "Member 'FMarinerTakeHitInfo::PointDamageEvent' has a wrong offset!");
static_assert(offsetof(FMarinerTakeHitInfo, RadialDamageEvent) == 0x0000E8, "Member 'FMarinerTakeHitInfo::RadialDamageEvent' has a wrong offset!");

// ScriptStruct Mariner.MarinerTeleportReturnData
// 0x0010 (0x0018 - 0x0008)
struct FMarinerTeleportReturnData final : public FTableRowBase
{
public:
	TArray<struct FVector>                        OriginLocations;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerTeleportReturnData) == 0x000008, "Wrong alignment on FMarinerTeleportReturnData");
static_assert(sizeof(FMarinerTeleportReturnData) == 0x000018, "Wrong size on FMarinerTeleportReturnData");
static_assert(offsetof(FMarinerTeleportReturnData, OriginLocations) == 0x000008, "Member 'FMarinerTeleportReturnData::OriginLocations' has a wrong offset!");

// ScriptStruct Mariner.MarinerThrowItemReleasePayload
// 0x0020 (0x0020 - 0x0000)
struct FMarinerThrowItemReleasePayload final
{
public:
	EMarinerItemSlot                              SlotToReleaseFrom;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    ThrowReleaseRelativeLocation;                      // 0x0004(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    ThrowVelocity;                                     // 0x0010(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnsureReplicationByte;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerThrowItemReleasePayload) == 0x000004, "Wrong alignment on FMarinerThrowItemReleasePayload");
static_assert(sizeof(FMarinerThrowItemReleasePayload) == 0x000020, "Wrong size on FMarinerThrowItemReleasePayload");
static_assert(offsetof(FMarinerThrowItemReleasePayload, SlotToReleaseFrom) == 0x000000, "Member 'FMarinerThrowItemReleasePayload::SlotToReleaseFrom' has a wrong offset!");
static_assert(offsetof(FMarinerThrowItemReleasePayload, ThrowReleaseRelativeLocation) == 0x000004, "Member 'FMarinerThrowItemReleasePayload::ThrowReleaseRelativeLocation' has a wrong offset!");
static_assert(offsetof(FMarinerThrowItemReleasePayload, ThrowVelocity) == 0x000010, "Member 'FMarinerThrowItemReleasePayload::ThrowVelocity' has a wrong offset!");
static_assert(offsetof(FMarinerThrowItemReleasePayload, EnsureReplicationByte) == 0x00001C, "Member 'FMarinerThrowItemReleasePayload::EnsureReplicationByte' has a wrong offset!");

// ScriptStruct Mariner.MarinerBindingTypeData
// 0x0010 (0x0010 - 0x0000)
struct FMarinerBindingTypeData final
{
public:
	class FName                                   BindingName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActionBinding;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AxisScalar;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerBindingTypeData) == 0x000004, "Wrong alignment on FMarinerBindingTypeData");
static_assert(sizeof(FMarinerBindingTypeData) == 0x000010, "Wrong size on FMarinerBindingTypeData");
static_assert(offsetof(FMarinerBindingTypeData, BindingName) == 0x000000, "Member 'FMarinerBindingTypeData::BindingName' has a wrong offset!");
static_assert(offsetof(FMarinerBindingTypeData, bIsActionBinding) == 0x000008, "Member 'FMarinerBindingTypeData::bIsActionBinding' has a wrong offset!");
static_assert(offsetof(FMarinerBindingTypeData, AxisScalar) == 0x00000C, "Member 'FMarinerBindingTypeData::AxisScalar' has a wrong offset!");

// ScriptStruct Mariner.MarinerLoadingScreenData
// 0x0040 (0x0040 - 0x0000)
struct FMarinerLoadingScreenData final
{
public:
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Tip;                                               // 0x0028(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerLoadingScreenData) == 0x000008, "Wrong alignment on FMarinerLoadingScreenData");
static_assert(sizeof(FMarinerLoadingScreenData) == 0x000040, "Wrong size on FMarinerLoadingScreenData");
static_assert(offsetof(FMarinerLoadingScreenData, Image) == 0x000000, "Member 'FMarinerLoadingScreenData::Image' has a wrong offset!");
static_assert(offsetof(FMarinerLoadingScreenData, Tip) == 0x000028, "Member 'FMarinerLoadingScreenData::Tip' has a wrong offset!");

// ScriptStruct Mariner.MarinerPlatformIconData
// 0x0090 (0x0090 - 0x0000)
struct FMarinerPlatformIconData final
{
public:
	struct FSlateBrush                            Icon;                                              // 0x0000(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          IsConsole;                                         // 0x0088(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerPlatformIconData) == 0x000008, "Wrong alignment on FMarinerPlatformIconData");
static_assert(sizeof(FMarinerPlatformIconData) == 0x000090, "Wrong size on FMarinerPlatformIconData");
static_assert(offsetof(FMarinerPlatformIconData, Icon) == 0x000000, "Member 'FMarinerPlatformIconData::Icon' has a wrong offset!");
static_assert(offsetof(FMarinerPlatformIconData, IsConsole) == 0x000088, "Member 'FMarinerPlatformIconData::IsConsole' has a wrong offset!");

// ScriptStruct Mariner.MarinerUITeamData
// 0x0020 (0x0020 - 0x0000)
struct FMarinerUITeamData final
{
public:
	class FText                                   TeamName;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FColor                                 TeamColor;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarinerUITeamData) == 0x000008, "Wrong alignment on FMarinerUITeamData");
static_assert(sizeof(FMarinerUITeamData) == 0x000020, "Wrong size on FMarinerUITeamData");
static_assert(offsetof(FMarinerUITeamData, TeamName) == 0x000000, "Member 'FMarinerUITeamData::TeamName' has a wrong offset!");
static_assert(offsetof(FMarinerUITeamData, TeamColor) == 0x000018, "Member 'FMarinerUITeamData::TeamColor' has a wrong offset!");

// ScriptStruct Mariner.MarinerUIRankData
// 0x0118 (0x0118 - 0x0000)
struct FMarinerUIRankData final
{
public:
	struct FSlateBrush                            LargeRankIcon;                                     // 0x0000(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            SmallRankIcon;                                     // 0x0088(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                         RankMin;                                           // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RankMax;                                           // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMarinerUIRankData) == 0x000008, "Wrong alignment on FMarinerUIRankData");
static_assert(sizeof(FMarinerUIRankData) == 0x000118, "Wrong size on FMarinerUIRankData");
static_assert(offsetof(FMarinerUIRankData, LargeRankIcon) == 0x000000, "Member 'FMarinerUIRankData::LargeRankIcon' has a wrong offset!");
static_assert(offsetof(FMarinerUIRankData, SmallRankIcon) == 0x000088, "Member 'FMarinerUIRankData::SmallRankIcon' has a wrong offset!");
static_assert(offsetof(FMarinerUIRankData, RankMin) == 0x000110, "Member 'FMarinerUIRankData::RankMin' has a wrong offset!");
static_assert(offsetof(FMarinerUIRankData, RankMax) == 0x000114, "Member 'FMarinerUIRankData::RankMax' has a wrong offset!");

// ScriptStruct Mariner.MarinerWeaponReloadReplicationData
// 0x0002 (0x0002 - 0x0000)
struct FMarinerWeaponReloadReplicationData final
{
public:
	bool                                          bWantsReload;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReloadAnimationNonce;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerWeaponReloadReplicationData) == 0x000001, "Wrong alignment on FMarinerWeaponReloadReplicationData");
static_assert(sizeof(FMarinerWeaponReloadReplicationData) == 0x000002, "Wrong size on FMarinerWeaponReloadReplicationData");
static_assert(offsetof(FMarinerWeaponReloadReplicationData, bWantsReload) == 0x000000, "Member 'FMarinerWeaponReloadReplicationData::bWantsReload' has a wrong offset!");
static_assert(offsetof(FMarinerWeaponReloadReplicationData, ReloadAnimationNonce) == 0x000001, "Member 'FMarinerWeaponReloadReplicationData::ReloadAnimationNonce' has a wrong offset!");

// ScriptStruct Mariner.WidgetPoolType
// 0x0030 (0x0030 - 0x0000)
struct FWidgetPoolType final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUserWidget*>                    WidgetPool;                                        // 0x0018(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWidgetPoolType) == 0x000008, "Wrong alignment on FWidgetPoolType");
static_assert(sizeof(FWidgetPoolType) == 0x000030, "Wrong size on FWidgetPoolType");
static_assert(offsetof(FWidgetPoolType, WidgetPool) == 0x000018, "Member 'FWidgetPoolType::WidgetPool' has a wrong offset!");

// ScriptStruct Mariner.WidgetPoolData
// 0x0018 (0x0018 - 0x0000)
struct FWidgetPoolData final
{
public:
	TSubclassOf<class UUserWidget>                WidgetType;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialCount;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrowthPlan;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Owner;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetPoolData) == 0x000008, "Wrong alignment on FWidgetPoolData");
static_assert(sizeof(FWidgetPoolData) == 0x000018, "Wrong size on FWidgetPoolData");
static_assert(offsetof(FWidgetPoolData, WidgetType) == 0x000000, "Member 'FWidgetPoolData::WidgetType' has a wrong offset!");
static_assert(offsetof(FWidgetPoolData, InitialCount) == 0x000008, "Member 'FWidgetPoolData::InitialCount' has a wrong offset!");
static_assert(offsetof(FWidgetPoolData, GrowthPlan) == 0x00000C, "Member 'FWidgetPoolData::GrowthPlan' has a wrong offset!");
static_assert(offsetof(FWidgetPoolData, Owner) == 0x000010, "Member 'FWidgetPoolData::Owner' has a wrong offset!");

// ScriptStruct Mariner.MarinerWorldUIPlayerData
// 0x0020 (0x0020 - 0x0000)
struct FMarinerWorldUIPlayerData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerPlayerStateCharacterSpawner*    Spawner;                                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarinerRocketTotem*                    Totem;                                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarinerWorldUIPlayerData) == 0x000008, "Wrong alignment on FMarinerWorldUIPlayerData");
static_assert(sizeof(FMarinerWorldUIPlayerData) == 0x000020, "Wrong size on FMarinerWorldUIPlayerData");
static_assert(offsetof(FMarinerWorldUIPlayerData, PlayerState) == 0x000008, "Member 'FMarinerWorldUIPlayerData::PlayerState' has a wrong offset!");
static_assert(offsetof(FMarinerWorldUIPlayerData, Spawner) == 0x000010, "Member 'FMarinerWorldUIPlayerData::Spawner' has a wrong offset!");
static_assert(offsetof(FMarinerWorldUIPlayerData, Totem) == 0x000018, "Member 'FMarinerWorldUIPlayerData::Totem' has a wrong offset!");

}

