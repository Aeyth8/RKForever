#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Splitgun_Lite_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mariner_structs.hpp"
#include "DodgeDirections_structs.hpp"
#include "E_ItemActivationTypes_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Splitgun_Lite_AnimBP.Splitgun_Lite_AnimBP_C.ExecuteUbergraph_Splitgun_Lite_AnimBP
// 0x0110 (0x0110 - 0x0000)
struct Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_Event_bHasWonOrDraw;                        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnyMontagePlaying_ReturnValue;          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_Number_1;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UMarinerSkinCollectionDataAsset* SkinCollection)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x001C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          K2Node_Event_SkeletalMesh;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Event_Animation;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_Socket;                               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_LoopAnim;                             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue_1;         // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AnimatedProp_C*                     CallFunc_FinishSpawningActor_ReturnValue;          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDodgeDirections                              K2Node_Event_DodgeCardinalDirection;               // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMarinerInputActions                          K2Node_Event_MarinerInputAction;                   // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsReplayingLastAnimation;            // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(class UAnimMontage* Montage)>  K2Node_CreateDelegate_OutputDelegate_2;            // 0x00AC(0x0010)(ZeroConstructor, NoDestructor)
	E_ItemActivationTypes                         K2Node_Event_ItemUseType;                          // 0x00BC(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarinerSkinCollectionDataAsset*        K2Node_CustomEvent_SkinCollection;                 // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacterLite*                  K2Node_DynamicCast_AsMariner_Character_Lite;       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_Character;                            // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_Number;                               // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_CustomEvent_Montage;                        // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP) == 0x000010, "Wrong alignment on Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP");
static_assert(sizeof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP) == 0x000110, "Wrong size on Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, EntryPoint) == 0x000000, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_Event_bHasWonOrDraw) == 0x000014, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_Event_bHasWonOrDraw' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, CallFunc_IsAnyMontagePlaying_ReturnValue) == 0x000015, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::CallFunc_IsAnyMontagePlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_Event_Number_1) == 0x000018, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_Event_Number_1' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_CreateDelegate_OutputDelegate_1) == 0x00001C, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_Event_SkeletalMesh) == 0x000030, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_Event_SkeletalMesh' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_Event_Animation) == 0x000038, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_Event_Animation' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_Event_Socket) == 0x000040, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_Event_Socket' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_Event_LoopAnim) == 0x000048, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_Event_LoopAnim' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, CallFunc_GetOwningComponent_ReturnValue) == 0x000050, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, CallFunc_GetOwningComponent_ReturnValue_1) == 0x000058, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::CallFunc_GetOwningComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000060, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000090, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000A0, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, CallFunc_IsValid_ReturnValue_1) == 0x0000A8, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_Event_DodgeCardinalDirection) == 0x0000A9, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_Event_DodgeCardinalDirection' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_Event_MarinerInputAction) == 0x0000AA, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_Event_MarinerInputAction' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_Event_bIsReplayingLastAnimation) == 0x0000AB, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_Event_bIsReplayingLastAnimation' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000AC, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_Event_ItemUseType) == 0x0000BC, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_Event_ItemUseType' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, CallFunc_IsValid_ReturnValue_2) == 0x0000BD, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, CallFunc_GetOwningActor_ReturnValue) == 0x0000C0, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_CustomEvent_SkinCollection) == 0x0000C8, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_CustomEvent_SkinCollection' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_DynamicCast_AsMariner_Character_Lite) == 0x0000D0, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_DynamicCast_AsMariner_Character_Lite' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_CustomEvent_DestroyedActor) == 0x0000E0, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_Event_Character) == 0x0000E8, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_Event_Character' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_Event_Number) == 0x0000F8, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_Event_Number' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP, K2Node_CustomEvent_Montage) == 0x000108, "Member 'Splitgun_Lite_AnimBP_C_ExecuteUbergraph_Splitgun_Lite_AnimBP::K2Node_CustomEvent_Montage' has a wrong offset!");

// Function Splitgun_Lite_AnimBP.Splitgun_Lite_AnimBP_C.MontageStarted
// 0x0008 (0x0008 - 0x0000)
struct Splitgun_Lite_AnimBP_C_MontageStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Splitgun_Lite_AnimBP_C_MontageStarted) == 0x000008, "Wrong alignment on Splitgun_Lite_AnimBP_C_MontageStarted");
static_assert(sizeof(Splitgun_Lite_AnimBP_C_MontageStarted) == 0x000008, "Wrong size on Splitgun_Lite_AnimBP_C_MontageStarted");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_MontageStarted, Montage) == 0x000000, "Member 'Splitgun_Lite_AnimBP_C_MontageStarted::Montage' has a wrong offset!");

// Function Splitgun_Lite_AnimBP.Splitgun_Lite_AnimBP_C.Anim_DebugPlayAnimation
// 0x0020 (0x0020 - 0x0000)
struct Splitgun_Lite_AnimBP_C_Anim_DebugPlayAnimation final
{
public:
	class FString                                 Character;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Number;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Splitgun_Lite_AnimBP_C_Anim_DebugPlayAnimation) == 0x000008, "Wrong alignment on Splitgun_Lite_AnimBP_C_Anim_DebugPlayAnimation");
static_assert(sizeof(Splitgun_Lite_AnimBP_C_Anim_DebugPlayAnimation) == 0x000020, "Wrong size on Splitgun_Lite_AnimBP_C_Anim_DebugPlayAnimation");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_Anim_DebugPlayAnimation, Character) == 0x000000, "Member 'Splitgun_Lite_AnimBP_C_Anim_DebugPlayAnimation::Character' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_Anim_DebugPlayAnimation, Number) == 0x000010, "Member 'Splitgun_Lite_AnimBP_C_Anim_DebugPlayAnimation::Number' has a wrong offset!");

// Function Splitgun_Lite_AnimBP.Splitgun_Lite_AnimBP_C.DestroyedCleanup
// 0x0008 (0x0008 - 0x0000)
struct Splitgun_Lite_AnimBP_C_DestroyedCleanup final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Splitgun_Lite_AnimBP_C_DestroyedCleanup) == 0x000008, "Wrong alignment on Splitgun_Lite_AnimBP_C_DestroyedCleanup");
static_assert(sizeof(Splitgun_Lite_AnimBP_C_DestroyedCleanup) == 0x000008, "Wrong size on Splitgun_Lite_AnimBP_C_DestroyedCleanup");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_DestroyedCleanup, DestroyedActor) == 0x000000, "Member 'Splitgun_Lite_AnimBP_C_DestroyedCleanup::DestroyedActor' has a wrong offset!");

// Function Splitgun_Lite_AnimBP.Splitgun_Lite_AnimBP_C.Cleanup
// 0x0008 (0x0008 - 0x0000)
struct Splitgun_Lite_AnimBP_C_Cleanup final
{
public:
	class UMarinerSkinCollectionDataAsset*        SkinCollection;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Splitgun_Lite_AnimBP_C_Cleanup) == 0x000008, "Wrong alignment on Splitgun_Lite_AnimBP_C_Cleanup");
static_assert(sizeof(Splitgun_Lite_AnimBP_C_Cleanup) == 0x000008, "Wrong size on Splitgun_Lite_AnimBP_C_Cleanup");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_Cleanup, SkinCollection) == 0x000000, "Member 'Splitgun_Lite_AnimBP_C_Cleanup::SkinCollection' has a wrong offset!");

// Function Splitgun_Lite_AnimBP.Splitgun_Lite_AnimBP_C.Anim_ItemActivation
// 0x0001 (0x0001 - 0x0000)
struct Splitgun_Lite_AnimBP_C_Anim_ItemActivation final
{
public:
	E_ItemActivationTypes                         ItemUseType;                                       // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Splitgun_Lite_AnimBP_C_Anim_ItemActivation) == 0x000001, "Wrong alignment on Splitgun_Lite_AnimBP_C_Anim_ItemActivation");
static_assert(sizeof(Splitgun_Lite_AnimBP_C_Anim_ItemActivation) == 0x000001, "Wrong size on Splitgun_Lite_AnimBP_C_Anim_ItemActivation");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_Anim_ItemActivation, ItemUseType) == 0x000000, "Member 'Splitgun_Lite_AnimBP_C_Anim_ItemActivation::ItemUseType' has a wrong offset!");

// Function Splitgun_Lite_AnimBP.Splitgun_Lite_AnimBP_C.OnPreviewAnimationRequested
// 0x0001 (0x0001 - 0x0000)
struct Splitgun_Lite_AnimBP_C_OnPreviewAnimationRequested final
{
public:
	bool                                          bIsReplayingLastAnimation;                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Splitgun_Lite_AnimBP_C_OnPreviewAnimationRequested) == 0x000001, "Wrong alignment on Splitgun_Lite_AnimBP_C_OnPreviewAnimationRequested");
static_assert(sizeof(Splitgun_Lite_AnimBP_C_OnPreviewAnimationRequested) == 0x000001, "Wrong size on Splitgun_Lite_AnimBP_C_OnPreviewAnimationRequested");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_OnPreviewAnimationRequested, bIsReplayingLastAnimation) == 0x000000, "Member 'Splitgun_Lite_AnimBP_C_OnPreviewAnimationRequested::bIsReplayingLastAnimation' has a wrong offset!");

// Function Splitgun_Lite_AnimBP.Splitgun_Lite_AnimBP_C.Anim_CharacterEmote
// 0x0001 (0x0001 - 0x0000)
struct Splitgun_Lite_AnimBP_C_Anim_CharacterEmote final
{
public:
	EMarinerInputActions                          MarinerInputAction;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Splitgun_Lite_AnimBP_C_Anim_CharacterEmote) == 0x000001, "Wrong alignment on Splitgun_Lite_AnimBP_C_Anim_CharacterEmote");
static_assert(sizeof(Splitgun_Lite_AnimBP_C_Anim_CharacterEmote) == 0x000001, "Wrong size on Splitgun_Lite_AnimBP_C_Anim_CharacterEmote");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_Anim_CharacterEmote, MarinerInputAction) == 0x000000, "Member 'Splitgun_Lite_AnimBP_C_Anim_CharacterEmote::MarinerInputAction' has a wrong offset!");

// Function Splitgun_Lite_AnimBP.Splitgun_Lite_AnimBP_C.Anim_DodgeStarted
// 0x0001 (0x0001 - 0x0000)
struct Splitgun_Lite_AnimBP_C_Anim_DodgeStarted final
{
public:
	EDodgeDirections                              DodgeCardinalDirection;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Splitgun_Lite_AnimBP_C_Anim_DodgeStarted) == 0x000001, "Wrong alignment on Splitgun_Lite_AnimBP_C_Anim_DodgeStarted");
static_assert(sizeof(Splitgun_Lite_AnimBP_C_Anim_DodgeStarted) == 0x000001, "Wrong size on Splitgun_Lite_AnimBP_C_Anim_DodgeStarted");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_Anim_DodgeStarted, DodgeCardinalDirection) == 0x000000, "Member 'Splitgun_Lite_AnimBP_C_Anim_DodgeStarted::DodgeCardinalDirection' has a wrong offset!");

// Function Splitgun_Lite_AnimBP.Splitgun_Lite_AnimBP_C.Anim_SpawnProp
// 0x0020 (0x0020 - 0x0000)
struct Splitgun_Lite_AnimBP_C_Anim_SpawnProp final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Animation;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Socket;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoopAnim;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Splitgun_Lite_AnimBP_C_Anim_SpawnProp) == 0x000008, "Wrong alignment on Splitgun_Lite_AnimBP_C_Anim_SpawnProp");
static_assert(sizeof(Splitgun_Lite_AnimBP_C_Anim_SpawnProp) == 0x000020, "Wrong size on Splitgun_Lite_AnimBP_C_Anim_SpawnProp");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_Anim_SpawnProp, SkeletalMesh) == 0x000000, "Member 'Splitgun_Lite_AnimBP_C_Anim_SpawnProp::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_Anim_SpawnProp, Animation) == 0x000008, "Member 'Splitgun_Lite_AnimBP_C_Anim_SpawnProp::Animation' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_Anim_SpawnProp, Socket) == 0x000010, "Member 'Splitgun_Lite_AnimBP_C_Anim_SpawnProp::Socket' has a wrong offset!");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_Anim_SpawnProp, LoopAnim) == 0x000018, "Member 'Splitgun_Lite_AnimBP_C_Anim_SpawnProp::LoopAnim' has a wrong offset!");

// Function Splitgun_Lite_AnimBP.Splitgun_Lite_AnimBP_C.Anim_PregameEmote
// 0x0004 (0x0004 - 0x0000)
struct Splitgun_Lite_AnimBP_C_Anim_PregameEmote final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Splitgun_Lite_AnimBP_C_Anim_PregameEmote) == 0x000004, "Wrong alignment on Splitgun_Lite_AnimBP_C_Anim_PregameEmote");
static_assert(sizeof(Splitgun_Lite_AnimBP_C_Anim_PregameEmote) == 0x000004, "Wrong size on Splitgun_Lite_AnimBP_C_Anim_PregameEmote");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_Anim_PregameEmote, Number) == 0x000000, "Member 'Splitgun_Lite_AnimBP_C_Anim_PregameEmote::Number' has a wrong offset!");

// Function Splitgun_Lite_AnimBP.Splitgun_Lite_AnimBP_C.OnGameOutcomeDetermined
// 0x0001 (0x0001 - 0x0000)
struct Splitgun_Lite_AnimBP_C_OnGameOutcomeDetermined final
{
public:
	bool                                          bHasWonOrDraw;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Splitgun_Lite_AnimBP_C_OnGameOutcomeDetermined) == 0x000001, "Wrong alignment on Splitgun_Lite_AnimBP_C_OnGameOutcomeDetermined");
static_assert(sizeof(Splitgun_Lite_AnimBP_C_OnGameOutcomeDetermined) == 0x000001, "Wrong size on Splitgun_Lite_AnimBP_C_OnGameOutcomeDetermined");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_OnGameOutcomeDetermined, bHasWonOrDraw) == 0x000000, "Member 'Splitgun_Lite_AnimBP_C_OnGameOutcomeDetermined::bHasWonOrDraw' has a wrong offset!");

// Function Splitgun_Lite_AnimBP.Splitgun_Lite_AnimBP_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct Splitgun_Lite_AnimBP_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Splitgun_Lite_AnimBP_C_AnimGraph) == 0x000008, "Wrong alignment on Splitgun_Lite_AnimBP_C_AnimGraph");
static_assert(sizeof(Splitgun_Lite_AnimBP_C_AnimGraph) == 0x000010, "Wrong size on Splitgun_Lite_AnimBP_C_AnimGraph");
static_assert(offsetof(Splitgun_Lite_AnimBP_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'Splitgun_Lite_AnimBP_C_AnimGraph::AnimGraph_0' has a wrong offset!");

}

