#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DailyRewardWidget

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "MangoClient_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function DailyRewardWidget.DailyRewardWidget_C.OnButtonSelected__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct DailyRewardWidget_C_OnButtonSelected__DelegateSignature final
{
public:
	class UDailyRewardWidget_C*                   Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DailyRewardWidget_C_OnButtonSelected__DelegateSignature) == 0x000008, "Wrong alignment on DailyRewardWidget_C_OnButtonSelected__DelegateSignature");
static_assert(sizeof(DailyRewardWidget_C_OnButtonSelected__DelegateSignature) == 0x000008, "Wrong size on DailyRewardWidget_C_OnButtonSelected__DelegateSignature");
static_assert(offsetof(DailyRewardWidget_C_OnButtonSelected__DelegateSignature, Widget) == 0x000000, "Member 'DailyRewardWidget_C_OnButtonSelected__DelegateSignature::Widget' has a wrong offset!");

// Function DailyRewardWidget.DailyRewardWidget_C.ExecuteUbergraph_DailyRewardWidget
// 0x0018 (0x0018 - 0x0000)
struct DailyRewardWidget_C_ExecuteUbergraph_DailyRewardWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20A5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMarinerInputInterface> CallFunc_SetActiveInputWidget_InputWidget_CastInput; // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DailyRewardWidget_C_ExecuteUbergraph_DailyRewardWidget) == 0x000008, "Wrong alignment on DailyRewardWidget_C_ExecuteUbergraph_DailyRewardWidget");
static_assert(sizeof(DailyRewardWidget_C_ExecuteUbergraph_DailyRewardWidget) == 0x000018, "Wrong size on DailyRewardWidget_C_ExecuteUbergraph_DailyRewardWidget");
static_assert(offsetof(DailyRewardWidget_C_ExecuteUbergraph_DailyRewardWidget, EntryPoint) == 0x000000, "Member 'DailyRewardWidget_C_ExecuteUbergraph_DailyRewardWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_ExecuteUbergraph_DailyRewardWidget, CallFunc_SetActiveInputWidget_InputWidget_CastInput) == 0x000008, "Member 'DailyRewardWidget_C_ExecuteUbergraph_DailyRewardWidget::CallFunc_SetActiveInputWidget_InputWidget_CastInput' has a wrong offset!");

// Function DailyRewardWidget.DailyRewardWidget_C.PopulateReward
// 0x02D0 (0x02D0 - 0x0000)
struct DailyRewardWidget_C_PopulateReward final
{
public:
	struct FMangoLoginReward                      Param_LoginReward;                                 // 0x0000(0x00D8)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          IsActiveReward;                                    // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20A6[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UMarinerLayeredButton* Instance)> K2Node_CreateDelegate_OutputDelegate;              // 0x00DC(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20A7[0x3];                                     // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMangoQuestManager*                     CallFunc_Get_ReturnValue;                          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMangoLoginReward                      CallFunc_GetLoginQuestSelectedReward_OutLoginReward; // 0x00F8(0x00D8)()
	bool                                          CallFunc_GetLoginQuestSelectedReward_ReturnValue;  // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20A8[0x7];                                     // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x01D8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0218(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0228(0x0018)()
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20A9[0x7];                                     // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0248(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0288(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0298(0x0018)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20AA[0x7];                                     // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x02B8(0x0018)()
};
static_assert(alignof(DailyRewardWidget_C_PopulateReward) == 0x000008, "Wrong alignment on DailyRewardWidget_C_PopulateReward");
static_assert(sizeof(DailyRewardWidget_C_PopulateReward) == 0x0002D0, "Wrong size on DailyRewardWidget_C_PopulateReward");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, Param_LoginReward) == 0x000000, "Member 'DailyRewardWidget_C_PopulateReward::Param_LoginReward' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, IsActiveReward) == 0x0000D8, "Member 'DailyRewardWidget_C_PopulateReward::IsActiveReward' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, K2Node_CreateDelegate_OutputDelegate) == 0x0000DC, "Member 'DailyRewardWidget_C_PopulateReward::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, Temp_bool_Variable) == 0x0000EC, "Member 'DailyRewardWidget_C_PopulateReward::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, CallFunc_Get_ReturnValue) == 0x0000F0, "Member 'DailyRewardWidget_C_PopulateReward::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, CallFunc_GetLoginQuestSelectedReward_OutLoginReward) == 0x0000F8, "Member 'DailyRewardWidget_C_PopulateReward::CallFunc_GetLoginQuestSelectedReward_OutLoginReward' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, CallFunc_GetLoginQuestSelectedReward_ReturnValue) == 0x0001D0, "Member 'DailyRewardWidget_C_PopulateReward::CallFunc_GetLoginQuestSelectedReward_ReturnValue' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, K2Node_MakeStruct_FormatArgumentData) == 0x0001D8, "Member 'DailyRewardWidget_C_PopulateReward::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, K2Node_MakeArray_Array) == 0x000218, "Member 'DailyRewardWidget_C_PopulateReward::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, CallFunc_Format_ReturnValue) == 0x000228, "Member 'DailyRewardWidget_C_PopulateReward::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000240, "Member 'DailyRewardWidget_C_PopulateReward::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, K2Node_MakeStruct_FormatArgumentData_1) == 0x000248, "Member 'DailyRewardWidget_C_PopulateReward::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, K2Node_MakeArray_Array_1) == 0x000288, "Member 'DailyRewardWidget_C_PopulateReward::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, CallFunc_Format_ReturnValue_1) == 0x000298, "Member 'DailyRewardWidget_C_PopulateReward::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0002B0, "Member 'DailyRewardWidget_C_PopulateReward::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_PopulateReward, K2Node_Select_Default) == 0x0002B8, "Member 'DailyRewardWidget_C_PopulateReward::K2Node_Select_Default' has a wrong offset!");

// Function DailyRewardWidget.DailyRewardWidget_C.SetAsActiveReward
// 0x0068 (0x0068 - 0x0000)
struct DailyRewardWidget_C_SetAsActiveReward final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20AB[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20AC[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0038(0x0028)()
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DailyRewardWidget_C_SetAsActiveReward) == 0x000008, "Wrong alignment on DailyRewardWidget_C_SetAsActiveReward");
static_assert(sizeof(DailyRewardWidget_C_SetAsActiveReward) == 0x000068, "Wrong size on DailyRewardWidget_C_SetAsActiveReward");
static_assert(offsetof(DailyRewardWidget_C_SetAsActiveReward, IsActive) == 0x000000, "Member 'DailyRewardWidget_C_SetAsActiveReward::IsActive' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_SetAsActiveReward, Temp_byte_Variable) == 0x000001, "Member 'DailyRewardWidget_C_SetAsActiveReward::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_SetAsActiveReward, Temp_bool_Variable) == 0x000002, "Member 'DailyRewardWidget_C_SetAsActiveReward::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_SetAsActiveReward, Temp_struct_Variable) == 0x000004, "Member 'DailyRewardWidget_C_SetAsActiveReward::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_SetAsActiveReward, Temp_struct_Variable_1) == 0x000014, "Member 'DailyRewardWidget_C_SetAsActiveReward::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_SetAsActiveReward, K2Node_Select_Default) == 0x000024, "Member 'DailyRewardWidget_C_SetAsActiveReward::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_SetAsActiveReward, K2Node_MakeStruct_SlateColor) == 0x000038, "Member 'DailyRewardWidget_C_SetAsActiveReward::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_SetAsActiveReward, Temp_byte_Variable_1) == 0x000060, "Member 'DailyRewardWidget_C_SetAsActiveReward::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_SetAsActiveReward, Temp_bool_Variable_1) == 0x000061, "Member 'DailyRewardWidget_C_SetAsActiveReward::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(DailyRewardWidget_C_SetAsActiveReward, K2Node_Select_Default_1) == 0x000062, "Member 'DailyRewardWidget_C_SetAsActiveReward::K2Node_Select_Default_1' has a wrong offset!");

// Function DailyRewardWidget.DailyRewardWidget_C.OnSelected
// 0x0008 (0x0008 - 0x0000)
struct DailyRewardWidget_C_OnSelected final
{
public:
	class UMarinerLayeredButton*                  Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DailyRewardWidget_C_OnSelected) == 0x000008, "Wrong alignment on DailyRewardWidget_C_OnSelected");
static_assert(sizeof(DailyRewardWidget_C_OnSelected) == 0x000008, "Wrong size on DailyRewardWidget_C_OnSelected");
static_assert(offsetof(DailyRewardWidget_C_OnSelected, Button) == 0x000000, "Member 'DailyRewardWidget_C_OnSelected::Button' has a wrong offset!");

}

