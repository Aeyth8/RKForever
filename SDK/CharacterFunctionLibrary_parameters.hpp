#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterFunctionLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ECardinalDirection_structs.hpp"


namespace SDK::Params
{

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.SetAimPitchYaw
// 0x0030 (0x0030 - 0x0000)
struct CharacterFunctionLibrary_C_SetAimPitchYaw final
{
public:
	class AMarinerCharacter*                      MarinerCharacter;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimPitch;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimYaw;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetAimOffsets_ReturnValue;                // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_SetAimPitchYaw) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_SetAimPitchYaw");
static_assert(sizeof(CharacterFunctionLibrary_C_SetAimPitchYaw) == 0x000030, "Wrong size on CharacterFunctionLibrary_C_SetAimPitchYaw");
static_assert(offsetof(CharacterFunctionLibrary_C_SetAimPitchYaw, MarinerCharacter) == 0x000000, "Member 'CharacterFunctionLibrary_C_SetAimPitchYaw::MarinerCharacter' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SetAimPitchYaw, AimPitch) == 0x000008, "Member 'CharacterFunctionLibrary_C_SetAimPitchYaw::AimPitch' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SetAimPitchYaw, AimYaw) == 0x00000C, "Member 'CharacterFunctionLibrary_C_SetAimPitchYaw::AimYaw' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SetAimPitchYaw, __WorldContext) == 0x000010, "Member 'CharacterFunctionLibrary_C_SetAimPitchYaw::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SetAimPitchYaw, CallFunc_GetAimOffsets_ReturnValue) == 0x000018, "Member 'CharacterFunctionLibrary_C_SetAimPitchYaw::CallFunc_GetAimOffsets_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SetAimPitchYaw, CallFunc_BreakRotator_Roll) == 0x000024, "Member 'CharacterFunctionLibrary_C_SetAimPitchYaw::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SetAimPitchYaw, CallFunc_BreakRotator_Pitch) == 0x000028, "Member 'CharacterFunctionLibrary_C_SetAimPitchYaw::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SetAimPitchYaw, CallFunc_BreakRotator_Yaw) == 0x00002C, "Member 'CharacterFunctionLibrary_C_SetAimPitchYaw::CallFunc_BreakRotator_Yaw' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.SetFalling
// 0x0028 (0x0028 - 0x0000)
struct CharacterFunctionLibrary_C_SetFalling final
{
public:
	class APawn*                                  MarinerCharacter;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFalling;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_SetFalling) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_SetFalling");
static_assert(sizeof(CharacterFunctionLibrary_C_SetFalling) == 0x000028, "Wrong size on CharacterFunctionLibrary_C_SetFalling");
static_assert(offsetof(CharacterFunctionLibrary_C_SetFalling, MarinerCharacter) == 0x000000, "Member 'CharacterFunctionLibrary_C_SetFalling::MarinerCharacter' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SetFalling, IsFalling) == 0x000008, "Member 'CharacterFunctionLibrary_C_SetFalling::IsFalling' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SetFalling, __WorldContext) == 0x000010, "Member 'CharacterFunctionLibrary_C_SetFalling::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SetFalling, CallFunc_GetMovementComponent_ReturnValue) == 0x000018, "Member 'CharacterFunctionLibrary_C_SetFalling::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SetFalling, CallFunc_IsFalling_ReturnValue) == 0x000020, "Member 'CharacterFunctionLibrary_C_SetFalling::CallFunc_IsFalling_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.Calculate2DRelativeSpeed
// 0x0110 (0x0110 - 0x0000)
struct CharacterFunctionLibrary_C_Calculate2DRelativeSpeed final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RelativeXSpeed;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RelativeYSpeed;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneComponent;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             LocalTransform;                                    // 0x0020(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0xF];                                       // 0x0051(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize2D_ReturnValue;                      // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxSpeed_ReturnValue;                  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed) == 0x000010, "Wrong alignment on CharacterFunctionLibrary_C_Calculate2DRelativeSpeed");
static_assert(sizeof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed) == 0x000110, "Wrong size on CharacterFunctionLibrary_C_Calculate2DRelativeSpeed");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, Pawn) == 0x000000, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::Pawn' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, RelativeXSpeed) == 0x000008, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::RelativeXSpeed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, RelativeYSpeed) == 0x00000C, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::RelativeYSpeed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, SceneComponent) == 0x000010, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::SceneComponent' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, __WorldContext) == 0x000018, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, LocalTransform) == 0x000020, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::LocalTransform' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000060, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000090, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, CallFunc_GetMovementComponent_ReturnValue) == 0x000098, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x0000A0, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x0000D0, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, CallFunc_InverseTransformDirection_ReturnValue) == 0x0000D8, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, CallFunc_VSize2D_ReturnValue) == 0x0000E4, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, CallFunc_GetMaxSpeed_ReturnValue) == 0x0000E8, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::CallFunc_GetMaxSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000EC, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, CallFunc_Divide_VectorFloat_ReturnValue) == 0x0000F0, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, CallFunc_BreakVector_X) == 0x0000FC, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, CallFunc_BreakVector_Y) == 0x000100, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, CallFunc_BreakVector_Z) == 0x000104, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Calculate2DRelativeSpeed, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000108, "Member 'CharacterFunctionLibrary_C_Calculate2DRelativeSpeed::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetCardinalDirection
// 0x00E8 (0x00E8 - 0x0000)
struct CharacterFunctionLibrary_C_GetCardinalDirection final
{
public:
	struct FRotator                               FacingDirection;                                   // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Velocity;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECardinalDirection                            Cardinal;                                          // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Direction;                                         // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NorthRotation;                                     // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SouthRotation;                                     // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EastRotation;                                      // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WestRotation;                                      // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxNorth;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalizedVector;                                  // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightDot;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForwardDot;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECardinalDirection                            LocalCardinal;                                     // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngleFromVectors;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_1;         // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_2;         // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B[0x1];                                       // 0x008B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAngleFromVectors_Angle;                // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_GetCardinalDirection) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_GetCardinalDirection");
static_assert(sizeof(CharacterFunctionLibrary_C_GetCardinalDirection) == 0x0000E8, "Wrong size on CharacterFunctionLibrary_C_GetCardinalDirection");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, FacingDirection) == 0x000000, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::FacingDirection' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, Velocity) == 0x00000C, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::Velocity' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, __WorldContext) == 0x000018, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, Cardinal) == 0x000020, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::Cardinal' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, Direction) == 0x000024, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::Direction' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, NorthRotation) == 0x000028, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::NorthRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, SouthRotation) == 0x00002C, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::SouthRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, EastRotation) == 0x000030, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::EastRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, WestRotation) == 0x000034, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::WestRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, MaxNorth) == 0x000038, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::MaxNorth' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, NormalizedVector) == 0x00003C, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::NormalizedVector' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, RightDot) == 0x000048, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::RightDot' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, ForwardDot) == 0x00004C, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::ForwardDot' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, LocalCardinal) == 0x000050, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::LocalCardinal' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, AngleFromVectors) == 0x000054, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::AngleFromVectors' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000058, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000064, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Add_FloatFloat_ReturnValue) == 0x000070, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_BreakRotator_Roll) == 0x000074, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_BreakRotator_Pitch) == 0x000078, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_BreakRotator_Yaw) == 0x00007C, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Abs_ReturnValue) == 0x000080, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000084, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_InRange_FloatFloat_ReturnValue) == 0x000088, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_InRange_FloatFloat_ReturnValue_1) == 0x000089, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_InRange_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_InRange_FloatFloat_ReturnValue_2) == 0x00008A, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_InRange_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_GetRightVector_ReturnValue) == 0x00008C, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_VSizeSquared_ReturnValue) == 0x000098, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Dot_VectorVector_ReturnValue) == 0x00009C, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000A0, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_GetForwardVector_ReturnValue) == 0x0000A4, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x0000B0, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Normal_ReturnValue) == 0x0000B4, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000C0, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000C4, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0000C8, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0000CC, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0000D0, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0000D4, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x0000D8, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x0000DC, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCardinalDirection, CallFunc_GetAngleFromVectors_Angle) == 0x0000E0, "Member 'CharacterFunctionLibrary_C_GetCardinalDirection::CallFunc_GetAngleFromVectors_Angle' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetWeaponSocketLocation
// 0x0070 (0x0070 - 0x0000)
struct CharacterFunctionLibrary_C_GetWeaponSocketLocation final
{
public:
	class AMarinerCharacter*                      MarinerCharacter;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Socket;                                            // 0x001C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerWeapon*                         CallFunc_GetWeapon_ReturnValue;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetWeaponMesh_ReturnValue;                // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_GetWeaponSocketLocation) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_GetWeaponSocketLocation");
static_assert(sizeof(CharacterFunctionLibrary_C_GetWeaponSocketLocation) == 0x000070, "Wrong size on CharacterFunctionLibrary_C_GetWeaponSocketLocation");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWeaponSocketLocation, MarinerCharacter) == 0x000000, "Member 'CharacterFunctionLibrary_C_GetWeaponSocketLocation::MarinerCharacter' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWeaponSocketLocation, SkeletalMesh) == 0x000008, "Member 'CharacterFunctionLibrary_C_GetWeaponSocketLocation::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWeaponSocketLocation, Location) == 0x000010, "Member 'CharacterFunctionLibrary_C_GetWeaponSocketLocation::Location' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWeaponSocketLocation, Socket) == 0x00001C, "Member 'CharacterFunctionLibrary_C_GetWeaponSocketLocation::Socket' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWeaponSocketLocation, __WorldContext) == 0x000028, "Member 'CharacterFunctionLibrary_C_GetWeaponSocketLocation::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWeaponSocketLocation, Temp_bool_Variable) == 0x000030, "Member 'CharacterFunctionLibrary_C_GetWeaponSocketLocation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWeaponSocketLocation, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000031, "Member 'CharacterFunctionLibrary_C_GetWeaponSocketLocation::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWeaponSocketLocation, CallFunc_IsValid_ReturnValue) == 0x000032, "Member 'CharacterFunctionLibrary_C_GetWeaponSocketLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWeaponSocketLocation, CallFunc_GetWeapon_ReturnValue) == 0x000038, "Member 'CharacterFunctionLibrary_C_GetWeaponSocketLocation::CallFunc_GetWeapon_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWeaponSocketLocation, Temp_name_Variable) == 0x000040, "Member 'CharacterFunctionLibrary_C_GetWeaponSocketLocation::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWeaponSocketLocation, CallFunc_IsValid_ReturnValue_1) == 0x000048, "Member 'CharacterFunctionLibrary_C_GetWeaponSocketLocation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWeaponSocketLocation, K2Node_Select_Default) == 0x00004C, "Member 'CharacterFunctionLibrary_C_GetWeaponSocketLocation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWeaponSocketLocation, CallFunc_GetWeaponMesh_ReturnValue) == 0x000058, "Member 'CharacterFunctionLibrary_C_GetWeaponSocketLocation::CallFunc_GetWeaponMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWeaponSocketLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x000060, "Member 'CharacterFunctionLibrary_C_GetWeaponSocketLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWeaponSocketLocation, CallFunc_IsValid_ReturnValue_2) == 0x00006C, "Member 'CharacterFunctionLibrary_C_GetWeaponSocketLocation::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.CalculateRootOffset
// 0x0088 (0x0088 - 0x0000)
struct CharacterFunctionLibrary_C_CalculateRootOffset final
{
public:
	float                                         MaxRootOffset;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RootOffsetRef;                                     // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Right_Foot_Alpha_Ref;                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Left_Foot_Alpha_Ref;                               // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Root_Interp_Speed;                                 // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta;                                             // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Left_Foot_Offset;                                  // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Right_Foot_Offset;                                 // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MaxOffsetWeightCurve;                              // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_CalculateRootOffset) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_CalculateRootOffset");
static_assert(sizeof(CharacterFunctionLibrary_C_CalculateRootOffset) == 0x000088, "Wrong size on CharacterFunctionLibrary_C_CalculateRootOffset");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, MaxRootOffset) == 0x000000, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::MaxRootOffset' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, RootOffsetRef) == 0x000004, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::RootOffsetRef' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, Right_Foot_Alpha_Ref) == 0x000010, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::Right_Foot_Alpha_Ref' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, Left_Foot_Alpha_Ref) == 0x000014, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::Left_Foot_Alpha_Ref' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, Root_Interp_Speed) == 0x000018, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::Root_Interp_Speed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, Delta) == 0x00001C, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::Delta' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, Left_Foot_Offset) == 0x000020, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::Left_Foot_Offset' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, Right_Foot_Offset) == 0x000024, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::Right_Foot_Offset' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, __WorldContext) == 0x000028, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, MaxOffsetWeightCurve) == 0x000030, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::MaxOffsetWeightCurve' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, CallFunc_FMin_ReturnValue) == 0x000038, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, CallFunc_Abs_ReturnValue) == 0x00003C, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00004C, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000058, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00005C, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000060, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000064, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, CallFunc_GetFloatValue_ReturnValue) == 0x000068, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, CallFunc_VLerp_ReturnValue) == 0x00006C, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateRootOffset, CallFunc_VInterpTo_ReturnValue) == 0x000078, "Member 'CharacterFunctionLibrary_C_CalculateRootOffset::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.MarinerBaseAnimation
// 0x0140 (0x0140 - 0x0000)
struct CharacterFunctionLibrary_C_MarinerBaseAnimation final
{
public:
	class AMarinerCharacter*                      MarinerCharacter;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	bool                                          IsReturningToArena;                                // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	bool                                          IsStunned;                                         // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	bool                                          IsFalling;                                         // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	float                                         RelativeXSpeed;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RelativeYSpeed;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        SkeletalMesh;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimPitch;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimYaw;                                            // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SkeletalRotation;                                  // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	float                                         DeltaTimeX;                                        // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECardinalDirection                            CardinalDirection;                                 // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Direction;                                         // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableTurnInPlace;                                 // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         North;                                             // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         South;                                             // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         East;                                              // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         West;                                              // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawOffset;                                         // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x0070(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerCharacterMovement*              MarinerMovementComponent;                          // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsReturningToArena_ReturnValue;           // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_1;            // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECardinalDirection                            CallFunc_GetCardinalDirection_Cardinal;            // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCardinalDirection_Direction;           // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCardinalDirection_NorthRotation;       // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCardinalDirection_SouthRotation;       // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCardinalDirection_EastRotation;        // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCardinalDirection_WestRotation;        // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECardinalDirection                            Temp_byte_Variable;                                // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_MarinerBaseAnimation) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_MarinerBaseAnimation");
static_assert(sizeof(CharacterFunctionLibrary_C_MarinerBaseAnimation) == 0x000140, "Wrong size on CharacterFunctionLibrary_C_MarinerBaseAnimation");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, MarinerCharacter) == 0x000000, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::MarinerCharacter' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, IsMoving) == 0x000008, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::IsMoving' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, IsReturningToArena) == 0x000009, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::IsReturningToArena' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, IsStunned) == 0x00000A, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::IsStunned' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, IsFalling) == 0x00000B, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::IsFalling' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, RelativeXSpeed) == 0x00000C, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::RelativeXSpeed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, RelativeYSpeed) == 0x000010, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::RelativeYSpeed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, SkeletalMesh) == 0x000018, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, AimPitch) == 0x000020, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::AimPitch' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, AimYaw) == 0x000024, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::AimYaw' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, Velocity) == 0x000028, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::Velocity' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, SkeletalRotation) == 0x000034, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::SkeletalRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, DeltaTimeX) == 0x000040, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::DeltaTimeX' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CardinalDirection) == 0x000044, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CardinalDirection' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, Direction) == 0x000048, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::Direction' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, EnableTurnInPlace) == 0x00004C, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::EnableTurnInPlace' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, North) == 0x000050, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::North' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, South) == 0x000054, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::South' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, East) == 0x000058, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::East' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, West) == 0x00005C, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::West' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, Speed) == 0x000060, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::Speed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, YawOffset) == 0x000064, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::YawOffset' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, __WorldContext) == 0x000068, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, TargetRotation) == 0x000070, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::TargetRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, MarinerMovementComponent) == 0x000080, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::MarinerMovementComponent' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, Temp_bool_Variable) == 0x000088, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, Temp_float_Variable) == 0x00008C, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_IsReturningToArena_ReturnValue) == 0x000090, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_IsReturningToArena_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000098, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0000A0, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000AC, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000B0, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_FClamp_ReturnValue) == 0x0000B4, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000B8, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000BC, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0000C0, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0000C4, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_ComposeRotators_ReturnValue) == 0x0000C8, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_ComposeRotators_ReturnValue_1) == 0x0000D4, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_ComposeRotators_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_GetCardinalDirection_Cardinal) == 0x0000E0, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_GetCardinalDirection_Cardinal' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_GetCardinalDirection_Direction) == 0x0000E4, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_GetCardinalDirection_Direction' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_GetCardinalDirection_NorthRotation) == 0x0000E8, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_GetCardinalDirection_NorthRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_GetCardinalDirection_SouthRotation) == 0x0000EC, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_GetCardinalDirection_SouthRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_GetCardinalDirection_EastRotation) == 0x0000F0, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_GetCardinalDirection_EastRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_GetCardinalDirection_WestRotation) == 0x0000F4, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_GetCardinalDirection_WestRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0000F8, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, K2Node_Select_Default) == 0x0000FC, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Abs_ReturnValue) == 0x000100, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Abs_ReturnValue_1) == 0x000104, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000108, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x00010C, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000110, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000114, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, Temp_byte_Variable) == 0x000118, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00011C, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000120, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, K2Node_Select_Default_1) == 0x000124, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_FClamp_ReturnValue_1) == 0x000128, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_Lerp_ReturnValue) == 0x00012C, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerBaseAnimation, CallFunc_RLerp_ReturnValue) == 0x000130, "Member 'CharacterFunctionLibrary_C_MarinerBaseAnimation::CallFunc_RLerp_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.AnimCheckGameModeForMainMenu
// 0x0028 (0x0028 - 0x0000)
struct CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMainMenu;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerGameModeMainMenu*               K2Node_DynamicCast_AsMariner_Game_Mode_Main_Menu;  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu");
static_assert(sizeof(CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu) == 0x000028, "Wrong size on CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu, __WorldContext) == 0x000000, "Member 'CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu, IsMainMenu) == 0x000008, "Member 'CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu::IsMainMenu' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu, CallFunc_GetGameMode_ReturnValue) == 0x000010, "Member 'CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu, K2Node_DynamicCast_AsMariner_Game_Mode_Main_Menu) == 0x000018, "Member 'CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu::K2Node_DynamicCast_AsMariner_Game_Mode_Main_Menu' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'CharacterFunctionLibrary_C_AnimCheckGameModeForMainMenu::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetAngleFromVectors
// 0x0050 (0x0050 - 0x0000)
struct CharacterFunctionLibrary_C_GetAngleFromVectors final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                B;                                                 // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DotProduct;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAtan2_ReturnValue;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAtan2_ReturnValue_1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_GetAngleFromVectors) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_GetAngleFromVectors");
static_assert(sizeof(CharacterFunctionLibrary_C_GetAngleFromVectors) == 0x000050, "Wrong size on CharacterFunctionLibrary_C_GetAngleFromVectors");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAngleFromVectors, A) == 0x000000, "Member 'CharacterFunctionLibrary_C_GetAngleFromVectors::A' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAngleFromVectors, B) == 0x00000C, "Member 'CharacterFunctionLibrary_C_GetAngleFromVectors::B' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAngleFromVectors, __WorldContext) == 0x000018, "Member 'CharacterFunctionLibrary_C_GetAngleFromVectors::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAngleFromVectors, Angle) == 0x000020, "Member 'CharacterFunctionLibrary_C_GetAngleFromVectors::Angle' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAngleFromVectors, DotProduct) == 0x000024, "Member 'CharacterFunctionLibrary_C_GetAngleFromVectors::DotProduct' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAngleFromVectors, CallFunc_BreakVector_X) == 0x000028, "Member 'CharacterFunctionLibrary_C_GetAngleFromVectors::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAngleFromVectors, CallFunc_BreakVector_Y) == 0x00002C, "Member 'CharacterFunctionLibrary_C_GetAngleFromVectors::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAngleFromVectors, CallFunc_BreakVector_Z) == 0x000030, "Member 'CharacterFunctionLibrary_C_GetAngleFromVectors::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAngleFromVectors, CallFunc_BreakVector_X_1) == 0x000034, "Member 'CharacterFunctionLibrary_C_GetAngleFromVectors::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAngleFromVectors, CallFunc_BreakVector_Y_1) == 0x000038, "Member 'CharacterFunctionLibrary_C_GetAngleFromVectors::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAngleFromVectors, CallFunc_BreakVector_Z_1) == 0x00003C, "Member 'CharacterFunctionLibrary_C_GetAngleFromVectors::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAngleFromVectors, CallFunc_DegAtan2_ReturnValue) == 0x000040, "Member 'CharacterFunctionLibrary_C_GetAngleFromVectors::CallFunc_DegAtan2_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAngleFromVectors, CallFunc_DegAtan2_ReturnValue_1) == 0x000044, "Member 'CharacterFunctionLibrary_C_GetAngleFromVectors::CallFunc_DegAtan2_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAngleFromVectors, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000048, "Member 'CharacterFunctionLibrary_C_GetAngleFromVectors::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAngleFromVectors, CallFunc_Percent_FloatFloat_ReturnValue) == 0x00004C, "Member 'CharacterFunctionLibrary_C_GetAngleFromVectors::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.CalculateAirLean
// 0x0058 (0x0058 - 0x0000)
struct CharacterFunctionLibrary_C_CalculateAirLean final
{
public:
	float                                         RelativeX;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RelativeY;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Lean;                                              // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	float                                         AimPitch;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFalling;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_CalculateAirLean) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_CalculateAirLean");
static_assert(sizeof(CharacterFunctionLibrary_C_CalculateAirLean) == 0x000058, "Wrong size on CharacterFunctionLibrary_C_CalculateAirLean");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateAirLean, RelativeX) == 0x000000, "Member 'CharacterFunctionLibrary_C_CalculateAirLean::RelativeX' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateAirLean, RelativeY) == 0x000004, "Member 'CharacterFunctionLibrary_C_CalculateAirLean::RelativeY' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateAirLean, Lean) == 0x000008, "Member 'CharacterFunctionLibrary_C_CalculateAirLean::Lean' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateAirLean, AimPitch) == 0x000014, "Member 'CharacterFunctionLibrary_C_CalculateAirLean::AimPitch' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateAirLean, IsFalling) == 0x000018, "Member 'CharacterFunctionLibrary_C_CalculateAirLean::IsFalling' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateAirLean, __WorldContext) == 0x000020, "Member 'CharacterFunctionLibrary_C_CalculateAirLean::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateAirLean, CallFunc_FClamp_ReturnValue) == 0x000028, "Member 'CharacterFunctionLibrary_C_CalculateAirLean::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateAirLean, CallFunc_FClamp_ReturnValue_1) == 0x00002C, "Member 'CharacterFunctionLibrary_C_CalculateAirLean::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateAirLean, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000030, "Member 'CharacterFunctionLibrary_C_CalculateAirLean::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateAirLean, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000034, "Member 'CharacterFunctionLibrary_C_CalculateAirLean::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateAirLean, CallFunc_MakeRotator_ReturnValue) == 0x000038, "Member 'CharacterFunctionLibrary_C_CalculateAirLean::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateAirLean, CallFunc_BreakRotator_Roll) == 0x000044, "Member 'CharacterFunctionLibrary_C_CalculateAirLean::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateAirLean, CallFunc_BreakRotator_Pitch) == 0x000048, "Member 'CharacterFunctionLibrary_C_CalculateAirLean::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateAirLean, CallFunc_BreakRotator_Yaw) == 0x00004C, "Member 'CharacterFunctionLibrary_C_CalculateAirLean::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateAirLean, CallFunc_Add_FloatFloat_ReturnValue) == 0x000050, "Member 'CharacterFunctionLibrary_C_CalculateAirLean::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.MarinerFirstPersonBaseAnimation
// 0x0030 (0x0030 - 0x0000)
struct CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation final
{
public:
	class AMarinerCharacter*                      MarinerCharacter;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	bool                                          IsFalling;                                         // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	bool                                          IsStunned;                                         // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RelativeXSpeed;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RelativeYSpeed;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation");
static_assert(sizeof(CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation) == 0x000030, "Wrong size on CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation, MarinerCharacter) == 0x000000, "Member 'CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation::MarinerCharacter' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation, IsMoving) == 0x000008, "Member 'CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation::IsMoving' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation, IsFalling) == 0x000009, "Member 'CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation::IsFalling' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation, IsStunned) == 0x00000A, "Member 'CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation::IsStunned' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation, RelativeXSpeed) == 0x00000C, "Member 'CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation::RelativeXSpeed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation, RelativeYSpeed) == 0x000010, "Member 'CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation::RelativeYSpeed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation, Velocity) == 0x000014, "Member 'CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation::Velocity' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation, Speed) == 0x000020, "Member 'CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation::Speed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation, __WorldContext) == 0x000028, "Member 'CharacterFunctionLibrary_C_MarinerFirstPersonBaseAnimation::__WorldContext' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.MarinerAnim_MovementState
// 0x0040 (0x0040 - 0x0000)
struct CharacterFunctionLibrary_C_MarinerAnim_MovementState final
{
public:
	class AMarinerCharacter*                      MarinerCharacter;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	bool                                          IsFalling;                                         // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_MarinerAnim_MovementState) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_MarinerAnim_MovementState");
static_assert(sizeof(CharacterFunctionLibrary_C_MarinerAnim_MovementState) == 0x000040, "Wrong size on CharacterFunctionLibrary_C_MarinerAnim_MovementState");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnim_MovementState, MarinerCharacter) == 0x000000, "Member 'CharacterFunctionLibrary_C_MarinerAnim_MovementState::MarinerCharacter' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnim_MovementState, Velocity) == 0x000008, "Member 'CharacterFunctionLibrary_C_MarinerAnim_MovementState::Velocity' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnim_MovementState, Speed) == 0x000014, "Member 'CharacterFunctionLibrary_C_MarinerAnim_MovementState::Speed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnim_MovementState, IsMoving) == 0x000018, "Member 'CharacterFunctionLibrary_C_MarinerAnim_MovementState::IsMoving' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnim_MovementState, IsFalling) == 0x000019, "Member 'CharacterFunctionLibrary_C_MarinerAnim_MovementState::IsFalling' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnim_MovementState, __WorldContext) == 0x000020, "Member 'CharacterFunctionLibrary_C_MarinerAnim_MovementState::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnim_MovementState, CallFunc_GetVelocity_ReturnValue) == 0x000028, "Member 'CharacterFunctionLibrary_C_MarinerAnim_MovementState::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnim_MovementState, CallFunc_IsFalling_ReturnValue) == 0x000034, "Member 'CharacterFunctionLibrary_C_MarinerAnim_MovementState::CallFunc_IsFalling_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnim_MovementState, CallFunc_VSizeSquared_ReturnValue) == 0x000038, "Member 'CharacterFunctionLibrary_C_MarinerAnim_MovementState::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnim_MovementState, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00003C, "Member 'CharacterFunctionLibrary_C_MarinerAnim_MovementState::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.Deprecated_MaskAnimDynamicsBySpeed
// 0x0038 (0x0038 - 0x0000)
struct CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed final
{
public:
	class UCurveFloat*                            ResponseCurve;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      MarinerCharacter;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed");
static_assert(sizeof(CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed) == 0x000038, "Wrong size on CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed");
static_assert(offsetof(CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed, ResponseCurve) == 0x000000, "Member 'CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed::ResponseCurve' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed, MarinerCharacter) == 0x000008, "Member 'CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed::MarinerCharacter' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed, Alpha) == 0x000010, "Member 'CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed::Alpha' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed, __WorldContext) == 0x000018, "Member 'CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed, CallFunc_GetVelocity_ReturnValue) == 0x000020, "Member 'CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed, CallFunc_VSize_ReturnValue) == 0x00002C, "Member 'CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed, CallFunc_GetFloatValue_ReturnValue) == 0x000030, "Member 'CharacterFunctionLibrary_C_Deprecated_MaskAnimDynamicsBySpeed::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.CalculateArenaReturnRotation
// 0x00E0 (0x00E0 - 0x0000)
struct CharacterFunctionLibrary_C_CalculateArenaReturnRotation final
{
public:
	class USkeletalMeshComponent*                 OwningComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	float                                         ReturningAlpha;                                    // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTimeX;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRotation;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AlphaSpeed;                                        // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationSpeed;                                     // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalVelocity;                                     // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation) == 0x000010, "Wrong alignment on CharacterFunctionLibrary_C_CalculateArenaReturnRotation");
static_assert(sizeof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation) == 0x0000E0, "Wrong size on CharacterFunctionLibrary_C_CalculateArenaReturnRotation");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, OwningComponent) == 0x000000, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::OwningComponent' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, Velocity) == 0x000008, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::Velocity' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, Rotation) == 0x000014, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::Rotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, ReturningAlpha) == 0x000020, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::ReturningAlpha' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, DeltaTimeX) == 0x000024, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::DeltaTimeX' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, MaxRotation) == 0x000028, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::MaxRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, AlphaSpeed) == 0x00002C, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::AlphaSpeed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, RotationSpeed) == 0x000030, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::RotationSpeed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, __WorldContext) == 0x000038, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, LocalVelocity) == 0x000040, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::LocalVelocity' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000050, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000080, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, CallFunc_Normal_ReturnValue) == 0x000084, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, CallFunc_VSize_ReturnValue) == 0x000090, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, CallFunc_BreakVector_X) == 0x000094, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, CallFunc_BreakVector_Y) == 0x000098, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, CallFunc_BreakVector_Z) == 0x00009C, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000A0, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000A4, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, CallFunc_FInterpTo_ReturnValue) == 0x0000A8, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, CallFunc_InverseTransformDirection_ReturnValue) == 0x0000AC, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000B8, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0000BC, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, CallFunc_MakeRotator_ReturnValue) == 0x0000C0, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalculateArenaReturnRotation, CallFunc_RInterpTo_ReturnValue) == 0x0000CC, "Member 'CharacterFunctionLibrary_C_CalculateArenaReturnRotation::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.FirstPersonTurningAnim
// 0x0070 (0x0070 - 0x0000)
struct CharacterFunctionLibrary_C_FirstPersonTurningAnim final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PreviousRotation;                                  // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FRotator                               SwizzledRotation;                                  // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DeltaRotation;                                     // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CurrentRotation;                                   // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_FirstPersonTurningAnim) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_FirstPersonTurningAnim");
static_assert(sizeof(CharacterFunctionLibrary_C_FirstPersonTurningAnim) == 0x000070, "Wrong size on CharacterFunctionLibrary_C_FirstPersonTurningAnim");
static_assert(offsetof(CharacterFunctionLibrary_C_FirstPersonTurningAnim, Pawn) == 0x000000, "Member 'CharacterFunctionLibrary_C_FirstPersonTurningAnim::Pawn' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_FirstPersonTurningAnim, PreviousRotation) == 0x000008, "Member 'CharacterFunctionLibrary_C_FirstPersonTurningAnim::PreviousRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_FirstPersonTurningAnim, SwizzledRotation) == 0x000014, "Member 'CharacterFunctionLibrary_C_FirstPersonTurningAnim::SwizzledRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_FirstPersonTurningAnim, __WorldContext) == 0x000020, "Member 'CharacterFunctionLibrary_C_FirstPersonTurningAnim::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_FirstPersonTurningAnim, DeltaRotation) == 0x000028, "Member 'CharacterFunctionLibrary_C_FirstPersonTurningAnim::DeltaRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_FirstPersonTurningAnim, CurrentRotation) == 0x000034, "Member 'CharacterFunctionLibrary_C_FirstPersonTurningAnim::CurrentRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_FirstPersonTurningAnim, CallFunc_GetControlRotation_ReturnValue) == 0x000040, "Member 'CharacterFunctionLibrary_C_FirstPersonTurningAnim::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_FirstPersonTurningAnim, CallFunc_BreakRotator_Roll) == 0x00004C, "Member 'CharacterFunctionLibrary_C_FirstPersonTurningAnim::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_FirstPersonTurningAnim, CallFunc_BreakRotator_Pitch) == 0x000050, "Member 'CharacterFunctionLibrary_C_FirstPersonTurningAnim::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_FirstPersonTurningAnim, CallFunc_BreakRotator_Yaw) == 0x000054, "Member 'CharacterFunctionLibrary_C_FirstPersonTurningAnim::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_FirstPersonTurningAnim, CallFunc_MakeRotator_ReturnValue) == 0x000058, "Member 'CharacterFunctionLibrary_C_FirstPersonTurningAnim::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_FirstPersonTurningAnim, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000064, "Member 'CharacterFunctionLibrary_C_FirstPersonTurningAnim::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.SwizzledRotationInterpolation
// 0x00B8 (0x00B8 - 0x0000)
struct CharacterFunctionLibrary_C_SwizzledRotationInterpolation final
{
public:
	struct FRotator                               Rotator;                                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FRotator                               SwizzledRotation;                                  // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         DeltaTimeX;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         X;                                                 // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Y;                                                 // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Z;                                                 // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ClampX;                                            // 0x002C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ClampY;                                            // 0x0034(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ClampZ;                                            // 0x003C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRot;                                         // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_2;                        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_2;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_3;                     // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_SwizzledRotationInterpolation");
static_assert(sizeof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation) == 0x0000B8, "Wrong size on CharacterFunctionLibrary_C_SwizzledRotationInterpolation");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, Rotator) == 0x000000, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::Rotator' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, SwizzledRotation) == 0x00000C, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::SwizzledRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, DeltaTimeX) == 0x000018, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::DeltaTimeX' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, Speed) == 0x00001C, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::Speed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, X) == 0x000020, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::X' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, Y) == 0x000024, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::Y' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, Z) == 0x000028, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::Z' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, ClampX) == 0x00002C, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::ClampX' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, ClampY) == 0x000034, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::ClampY' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, ClampZ) == 0x00003C, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::ClampZ' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, __WorldContext) == 0x000048, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, TargetRot) == 0x000050, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::TargetRot' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_BreakVector2D_X) == 0x00005C, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_BreakVector2D_Y) == 0x000060, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_BreakVector2D_X_1) == 0x000064, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_BreakVector2D_Y_1) == 0x000068, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_BreakVector2D_X_2) == 0x00006C, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_BreakVector2D_Y_2) == 0x000070, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_FClamp_ReturnValue) == 0x000074, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_RInterpTo_ReturnValue) == 0x000078, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_BreakRotator_Roll) == 0x000084, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_BreakRotator_Pitch) == 0x000088, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_BreakRotator_Yaw) == 0x00008C, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000090, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000094, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_FClamp_ReturnValue_1) == 0x000098, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_FClamp_ReturnValue_2) == 0x00009C, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000A0, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_FClamp_ReturnValue_3) == 0x0000A4, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_SwizzledRotationInterpolation, CallFunc_MakeRotator_ReturnValue) == 0x0000A8, "Member 'CharacterFunctionLibrary_C_SwizzledRotationInterpolation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.MarinerAnimationOnDamage
// 0x0040 (0x0040 - 0x0000)
struct CharacterFunctionLibrary_C_MarinerAnimationOnDamage final
{
public:
	float                                         IncomingDamage;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageStack;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageScale;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DamageCurve;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageAlpha;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_MarinerAnimationOnDamage) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_MarinerAnimationOnDamage");
static_assert(sizeof(CharacterFunctionLibrary_C_MarinerAnimationOnDamage) == 0x000040, "Wrong size on CharacterFunctionLibrary_C_MarinerAnimationOnDamage");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnimationOnDamage, IncomingDamage) == 0x000000, "Member 'CharacterFunctionLibrary_C_MarinerAnimationOnDamage::IncomingDamage' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnimationOnDamage, DamageStack) == 0x000004, "Member 'CharacterFunctionLibrary_C_MarinerAnimationOnDamage::DamageStack' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnimationOnDamage, DamageScale) == 0x000008, "Member 'CharacterFunctionLibrary_C_MarinerAnimationOnDamage::DamageScale' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnimationOnDamage, DamageCurve) == 0x000010, "Member 'CharacterFunctionLibrary_C_MarinerAnimationOnDamage::DamageCurve' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnimationOnDamage, DamageAlpha) == 0x000018, "Member 'CharacterFunctionLibrary_C_MarinerAnimationOnDamage::DamageAlpha' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnimationOnDamage, __WorldContext) == 0x000020, "Member 'CharacterFunctionLibrary_C_MarinerAnimationOnDamage::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnimationOnDamage, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'CharacterFunctionLibrary_C_MarinerAnimationOnDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnimationOnDamage, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'CharacterFunctionLibrary_C_MarinerAnimationOnDamage::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnimationOnDamage, CallFunc_FClamp_ReturnValue) == 0x000030, "Member 'CharacterFunctionLibrary_C_MarinerAnimationOnDamage::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnimationOnDamage, CallFunc_Add_FloatFloat_ReturnValue) == 0x000034, "Member 'CharacterFunctionLibrary_C_MarinerAnimationOnDamage::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnimationOnDamage, CallFunc_GetFloatValue_ReturnValue) == 0x000038, "Member 'CharacterFunctionLibrary_C_MarinerAnimationOnDamage::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.MarinerAnimationDamageUpdate
// 0x0018 (0x0018 - 0x0000)
struct CharacterFunctionLibrary_C_MarinerAnimationDamageUpdate final
{
public:
	float                                         DamageStack;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTimeX;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_MarinerAnimationDamageUpdate) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_MarinerAnimationDamageUpdate");
static_assert(sizeof(CharacterFunctionLibrary_C_MarinerAnimationDamageUpdate) == 0x000018, "Wrong size on CharacterFunctionLibrary_C_MarinerAnimationDamageUpdate");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnimationDamageUpdate, DamageStack) == 0x000000, "Member 'CharacterFunctionLibrary_C_MarinerAnimationDamageUpdate::DamageStack' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnimationDamageUpdate, DeltaTimeX) == 0x000004, "Member 'CharacterFunctionLibrary_C_MarinerAnimationDamageUpdate::DeltaTimeX' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnimationDamageUpdate, __WorldContext) == 0x000008, "Member 'CharacterFunctionLibrary_C_MarinerAnimationDamageUpdate::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MarinerAnimationDamageUpdate, CallFunc_FInterpTo_ReturnValue) == 0x000010, "Member 'CharacterFunctionLibrary_C_MarinerAnimationDamageUpdate::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.MaskLocomotionByVelocity
// 0x0040 (0x0040 - 0x0000)
struct CharacterFunctionLibrary_C_MaskLocomotionByVelocity final
{
public:
	float                                         VelocityLength;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         North;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         South;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         East;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         West;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_MaskLocomotionByVelocity) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_MaskLocomotionByVelocity");
static_assert(sizeof(CharacterFunctionLibrary_C_MaskLocomotionByVelocity) == 0x000040, "Wrong size on CharacterFunctionLibrary_C_MaskLocomotionByVelocity");
static_assert(offsetof(CharacterFunctionLibrary_C_MaskLocomotionByVelocity, VelocityLength) == 0x000000, "Member 'CharacterFunctionLibrary_C_MaskLocomotionByVelocity::VelocityLength' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MaskLocomotionByVelocity, North) == 0x000004, "Member 'CharacterFunctionLibrary_C_MaskLocomotionByVelocity::North' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MaskLocomotionByVelocity, South) == 0x000008, "Member 'CharacterFunctionLibrary_C_MaskLocomotionByVelocity::South' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MaskLocomotionByVelocity, East) == 0x00000C, "Member 'CharacterFunctionLibrary_C_MaskLocomotionByVelocity::East' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MaskLocomotionByVelocity, West) == 0x000010, "Member 'CharacterFunctionLibrary_C_MaskLocomotionByVelocity::West' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MaskLocomotionByVelocity, __WorldContext) == 0x000018, "Member 'CharacterFunctionLibrary_C_MaskLocomotionByVelocity::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MaskLocomotionByVelocity, Alpha) == 0x000020, "Member 'CharacterFunctionLibrary_C_MaskLocomotionByVelocity::Alpha' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MaskLocomotionByVelocity, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'CharacterFunctionLibrary_C_MaskLocomotionByVelocity::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MaskLocomotionByVelocity, CallFunc_FClamp_ReturnValue) == 0x000028, "Member 'CharacterFunctionLibrary_C_MaskLocomotionByVelocity::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MaskLocomotionByVelocity, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'CharacterFunctionLibrary_C_MaskLocomotionByVelocity::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MaskLocomotionByVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000030, "Member 'CharacterFunctionLibrary_C_MaskLocomotionByVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MaskLocomotionByVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000034, "Member 'CharacterFunctionLibrary_C_MaskLocomotionByVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_MaskLocomotionByVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000038, "Member 'CharacterFunctionLibrary_C_MaskLocomotionByVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.AdjustLocomotionSpeedByVelocity
// 0x0030 (0x0030 - 0x0000)
struct CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity final
{
public:
	float                                         LocomotionSpeed;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VelocityLength;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReferenceSpeed;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Min;                                               // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max;                                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterScale;                                    // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity");
static_assert(sizeof(CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity) == 0x000030, "Wrong size on CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity");
static_assert(offsetof(CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity, LocomotionSpeed) == 0x000000, "Member 'CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity::LocomotionSpeed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity, VelocityLength) == 0x000004, "Member 'CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity::VelocityLength' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity, ReferenceSpeed) == 0x000008, "Member 'CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity::ReferenceSpeed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity, Min) == 0x00000C, "Member 'CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity::Min' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity, Max) == 0x000010, "Member 'CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity::Max' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity, CharacterScale) == 0x000014, "Member 'CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity::CharacterScale' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity, __WorldContext) == 0x000018, "Member 'CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity, CallFunc_FClamp_ReturnValue) == 0x000024, "Member 'CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000028, "Member 'CharacterFunctionLibrary_C_AdjustLocomotionSpeedByVelocity::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.Temporary_FixCardinalAndAim
// 0x0018 (0x0018 - 0x0000)
struct CharacterFunctionLibrary_C_Temporary_FixCardinalAndAim final
{
public:
	uint8                                         Direction;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AimYaw;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFalling;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_Temporary_FixCardinalAndAim) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_Temporary_FixCardinalAndAim");
static_assert(sizeof(CharacterFunctionLibrary_C_Temporary_FixCardinalAndAim) == 0x000018, "Wrong size on CharacterFunctionLibrary_C_Temporary_FixCardinalAndAim");
static_assert(offsetof(CharacterFunctionLibrary_C_Temporary_FixCardinalAndAim, Direction) == 0x000000, "Member 'CharacterFunctionLibrary_C_Temporary_FixCardinalAndAim::Direction' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Temporary_FixCardinalAndAim, AimYaw) == 0x000004, "Member 'CharacterFunctionLibrary_C_Temporary_FixCardinalAndAim::AimYaw' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Temporary_FixCardinalAndAim, IsFalling) == 0x000008, "Member 'CharacterFunctionLibrary_C_Temporary_FixCardinalAndAim::IsFalling' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_Temporary_FixCardinalAndAim, __WorldContext) == 0x000010, "Member 'CharacterFunctionLibrary_C_Temporary_FixCardinalAndAim::__WorldContext' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.AnimVelocityAndAcceleration
// 0x00F0 (0x00F0 - 0x0000)
struct CharacterFunctionLibrary_C_AnimVelocityAndAcceleration final
{
public:
	class UCharacterMovementComponent*            MovementComponent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldTransform;                                    // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FVector                                Velocity;                                          // 0x0040(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Acceleration;                                      // 0x004C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AccelerationNormal;                                // 0x0058(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AccelerationNormalRelative;                        // 0x0064(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VelocityNormal;                                    // 0x0070(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VelocityLength;                                    // 0x007C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MAccelerationNormalRelative;                       // 0x0088(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MAccelerationNormal;                               // 0x0094(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MAcceleration;                                     // 0x00A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentAcceleration_ReturnValue;       // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration) == 0x000010, "Wrong alignment on CharacterFunctionLibrary_C_AnimVelocityAndAcceleration");
static_assert(sizeof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration) == 0x0000F0, "Wrong size on CharacterFunctionLibrary_C_AnimVelocityAndAcceleration");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, MovementComponent) == 0x000000, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::MovementComponent' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, WorldTransform) == 0x000010, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::WorldTransform' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, Velocity) == 0x000040, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::Velocity' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, Acceleration) == 0x00004C, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::Acceleration' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, AccelerationNormal) == 0x000058, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::AccelerationNormal' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, AccelerationNormalRelative) == 0x000064, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::AccelerationNormalRelative' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, VelocityNormal) == 0x000070, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::VelocityNormal' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, VelocityLength) == 0x00007C, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::VelocityLength' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, __WorldContext) == 0x000080, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, MAccelerationNormalRelative) == 0x000088, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::MAccelerationNormalRelative' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, MAccelerationNormal) == 0x000094, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::MAccelerationNormal' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, MAcceleration) == 0x0000A0, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::MAcceleration' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, CallFunc_GetCurrentAcceleration_ReturnValue) == 0x0000AC, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::CallFunc_GetCurrentAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, CallFunc_Normal_ReturnValue) == 0x0000B8, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, CallFunc_Normal_ReturnValue_1) == 0x0000C4, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000D0, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, CallFunc_VSize_ReturnValue) == 0x0000DC, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_AnimVelocityAndAcceleration, CallFunc_InverseTransformDirection_ReturnValue) == 0x0000E0, "Member 'CharacterFunctionLibrary_C_AnimVelocityAndAcceleration::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.CalcLaunchRotation
// 0x00B0 (0x00B0 - 0x0000)
struct CharacterFunctionLibrary_C_CalcLaunchRotation final
{
public:
	struct FRotator                               LaunchRotation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	float                                         DeltaTime;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0030(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_CalcLaunchRotation) == 0x000010, "Wrong alignment on CharacterFunctionLibrary_C_CalcLaunchRotation");
static_assert(sizeof(CharacterFunctionLibrary_C_CalcLaunchRotation) == 0x0000B0, "Wrong size on CharacterFunctionLibrary_C_CalcLaunchRotation");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcLaunchRotation, LaunchRotation) == 0x000000, "Member 'CharacterFunctionLibrary_C_CalcLaunchRotation::LaunchRotation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcLaunchRotation, DeltaTime) == 0x00000C, "Member 'CharacterFunctionLibrary_C_CalcLaunchRotation::DeltaTime' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcLaunchRotation, Target) == 0x000010, "Member 'CharacterFunctionLibrary_C_CalcLaunchRotation::Target' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcLaunchRotation, Direction) == 0x000018, "Member 'CharacterFunctionLibrary_C_CalcLaunchRotation::Direction' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcLaunchRotation, __WorldContext) == 0x000028, "Member 'CharacterFunctionLibrary_C_CalcLaunchRotation::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcLaunchRotation, CallFunc_GetTransform_ReturnValue) == 0x000030, "Member 'CharacterFunctionLibrary_C_CalcLaunchRotation::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcLaunchRotation, CallFunc_InverseTransformDirection_ReturnValue) == 0x000060, "Member 'CharacterFunctionLibrary_C_CalcLaunchRotation::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcLaunchRotation, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x00006C, "Member 'CharacterFunctionLibrary_C_CalcLaunchRotation::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcLaunchRotation, CallFunc_BreakRotator_Roll) == 0x000078, "Member 'CharacterFunctionLibrary_C_CalcLaunchRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcLaunchRotation, CallFunc_BreakRotator_Pitch) == 0x00007C, "Member 'CharacterFunctionLibrary_C_CalcLaunchRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcLaunchRotation, CallFunc_BreakRotator_Yaw) == 0x000080, "Member 'CharacterFunctionLibrary_C_CalcLaunchRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcLaunchRotation, CallFunc_MakeRotator_ReturnValue) == 0x000084, "Member 'CharacterFunctionLibrary_C_CalcLaunchRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcLaunchRotation, CallFunc_ComposeRotators_ReturnValue) == 0x000090, "Member 'CharacterFunctionLibrary_C_CalcLaunchRotation::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcLaunchRotation, CallFunc_RInterpTo_ReturnValue) == 0x00009C, "Member 'CharacterFunctionLibrary_C_CalcLaunchRotation::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.CalcFirstPresonFallingRotation
// 0x0080 (0x0080 - 0x0000)
struct CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation final
{
public:
	struct FRotator                               FallingRotator;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FVector                                Velocity;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      Character;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetAimOffsets_ReturnValue;                // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation");
static_assert(sizeof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation) == 0x000080, "Wrong size on CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, FallingRotator) == 0x000000, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::FallingRotator' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, Velocity) == 0x00000C, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::Velocity' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, Character) == 0x000018, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::Character' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, DeltaTime) == 0x000020, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::DeltaTime' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, Speed) == 0x000024, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::Speed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, __WorldContext) == 0x000028, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, CallFunc_BreakVector_X) == 0x000030, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, CallFunc_BreakVector_Y) == 0x000034, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, CallFunc_BreakVector_Z) == 0x000038, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, CallFunc_FClamp_ReturnValue) == 0x00003C, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, CallFunc_MapRangeClamped_ReturnValue) == 0x000040, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, CallFunc_GetAimOffsets_ReturnValue) == 0x000044, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::CallFunc_GetAimOffsets_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, CallFunc_BreakRotator_Roll) == 0x000050, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, CallFunc_BreakRotator_Pitch) == 0x000054, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, CallFunc_BreakRotator_Yaw) == 0x000058, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, CallFunc_Abs_ReturnValue) == 0x00005C, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000060, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000064, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, CallFunc_MakeRotator_ReturnValue) == 0x000068, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation, CallFunc_RInterpTo_ReturnValue) == 0x000074, "Member 'CharacterFunctionLibrary_C_CalcFirstPresonFallingRotation::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetDefaultSkinForCharacter
// 0x0080 (0x0080 - 0x0000)
struct CharacterFunctionLibrary_C_GetDefaultSkinForCharacter final
{
public:
	TSoftClassPtr<class UClass>                   Character;                                         // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarinerSkinCollectionDataAsset*        SkinCollection;                                    // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerGameGlobals*                    CallFunc_GetGameGlobals_ReturnValue;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMarinerPlayableCharacter*>      CallFunc_GetAllPlayableCharactersData_ReturnValue; // 0x0058(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerPlayableCharacter*              CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_SoftClassReference_ReturnValue; // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_GetDefaultSkinForCharacter");
static_assert(sizeof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter) == 0x000080, "Wrong size on CharacterFunctionLibrary_C_GetDefaultSkinForCharacter");
static_assert(offsetof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter, Character) == 0x000000, "Member 'CharacterFunctionLibrary_C_GetDefaultSkinForCharacter::Character' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter, __WorldContext) == 0x000028, "Member 'CharacterFunctionLibrary_C_GetDefaultSkinForCharacter::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter, SkinCollection) == 0x000030, "Member 'CharacterFunctionLibrary_C_GetDefaultSkinForCharacter::SkinCollection' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter, Temp_bool_True_if_break_was_hit_Variable) == 0x000038, "Member 'CharacterFunctionLibrary_C_GetDefaultSkinForCharacter::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'CharacterFunctionLibrary_C_GetDefaultSkinForCharacter::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter, CallFunc_Not_PreBool_ReturnValue) == 0x000040, "Member 'CharacterFunctionLibrary_C_GetDefaultSkinForCharacter::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'CharacterFunctionLibrary_C_GetDefaultSkinForCharacter::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'CharacterFunctionLibrary_C_GetDefaultSkinForCharacter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter, CallFunc_GetGameGlobals_ReturnValue) == 0x000050, "Member 'CharacterFunctionLibrary_C_GetDefaultSkinForCharacter::CallFunc_GetGameGlobals_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter, CallFunc_GetAllPlayableCharactersData_ReturnValue) == 0x000058, "Member 'CharacterFunctionLibrary_C_GetDefaultSkinForCharacter::CallFunc_GetAllPlayableCharactersData_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'CharacterFunctionLibrary_C_GetDefaultSkinForCharacter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter, CallFunc_Array_Get_Item) == 0x000070, "Member 'CharacterFunctionLibrary_C_GetDefaultSkinForCharacter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'CharacterFunctionLibrary_C_GetDefaultSkinForCharacter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter, CallFunc_BooleanAND_ReturnValue) == 0x000079, "Member 'CharacterFunctionLibrary_C_GetDefaultSkinForCharacter::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetDefaultSkinForCharacter, CallFunc_EqualEqual_SoftClassReference_ReturnValue) == 0x00007A, "Member 'CharacterFunctionLibrary_C_GetDefaultSkinForCharacter::CallFunc_EqualEqual_SoftClassReference_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetCharacterNameForPlayerState
// 0x0040 (0x0040 - 0x0000)
struct CharacterFunctionLibrary_C_GetCharacterNameForPlayerState final
{
public:
	class AMarinerPlayerState*                    MarinerPlayerState;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CharacterName;                                     // 0x0010(0x0018)(Parm, OutParm)
	class UMarinerGameGlobals*                    CallFunc_GetGameGlobals_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetPawnClass_ReturnValue;                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarinerPlayableCharacter*              CallFunc_GetCharacterDataByClass_ReturnValue;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_GetCharacterNameForPlayerState) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_GetCharacterNameForPlayerState");
static_assert(sizeof(CharacterFunctionLibrary_C_GetCharacterNameForPlayerState) == 0x000040, "Wrong size on CharacterFunctionLibrary_C_GetCharacterNameForPlayerState");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCharacterNameForPlayerState, MarinerPlayerState) == 0x000000, "Member 'CharacterFunctionLibrary_C_GetCharacterNameForPlayerState::MarinerPlayerState' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCharacterNameForPlayerState, __WorldContext) == 0x000008, "Member 'CharacterFunctionLibrary_C_GetCharacterNameForPlayerState::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCharacterNameForPlayerState, CharacterName) == 0x000010, "Member 'CharacterFunctionLibrary_C_GetCharacterNameForPlayerState::CharacterName' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCharacterNameForPlayerState, CallFunc_GetGameGlobals_ReturnValue) == 0x000028, "Member 'CharacterFunctionLibrary_C_GetCharacterNameForPlayerState::CallFunc_GetGameGlobals_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCharacterNameForPlayerState, CallFunc_GetPawnClass_ReturnValue) == 0x000030, "Member 'CharacterFunctionLibrary_C_GetCharacterNameForPlayerState::CallFunc_GetPawnClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetCharacterNameForPlayerState, CallFunc_GetCharacterDataByClass_ReturnValue) == 0x000038, "Member 'CharacterFunctionLibrary_C_GetCharacterNameForPlayerState::CallFunc_GetCharacterDataByClass_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetSelectedCharacterNameForPlayerState
// 0x0068 (0x0068 - 0x0000)
struct CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState final
{
public:
	class AMarinerPlayerState*                    MarinerPlayerState;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CharacterName;                                     // 0x0010(0x0018)(Parm, OutParm)
	TSoftClassPtr<class UClass>                   CallFunc_GetSelectedCharacter_ReturnValue;         // 0x0028(0x0028)(ConstParm, HasGetValueTypeHash)
	class UMarinerGameGlobals*                    CallFunc_GetGameGlobals_ReturnValue;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarinerPlayableCharacter*              CallFunc_GetCharacterDataBySoftClass_ReturnValue;  // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState");
static_assert(sizeof(CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState) == 0x000068, "Wrong size on CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState, MarinerPlayerState) == 0x000000, "Member 'CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState::MarinerPlayerState' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState, __WorldContext) == 0x000008, "Member 'CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState, CharacterName) == 0x000010, "Member 'CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState::CharacterName' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState, CallFunc_GetSelectedCharacter_ReturnValue) == 0x000028, "Member 'CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState::CallFunc_GetSelectedCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState, CallFunc_GetGameGlobals_ReturnValue) == 0x000050, "Member 'CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState::CallFunc_GetGameGlobals_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState, CallFunc_GetCharacterDataBySoftClass_ReturnValue) == 0x000058, "Member 'CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState::CallFunc_GetCharacterDataBySoftClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'CharacterFunctionLibrary_C_GetSelectedCharacterNameForPlayerState::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.CalcTurnInPlace
// 0x0010 (0x0010 - 0x0000)
struct CharacterFunctionLibrary_C_CalcTurnInPlace final
{
public:
	bool                                          IsMoving;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_CalcTurnInPlace) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_CalcTurnInPlace");
static_assert(sizeof(CharacterFunctionLibrary_C_CalcTurnInPlace) == 0x000010, "Wrong size on CharacterFunctionLibrary_C_CalcTurnInPlace");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcTurnInPlace, IsMoving) == 0x000000, "Member 'CharacterFunctionLibrary_C_CalcTurnInPlace::IsMoving' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_CalcTurnInPlace, __WorldContext) == 0x000008, "Member 'CharacterFunctionLibrary_C_CalcTurnInPlace::__WorldContext' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetAnimStanceTuning
// 0x0020 (0x0020 - 0x0000)
struct CharacterFunctionLibrary_C_GetAnimStanceTuning final
{
public:
	float                                         DefaultStance;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StaggerStance;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TumbleStance;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmashedStance;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchedStance;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_GetAnimStanceTuning) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_GetAnimStanceTuning");
static_assert(sizeof(CharacterFunctionLibrary_C_GetAnimStanceTuning) == 0x000020, "Wrong size on CharacterFunctionLibrary_C_GetAnimStanceTuning");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAnimStanceTuning, DefaultStance) == 0x000000, "Member 'CharacterFunctionLibrary_C_GetAnimStanceTuning::DefaultStance' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAnimStanceTuning, StaggerStance) == 0x000004, "Member 'CharacterFunctionLibrary_C_GetAnimStanceTuning::StaggerStance' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAnimStanceTuning, TumbleStance) == 0x000008, "Member 'CharacterFunctionLibrary_C_GetAnimStanceTuning::TumbleStance' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAnimStanceTuning, SmashedStance) == 0x00000C, "Member 'CharacterFunctionLibrary_C_GetAnimStanceTuning::SmashedStance' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAnimStanceTuning, LaunchedStance) == 0x000010, "Member 'CharacterFunctionLibrary_C_GetAnimStanceTuning::LaunchedStance' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetAnimStanceTuning, __WorldContext) == 0x000018, "Member 'CharacterFunctionLibrary_C_GetAnimStanceTuning::__WorldContext' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetFastestExpectedProjectileSpeed
// 0x0028 (0x0028 - 0x0000)
struct CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerGameGlobals*                    CallFunc_GetGameGlobals_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameGlobals_C*                         K2Node_DynamicCast_AsGame_Globals;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed");
static_assert(sizeof(CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed) == 0x000028, "Wrong size on CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed");
static_assert(offsetof(CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed, __WorldContext) == 0x000000, "Member 'CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed, Speed) == 0x000008, "Member 'CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed::Speed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed, CallFunc_GetGameGlobals_ReturnValue) == 0x000010, "Member 'CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed::CallFunc_GetGameGlobals_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed, K2Node_DynamicCast_AsGame_Globals) == 0x000018, "Member 'CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed::K2Node_DynamicCast_AsGame_Globals' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'CharacterFunctionLibrary_C_GetFastestExpectedProjectileSpeed::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetWidestExpectedProjectileSphereRadius
// 0x0028 (0x0028 - 0x0000)
struct CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerGameGlobals*                    CallFunc_GetGameGlobals_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameGlobals_C*                         K2Node_DynamicCast_AsGame_Globals;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius");
static_assert(sizeof(CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius) == 0x000028, "Wrong size on CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius, __WorldContext) == 0x000000, "Member 'CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius, Radius) == 0x000008, "Member 'CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius::Radius' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius, CallFunc_GetGameGlobals_ReturnValue) == 0x000010, "Member 'CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius::CallFunc_GetGameGlobals_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius, K2Node_DynamicCast_AsGame_Globals) == 0x000018, "Member 'CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius::K2Node_DynamicCast_AsGame_Globals' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'CharacterFunctionLibrary_C_GetWidestExpectedProjectileSphereRadius::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetFurthestExpectedProjectileDistance
// 0x0020 (0x0020 - 0x0000)
struct CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFastestExpectedProjectileSpeed_Speed;  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance");
static_assert(sizeof(CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance) == 0x000020, "Wrong size on CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance");
static_assert(offsetof(CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance, Time) == 0x000000, "Member 'CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance::Time' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance, __WorldContext) == 0x000008, "Member 'CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance, Distance) == 0x000010, "Member 'CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance::Distance' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance, CallFunc_GetFastestExpectedProjectileSpeed_Speed) == 0x000014, "Member 'CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance::CallFunc_GetFastestExpectedProjectileSpeed_Speed' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetFurthestExpectedProjectileDistance_ServerFrame
// 0x0010 (0x0010 - 0x0000)
struct CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance_ServerFrame final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFurthestExpectedProjectileDistance_Distance; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance_ServerFrame) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance_ServerFrame");
static_assert(sizeof(CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance_ServerFrame) == 0x000010, "Wrong size on CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance_ServerFrame");
static_assert(offsetof(CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance_ServerFrame, __WorldContext) == 0x000000, "Member 'CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance_ServerFrame::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance_ServerFrame, Distance) == 0x000008, "Member 'CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance_ServerFrame::Distance' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance_ServerFrame, CallFunc_GetFurthestExpectedProjectileDistance_Distance) == 0x00000C, "Member 'CharacterFunctionLibrary_C_GetFurthestExpectedProjectileDistance_ServerFrame::CallFunc_GetFurthestExpectedProjectileDistance_Distance' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetProjectileFurthest1ServerFrameDistPlusMaxRadius
// 0x0018 (0x0018 - 0x0000)
struct CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFurthestExpectedProjectileDistance_ServerFrame_Distance; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWidestExpectedProjectileSphereRadius_Radius; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius");
static_assert(sizeof(CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius) == 0x000018, "Wrong size on CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius");
static_assert(offsetof(CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius, __WorldContext) == 0x000000, "Member 'CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius, Distance) == 0x000008, "Member 'CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius::Distance' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius, CallFunc_GetFurthestExpectedProjectileDistance_ServerFrame_Distance) == 0x00000C, "Member 'CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius::CallFunc_GetFurthestExpectedProjectileDistance_ServerFrame_Distance' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius, CallFunc_GetWidestExpectedProjectileSphereRadius_Radius) == 0x000010, "Member 'CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius::CallFunc_GetWidestExpectedProjectileSphereRadius_Radius' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'CharacterFunctionLibrary_C_GetProjectileFurthest1ServerFrameDistPlusMaxRadius::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetSimplePredictedPawnLocationInTime
// 0x0060 (0x0060 - 0x0000)
struct CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime final
{
public:
	class APawn*                                  PawnToPredict;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToPredictAhead;                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PredictedLocation;                                 // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue_1;       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime");
static_assert(sizeof(CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime) == 0x000060, "Wrong size on CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime, PawnToPredict) == 0x000000, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime::PawnToPredict' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime, TimeToPredictAhead) == 0x000008, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime::TimeToPredictAhead' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime, __WorldContext) == 0x000010, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime, PredictedLocation) == 0x000018, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime::PredictedLocation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime, CallFunc_GetMovementComponent_ReturnValue) == 0x000028, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000034, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime, CallFunc_GetMovementComponent_ReturnValue_1) == 0x000040, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime::CallFunc_GetMovementComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000048, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime, CallFunc_Add_VectorVector_ReturnValue) == 0x000054, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedPawnLocationInTime::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.GetSimplePredictedProjectileLocationInTime
// 0x0050 (0x0050 - 0x0000)
struct CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime final
{
public:
	class AMarinerProjectile*                     ProjectileToPredict;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToPredictAhead;                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PredictedLocation;                                 // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime");
static_assert(sizeof(CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime) == 0x000050, "Wrong size on CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime, ProjectileToPredict) == 0x000000, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime::ProjectileToPredict' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime, TimeToPredictAhead) == 0x000008, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime::TimeToPredictAhead' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime, __WorldContext) == 0x000010, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime, PredictedLocation) == 0x000018, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime::PredictedLocation' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime, CallFunc_IsValid_ReturnValue_1) == 0x000034, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000038, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime, CallFunc_Add_VectorVector_ReturnValue) == 0x000044, "Member 'CharacterFunctionLibrary_C_GetSimplePredictedProjectileLocationInTime::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function CharacterFunctionLibrary.CharacterFunctionLibrary_C.IsHitStunned
// 0x0018 (0x0018 - 0x0000)
struct CharacterFunctionLibrary_C_IsHitStunned final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitStunned;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHitStunned_ReturnValue;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterFunctionLibrary_C_IsHitStunned) == 0x000008, "Wrong alignment on CharacterFunctionLibrary_C_IsHitStunned");
static_assert(sizeof(CharacterFunctionLibrary_C_IsHitStunned) == 0x000018, "Wrong size on CharacterFunctionLibrary_C_IsHitStunned");
static_assert(offsetof(CharacterFunctionLibrary_C_IsHitStunned, Character) == 0x000000, "Member 'CharacterFunctionLibrary_C_IsHitStunned::Character' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_IsHitStunned, __WorldContext) == 0x000008, "Member 'CharacterFunctionLibrary_C_IsHitStunned::__WorldContext' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_IsHitStunned, HitStunned) == 0x000010, "Member 'CharacterFunctionLibrary_C_IsHitStunned::HitStunned' has a wrong offset!");
static_assert(offsetof(CharacterFunctionLibrary_C_IsHitStunned, CallFunc_IsHitStunned_ReturnValue) == 0x000011, "Member 'CharacterFunctionLibrary_C_IsHitStunned::CallFunc_IsHitStunned_ReturnValue' has a wrong offset!");

}

