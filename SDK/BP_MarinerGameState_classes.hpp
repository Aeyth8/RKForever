#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MarinerGameState

#include "Basic.hpp"

#include "OnRoundTransitionPayload_structs.hpp"
#include "OnPreroundCountdownPayload_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ExtraTimeStates_structs.hpp"
#include "Mariner_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MarinerGameState.BP_MarinerGameState_C
// 0x0168 (0x0A28 - 0x08C0)
class ABP_MarinerGameState_C : public AMarinerGameState
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x08C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	UMulticastInlineDelegateProperty_             OnPreroundCountdownChange;                         // 0x08D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         PreroundTimerRemainingTime;                        // 0x08E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2251[0x4];                                     // 0x08E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           PreroundStartTimerHandle;                          // 0x08E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         PreroundTimerMaxTimeToSendUpdates;                 // 0x08F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2252[0x4];                                     // 0x08F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnOvertimeUIBegin;                                 // 0x08F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsInOvertimeTransition;                            // 0x0908(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsInExtraTime;                                     // 0x0909(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ExtraTimeStates                               ExtraTimeState;                                    // 0x090A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2253[0x1];                                     // 0x090B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtraTimeDefaultGraceTime;                         // 0x090C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExtraTimeTimerActive;                            // 0x0910(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2254[0x3];                                     // 0x0911(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtraTimeTimerLength;                              // 0x0914(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastInlineDelegateProperty_             OnExtraTimeChange;                                 // 0x0918(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastInlineDelegateProperty_             OnExtraTimeTimerChange;                            // 0x0928(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastInlineDelegateProperty_             OnClearMiniObjectiveText;                          // 0x0938(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         PreroundMaxTimeToShow;                             // 0x0948(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreroundStartOfGameCountdownLength;                // 0x094C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastInlineDelegateProperty_             OnRoundTransitionChange;                           // 0x0950(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FOnPreroundCountdownPayload            UpdatePreroundCountdownPayload;                    // 0x0960(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2255[0x4];                                     // 0x096C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HitchTimer;                                        // 0x0970(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, struct FVector>           DebugActorLocationMap;                             // 0x0978(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<class FString, struct FRotator>          DebugActorRotationMap;                             // 0x09C8(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FRotator                               LocalActorRotation;                                // 0x0A18(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FOnRoundTransitionPayload              OnRoundTransitionPayload;                          // 0x0A24(0x0002)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableItemArtifacts;                              // 0x0A26(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DisableNonIndependentCharacterGameModePins;        // 0x0A27(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnPreroundCountdownChange__DelegateSignature(int32 TimeLeft, int32 MaxTimeToShow, bool ShouldEnable);
	void OnOvertimeUIBegin__DelegateSignature();
	void OnExtraTimeChange__DelegateSignature(bool Param_IsInExtraTime, ExtraTimeStates Param_ExtraTimeState);
	void OnExtraTimeTimerChange__DelegateSignature(float TimerLength);
	void OnClearMiniObjectiveText__DelegateSignature();
	void OnRoundTransitionChange__DelegateSignature(bool IsEnabled);
	void ExecuteUbergraph_BP_MarinerGameState(int32 EntryPoint);
	void DebugSetActorRotationOnClientWithRotator(const class FString& ID, float Pitch, float Yaw, float Roll);
	void DebugSetActorRotation(const class FString& ID, float Pitch, float Yaw, float Roll);
	void DebugSetActorLocation(const class FString& ID, float X, float Y, float Z);
	void DebugSetActorRotationOnClient(const class FString& ID);
	void DebugSaveClientControlRotation(const class FString& ID);
	void DebugSaveActorLocation(const class FString& ID);
	void DebugMoveActorToSavedLocation(const class FString& ID);
	void MulticastDisableDebugHitching();
	void MulticastEnableDebugHitching();
	void DisableDebugHitching();
	void EnableDebugHitching();
	void HitchLoop();
	void OnExtraTimeChange_Event(bool Param_IsInExtraTime, ExtraTimeStates Param_ExtraTimeState);
	void MulticastClearMiniObjectiveText();
	void MulticastEnableExtraTimeTimer(bool IsEnabled, float TimerLength);
	void MulticastSetExtraTime(bool Param_IsInExtraTime, ExtraTimeStates Param_ExtraTimeState);
	void ServerSetExtraTime(bool Param_IsInExtraTime, ExtraTimeStates Param_ExtraTimeState);
	void DisplayOvertimeUI();
	void OnMaxPreroundTimerSet();
	void FinishPreroundCountdownTimer();
	void PreroundTimerUpdate();
	void PreroundCountdownTimerBind(float PreRoundCountdownEndTimeStamp);
	void ReceiveBeginPlay();
	void ServerEnablePreroundCountdown(float TimerLength, int32 MaxNumberToShow, bool ShouldEnable);
	void OnRep_IsInOvertimeTransition();
	void OnRep_IsInRoundTransition();
	void OnRep_UpdatePreroundCountdownPayload();
	void SetUpdatePreroundCountdownPayload(int32 TimeLeft, int32 MaxTimeToShow, bool bShouldEnable);
	void SetRoundTransition(bool bIsRoundTransition);
	void OnRep_OnRoundTransitionPayload();

	void IsRoundTransition(bool* bIsInRoundTransition) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MarinerGameState_C">();
	}
	static class ABP_MarinerGameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MarinerGameState_C>();
	}
};
static_assert(alignof(ABP_MarinerGameState_C) == 0x000008, "Wrong alignment on ABP_MarinerGameState_C");
static_assert(sizeof(ABP_MarinerGameState_C) == 0x000A28, "Wrong size on ABP_MarinerGameState_C");
static_assert(offsetof(ABP_MarinerGameState_C, UberGraphFrame) == 0x0008C0, "Member 'ABP_MarinerGameState_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, DefaultSceneRoot) == 0x0008C8, "Member 'ABP_MarinerGameState_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, OnPreroundCountdownChange) == 0x0008D0, "Member 'ABP_MarinerGameState_C::OnPreroundCountdownChange' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, PreroundTimerRemainingTime) == 0x0008E0, "Member 'ABP_MarinerGameState_C::PreroundTimerRemainingTime' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, PreroundStartTimerHandle) == 0x0008E8, "Member 'ABP_MarinerGameState_C::PreroundStartTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, PreroundTimerMaxTimeToSendUpdates) == 0x0008F0, "Member 'ABP_MarinerGameState_C::PreroundTimerMaxTimeToSendUpdates' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, OnOvertimeUIBegin) == 0x0008F8, "Member 'ABP_MarinerGameState_C::OnOvertimeUIBegin' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, IsInOvertimeTransition) == 0x000908, "Member 'ABP_MarinerGameState_C::IsInOvertimeTransition' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, IsInExtraTime) == 0x000909, "Member 'ABP_MarinerGameState_C::IsInExtraTime' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, ExtraTimeState) == 0x00090A, "Member 'ABP_MarinerGameState_C::ExtraTimeState' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, ExtraTimeDefaultGraceTime) == 0x00090C, "Member 'ABP_MarinerGameState_C::ExtraTimeDefaultGraceTime' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, IsExtraTimeTimerActive) == 0x000910, "Member 'ABP_MarinerGameState_C::IsExtraTimeTimerActive' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, ExtraTimeTimerLength) == 0x000914, "Member 'ABP_MarinerGameState_C::ExtraTimeTimerLength' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, OnExtraTimeChange) == 0x000918, "Member 'ABP_MarinerGameState_C::OnExtraTimeChange' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, OnExtraTimeTimerChange) == 0x000928, "Member 'ABP_MarinerGameState_C::OnExtraTimeTimerChange' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, OnClearMiniObjectiveText) == 0x000938, "Member 'ABP_MarinerGameState_C::OnClearMiniObjectiveText' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, PreroundMaxTimeToShow) == 0x000948, "Member 'ABP_MarinerGameState_C::PreroundMaxTimeToShow' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, PreroundStartOfGameCountdownLength) == 0x00094C, "Member 'ABP_MarinerGameState_C::PreroundStartOfGameCountdownLength' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, OnRoundTransitionChange) == 0x000950, "Member 'ABP_MarinerGameState_C::OnRoundTransitionChange' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, UpdatePreroundCountdownPayload) == 0x000960, "Member 'ABP_MarinerGameState_C::UpdatePreroundCountdownPayload' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, HitchTimer) == 0x000970, "Member 'ABP_MarinerGameState_C::HitchTimer' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, DebugActorLocationMap) == 0x000978, "Member 'ABP_MarinerGameState_C::DebugActorLocationMap' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, DebugActorRotationMap) == 0x0009C8, "Member 'ABP_MarinerGameState_C::DebugActorRotationMap' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, LocalActorRotation) == 0x000A18, "Member 'ABP_MarinerGameState_C::LocalActorRotation' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, OnRoundTransitionPayload) == 0x000A24, "Member 'ABP_MarinerGameState_C::OnRoundTransitionPayload' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, DisableItemArtifacts) == 0x000A26, "Member 'ABP_MarinerGameState_C::DisableItemArtifacts' has a wrong offset!");
static_assert(offsetof(ABP_MarinerGameState_C, DisableNonIndependentCharacterGameModePins) == 0x000A27, "Member 'ABP_MarinerGameState_C::DisableNonIndependentCharacterGameModePins' has a wrong offset!");

}

