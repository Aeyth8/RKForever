#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MarinerTrialsGameState

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_MarinerTrialsGameState.BP_MarinerTrialsGameState_C.OnPreroundCountdownChange__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_MarinerTrialsGameState_C_OnPreroundCountdownChange__DelegateSignature final
{
public:
	int32                                         TimeLeft;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldEnable;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarinerTrialsGameState_C_OnPreroundCountdownChange__DelegateSignature) == 0x000004, "Wrong alignment on BP_MarinerTrialsGameState_C_OnPreroundCountdownChange__DelegateSignature");
static_assert(sizeof(BP_MarinerTrialsGameState_C_OnPreroundCountdownChange__DelegateSignature) == 0x000008, "Wrong size on BP_MarinerTrialsGameState_C_OnPreroundCountdownChange__DelegateSignature");
static_assert(offsetof(BP_MarinerTrialsGameState_C_OnPreroundCountdownChange__DelegateSignature, TimeLeft) == 0x000000, "Member 'BP_MarinerTrialsGameState_C_OnPreroundCountdownChange__DelegateSignature::TimeLeft' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_OnPreroundCountdownChange__DelegateSignature, ShouldEnable) == 0x000004, "Member 'BP_MarinerTrialsGameState_C_OnPreroundCountdownChange__DelegateSignature::ShouldEnable' has a wrong offset!");

// Function BP_MarinerTrialsGameState.BP_MarinerTrialsGameState_C.ExecuteUbergraph_BP_MarinerTrialsGameState
// 0x00D8 (0x00D8 - 0x0000)
struct BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2594[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2595[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_CustomEvent_TimerLength;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_ShouldEnable;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2596[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_PreRoundCountdownEndTimeStamp;  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetServerWorldTimeSeconds_ReturnValue;    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0050(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2597[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0068(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_2;        // 0x0070(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue; // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2598[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_3;        // 0x0088(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2599[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Round_ReturnValue_1;                      // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue_1; // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x009C(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_4;        // 0x00B0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259A[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Round_ReturnValue_2;                      // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_5;        // 0x00C0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_6;        // 0x00C8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsPaused;                       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState) == 0x000008, "Wrong alignment on BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState");
static_assert(sizeof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState) == 0x0000D8, "Wrong size on BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, EntryPoint) == 0x000000, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000004, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000005, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_Round_ReturnValue) == 0x000008, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, K2Node_CustomEvent_TimerLength) == 0x000020, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::K2Node_CustomEvent_TimerLength' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, K2Node_CustomEvent_ShouldEnable) == 0x000024, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::K2Node_CustomEvent_ShouldEnable' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, K2Node_CreateDelegate_OutputDelegate_1) == 0x000028, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000038, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, K2Node_CustomEvent_PreRoundCountdownEndTimeStamp) == 0x000040, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::K2Node_CustomEvent_PreRoundCountdownEndTimeStamp' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_GetServerWorldTimeSeconds_ReturnValue) == 0x000044, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_GetServerWorldTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000048, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, K2Node_CreateDelegate_OutputDelegate_2) == 0x000050, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000060, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000068, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_K2_SetTimerDelegate_ReturnValue_2) == 0x000070, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_K2_SetTimerDelegate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue) == 0x000078, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_Percent_FloatFloat_ReturnValue) == 0x00007C, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000080, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_K2_SetTimerDelegate_ReturnValue_3) == 0x000088, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_K2_SetTimerDelegate_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000090, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_Round_ReturnValue_1) == 0x000094, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_Round_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue_1) == 0x000098, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, K2Node_CreateDelegate_OutputDelegate_3) == 0x00009C, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x0000AC, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_K2_SetTimerDelegate_ReturnValue_4) == 0x0000B0, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_K2_SetTimerDelegate_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0000B8, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_Round_ReturnValue_2) == 0x0000BC, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_Round_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_K2_SetTimerDelegate_ReturnValue_5) == 0x0000C0, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_K2_SetTimerDelegate_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, CallFunc_K2_SetTimerDelegate_ReturnValue_6) == 0x0000C8, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::CallFunc_K2_SetTimerDelegate_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState, K2Node_CustomEvent_IsPaused) == 0x0000D0, "Member 'BP_MarinerTrialsGameState_C_ExecuteUbergraph_BP_MarinerTrialsGameState::K2Node_CustomEvent_IsPaused' has a wrong offset!");

// Function BP_MarinerTrialsGameState.BP_MarinerTrialsGameState_C.PauseTrialsGameTimer
// 0x0001 (0x0001 - 0x0000)
struct BP_MarinerTrialsGameState_C_PauseTrialsGameTimer final
{
public:
	bool                                          IsPaused;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarinerTrialsGameState_C_PauseTrialsGameTimer) == 0x000001, "Wrong alignment on BP_MarinerTrialsGameState_C_PauseTrialsGameTimer");
static_assert(sizeof(BP_MarinerTrialsGameState_C_PauseTrialsGameTimer) == 0x000001, "Wrong size on BP_MarinerTrialsGameState_C_PauseTrialsGameTimer");
static_assert(offsetof(BP_MarinerTrialsGameState_C_PauseTrialsGameTimer, IsPaused) == 0x000000, "Member 'BP_MarinerTrialsGameState_C_PauseTrialsGameTimer::IsPaused' has a wrong offset!");

// Function BP_MarinerTrialsGameState.BP_MarinerTrialsGameState_C.OnPreroundCountdownSet
// 0x0004 (0x0004 - 0x0000)
struct BP_MarinerTrialsGameState_C_OnPreroundCountdownSet final
{
public:
	float                                         PreRoundCountdownEndTimeStamp;                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MarinerTrialsGameState_C_OnPreroundCountdownSet) == 0x000004, "Wrong alignment on BP_MarinerTrialsGameState_C_OnPreroundCountdownSet");
static_assert(sizeof(BP_MarinerTrialsGameState_C_OnPreroundCountdownSet) == 0x000004, "Wrong size on BP_MarinerTrialsGameState_C_OnPreroundCountdownSet");
static_assert(offsetof(BP_MarinerTrialsGameState_C_OnPreroundCountdownSet, PreRoundCountdownEndTimeStamp) == 0x000000, "Member 'BP_MarinerTrialsGameState_C_OnPreroundCountdownSet::PreRoundCountdownEndTimeStamp' has a wrong offset!");

// Function BP_MarinerTrialsGameState.BP_MarinerTrialsGameState_C.EnablePreroundCountdown
// 0x0008 (0x0008 - 0x0000)
struct BP_MarinerTrialsGameState_C_EnablePreroundCountdown final
{
public:
	float                                         TimerLength;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldEnable;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarinerTrialsGameState_C_EnablePreroundCountdown) == 0x000004, "Wrong alignment on BP_MarinerTrialsGameState_C_EnablePreroundCountdown");
static_assert(sizeof(BP_MarinerTrialsGameState_C_EnablePreroundCountdown) == 0x000008, "Wrong size on BP_MarinerTrialsGameState_C_EnablePreroundCountdown");
static_assert(offsetof(BP_MarinerTrialsGameState_C_EnablePreroundCountdown, TimerLength) == 0x000000, "Member 'BP_MarinerTrialsGameState_C_EnablePreroundCountdown::TimerLength' has a wrong offset!");
static_assert(offsetof(BP_MarinerTrialsGameState_C_EnablePreroundCountdown, ShouldEnable) == 0x000004, "Member 'BP_MarinerTrialsGameState_C_EnablePreroundCountdown::ShouldEnable' has a wrong offset!");

}

