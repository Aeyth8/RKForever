#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Item_NinjaHeadband_ItemAbility

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function Item_NinjaHeadband_ItemAbility.Item_NinjaHeadband_ItemAbility_C.ExecuteUbergraph_Item_NinjaHeadband_ItemAbility
// 0x0188 (0x0188 - 0x0000)
struct Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(TSubclassOf<class UGameplayEffect> GameplayEffect, class AMarinerCharacter* Character, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class AMarinerCharacter* Character)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(TSubclassOf<class UGameplayEffect> GameplayEffect, class AMarinerCharacter* Character, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarinerAbilitySystemComponent*         CallFunc_GetOwningAbilitySystemComponent_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_1; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_CustomEvent_GameplayEffect_1;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      K2Node_CustomEvent_Character_2;                    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_PriorGameplayEffectCount_1;     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_GameplayEffectLevel_1;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarinerCharacterMovement*              CallFunc_GetMarinerMovement_ReturnValue;           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityActorInfo              K2Node_Event_ActorInfo_1;                          // 0x0070(0x0040)(ContainsInstancedReference)
	class AMarinerCharacter*                      CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_2; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ICharacterAbilityInterface_C> K2Node_DynamicCast_AsCharacter_Ability_Interface;  // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x00CC(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActorInfo              K2Node_Event_ActorInfo;                            // 0x00E0(0x0040)(ContainsInstancedReference)
	class AMarinerCharacter*                      CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_3; // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_CustomEvent_GameplayEffect;                 // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      K2Node_CustomEvent_Character_1;                    // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_PriorGameplayEffectCount;       // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_GameplayEffectLevel;            // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerAbilitySystemComponent*         CallFunc_GetOwningAbilitySystemComponent_ReturnValue_1; // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue_1;      // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPredictedGameplayEffectCount_OutBaseCount; // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPredictedGameplayEffectCount_OutPendingApply; // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPredictedGameplayEffectCount_OutPendingRemove; // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeSeconds_ReturnValue;               // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_4; // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      K2Node_CustomEvent_Character;                      // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility) == 0x000008, "Wrong alignment on Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility");
static_assert(sizeof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility) == 0x000188, "Wrong size on Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, EntryPoint) == 0x000000, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::EntryPoint' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue) == 0x000038, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_GetOwningAbilitySystemComponent_ReturnValue) == 0x000040, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_GetOwningAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_1) == 0x000048, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_CustomEvent_GameplayEffect_1) == 0x000050, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_CustomEvent_GameplayEffect_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_CustomEvent_Character_2) == 0x000058, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_CustomEvent_Character_2' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_CustomEvent_PriorGameplayEffectCount_1) == 0x000060, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_CustomEvent_PriorGameplayEffectCount_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_CustomEvent_GameplayEffectLevel_1) == 0x000064, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_CustomEvent_GameplayEffectLevel_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_GetMarinerMovement_ReturnValue) == 0x000068, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_GetMarinerMovement_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_Event_ActorInfo_1) == 0x000070, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_Event_ActorInfo_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_2) == 0x0000B0, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_DynamicCast_AsCharacter_Ability_Interface) == 0x0000B8, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_DynamicCast_AsCharacter_Ability_Interface' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000CC, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_Event_ActorInfo) == 0x0000E0, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_Event_ActorInfo' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_3) == 0x000120, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_CustomEvent_GameplayEffect) == 0x000128, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_CustomEvent_GameplayEffect' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_CustomEvent_Character_1) == 0x000130, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_CustomEvent_Character_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_CustomEvent_PriorGameplayEffectCount) == 0x000138, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_CustomEvent_PriorGameplayEffectCount' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_CustomEvent_GameplayEffectLevel) == 0x00013C, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_CustomEvent_GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000140, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_GetOwningAbilitySystemComponent_ReturnValue_1) == 0x000148, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_GetOwningAbilitySystemComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_EqualEqual_ClassClass_ReturnValue_1) == 0x000150, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_EqualEqual_ClassClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_GetPredictedGameplayEffectCount_OutBaseCount) == 0x000154, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_GetPredictedGameplayEffectCount_OutBaseCount' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_GetPredictedGameplayEffectCount_OutPendingApply) == 0x000158, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_GetPredictedGameplayEffectCount_OutPendingApply' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_GetPredictedGameplayEffectCount_OutPendingRemove) == 0x00015C, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_GetPredictedGameplayEffectCount_OutPendingRemove' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_GetTimeSeconds_ReturnValue) == 0x000160, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_Add_IntInt_ReturnValue) == 0x000164, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_Subtract_IntInt_ReturnValue) == 0x000168, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_Greater_IntInt_ReturnValue) == 0x00016C, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_4) == 0x000170, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, K2Node_CustomEvent_Character) == 0x000178, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::K2Node_CustomEvent_Character' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility, CallFunc_IsValid_ReturnValue) == 0x000180, "Member 'Item_NinjaHeadband_ItemAbility_C_ExecuteUbergraph_Item_NinjaHeadband_ItemAbility::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Item_NinjaHeadband_ItemAbility.Item_NinjaHeadband_ItemAbility_C.OnCharacterDisabledDelegate_Event_0
// 0x0008 (0x0008 - 0x0000)
struct Item_NinjaHeadband_ItemAbility_C_OnCharacterDisabledDelegate_Event_0 final
{
public:
	class AMarinerCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Item_NinjaHeadband_ItemAbility_C_OnCharacterDisabledDelegate_Event_0) == 0x000008, "Wrong alignment on Item_NinjaHeadband_ItemAbility_C_OnCharacterDisabledDelegate_Event_0");
static_assert(sizeof(Item_NinjaHeadband_ItemAbility_C_OnCharacterDisabledDelegate_Event_0) == 0x000008, "Wrong size on Item_NinjaHeadband_ItemAbility_C_OnCharacterDisabledDelegate_Event_0");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_OnCharacterDisabledDelegate_Event_0, Character) == 0x000000, "Member 'Item_NinjaHeadband_ItemAbility_C_OnCharacterDisabledDelegate_Event_0::Character' has a wrong offset!");

// Function Item_NinjaHeadband_ItemAbility.Item_NinjaHeadband_ItemAbility_C.OnMoveAffectingGameplayEffectAppliedDelegate_Event_0
// 0x0018 (0x0018 - 0x0000)
struct Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectAppliedDelegate_Event_0 final
{
public:
	class UClass*                                 GameplayEffect;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      Character;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PriorGameplayEffectCount;                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GameplayEffectLevel;                               // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectAppliedDelegate_Event_0) == 0x000008, "Wrong alignment on Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectAppliedDelegate_Event_0");
static_assert(sizeof(Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectAppliedDelegate_Event_0) == 0x000018, "Wrong size on Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectAppliedDelegate_Event_0");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectAppliedDelegate_Event_0, GameplayEffect) == 0x000000, "Member 'Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectAppliedDelegate_Event_0::GameplayEffect' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectAppliedDelegate_Event_0, Character) == 0x000008, "Member 'Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectAppliedDelegate_Event_0::Character' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectAppliedDelegate_Event_0, PriorGameplayEffectCount) == 0x000010, "Member 'Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectAppliedDelegate_Event_0::PriorGameplayEffectCount' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectAppliedDelegate_Event_0, GameplayEffectLevel) == 0x000014, "Member 'Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectAppliedDelegate_Event_0::GameplayEffectLevel' has a wrong offset!");

// Function Item_NinjaHeadband_ItemAbility.Item_NinjaHeadband_ItemAbility_C.BP_OnAbilityActivated
// 0x0040 (0x0040 - 0x0000)
struct Item_NinjaHeadband_ItemAbility_C_BP_OnAbilityActivated final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(Item_NinjaHeadband_ItemAbility_C_BP_OnAbilityActivated) == 0x000008, "Wrong alignment on Item_NinjaHeadband_ItemAbility_C_BP_OnAbilityActivated");
static_assert(sizeof(Item_NinjaHeadband_ItemAbility_C_BP_OnAbilityActivated) == 0x000040, "Wrong size on Item_NinjaHeadband_ItemAbility_C_BP_OnAbilityActivated");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_BP_OnAbilityActivated, ActorInfo) == 0x000000, "Member 'Item_NinjaHeadband_ItemAbility_C_BP_OnAbilityActivated::ActorInfo' has a wrong offset!");

// Function Item_NinjaHeadband_ItemAbility.Item_NinjaHeadband_ItemAbility_C.BP_OnAbilityActivated_Authority
// 0x0040 (0x0040 - 0x0000)
struct Item_NinjaHeadband_ItemAbility_C_BP_OnAbilityActivated_Authority final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(Item_NinjaHeadband_ItemAbility_C_BP_OnAbilityActivated_Authority) == 0x000008, "Wrong alignment on Item_NinjaHeadband_ItemAbility_C_BP_OnAbilityActivated_Authority");
static_assert(sizeof(Item_NinjaHeadband_ItemAbility_C_BP_OnAbilityActivated_Authority) == 0x000040, "Wrong size on Item_NinjaHeadband_ItemAbility_C_BP_OnAbilityActivated_Authority");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_BP_OnAbilityActivated_Authority, ActorInfo) == 0x000000, "Member 'Item_NinjaHeadband_ItemAbility_C_BP_OnAbilityActivated_Authority::ActorInfo' has a wrong offset!");

// Function Item_NinjaHeadband_ItemAbility.Item_NinjaHeadband_ItemAbility_C.OnMoveAffectingGameplayEffectRemovedDelegate_Event_0
// 0x0018 (0x0018 - 0x0000)
struct Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectRemovedDelegate_Event_0 final
{
public:
	class UClass*                                 GameplayEffect;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      Character;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PriorGameplayEffectCount;                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GameplayEffectLevel;                               // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectRemovedDelegate_Event_0) == 0x000008, "Wrong alignment on Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectRemovedDelegate_Event_0");
static_assert(sizeof(Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectRemovedDelegate_Event_0) == 0x000018, "Wrong size on Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectRemovedDelegate_Event_0");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectRemovedDelegate_Event_0, GameplayEffect) == 0x000000, "Member 'Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectRemovedDelegate_Event_0::GameplayEffect' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectRemovedDelegate_Event_0, Character) == 0x000008, "Member 'Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectRemovedDelegate_Event_0::Character' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectRemovedDelegate_Event_0, PriorGameplayEffectCount) == 0x000010, "Member 'Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectRemovedDelegate_Event_0::PriorGameplayEffectCount' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectRemovedDelegate_Event_0, GameplayEffectLevel) == 0x000014, "Member 'Item_NinjaHeadband_ItemAbility_C_OnMoveAffectingGameplayEffectRemovedDelegate_Event_0::GameplayEffectLevel' has a wrong offset!");

// Function Item_NinjaHeadband_ItemAbility.Item_NinjaHeadband_ItemAbility_C.GetHeadbandTransformPerCharacter
// 0x00C0 (0x00C0 - 0x0000)
struct Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Scale;                                             // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue; // 0x0038(0x0028)(HasGetValueTypeHash)
	struct FTransform                             CallFunc_Map_Find_Value;                           // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter) == 0x000010, "Wrong alignment on Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter");
static_assert(sizeof(Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter) == 0x0000C0, "Wrong size on Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter, Location) == 0x000000, "Member 'Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter::Location' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter, Rotation) == 0x00000C, "Member 'Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter::Rotation' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter, Scale) == 0x000018, "Member 'Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter::Scale' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter, CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue) == 0x000028, "Member 'Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter::CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter, CallFunc_GetObjectClass_ReturnValue) == 0x000030, "Member 'Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter, CallFunc_Conv_ClassToSoftClassReference_ReturnValue) == 0x000038, "Member 'Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter::CallFunc_Conv_ClassToSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter, CallFunc_Map_Find_Value) == 0x000060, "Member 'Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter, CallFunc_BreakTransform_Location) == 0x000094, "Member 'Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter, CallFunc_BreakTransform_Rotation) == 0x0000A0, "Member 'Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter, CallFunc_BreakTransform_Scale) == 0x0000AC, "Member 'Item_NinjaHeadband_ItemAbility_C_GetHeadbandTransformPerCharacter::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function Item_NinjaHeadband_ItemAbility.Item_NinjaHeadband_ItemAbility_C.InitializeHeadbandActor
// 0x0200 (0x0200 - 0x0000)
struct Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor final
{
public:
	bool                                          HasMeshSocket;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EAttachmentRule                               Temp_byte_Variable;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttachmentRule                               Temp_byte_Variable_1;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttachmentRule                               K2Node_Select_Default;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesSocketExist_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_HasAuthority_ReturnValue;              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetHeadbandTransformPerCharacter_Location; // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetHeadbandTransformPerCharacter_Rotation; // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetHeadbandTransformPerCharacter_Scale;   // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetHeadbandTransformPerCharacter_Location_1; // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetHeadbandTransformPerCharacter_Rotation_1; // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetHeadbandTransformPerCharacter_Scale_1; // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorRelativeRotation_SweepHitResult; // 0x006C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetActorRelativeLocation_SweepHitResult; // 0x00F4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FName                                   K2Node_Select_Default_1;                           // 0x017C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_1; // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_2; // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0xC];                                      // 0x01A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x01B0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AItem_NinjaHeadband_AttachmentActor_C*  K2Node_DynamicCast_AsItem_Ninja_Headband_Attachment_Actor; // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor) == 0x000010, "Wrong alignment on Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor");
static_assert(sizeof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor) == 0x000200, "Wrong size on Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, HasMeshSocket) == 0x000000, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::HasMeshSocket' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, Temp_name_Variable) == 0x000004, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, Temp_bool_Variable) == 0x00000C, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, Temp_byte_Variable) == 0x00000D, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, Temp_byte_Variable_1) == 0x00000E, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, K2Node_Select_Default) == 0x00000F, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue) == 0x000010, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, Temp_bool_Variable_1) == 0x000018, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_DoesSocketExist_ReturnValue) == 0x000019, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_DoesSocketExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_IsValid_ReturnValue) == 0x00001A, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_BP_HasAuthority_ReturnValue) == 0x00001B, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_BP_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_GetHeadbandTransformPerCharacter_Location) == 0x00001C, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_GetHeadbandTransformPerCharacter_Location' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_GetHeadbandTransformPerCharacter_Rotation) == 0x000028, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_GetHeadbandTransformPerCharacter_Rotation' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_GetHeadbandTransformPerCharacter_Scale) == 0x000034, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_GetHeadbandTransformPerCharacter_Scale' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_GetHeadbandTransformPerCharacter_Location_1) == 0x000040, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_GetHeadbandTransformPerCharacter_Location_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_GetHeadbandTransformPerCharacter_Rotation_1) == 0x00004C, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_GetHeadbandTransformPerCharacter_Rotation_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_GetHeadbandTransformPerCharacter_Scale_1) == 0x000058, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_GetHeadbandTransformPerCharacter_Scale_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, Temp_name_Variable_1) == 0x000064, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_K2_SetActorRelativeRotation_SweepHitResult) == 0x00006C, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_K2_SetActorRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_K2_SetActorRelativeLocation_SweepHitResult) == 0x0000F4, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_K2_SetActorRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, K2Node_Select_Default_1) == 0x00017C, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_1) == 0x000188, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_2) == 0x000190, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_GetAvatarCharacterFromActorInfo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_GetSocketLocation_ReturnValue) == 0x000198, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_MakeTransform_ReturnValue) == 0x0001B0, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0001E0, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, CallFunc_FinishSpawningActor_ReturnValue) == 0x0001E8, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, K2Node_DynamicCast_AsItem_Ninja_Headband_Attachment_Actor) == 0x0001F0, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::K2Node_DynamicCast_AsItem_Ninja_Headband_Attachment_Actor' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor, K2Node_DynamicCast_bSuccess) == 0x0001F8, "Member 'Item_NinjaHeadband_ItemAbility_C_InitializeHeadbandActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function Item_NinjaHeadband_ItemAbility.Item_NinjaHeadband_ItemAbility_C.ApplyNinjaHeadbandEffect_MoveAffecting
// 0x0010 (0x0010 - 0x0000)
struct Item_NinjaHeadband_ItemAbility_C_ApplyNinjaHeadbandEffect_MoveAffecting final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerAbilitySystemComponent*         CallFunc_GetOwningAbilitySystemComponent_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Item_NinjaHeadband_ItemAbility_C_ApplyNinjaHeadbandEffect_MoveAffecting) == 0x000008, "Wrong alignment on Item_NinjaHeadband_ItemAbility_C_ApplyNinjaHeadbandEffect_MoveAffecting");
static_assert(sizeof(Item_NinjaHeadband_ItemAbility_C_ApplyNinjaHeadbandEffect_MoveAffecting) == 0x000010, "Wrong size on Item_NinjaHeadband_ItemAbility_C_ApplyNinjaHeadbandEffect_MoveAffecting");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ApplyNinjaHeadbandEffect_MoveAffecting, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'Item_NinjaHeadband_ItemAbility_C_ApplyNinjaHeadbandEffect_MoveAffecting::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_ApplyNinjaHeadbandEffect_MoveAffecting, CallFunc_GetOwningAbilitySystemComponent_ReturnValue) == 0x000008, "Member 'Item_NinjaHeadband_ItemAbility_C_ApplyNinjaHeadbandEffect_MoveAffecting::CallFunc_GetOwningAbilitySystemComponent_ReturnValue' has a wrong offset!");

// Function Item_NinjaHeadband_ItemAbility.Item_NinjaHeadband_ItemAbility_C.RemoveNinjaHeadbandEffect
// 0x0008 (0x0008 - 0x0000)
struct Item_NinjaHeadband_ItemAbility_C_RemoveNinjaHeadbandEffect final
{
public:
	class UMarinerAbilitySystemComponent*         CallFunc_GetOwningAbilitySystemComponent_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Item_NinjaHeadband_ItemAbility_C_RemoveNinjaHeadbandEffect) == 0x000008, "Wrong alignment on Item_NinjaHeadband_ItemAbility_C_RemoveNinjaHeadbandEffect");
static_assert(sizeof(Item_NinjaHeadband_ItemAbility_C_RemoveNinjaHeadbandEffect) == 0x000008, "Wrong size on Item_NinjaHeadband_ItemAbility_C_RemoveNinjaHeadbandEffect");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_RemoveNinjaHeadbandEffect, CallFunc_GetOwningAbilitySystemComponent_ReturnValue) == 0x000000, "Member 'Item_NinjaHeadband_ItemAbility_C_RemoveNinjaHeadbandEffect::CallFunc_GetOwningAbilitySystemComponent_ReturnValue' has a wrong offset!");

// Function Item_NinjaHeadband_ItemAbility.Item_NinjaHeadband_ItemAbility_C.HideNinjaHeadband
// 0x0001 (0x0001 - 0x0000)
struct Item_NinjaHeadband_ItemAbility_C_HideNinjaHeadband final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_NinjaHeadband_ItemAbility_C_HideNinjaHeadband) == 0x000001, "Wrong alignment on Item_NinjaHeadband_ItemAbility_C_HideNinjaHeadband");
static_assert(sizeof(Item_NinjaHeadband_ItemAbility_C_HideNinjaHeadband) == 0x000001, "Wrong size on Item_NinjaHeadband_ItemAbility_C_HideNinjaHeadband");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_HideNinjaHeadband, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Item_NinjaHeadband_ItemAbility_C_HideNinjaHeadband::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Item_NinjaHeadband_ItemAbility.Item_NinjaHeadband_ItemAbility_C.UnhideNinjaHeadband
// 0x0001 (0x0001 - 0x0000)
struct Item_NinjaHeadband_ItemAbility_C_UnhideNinjaHeadband final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_NinjaHeadband_ItemAbility_C_UnhideNinjaHeadband) == 0x000001, "Wrong alignment on Item_NinjaHeadband_ItemAbility_C_UnhideNinjaHeadband");
static_assert(sizeof(Item_NinjaHeadband_ItemAbility_C_UnhideNinjaHeadband) == 0x000001, "Wrong size on Item_NinjaHeadband_ItemAbility_C_UnhideNinjaHeadband");
static_assert(offsetof(Item_NinjaHeadband_ItemAbility_C_UnhideNinjaHeadband, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Item_NinjaHeadband_ItemAbility_C_UnhideNinjaHeadband::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

