#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterCommonTargeting

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mariner_structs.hpp"
#include "Mariner_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass CharacterCommonTargeting.CharacterCommonTargeting_C
// 0x0050 (0x0468 - 0x0418)
class UCharacterCommonTargeting_C final : public UMarinerAnimatedWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0418(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       LockOnConfirmation;                                // 0x0420(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LockOnComplete;                                    // 0x0428(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LockOnLoop;                                        // 0x0430(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LockOnStart;                                       // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 SharedArrow_Bot;                                   // 0x0440(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SharedArrow_Left;                                  // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SharedArrow_Right;                                 // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SharedArrow_Top;                                   // 0x0458(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class AMarinerCharacter*                      LockedCharacter;                                   // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_CharacterCommonTargeting(int32 EntryPoint);
	void CustomEvent_0(class AMarinerCharacter* ShiftingCharacter, EMarinerRealityState EnteringReality, bool bCharacterIsLocal);
	void WidgetAnimationEvt_LockOnConfirmation_K2Node_WidgetAnimationEvent_2();
	void WidgetAnimationEvt_LockOnComplete_K2Node_WidgetAnimationEvent_1();
	void WidgetAnimationEvt_LockOnStart_K2Node_WidgetAnimationEvent_0();
	void CompleteLockOn(class AMarinerCharacter* Param_LockedCharacter);
	void LoopLockOn();
	void StartLockOn();
	void EndLockOn();
	void SetArrowColors(bool LockedOn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CharacterCommonTargeting_C">();
	}
	static class UCharacterCommonTargeting_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterCommonTargeting_C>();
	}
};
static_assert(alignof(UCharacterCommonTargeting_C) == 0x000008, "Wrong alignment on UCharacterCommonTargeting_C");
static_assert(sizeof(UCharacterCommonTargeting_C) == 0x000468, "Wrong size on UCharacterCommonTargeting_C");
static_assert(offsetof(UCharacterCommonTargeting_C, UberGraphFrame) == 0x000418, "Member 'UCharacterCommonTargeting_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCharacterCommonTargeting_C, LockOnConfirmation) == 0x000420, "Member 'UCharacterCommonTargeting_C::LockOnConfirmation' has a wrong offset!");
static_assert(offsetof(UCharacterCommonTargeting_C, LockOnComplete) == 0x000428, "Member 'UCharacterCommonTargeting_C::LockOnComplete' has a wrong offset!");
static_assert(offsetof(UCharacterCommonTargeting_C, LockOnLoop) == 0x000430, "Member 'UCharacterCommonTargeting_C::LockOnLoop' has a wrong offset!");
static_assert(offsetof(UCharacterCommonTargeting_C, LockOnStart) == 0x000438, "Member 'UCharacterCommonTargeting_C::LockOnStart' has a wrong offset!");
static_assert(offsetof(UCharacterCommonTargeting_C, SharedArrow_Bot) == 0x000440, "Member 'UCharacterCommonTargeting_C::SharedArrow_Bot' has a wrong offset!");
static_assert(offsetof(UCharacterCommonTargeting_C, SharedArrow_Left) == 0x000448, "Member 'UCharacterCommonTargeting_C::SharedArrow_Left' has a wrong offset!");
static_assert(offsetof(UCharacterCommonTargeting_C, SharedArrow_Right) == 0x000450, "Member 'UCharacterCommonTargeting_C::SharedArrow_Right' has a wrong offset!");
static_assert(offsetof(UCharacterCommonTargeting_C, SharedArrow_Top) == 0x000458, "Member 'UCharacterCommonTargeting_C::SharedArrow_Top' has a wrong offset!");
static_assert(offsetof(UCharacterCommonTargeting_C, LockedCharacter) == 0x000460, "Member 'UCharacterCommonTargeting_C::LockedCharacter' has a wrong offset!");

}

